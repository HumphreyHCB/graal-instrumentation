begin_compilation
  name " HotSpotCompilation-81[Queens.setRowColumn(int, int, boolean)]"
  method "HotSpotCompilation-81[Queens.setRowColumn(int, int, boolean)]"
  date 1729020571477
end_compilation
begin_cfg
  name "Final HIR schedule"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B6" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v0 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
stamp: void
=== Inputs ===
stateAfter: - 
=== Succesors ===
next: a126 
=== Usages ===
=== Predecessor ===
- >@ <|@
instruction <@StartNode|@jdk.graal.compiler.nodes.StartNode>@ stateAfter: - #next: a126  <|@  <|@
f <@~|@floating>@ <|@
tid a1 <|@
d <@d|@=== Debug Properties ===
index: 0
stamp: a!# Queens
uncheckedStamp: [null]
=== Inputs ===
=== Succesors ===
=== Usages ===
?5 v132 v138 v135 
=== Predecessor ===
- >@ <|@
instruction <@Parameter|@jdk.graal.compiler.nodes.ParameterNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid v132 <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S1
=== Inputs ===
base: a1 
index: - 
=== Succesors ===
=== Usages ===
a126 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a1 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid a126 <|@
d <@d|@=== Debug Properties ===
accessStamp: n# boolean[]
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Queens.freeRows
memoryOrder: PLAIN
nodeSourcePosition: at Queens.setRowColumn(int, int, boolean) [bci: 1]
stamp: n# boolean[]
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v132 
lastLocationAccess: - 
=== Succesors ===
next: i127 
=== Usages ===
v134 v133 
=== Predecessor ===
v0 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v132 lastLocationAccess: - #next: i127  <|@  <|@
f <@~|@floating>@ <|@
tid i2 <|@
d <@d|@=== Debug Properties ===
index: 1
stamp: i32
uncheckedStamp: [null]
=== Inputs ===
=== Succesors ===
=== Usages ===
?5 j75 i16 i12 v32 
=== Predecessor ===
- >@ <|@
instruction <@Parameter|@jdk.graal.compiler.nodes.ParameterNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid i3 <|@
d <@d|@=== Debug Properties ===
index: 2
stamp: i32
uncheckedStamp: [null]
=== Inputs ===
=== Succesors ===
=== Usages ===
?5 i16 i12 
=== Predecessor ===
- >@ <|@
instruction <@Parameter|@jdk.graal.compiler.nodes.ParameterNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid i4 <|@
d <@d|@=== Debug Properties ===
index: 3
stamp: i32
uncheckedStamp: [null]
=== Inputs ===
=== Succesors ===
=== Usages ===
?5 i7 
=== Predecessor ===
- >@ <|@
instruction <@Parameter|@jdk.graal.compiler.nodes.ParameterNode>@  <|@  <|@
tid ?5 <|@
d <@d|@=== Debug Properties ===
bci: 0
bytecode: aload_0
code: ResolvedJavaMethodBytecode<Queens.setRowColumn(int, int, boolean)>
localsSize: 4
locksSize: 0
stackSize: 0
stackState: BeforePop
validForDeoptimization: true
=== Inputs ===
outerFrameState: - 
values: a1 i2 i3 i4 
=== Succesors ===
=== Usages ===
v115 i127 i129 i131 
=== Predecessor ===
- >@ <|@
instruction <@FrameState|@jdk.graal.compiler.nodes.FrameState>@ outerFrameState: - values: a1 i2 i3 i4  <|@  <|@
f <@~|@floating>@ <|@
tid v133 <|@
d <@d|@=== Debug Properties ===
displacement: 12
stamp: void*
stride: S8
=== Inputs ===
base: - 
index: a126 
=== Succesors ===
=== Usages ===
i127 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: - index: a126  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i127 <|@
d <@d|@=== Debug Properties ===
accessStamp: i32 [0 - 2147483647] bits:0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
barrierType: NONE
deoptReasonAndAction: int[-6923|0xffffffffffffe4f5]
deoptSpeculation: long[0|0x0]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: [].length:final
memoryOrder: PLAIN
nodeSourcePosition: at Queens.setRowColumn(int, int, boolean) [bci: 6]
stamp: i32 [0 - 2147483647] bits:0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
usedAsNullCheck: true
=== Inputs ===
stateBefore: ?5 
guard: - 
address: v133 
lastLocationAccess: - 
=== Succesors ===
next: v92 
=== Usages ===
v32 
=== Predecessor ===
a126 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: ?5 guard: - address: v133 lastLocationAccess: - #next: v92  <|@  <|@
f <@~|@floating>@ <|@
tid v32 <|@
d <@d|@=== Debug Properties ===
condition: BT
nodeSourcePosition: at Queens.setRowColumn(int, int, boolean) [bci: 6]
op: jdk.graal.compiler.nodes.calc.IntegerBelowNode$BelowOp@5ce4369b
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i2 
y: i127 
=== Succesors ===
=== Usages ===
v92 
=== Predecessor ===
- >@ <|@
instruction <@|<||@jdk.graal.compiler.nodes.calc.IntegerBelowNode>@ x: i2 y: i127  <|@  <|@
f <@*|@fixed>@ <|@
tid v92 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at Queens.setRowColumn(int, int, boolean) [bci: 6]
profileData: INJECTED designatedSuccessorProbability: 1.0
stamp: void
=== Inputs ===
condition: v32 
=== Succesors ===
trueSuccessor: v89 
falseSuccessor: v91 
=== Usages ===
=== Predecessor ===
i127 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v32 #trueSuccessor: v89 #falseSuccessor: v91  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B5" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v89 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at Queens.setRowColumn(int, int, boolean) [bci: 6]
stamp: void
=== Inputs ===
=== Succesors ===
next: a128 
=== Usages ===
v41 
=== Predecessor ===
v92 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: a128  <|@  <|@
f <@~|@floating>@ <|@
tid v135 <|@
d <@d|@=== Debug Properties ===
displacement: 12
stamp: void*
stride: S1
=== Inputs ===
base: a1 
index: - 
=== Succesors ===
=== Usages ===
a128 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a1 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid a128 <|@
d <@d|@=== Debug Properties ===
accessStamp: n# boolean[]
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Queens.freeMaxs
memoryOrder: PLAIN
nodeSourcePosition: at Queens.setRowColumn(int, int, boolean) [bci: 8]
stamp: n# boolean[]
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v135 
lastLocationAccess: - 
=== Succesors ===
next: i129 
=== Usages ===
v137 v136 
=== Predecessor ===
v89 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v135 lastLocationAccess: - #next: i129  <|@  <|@
f <@~|@floating>@ <|@
tid v136 <|@
d <@d|@=== Debug Properties ===
displacement: 12
stamp: void*
stride: S8
=== Inputs ===
base: - 
index: a128 
=== Succesors ===
=== Usages ===
i129 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: - index: a128  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i129 <|@
d <@d|@=== Debug Properties ===
accessStamp: i32 [0 - 2147483647] bits:0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
barrierType: NONE
deoptReasonAndAction: int[-11787|0xffffffffffffd1f5]
deoptSpeculation: long[0|0x0]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: [].length:final
memoryOrder: PLAIN
nodeSourcePosition: at Queens.setRowColumn(int, int, boolean) [bci: 15]
stamp: i32 [0 - 2147483647] bits:0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
usedAsNullCheck: true
=== Inputs ===
stateBefore: ?5 
guard: - 
address: v136 
lastLocationAccess: - 
=== Succesors ===
next: v100 
=== Usages ===
v50 
=== Predecessor ===
a128 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: ?5 guard: - address: v136 lastLocationAccess: - #next: v100  <|@  <|@
f <@~|@floating>@ <|@
tid i12 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at Queens.setRowColumn(int, int, boolean) [bci: 13]
stamp: i32
=== Inputs ===
x: i2 
y: i3 
=== Succesors ===
=== Usages ===
j77 v50 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i2 y: i3  <|@  <|@
f <@~|@floating>@ <|@
tid v50 <|@
d <@d|@=== Debug Properties ===
condition: BT
nodeSourcePosition: at Queens.setRowColumn(int, int, boolean) [bci: 15]
op: jdk.graal.compiler.nodes.calc.IntegerBelowNode$BelowOp@5ce4369b
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i12 
y: i129 
=== Succesors ===
=== Usages ===
v100 
=== Predecessor ===
- >@ <|@
instruction <@|<||@jdk.graal.compiler.nodes.calc.IntegerBelowNode>@ x: i12 y: i129  <|@  <|@
f <@*|@fixed>@ <|@
tid v100 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at Queens.setRowColumn(int, int, boolean) [bci: 15]
profileData: INJECTED designatedSuccessorProbability: 1.0
stamp: void
=== Inputs ===
condition: v50 
=== Succesors ===
trueSuccessor: v97 
falseSuccessor: v99 
=== Usages ===
=== Predecessor ===
i129 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v50 #trueSuccessor: v97 #falseSuccessor: v99  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B3" "B4" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v97 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at Queens.setRowColumn(int, int, boolean) [bci: 15]
stamp: void
=== Inputs ===
=== Succesors ===
next: a130 
=== Usages ===
v57 
=== Predecessor ===
v100 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: a130  <|@  <|@
f <@~|@floating>@ <|@
tid v138 <|@
d <@d|@=== Debug Properties ===
displacement: 20
stamp: void*
stride: S1
=== Inputs ===
base: a1 
index: - 
=== Succesors ===
=== Usages ===
a130 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a1 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid a130 <|@
d <@d|@=== Debug Properties ===
accessStamp: n# boolean[]
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Queens.freeMins
memoryOrder: PLAIN
nodeSourcePosition: at Queens.setRowColumn(int, int, boolean) [bci: 17]
stamp: n# boolean[]
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v138 
lastLocationAccess: - 
=== Succesors ===
next: i131 
=== Usages ===
v140 v139 
=== Predecessor ===
v97 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v138 lastLocationAccess: - #next: i131  <|@  <|@
f <@~|@floating>@ <|@
tid v139 <|@
d <@d|@=== Debug Properties ===
displacement: 12
stamp: void*
stride: S8
=== Inputs ===
base: - 
index: a130 
=== Succesors ===
=== Usages ===
i131 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: - index: a130  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i131 <|@
d <@d|@=== Debug Properties ===
accessStamp: i32 [0 - 2147483647] bits:0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
barrierType: NONE
deoptReasonAndAction: int[-16139|0xffffffffffffc0f5]
deoptSpeculation: long[0|0x0]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: [].length:final
memoryOrder: PLAIN
nodeSourcePosition: at Queens.setRowColumn(int, int, boolean) [bci: 27]
stamp: i32 [0 - 2147483647] bits:0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
usedAsNullCheck: true
=== Inputs ===
stateBefore: ?5 
guard: - 
address: v139 
lastLocationAccess: - 
=== Succesors ===
next: v108 
=== Usages ===
v67 
=== Predecessor ===
a130 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: ?5 guard: - address: v139 lastLocationAccess: - #next: v108  <|@  <|@
f <@~|@floating>@ <|@
tid i16 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at Queens.setRowColumn(int, int, boolean) [bci: 22]
stamp: i32
=== Inputs ===
x: i3 
y: i2 
=== Succesors ===
=== Usages ===
i18 
=== Predecessor ===
- >@ <|@
instruction <@-|@jdk.graal.compiler.nodes.calc.SubNode>@ x: i3 y: i2  <|@  <|@
f <@~|@floating>@ <|@
tid i17 <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at Queens.setRowColumn(int, int, boolean) [bci: 23]
rawvalue: 7
stableDimension: 0
stamp: i32 [7]
stampKind: i32
value: int[7|0x7]
=== Inputs ===
=== Succesors ===
=== Usages ===
i18 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid i18 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at Queens.setRowColumn(int, int, boolean) [bci: 25]
stamp: i32
=== Inputs ===
x: i16 
y: i17 
=== Succesors ===
=== Usages ===
j78 v67 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i16 y: i17  <|@  <|@
f <@~|@floating>@ <|@
tid v67 <|@
d <@d|@=== Debug Properties ===
condition: BT
nodeSourcePosition: at Queens.setRowColumn(int, int, boolean) [bci: 27]
op: jdk.graal.compiler.nodes.calc.IntegerBelowNode$BelowOp@5ce4369b
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i18 
y: i131 
=== Succesors ===
=== Usages ===
v108 
=== Predecessor ===
- >@ <|@
instruction <@|<||@jdk.graal.compiler.nodes.calc.IntegerBelowNode>@ x: i18 y: i131  <|@  <|@
f <@*|@fixed>@ <|@
tid v108 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at Queens.setRowColumn(int, int, boolean) [bci: 27]
profileData: INJECTED designatedSuccessorProbability: 1.0
stamp: void
=== Inputs ===
condition: v67 
=== Succesors ===
trueSuccessor: v105 
falseSuccessor: v107 
=== Usages ===
=== Predecessor ===
i131 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v67 #trueSuccessor: v105 #falseSuccessor: v107  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v105 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at Queens.setRowColumn(int, int, boolean) [bci: 27]
stamp: void
=== Inputs ===
=== Succesors ===
next: v41 
=== Usages ===
v74 
=== Predecessor ===
v108 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v41  <|@  <|@
f <@~|@floating>@ <|@
tid j75 <|@
d <@d|@=== Debug Properties ===
inputBits: 32
nodeSourcePosition: at Queens.setRowColumn(int, int, boolean) [bci: 6]
resultBits: 64
stamp: i64 [0 - 4294967295] bits:0...0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
=== Inputs ===
value: i2 
=== Succesors ===
=== Usages ===
v134 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i2  <|@  <|@
f <@~|@floating>@ <|@
tid v134 <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S8
=== Inputs ===
base: j75 
index: a126 
=== Succesors ===
=== Usages ===
v41 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: j75 index: a126  <|@  <|@
f <@~|@floating>@ <|@
tid i7 <|@
d <@d|@=== Debug Properties ===
inputBits: 32
nodeSourcePosition: at Queens.setRowColumn(int, int, boolean) [bci: 6]
resultBits: 1
stamp: i1
=== Inputs ===
value: i4 
=== Succesors ===
=== Usages ===
i76 
=== Predecessor ===
- >@ <|@
instruction <@Narrow|@jdk.graal.compiler.nodes.calc.NarrowNode>@ value: i4  <|@  <|@
f <@~|@floating>@ <|@
tid i76 <|@
d <@d|@=== Debug Properties ===
inputBits: 1
nodeSourcePosition: at Queens.setRowColumn(int, int, boolean) [bci: 6]
resultBits: 8
stamp: i8 [0 - 1] bits:0000000x
=== Inputs ===
value: i7 
=== Succesors ===
=== Usages ===
v41 v57 v74 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i7  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v41 <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
killedLocationIdentity: Array: boolean
location: Array: boolean
memoryOrder: PLAIN
nodeSourcePosition: at Queens.setRowColumn(int, int, boolean) [bci: 6]
stamp: void
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: v89 
address: v134 
lastLocationAccess: - 
value: i76 
stateAfter: - 
=== Succesors ===
next: v57 
=== Usages ===
=== Predecessor ===
v105 >@ <|@
instruction <@Write|@jdk.graal.compiler.nodes.memory.WriteNode>@ stateBefore: - guard: v89 address: v134 lastLocationAccess: - value: i76 stateAfter: - #next: v57  <|@  <|@
f <@~|@floating>@ <|@
tid j77 <|@
d <@d|@=== Debug Properties ===
inputBits: 32
nodeSourcePosition: at Queens.setRowColumn(int, int, boolean) [bci: 15]
resultBits: 64
stamp: i64 [0 - 4294967295] bits:0...0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
=== Inputs ===
value: i12 
=== Succesors ===
=== Usages ===
v137 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i12  <|@  <|@
f <@~|@floating>@ <|@
tid v137 <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S8
=== Inputs ===
base: j77 
index: a128 
=== Succesors ===
=== Usages ===
v57 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: j77 index: a128  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v57 <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
killedLocationIdentity: Array: boolean
location: Array: boolean
memoryOrder: PLAIN
nodeSourcePosition: at Queens.setRowColumn(int, int, boolean) [bci: 15]
stamp: void
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: v97 
address: v137 
lastLocationAccess: - 
value: i76 
stateAfter: - 
=== Succesors ===
next: v74 
=== Usages ===
=== Predecessor ===
v41 >@ <|@
instruction <@Write|@jdk.graal.compiler.nodes.memory.WriteNode>@ stateBefore: - guard: v97 address: v137 lastLocationAccess: - value: i76 stateAfter: - #next: v74  <|@  <|@
f <@~|@floating>@ <|@
tid j78 <|@
d <@d|@=== Debug Properties ===
inputBits: 32
nodeSourcePosition: at Queens.setRowColumn(int, int, boolean) [bci: 27]
resultBits: 64
stamp: i64 [0 - 4294967295] bits:0...0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
=== Inputs ===
value: i18 
=== Succesors ===
=== Usages ===
v140 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i18  <|@  <|@
f <@~|@floating>@ <|@
tid v140 <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S8
=== Inputs ===
base: j78 
index: a130 
=== Succesors ===
=== Usages ===
v74 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: j78 index: a130  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v74 <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
killedLocationIdentity: Array: boolean
location: Array: boolean
memoryOrder: PLAIN
nodeSourcePosition: at Queens.setRowColumn(int, int, boolean) [bci: 27]
stamp: void
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: v105 
address: v140 
lastLocationAccess: - 
value: i76 
stateAfter: - 
=== Succesors ===
next: v21 
=== Usages ===
=== Predecessor ===
v57 >@ <|@
instruction <@Write|@jdk.graal.compiler.nodes.memory.WriteNode>@ stateBefore: - guard: v105 address: v140 lastLocationAccess: - value: i76 stateAfter: - #next: v21  <|@  <|@
f <@*|@fixed>@ <|@
tid v21 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at Queens.setRowColumn(int, int, boolean) [bci: 28]
stamp: void
=== Inputs ===
memoryMap: - 
result: - 
=== Succesors ===
=== Usages ===
=== Predecessor ===
v74 >@ <|@
instruction <@Return|@jdk.graal.compiler.nodes.ReturnNode>@ memoryMap: - result: -  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B7" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v107 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at Queens.setRowColumn(int, int, boolean) [bci: 27]
stamp: void
=== Inputs ===
=== Succesors ===
next: v124 
=== Usages ===
=== Predecessor ===
v108 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v124  <|@  <|@
f <@~|@floating>@ <|@
tid i125 <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at Queens.setRowColumn(int, int, boolean) [bci: 6]
rawvalue: -17435
stableDimension: 0
stamp: i32 [-17435]
stampKind: i32
value: int[-17435|0xffffffffffffbbe5]
=== Inputs ===
=== Succesors ===
=== Usages ===
i113 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@*|@fixed>@ <|@
tid v124 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at Queens.setRowColumn(int, int, boolean) [bci: 6]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v109 
=== Predecessor ===
v107 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B7" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v99 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at Queens.setRowColumn(int, int, boolean) [bci: 15]
stamp: void
=== Inputs ===
=== Succesors ===
next: v122 
=== Usages ===
=== Predecessor ===
v100 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v122  <|@  <|@
f <@~|@floating>@ <|@
tid i123 <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at Queens.setRowColumn(int, int, boolean) [bci: 6]
rawvalue: -13083
stableDimension: 0
stamp: i32 [-13083]
stampKind: i32
value: int[-13083|0xffffffffffffcce5]
=== Inputs ===
=== Succesors ===
=== Usages ===
i113 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@*|@fixed>@ <|@
tid v122 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at Queens.setRowColumn(int, int, boolean) [bci: 6]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v109 
=== Predecessor ===
v99 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B7" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v91 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at Queens.setRowColumn(int, int, boolean) [bci: 6]
stamp: void
=== Inputs ===
=== Succesors ===
next: v118 
=== Usages ===
=== Predecessor ===
v92 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v118  <|@  <|@
f <@~|@floating>@ <|@
tid i119 <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at Queens.setRowColumn(int, int, boolean) [bci: 6]
rawvalue: -8475
stableDimension: 0
stamp: i32 [-8475]
stampKind: i32
value: int[-8475|0xffffffffffffdee5]
=== Inputs ===
=== Succesors ===
=== Usages ===
i113 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@*|@fixed>@ <|@
tid v118 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at Queens.setRowColumn(int, int, boolean) [bci: 6]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v109 
=== Predecessor ===
v91 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B6" "B5" "B4" 
    successors 
    xhandlers
    flags 
    probability 2362138004555825152
    begin_IR
      HIR
f <@~|@floating>@ <|@
tid i113 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at Queens.setRowColumn(int, int, boolean) [bci: 6]
stamp: i32 [-17435 - -8475] bits:1...1xxx1xxx11100101
valueDescription: i32
=== Inputs ===
merge: v109 
values: i119 i123 i125 
=== Succesors ===
=== Usages ===
v115 
=== Predecessor ===
- >@ <|@
instruction <@ValuePhi|@jdk.graal.compiler.nodes.ValuePhiNode>@ merge: v109 values: i119 i123 i125  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v109 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at Queens.setRowColumn(int, int, boolean) [bci: 6]
stamp: void
=== Inputs ===
stateAfter: - 
ends: v118 v122 v124 
=== Succesors ===
next: v115 
=== Usages ===
i113 
=== Predecessor ===
- >@ <|@
instruction <@Merge|@jdk.graal.compiler.nodes.MergeNode>@ stateAfter: - ends: v118 v122 v124 #next: v115  <|@  <|@
f <@~|@floating>@ <|@
tid j112 <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at Queens.setRowColumn(int, int, boolean) [bci: 6]
rawvalue: 0
stableDimension: 0
stamp: i64 [0]
stampKind: i64
value: long[0|0x0]
=== Inputs ===
=== Succesors ===
=== Usages ===
v115 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@*|@fixed>@ <|@
tid v115 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at Queens.setRowColumn(int, int, boolean) [bci: 6]
stamp: void
=== Inputs ===
stateBefore: ?5 
actionAndReason: i113 
speculation: j112 
=== Succesors ===
=== Usages ===
=== Predecessor ===
v109 >@ <|@
instruction <@DynamicDeoptimize|@jdk.graal.compiler.nodes.DynamicDeoptimizeNode>@ stateBefore: ?5 actionAndReason: i113 speculation: j112  <|@  <|@
    end_IR
  end_block
end_cfg
begin_cfg
  name "After LIRGeneration"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B6" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [rsi|QWORD[.], rdx|DWORD, rcx|DWORD, r8|DWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@276f26a2 slotKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v0|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v1|DWORD = MOVE input: rdx|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v2|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v3|DWORD = MOVE input: r8|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v4|DWORD[_] = MOV input: [v0|QWORD[.] + 16] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@Queens.setRowColumn(int, int, boolean) [bci: 0]
locals: v0|QWORD[.] v1|DWORD v2|DWORD v3|DWORD 
>@ <|@ instruction CMPBRANCH (x: v1|DWORD, y: [v4|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B0 -> B1 falseDestination: B0 -> B6 size: DWORD state [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B5" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v5|DWORD[_] = MOV input: [v0|QWORD[.] + 12] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v6|DWORD = ADD (x: v2|DWORD, y: v1|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@Queens.setRowColumn(int, int, boolean) [bci: 0]
locals: v0|QWORD[.] v1|DWORD v2|DWORD v3|DWORD 
>@ <|@ instruction CMPBRANCH (x: v6|DWORD, y: [v5|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B1 -> B2 falseDestination: B1 -> B5 size: DWORD state [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B3" "B4" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v7|DWORD[_] = MOV input: [v0|QWORD[.] + 20] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v8|DWORD = SUB (x: v2|DWORD, ~y: v1|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v9|DWORD = LEA address: [v8|DWORD + 7] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@Queens.setRowColumn(int, int, boolean) [bci: 0]
locals: v0|QWORD[.] v1|DWORD v2|DWORD v3|DWORD 
>@ <|@ instruction CMPBRANCH (x: v9|DWORD, y: [v7|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B2 -> B3 falseDestination: B2 -> B4 size: DWORD state [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v10|QWORD = MOV value: v1|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction v11|DWORD = AND x: v3|DWORD alignment: 4 size: DWORD y: int[1|0x1] <|@ <|@
      nr   -1  <|@ instruction MOVB (x: [v10|QWORD + v4|DWORD[_] * 8 + 16], y: v11|DWORD) size: BYTE <|@ <|@
      nr   -1  <|@ instruction MOVB (x: [v6|DWORD + v5|DWORD[_] * 8 + 16], y: v11|DWORD) size: BYTE <|@ <|@
      nr   -1  <|@ instruction MOVB (x: [v9|DWORD + v7|DWORD[_] * 8 + 16], y: v11|DWORD) size: BYTE <|@ <|@
      nr   -1  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: -) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@3dbf6f45 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B7" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-8475|0xffffffffffffdee5]] destination: B6 -> B7 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B7" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-13083|0xffffffffffffcce5]] destination: B5 -> B7 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B7" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-17435|0xffffffffffffbbe5]] destination: B4 -> B7 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B6" "B5" "B4" 
    successors 
    xhandlers
    flags 
    probability 2362138004555825152
    begin_IR
      LIR
      nr   -1  <|@ instruction [v12|DWORD] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr   -1  <|@ instruction MOV (x: [r15|QWORD + 1156], y: v12|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@Queens.setRowColumn(int, int, boolean) [bci: 0]
locals: v0|QWORD[.] v1|DWORD v2|DWORD v3|DWORD 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: aload_0       
     1: getfield      #3          // freeRows:boolean[]
     4: iload_1       
     5: iload_3       
     6: bastore       
     7: aload_0       
     8: getfield      #5          // freeMaxs:boolean[]
    11: iload_2       
    12: iload_1       
    13: iadd          
    14: iload_3       
    15: bastore       
    16: aload_0       
    17: getfield      #6          // freeMins:boolean[]
    20: iload_2       
    21: iload_1       
    22: isub          
    23: bipush        7
    25: iadd          
    26: iload_3       
    27: bastore       
    28: return        
   <|@
end_bytecodes
begin_cfg
  name "After LIR generation"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B6" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v0 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
stamp: void
=== Inputs ===
stateAfter: - 
=== Succesors ===
next: a126 
=== Usages ===
=== Predecessor ===
- >@ <|@
instruction <@StartNode|@jdk.graal.compiler.nodes.StartNode>@ stateAfter: - #next: a126  <|@  <|@
f <@~|@floating>@ <|@
tid a1 <|@
result v0|QWORD[.] <|@
d <@d|@=== Debug Properties ===
index: 0
stamp: a!# Queens
uncheckedStamp: [null]
=== Inputs ===
=== Succesors ===
=== Usages ===
?5 v132 v138 v135 
=== Predecessor ===
- >@ <|@
instruction <@Parameter|@jdk.graal.compiler.nodes.ParameterNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid v132 <|@
result [v0|QWORD[.] + 16] <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S1
=== Inputs ===
base: a1 
index: - 
=== Succesors ===
=== Usages ===
a126 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a1 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid a126 <|@
result v4|DWORD[_] <|@
d <@d|@=== Debug Properties ===
accessStamp: n# boolean[]
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Queens.freeRows
memoryOrder: PLAIN
nodeSourcePosition: at Queens.setRowColumn(int, int, boolean) [bci: 1]
stamp: n# boolean[]
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v132 
lastLocationAccess: - 
=== Succesors ===
next: i127 
=== Usages ===
v134 v133 
=== Predecessor ===
v0 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v132 lastLocationAccess: - #next: i127  <|@  <|@
f <@~|@floating>@ <|@
tid i2 <|@
result v1|DWORD <|@
d <@d|@=== Debug Properties ===
index: 1
stamp: i32
uncheckedStamp: [null]
=== Inputs ===
=== Succesors ===
=== Usages ===
?5 j75 i16 i12 v32 
=== Predecessor ===
- >@ <|@
instruction <@Parameter|@jdk.graal.compiler.nodes.ParameterNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid i3 <|@
result v2|DWORD <|@
d <@d|@=== Debug Properties ===
index: 2
stamp: i32
uncheckedStamp: [null]
=== Inputs ===
=== Succesors ===
=== Usages ===
?5 i16 i12 
=== Predecessor ===
- >@ <|@
instruction <@Parameter|@jdk.graal.compiler.nodes.ParameterNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid i4 <|@
result v3|DWORD <|@
d <@d|@=== Debug Properties ===
index: 3
stamp: i32
uncheckedStamp: [null]
=== Inputs ===
=== Succesors ===
=== Usages ===
?5 i7 
=== Predecessor ===
- >@ <|@
instruction <@Parameter|@jdk.graal.compiler.nodes.ParameterNode>@  <|@  <|@
tid ?5 <|@
d <@d|@=== Debug Properties ===
bci: 0
bytecode: aload_0
code: ResolvedJavaMethodBytecode<Queens.setRowColumn(int, int, boolean)>
localsSize: 4
locksSize: 0
stackSize: 0
stackState: BeforePop
validForDeoptimization: true
=== Inputs ===
outerFrameState: - 
values: a1 i2 i3 i4 
=== Succesors ===
=== Usages ===
v115 i127 i129 i131 
=== Predecessor ===
- >@ <|@
instruction <@FrameState|@jdk.graal.compiler.nodes.FrameState>@ outerFrameState: - values: a1 i2 i3 i4  <|@  <|@
f <@~|@floating>@ <|@
tid v133 <|@
result [v4|DWORD[_] * 8 + 12] <|@
d <@d|@=== Debug Properties ===
displacement: 12
stamp: void*
stride: S8
=== Inputs ===
base: - 
index: a126 
=== Succesors ===
=== Usages ===
i127 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: - index: a126  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i127 <|@
d <@d|@=== Debug Properties ===
accessStamp: i32 [0 - 2147483647] bits:0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
barrierType: NONE
deoptReasonAndAction: int[-6923|0xffffffffffffe4f5]
deoptSpeculation: long[0|0x0]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: [].length:final
memoryOrder: PLAIN
nodeSourcePosition: at Queens.setRowColumn(int, int, boolean) [bci: 6]
stamp: i32 [0 - 2147483647] bits:0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
usedAsNullCheck: true
=== Inputs ===
stateBefore: ?5 
guard: - 
address: v133 
lastLocationAccess: - 
=== Succesors ===
next: v92 
=== Usages ===
v32 
=== Predecessor ===
a126 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: ?5 guard: - address: v133 lastLocationAccess: - #next: v92  <|@  <|@
f <@~|@floating>@ <|@
tid v32 <|@
d <@d|@=== Debug Properties ===
condition: BT
nodeSourcePosition: at Queens.setRowColumn(int, int, boolean) [bci: 6]
op: jdk.graal.compiler.nodes.calc.IntegerBelowNode$BelowOp@5ce4369b
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i2 
y: i127 
=== Succesors ===
=== Usages ===
v92 
=== Predecessor ===
- >@ <|@
instruction <@|<||@jdk.graal.compiler.nodes.calc.IntegerBelowNode>@ x: i2 y: i127  <|@  <|@
f <@*|@fixed>@ <|@
tid v92 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at Queens.setRowColumn(int, int, boolean) [bci: 6]
profileData: INJECTED designatedSuccessorProbability: 1.0
stamp: void
=== Inputs ===
condition: v32 
=== Succesors ===
trueSuccessor: v89 
falseSuccessor: v91 
=== Usages ===
=== Predecessor ===
i127 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v32 #trueSuccessor: v89 #falseSuccessor: v91  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [rsi|QWORD[.], rdx|DWORD, rcx|DWORD, r8|DWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@276f26a2 slotKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v0|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v1|DWORD = MOVE input: rdx|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v2|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v3|DWORD = MOVE input: r8|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v4|DWORD[_] = MOV input: [v0|QWORD[.] + 16] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@Queens.setRowColumn(int, int, boolean) [bci: 0]
locals: v0|QWORD[.] v1|DWORD v2|DWORD v3|DWORD 
>@ <|@ instruction CMPBRANCH (x: v1|DWORD, y: [v4|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B0 -> B1 falseDestination: B0 -> B6 size: DWORD state [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B5" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v89 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at Queens.setRowColumn(int, int, boolean) [bci: 6]
stamp: void
=== Inputs ===
=== Succesors ===
next: a128 
=== Usages ===
v41 
=== Predecessor ===
v92 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: a128  <|@  <|@
f <@~|@floating>@ <|@
tid v135 <|@
result [v0|QWORD[.] + 12] <|@
d <@d|@=== Debug Properties ===
displacement: 12
stamp: void*
stride: S1
=== Inputs ===
base: a1 
index: - 
=== Succesors ===
=== Usages ===
a128 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a1 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid a128 <|@
result v5|DWORD[_] <|@
d <@d|@=== Debug Properties ===
accessStamp: n# boolean[]
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Queens.freeMaxs
memoryOrder: PLAIN
nodeSourcePosition: at Queens.setRowColumn(int, int, boolean) [bci: 8]
stamp: n# boolean[]
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v135 
lastLocationAccess: - 
=== Succesors ===
next: i129 
=== Usages ===
v137 v136 
=== Predecessor ===
v89 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v135 lastLocationAccess: - #next: i129  <|@  <|@
f <@~|@floating>@ <|@
tid v136 <|@
result [v5|DWORD[_] * 8 + 12] <|@
d <@d|@=== Debug Properties ===
displacement: 12
stamp: void*
stride: S8
=== Inputs ===
base: - 
index: a128 
=== Succesors ===
=== Usages ===
i129 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: - index: a128  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i129 <|@
d <@d|@=== Debug Properties ===
accessStamp: i32 [0 - 2147483647] bits:0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
barrierType: NONE
deoptReasonAndAction: int[-11787|0xffffffffffffd1f5]
deoptSpeculation: long[0|0x0]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: [].length:final
memoryOrder: PLAIN
nodeSourcePosition: at Queens.setRowColumn(int, int, boolean) [bci: 15]
stamp: i32 [0 - 2147483647] bits:0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
usedAsNullCheck: true
=== Inputs ===
stateBefore: ?5 
guard: - 
address: v136 
lastLocationAccess: - 
=== Succesors ===
next: v100 
=== Usages ===
v50 
=== Predecessor ===
a128 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: ?5 guard: - address: v136 lastLocationAccess: - #next: v100  <|@  <|@
f <@~|@floating>@ <|@
tid i12 <|@
result v6|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at Queens.setRowColumn(int, int, boolean) [bci: 13]
stamp: i32
=== Inputs ===
x: i2 
y: i3 
=== Succesors ===
=== Usages ===
j77 v50 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i2 y: i3  <|@  <|@
f <@~|@floating>@ <|@
tid v50 <|@
d <@d|@=== Debug Properties ===
condition: BT
nodeSourcePosition: at Queens.setRowColumn(int, int, boolean) [bci: 15]
op: jdk.graal.compiler.nodes.calc.IntegerBelowNode$BelowOp@5ce4369b
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i12 
y: i129 
=== Succesors ===
=== Usages ===
v100 
=== Predecessor ===
- >@ <|@
instruction <@|<||@jdk.graal.compiler.nodes.calc.IntegerBelowNode>@ x: i12 y: i129  <|@  <|@
f <@*|@fixed>@ <|@
tid v100 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at Queens.setRowColumn(int, int, boolean) [bci: 15]
profileData: INJECTED designatedSuccessorProbability: 1.0
stamp: void
=== Inputs ===
condition: v50 
=== Succesors ===
trueSuccessor: v97 
falseSuccessor: v99 
=== Usages ===
=== Predecessor ===
i129 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v50 #trueSuccessor: v97 #falseSuccessor: v99  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v5|DWORD[_] = MOV input: [v0|QWORD[.] + 12] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v6|DWORD = ADD (x: v2|DWORD, y: v1|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@Queens.setRowColumn(int, int, boolean) [bci: 0]
locals: v0|QWORD[.] v1|DWORD v2|DWORD v3|DWORD 
>@ <|@ instruction CMPBRANCH (x: v6|DWORD, y: [v5|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B1 -> B2 falseDestination: B1 -> B5 size: DWORD state [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B3" "B4" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v97 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at Queens.setRowColumn(int, int, boolean) [bci: 15]
stamp: void
=== Inputs ===
=== Succesors ===
next: a130 
=== Usages ===
v57 
=== Predecessor ===
v100 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: a130  <|@  <|@
f <@~|@floating>@ <|@
tid v138 <|@
result [v0|QWORD[.] + 20] <|@
d <@d|@=== Debug Properties ===
displacement: 20
stamp: void*
stride: S1
=== Inputs ===
base: a1 
index: - 
=== Succesors ===
=== Usages ===
a130 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a1 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid a130 <|@
result v7|DWORD[_] <|@
d <@d|@=== Debug Properties ===
accessStamp: n# boolean[]
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Queens.freeMins
memoryOrder: PLAIN
nodeSourcePosition: at Queens.setRowColumn(int, int, boolean) [bci: 17]
stamp: n# boolean[]
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v138 
lastLocationAccess: - 
=== Succesors ===
next: i131 
=== Usages ===
v140 v139 
=== Predecessor ===
v97 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v138 lastLocationAccess: - #next: i131  <|@  <|@
f <@~|@floating>@ <|@
tid v139 <|@
result [v7|DWORD[_] * 8 + 12] <|@
d <@d|@=== Debug Properties ===
displacement: 12
stamp: void*
stride: S8
=== Inputs ===
base: - 
index: a130 
=== Succesors ===
=== Usages ===
i131 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: - index: a130  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i131 <|@
d <@d|@=== Debug Properties ===
accessStamp: i32 [0 - 2147483647] bits:0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
barrierType: NONE
deoptReasonAndAction: int[-16139|0xffffffffffffc0f5]
deoptSpeculation: long[0|0x0]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: [].length:final
memoryOrder: PLAIN
nodeSourcePosition: at Queens.setRowColumn(int, int, boolean) [bci: 27]
stamp: i32 [0 - 2147483647] bits:0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
usedAsNullCheck: true
=== Inputs ===
stateBefore: ?5 
guard: - 
address: v139 
lastLocationAccess: - 
=== Succesors ===
next: v108 
=== Usages ===
v67 
=== Predecessor ===
a130 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: ?5 guard: - address: v139 lastLocationAccess: - #next: v108  <|@  <|@
f <@~|@floating>@ <|@
tid i16 <|@
result v8|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at Queens.setRowColumn(int, int, boolean) [bci: 22]
stamp: i32
=== Inputs ===
x: i3 
y: i2 
=== Succesors ===
=== Usages ===
i18 
=== Predecessor ===
- >@ <|@
instruction <@-|@jdk.graal.compiler.nodes.calc.SubNode>@ x: i3 y: i2  <|@  <|@
f <@~|@floating>@ <|@
tid i17 <|@
result int[7|0x7] <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at Queens.setRowColumn(int, int, boolean) [bci: 23]
rawvalue: 7
stableDimension: 0
stamp: i32 [7]
stampKind: i32
value: int[7|0x7]
=== Inputs ===
=== Succesors ===
=== Usages ===
i18 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid i18 <|@
result v9|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at Queens.setRowColumn(int, int, boolean) [bci: 25]
stamp: i32
=== Inputs ===
x: i16 
y: i17 
=== Succesors ===
=== Usages ===
j78 v67 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i16 y: i17  <|@  <|@
f <@~|@floating>@ <|@
tid v67 <|@
d <@d|@=== Debug Properties ===
condition: BT
nodeSourcePosition: at Queens.setRowColumn(int, int, boolean) [bci: 27]
op: jdk.graal.compiler.nodes.calc.IntegerBelowNode$BelowOp@5ce4369b
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i18 
y: i131 
=== Succesors ===
=== Usages ===
v108 
=== Predecessor ===
- >@ <|@
instruction <@|<||@jdk.graal.compiler.nodes.calc.IntegerBelowNode>@ x: i18 y: i131  <|@  <|@
f <@*|@fixed>@ <|@
tid v108 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at Queens.setRowColumn(int, int, boolean) [bci: 27]
profileData: INJECTED designatedSuccessorProbability: 1.0
stamp: void
=== Inputs ===
condition: v67 
=== Succesors ===
trueSuccessor: v105 
falseSuccessor: v107 
=== Usages ===
=== Predecessor ===
i131 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v67 #trueSuccessor: v105 #falseSuccessor: v107  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v7|DWORD[_] = MOV input: [v0|QWORD[.] + 20] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v8|DWORD = SUB (x: v2|DWORD, ~y: v1|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v9|DWORD = LEA address: [v8|DWORD + 7] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@Queens.setRowColumn(int, int, boolean) [bci: 0]
locals: v0|QWORD[.] v1|DWORD v2|DWORD v3|DWORD 
>@ <|@ instruction CMPBRANCH (x: v9|DWORD, y: [v7|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B2 -> B3 falseDestination: B2 -> B4 size: DWORD state [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v105 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at Queens.setRowColumn(int, int, boolean) [bci: 27]
stamp: void
=== Inputs ===
=== Succesors ===
next: v41 
=== Usages ===
v74 
=== Predecessor ===
v108 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v41  <|@  <|@
f <@~|@floating>@ <|@
tid j75 <|@
result v10|QWORD <|@
d <@d|@=== Debug Properties ===
inputBits: 32
nodeSourcePosition: at Queens.setRowColumn(int, int, boolean) [bci: 6]
resultBits: 64
stamp: i64 [0 - 4294967295] bits:0...0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
=== Inputs ===
value: i2 
=== Succesors ===
=== Usages ===
v134 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i2  <|@  <|@
f <@~|@floating>@ <|@
tid v134 <|@
result [v10|QWORD + v4|DWORD[_] * 8 + 16] <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S8
=== Inputs ===
base: j75 
index: a126 
=== Succesors ===
=== Usages ===
v41 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: j75 index: a126  <|@  <|@
f <@~|@floating>@ <|@
tid i7 <|@
result v3|DWORD <|@
d <@d|@=== Debug Properties ===
inputBits: 32
nodeSourcePosition: at Queens.setRowColumn(int, int, boolean) [bci: 6]
resultBits: 1
stamp: i1
=== Inputs ===
value: i4 
=== Succesors ===
=== Usages ===
i76 
=== Predecessor ===
- >@ <|@
instruction <@Narrow|@jdk.graal.compiler.nodes.calc.NarrowNode>@ value: i4  <|@  <|@
f <@~|@floating>@ <|@
tid i76 <|@
result v11|DWORD <|@
d <@d|@=== Debug Properties ===
inputBits: 1
nodeSourcePosition: at Queens.setRowColumn(int, int, boolean) [bci: 6]
resultBits: 8
stamp: i8 [0 - 1] bits:0000000x
=== Inputs ===
value: i7 
=== Succesors ===
=== Usages ===
v41 v57 v74 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i7  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v41 <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
killedLocationIdentity: Array: boolean
location: Array: boolean
memoryOrder: PLAIN
nodeSourcePosition: at Queens.setRowColumn(int, int, boolean) [bci: 6]
stamp: void
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: v89 
address: v134 
lastLocationAccess: - 
value: i76 
stateAfter: - 
=== Succesors ===
next: v57 
=== Usages ===
=== Predecessor ===
v105 >@ <|@
instruction <@Write|@jdk.graal.compiler.nodes.memory.WriteNode>@ stateBefore: - guard: v89 address: v134 lastLocationAccess: - value: i76 stateAfter: - #next: v57  <|@  <|@
f <@~|@floating>@ <|@
tid j77 <|@
result v6|DWORD <|@
d <@d|@=== Debug Properties ===
inputBits: 32
nodeSourcePosition: at Queens.setRowColumn(int, int, boolean) [bci: 15]
resultBits: 64
stamp: i64 [0 - 4294967295] bits:0...0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
=== Inputs ===
value: i12 
=== Succesors ===
=== Usages ===
v137 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i12  <|@  <|@
f <@~|@floating>@ <|@
tid v137 <|@
result [v6|DWORD + v5|DWORD[_] * 8 + 16] <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S8
=== Inputs ===
base: j77 
index: a128 
=== Succesors ===
=== Usages ===
v57 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: j77 index: a128  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v57 <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
killedLocationIdentity: Array: boolean
location: Array: boolean
memoryOrder: PLAIN
nodeSourcePosition: at Queens.setRowColumn(int, int, boolean) [bci: 15]
stamp: void
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: v97 
address: v137 
lastLocationAccess: - 
value: i76 
stateAfter: - 
=== Succesors ===
next: v74 
=== Usages ===
=== Predecessor ===
v41 >@ <|@
instruction <@Write|@jdk.graal.compiler.nodes.memory.WriteNode>@ stateBefore: - guard: v97 address: v137 lastLocationAccess: - value: i76 stateAfter: - #next: v74  <|@  <|@
f <@~|@floating>@ <|@
tid j78 <|@
result v9|DWORD <|@
d <@d|@=== Debug Properties ===
inputBits: 32
nodeSourcePosition: at Queens.setRowColumn(int, int, boolean) [bci: 27]
resultBits: 64
stamp: i64 [0 - 4294967295] bits:0...0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
=== Inputs ===
value: i18 
=== Succesors ===
=== Usages ===
v140 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i18  <|@  <|@
f <@~|@floating>@ <|@
tid v140 <|@
result [v9|DWORD + v7|DWORD[_] * 8 + 16] <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S8
=== Inputs ===
base: j78 
index: a130 
=== Succesors ===
=== Usages ===
v74 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: j78 index: a130  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v74 <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
killedLocationIdentity: Array: boolean
location: Array: boolean
memoryOrder: PLAIN
nodeSourcePosition: at Queens.setRowColumn(int, int, boolean) [bci: 27]
stamp: void
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: v105 
address: v140 
lastLocationAccess: - 
value: i76 
stateAfter: - 
=== Succesors ===
next: v21 
=== Usages ===
=== Predecessor ===
v57 >@ <|@
instruction <@Write|@jdk.graal.compiler.nodes.memory.WriteNode>@ stateBefore: - guard: v105 address: v140 lastLocationAccess: - value: i76 stateAfter: - #next: v21  <|@  <|@
f <@*|@fixed>@ <|@
tid v21 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at Queens.setRowColumn(int, int, boolean) [bci: 28]
stamp: void
=== Inputs ===
memoryMap: - 
result: - 
=== Succesors ===
=== Usages ===
=== Predecessor ===
v74 >@ <|@
instruction <@Return|@jdk.graal.compiler.nodes.ReturnNode>@ memoryMap: - result: -  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v10|QWORD = MOV value: v1|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction v11|DWORD = AND x: v3|DWORD alignment: 4 size: DWORD y: int[1|0x1] <|@ <|@
      nr   -1  <|@ instruction MOVB (x: [v10|QWORD + v4|DWORD[_] * 8 + 16], y: v11|DWORD) size: BYTE <|@ <|@
      nr   -1  <|@ instruction MOVB (x: [v6|DWORD + v5|DWORD[_] * 8 + 16], y: v11|DWORD) size: BYTE <|@ <|@
      nr   -1  <|@ instruction MOVB (x: [v9|DWORD + v7|DWORD[_] * 8 + 16], y: v11|DWORD) size: BYTE <|@ <|@
      nr   -1  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: -) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@3dbf6f45 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B7" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v107 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at Queens.setRowColumn(int, int, boolean) [bci: 27]
stamp: void
=== Inputs ===
=== Succesors ===
next: v124 
=== Usages ===
=== Predecessor ===
v108 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v124  <|@  <|@
f <@~|@floating>@ <|@
tid i125 <|@
result int[-17435|0xffffffffffffbbe5] <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at Queens.setRowColumn(int, int, boolean) [bci: 6]
rawvalue: -17435
stableDimension: 0
stamp: i32 [-17435]
stampKind: i32
value: int[-17435|0xffffffffffffbbe5]
=== Inputs ===
=== Succesors ===
=== Usages ===
i113 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@*|@fixed>@ <|@
tid v124 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at Queens.setRowColumn(int, int, boolean) [bci: 6]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v109 
=== Predecessor ===
v107 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-17435|0xffffffffffffbbe5]] destination: B4 -> B7 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B7" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v99 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at Queens.setRowColumn(int, int, boolean) [bci: 15]
stamp: void
=== Inputs ===
=== Succesors ===
next: v122 
=== Usages ===
=== Predecessor ===
v100 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v122  <|@  <|@
f <@~|@floating>@ <|@
tid i123 <|@
result int[-13083|0xffffffffffffcce5] <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at Queens.setRowColumn(int, int, boolean) [bci: 6]
rawvalue: -13083
stableDimension: 0
stamp: i32 [-13083]
stampKind: i32
value: int[-13083|0xffffffffffffcce5]
=== Inputs ===
=== Succesors ===
=== Usages ===
i113 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@*|@fixed>@ <|@
tid v122 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at Queens.setRowColumn(int, int, boolean) [bci: 6]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v109 
=== Predecessor ===
v99 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-13083|0xffffffffffffcce5]] destination: B5 -> B7 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B7" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v91 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at Queens.setRowColumn(int, int, boolean) [bci: 6]
stamp: void
=== Inputs ===
=== Succesors ===
next: v118 
=== Usages ===
=== Predecessor ===
v92 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v118  <|@  <|@
f <@~|@floating>@ <|@
tid i119 <|@
result int[-8475|0xffffffffffffdee5] <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at Queens.setRowColumn(int, int, boolean) [bci: 6]
rawvalue: -8475
stableDimension: 0
stamp: i32 [-8475]
stampKind: i32
value: int[-8475|0xffffffffffffdee5]
=== Inputs ===
=== Succesors ===
=== Usages ===
i113 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@*|@fixed>@ <|@
tid v118 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at Queens.setRowColumn(int, int, boolean) [bci: 6]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v109 
=== Predecessor ===
v91 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-8475|0xffffffffffffdee5]] destination: B6 -> B7 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B6" "B5" "B4" 
    successors 
    xhandlers
    flags 
    probability 2362138004555825152
    begin_IR
      HIR
f <@~|@floating>@ <|@
tid i113 <|@
result v12|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at Queens.setRowColumn(int, int, boolean) [bci: 6]
stamp: i32 [-17435 - -8475] bits:1...1xxx1xxx11100101
valueDescription: i32
=== Inputs ===
merge: v109 
values: i119 i123 i125 
=== Succesors ===
=== Usages ===
v115 
=== Predecessor ===
- >@ <|@
instruction <@ValuePhi|@jdk.graal.compiler.nodes.ValuePhiNode>@ merge: v109 values: i119 i123 i125  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v109 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at Queens.setRowColumn(int, int, boolean) [bci: 6]
stamp: void
=== Inputs ===
stateAfter: - 
ends: v118 v122 v124 
=== Succesors ===
next: v115 
=== Usages ===
i113 
=== Predecessor ===
- >@ <|@
instruction <@Merge|@jdk.graal.compiler.nodes.MergeNode>@ stateAfter: - ends: v118 v122 v124 #next: v115  <|@  <|@
f <@~|@floating>@ <|@
tid j112 <|@
result long[0|0x0] <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at Queens.setRowColumn(int, int, boolean) [bci: 6]
rawvalue: 0
stableDimension: 0
stamp: i64 [0]
stampKind: i64
value: long[0|0x0]
=== Inputs ===
=== Succesors ===
=== Usages ===
v115 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@*|@fixed>@ <|@
tid v115 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at Queens.setRowColumn(int, int, boolean) [bci: 6]
stamp: void
=== Inputs ===
stateBefore: ?5 
actionAndReason: i113 
speculation: j112 
=== Succesors ===
=== Usages ===
=== Predecessor ===
v109 >@ <|@
instruction <@DynamicDeoptimize|@jdk.graal.compiler.nodes.DynamicDeoptimizeNode>@ stateBefore: ?5 actionAndReason: i113 speculation: j112  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [v12|DWORD] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr   -1  <|@ instruction MOV (x: [r15|QWORD + 1156], y: v12|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@Queens.setRowColumn(int, int, boolean) [bci: 0]
locals: v0|QWORD[.] v1|DWORD v2|DWORD v3|DWORD 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
end_cfg
begin_cfg
  name "After ConstantLoadOptimization"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B6" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [rsi|QWORD[.], rdx|DWORD, rcx|DWORD, r8|DWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@276f26a2 slotKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v0|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v1|DWORD = MOVE input: rdx|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v2|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v3|DWORD = MOVE input: r8|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v4|DWORD[_] = MOV input: [v0|QWORD[.] + 16] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@Queens.setRowColumn(int, int, boolean) [bci: 0]
locals: v0|QWORD[.] v1|DWORD v2|DWORD v3|DWORD 
>@ <|@ instruction CMPBRANCH (x: v1|DWORD, y: [v4|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B0 -> B1 falseDestination: B0 -> B6 size: DWORD state [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B5" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v5|DWORD[_] = MOV input: [v0|QWORD[.] + 12] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v6|DWORD = ADD (x: v2|DWORD, y: v1|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@Queens.setRowColumn(int, int, boolean) [bci: 0]
locals: v0|QWORD[.] v1|DWORD v2|DWORD v3|DWORD 
>@ <|@ instruction CMPBRANCH (x: v6|DWORD, y: [v5|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B1 -> B2 falseDestination: B1 -> B5 size: DWORD state [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B3" "B4" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v7|DWORD[_] = MOV input: [v0|QWORD[.] + 20] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v8|DWORD = SUB (x: v2|DWORD, ~y: v1|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v9|DWORD = LEA address: [v8|DWORD + 7] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@Queens.setRowColumn(int, int, boolean) [bci: 0]
locals: v0|QWORD[.] v1|DWORD v2|DWORD v3|DWORD 
>@ <|@ instruction CMPBRANCH (x: v9|DWORD, y: [v7|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B2 -> B3 falseDestination: B2 -> B4 size: DWORD state [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v10|QWORD = MOV value: v1|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction v11|DWORD = AND x: v3|DWORD alignment: 4 size: DWORD y: int[1|0x1] <|@ <|@
      nr   -1  <|@ instruction MOVB (x: [v10|QWORD + v4|DWORD[_] * 8 + 16], y: v11|DWORD) size: BYTE <|@ <|@
      nr   -1  <|@ instruction MOVB (x: [v6|DWORD + v5|DWORD[_] * 8 + 16], y: v11|DWORD) size: BYTE <|@ <|@
      nr   -1  <|@ instruction MOVB (x: [v9|DWORD + v7|DWORD[_] * 8 + 16], y: v11|DWORD) size: BYTE <|@ <|@
      nr   -1  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: -) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@3dbf6f45 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B7" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-8475|0xffffffffffffdee5]] destination: B6 -> B7 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B7" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-13083|0xffffffffffffcce5]] destination: B5 -> B7 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B7" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-17435|0xffffffffffffbbe5]] destination: B4 -> B7 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B6" "B5" "B4" 
    successors 
    xhandlers
    flags 
    probability 2362138004555825152
    begin_IR
      LIR
      nr   -1  <|@ instruction [v12|DWORD] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr   -1  <|@ instruction MOV (x: [r15|QWORD + 1156], y: v12|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@Queens.setRowColumn(int, int, boolean) [bci: 0]
locals: v0|QWORD[.] v1|DWORD v2|DWORD v3|DWORD 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: aload_0       
     1: getfield      #3          // freeRows:boolean[]
     4: iload_1       
     5: iload_3       
     6: bastore       
     7: aload_0       
     8: getfield      #5          // freeMaxs:boolean[]
    11: iload_2       
    12: iload_1       
    13: iadd          
    14: iload_3       
    15: bastore       
    16: aload_0       
    17: getfield      #6          // freeMins:boolean[]
    20: iload_2       
    21: iload_1       
    22: isub          
    23: bipush        7
    25: iadd          
    26: iload_3       
    27: bastore       
    28: return        
   <|@
end_bytecodes
begin_cfg
  name "After SaveCalleeSaveRegisters"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B6" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [rsi|QWORD[.], rdx|DWORD, rcx|DWORD, r8|DWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@276f26a2 slotKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v0|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v1|DWORD = MOVE input: rdx|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v2|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v3|DWORD = MOVE input: r8|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v4|DWORD[_] = MOV input: [v0|QWORD[.] + 16] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@Queens.setRowColumn(int, int, boolean) [bci: 0]
locals: v0|QWORD[.] v1|DWORD v2|DWORD v3|DWORD 
>@ <|@ instruction CMPBRANCH (x: v1|DWORD, y: [v4|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B0 -> B1 falseDestination: B0 -> B6 size: DWORD state [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B5" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v5|DWORD[_] = MOV input: [v0|QWORD[.] + 12] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v6|DWORD = ADD (x: v2|DWORD, y: v1|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@Queens.setRowColumn(int, int, boolean) [bci: 0]
locals: v0|QWORD[.] v1|DWORD v2|DWORD v3|DWORD 
>@ <|@ instruction CMPBRANCH (x: v6|DWORD, y: [v5|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B1 -> B2 falseDestination: B1 -> B5 size: DWORD state [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B3" "B4" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v7|DWORD[_] = MOV input: [v0|QWORD[.] + 20] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v8|DWORD = SUB (x: v2|DWORD, ~y: v1|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v9|DWORD = LEA address: [v8|DWORD + 7] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@Queens.setRowColumn(int, int, boolean) [bci: 0]
locals: v0|QWORD[.] v1|DWORD v2|DWORD v3|DWORD 
>@ <|@ instruction CMPBRANCH (x: v9|DWORD, y: [v7|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B2 -> B3 falseDestination: B2 -> B4 size: DWORD state [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v10|QWORD = MOV value: v1|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction v11|DWORD = AND x: v3|DWORD alignment: 4 size: DWORD y: int[1|0x1] <|@ <|@
      nr   -1  <|@ instruction MOVB (x: [v10|QWORD + v4|DWORD[_] * 8 + 16], y: v11|DWORD) size: BYTE <|@ <|@
      nr   -1  <|@ instruction MOVB (x: [v6|DWORD + v5|DWORD[_] * 8 + 16], y: v11|DWORD) size: BYTE <|@ <|@
      nr   -1  <|@ instruction MOVB (x: [v9|DWORD + v7|DWORD[_] * 8 + 16], y: v11|DWORD) size: BYTE <|@ <|@
      nr   -1  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: -) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@3dbf6f45 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B7" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-8475|0xffffffffffffdee5]] destination: B6 -> B7 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B7" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-13083|0xffffffffffffcce5]] destination: B5 -> B7 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B7" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-17435|0xffffffffffffbbe5]] destination: B4 -> B7 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B6" "B5" "B4" 
    successors 
    xhandlers
    flags 
    probability 2362138004555825152
    begin_IR
      LIR
      nr   -1  <|@ instruction [v12|DWORD] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr   -1  <|@ instruction MOV (x: [r15|QWORD + 1156], y: v12|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@Queens.setRowColumn(int, int, boolean) [bci: 0]
locals: v0|QWORD[.] v1|DWORD v2|DWORD v3|DWORD 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: aload_0       
     1: getfield      #3          // freeRows:boolean[]
     4: iload_1       
     5: iload_3       
     6: bastore       
     7: aload_0       
     8: getfield      #5          // freeMaxs:boolean[]
    11: iload_2       
    12: iload_1       
    13: iadd          
    14: iload_3       
    15: bastore       
    16: aload_0       
    17: getfield      #6          // freeMins:boolean[]
    20: iload_2       
    21: iload_1       
    22: isub          
    23: bipush        7
    25: iadd          
    26: iload_3       
    27: bastore       
    28: return        
   <|@
end_bytecodes
begin_cfg
  name "After PreAllocationOptimizationStage"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B6" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [rsi|QWORD[.], rdx|DWORD, rcx|DWORD, r8|DWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@276f26a2 slotKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v0|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v1|DWORD = MOVE input: rdx|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v2|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v3|DWORD = MOVE input: r8|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v4|DWORD[_] = MOV input: [v0|QWORD[.] + 16] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@Queens.setRowColumn(int, int, boolean) [bci: 0]
locals: v0|QWORD[.] v1|DWORD v2|DWORD v3|DWORD 
>@ <|@ instruction CMPBRANCH (x: v1|DWORD, y: [v4|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B0 -> B1 falseDestination: B0 -> B6 size: DWORD state [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B5" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v5|DWORD[_] = MOV input: [v0|QWORD[.] + 12] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v6|DWORD = ADD (x: v2|DWORD, y: v1|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@Queens.setRowColumn(int, int, boolean) [bci: 0]
locals: v0|QWORD[.] v1|DWORD v2|DWORD v3|DWORD 
>@ <|@ instruction CMPBRANCH (x: v6|DWORD, y: [v5|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B1 -> B2 falseDestination: B1 -> B5 size: DWORD state [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B3" "B4" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v7|DWORD[_] = MOV input: [v0|QWORD[.] + 20] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v8|DWORD = SUB (x: v2|DWORD, ~y: v1|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v9|DWORD = LEA address: [v8|DWORD + 7] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@Queens.setRowColumn(int, int, boolean) [bci: 0]
locals: v0|QWORD[.] v1|DWORD v2|DWORD v3|DWORD 
>@ <|@ instruction CMPBRANCH (x: v9|DWORD, y: [v7|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B2 -> B3 falseDestination: B2 -> B4 size: DWORD state [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v10|QWORD = MOV value: v1|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction v11|DWORD = AND x: v3|DWORD alignment: 4 size: DWORD y: int[1|0x1] <|@ <|@
      nr   -1  <|@ instruction MOVB (x: [v10|QWORD + v4|DWORD[_] * 8 + 16], y: v11|DWORD) size: BYTE <|@ <|@
      nr   -1  <|@ instruction MOVB (x: [v6|DWORD + v5|DWORD[_] * 8 + 16], y: v11|DWORD) size: BYTE <|@ <|@
      nr   -1  <|@ instruction MOVB (x: [v9|DWORD + v7|DWORD[_] * 8 + 16], y: v11|DWORD) size: BYTE <|@ <|@
      nr   -1  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: -) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@3dbf6f45 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B7" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-8475|0xffffffffffffdee5]] destination: B6 -> B7 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B7" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-13083|0xffffffffffffcce5]] destination: B5 -> B7 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B7" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-17435|0xffffffffffffbbe5]] destination: B4 -> B7 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B6" "B5" "B4" 
    successors 
    xhandlers
    flags 
    probability 2362138004555825152
    begin_IR
      LIR
      nr   -1  <|@ instruction [v12|DWORD] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr   -1  <|@ instruction MOV (x: [r15|QWORD + 1156], y: v12|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@Queens.setRowColumn(int, int, boolean) [bci: 0]
locals: v0|QWORD[.] v1|DWORD v2|DWORD v3|DWORD 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: aload_0       
     1: getfield      #3          // freeRows:boolean[]
     4: iload_1       
     5: iload_3       
     6: bastore       
     7: aload_0       
     8: getfield      #5          // freeMaxs:boolean[]
    11: iload_2       
    12: iload_1       
    13: iadd          
    14: iload_3       
    15: bastore       
    16: aload_0       
    17: getfield      #6          // freeMins:boolean[]
    20: iload_2       
    21: iload_1       
    22: isub          
    23: bipush        7
    25: iadd          
    26: iload_3       
    27: bastore       
    28: return        
   <|@
end_bytecodes
begin_cfg
  name "After MarkBasePointers"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B6" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [rsi|QWORD[.], rdx|DWORD, rcx|DWORD, r8|DWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@276f26a2 slotKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v0|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v1|DWORD = MOVE input: rdx|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v2|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v3|DWORD = MOVE input: r8|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v4|DWORD[_] = MOV input: [v0|QWORD[.] + 16] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@live-base-pointers: []
Queens.setRowColumn(int, int, boolean) [bci: 0]
locals: v0|QWORD[.] v1|DWORD v2|DWORD v3|DWORD 
>@ <|@ instruction CMPBRANCH (x: v1|DWORD, y: [v4|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B0 -> B1 falseDestination: B0 -> B6 size: DWORD state [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B5" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v5|DWORD[_] = MOV input: [v0|QWORD[.] + 12] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v6|DWORD = ADD (x: v2|DWORD, y: v1|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@live-base-pointers: []
Queens.setRowColumn(int, int, boolean) [bci: 0]
locals: v0|QWORD[.] v1|DWORD v2|DWORD v3|DWORD 
>@ <|@ instruction CMPBRANCH (x: v6|DWORD, y: [v5|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B1 -> B2 falseDestination: B1 -> B5 size: DWORD state [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B3" "B4" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v7|DWORD[_] = MOV input: [v0|QWORD[.] + 20] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v8|DWORD = SUB (x: v2|DWORD, ~y: v1|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v9|DWORD = LEA address: [v8|DWORD + 7] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@live-base-pointers: []
Queens.setRowColumn(int, int, boolean) [bci: 0]
locals: v0|QWORD[.] v1|DWORD v2|DWORD v3|DWORD 
>@ <|@ instruction CMPBRANCH (x: v9|DWORD, y: [v7|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B2 -> B3 falseDestination: B2 -> B4 size: DWORD state [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v10|QWORD = MOV value: v1|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction v11|DWORD = AND x: v3|DWORD alignment: 4 size: DWORD y: int[1|0x1] <|@ <|@
      nr   -1  <|@ instruction MOVB (x: [v10|QWORD + v4|DWORD[_] * 8 + 16], y: v11|DWORD) size: BYTE <|@ <|@
      nr   -1  <|@ instruction MOVB (x: [v6|DWORD + v5|DWORD[_] * 8 + 16], y: v11|DWORD) size: BYTE <|@ <|@
      nr   -1  <|@ instruction MOVB (x: [v9|DWORD + v7|DWORD[_] * 8 + 16], y: v11|DWORD) size: BYTE <|@ <|@
      nr   -1  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: -) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@3dbf6f45 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B7" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-8475|0xffffffffffffdee5]] destination: B6 -> B7 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B7" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-13083|0xffffffffffffcce5]] destination: B5 -> B7 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B7" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-17435|0xffffffffffffbbe5]] destination: B4 -> B7 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B6" "B5" "B4" 
    successors 
    xhandlers
    flags 
    probability 2362138004555825152
    begin_IR
      LIR
      nr   -1  <|@ instruction [v12|DWORD] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr   -1  <|@ instruction MOV (x: [r15|QWORD + 1156], y: v12|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@live-base-pointers: []
Queens.setRowColumn(int, int, boolean) [bci: 0]
locals: v0|QWORD[.] v1|DWORD v2|DWORD v3|DWORD 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: aload_0       
     1: getfield      #3          // freeRows:boolean[]
     4: iload_1       
     5: iload_3       
     6: bastore       
     7: aload_0       
     8: getfield      #5          // freeMaxs:boolean[]
    11: iload_2       
    12: iload_1       
    13: iadd          
    14: iload_3       
    15: bastore       
    16: aload_0       
    17: getfield      #6          // freeMins:boolean[]
    20: iload_2       
    21: iload_1       
    22: isub          
    23: bipush        7
    25: iadd          
    26: iload_3       
    27: bastore       
    28: return        
   <|@
end_bytecodes
begin_cfg
  name "Before register allocation"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B6" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|QWORD[.], rdx|DWORD, rcx|DWORD, r8|DWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr    4  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@276f26a2 slotKind: QWORD <|@ <|@
      nr    6  <|@ instruction v0|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr    8  <|@ instruction v1|DWORD = MOVE input: rdx|DWORD moveKind: DWORD <|@ <|@
      nr   10  <|@ instruction v2|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr   12  <|@ instruction v3|DWORD = MOVE input: r8|DWORD moveKind: DWORD <|@ <|@
      nr   14  <|@ instruction v4|DWORD[_] = MOV input: [v0|QWORD[.] + 16] size: DWORD <|@ <|@
      nr   16  <|@ st <@st|@live-base-pointers: []
Queens.setRowColumn(int, int, boolean) [bci: 0]
locals: v0|QWORD[.] v1|DWORD v2|DWORD v3|DWORD 
>@ <|@ instruction CMPBRANCH (x: v1|DWORD, y: [v4|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B0 -> B1 falseDestination: B0 -> B6 size: DWORD state [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B5" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   18  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   20  <|@ instruction v5|DWORD[_] = MOV input: [v0|QWORD[.] + 12] size: DWORD <|@ <|@
      nr   22  <|@ instruction v6|DWORD = ADD (x: v2|DWORD, y: v1|DWORD) size: DWORD <|@ <|@
      nr   24  <|@ st <@st|@live-base-pointers: []
Queens.setRowColumn(int, int, boolean) [bci: 0]
locals: v0|QWORD[.] v1|DWORD v2|DWORD v3|DWORD 
>@ <|@ instruction CMPBRANCH (x: v6|DWORD, y: [v5|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B1 -> B2 falseDestination: B1 -> B5 size: DWORD state [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B3" "B4" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   26  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   28  <|@ instruction v7|DWORD[_] = MOV input: [v0|QWORD[.] + 20] size: DWORD <|@ <|@
      nr   30  <|@ instruction v8|DWORD = SUB (x: v2|DWORD, ~y: v1|DWORD) size: DWORD <|@ <|@
      nr   32  <|@ instruction v9|DWORD = LEA address: [v8|DWORD + 7] size: DWORD <|@ <|@
      nr   34  <|@ st <@st|@live-base-pointers: []
Queens.setRowColumn(int, int, boolean) [bci: 0]
locals: v0|QWORD[.] v1|DWORD v2|DWORD v3|DWORD 
>@ <|@ instruction CMPBRANCH (x: v9|DWORD, y: [v7|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B2 -> B3 falseDestination: B2 -> B4 size: DWORD state [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   36  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   38  <|@ instruction v10|QWORD = MOV value: v1|DWORD size: DWORD <|@ <|@
      nr   40  <|@ instruction v11|DWORD = AND x: v3|DWORD alignment: 4 size: DWORD y: int[1|0x1] <|@ <|@
      nr   42  <|@ instruction MOVB (x: [v10|QWORD + v4|DWORD[_] * 8 + 16], y: v11|DWORD) size: BYTE <|@ <|@
      nr   44  <|@ instruction MOVB (x: [v6|DWORD + v5|DWORD[_] * 8 + 16], y: v11|DWORD) size: BYTE <|@ <|@
      nr   46  <|@ instruction MOVB (x: [v9|DWORD + v7|DWORD[_] * 8 + 16], y: v11|DWORD) size: BYTE <|@ <|@
      nr   48  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: -) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@3dbf6f45 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B7" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   50  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   52  <|@ instruction JUMP ~outgoingValues: [int[-8475|0xffffffffffffdee5]] destination: B6 -> B7 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B7" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   54  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   56  <|@ instruction JUMP ~outgoingValues: [int[-13083|0xffffffffffffcce5]] destination: B5 -> B7 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B7" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   58  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   60  <|@ instruction JUMP ~outgoingValues: [int[-17435|0xffffffffffffbbe5]] destination: B4 -> B7 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B6" "B5" "B4" 
    successors 
    xhandlers
    flags 
    probability 2362138004555825152
    begin_IR
      LIR
      nr   62  <|@ instruction [v12|DWORD] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr   64  <|@ instruction MOV (x: [r15|QWORD + 1156], y: v12|DWORD) size: DWORD <|@ <|@
      nr   66  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr   68  <|@ st <@st|@live-base-pointers: []
Queens.setRowColumn(int, int, boolean) [bci: 0]
locals: v0|QWORD[.] v1|DWORD v2|DWORD v3|DWORD 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: aload_0       
     1: getfield      #3          // freeRows:boolean[]
     4: iload_1       
     5: iload_3       
     6: bastore       
     7: aload_0       
     8: getfield      #5          // freeMaxs:boolean[]
    11: iload_2       
    12: iload_1       
    13: iadd          
    14: iload_3       
    15: bastore       
    16: aload_0       
    17: getfield      #6          // freeMins:boolean[]
    20: iload_2       
    21: iload_1       
    22: isub          
    23: bipush        7
    25: iadd          
    26: iload_3       
    27: bastore       
    28: return        
   <|@
end_bytecodes
begin_cfg
  name "After SSALinearScanLifetimeAnalysis"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B6" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|QWORD[.], rdx|DWORD, rcx|DWORD, r8|DWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr    4  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@276f26a2 slotKind: QWORD <|@ <|@
      nr    6  <|@ instruction v0|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr    8  <|@ instruction v1|DWORD = MOVE input: rdx|DWORD moveKind: DWORD <|@ <|@
      nr   10  <|@ instruction v2|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr   12  <|@ instruction v3|DWORD = MOVE input: r8|DWORD moveKind: DWORD <|@ <|@
      nr   14  <|@ instruction v4|DWORD[_] = MOV input: [v0|QWORD[.] + 16] size: DWORD <|@ <|@
      nr   16  <|@ st <@st|@live-base-pointers: []
Queens.setRowColumn(int, int, boolean) [bci: 0]
locals: v0|QWORD[.] v1|DWORD v2|DWORD v3|DWORD 
>@ <|@ instruction CMPBRANCH (x: v1|DWORD, y: [v4|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B0 -> B1 falseDestination: B0 -> B6 size: DWORD state [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B5" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   18  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   20  <|@ instruction v5|DWORD[_] = MOV input: [v0|QWORD[.] + 12] size: DWORD <|@ <|@
      nr   22  <|@ instruction v6|DWORD = ADD (x: v2|DWORD, y: v1|DWORD) size: DWORD <|@ <|@
      nr   24  <|@ st <@st|@live-base-pointers: []
Queens.setRowColumn(int, int, boolean) [bci: 0]
locals: v0|QWORD[.] v1|DWORD v2|DWORD v3|DWORD 
>@ <|@ instruction CMPBRANCH (x: v6|DWORD, y: [v5|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B1 -> B2 falseDestination: B1 -> B5 size: DWORD state [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B3" "B4" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   26  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   28  <|@ instruction v7|DWORD[_] = MOV input: [v0|QWORD[.] + 20] size: DWORD <|@ <|@
      nr   30  <|@ instruction v8|DWORD = SUB (x: v2|DWORD, ~y: v1|DWORD) size: DWORD <|@ <|@
      nr   32  <|@ instruction v9|DWORD = LEA address: [v8|DWORD + 7] size: DWORD <|@ <|@
      nr   34  <|@ st <@st|@live-base-pointers: []
Queens.setRowColumn(int, int, boolean) [bci: 0]
locals: v0|QWORD[.] v1|DWORD v2|DWORD v3|DWORD 
>@ <|@ instruction CMPBRANCH (x: v9|DWORD, y: [v7|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B2 -> B3 falseDestination: B2 -> B4 size: DWORD state [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   36  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   38  <|@ instruction v10|QWORD = MOV value: v1|DWORD size: DWORD <|@ <|@
      nr   40  <|@ instruction v11|DWORD = AND x: v3|DWORD alignment: 4 size: DWORD y: int[1|0x1] <|@ <|@
      nr   42  <|@ instruction MOVB (x: [v10|QWORD + v4|DWORD[_] * 8 + 16], y: v11|DWORD) size: BYTE <|@ <|@
      nr   44  <|@ instruction MOVB (x: [v6|DWORD + v5|DWORD[_] * 8 + 16], y: v11|DWORD) size: BYTE <|@ <|@
      nr   46  <|@ instruction MOVB (x: [v9|DWORD + v7|DWORD[_] * 8 + 16], y: v11|DWORD) size: BYTE <|@ <|@
      nr   48  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: -) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@3dbf6f45 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B7" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   50  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   52  <|@ instruction JUMP ~outgoingValues: [int[-8475|0xffffffffffffdee5]] destination: B6 -> B7 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B7" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   54  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   56  <|@ instruction JUMP ~outgoingValues: [int[-13083|0xffffffffffffcce5]] destination: B5 -> B7 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B7" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   58  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   60  <|@ instruction JUMP ~outgoingValues: [int[-17435|0xffffffffffffbbe5]] destination: B4 -> B7 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B6" "B5" "B4" 
    successors 
    xhandlers
    flags 
    probability 2362138004555825152
    begin_IR
      LIR
      nr   62  <|@ instruction [v12|DWORD] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr   64  <|@ instruction MOV (x: [r15|QWORD + 1156], y: v12|DWORD) size: DWORD <|@ <|@
      nr   66  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr   68  <|@ st <@st|@live-base-pointers: []
Queens.setRowColumn(int, int, boolean) [bci: 0]
locals: v0|QWORD[.] v1|DWORD v2|DWORD v3|DWORD 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: aload_0       
     1: getfield      #3          // freeRows:boolean[]
     4: iload_1       
     5: iload_3       
     6: bastore       
     7: aload_0       
     8: getfield      #5          // freeMaxs:boolean[]
    11: iload_2       
    12: iload_1       
    13: iadd          
    14: iload_3       
    15: bastore       
    16: aload_0       
    17: getfield      #6          // freeMins:boolean[]
    20: iload_2       
    21: iload_1       
    22: isub          
    23: bipush        7
    25: iadd          
    26: iload_3       
    27: bastore       
    28: return        
   <|@
end_bytecodes
begin_intervals
  name "Before register allocation"
  rcx|d fixed "[rcx|d]" rcx|d -1 [0, 10[ "NoSpillStore"
  rdx|d fixed "[rdx|d]" rdx|d -1 [0, 8[ "NoSpillStore"
  rbp|q fixed "[rbp|q]" rbp|q -1 [0, 2[ "NoSpillStore"
  rsi|q fixed "[rsi|q]" rsi|q -1 [0, 6[ "NoSpillStore"
  r8|d fixed "[r8|d]" r8|d -1 [0, 12[ "NoSpillStore"
  v0|q QWORD "[v0|q]" v0|q rsi|q [6, 36[[50, 69[6 MustHaveRegister 14 MustHaveRegister 20 MustHaveRegister 28 MustHaveRegister  "NoSpillStore"
  v1|d DWORD "[v1|d]" v1|d rdx|d [8, 38[[50, 69[8 MustHaveRegister 16 MustHaveRegister 22 ShouldHaveRegister 30 ShouldHaveRegister 38 ShouldHaveRegister  "NoSpillStore"
  v2|d DWORD "[v2|d]" v2|d rcx|d [10, 36[[50, 69[10 MustHaveRegister 22 ShouldHaveRegister 30 MustHaveRegister  "NoSpillStore"
  v3|d DWORD "[v3|d]" v3|d r8|d [12, 40[[50, 69[12 MustHaveRegister 40 MustHaveRegister  "NoSpillStore"
  v4|d DWORD "[v4|d]" v4|d -1 [14, 42[14 MustHaveRegister 16 MustHaveRegister 42 MustHaveRegister  "NoSpillStore"
  v5|d DWORD "[v5|d]" v5|d -1 [20, 44[20 MustHaveRegister 24 MustHaveRegister 44 MustHaveRegister  "NoSpillStore"
  v6|d DWORD "[v6|d]" v6|d v2|d [22, 44[22 MustHaveRegister 24 MustHaveRegister 44 MustHaveRegister  "NoSpillStore"
  v7|d DWORD "[v7|d]" v7|d -1 [28, 46[28 MustHaveRegister 34 MustHaveRegister 46 MustHaveRegister  "NoSpillStore"
  v8|d DWORD "[v8|d]" v8|d v2|d [30, 32[30 MustHaveRegister 32 MustHaveRegister  "NoSpillStore"
  v9|d DWORD "[v9|d]" v9|d -1 [32, 46[32 MustHaveRegister 34 MustHaveRegister 46 MustHaveRegister  "NoSpillStore"
  v10|q QWORD "[v10|q]" v10|q -1 [38, 42[38 MustHaveRegister 42 MustHaveRegister  "NoSpillStore"
  v11|d DWORD "[v11|d]" v11|d v3|d [40, 46[40 MustHaveRegister 42 MustHaveRegister 44 MustHaveRegister 46 MustHaveRegister  "NoSpillStore"
  v12|d DWORD "[v12|d]" v12|d -1 [62, 64[64 MustHaveRegister  "NoSpillStore"
end_intervals
begin_intervals
  name "After register allocation"
  rcx|d fixed "[rcx|d]" rcx|d -1 [0, 10[ "NoSpillStore"
  rdx|d fixed "[rdx|d]" rdx|d -1 [0, 8[ "NoSpillStore"
  rbp|q fixed "[rbp|q]" rbp|q -1 [0, 2[ "NoSpillStore"
  rsi|q fixed "[rsi|q]" rsi|q -1 [0, 6[ "NoSpillStore"
  r8|d fixed "[r8|d]" r8|d -1 [0, 12[ "NoSpillStore"
  v0|q QWORD "[rsi|q]" v0|q rsi|q [6, 36[[50, 69[6 MustHaveRegister 14 MustHaveRegister 20 MustHaveRegister 28 MustHaveRegister  "NoSpillStore"
  v1|d DWORD "[rdx|d]" v1|d rdx|d [8, 38[[50, 69[8 MustHaveRegister 16 MustHaveRegister 22 ShouldHaveRegister 30 ShouldHaveRegister 38 ShouldHaveRegister  "NoSpillStore"
  v2|d DWORD "[rcx|d]" v2|d rcx|d [10, 36[[50, 69[10 MustHaveRegister 22 ShouldHaveRegister 30 MustHaveRegister  "NoSpillStore"
  v3|d DWORD "[r8|d]" v3|d r8|d [12, 40[[50, 69[12 MustHaveRegister 40 MustHaveRegister  "NoSpillStore"
  v4|d DWORD "[r10|d]" v4|d -1 [14, 42[14 MustHaveRegister 16 MustHaveRegister 42 MustHaveRegister  "NoSpillStore"
  v5|d DWORD "[r11|d]" v5|d -1 [20, 44[20 MustHaveRegister 24 MustHaveRegister 44 MustHaveRegister  "NoSpillStore"
  v6|d DWORD "[r9|d]" v6|d v2|d [22, 44[22 MustHaveRegister 24 MustHaveRegister 44 MustHaveRegister  "NoSpillStore"
  v7|d DWORD "[rbx|d]" v7|d -1 [28, 46[28 MustHaveRegister 34 MustHaveRegister 46 MustHaveRegister  "NoSpillStore"
  v8|d DWORD "[rdi|d]" v8|d v2|d [30, 32[30 MustHaveRegister 32 MustHaveRegister  "NoSpillStore"
  v9|d DWORD "[rdi|d]" v9|d -1 [32, 46[32 MustHaveRegister 34 MustHaveRegister 46 MustHaveRegister  "NoSpillStore"
  v10|q QWORD "[rcx|q]" v10|q -1 [38, 42[38 MustHaveRegister 42 MustHaveRegister  "NoSpillStore"
  v11|d DWORD "[r8|d]" v11|d v3|d [40, 46[40 MustHaveRegister 42 MustHaveRegister 44 MustHaveRegister 46 MustHaveRegister  "NoSpillStore"
  v12|d DWORD "[r10|d]" v12|d -1 [62, 64[64 MustHaveRegister  "NoSpillStore"
end_intervals
begin_cfg
  name "After LinearScanRegisterAllocation"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B6" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|QWORD[.], rdx|DWORD, rcx|DWORD, r8|DWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr    4  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@276f26a2 slotKind: QWORD <|@ <|@
      nr    6  <|@ instruction v0|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr    8  <|@ instruction v1|DWORD = MOVE input: rdx|DWORD moveKind: DWORD <|@ <|@
      nr   10  <|@ instruction v2|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr   12  <|@ instruction v3|DWORD = MOVE input: r8|DWORD moveKind: DWORD <|@ <|@
      nr   14  <|@ instruction v4|DWORD[_] = MOV input: [v0|QWORD[.] + 16] size: DWORD <|@ <|@
      nr   16  <|@ st <@st|@live-base-pointers: []
Queens.setRowColumn(int, int, boolean) [bci: 0]
locals: v0|QWORD[.] v1|DWORD v2|DWORD v3|DWORD 
>@ <|@ instruction CMPBRANCH (x: v1|DWORD, y: [v4|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B0 -> B1 falseDestination: B0 -> B6 size: DWORD state [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B5" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   18  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   20  <|@ instruction v5|DWORD[_] = MOV input: [v0|QWORD[.] + 12] size: DWORD <|@ <|@
      nr   22  <|@ instruction v6|DWORD = ADD (x: v2|DWORD, y: v1|DWORD) size: DWORD <|@ <|@
      nr   24  <|@ st <@st|@live-base-pointers: []
Queens.setRowColumn(int, int, boolean) [bci: 0]
locals: v0|QWORD[.] v1|DWORD v2|DWORD v3|DWORD 
>@ <|@ instruction CMPBRANCH (x: v6|DWORD, y: [v5|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B1 -> B2 falseDestination: B1 -> B5 size: DWORD state [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B3" "B4" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   26  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   28  <|@ instruction v7|DWORD[_] = MOV input: [v0|QWORD[.] + 20] size: DWORD <|@ <|@
      nr   30  <|@ instruction v8|DWORD = SUB (x: v2|DWORD, ~y: v1|DWORD) size: DWORD <|@ <|@
      nr   32  <|@ instruction v9|DWORD = LEA address: [v8|DWORD + 7] size: DWORD <|@ <|@
      nr   34  <|@ st <@st|@live-base-pointers: []
Queens.setRowColumn(int, int, boolean) [bci: 0]
locals: v0|QWORD[.] v1|DWORD v2|DWORD v3|DWORD 
>@ <|@ instruction CMPBRANCH (x: v9|DWORD, y: [v7|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B2 -> B3 falseDestination: B2 -> B4 size: DWORD state [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   36  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   38  <|@ instruction v10|QWORD = MOV value: v1|DWORD size: DWORD <|@ <|@
      nr   40  <|@ instruction v11|DWORD = AND x: v3|DWORD alignment: 4 size: DWORD y: int[1|0x1] <|@ <|@
      nr   42  <|@ instruction MOVB (x: [v10|QWORD + v4|DWORD[_] * 8 + 16], y: v11|DWORD) size: BYTE <|@ <|@
      nr   44  <|@ instruction MOVB (x: [v6|DWORD + v5|DWORD[_] * 8 + 16], y: v11|DWORD) size: BYTE <|@ <|@
      nr   46  <|@ instruction MOVB (x: [v9|DWORD + v7|DWORD[_] * 8 + 16], y: v11|DWORD) size: BYTE <|@ <|@
      nr   48  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: -) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@3dbf6f45 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B7" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   50  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   52  <|@ instruction JUMP ~outgoingValues: [int[-8475|0xffffffffffffdee5]] destination: B6 -> B7 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B7" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   54  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   56  <|@ instruction JUMP ~outgoingValues: [int[-13083|0xffffffffffffcce5]] destination: B5 -> B7 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B7" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   58  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   60  <|@ instruction JUMP ~outgoingValues: [int[-17435|0xffffffffffffbbe5]] destination: B4 -> B7 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B6" "B5" "B4" 
    successors 
    xhandlers
    flags 
    probability 2362138004555825152
    begin_IR
      LIR
      nr   62  <|@ instruction [v12|DWORD] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr   64  <|@ instruction MOV (x: [r15|QWORD + 1156], y: v12|DWORD) size: DWORD <|@ <|@
      nr   66  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr   68  <|@ st <@st|@live-base-pointers: []
Queens.setRowColumn(int, int, boolean) [bci: 0]
locals: v0|QWORD[.] v1|DWORD v2|DWORD v3|DWORD 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: aload_0       
     1: getfield      #3          // freeRows:boolean[]
     4: iload_1       
     5: iload_3       
     6: bastore       
     7: aload_0       
     8: getfield      #5          // freeMaxs:boolean[]
    11: iload_2       
    12: iload_1       
    13: iadd          
    14: iload_3       
    15: bastore       
    16: aload_0       
    17: getfield      #6          // freeMins:boolean[]
    20: iload_2       
    21: iload_1       
    22: isub          
    23: bipush        7
    25: iadd          
    26: iload_3       
    27: bastore       
    28: return        
   <|@
end_bytecodes
begin_intervals
  name "After optimize spill position"
  rcx|d fixed "[rcx|d]" rcx|d -1 [0, 10[ "NoSpillStore"
  rdx|d fixed "[rdx|d]" rdx|d -1 [0, 8[ "NoSpillStore"
  rbp|q fixed "[rbp|q]" rbp|q -1 [0, 2[ "NoSpillStore"
  rsi|q fixed "[rsi|q]" rsi|q -1 [0, 6[ "NoSpillStore"
  r8|d fixed "[r8|d]" r8|d -1 [0, 12[ "NoSpillStore"
  v0|q QWORD "[rsi|q]" v0|q rsi|q [6, 36[[50, 69[6 MustHaveRegister 14 MustHaveRegister 20 MustHaveRegister 28 MustHaveRegister  "NoSpillStore"
  v1|d DWORD "[rdx|d]" v1|d rdx|d [8, 38[[50, 69[8 MustHaveRegister 16 MustHaveRegister 22 ShouldHaveRegister 30 ShouldHaveRegister 38 ShouldHaveRegister  "NoSpillStore"
  v2|d DWORD "[rcx|d]" v2|d rcx|d [10, 36[[50, 69[10 MustHaveRegister 22 ShouldHaveRegister 30 MustHaveRegister  "NoSpillStore"
  v3|d DWORD "[r8|d]" v3|d r8|d [12, 40[[50, 69[12 MustHaveRegister 40 MustHaveRegister  "NoSpillStore"
  v4|d DWORD "[r10|d]" v4|d -1 [14, 42[14 MustHaveRegister 16 MustHaveRegister 42 MustHaveRegister  "NoSpillStore"
  v5|d DWORD "[r11|d]" v5|d -1 [20, 44[20 MustHaveRegister 24 MustHaveRegister 44 MustHaveRegister  "NoSpillStore"
  v6|d DWORD "[r9|d]" v6|d v2|d [22, 44[22 MustHaveRegister 24 MustHaveRegister 44 MustHaveRegister  "NoSpillStore"
  v7|d DWORD "[rbx|d]" v7|d -1 [28, 46[28 MustHaveRegister 34 MustHaveRegister 46 MustHaveRegister  "NoSpillStore"
  v8|d DWORD "[rdi|d]" v8|d v2|d [30, 32[30 MustHaveRegister 32 MustHaveRegister  "NoSpillStore"
  v9|d DWORD "[rdi|d]" v9|d -1 [32, 46[32 MustHaveRegister 34 MustHaveRegister 46 MustHaveRegister  "NoSpillStore"
  v10|q QWORD "[rcx|q]" v10|q -1 [38, 42[38 MustHaveRegister 42 MustHaveRegister  "NoSpillStore"
  v11|d DWORD "[r8|d]" v11|d v3|d [40, 46[40 MustHaveRegister 42 MustHaveRegister 44 MustHaveRegister 46 MustHaveRegister  "NoSpillStore"
  v12|d DWORD "[r10|d]" v12|d -1 [62, 64[64 MustHaveRegister  "NoSpillStore"
end_intervals
begin_cfg
  name "After LinearScanOptimizeSpillPosition"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B6" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|QWORD[.], rdx|DWORD, rcx|DWORD, r8|DWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr    4  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@276f26a2 slotKind: QWORD <|@ <|@
      nr    6  <|@ instruction v0|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr    8  <|@ instruction v1|DWORD = MOVE input: rdx|DWORD moveKind: DWORD <|@ <|@
      nr   10  <|@ instruction v2|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr   12  <|@ instruction v3|DWORD = MOVE input: r8|DWORD moveKind: DWORD <|@ <|@
      nr   14  <|@ instruction v4|DWORD[_] = MOV input: [v0|QWORD[.] + 16] size: DWORD <|@ <|@
      nr   16  <|@ st <@st|@live-base-pointers: []
Queens.setRowColumn(int, int, boolean) [bci: 0]
locals: v0|QWORD[.] v1|DWORD v2|DWORD v3|DWORD 
>@ <|@ instruction CMPBRANCH (x: v1|DWORD, y: [v4|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B0 -> B1 falseDestination: B0 -> B6 size: DWORD state [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B5" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   18  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   20  <|@ instruction v5|DWORD[_] = MOV input: [v0|QWORD[.] + 12] size: DWORD <|@ <|@
      nr   22  <|@ instruction v6|DWORD = ADD (x: v2|DWORD, y: v1|DWORD) size: DWORD <|@ <|@
      nr   24  <|@ st <@st|@live-base-pointers: []
Queens.setRowColumn(int, int, boolean) [bci: 0]
locals: v0|QWORD[.] v1|DWORD v2|DWORD v3|DWORD 
>@ <|@ instruction CMPBRANCH (x: v6|DWORD, y: [v5|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B1 -> B2 falseDestination: B1 -> B5 size: DWORD state [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B3" "B4" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   26  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   28  <|@ instruction v7|DWORD[_] = MOV input: [v0|QWORD[.] + 20] size: DWORD <|@ <|@
      nr   30  <|@ instruction v8|DWORD = SUB (x: v2|DWORD, ~y: v1|DWORD) size: DWORD <|@ <|@
      nr   32  <|@ instruction v9|DWORD = LEA address: [v8|DWORD + 7] size: DWORD <|@ <|@
      nr   34  <|@ st <@st|@live-base-pointers: []
Queens.setRowColumn(int, int, boolean) [bci: 0]
locals: v0|QWORD[.] v1|DWORD v2|DWORD v3|DWORD 
>@ <|@ instruction CMPBRANCH (x: v9|DWORD, y: [v7|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B2 -> B3 falseDestination: B2 -> B4 size: DWORD state [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   36  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   38  <|@ instruction v10|QWORD = MOV value: v1|DWORD size: DWORD <|@ <|@
      nr   40  <|@ instruction v11|DWORD = AND x: v3|DWORD alignment: 4 size: DWORD y: int[1|0x1] <|@ <|@
      nr   42  <|@ instruction MOVB (x: [v10|QWORD + v4|DWORD[_] * 8 + 16], y: v11|DWORD) size: BYTE <|@ <|@
      nr   44  <|@ instruction MOVB (x: [v6|DWORD + v5|DWORD[_] * 8 + 16], y: v11|DWORD) size: BYTE <|@ <|@
      nr   46  <|@ instruction MOVB (x: [v9|DWORD + v7|DWORD[_] * 8 + 16], y: v11|DWORD) size: BYTE <|@ <|@
      nr   48  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: -) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@3dbf6f45 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B7" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   50  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   52  <|@ instruction JUMP ~outgoingValues: [int[-8475|0xffffffffffffdee5]] destination: B6 -> B7 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B7" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   54  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   56  <|@ instruction JUMP ~outgoingValues: [int[-13083|0xffffffffffffcce5]] destination: B5 -> B7 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B7" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   58  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   60  <|@ instruction JUMP ~outgoingValues: [int[-17435|0xffffffffffffbbe5]] destination: B4 -> B7 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B6" "B5" "B4" 
    successors 
    xhandlers
    flags 
    probability 2362138004555825152
    begin_IR
      LIR
      nr   62  <|@ instruction [v12|DWORD] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr   64  <|@ instruction MOV (x: [r15|QWORD + 1156], y: v12|DWORD) size: DWORD <|@ <|@
      nr   66  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr   68  <|@ st <@st|@live-base-pointers: []
Queens.setRowColumn(int, int, boolean) [bci: 0]
locals: v0|QWORD[.] v1|DWORD v2|DWORD v3|DWORD 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: aload_0       
     1: getfield      #3          // freeRows:boolean[]
     4: iload_1       
     5: iload_3       
     6: bastore       
     7: aload_0       
     8: getfield      #5          // freeMaxs:boolean[]
    11: iload_2       
    12: iload_1       
    13: iadd          
    14: iload_3       
    15: bastore       
    16: aload_0       
    17: getfield      #6          // freeMins:boolean[]
    20: iload_2       
    21: iload_1       
    22: isub          
    23: bipush        7
    25: iadd          
    26: iload_3       
    27: bastore       
    28: return        
   <|@
end_bytecodes
begin_intervals
  name "After resolve data flow"
  rcx|d fixed "[rcx|d]" rcx|d -1 [0, 10[ "NoSpillStore"
  rdx|d fixed "[rdx|d]" rdx|d -1 [0, 8[ "NoSpillStore"
  rbp|q fixed "[rbp|q]" rbp|q -1 [0, 2[ "NoSpillStore"
  rsi|q fixed "[rsi|q]" rsi|q -1 [0, 6[ "NoSpillStore"
  r8|d fixed "[r8|d]" r8|d -1 [0, 12[ "NoSpillStore"
  v0|q QWORD "[rsi|q]" v0|q rsi|q [6, 36[[50, 69[6 MustHaveRegister 14 MustHaveRegister 20 MustHaveRegister 28 MustHaveRegister  "NoSpillStore"
  v1|d DWORD "[rdx|d]" v1|d rdx|d [8, 38[[50, 69[8 MustHaveRegister 16 MustHaveRegister 22 ShouldHaveRegister 30 ShouldHaveRegister 38 ShouldHaveRegister  "NoSpillStore"
  v2|d DWORD "[rcx|d]" v2|d rcx|d [10, 36[[50, 69[10 MustHaveRegister 22 ShouldHaveRegister 30 MustHaveRegister  "NoSpillStore"
  v3|d DWORD "[r8|d]" v3|d r8|d [12, 40[[50, 69[12 MustHaveRegister 40 MustHaveRegister  "NoSpillStore"
  v4|d DWORD "[r10|d]" v4|d -1 [14, 42[14 MustHaveRegister 16 MustHaveRegister 42 MustHaveRegister  "NoSpillStore"
  v5|d DWORD "[r11|d]" v5|d -1 [20, 44[20 MustHaveRegister 24 MustHaveRegister 44 MustHaveRegister  "NoSpillStore"
  v6|d DWORD "[r9|d]" v6|d v2|d [22, 44[22 MustHaveRegister 24 MustHaveRegister 44 MustHaveRegister  "NoSpillStore"
  v7|d DWORD "[rbx|d]" v7|d -1 [28, 46[28 MustHaveRegister 34 MustHaveRegister 46 MustHaveRegister  "NoSpillStore"
  v8|d DWORD "[rdi|d]" v8|d v2|d [30, 32[30 MustHaveRegister 32 MustHaveRegister  "NoSpillStore"
  v9|d DWORD "[rdi|d]" v9|d -1 [32, 46[32 MustHaveRegister 34 MustHaveRegister 46 MustHaveRegister  "NoSpillStore"
  v10|q QWORD "[rcx|q]" v10|q -1 [38, 42[38 MustHaveRegister 42 MustHaveRegister  "NoSpillStore"
  v11|d DWORD "[r8|d]" v11|d v3|d [40, 46[40 MustHaveRegister 42 MustHaveRegister 44 MustHaveRegister 46 MustHaveRegister  "NoSpillStore"
  v12|d DWORD "[r10|d]" v12|d -1 [62, 64[64 MustHaveRegister  "NoSpillStore"
end_intervals
begin_cfg
  name "After SSALinearScanResolveDataFlow"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B6" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|QWORD[.], rdx|DWORD, rcx|DWORD, r8|DWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr    4  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@276f26a2 slotKind: QWORD <|@ <|@
      nr    6  <|@ instruction v0|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr    8  <|@ instruction v1|DWORD = MOVE input: rdx|DWORD moveKind: DWORD <|@ <|@
      nr   10  <|@ instruction v2|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr   12  <|@ instruction v3|DWORD = MOVE input: r8|DWORD moveKind: DWORD <|@ <|@
      nr   14  <|@ instruction v4|DWORD[_] = MOV input: [v0|QWORD[.] + 16] size: DWORD <|@ <|@
      nr   16  <|@ st <@st|@live-base-pointers: []
Queens.setRowColumn(int, int, boolean) [bci: 0]
locals: v0|QWORD[.] v1|DWORD v2|DWORD v3|DWORD 
>@ <|@ instruction CMPBRANCH (x: v1|DWORD, y: [v4|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B0 -> B1 falseDestination: B0 -> B6 size: DWORD state [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B5" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   18  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   20  <|@ instruction v5|DWORD[_] = MOV input: [v0|QWORD[.] + 12] size: DWORD <|@ <|@
      nr   22  <|@ instruction v6|DWORD = ADD (x: v2|DWORD, y: v1|DWORD) size: DWORD <|@ <|@
      nr   24  <|@ st <@st|@live-base-pointers: []
Queens.setRowColumn(int, int, boolean) [bci: 0]
locals: v0|QWORD[.] v1|DWORD v2|DWORD v3|DWORD 
>@ <|@ instruction CMPBRANCH (x: v6|DWORD, y: [v5|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B1 -> B2 falseDestination: B1 -> B5 size: DWORD state [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B3" "B4" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   26  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   28  <|@ instruction v7|DWORD[_] = MOV input: [v0|QWORD[.] + 20] size: DWORD <|@ <|@
      nr   30  <|@ instruction v8|DWORD = SUB (x: v2|DWORD, ~y: v1|DWORD) size: DWORD <|@ <|@
      nr   32  <|@ instruction v9|DWORD = LEA address: [v8|DWORD + 7] size: DWORD <|@ <|@
      nr   34  <|@ st <@st|@live-base-pointers: []
Queens.setRowColumn(int, int, boolean) [bci: 0]
locals: v0|QWORD[.] v1|DWORD v2|DWORD v3|DWORD 
>@ <|@ instruction CMPBRANCH (x: v9|DWORD, y: [v7|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B2 -> B3 falseDestination: B2 -> B4 size: DWORD state [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   36  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   38  <|@ instruction v10|QWORD = MOV value: v1|DWORD size: DWORD <|@ <|@
      nr   40  <|@ instruction v11|DWORD = AND x: v3|DWORD alignment: 4 size: DWORD y: int[1|0x1] <|@ <|@
      nr   42  <|@ instruction MOVB (x: [v10|QWORD + v4|DWORD[_] * 8 + 16], y: v11|DWORD) size: BYTE <|@ <|@
      nr   44  <|@ instruction MOVB (x: [v6|DWORD + v5|DWORD[_] * 8 + 16], y: v11|DWORD) size: BYTE <|@ <|@
      nr   46  <|@ instruction MOVB (x: [v9|DWORD + v7|DWORD[_] * 8 + 16], y: v11|DWORD) size: BYTE <|@ <|@
      nr   48  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: -) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@3dbf6f45 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B7" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   50  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v12|DWORD = MOVE input: int[-8475|0xffffffffffffdee5] // MoveResolver resolve mapping <|@ <|@
      nr   52  <|@ instruction JUMP ~outgoingValues: [] destination: B6 -> B7 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B7" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   54  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v12|DWORD = MOVE input: int[-13083|0xffffffffffffcce5] // MoveResolver resolve mapping <|@ <|@
      nr   56  <|@ instruction JUMP ~outgoingValues: [] destination: B5 -> B7 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B7" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   58  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v12|DWORD = MOVE input: int[-17435|0xffffffffffffbbe5] // MoveResolver resolve mapping <|@ <|@
      nr   60  <|@ instruction JUMP ~outgoingValues: [] destination: B4 -> B7 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B6" "B5" "B4" 
    successors 
    xhandlers
    flags 
    probability 2362138004555825152
    begin_IR
      LIR
      nr   62  <|@ instruction [v12|DWORD] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr   64  <|@ instruction MOV (x: [r15|QWORD + 1156], y: v12|DWORD) size: DWORD <|@ <|@
      nr   66  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr   68  <|@ st <@st|@live-base-pointers: []
Queens.setRowColumn(int, int, boolean) [bci: 0]
locals: v0|QWORD[.] v1|DWORD v2|DWORD v3|DWORD 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: aload_0       
     1: getfield      #3          // freeRows:boolean[]
     4: iload_1       
     5: iload_3       
     6: bastore       
     7: aload_0       
     8: getfield      #5          // freeMaxs:boolean[]
    11: iload_2       
    12: iload_1       
    13: iadd          
    14: iload_3       
    15: bastore       
    16: aload_0       
    17: getfield      #6          // freeMins:boolean[]
    20: iload_2       
    21: iload_1       
    22: isub          
    23: bipush        7
    25: iadd          
    26: iload_3       
    27: bastore       
    28: return        
   <|@
end_bytecodes
begin_cfg
  name "After SSALinearScanEliminateSpillMove"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B6" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|QWORD[.], rdx|DWORD, rcx|DWORD, r8|DWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr    4  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@276f26a2 slotKind: QWORD <|@ <|@
      nr    6  <|@ instruction v0|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr    8  <|@ instruction v1|DWORD = MOVE input: rdx|DWORD moveKind: DWORD <|@ <|@
      nr   10  <|@ instruction v2|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr   12  <|@ instruction v3|DWORD = MOVE input: r8|DWORD moveKind: DWORD <|@ <|@
      nr   14  <|@ instruction v4|DWORD[_] = MOV input: [v0|QWORD[.] + 16] size: DWORD <|@ <|@
      nr   16  <|@ st <@st|@live-base-pointers: []
Queens.setRowColumn(int, int, boolean) [bci: 0]
locals: v0|QWORD[.] v1|DWORD v2|DWORD v3|DWORD 
>@ <|@ instruction CMPBRANCH (x: v1|DWORD, y: [v4|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B0 -> B1 falseDestination: B0 -> B6 size: DWORD state [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B5" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   18  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   20  <|@ instruction v5|DWORD[_] = MOV input: [v0|QWORD[.] + 12] size: DWORD <|@ <|@
      nr   22  <|@ instruction v6|DWORD = ADD (x: v2|DWORD, y: v1|DWORD) size: DWORD <|@ <|@
      nr   24  <|@ st <@st|@live-base-pointers: []
Queens.setRowColumn(int, int, boolean) [bci: 0]
locals: v0|QWORD[.] v1|DWORD v2|DWORD v3|DWORD 
>@ <|@ instruction CMPBRANCH (x: v6|DWORD, y: [v5|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B1 -> B2 falseDestination: B1 -> B5 size: DWORD state [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B3" "B4" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   26  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   28  <|@ instruction v7|DWORD[_] = MOV input: [v0|QWORD[.] + 20] size: DWORD <|@ <|@
      nr   30  <|@ instruction v8|DWORD = SUB (x: v2|DWORD, ~y: v1|DWORD) size: DWORD <|@ <|@
      nr   32  <|@ instruction v9|DWORD = LEA address: [v8|DWORD + 7] size: DWORD <|@ <|@
      nr   34  <|@ st <@st|@live-base-pointers: []
Queens.setRowColumn(int, int, boolean) [bci: 0]
locals: v0|QWORD[.] v1|DWORD v2|DWORD v3|DWORD 
>@ <|@ instruction CMPBRANCH (x: v9|DWORD, y: [v7|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B2 -> B3 falseDestination: B2 -> B4 size: DWORD state [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   36  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   38  <|@ instruction v10|QWORD = MOV value: v1|DWORD size: DWORD <|@ <|@
      nr   40  <|@ instruction v11|DWORD = AND x: v3|DWORD alignment: 4 size: DWORD y: int[1|0x1] <|@ <|@
      nr   42  <|@ instruction MOVB (x: [v10|QWORD + v4|DWORD[_] * 8 + 16], y: v11|DWORD) size: BYTE <|@ <|@
      nr   44  <|@ instruction MOVB (x: [v6|DWORD + v5|DWORD[_] * 8 + 16], y: v11|DWORD) size: BYTE <|@ <|@
      nr   46  <|@ instruction MOVB (x: [v9|DWORD + v7|DWORD[_] * 8 + 16], y: v11|DWORD) size: BYTE <|@ <|@
      nr   48  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: -) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@3dbf6f45 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B7" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   50  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v12|DWORD = MOVE input: int[-8475|0xffffffffffffdee5] // MoveResolver resolve mapping <|@ <|@
      nr   52  <|@ instruction JUMP ~outgoingValues: [] destination: B6 -> B7 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B7" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   54  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v12|DWORD = MOVE input: int[-13083|0xffffffffffffcce5] // MoveResolver resolve mapping <|@ <|@
      nr   56  <|@ instruction JUMP ~outgoingValues: [] destination: B5 -> B7 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B7" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   58  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v12|DWORD = MOVE input: int[-17435|0xffffffffffffbbe5] // MoveResolver resolve mapping <|@ <|@
      nr   60  <|@ instruction JUMP ~outgoingValues: [] destination: B4 -> B7 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B6" "B5" "B4" 
    successors 
    xhandlers
    flags 
    probability 2362138004555825152
    begin_IR
      LIR
      nr   62  <|@ instruction [] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr   64  <|@ instruction MOV (x: [r15|QWORD + 1156], y: v12|DWORD) size: DWORD <|@ <|@
      nr   66  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr   68  <|@ st <@st|@live-base-pointers: []
Queens.setRowColumn(int, int, boolean) [bci: 0]
locals: v0|QWORD[.] v1|DWORD v2|DWORD v3|DWORD 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: aload_0       
     1: getfield      #3          // freeRows:boolean[]
     4: iload_1       
     5: iload_3       
     6: bastore       
     7: aload_0       
     8: getfield      #5          // freeMaxs:boolean[]
    11: iload_2       
    12: iload_1       
    13: iadd          
    14: iload_3       
    15: bastore       
    16: aload_0       
    17: getfield      #6          // freeMins:boolean[]
    20: iload_2       
    21: iload_1       
    22: isub          
    23: bipush        7
    25: iadd          
    26: iload_3       
    27: bastore       
    28: return        
   <|@
end_bytecodes
begin_cfg
  name "After LinearScanAssignLocations"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B6" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|QWORD[.], rdx|DWORD, rcx|DWORD, r8|DWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr    4  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@276f26a2 slotKind: QWORD <|@ <|@
      nr   14  <|@ instruction r10|DWORD[_] = MOV input: [rsi|QWORD[.] + 16] size: DWORD <|@ <|@
      nr   16  <|@ st <@st|@live-base-pointers: []
Queens.setRowColumn(int, int, boolean) [bci: 0]
locals: rsi|QWORD[.] rdx|DWORD rcx|DWORD r8|DWORD 
>@ <|@ instruction CMPBRANCH (x: rdx|DWORD, y: [r10|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B0 -> B1 falseDestination: B0 -> B6 size: DWORD state [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B5" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   18  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   20  <|@ instruction r11|DWORD[_] = MOV input: [rsi|QWORD[.] + 12] size: DWORD <|@ <|@
      nr   22  <|@ instruction r9|DWORD = ADD (x: rcx|DWORD, y: rdx|DWORD) size: DWORD <|@ <|@
      nr   24  <|@ st <@st|@live-base-pointers: []
Queens.setRowColumn(int, int, boolean) [bci: 0]
locals: rsi|QWORD[.] rdx|DWORD rcx|DWORD r8|DWORD 
>@ <|@ instruction CMPBRANCH (x: r9|DWORD, y: [r11|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B1 -> B2 falseDestination: B1 -> B5 size: DWORD state [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B3" "B4" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   26  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   28  <|@ instruction rbx|DWORD[_] = MOV input: [rsi|QWORD[.] + 20] size: DWORD <|@ <|@
      nr   30  <|@ instruction rdi|DWORD = SUB (x: rcx|DWORD, ~y: rdx|DWORD) size: DWORD <|@ <|@
      nr   32  <|@ instruction rdi|DWORD = LEA address: [rdi|DWORD + 7] size: DWORD <|@ <|@
      nr   34  <|@ st <@st|@live-base-pointers: []
Queens.setRowColumn(int, int, boolean) [bci: 0]
locals: rsi|QWORD[.] rdx|DWORD rcx|DWORD r8|DWORD 
>@ <|@ instruction CMPBRANCH (x: rdi|DWORD, y: [rbx|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B2 -> B3 falseDestination: B2 -> B4 size: DWORD state [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   36  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   38  <|@ instruction rcx|QWORD = MOV value: rdx|DWORD size: DWORD <|@ <|@
      nr   40  <|@ instruction r8|DWORD = AND x: r8|DWORD alignment: 4 size: DWORD y: int[1|0x1] <|@ <|@
      nr   42  <|@ instruction MOVB (x: [rcx|QWORD + r10|DWORD[_] * 8 + 16], y: r8|DWORD) size: BYTE <|@ <|@
      nr   44  <|@ instruction MOVB (x: [r9|DWORD + r11|DWORD[_] * 8 + 16], y: r8|DWORD) size: BYTE <|@ <|@
      nr   46  <|@ instruction MOVB (x: [rdi|DWORD + rbx|DWORD[_] * 8 + 16], y: r8|DWORD) size: BYTE <|@ <|@
      nr   48  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: -) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@3dbf6f45 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B7" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   50  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-8475|0xffffffffffffdee5] // MoveResolver resolve mapping <|@ <|@
      nr   52  <|@ instruction JUMP ~outgoingValues: [] destination: B6 -> B7 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B7" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   54  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-13083|0xffffffffffffcce5] // MoveResolver resolve mapping <|@ <|@
      nr   56  <|@ instruction JUMP ~outgoingValues: [] destination: B5 -> B7 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B7" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   58  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-17435|0xffffffffffffbbe5] // MoveResolver resolve mapping <|@ <|@
      nr   60  <|@ instruction JUMP ~outgoingValues: [] destination: B4 -> B7 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B6" "B5" "B4" 
    successors 
    xhandlers
    flags 
    probability 2362138004555825152
    begin_IR
      LIR
      nr   62  <|@ instruction [] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr   64  <|@ instruction MOV (x: [r15|QWORD + 1156], y: r10|DWORD) size: DWORD <|@ <|@
      nr   66  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr   68  <|@ st <@st|@live-base-pointers: []
Queens.setRowColumn(int, int, boolean) [bci: 0]
locals: rsi|QWORD[.] rdx|DWORD rcx|DWORD r8|DWORD 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: aload_0       
     1: getfield      #3          // freeRows:boolean[]
     4: iload_1       
     5: iload_3       
     6: bastore       
     7: aload_0       
     8: getfield      #5          // freeMaxs:boolean[]
    11: iload_2       
    12: iload_1       
    13: iadd          
    14: iload_3       
    15: bastore       
    16: aload_0       
    17: getfield      #6          // freeMins:boolean[]
    20: iload_2       
    21: iload_1       
    22: isub          
    23: bipush        7
    25: iadd          
    26: iload_3       
    27: bastore       
    28: return        
   <|@
end_bytecodes
begin_cfg
  name "After LinearScan"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B6" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|QWORD[.], rdx|DWORD, rcx|DWORD, r8|DWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr    4  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@276f26a2 slotKind: QWORD <|@ <|@
      nr   14  <|@ instruction r10|DWORD[_] = MOV input: [rsi|QWORD[.] + 16] size: DWORD <|@ <|@
      nr   16  <|@ st <@st|@live-base-pointers: []
Queens.setRowColumn(int, int, boolean) [bci: 0]
locals: rsi|QWORD[.] rdx|DWORD rcx|DWORD r8|DWORD 
>@ <|@ instruction CMPBRANCH (x: rdx|DWORD, y: [r10|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B0 -> B1 falseDestination: B0 -> B6 size: DWORD state [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B5" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   18  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   20  <|@ instruction r11|DWORD[_] = MOV input: [rsi|QWORD[.] + 12] size: DWORD <|@ <|@
      nr   22  <|@ instruction r9|DWORD = ADD (x: rcx|DWORD, y: rdx|DWORD) size: DWORD <|@ <|@
      nr   24  <|@ st <@st|@live-base-pointers: []
Queens.setRowColumn(int, int, boolean) [bci: 0]
locals: rsi|QWORD[.] rdx|DWORD rcx|DWORD r8|DWORD 
>@ <|@ instruction CMPBRANCH (x: r9|DWORD, y: [r11|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B1 -> B2 falseDestination: B1 -> B5 size: DWORD state [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B3" "B4" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   26  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   28  <|@ instruction rbx|DWORD[_] = MOV input: [rsi|QWORD[.] + 20] size: DWORD <|@ <|@
      nr   30  <|@ instruction rdi|DWORD = SUB (x: rcx|DWORD, ~y: rdx|DWORD) size: DWORD <|@ <|@
      nr   32  <|@ instruction rdi|DWORD = LEA address: [rdi|DWORD + 7] size: DWORD <|@ <|@
      nr   34  <|@ st <@st|@live-base-pointers: []
Queens.setRowColumn(int, int, boolean) [bci: 0]
locals: rsi|QWORD[.] rdx|DWORD rcx|DWORD r8|DWORD 
>@ <|@ instruction CMPBRANCH (x: rdi|DWORD, y: [rbx|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B2 -> B3 falseDestination: B2 -> B4 size: DWORD state [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   36  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   38  <|@ instruction rcx|QWORD = MOV value: rdx|DWORD size: DWORD <|@ <|@
      nr   40  <|@ instruction r8|DWORD = AND x: r8|DWORD alignment: 4 size: DWORD y: int[1|0x1] <|@ <|@
      nr   42  <|@ instruction MOVB (x: [rcx|QWORD + r10|DWORD[_] * 8 + 16], y: r8|DWORD) size: BYTE <|@ <|@
      nr   44  <|@ instruction MOVB (x: [r9|DWORD + r11|DWORD[_] * 8 + 16], y: r8|DWORD) size: BYTE <|@ <|@
      nr   46  <|@ instruction MOVB (x: [rdi|DWORD + rbx|DWORD[_] * 8 + 16], y: r8|DWORD) size: BYTE <|@ <|@
      nr   48  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: -) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@3dbf6f45 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B7" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   50  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-8475|0xffffffffffffdee5] // MoveResolver resolve mapping <|@ <|@
      nr   52  <|@ instruction JUMP ~outgoingValues: [] destination: B6 -> B7 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B7" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   54  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-13083|0xffffffffffffcce5] // MoveResolver resolve mapping <|@ <|@
      nr   56  <|@ instruction JUMP ~outgoingValues: [] destination: B5 -> B7 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B7" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   58  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-17435|0xffffffffffffbbe5] // MoveResolver resolve mapping <|@ <|@
      nr   60  <|@ instruction JUMP ~outgoingValues: [] destination: B4 -> B7 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B6" "B5" "B4" 
    successors 
    xhandlers
    flags 
    probability 2362138004555825152
    begin_IR
      LIR
      nr   62  <|@ instruction [] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr   64  <|@ instruction MOV (x: [r15|QWORD + 1156], y: r10|DWORD) size: DWORD <|@ <|@
      nr   66  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr   68  <|@ st <@st|@live-base-pointers: []
Queens.setRowColumn(int, int, boolean) [bci: 0]
locals: rsi|QWORD[.] rdx|DWORD rcx|DWORD r8|DWORD 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: aload_0       
     1: getfield      #3          // freeRows:boolean[]
     4: iload_1       
     5: iload_3       
     6: bastore       
     7: aload_0       
     8: getfield      #5          // freeMaxs:boolean[]
    11: iload_2       
    12: iload_1       
    13: iadd          
    14: iload_3       
    15: bastore       
    16: aload_0       
    17: getfield      #6          // freeMins:boolean[]
    20: iload_2       
    21: iload_1       
    22: isub          
    23: bipush        7
    25: iadd          
    26: iload_3       
    27: bastore       
    28: return        
   <|@
end_bytecodes
begin_cfg
  name "After LSStackSlotAllocator"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B6" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|QWORD[.], rdx|DWORD, rcx|DWORD, r8|DWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr    4  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@276f26a2 slotKind: QWORD <|@ <|@
      nr   14  <|@ instruction r10|DWORD[_] = MOV input: [rsi|QWORD[.] + 16] size: DWORD <|@ <|@
      nr   16  <|@ st <@st|@live-base-pointers: []
Queens.setRowColumn(int, int, boolean) [bci: 0]
locals: rsi|QWORD[.] rdx|DWORD rcx|DWORD r8|DWORD 
>@ <|@ instruction CMPBRANCH (x: rdx|DWORD, y: [r10|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B0 -> B1 falseDestination: B0 -> B6 size: DWORD state [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B5" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   18  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   20  <|@ instruction r11|DWORD[_] = MOV input: [rsi|QWORD[.] + 12] size: DWORD <|@ <|@
      nr   22  <|@ instruction r9|DWORD = ADD (x: rcx|DWORD, y: rdx|DWORD) size: DWORD <|@ <|@
      nr   24  <|@ st <@st|@live-base-pointers: []
Queens.setRowColumn(int, int, boolean) [bci: 0]
locals: rsi|QWORD[.] rdx|DWORD rcx|DWORD r8|DWORD 
>@ <|@ instruction CMPBRANCH (x: r9|DWORD, y: [r11|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B1 -> B2 falseDestination: B1 -> B5 size: DWORD state [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B3" "B4" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   26  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   28  <|@ instruction rbx|DWORD[_] = MOV input: [rsi|QWORD[.] + 20] size: DWORD <|@ <|@
      nr   30  <|@ instruction rdi|DWORD = SUB (x: rcx|DWORD, ~y: rdx|DWORD) size: DWORD <|@ <|@
      nr   32  <|@ instruction rdi|DWORD = LEA address: [rdi|DWORD + 7] size: DWORD <|@ <|@
      nr   34  <|@ st <@st|@live-base-pointers: []
Queens.setRowColumn(int, int, boolean) [bci: 0]
locals: rsi|QWORD[.] rdx|DWORD rcx|DWORD r8|DWORD 
>@ <|@ instruction CMPBRANCH (x: rdi|DWORD, y: [rbx|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B2 -> B3 falseDestination: B2 -> B4 size: DWORD state [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   36  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   38  <|@ instruction rcx|QWORD = MOV value: rdx|DWORD size: DWORD <|@ <|@
      nr   40  <|@ instruction r8|DWORD = AND x: r8|DWORD alignment: 4 size: DWORD y: int[1|0x1] <|@ <|@
      nr   42  <|@ instruction MOVB (x: [rcx|QWORD + r10|DWORD[_] * 8 + 16], y: r8|DWORD) size: BYTE <|@ <|@
      nr   44  <|@ instruction MOVB (x: [r9|DWORD + r11|DWORD[_] * 8 + 16], y: r8|DWORD) size: BYTE <|@ <|@
      nr   46  <|@ instruction MOVB (x: [rdi|DWORD + rbx|DWORD[_] * 8 + 16], y: r8|DWORD) size: BYTE <|@ <|@
      nr   48  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: -) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@3dbf6f45 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B7" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   50  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-8475|0xffffffffffffdee5] // MoveResolver resolve mapping <|@ <|@
      nr   52  <|@ instruction JUMP ~outgoingValues: [] destination: B6 -> B7 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B7" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   54  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-13083|0xffffffffffffcce5] // MoveResolver resolve mapping <|@ <|@
      nr   56  <|@ instruction JUMP ~outgoingValues: [] destination: B5 -> B7 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B7" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   58  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-17435|0xffffffffffffbbe5] // MoveResolver resolve mapping <|@ <|@
      nr   60  <|@ instruction JUMP ~outgoingValues: [] destination: B4 -> B7 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B6" "B5" "B4" 
    successors 
    xhandlers
    flags 
    probability 2362138004555825152
    begin_IR
      LIR
      nr   62  <|@ instruction [] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr   64  <|@ instruction MOV (x: [r15|QWORD + 1156], y: r10|DWORD) size: DWORD <|@ <|@
      nr   66  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr   68  <|@ st <@st|@live-base-pointers: []
Queens.setRowColumn(int, int, boolean) [bci: 0]
locals: rsi|QWORD[.] rdx|DWORD rcx|DWORD r8|DWORD 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: aload_0       
     1: getfield      #3          // freeRows:boolean[]
     4: iload_1       
     5: iload_3       
     6: bastore       
     7: aload_0       
     8: getfield      #5          // freeMaxs:boolean[]
    11: iload_2       
    12: iload_1       
    13: iadd          
    14: iload_3       
    15: bastore       
    16: aload_0       
    17: getfield      #6          // freeMins:boolean[]
    20: iload_2       
    21: iload_1       
    22: isub          
    23: bipush        7
    25: iadd          
    26: iload_3       
    27: bastore       
    28: return        
   <|@
end_bytecodes
begin_cfg
  name "After AllocationStage"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B6" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|QWORD[.], rdx|DWORD, rcx|DWORD, r8|DWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr    4  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@276f26a2 slotKind: QWORD <|@ <|@
      nr   14  <|@ instruction r10|DWORD[_] = MOV input: [rsi|QWORD[.] + 16] size: DWORD <|@ <|@
      nr   16  <|@ st <@st|@live-base-pointers: []
Queens.setRowColumn(int, int, boolean) [bci: 0]
locals: rsi|QWORD[.] rdx|DWORD rcx|DWORD r8|DWORD 
>@ <|@ instruction CMPBRANCH (x: rdx|DWORD, y: [r10|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B0 -> B1 falseDestination: B0 -> B6 size: DWORD state [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B5" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   18  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   20  <|@ instruction r11|DWORD[_] = MOV input: [rsi|QWORD[.] + 12] size: DWORD <|@ <|@
      nr   22  <|@ instruction r9|DWORD = ADD (x: rcx|DWORD, y: rdx|DWORD) size: DWORD <|@ <|@
      nr   24  <|@ st <@st|@live-base-pointers: []
Queens.setRowColumn(int, int, boolean) [bci: 0]
locals: rsi|QWORD[.] rdx|DWORD rcx|DWORD r8|DWORD 
>@ <|@ instruction CMPBRANCH (x: r9|DWORD, y: [r11|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B1 -> B2 falseDestination: B1 -> B5 size: DWORD state [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B3" "B4" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   26  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   28  <|@ instruction rbx|DWORD[_] = MOV input: [rsi|QWORD[.] + 20] size: DWORD <|@ <|@
      nr   30  <|@ instruction rdi|DWORD = SUB (x: rcx|DWORD, ~y: rdx|DWORD) size: DWORD <|@ <|@
      nr   32  <|@ instruction rdi|DWORD = LEA address: [rdi|DWORD + 7] size: DWORD <|@ <|@
      nr   34  <|@ st <@st|@live-base-pointers: []
Queens.setRowColumn(int, int, boolean) [bci: 0]
locals: rsi|QWORD[.] rdx|DWORD rcx|DWORD r8|DWORD 
>@ <|@ instruction CMPBRANCH (x: rdi|DWORD, y: [rbx|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B2 -> B3 falseDestination: B2 -> B4 size: DWORD state [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   36  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   38  <|@ instruction rcx|QWORD = MOV value: rdx|DWORD size: DWORD <|@ <|@
      nr   40  <|@ instruction r8|DWORD = AND x: r8|DWORD alignment: 4 size: DWORD y: int[1|0x1] <|@ <|@
      nr   42  <|@ instruction MOVB (x: [rcx|QWORD + r10|DWORD[_] * 8 + 16], y: r8|DWORD) size: BYTE <|@ <|@
      nr   44  <|@ instruction MOVB (x: [r9|DWORD + r11|DWORD[_] * 8 + 16], y: r8|DWORD) size: BYTE <|@ <|@
      nr   46  <|@ instruction MOVB (x: [rdi|DWORD + rbx|DWORD[_] * 8 + 16], y: r8|DWORD) size: BYTE <|@ <|@
      nr   48  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: -) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@3dbf6f45 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B7" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   50  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-8475|0xffffffffffffdee5] // MoveResolver resolve mapping <|@ <|@
      nr   52  <|@ instruction JUMP ~outgoingValues: [] destination: B6 -> B7 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B7" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   54  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-13083|0xffffffffffffcce5] // MoveResolver resolve mapping <|@ <|@
      nr   56  <|@ instruction JUMP ~outgoingValues: [] destination: B5 -> B7 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B7" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   58  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-17435|0xffffffffffffbbe5] // MoveResolver resolve mapping <|@ <|@
      nr   60  <|@ instruction JUMP ~outgoingValues: [] destination: B4 -> B7 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B6" "B5" "B4" 
    successors 
    xhandlers
    flags 
    probability 2362138004555825152
    begin_IR
      LIR
      nr   62  <|@ instruction [] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr   64  <|@ instruction MOV (x: [r15|QWORD + 1156], y: r10|DWORD) size: DWORD <|@ <|@
      nr   66  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr   68  <|@ st <@st|@live-base-pointers: []
Queens.setRowColumn(int, int, boolean) [bci: 0]
locals: rsi|QWORD[.] rdx|DWORD rcx|DWORD r8|DWORD 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: aload_0       
     1: getfield      #3          // freeRows:boolean[]
     4: iload_1       
     5: iload_3       
     6: bastore       
     7: aload_0       
     8: getfield      #5          // freeMaxs:boolean[]
    11: iload_2       
    12: iload_1       
    13: iadd          
    14: iload_3       
    15: bastore       
    16: aload_0       
    17: getfield      #6          // freeMins:boolean[]
    20: iload_2       
    21: iload_1       
    22: isub          
    23: bipush        7
    25: iadd          
    26: iload_3       
    27: bastore       
    28: return        
   <|@
end_bytecodes
begin_cfg
  name "After EdgeMoveOptimizer"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B6" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|QWORD[.], rdx|DWORD, rcx|DWORD, r8|DWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr    4  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@276f26a2 slotKind: QWORD <|@ <|@
      nr   14  <|@ instruction r10|DWORD[_] = MOV input: [rsi|QWORD[.] + 16] size: DWORD <|@ <|@
      nr   16  <|@ st <@st|@live-base-pointers: []
Queens.setRowColumn(int, int, boolean) [bci: 0]
locals: rsi|QWORD[.] rdx|DWORD rcx|DWORD r8|DWORD 
>@ <|@ instruction CMPBRANCH (x: rdx|DWORD, y: [r10|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B0 -> B1 falseDestination: B0 -> B6 size: DWORD state [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B5" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   18  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   20  <|@ instruction r11|DWORD[_] = MOV input: [rsi|QWORD[.] + 12] size: DWORD <|@ <|@
      nr   22  <|@ instruction r9|DWORD = ADD (x: rcx|DWORD, y: rdx|DWORD) size: DWORD <|@ <|@
      nr   24  <|@ st <@st|@live-base-pointers: []
Queens.setRowColumn(int, int, boolean) [bci: 0]
locals: rsi|QWORD[.] rdx|DWORD rcx|DWORD r8|DWORD 
>@ <|@ instruction CMPBRANCH (x: r9|DWORD, y: [r11|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B1 -> B2 falseDestination: B1 -> B5 size: DWORD state [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B3" "B4" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   26  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   28  <|@ instruction rbx|DWORD[_] = MOV input: [rsi|QWORD[.] + 20] size: DWORD <|@ <|@
      nr   30  <|@ instruction rdi|DWORD = SUB (x: rcx|DWORD, ~y: rdx|DWORD) size: DWORD <|@ <|@
      nr   32  <|@ instruction rdi|DWORD = LEA address: [rdi|DWORD + 7] size: DWORD <|@ <|@
      nr   34  <|@ st <@st|@live-base-pointers: []
Queens.setRowColumn(int, int, boolean) [bci: 0]
locals: rsi|QWORD[.] rdx|DWORD rcx|DWORD r8|DWORD 
>@ <|@ instruction CMPBRANCH (x: rdi|DWORD, y: [rbx|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B2 -> B3 falseDestination: B2 -> B4 size: DWORD state [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   36  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   38  <|@ instruction rcx|QWORD = MOV value: rdx|DWORD size: DWORD <|@ <|@
      nr   40  <|@ instruction r8|DWORD = AND x: r8|DWORD alignment: 4 size: DWORD y: int[1|0x1] <|@ <|@
      nr   42  <|@ instruction MOVB (x: [rcx|QWORD + r10|DWORD[_] * 8 + 16], y: r8|DWORD) size: BYTE <|@ <|@
      nr   44  <|@ instruction MOVB (x: [r9|DWORD + r11|DWORD[_] * 8 + 16], y: r8|DWORD) size: BYTE <|@ <|@
      nr   46  <|@ instruction MOVB (x: [rdi|DWORD + rbx|DWORD[_] * 8 + 16], y: r8|DWORD) size: BYTE <|@ <|@
      nr   48  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: -) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@3dbf6f45 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B7" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   50  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-8475|0xffffffffffffdee5] // MoveResolver resolve mapping <|@ <|@
      nr   52  <|@ instruction JUMP ~outgoingValues: [] destination: B6 -> B7 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B7" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   54  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-13083|0xffffffffffffcce5] // MoveResolver resolve mapping <|@ <|@
      nr   56  <|@ instruction JUMP ~outgoingValues: [] destination: B5 -> B7 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B7" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   58  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-17435|0xffffffffffffbbe5] // MoveResolver resolve mapping <|@ <|@
      nr   60  <|@ instruction JUMP ~outgoingValues: [] destination: B4 -> B7 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B6" "B5" "B4" 
    successors 
    xhandlers
    flags 
    probability 2362138004555825152
    begin_IR
      LIR
      nr   62  <|@ instruction [] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr   64  <|@ instruction MOV (x: [r15|QWORD + 1156], y: r10|DWORD) size: DWORD <|@ <|@
      nr   66  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr   68  <|@ st <@st|@live-base-pointers: []
Queens.setRowColumn(int, int, boolean) [bci: 0]
locals: rsi|QWORD[.] rdx|DWORD rcx|DWORD r8|DWORD 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: aload_0       
     1: getfield      #3          // freeRows:boolean[]
     4: iload_1       
     5: iload_3       
     6: bastore       
     7: aload_0       
     8: getfield      #5          // freeMaxs:boolean[]
    11: iload_2       
    12: iload_1       
    13: iadd          
    14: iload_3       
    15: bastore       
    16: aload_0       
    17: getfield      #6          // freeMins:boolean[]
    20: iload_2       
    21: iload_1       
    22: isub          
    23: bipush        7
    25: iadd          
    26: iload_3       
    27: bastore       
    28: return        
   <|@
end_bytecodes
begin_cfg
  name "After RedundantMoveElimination"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B6" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|QWORD[.], rdx|DWORD, rcx|DWORD, r8|DWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr    4  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@276f26a2 slotKind: QWORD <|@ <|@
      nr   14  <|@ instruction r10|DWORD[_] = MOV input: [rsi|QWORD[.] + 16] size: DWORD <|@ <|@
      nr   16  <|@ st <@st|@live-base-pointers: []
Queens.setRowColumn(int, int, boolean) [bci: 0]
locals: rsi|QWORD[.] rdx|DWORD rcx|DWORD r8|DWORD 
>@ <|@ instruction CMPBRANCH (x: rdx|DWORD, y: [r10|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B0 -> B1 falseDestination: B0 -> B6 size: DWORD state [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B5" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   18  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   20  <|@ instruction r11|DWORD[_] = MOV input: [rsi|QWORD[.] + 12] size: DWORD <|@ <|@
      nr   22  <|@ instruction r9|DWORD = ADD (x: rcx|DWORD, y: rdx|DWORD) size: DWORD <|@ <|@
      nr   24  <|@ st <@st|@live-base-pointers: []
Queens.setRowColumn(int, int, boolean) [bci: 0]
locals: rsi|QWORD[.] rdx|DWORD rcx|DWORD r8|DWORD 
>@ <|@ instruction CMPBRANCH (x: r9|DWORD, y: [r11|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B1 -> B2 falseDestination: B1 -> B5 size: DWORD state [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B3" "B4" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   26  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   28  <|@ instruction rbx|DWORD[_] = MOV input: [rsi|QWORD[.] + 20] size: DWORD <|@ <|@
      nr   30  <|@ instruction rdi|DWORD = SUB (x: rcx|DWORD, ~y: rdx|DWORD) size: DWORD <|@ <|@
      nr   32  <|@ instruction rdi|DWORD = LEA address: [rdi|DWORD + 7] size: DWORD <|@ <|@
      nr   34  <|@ st <@st|@live-base-pointers: []
Queens.setRowColumn(int, int, boolean) [bci: 0]
locals: rsi|QWORD[.] rdx|DWORD rcx|DWORD r8|DWORD 
>@ <|@ instruction CMPBRANCH (x: rdi|DWORD, y: [rbx|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B2 -> B3 falseDestination: B2 -> B4 size: DWORD state [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   36  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   38  <|@ instruction rcx|QWORD = MOV value: rdx|DWORD size: DWORD <|@ <|@
      nr   40  <|@ instruction r8|DWORD = AND x: r8|DWORD alignment: 4 size: DWORD y: int[1|0x1] <|@ <|@
      nr   42  <|@ instruction MOVB (x: [rcx|QWORD + r10|DWORD[_] * 8 + 16], y: r8|DWORD) size: BYTE <|@ <|@
      nr   44  <|@ instruction MOVB (x: [r9|DWORD + r11|DWORD[_] * 8 + 16], y: r8|DWORD) size: BYTE <|@ <|@
      nr   46  <|@ instruction MOVB (x: [rdi|DWORD + rbx|DWORD[_] * 8 + 16], y: r8|DWORD) size: BYTE <|@ <|@
      nr   48  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: -) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@3dbf6f45 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B7" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   50  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-8475|0xffffffffffffdee5] // MoveResolver resolve mapping <|@ <|@
      nr   52  <|@ instruction JUMP ~outgoingValues: [] destination: B6 -> B7 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B7" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   54  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-13083|0xffffffffffffcce5] // MoveResolver resolve mapping <|@ <|@
      nr   56  <|@ instruction JUMP ~outgoingValues: [] destination: B5 -> B7 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B7" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   58  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-17435|0xffffffffffffbbe5] // MoveResolver resolve mapping <|@ <|@
      nr   60  <|@ instruction JUMP ~outgoingValues: [] destination: B4 -> B7 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B6" "B5" "B4" 
    successors 
    xhandlers
    flags 
    probability 2362138004555825152
    begin_IR
      LIR
      nr   62  <|@ instruction [] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr   64  <|@ instruction MOV (x: [r15|QWORD + 1156], y: r10|DWORD) size: DWORD <|@ <|@
      nr   66  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr   68  <|@ st <@st|@live-base-pointers: []
Queens.setRowColumn(int, int, boolean) [bci: 0]
locals: rsi|QWORD[.] rdx|DWORD rcx|DWORD r8|DWORD 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: aload_0       
     1: getfield      #3          // freeRows:boolean[]
     4: iload_1       
     5: iload_3       
     6: bastore       
     7: aload_0       
     8: getfield      #5          // freeMaxs:boolean[]
    11: iload_2       
    12: iload_1       
    13: iadd          
    14: iload_3       
    15: bastore       
    16: aload_0       
    17: getfield      #6          // freeMins:boolean[]
    20: iload_2       
    21: iload_1       
    22: isub          
    23: bipush        7
    25: iadd          
    26: iload_3       
    27: bastore       
    28: return        
   <|@
end_bytecodes
begin_cfg
  name "After NullCheckOptimizer"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B6" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|QWORD[.], rdx|DWORD, rcx|DWORD, r8|DWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr    4  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@276f26a2 slotKind: QWORD <|@ <|@
      nr   14  <|@ instruction r10|DWORD[_] = MOV input: [rsi|QWORD[.] + 16] size: DWORD <|@ <|@
      nr   16  <|@ st <@st|@live-base-pointers: []
Queens.setRowColumn(int, int, boolean) [bci: 0]
locals: rsi|QWORD[.] rdx|DWORD rcx|DWORD r8|DWORD 
>@ <|@ instruction CMPBRANCH (x: rdx|DWORD, y: [r10|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B0 -> B1 falseDestination: B0 -> B6 size: DWORD state [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B5" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   18  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   20  <|@ instruction r11|DWORD[_] = MOV input: [rsi|QWORD[.] + 12] size: DWORD <|@ <|@
      nr   22  <|@ instruction r9|DWORD = ADD (x: rcx|DWORD, y: rdx|DWORD) size: DWORD <|@ <|@
      nr   24  <|@ st <@st|@live-base-pointers: []
Queens.setRowColumn(int, int, boolean) [bci: 0]
locals: rsi|QWORD[.] rdx|DWORD rcx|DWORD r8|DWORD 
>@ <|@ instruction CMPBRANCH (x: r9|DWORD, y: [r11|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B1 -> B2 falseDestination: B1 -> B5 size: DWORD state [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B3" "B4" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   26  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   28  <|@ instruction rbx|DWORD[_] = MOV input: [rsi|QWORD[.] + 20] size: DWORD <|@ <|@
      nr   30  <|@ instruction rdi|DWORD = SUB (x: rcx|DWORD, ~y: rdx|DWORD) size: DWORD <|@ <|@
      nr   32  <|@ instruction rdi|DWORD = LEA address: [rdi|DWORD + 7] size: DWORD <|@ <|@
      nr   34  <|@ st <@st|@live-base-pointers: []
Queens.setRowColumn(int, int, boolean) [bci: 0]
locals: rsi|QWORD[.] rdx|DWORD rcx|DWORD r8|DWORD 
>@ <|@ instruction CMPBRANCH (x: rdi|DWORD, y: [rbx|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B2 -> B3 falseDestination: B2 -> B4 size: DWORD state [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   36  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   38  <|@ instruction rcx|QWORD = MOV value: rdx|DWORD size: DWORD <|@ <|@
      nr   40  <|@ instruction r8|DWORD = AND x: r8|DWORD alignment: 4 size: DWORD y: int[1|0x1] <|@ <|@
      nr   42  <|@ instruction MOVB (x: [rcx|QWORD + r10|DWORD[_] * 8 + 16], y: r8|DWORD) size: BYTE <|@ <|@
      nr   44  <|@ instruction MOVB (x: [r9|DWORD + r11|DWORD[_] * 8 + 16], y: r8|DWORD) size: BYTE <|@ <|@
      nr   46  <|@ instruction MOVB (x: [rdi|DWORD + rbx|DWORD[_] * 8 + 16], y: r8|DWORD) size: BYTE <|@ <|@
      nr   48  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: -) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@3dbf6f45 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B7" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   50  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-8475|0xffffffffffffdee5] // MoveResolver resolve mapping <|@ <|@
      nr   52  <|@ instruction JUMP ~outgoingValues: [] destination: B6 -> B7 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B7" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   54  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-13083|0xffffffffffffcce5] // MoveResolver resolve mapping <|@ <|@
      nr   56  <|@ instruction JUMP ~outgoingValues: [] destination: B5 -> B7 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B7" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   58  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-17435|0xffffffffffffbbe5] // MoveResolver resolve mapping <|@ <|@
      nr   60  <|@ instruction JUMP ~outgoingValues: [] destination: B4 -> B7 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B6" "B5" "B4" 
    successors 
    xhandlers
    flags 
    probability 2362138004555825152
    begin_IR
      LIR
      nr   62  <|@ instruction [] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr   64  <|@ instruction MOV (x: [r15|QWORD + 1156], y: r10|DWORD) size: DWORD <|@ <|@
      nr   66  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr   68  <|@ st <@st|@live-base-pointers: []
Queens.setRowColumn(int, int, boolean) [bci: 0]
locals: rsi|QWORD[.] rdx|DWORD rcx|DWORD r8|DWORD 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: aload_0       
     1: getfield      #3          // freeRows:boolean[]
     4: iload_1       
     5: iload_3       
     6: bastore       
     7: aload_0       
     8: getfield      #5          // freeMaxs:boolean[]
    11: iload_2       
    12: iload_1       
    13: iadd          
    14: iload_3       
    15: bastore       
    16: aload_0       
    17: getfield      #6          // freeMins:boolean[]
    20: iload_2       
    21: iload_1       
    22: isub          
    23: bipush        7
    25: iadd          
    26: iload_3       
    27: bastore       
    28: return        
   <|@
end_bytecodes
begin_cfg
  name "After ControlFlowOptimizer"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B6" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|QWORD[.], rdx|DWORD, rcx|DWORD, r8|DWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr    4  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@276f26a2 slotKind: QWORD <|@ <|@
      nr   14  <|@ instruction r10|DWORD[_] = MOV input: [rsi|QWORD[.] + 16] size: DWORD <|@ <|@
      nr   16  <|@ st <@st|@live-base-pointers: []
Queens.setRowColumn(int, int, boolean) [bci: 0]
locals: rsi|QWORD[.] rdx|DWORD rcx|DWORD r8|DWORD 
>@ <|@ instruction CMPBRANCH (x: rdx|DWORD, y: [r10|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B0 -> B1 falseDestination: B0 -> B6 size: DWORD state [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B5" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   18  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   20  <|@ instruction r11|DWORD[_] = MOV input: [rsi|QWORD[.] + 12] size: DWORD <|@ <|@
      nr   22  <|@ instruction r9|DWORD = ADD (x: rcx|DWORD, y: rdx|DWORD) size: DWORD <|@ <|@
      nr   24  <|@ st <@st|@live-base-pointers: []
Queens.setRowColumn(int, int, boolean) [bci: 0]
locals: rsi|QWORD[.] rdx|DWORD rcx|DWORD r8|DWORD 
>@ <|@ instruction CMPBRANCH (x: r9|DWORD, y: [r11|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B1 -> B2 falseDestination: B1 -> B5 size: DWORD state [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B3" "B4" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   26  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   28  <|@ instruction rbx|DWORD[_] = MOV input: [rsi|QWORD[.] + 20] size: DWORD <|@ <|@
      nr   30  <|@ instruction rdi|DWORD = SUB (x: rcx|DWORD, ~y: rdx|DWORD) size: DWORD <|@ <|@
      nr   32  <|@ instruction rdi|DWORD = LEA address: [rdi|DWORD + 7] size: DWORD <|@ <|@
      nr   34  <|@ st <@st|@live-base-pointers: []
Queens.setRowColumn(int, int, boolean) [bci: 0]
locals: rsi|QWORD[.] rdx|DWORD rcx|DWORD r8|DWORD 
>@ <|@ instruction CMPBRANCH (x: rdi|DWORD, y: [rbx|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B2 -> B3 falseDestination: B2 -> B4 size: DWORD state [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   36  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   38  <|@ instruction rcx|QWORD = MOV value: rdx|DWORD size: DWORD <|@ <|@
      nr   40  <|@ instruction r8|DWORD = AND x: r8|DWORD alignment: 4 size: DWORD y: int[1|0x1] <|@ <|@
      nr   42  <|@ instruction MOVB (x: [rcx|QWORD + r10|DWORD[_] * 8 + 16], y: r8|DWORD) size: BYTE <|@ <|@
      nr   44  <|@ instruction MOVB (x: [r9|DWORD + r11|DWORD[_] * 8 + 16], y: r8|DWORD) size: BYTE <|@ <|@
      nr   46  <|@ instruction MOVB (x: [rdi|DWORD + rbx|DWORD[_] * 8 + 16], y: r8|DWORD) size: BYTE <|@ <|@
      nr   48  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: -) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@3dbf6f45 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B7" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   50  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-8475|0xffffffffffffdee5] // MoveResolver resolve mapping <|@ <|@
      nr   52  <|@ instruction JUMP ~outgoingValues: [] destination: B6 -> B7 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B7" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   54  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-13083|0xffffffffffffcce5] // MoveResolver resolve mapping <|@ <|@
      nr   56  <|@ instruction JUMP ~outgoingValues: [] destination: B5 -> B7 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B7" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   58  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-17435|0xffffffffffffbbe5] // MoveResolver resolve mapping <|@ <|@
      nr   60  <|@ instruction JUMP ~outgoingValues: [] destination: B4 -> B7 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B6" "B5" "B4" 
    successors 
    xhandlers
    flags 
    probability 2362138004555825152
    begin_IR
      LIR
      nr   62  <|@ instruction [] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr   64  <|@ instruction MOV (x: [r15|QWORD + 1156], y: r10|DWORD) size: DWORD <|@ <|@
      nr   66  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr   68  <|@ st <@st|@live-base-pointers: []
Queens.setRowColumn(int, int, boolean) [bci: 0]
locals: rsi|QWORD[.] rdx|DWORD rcx|DWORD r8|DWORD 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: aload_0       
     1: getfield      #3          // freeRows:boolean[]
     4: iload_1       
     5: iload_3       
     6: bastore       
     7: aload_0       
     8: getfield      #5          // freeMaxs:boolean[]
    11: iload_2       
    12: iload_1       
    13: iadd          
    14: iload_3       
    15: bastore       
    16: aload_0       
    17: getfield      #6          // freeMins:boolean[]
    20: iload_2       
    21: iload_1       
    22: isub          
    23: bipush        7
    25: iadd          
    26: iload_3       
    27: bastore       
    28: return        
   <|@
end_bytecodes
begin_cfg
  name "After ComputeCodeEmissionOrder"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B6" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|QWORD[.], rdx|DWORD, rcx|DWORD, r8|DWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr    4  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@276f26a2 slotKind: QWORD <|@ <|@
      nr   14  <|@ instruction r10|DWORD[_] = MOV input: [rsi|QWORD[.] + 16] size: DWORD <|@ <|@
      nr   16  <|@ st <@st|@live-base-pointers: []
Queens.setRowColumn(int, int, boolean) [bci: 0]
locals: rsi|QWORD[.] rdx|DWORD rcx|DWORD r8|DWORD 
>@ <|@ instruction CMPBRANCH (x: rdx|DWORD, y: [r10|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B0 -> B1 falseDestination: B0 -> B6 size: DWORD state [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B5" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   18  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   20  <|@ instruction r11|DWORD[_] = MOV input: [rsi|QWORD[.] + 12] size: DWORD <|@ <|@
      nr   22  <|@ instruction r9|DWORD = ADD (x: rcx|DWORD, y: rdx|DWORD) size: DWORD <|@ <|@
      nr   24  <|@ st <@st|@live-base-pointers: []
Queens.setRowColumn(int, int, boolean) [bci: 0]
locals: rsi|QWORD[.] rdx|DWORD rcx|DWORD r8|DWORD 
>@ <|@ instruction CMPBRANCH (x: r9|DWORD, y: [r11|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B1 -> B2 falseDestination: B1 -> B5 size: DWORD state [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B3" "B4" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   26  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   28  <|@ instruction rbx|DWORD[_] = MOV input: [rsi|QWORD[.] + 20] size: DWORD <|@ <|@
      nr   30  <|@ instruction rdi|DWORD = SUB (x: rcx|DWORD, ~y: rdx|DWORD) size: DWORD <|@ <|@
      nr   32  <|@ instruction rdi|DWORD = LEA address: [rdi|DWORD + 7] size: DWORD <|@ <|@
      nr   34  <|@ st <@st|@live-base-pointers: []
Queens.setRowColumn(int, int, boolean) [bci: 0]
locals: rsi|QWORD[.] rdx|DWORD rcx|DWORD r8|DWORD 
>@ <|@ instruction CMPBRANCH (x: rdi|DWORD, y: [rbx|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B2 -> B3 falseDestination: B2 -> B4 size: DWORD state [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   36  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   38  <|@ instruction rcx|QWORD = MOV value: rdx|DWORD size: DWORD <|@ <|@
      nr   40  <|@ instruction r8|DWORD = AND x: r8|DWORD alignment: 4 size: DWORD y: int[1|0x1] <|@ <|@
      nr   42  <|@ instruction MOVB (x: [rcx|QWORD + r10|DWORD[_] * 8 + 16], y: r8|DWORD) size: BYTE <|@ <|@
      nr   44  <|@ instruction MOVB (x: [r9|DWORD + r11|DWORD[_] * 8 + 16], y: r8|DWORD) size: BYTE <|@ <|@
      nr   46  <|@ instruction MOVB (x: [rdi|DWORD + rbx|DWORD[_] * 8 + 16], y: r8|DWORD) size: BYTE <|@ <|@
      nr   48  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: -) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@3dbf6f45 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B7" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   50  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-8475|0xffffffffffffdee5] // MoveResolver resolve mapping <|@ <|@
      nr   52  <|@ instruction JUMP ~outgoingValues: [] destination: B6 -> B7 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B6" "B5" "B4" 
    successors 
    xhandlers
    flags 
    probability 2362138004555825152
    begin_IR
      LIR
      nr   62  <|@ instruction [] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr   64  <|@ instruction MOV (x: [r15|QWORD + 1156], y: r10|DWORD) size: DWORD <|@ <|@
      nr   66  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr   68  <|@ st <@st|@live-base-pointers: []
Queens.setRowColumn(int, int, boolean) [bci: 0]
locals: rsi|QWORD[.] rdx|DWORD rcx|DWORD r8|DWORD 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B7" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   54  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-13083|0xffffffffffffcce5] // MoveResolver resolve mapping <|@ <|@
      nr   56  <|@ instruction JUMP ~outgoingValues: [] destination: B5 -> B7 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B7" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   58  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-17435|0xffffffffffffbbe5] // MoveResolver resolve mapping <|@ <|@
      nr   60  <|@ instruction JUMP ~outgoingValues: [] destination: B4 -> B7 <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: aload_0       
     1: getfield      #3          // freeRows:boolean[]
     4: iload_1       
     5: iload_3       
     6: bastore       
     7: aload_0       
     8: getfield      #5          // freeMaxs:boolean[]
    11: iload_2       
    12: iload_1       
    13: iadd          
    14: iload_3       
    15: bastore       
    16: aload_0       
    17: getfield      #6          // freeMins:boolean[]
    20: iload_2       
    21: iload_1       
    22: isub          
    23: bipush        7
    25: iadd          
    26: iload_3       
    27: bastore       
    28: return        
   <|@
end_bytecodes
begin_cfg
  name "After StackMoveOptimization"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B6" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|QWORD[.], rdx|DWORD, rcx|DWORD, r8|DWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr    4  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@276f26a2 slotKind: QWORD <|@ <|@
      nr   14  <|@ instruction r10|DWORD[_] = MOV input: [rsi|QWORD[.] + 16] size: DWORD <|@ <|@
      nr   16  <|@ st <@st|@live-base-pointers: []
Queens.setRowColumn(int, int, boolean) [bci: 0]
locals: rsi|QWORD[.] rdx|DWORD rcx|DWORD r8|DWORD 
>@ <|@ instruction CMPBRANCH (x: rdx|DWORD, y: [r10|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B0 -> B1 falseDestination: B0 -> B6 size: DWORD state [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B5" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   18  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   20  <|@ instruction r11|DWORD[_] = MOV input: [rsi|QWORD[.] + 12] size: DWORD <|@ <|@
      nr   22  <|@ instruction r9|DWORD = ADD (x: rcx|DWORD, y: rdx|DWORD) size: DWORD <|@ <|@
      nr   24  <|@ st <@st|@live-base-pointers: []
Queens.setRowColumn(int, int, boolean) [bci: 0]
locals: rsi|QWORD[.] rdx|DWORD rcx|DWORD r8|DWORD 
>@ <|@ instruction CMPBRANCH (x: r9|DWORD, y: [r11|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B1 -> B2 falseDestination: B1 -> B5 size: DWORD state [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B3" "B4" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   26  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   28  <|@ instruction rbx|DWORD[_] = MOV input: [rsi|QWORD[.] + 20] size: DWORD <|@ <|@
      nr   30  <|@ instruction rdi|DWORD = SUB (x: rcx|DWORD, ~y: rdx|DWORD) size: DWORD <|@ <|@
      nr   32  <|@ instruction rdi|DWORD = LEA address: [rdi|DWORD + 7] size: DWORD <|@ <|@
      nr   34  <|@ st <@st|@live-base-pointers: []
Queens.setRowColumn(int, int, boolean) [bci: 0]
locals: rsi|QWORD[.] rdx|DWORD rcx|DWORD r8|DWORD 
>@ <|@ instruction CMPBRANCH (x: rdi|DWORD, y: [rbx|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B2 -> B3 falseDestination: B2 -> B4 size: DWORD state [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   36  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   38  <|@ instruction rcx|QWORD = MOV value: rdx|DWORD size: DWORD <|@ <|@
      nr   40  <|@ instruction r8|DWORD = AND x: r8|DWORD alignment: 4 size: DWORD y: int[1|0x1] <|@ <|@
      nr   42  <|@ instruction MOVB (x: [rcx|QWORD + r10|DWORD[_] * 8 + 16], y: r8|DWORD) size: BYTE <|@ <|@
      nr   44  <|@ instruction MOVB (x: [r9|DWORD + r11|DWORD[_] * 8 + 16], y: r8|DWORD) size: BYTE <|@ <|@
      nr   46  <|@ instruction MOVB (x: [rdi|DWORD + rbx|DWORD[_] * 8 + 16], y: r8|DWORD) size: BYTE <|@ <|@
      nr   48  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: -) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@3dbf6f45 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B7" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   50  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-8475|0xffffffffffffdee5] // MoveResolver resolve mapping <|@ <|@
      nr   52  <|@ instruction JUMP ~outgoingValues: [] destination: B6 -> B7 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B6" "B5" "B4" 
    successors 
    xhandlers
    flags 
    probability 2362138004555825152
    begin_IR
      LIR
      nr   62  <|@ instruction [] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr   64  <|@ instruction MOV (x: [r15|QWORD + 1156], y: r10|DWORD) size: DWORD <|@ <|@
      nr   66  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr   68  <|@ st <@st|@live-base-pointers: []
Queens.setRowColumn(int, int, boolean) [bci: 0]
locals: rsi|QWORD[.] rdx|DWORD rcx|DWORD r8|DWORD 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B7" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   54  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-13083|0xffffffffffffcce5] // MoveResolver resolve mapping <|@ <|@
      nr   56  <|@ instruction JUMP ~outgoingValues: [] destination: B5 -> B7 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B7" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   58  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-17435|0xffffffffffffbbe5] // MoveResolver resolve mapping <|@ <|@
      nr   60  <|@ instruction JUMP ~outgoingValues: [] destination: B4 -> B7 <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: aload_0       
     1: getfield      #3          // freeRows:boolean[]
     4: iload_1       
     5: iload_3       
     6: bastore       
     7: aload_0       
     8: getfield      #5          // freeMaxs:boolean[]
    11: iload_2       
    12: iload_1       
    13: iadd          
    14: iload_3       
    15: bastore       
    16: aload_0       
    17: getfield      #6          // freeMins:boolean[]
    20: iload_2       
    21: iload_1       
    22: isub          
    23: bipush        7
    25: iadd          
    26: iload_3       
    27: bastore       
    28: return        
   <|@
end_bytecodes
begin_cfg
  name "After PostAllocationOptimizationStage"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B6" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|QWORD[.], rdx|DWORD, rcx|DWORD, r8|DWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr    4  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@276f26a2 slotKind: QWORD <|@ <|@
      nr   14  <|@ instruction r10|DWORD[_] = MOV input: [rsi|QWORD[.] + 16] size: DWORD <|@ <|@
      nr   16  <|@ st <@st|@live-base-pointers: []
Queens.setRowColumn(int, int, boolean) [bci: 0]
locals: rsi|QWORD[.] rdx|DWORD rcx|DWORD r8|DWORD 
>@ <|@ instruction CMPBRANCH (x: rdx|DWORD, y: [r10|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B0 -> B1 falseDestination: B0 -> B6 size: DWORD state [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B5" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   18  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   20  <|@ instruction r11|DWORD[_] = MOV input: [rsi|QWORD[.] + 12] size: DWORD <|@ <|@
      nr   22  <|@ instruction r9|DWORD = ADD (x: rcx|DWORD, y: rdx|DWORD) size: DWORD <|@ <|@
      nr   24  <|@ st <@st|@live-base-pointers: []
Queens.setRowColumn(int, int, boolean) [bci: 0]
locals: rsi|QWORD[.] rdx|DWORD rcx|DWORD r8|DWORD 
>@ <|@ instruction CMPBRANCH (x: r9|DWORD, y: [r11|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B1 -> B2 falseDestination: B1 -> B5 size: DWORD state [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B3" "B4" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   26  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   28  <|@ instruction rbx|DWORD[_] = MOV input: [rsi|QWORD[.] + 20] size: DWORD <|@ <|@
      nr   30  <|@ instruction rdi|DWORD = SUB (x: rcx|DWORD, ~y: rdx|DWORD) size: DWORD <|@ <|@
      nr   32  <|@ instruction rdi|DWORD = LEA address: [rdi|DWORD + 7] size: DWORD <|@ <|@
      nr   34  <|@ st <@st|@live-base-pointers: []
Queens.setRowColumn(int, int, boolean) [bci: 0]
locals: rsi|QWORD[.] rdx|DWORD rcx|DWORD r8|DWORD 
>@ <|@ instruction CMPBRANCH (x: rdi|DWORD, y: [rbx|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B2 -> B3 falseDestination: B2 -> B4 size: DWORD state [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   36  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   38  <|@ instruction rcx|QWORD = MOV value: rdx|DWORD size: DWORD <|@ <|@
      nr   40  <|@ instruction r8|DWORD = AND x: r8|DWORD alignment: 4 size: DWORD y: int[1|0x1] <|@ <|@
      nr   42  <|@ instruction MOVB (x: [rcx|QWORD + r10|DWORD[_] * 8 + 16], y: r8|DWORD) size: BYTE <|@ <|@
      nr   44  <|@ instruction MOVB (x: [r9|DWORD + r11|DWORD[_] * 8 + 16], y: r8|DWORD) size: BYTE <|@ <|@
      nr   46  <|@ instruction MOVB (x: [rdi|DWORD + rbx|DWORD[_] * 8 + 16], y: r8|DWORD) size: BYTE <|@ <|@
      nr   48  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: -) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@3dbf6f45 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B7" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   50  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-8475|0xffffffffffffdee5] // MoveResolver resolve mapping <|@ <|@
      nr   52  <|@ instruction JUMP ~outgoingValues: [] destination: B6 -> B7 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B6" "B5" "B4" 
    successors 
    xhandlers
    flags 
    probability 2362138004555825152
    begin_IR
      LIR
      nr   62  <|@ instruction [] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr   64  <|@ instruction MOV (x: [r15|QWORD + 1156], y: r10|DWORD) size: DWORD <|@ <|@
      nr   66  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr   68  <|@ st <@st|@live-base-pointers: []
Queens.setRowColumn(int, int, boolean) [bci: 0]
locals: rsi|QWORD[.] rdx|DWORD rcx|DWORD r8|DWORD 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B7" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   54  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-13083|0xffffffffffffcce5] // MoveResolver resolve mapping <|@ <|@
      nr   56  <|@ instruction JUMP ~outgoingValues: [] destination: B5 -> B7 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B7" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   58  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-17435|0xffffffffffffbbe5] // MoveResolver resolve mapping <|@ <|@
      nr   60  <|@ instruction JUMP ~outgoingValues: [] destination: B4 -> B7 <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: aload_0       
     1: getfield      #3          // freeRows:boolean[]
     4: iload_1       
     5: iload_3       
     6: bastore       
     7: aload_0       
     8: getfield      #5          // freeMaxs:boolean[]
    11: iload_2       
    12: iload_1       
    13: iadd          
    14: iload_3       
    15: bastore       
    16: aload_0       
    17: getfield      #6          // freeMins:boolean[]
    20: iload_2       
    21: iload_1       
    22: isub          
    23: bipush        7
    25: iadd          
    26: iload_3       
    27: bastore       
    28: return        
   <|@
end_bytecodes
begin_cfg
  name "After LocationMarker"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B6" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|QWORD[.], rdx|DWORD, rcx|DWORD, r8|DWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr    4  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@276f26a2 slotKind: QWORD <|@ <|@
      nr   14  <|@ instruction r10|DWORD[_] = MOV input: [rsi|QWORD[.] + 16] size: DWORD <|@ <|@
      nr   16  <|@ st <@st|@reference-map: [rsi:0, r10:0]
live-base-pointers: []
Queens.setRowColumn(int, int, boolean) [bci: 0]
locals: rsi|QWORD[.] rdx|DWORD rcx|DWORD r8|DWORD 
>@ <|@ instruction CMPBRANCH (x: rdx|DWORD, y: [r10|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B0 -> B1 falseDestination: B0 -> B6 size: DWORD state [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B5" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   18  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   20  <|@ instruction r11|DWORD[_] = MOV input: [rsi|QWORD[.] + 12] size: DWORD <|@ <|@
      nr   22  <|@ instruction r9|DWORD = ADD (x: rcx|DWORD, y: rdx|DWORD) size: DWORD <|@ <|@
      nr   24  <|@ st <@st|@reference-map: [rsi:0, r10:0, r11:0]
live-base-pointers: []
Queens.setRowColumn(int, int, boolean) [bci: 0]
locals: rsi|QWORD[.] rdx|DWORD rcx|DWORD r8|DWORD 
>@ <|@ instruction CMPBRANCH (x: r9|DWORD, y: [r11|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B1 -> B2 falseDestination: B1 -> B5 size: DWORD state [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B3" "B4" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   26  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   28  <|@ instruction rbx|DWORD[_] = MOV input: [rsi|QWORD[.] + 20] size: DWORD <|@ <|@
      nr   30  <|@ instruction rdi|DWORD = SUB (x: rcx|DWORD, ~y: rdx|DWORD) size: DWORD <|@ <|@
      nr   32  <|@ instruction rdi|DWORD = LEA address: [rdi|DWORD + 7] size: DWORD <|@ <|@
      nr   34  <|@ st <@st|@reference-map: [rbx:0, rsi:0, r10:0, r11:0]
live-base-pointers: []
Queens.setRowColumn(int, int, boolean) [bci: 0]
locals: rsi|QWORD[.] rdx|DWORD rcx|DWORD r8|DWORD 
>@ <|@ instruction CMPBRANCH (x: rdi|DWORD, y: [rbx|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B2 -> B3 falseDestination: B2 -> B4 size: DWORD state [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   36  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   38  <|@ instruction rcx|QWORD = MOV value: rdx|DWORD size: DWORD <|@ <|@
      nr   40  <|@ instruction r8|DWORD = AND x: r8|DWORD alignment: 4 size: DWORD y: int[1|0x1] <|@ <|@
      nr   42  <|@ instruction MOVB (x: [rcx|QWORD + r10|DWORD[_] * 8 + 16], y: r8|DWORD) size: BYTE <|@ <|@
      nr   44  <|@ instruction MOVB (x: [r9|DWORD + r11|DWORD[_] * 8 + 16], y: r8|DWORD) size: BYTE <|@ <|@
      nr   46  <|@ instruction MOVB (x: [rdi|DWORD + rbx|DWORD[_] * 8 + 16], y: r8|DWORD) size: BYTE <|@ <|@
      nr   48  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: -) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@3dbf6f45 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B7" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   50  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-8475|0xffffffffffffdee5] // MoveResolver resolve mapping <|@ <|@
      nr   52  <|@ instruction JUMP ~outgoingValues: [] destination: B6 -> B7 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B6" "B5" "B4" 
    successors 
    xhandlers
    flags 
    probability 2362138004555825152
    begin_IR
      LIR
      nr   62  <|@ instruction [] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr   64  <|@ instruction MOV (x: [r15|QWORD + 1156], y: r10|DWORD) size: DWORD <|@ <|@
      nr   66  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr   68  <|@ st <@st|@reference-map: [rsi:0]
live-base-pointers: []
Queens.setRowColumn(int, int, boolean) [bci: 0]
locals: rsi|QWORD[.] rdx|DWORD rcx|DWORD r8|DWORD 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B7" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   54  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-13083|0xffffffffffffcce5] // MoveResolver resolve mapping <|@ <|@
      nr   56  <|@ instruction JUMP ~outgoingValues: [] destination: B5 -> B7 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B7" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   58  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-17435|0xffffffffffffbbe5] // MoveResolver resolve mapping <|@ <|@
      nr   60  <|@ instruction JUMP ~outgoingValues: [] destination: B4 -> B7 <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: aload_0       
     1: getfield      #3          // freeRows:boolean[]
     4: iload_1       
     5: iload_3       
     6: bastore       
     7: aload_0       
     8: getfield      #5          // freeMaxs:boolean[]
    11: iload_2       
    12: iload_1       
    13: iadd          
    14: iload_3       
    15: bastore       
    16: aload_0       
    17: getfield      #6          // freeMins:boolean[]
    20: iload_2       
    21: iload_1       
    22: isub          
    23: bipush        7
    25: iadd          
    26: iload_3       
    27: bastore       
    28: return        
   <|@
end_bytecodes
begin_cfg
  name "After FinalCodeAnalysisStage"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B6" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|QWORD[.], rdx|DWORD, rcx|DWORD, r8|DWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr    4  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@276f26a2 slotKind: QWORD <|@ <|@
      nr   14  <|@ instruction r10|DWORD[_] = MOV input: [rsi|QWORD[.] + 16] size: DWORD <|@ <|@
      nr   16  <|@ st <@st|@reference-map: [rsi:0, r10:0]
live-base-pointers: []
Queens.setRowColumn(int, int, boolean) [bci: 0]
locals: rsi|QWORD[.] rdx|DWORD rcx|DWORD r8|DWORD 
>@ <|@ instruction CMPBRANCH (x: rdx|DWORD, y: [r10|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B0 -> B1 falseDestination: B0 -> B6 size: DWORD state [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B5" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   18  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   20  <|@ instruction r11|DWORD[_] = MOV input: [rsi|QWORD[.] + 12] size: DWORD <|@ <|@
      nr   22  <|@ instruction r9|DWORD = ADD (x: rcx|DWORD, y: rdx|DWORD) size: DWORD <|@ <|@
      nr   24  <|@ st <@st|@reference-map: [rsi:0, r10:0, r11:0]
live-base-pointers: []
Queens.setRowColumn(int, int, boolean) [bci: 0]
locals: rsi|QWORD[.] rdx|DWORD rcx|DWORD r8|DWORD 
>@ <|@ instruction CMPBRANCH (x: r9|DWORD, y: [r11|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B1 -> B2 falseDestination: B1 -> B5 size: DWORD state [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B3" "B4" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   26  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   28  <|@ instruction rbx|DWORD[_] = MOV input: [rsi|QWORD[.] + 20] size: DWORD <|@ <|@
      nr   30  <|@ instruction rdi|DWORD = SUB (x: rcx|DWORD, ~y: rdx|DWORD) size: DWORD <|@ <|@
      nr   32  <|@ instruction rdi|DWORD = LEA address: [rdi|DWORD + 7] size: DWORD <|@ <|@
      nr   34  <|@ st <@st|@reference-map: [rbx:0, rsi:0, r10:0, r11:0]
live-base-pointers: []
Queens.setRowColumn(int, int, boolean) [bci: 0]
locals: rsi|QWORD[.] rdx|DWORD rcx|DWORD r8|DWORD 
>@ <|@ instruction CMPBRANCH (x: rdi|DWORD, y: [rbx|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B2 -> B3 falseDestination: B2 -> B4 size: DWORD state [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   36  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   38  <|@ instruction rcx|QWORD = MOV value: rdx|DWORD size: DWORD <|@ <|@
      nr   40  <|@ instruction r8|DWORD = AND x: r8|DWORD alignment: 4 size: DWORD y: int[1|0x1] <|@ <|@
      nr   42  <|@ instruction MOVB (x: [rcx|QWORD + r10|DWORD[_] * 8 + 16], y: r8|DWORD) size: BYTE <|@ <|@
      nr   44  <|@ instruction MOVB (x: [r9|DWORD + r11|DWORD[_] * 8 + 16], y: r8|DWORD) size: BYTE <|@ <|@
      nr   46  <|@ instruction MOVB (x: [rdi|DWORD + rbx|DWORD[_] * 8 + 16], y: r8|DWORD) size: BYTE <|@ <|@
      nr   48  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: -) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@3dbf6f45 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B7" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   50  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-8475|0xffffffffffffdee5] // MoveResolver resolve mapping <|@ <|@
      nr   52  <|@ instruction JUMP ~outgoingValues: [] destination: B6 -> B7 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B6" "B5" "B4" 
    successors 
    xhandlers
    flags 
    probability 2362138004555825152
    begin_IR
      LIR
      nr   62  <|@ instruction [] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr   64  <|@ instruction MOV (x: [r15|QWORD + 1156], y: r10|DWORD) size: DWORD <|@ <|@
      nr   66  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr   68  <|@ st <@st|@reference-map: [rsi:0]
live-base-pointers: []
Queens.setRowColumn(int, int, boolean) [bci: 0]
locals: rsi|QWORD[.] rdx|DWORD rcx|DWORD r8|DWORD 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B7" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   54  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-13083|0xffffffffffffcce5] // MoveResolver resolve mapping <|@ <|@
      nr   56  <|@ instruction JUMP ~outgoingValues: [] destination: B5 -> B7 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B7" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   58  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-17435|0xffffffffffffbbe5] // MoveResolver resolve mapping <|@ <|@
      nr   60  <|@ instruction JUMP ~outgoingValues: [] destination: B4 -> B7 <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: aload_0       
     1: getfield      #3          // freeRows:boolean[]
     4: iload_1       
     5: iload_3       
     6: bastore       
     7: aload_0       
     8: getfield      #5          // freeMaxs:boolean[]
    11: iload_2       
    12: iload_1       
    13: iadd          
    14: iload_3       
    15: bastore       
    16: aload_0       
    17: getfield      #6          // freeMins:boolean[]
    20: iload_2       
    21: iload_1       
    22: isub          
    23: bipush        7
    25: iadd          
    26: iload_3       
    27: bastore       
    28: return        
   <|@
end_bytecodes
begin_cfg
  name "After code generation"
end_cfg
begin_nmethod
  <<<HexCodeFile
  Platform AMD64 64  <||@
  HexCode 0 448b560849bc000000b3e67f00004d03d44d33e4493bc20f85e3ffffff66669089842400c0feff4883ec189041817f20000000000f85b700000048896c2410448b5610423b14d50c0000000f836b000000448b5e0c448bc94403ca0f1f440000463b0cdd0c0000000f83730000008b5e148bf92bfa8d7f070f1f8400000000003b3cdd0c0000000f835c0000008bca44230500000000468844d110478844d910448844df10488b6c24104883c418493ba7500400000f8746000000c341bae5deffff4589978404000049c7879004000000000000e8000000000f1f84000000000041bae5ccffffebd941bae5bbffffebd148896c2410e800000000e93afffffff4488d0da6ffffff49898f68040000e9ecfefffff441c78784040000f5e4ffff49c7879004000000000000e8000000000f1f84000000000041c78784040000f5d1ffff49c7879004000000000000e8000000000f1f84000000000041c78784040000f5c0ffff49c7879004000000000000e8000000000f1f8400000000006690e800000000f4e800000000f4  <||@
  Comment 0 UNVERIFIED_ENTRY  <||@
  Comment 23 {Field[name=CompilerToVM::Data::SharedRuntime_ic_miss_stub, type=address, offset=0, address=0x7fe723e335c8, value=140630366150784]:0x7fe70f04e080}  <||@
  Comment 32 [stack overflow check]  <||@
  Comment 32 VERIFIED_ENTRY  <||@
  Comment 44 FRAME_COMPLETE  <||@
  Comment 44 ENTRY_BARRIER_PATCH  <||@
  Comment 58 block B0 null  <||@
  Comment 58 0 [rsi|QWORD[.], rdx|DWORD, rcx|DWORD, r8|DWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 58 2 stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD  <||@
  Comment 63 4 [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@276f26a2 slotKind: QWORD  <||@
  Comment 63 14 r10|DWORD[_] = MOV input: [rsi|QWORD[.] + 16] size: DWORD  <||@
  Comment 67 16 CMPBRANCH (x: rdx|DWORD, y: [r10|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B0 -> B1 falseDestination: B0 -> B6 size: DWORD state [bci:0]  <||@
  Comment 67 [rsi:0, r10:0]at Queens.setRowColumn(int, int, boolean) [bci: 0, duringCall: false, rethrow: false]
              |0             |1          |2          |3        
     locals:  |rsi|QWORD[.]  |rdx|DWORD  |rcx|DWORD  |r8|DWORD   <||@
  Comment 67 {infopoint: IMPLICIT_EXCEPTION}  <||@
  Comment 81 block B1 null  <||@
  Comment 81 18 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 81 20 r11|DWORD[_] = MOV input: [rsi|QWORD[.] + 12] size: DWORD  <||@
  Comment 85 22 r9|DWORD = ADD (x: rcx|DWORD, y: rdx|DWORD) size: DWORD  <||@
  Comment 91 24 CMPBRANCH (x: r9|DWORD, y: [r11|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B1 -> B2 falseDestination: B1 -> B5 size: DWORD state [bci:0]  <||@
  Comment 96 [rsi:0, r10:0, r11:0]at Queens.setRowColumn(int, int, boolean) [bci: 0, duringCall: false, rethrow: false]
              |0             |1          |2          |3        
     locals:  |rsi|QWORD[.]  |rdx|DWORD  |rcx|DWORD  |r8|DWORD   <||@
  Comment 96 {infopoint: IMPLICIT_EXCEPTION}  <||@
  Comment 110 block B2 null  <||@
  Comment 110 26 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 110 28 rbx|DWORD[_] = MOV input: [rsi|QWORD[.] + 20] size: DWORD  <||@
  Comment 113 30 rdi|DWORD = SUB (x: rcx|DWORD, ~y: rdx|DWORD) size: DWORD  <||@
  Comment 117 32 rdi|DWORD = LEA address: [rdi|DWORD + 7] size: DWORD  <||@
  Comment 120 34 CMPBRANCH (x: rdi|DWORD, y: [rbx|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B2 -> B3 falseDestination: B2 -> B4 size: DWORD state [bci:0]  <||@
  Comment 128 [rbx:0, rsi:0, r10:0, r11:0]at Queens.setRowColumn(int, int, boolean) [bci: 0, duringCall: false, rethrow: false]
              |0             |1          |2          |3        
     locals:  |rsi|QWORD[.]  |rdx|DWORD  |rcx|DWORD  |r8|DWORD   <||@
  Comment 128 {infopoint: IMPLICIT_EXCEPTION}  <||@
  Comment 141 block B3 null  <||@
  Comment 141 36 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 141 38 rcx|QWORD = MOV value: rdx|DWORD size: DWORD  <||@
  Comment 143 40 r8|DWORD = AND x: r8|DWORD alignment: 4 size: DWORD y: int[1|0x1]  <||@
  Comment 143 {DataSection[0x0]}  <||@
  Comment 150 42 MOVB (x: [rcx|QWORD + r10|DWORD[_] * 8 + 16], y: r8|DWORD) size: BYTE  <||@
  Comment 155 44 MOVB (x: [r9|DWORD + r11|DWORD[_] * 8 + 16], y: r8|DWORD) size: BYTE  <||@
  Comment 160 46 MOVB (x: [rdi|DWORD + rbx|DWORD[_] * 8 + 16], y: r8|DWORD) size: BYTE  <||@
  Comment 165 48 RETURN (savedRbp: stack:16|QWORD, value: -) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@3dbf6f45  <||@
  Comment 174 POLL_RETURN_FAR  <||@
  Comment 188 block B6 null  <||@
  Comment 188 50 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 188 -1 r10|DWORD = MOVE input: int[-8475|0xffffffffffffdee5]  <||@
  Comment 194 52 JUMP ~outgoingValues: [] destination: B6 -> B7  <||@
  Comment 194 block B7 null  <||@
  Comment 194 62 [] = LABEL alignment: 0 numbPhis: 1 label: ?  <||@
  Comment 194 64 MOV (x: [r15|QWORD + 1156], y: r10|DWORD) size: DWORD  <||@
  Comment 201 66 MOV x: [r15|QWORD + 1168] y: 0 size: QWORD  <||@
  Comment 212 68 DEOPT info [bci:0]  <||@
  Comment 212 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_uncommon_trap, type=address, offset=0, address=0x7fe723e335a8, value=140630366175610]:0x7fe70f05417a}  <||@
  Comment 217 [rsi:0]at Queens.setRowColumn(int, int, boolean) [bci: 0, duringCall: false, rethrow: false]
              |0             |1          |2          |3        
     locals:  |rsi|QWORD[.]  |rdx|DWORD  |rcx|DWORD  |r8|DWORD   <||@
  Comment 225 block B5 null  <||@
  Comment 225 54 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 225 -1 r10|DWORD = MOVE input: int[-13083|0xffffffffffffcce5]  <||@
  Comment 231 56 JUMP ~outgoingValues: [] destination: B5 -> B7  <||@
  Comment 233 block B4 null  <||@
  Comment 233 58 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 233 -1 r10|DWORD = MOVE input: int[-17435|0xffffffffffffbbe5]  <||@
  Comment 239 60 JUMP ~outgoingValues: [] destination: B4 -> B7  <||@
  Comment 246 {Field[name=CompilerToVM::Data::nmethod_entry_barrier, type=address, offset=0, address=0x7fe723e33598, value=140630366044704]:0x7fe70f034220}  <||@
  Comment 271 {Field[name=CompilerToVM::Data::SharedRuntime_polling_page_return_handler, type=address, offset=0, address=0x7fe723e335a0, value=140630366179328]:0x7fe70f055000}  <||@
  Comment 299 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_uncommon_trap, type=address, offset=0, address=0x7fe723e335a8, value=140630366175610]:0x7fe70f05417a}  <||@
  Comment 304 [rsi:0, r10:0]at Queens.setRowColumn(int, int, boolean) [bci: 0, duringCall: false, rethrow: false]
              |0             |1          |2          |3        
     locals:  |rsi|QWORD[.]  |rdx|DWORD  |rcx|DWORD  |r8|DWORD   <||@
  Comment 334 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_uncommon_trap, type=address, offset=0, address=0x7fe723e335a8, value=140630366175610]:0x7fe70f05417a}  <||@
  Comment 339 [rsi:0, r10:0, r11:0]at Queens.setRowColumn(int, int, boolean) [bci: 0, duringCall: false, rethrow: false]
              |0             |1          |2          |3        
     locals:  |rsi|QWORD[.]  |rdx|DWORD  |rcx|DWORD  |r8|DWORD   <||@
  Comment 369 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_uncommon_trap, type=address, offset=0, address=0x7fe723e335a8, value=140630366175610]:0x7fe70f05417a}  <||@
  Comment 374 [rbx:0, rsi:0, r10:0, r11:0]at Queens.setRowColumn(int, int, boolean) [bci: 0, duringCall: false, rethrow: false]
              |0             |1          |2          |3        
     locals:  |rsi|QWORD[.]  |rdx|DWORD  |rcx|DWORD  |r8|DWORD   <||@
  Comment 384 {Stub<ExceptionHandlerStub.exceptionHandler>@0x7fe70f0b4100:CallingConvention[rax|QWORD[.], rdx|QWORD]:CallingConvention[rax|QWORD[.], rdx|QWORD]; temps=rdi|ILLEGAL,xmm14|ILLEGAL,xmm15|ILLEGAL,xmm12|ILLEGAL,xmm13|ILLEGAL,xmm10|ILLEGAL,xmm11|ILLEGAL,xmm7|ILLEGAL,xmm8|ILLEGAL,xmm9|ILLEGAL,xmm0|ILLEGAL,xmm1|ILLEGAL,xmm2|ILLEGAL,xmm3|ILLEGAL,xmm4|ILLEGAL,xmm5|ILLEGAL,xmm6|ILLEGAL,rax|ILLEGAL,rcx|ILLEGAL,rdx|ILLEGAL,rsi|ILLEGAL,r8|ILLEGAL,r9|ILLEGAL,r10|ILLEGAL,r11|ILLEGAL}  <||@
  Comment 384 EXCEPTION_HANDLER_ENTRY  <||@
  Comment 390 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_unpack, type=address, offset=0, address=0x7fe723e335b8, value=140630366175008]:0x7fe70f053f20}  <||@
  Comment 390 DEOPT_HANDLER_ENTRY  <||@
  HexCodeFile>>> <|@
end_nmethod
begin_compilation
  name " HotSpotCompilation-81[Queens.setRowColumn(int, int, boolean)]"
  method "HotSpotCompilation-81[Queens.setRowColumn(int, int, boolean)]"
  date 1729020571522
end_compilation
begin_cfg
  name "After code installation"
end_cfg
begin_nmethod
  <<<HexCodeFile
  Platform AMD64 64  <||@
  HexCode 7fe70f0c05a0 448b560849bc000000b3e67f00004d03d44d33e4493bc20f85c3daf8ff66669089842400c0feff4883ec189041817f20000000000f85b700000048896c2410448b5610423b14d50c0000000f836b000000448b5e0c448bc94403ca0f1f440000463b0cdd0c0000000f83730000008b5e148bf92bfa8d7f070f1f8400000000003b3cdd0c0000000f835c0000008bca4423054affffff468844d110478844d910448844df10488b6c24104883c418493ba7500400000f8746000000c341bae5deffff4589978404000049c7879004000000000000e8013bf9ff0f1f84000000000041bae5ccffffebd941bae5bbffffebd148896c2410e8853bf7ffe93afffffff4488d0da6ffffff49898f68040000e94c49f9fff441c78784040000f5e4ffff49c7879004000000000000e8aa3af9ff0f1f84000000000041c78784040000f5d1ffff49c7879004000000000000e8873af9ff0f1f84000000000041c78784040000f5c0ffff49c7879004000000000000e8643af9ff0f1f8400000000006690e8db39fffff4e8f537f9fff4f4f4f4f4  <||@
  Comment 0 UNVERIFIED_ENTRY  <||@
  Comment 23 {Field[name=CompilerToVM::Data::SharedRuntime_ic_miss_stub, type=address, offset=0, address=0x7fe723e335c8, value=140630366150784]:0x7fe70f04e080}  <||@
  Comment 32 [stack overflow check]  <||@
  Comment 32 VERIFIED_ENTRY  <||@
  Comment 44 FRAME_COMPLETE  <||@
  Comment 44 ENTRY_BARRIER_PATCH  <||@
  Comment 58 block B0 null  <||@
  Comment 58 0 [rsi|QWORD[.], rdx|DWORD, rcx|DWORD, r8|DWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 58 2 stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD  <||@
  Comment 63 4 [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@276f26a2 slotKind: QWORD  <||@
  Comment 63 14 r10|DWORD[_] = MOV input: [rsi|QWORD[.] + 16] size: DWORD  <||@
  Comment 67 16 CMPBRANCH (x: rdx|DWORD, y: [r10|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B0 -> B1 falseDestination: B0 -> B6 size: DWORD state [bci:0]  <||@
  Comment 67 [rsi:0, r10:0]at Queens.setRowColumn(int, int, boolean) [bci: 0, duringCall: false, rethrow: false]
              |0             |1          |2          |3        
     locals:  |rsi|QWORD[.]  |rdx|DWORD  |rcx|DWORD  |r8|DWORD   <||@
  Comment 67 {infopoint: IMPLICIT_EXCEPTION}  <||@
  Comment 81 block B1 null  <||@
  Comment 81 18 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 81 20 r11|DWORD[_] = MOV input: [rsi|QWORD[.] + 12] size: DWORD  <||@
  Comment 85 22 r9|DWORD = ADD (x: rcx|DWORD, y: rdx|DWORD) size: DWORD  <||@
  Comment 91 24 CMPBRANCH (x: r9|DWORD, y: [r11|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B1 -> B2 falseDestination: B1 -> B5 size: DWORD state [bci:0]  <||@
  Comment 96 [rsi:0, r10:0, r11:0]at Queens.setRowColumn(int, int, boolean) [bci: 0, duringCall: false, rethrow: false]
              |0             |1          |2          |3        
     locals:  |rsi|QWORD[.]  |rdx|DWORD  |rcx|DWORD  |r8|DWORD   <||@
  Comment 96 {infopoint: IMPLICIT_EXCEPTION}  <||@
  Comment 110 block B2 null  <||@
  Comment 110 26 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 110 28 rbx|DWORD[_] = MOV input: [rsi|QWORD[.] + 20] size: DWORD  <||@
  Comment 113 30 rdi|DWORD = SUB (x: rcx|DWORD, ~y: rdx|DWORD) size: DWORD  <||@
  Comment 117 32 rdi|DWORD = LEA address: [rdi|DWORD + 7] size: DWORD  <||@
  Comment 120 34 CMPBRANCH (x: rdi|DWORD, y: [rbx|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B2 -> B3 falseDestination: B2 -> B4 size: DWORD state [bci:0]  <||@
  Comment 128 [rbx:0, rsi:0, r10:0, r11:0]at Queens.setRowColumn(int, int, boolean) [bci: 0, duringCall: false, rethrow: false]
              |0             |1          |2          |3        
     locals:  |rsi|QWORD[.]  |rdx|DWORD  |rcx|DWORD  |r8|DWORD   <||@
  Comment 128 {infopoint: IMPLICIT_EXCEPTION}  <||@
  Comment 141 block B3 null  <||@
  Comment 141 36 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 141 38 rcx|QWORD = MOV value: rdx|DWORD size: DWORD  <||@
  Comment 143 40 r8|DWORD = AND x: r8|DWORD alignment: 4 size: DWORD y: int[1|0x1]  <||@
  Comment 143 {DataSection[0x0]}  <||@
  Comment 150 42 MOVB (x: [rcx|QWORD + r10|DWORD[_] * 8 + 16], y: r8|DWORD) size: BYTE  <||@
  Comment 155 44 MOVB (x: [r9|DWORD + r11|DWORD[_] * 8 + 16], y: r8|DWORD) size: BYTE  <||@
  Comment 160 46 MOVB (x: [rdi|DWORD + rbx|DWORD[_] * 8 + 16], y: r8|DWORD) size: BYTE  <||@
  Comment 165 48 RETURN (savedRbp: stack:16|QWORD, value: -) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@3dbf6f45  <||@
  Comment 174 POLL_RETURN_FAR  <||@
  Comment 188 block B6 null  <||@
  Comment 188 50 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 188 -1 r10|DWORD = MOVE input: int[-8475|0xffffffffffffdee5]  <||@
  Comment 194 52 JUMP ~outgoingValues: [] destination: B6 -> B7  <||@
  Comment 194 block B7 null  <||@
  Comment 194 62 [] = LABEL alignment: 0 numbPhis: 1 label: ?  <||@
  Comment 194 64 MOV (x: [r15|QWORD + 1156], y: r10|DWORD) size: DWORD  <||@
  Comment 201 66 MOV x: [r15|QWORD + 1168] y: 0 size: QWORD  <||@
  Comment 212 68 DEOPT info [bci:0]  <||@
  Comment 212 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_uncommon_trap, type=address, offset=0, address=0x7fe723e335a8, value=140630366175610]:0x7fe70f05417a}  <||@
  Comment 217 [rsi:0]at Queens.setRowColumn(int, int, boolean) [bci: 0, duringCall: false, rethrow: false]
              |0             |1          |2          |3        
     locals:  |rsi|QWORD[.]  |rdx|DWORD  |rcx|DWORD  |r8|DWORD   <||@
  Comment 225 block B5 null  <||@
  Comment 225 54 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 225 -1 r10|DWORD = MOVE input: int[-13083|0xffffffffffffcce5]  <||@
  Comment 231 56 JUMP ~outgoingValues: [] destination: B5 -> B7  <||@
  Comment 233 block B4 null  <||@
  Comment 233 58 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 233 -1 r10|DWORD = MOVE input: int[-17435|0xffffffffffffbbe5]  <||@
  Comment 239 60 JUMP ~outgoingValues: [] destination: B4 -> B7  <||@
  Comment 246 {Field[name=CompilerToVM::Data::nmethod_entry_barrier, type=address, offset=0, address=0x7fe723e33598, value=140630366044704]:0x7fe70f034220}  <||@
  Comment 271 {Field[name=CompilerToVM::Data::SharedRuntime_polling_page_return_handler, type=address, offset=0, address=0x7fe723e335a0, value=140630366179328]:0x7fe70f055000}  <||@
  Comment 299 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_uncommon_trap, type=address, offset=0, address=0x7fe723e335a8, value=140630366175610]:0x7fe70f05417a}  <||@
  Comment 304 [rsi:0, r10:0]at Queens.setRowColumn(int, int, boolean) [bci: 0, duringCall: false, rethrow: false]
              |0             |1          |2          |3        
     locals:  |rsi|QWORD[.]  |rdx|DWORD  |rcx|DWORD  |r8|DWORD   <||@
  Comment 334 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_uncommon_trap, type=address, offset=0, address=0x7fe723e335a8, value=140630366175610]:0x7fe70f05417a}  <||@
  Comment 339 [rsi:0, r10:0, r11:0]at Queens.setRowColumn(int, int, boolean) [bci: 0, duringCall: false, rethrow: false]
              |0             |1          |2          |3        
     locals:  |rsi|QWORD[.]  |rdx|DWORD  |rcx|DWORD  |r8|DWORD   <||@
  Comment 369 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_uncommon_trap, type=address, offset=0, address=0x7fe723e335a8, value=140630366175610]:0x7fe70f05417a}  <||@
  Comment 374 [rbx:0, rsi:0, r10:0, r11:0]at Queens.setRowColumn(int, int, boolean) [bci: 0, duringCall: false, rethrow: false]
              |0             |1          |2          |3        
     locals:  |rsi|QWORD[.]  |rdx|DWORD  |rcx|DWORD  |r8|DWORD   <||@
  Comment 384 {Stub<ExceptionHandlerStub.exceptionHandler>@0x7fe70f0b4100:CallingConvention[rax|QWORD[.], rdx|QWORD]:CallingConvention[rax|QWORD[.], rdx|QWORD]; temps=rdi|ILLEGAL,xmm14|ILLEGAL,xmm15|ILLEGAL,xmm12|ILLEGAL,xmm13|ILLEGAL,xmm10|ILLEGAL,xmm11|ILLEGAL,xmm7|ILLEGAL,xmm8|ILLEGAL,xmm9|ILLEGAL,xmm0|ILLEGAL,xmm1|ILLEGAL,xmm2|ILLEGAL,xmm3|ILLEGAL,xmm4|ILLEGAL,xmm5|ILLEGAL,xmm6|ILLEGAL,rax|ILLEGAL,rcx|ILLEGAL,rdx|ILLEGAL,rsi|ILLEGAL,r8|ILLEGAL,r9|ILLEGAL,r10|ILLEGAL,r11|ILLEGAL}  <||@
  Comment 384 EXCEPTION_HANDLER_ENTRY  <||@
  Comment 390 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_unpack, type=address, offset=0, address=0x7fe723e335b8, value=140630366175008]:0x7fe70f053f20}  <||@
  Comment 390 DEOPT_HANDLER_ENTRY  <||@
  HexCodeFile>>> <|@
end_nmethod
