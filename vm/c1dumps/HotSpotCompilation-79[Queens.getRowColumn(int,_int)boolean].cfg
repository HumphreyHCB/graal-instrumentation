begin_compilation
  name " HotSpotCompilation-79[Queens.getRowColumn(int, int)]"
  method "HotSpotCompilation-79[Queens.getRowColumn(int, int)]"
  date 1729020570859
end_compilation
begin_cfg
  name "Final HIR schedule"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B11" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v0 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
stamp: void
=== Inputs ===
stateAfter: - 
=== Succesors ===
next: a148 
=== Usages ===
=== Predecessor ===
- >@ <|@
instruction <@StartNode|@jdk.graal.compiler.nodes.StartNode>@ stateAfter: - #next: a148  <|@  <|@
f <@~|@floating>@ <|@
tid a1 <|@
d <@d|@=== Debug Properties ===
index: 0
stamp: a!# Queens
uncheckedStamp: [null]
=== Inputs ===
=== Succesors ===
=== Usages ===
?4 v157 v160 v163 
=== Predecessor ===
- >@ <|@
instruction <@Parameter|@jdk.graal.compiler.nodes.ParameterNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid v157 <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S1
=== Inputs ===
base: a1 
index: - 
=== Succesors ===
=== Usages ===
a148 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a1 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid a148 <|@
d <@d|@=== Debug Properties ===
accessStamp: n# boolean[]
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Queens.freeRows
memoryOrder: PLAIN
nodeSourcePosition: at Queens.getRowColumn(int, int) [bci: 1]
stamp: n# boolean[]
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v157 
lastLocationAccess: - 
=== Succesors ===
next: i149 
=== Usages ===
v159 v158 
=== Predecessor ===
v0 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v157 lastLocationAccess: - #next: i149  <|@  <|@
f <@~|@floating>@ <|@
tid i2 <|@
d <@d|@=== Debug Properties ===
index: 1
stamp: i32
uncheckedStamp: [null]
=== Inputs ===
=== Succesors ===
=== Usages ===
?4 j92 i13 i23 v48 
=== Predecessor ===
- >@ <|@
instruction <@Parameter|@jdk.graal.compiler.nodes.ParameterNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid i3 <|@
d <@d|@=== Debug Properties ===
index: 2
stamp: i32
uncheckedStamp: [null]
=== Inputs ===
=== Succesors ===
=== Usages ===
?4 i13 i23 
=== Predecessor ===
- >@ <|@
instruction <@Parameter|@jdk.graal.compiler.nodes.ParameterNode>@  <|@  <|@
tid ?4 <|@
d <@d|@=== Debug Properties ===
bci: 0
bytecode: aload_0
code: ResolvedJavaMethodBytecode<Queens.getRowColumn(int, int)>
localsSize: 3
locksSize: 0
stackSize: 0
stackState: BeforePop
validForDeoptimization: true
=== Inputs ===
outerFrameState: - 
values: a1 i2 i3 
=== Succesors ===
=== Usages ===
v137 i149 i152 i155 
=== Predecessor ===
- >@ <|@
instruction <@FrameState|@jdk.graal.compiler.nodes.FrameState>@ outerFrameState: - values: a1 i2 i3  <|@  <|@
f <@~|@floating>@ <|@
tid v158 <|@
d <@d|@=== Debug Properties ===
displacement: 12
stamp: void*
stride: S8
=== Inputs ===
base: - 
index: a148 
=== Succesors ===
=== Usages ===
i149 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: - index: a148  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i149 <|@
d <@d|@=== Debug Properties ===
accessStamp: i32 [0 - 2147483647] bits:0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
barrierType: NONE
deoptReasonAndAction: int[-11019|0xffffffffffffd4f5]
deoptSpeculation: long[0|0x0]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: [].length:final
memoryOrder: PLAIN
nodeSourcePosition: at Queens.getRowColumn(int, int) [bci: 5]
stamp: i32 [0 - 2147483647] bits:0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
usedAsNullCheck: true
=== Inputs ===
stateBefore: ?4 
guard: - 
address: v158 
lastLocationAccess: - 
=== Succesors ===
next: v114 
=== Usages ===
v48 
=== Predecessor ===
a148 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: ?4 guard: - address: v158 lastLocationAccess: - #next: v114  <|@  <|@
f <@~|@floating>@ <|@
tid v48 <|@
d <@d|@=== Debug Properties ===
condition: BT
nodeSourcePosition: at Queens.getRowColumn(int, int) [bci: 5]
op: jdk.graal.compiler.nodes.calc.IntegerBelowNode$BelowOp@5ce4369b
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i2 
y: i149 
=== Succesors ===
=== Usages ===
v114 
=== Predecessor ===
- >@ <|@
instruction <@|<||@jdk.graal.compiler.nodes.calc.IntegerBelowNode>@ x: i2 y: i149  <|@  <|@
f <@*|@fixed>@ <|@
tid v114 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at Queens.getRowColumn(int, int) [bci: 5]
profileData: INJECTED designatedSuccessorProbability: 1.0
stamp: void
=== Inputs ===
condition: v48 
=== Succesors ===
trueSuccessor: v111 
falseSuccessor: v113 
=== Usages ===
=== Predecessor ===
i149 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v48 #trueSuccessor: v111 #falseSuccessor: v113  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B3" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v111 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at Queens.getRowColumn(int, int) [bci: 5]
stamp: void
=== Inputs ===
=== Succesors ===
next: i150 
=== Usages ===
=== Predecessor ===
v114 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: i150  <|@  <|@
f <@~|@floating>@ <|@
tid j92 <|@
d <@d|@=== Debug Properties ===
inputBits: 32
nodeSourcePosition: at Queens.getRowColumn(int, int) [bci: 5]
resultBits: 64
stamp: i64 [0 - 4294967295] bits:0...0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
=== Inputs ===
value: i2 
=== Succesors ===
=== Usages ===
v159 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i2  <|@  <|@
f <@~|@floating>@ <|@
tid v159 <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S8
=== Inputs ===
base: j92 
index: a148 
=== Succesors ===
=== Usages ===
i150 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: j92 index: a148  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i150 <|@
d <@d|@=== Debug Properties ===
accessStamp: i8 [0 - 1] bits:0000000x
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Array: boolean
memoryOrder: PLAIN
nodeSourcePosition: at Queens.getRowColumn(int, int) [bci: 5]
stamp: i8 [0 - 1] bits:0000000x
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v159 
lastLocationAccess: - 
=== Succesors ===
next: v11 
=== Usages ===
v94 
=== Predecessor ===
v111 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v159 lastLocationAccess: - #next: v11  <|@  <|@
f <@~|@floating>@ <|@
tid i93 <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at Queens.getRowColumn(int, int) [bci: 6]
rawvalue: 0
stableDimension: 0
stamp: i8 [0]
stampKind: i8
value: byte[0|0x0]
=== Inputs ===
=== Succesors ===
=== Usages ===
v94 v96 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid v94 <|@
d <@d|@=== Debug Properties ===
condition: EQ
nodeSourcePosition: at Queens.getRowColumn(int, int) [bci: 6]
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i150 
y: i93 
=== Succesors ===
=== Usages ===
v11 
=== Predecessor ===
- >@ <|@
instruction <@==|@jdk.graal.compiler.nodes.calc.IntegerEqualsNode>@ x: i150 y: i93  <|@  <|@
f <@~|@floating>@ <|@
tid i7 <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at Queens.getRowColumn(int, int) [bci: 6]
rawvalue: 0
stableDimension: 0
stamp: i32 [0]
stampKind: i32
value: int[0|0x0]
=== Inputs ===
=== Succesors ===
=== Usages ===
i34 i34 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@*|@fixed>@ <|@
tid v11 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at Queens.getRowColumn(int, int) [bci: 6]
profileData: PROFILED designatedSuccessorProbability: 0.615625
stamp: void
=== Inputs ===
condition: v94 
=== Succesors ===
trueSuccessor: v10 
falseSuccessor: v9 
=== Usages ===
=== Predecessor ===
i150 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v94 #trueSuccessor: v10 #falseSuccessor: v9  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B8" 
    xhandlers
    flags 
    probability 4603720276586476339
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v10 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at Queens.getRowColumn(int, int) [bci: 38]
stamp: void
=== Inputs ===
=== Succesors ===
next: v33 
=== Usages ===
=== Predecessor ===
v11 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v33  <|@  <|@
f <@*|@fixed>@ <|@
tid v33 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at Queens.getRowColumn(int, int) [bci: 39]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v32 
=== Predecessor ===
v10 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B4" "B10" 
    xhandlers
    flags 
    probability 4600595904344988058
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v9 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at Queens.getRowColumn(int, int) [bci: 9]
stamp: void
=== Inputs ===
=== Succesors ===
next: a151 
=== Usages ===
=== Predecessor ===
v11 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: a151  <|@  <|@
f <@~|@floating>@ <|@
tid v160 <|@
d <@d|@=== Debug Properties ===
displacement: 12
stamp: void*
stride: S1
=== Inputs ===
base: a1 
index: - 
=== Succesors ===
=== Usages ===
a151 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a1 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid a151 <|@
d <@d|@=== Debug Properties ===
accessStamp: n# boolean[]
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Queens.freeMaxs
memoryOrder: PLAIN
nodeSourcePosition: at Queens.getRowColumn(int, int) [bci: 10]
stamp: n# boolean[]
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v160 
lastLocationAccess: - 
=== Succesors ===
next: i152 
=== Usages ===
v162 v161 
=== Predecessor ===
v9 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v160 lastLocationAccess: - #next: i152  <|@  <|@
f <@~|@floating>@ <|@
tid v161 <|@
d <@d|@=== Debug Properties ===
displacement: 12
stamp: void*
stride: S8
=== Inputs ===
base: - 
index: a151 
=== Succesors ===
=== Usages ===
i152 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: - index: a151  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i152 <|@
d <@d|@=== Debug Properties ===
accessStamp: i32 [0 - 2147483647] bits:0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
barrierType: NONE
deoptReasonAndAction: int[-15627|0xffffffffffffc2f5]
deoptSpeculation: long[0|0x0]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: [].length:final
memoryOrder: PLAIN
nodeSourcePosition: at Queens.getRowColumn(int, int) [bci: 16]
stamp: i32 [0 - 2147483647] bits:0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
usedAsNullCheck: true
=== Inputs ===
stateBefore: ?4 
guard: - 
address: v161 
lastLocationAccess: - 
=== Succesors ===
next: v122 
=== Usages ===
v65 
=== Predecessor ===
a151 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: ?4 guard: - address: v161 lastLocationAccess: - #next: v122  <|@  <|@
f <@~|@floating>@ <|@
tid i13 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at Queens.getRowColumn(int, int) [bci: 15]
stamp: i32
=== Inputs ===
x: i2 
y: i3 
=== Succesors ===
=== Usages ===
j95 v65 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i2 y: i3  <|@  <|@
f <@~|@floating>@ <|@
tid v65 <|@
d <@d|@=== Debug Properties ===
condition: BT
nodeSourcePosition: at Queens.getRowColumn(int, int) [bci: 16]
op: jdk.graal.compiler.nodes.calc.IntegerBelowNode$BelowOp@5ce4369b
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i13 
y: i152 
=== Succesors ===
=== Usages ===
v122 
=== Predecessor ===
- >@ <|@
instruction <@|<||@jdk.graal.compiler.nodes.calc.IntegerBelowNode>@ x: i13 y: i152  <|@  <|@
f <@*|@fixed>@ <|@
tid v122 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at Queens.getRowColumn(int, int) [bci: 16]
profileData: INJECTED designatedSuccessorProbability: 1.0
stamp: void
=== Inputs ===
condition: v65 
=== Succesors ===
trueSuccessor: v119 
falseSuccessor: v121 
=== Usages ===
=== Predecessor ===
i152 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v65 #trueSuccessor: v119 #falseSuccessor: v121  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B5" "B6" 
    xhandlers
    flags 
    probability 4600595904344988058
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v119 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at Queens.getRowColumn(int, int) [bci: 16]
stamp: void
=== Inputs ===
=== Succesors ===
next: i153 
=== Usages ===
=== Predecessor ===
v122 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: i153  <|@  <|@
f <@~|@floating>@ <|@
tid j95 <|@
d <@d|@=== Debug Properties ===
inputBits: 32
nodeSourcePosition: at Queens.getRowColumn(int, int) [bci: 16]
resultBits: 64
stamp: i64 [0 - 4294967295] bits:0...0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
=== Inputs ===
value: i13 
=== Succesors ===
=== Usages ===
v162 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i13  <|@  <|@
f <@~|@floating>@ <|@
tid v162 <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S8
=== Inputs ===
base: j95 
index: a151 
=== Succesors ===
=== Usages ===
i153 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: j95 index: a151  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i153 <|@
d <@d|@=== Debug Properties ===
accessStamp: i8 [0 - 1] bits:0000000x
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Array: boolean
memoryOrder: PLAIN
nodeSourcePosition: at Queens.getRowColumn(int, int) [bci: 16]
stamp: i8 [0 - 1] bits:0000000x
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v162 
lastLocationAccess: - 
=== Succesors ===
next: v21 
=== Usages ===
v96 
=== Predecessor ===
v119 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v162 lastLocationAccess: - #next: v21  <|@  <|@
f <@~|@floating>@ <|@
tid v96 <|@
d <@d|@=== Debug Properties ===
condition: EQ
nodeSourcePosition: at Queens.getRowColumn(int, int) [bci: 17]
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i153 
y: i93 
=== Succesors ===
=== Usages ===
v21 
=== Predecessor ===
- >@ <|@
instruction <@==|@jdk.graal.compiler.nodes.calc.IntegerEqualsNode>@ x: i153 y: i93  <|@  <|@
f <@*|@fixed>@ <|@
tid v21 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at Queens.getRowColumn(int, int) [bci: 17]
profileData: PROFILED designatedSuccessorProbability: 0.2860772357723577
stamp: void
=== Inputs ===
condition: v96 
=== Succesors ===
trueSuccessor: v20 
falseSuccessor: v16 
=== Usages ===
=== Predecessor ===
i153 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v96 #trueSuccessor: v20 #falseSuccessor: v16  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B4" 
    successors "B8" 
    xhandlers
    flags 
    probability 4592587941257569895
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v20 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at Queens.getRowColumn(int, int) [bci: 38]
stamp: void
=== Inputs ===
=== Succesors ===
next: v37 
=== Usages ===
=== Predecessor ===
v21 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v37  <|@  <|@
f <@*|@fixed>@ <|@
tid v37 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at Queens.getRowColumn(int, int) [bci: 38]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v32 
=== Predecessor ===
v20 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B4" 
    successors "B7" "B9" 
    xhandlers
    flags 
    probability 4598615024196386816
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v16 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at Queens.getRowColumn(int, int) [bci: 20]
stamp: void
=== Inputs ===
=== Succesors ===
next: a154 
=== Usages ===
=== Predecessor ===
v21 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: a154  <|@  <|@
f <@~|@floating>@ <|@
tid v163 <|@
d <@d|@=== Debug Properties ===
displacement: 20
stamp: void*
stride: S1
=== Inputs ===
base: a1 
index: - 
=== Succesors ===
=== Usages ===
a154 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a1 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid a154 <|@
d <@d|@=== Debug Properties ===
accessStamp: n# boolean[]
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Queens.freeMins
memoryOrder: PLAIN
nodeSourcePosition: at Queens.getRowColumn(int, int) [bci: 21]
stamp: n# boolean[]
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v163 
lastLocationAccess: - 
=== Succesors ===
next: i155 
=== Usages ===
v165 v164 
=== Predecessor ===
v16 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v163 lastLocationAccess: - #next: i155  <|@  <|@
f <@~|@floating>@ <|@
tid v164 <|@
d <@d|@=== Debug Properties ===
displacement: 12
stamp: void*
stride: S8
=== Inputs ===
base: - 
index: a154 
=== Succesors ===
=== Usages ===
i155 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: - index: a154  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i155 <|@
d <@d|@=== Debug Properties ===
accessStamp: i32 [0 - 2147483647] bits:0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
barrierType: NONE
deoptReasonAndAction: int[-20235|0xffffffffffffb0f5]
deoptSpeculation: long[0|0x0]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: [].length:final
memoryOrder: PLAIN
nodeSourcePosition: at Queens.getRowColumn(int, int) [bci: 30]
stamp: i32 [0 - 2147483647] bits:0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
usedAsNullCheck: true
=== Inputs ===
stateBefore: ?4 
guard: - 
address: v164 
lastLocationAccess: - 
=== Succesors ===
next: v130 
=== Usages ===
v83 
=== Predecessor ===
a154 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: ?4 guard: - address: v164 lastLocationAccess: - #next: v130  <|@  <|@
f <@~|@floating>@ <|@
tid i23 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at Queens.getRowColumn(int, int) [bci: 26]
stamp: i32
=== Inputs ===
x: i3 
y: i2 
=== Succesors ===
=== Usages ===
i25 
=== Predecessor ===
- >@ <|@
instruction <@-|@jdk.graal.compiler.nodes.calc.SubNode>@ x: i3 y: i2  <|@  <|@
f <@~|@floating>@ <|@
tid i24 <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at Queens.getRowColumn(int, int) [bci: 27]
rawvalue: 7
stableDimension: 0
stamp: i32 [7]
stampKind: i32
value: int[7|0x7]
=== Inputs ===
=== Succesors ===
=== Usages ===
i25 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid i25 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at Queens.getRowColumn(int, int) [bci: 29]
stamp: i32
=== Inputs ===
x: i23 
y: i24 
=== Succesors ===
=== Usages ===
j97 v83 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i23 y: i24  <|@  <|@
f <@~|@floating>@ <|@
tid v83 <|@
d <@d|@=== Debug Properties ===
condition: BT
nodeSourcePosition: at Queens.getRowColumn(int, int) [bci: 30]
op: jdk.graal.compiler.nodes.calc.IntegerBelowNode$BelowOp@5ce4369b
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i25 
y: i155 
=== Succesors ===
=== Usages ===
v130 
=== Predecessor ===
- >@ <|@
instruction <@|<||@jdk.graal.compiler.nodes.calc.IntegerBelowNode>@ x: i25 y: i155  <|@  <|@
f <@*|@fixed>@ <|@
tid v130 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at Queens.getRowColumn(int, int) [bci: 30]
profileData: INJECTED designatedSuccessorProbability: 1.0
stamp: void
=== Inputs ===
condition: v83 
=== Succesors ===
trueSuccessor: v127 
falseSuccessor: v129 
=== Usages ===
=== Predecessor ===
i155 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v83 #trueSuccessor: v127 #falseSuccessor: v129  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B8" 
    xhandlers
    flags 
    probability 4598615024196386816
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v127 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at Queens.getRowColumn(int, int) [bci: 30]
stamp: void
=== Inputs ===
=== Succesors ===
next: i156 
=== Usages ===
=== Predecessor ===
v130 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: i156  <|@  <|@
f <@~|@floating>@ <|@
tid j97 <|@
d <@d|@=== Debug Properties ===
inputBits: 32
nodeSourcePosition: at Queens.getRowColumn(int, int) [bci: 30]
resultBits: 64
stamp: i64 [0 - 4294967295] bits:0...0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
=== Inputs ===
value: i25 
=== Succesors ===
=== Usages ===
v165 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i25  <|@  <|@
f <@~|@floating>@ <|@
tid v165 <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S8
=== Inputs ===
base: j97 
index: a154 
=== Succesors ===
=== Usages ===
i156 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: j97 index: a154  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i156 <|@
d <@d|@=== Debug Properties ===
accessStamp: i8 [0 - 1] bits:0000000x
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Array: boolean
memoryOrder: PLAIN
nodeSourcePosition: at Queens.getRowColumn(int, int) [bci: 30]
stamp: i8 [0 - 1] bits:0000000x
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v165 
lastLocationAccess: - 
=== Succesors ===
next: v31 
=== Usages ===
i91 
=== Predecessor ===
v127 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v165 lastLocationAccess: - #next: v31  <|@  <|@
f <@~|@floating>@ <|@
tid i91 <|@
d <@d|@=== Debug Properties ===
inputBits: 8
nodeSourcePosition: at Queens.getRowColumn(int, int) [bci: 30]
resultBits: 32
stamp: i32 [0 - 1] bits:0...0x
=== Inputs ===
value: i156 
=== Succesors ===
=== Usages ===
i34 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i156  <|@  <|@
f <@*|@fixed>@ <|@
tid v31 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at Queens.getRowColumn(int, int) [bci: 39]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v32 
=== Predecessor ===
i156 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B7" "B2" "B5" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      HIR
f <@~|@floating>@ <|@
tid i34 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at Queens.getRowColumn(int, int) [bci: 39]
stamp: i32 [0 - 1] bits:0...0x
valueDescription: i32
=== Inputs ===
merge: v32 
values: i91 i7 i7 
=== Succesors ===
=== Usages ===
v36 
=== Predecessor ===
- >@ <|@
instruction <@ValuePhi|@jdk.graal.compiler.nodes.ValuePhiNode>@ merge: v32 values: i91 i7 i7  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v32 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at Queens.getRowColumn(int, int) [bci: 39]
stamp: void
=== Inputs ===
stateAfter: - 
ends: v31 v33 v37 
=== Succesors ===
next: v36 
=== Usages ===
i34 
=== Predecessor ===
- >@ <|@
instruction <@Merge|@jdk.graal.compiler.nodes.MergeNode>@ stateAfter: - ends: v31 v33 v37 #next: v36  <|@  <|@
f <@*|@fixed>@ <|@
tid v36 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at Queens.getRowColumn(int, int) [bci: 39]
stamp: void
=== Inputs ===
memoryMap: - 
result: i34 
=== Succesors ===
=== Usages ===
=== Predecessor ===
v32 >@ <|@
instruction <@Return|@jdk.graal.compiler.nodes.ReturnNode>@ memoryMap: - result: i34  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B12" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v129 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at Queens.getRowColumn(int, int) [bci: 30]
stamp: void
=== Inputs ===
=== Succesors ===
next: v146 
=== Usages ===
=== Predecessor ===
v130 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v146  <|@  <|@
f <@~|@floating>@ <|@
tid i147 <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at Queens.getRowColumn(int, int) [bci: 5]
rawvalue: -21531
stableDimension: 0
stamp: i32 [-21531]
stampKind: i32
value: int[-21531|0xffffffffffffabe5]
=== Inputs ===
=== Succesors ===
=== Usages ===
i135 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@*|@fixed>@ <|@
tid v146 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at Queens.getRowColumn(int, int) [bci: 5]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v131 
=== Predecessor ===
v129 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B12" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v121 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at Queens.getRowColumn(int, int) [bci: 16]
stamp: void
=== Inputs ===
=== Succesors ===
next: v142 
=== Usages ===
=== Predecessor ===
v122 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v142  <|@  <|@
f <@~|@floating>@ <|@
tid i143 <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at Queens.getRowColumn(int, int) [bci: 5]
rawvalue: -16923
stableDimension: 0
stamp: i32 [-16923]
stampKind: i32
value: int[-16923|0xffffffffffffbde5]
=== Inputs ===
=== Succesors ===
=== Usages ===
i135 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@*|@fixed>@ <|@
tid v142 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at Queens.getRowColumn(int, int) [bci: 5]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v131 
=== Predecessor ===
v121 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B12" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v113 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at Queens.getRowColumn(int, int) [bci: 5]
stamp: void
=== Inputs ===
=== Succesors ===
next: v138 
=== Usages ===
=== Predecessor ===
v114 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v138  <|@  <|@
f <@~|@floating>@ <|@
tid i139 <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at Queens.getRowColumn(int, int) [bci: 5]
rawvalue: -12571
stableDimension: 0
stamp: i32 [-12571]
stampKind: i32
value: int[-12571|0xffffffffffffcee5]
=== Inputs ===
=== Succesors ===
=== Usages ===
i135 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@*|@fixed>@ <|@
tid v138 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at Queens.getRowColumn(int, int) [bci: 5]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v131 
=== Predecessor ===
v113 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B11" "B10" "B9" 
    successors 
    xhandlers
    flags 
    probability 2362138004555825152
    begin_IR
      HIR
f <@~|@floating>@ <|@
tid i135 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at Queens.getRowColumn(int, int) [bci: 5]
stamp: i32 [-21531 - -12571] bits:1...1xxx1xxx11100101
valueDescription: i32
=== Inputs ===
merge: v131 
values: i139 i143 i147 
=== Succesors ===
=== Usages ===
v137 
=== Predecessor ===
- >@ <|@
instruction <@ValuePhi|@jdk.graal.compiler.nodes.ValuePhiNode>@ merge: v131 values: i139 i143 i147  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v131 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at Queens.getRowColumn(int, int) [bci: 5]
stamp: void
=== Inputs ===
stateAfter: - 
ends: v138 v142 v146 
=== Succesors ===
next: v137 
=== Usages ===
i135 
=== Predecessor ===
- >@ <|@
instruction <@Merge|@jdk.graal.compiler.nodes.MergeNode>@ stateAfter: - ends: v138 v142 v146 #next: v137  <|@  <|@
f <@~|@floating>@ <|@
tid j134 <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at Queens.getRowColumn(int, int) [bci: 5]
rawvalue: 0
stableDimension: 0
stamp: i64 [0]
stampKind: i64
value: long[0|0x0]
=== Inputs ===
=== Succesors ===
=== Usages ===
v137 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@*|@fixed>@ <|@
tid v137 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at Queens.getRowColumn(int, int) [bci: 5]
stamp: void
=== Inputs ===
stateBefore: ?4 
actionAndReason: i135 
speculation: j134 
=== Succesors ===
=== Usages ===
=== Predecessor ===
v131 >@ <|@
instruction <@DynamicDeoptimize|@jdk.graal.compiler.nodes.DynamicDeoptimizeNode>@ stateBefore: ?4 actionAndReason: i135 speculation: j134  <|@  <|@
    end_IR
  end_block
end_cfg
begin_cfg
  name "After LIRGeneration"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B11" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [rsi|QWORD[.], rdx|DWORD, rcx|DWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@6bd31264 slotKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v0|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v1|DWORD = MOVE input: rdx|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v2|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v3|DWORD[_] = MOV input: [v0|QWORD[.] + 16] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@Queens.getRowColumn(int, int) [bci: 0]
locals: v0|QWORD[.] v1|DWORD v2|DWORD 
>@ <|@ instruction CMPBRANCH (x: v1|DWORD, y: [v3|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B0 -> B1 falseDestination: B0 -> B11 size: DWORD state [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B3" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v4|QWORD = MOV value: v1|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPCONSTBRANCH x: [v4|QWORD + v3|DWORD[_] * 8 + 16] trueDestinationProbability: 0.615625 condition: = trueDestination: B1 -> B2 falseDestination: B1 -> B3 y: 0 size: BYTE inlinedY: null <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B8" 
    xhandlers
    flags 
    probability 4603720276586476339
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[0|0x0]] destination: B2 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B4" "B10" 
    xhandlers
    flags 
    probability 4600595904344988058
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v5|DWORD[_] = MOV input: [v0|QWORD[.] + 12] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v6|DWORD = ADD (x: v2|DWORD, y: v1|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@Queens.getRowColumn(int, int) [bci: 0]
locals: v0|QWORD[.] v1|DWORD v2|DWORD 
>@ <|@ instruction CMPBRANCH (x: v6|DWORD, y: [v5|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B3 -> B4 falseDestination: B3 -> B10 size: DWORD state [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B5" "B6" 
    xhandlers
    flags 
    probability 4600595904344988058
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction CMPCONSTBRANCH x: [v6|DWORD + v5|DWORD[_] * 8 + 16] trueDestinationProbability: 0.2860772357723577 condition: = trueDestination: B4 -> B5 falseDestination: B4 -> B6 y: 0 size: BYTE inlinedY: null <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B4" 
    successors "B7" "B9" 
    xhandlers
    flags 
    probability 4598615024196386816
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v7|DWORD[_] = MOV input: [v0|QWORD[.] + 20] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v8|DWORD = SUB (x: v2|DWORD, ~y: v1|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v9|DWORD = LEA address: [v8|DWORD + 7] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@Queens.getRowColumn(int, int) [bci: 0]
locals: v0|QWORD[.] v1|DWORD v2|DWORD 
>@ <|@ instruction CMPBRANCH (x: v9|DWORD, y: [v7|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B6 -> B7 falseDestination: B6 -> B9 size: DWORD state [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B8" 
    xhandlers
    flags 
    probability 4598615024196386816
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v10|DWORD = MOVZXB input: [v9|DWORD + v7|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [v10|DWORD] destination: B7 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B4" 
    successors "B8" 
    xhandlers
    flags 
    probability 4592587941257569895
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[0|0x0]] destination: B5 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B7" "B2" "B5" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [v11|DWORD] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr   -1  <|@ instruction rax|DWORD = MOVE input: v11|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@3dbf6f45 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B12" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-12571|0xffffffffffffcee5]] destination: B11 -> B12 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B12" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-16923|0xffffffffffffbde5]] destination: B10 -> B12 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B12" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-21531|0xffffffffffffabe5]] destination: B9 -> B12 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B11" "B10" "B9" 
    successors 
    xhandlers
    flags 
    probability 2362138004555825152
    begin_IR
      LIR
      nr   -1  <|@ instruction [v12|DWORD] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr   -1  <|@ instruction MOV (x: [r15|QWORD + 1156], y: v12|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@Queens.getRowColumn(int, int) [bci: 0]
locals: v0|QWORD[.] v1|DWORD v2|DWORD 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: aload_0       
     1: getfield      #3          // freeRows:boolean[]
     4: iload_1       
     5: baload        
     6: ifeq          38
     9: aload_0       
    10: getfield      #5          // freeMaxs:boolean[]
    13: iload_2       
    14: iload_1       
    15: iadd          
    16: baload        
    17: ifeq          38
    20: aload_0       
    21: getfield      #6          // freeMins:boolean[]
    24: iload_2       
    25: iload_1       
    26: isub          
    27: bipush        7
    29: iadd          
    30: baload        
    31: ifeq          38
    34: iconst_1      
    35: goto          39
    38: iconst_0      
    39: ireturn       
   <|@
end_bytecodes
begin_cfg
  name "After LIR generation"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B11" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v0 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
stamp: void
=== Inputs ===
stateAfter: - 
=== Succesors ===
next: a148 
=== Usages ===
=== Predecessor ===
- >@ <|@
instruction <@StartNode|@jdk.graal.compiler.nodes.StartNode>@ stateAfter: - #next: a148  <|@  <|@
f <@~|@floating>@ <|@
tid a1 <|@
result v0|QWORD[.] <|@
d <@d|@=== Debug Properties ===
index: 0
stamp: a!# Queens
uncheckedStamp: [null]
=== Inputs ===
=== Succesors ===
=== Usages ===
?4 v157 v160 v163 
=== Predecessor ===
- >@ <|@
instruction <@Parameter|@jdk.graal.compiler.nodes.ParameterNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid v157 <|@
result [v0|QWORD[.] + 16] <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S1
=== Inputs ===
base: a1 
index: - 
=== Succesors ===
=== Usages ===
a148 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a1 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid a148 <|@
result v3|DWORD[_] <|@
d <@d|@=== Debug Properties ===
accessStamp: n# boolean[]
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Queens.freeRows
memoryOrder: PLAIN
nodeSourcePosition: at Queens.getRowColumn(int, int) [bci: 1]
stamp: n# boolean[]
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v157 
lastLocationAccess: - 
=== Succesors ===
next: i149 
=== Usages ===
v159 v158 
=== Predecessor ===
v0 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v157 lastLocationAccess: - #next: i149  <|@  <|@
f <@~|@floating>@ <|@
tid i2 <|@
result v1|DWORD <|@
d <@d|@=== Debug Properties ===
index: 1
stamp: i32
uncheckedStamp: [null]
=== Inputs ===
=== Succesors ===
=== Usages ===
?4 j92 i13 i23 v48 
=== Predecessor ===
- >@ <|@
instruction <@Parameter|@jdk.graal.compiler.nodes.ParameterNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid i3 <|@
result v2|DWORD <|@
d <@d|@=== Debug Properties ===
index: 2
stamp: i32
uncheckedStamp: [null]
=== Inputs ===
=== Succesors ===
=== Usages ===
?4 i13 i23 
=== Predecessor ===
- >@ <|@
instruction <@Parameter|@jdk.graal.compiler.nodes.ParameterNode>@  <|@  <|@
tid ?4 <|@
d <@d|@=== Debug Properties ===
bci: 0
bytecode: aload_0
code: ResolvedJavaMethodBytecode<Queens.getRowColumn(int, int)>
localsSize: 3
locksSize: 0
stackSize: 0
stackState: BeforePop
validForDeoptimization: true
=== Inputs ===
outerFrameState: - 
values: a1 i2 i3 
=== Succesors ===
=== Usages ===
v137 i149 i152 i155 
=== Predecessor ===
- >@ <|@
instruction <@FrameState|@jdk.graal.compiler.nodes.FrameState>@ outerFrameState: - values: a1 i2 i3  <|@  <|@
f <@~|@floating>@ <|@
tid v158 <|@
result [v3|DWORD[_] * 8 + 12] <|@
d <@d|@=== Debug Properties ===
displacement: 12
stamp: void*
stride: S8
=== Inputs ===
base: - 
index: a148 
=== Succesors ===
=== Usages ===
i149 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: - index: a148  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i149 <|@
d <@d|@=== Debug Properties ===
accessStamp: i32 [0 - 2147483647] bits:0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
barrierType: NONE
deoptReasonAndAction: int[-11019|0xffffffffffffd4f5]
deoptSpeculation: long[0|0x0]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: [].length:final
memoryOrder: PLAIN
nodeSourcePosition: at Queens.getRowColumn(int, int) [bci: 5]
stamp: i32 [0 - 2147483647] bits:0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
usedAsNullCheck: true
=== Inputs ===
stateBefore: ?4 
guard: - 
address: v158 
lastLocationAccess: - 
=== Succesors ===
next: v114 
=== Usages ===
v48 
=== Predecessor ===
a148 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: ?4 guard: - address: v158 lastLocationAccess: - #next: v114  <|@  <|@
f <@~|@floating>@ <|@
tid v48 <|@
d <@d|@=== Debug Properties ===
condition: BT
nodeSourcePosition: at Queens.getRowColumn(int, int) [bci: 5]
op: jdk.graal.compiler.nodes.calc.IntegerBelowNode$BelowOp@5ce4369b
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i2 
y: i149 
=== Succesors ===
=== Usages ===
v114 
=== Predecessor ===
- >@ <|@
instruction <@|<||@jdk.graal.compiler.nodes.calc.IntegerBelowNode>@ x: i2 y: i149  <|@  <|@
f <@*|@fixed>@ <|@
tid v114 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at Queens.getRowColumn(int, int) [bci: 5]
profileData: INJECTED designatedSuccessorProbability: 1.0
stamp: void
=== Inputs ===
condition: v48 
=== Succesors ===
trueSuccessor: v111 
falseSuccessor: v113 
=== Usages ===
=== Predecessor ===
i149 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v48 #trueSuccessor: v111 #falseSuccessor: v113  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [rsi|QWORD[.], rdx|DWORD, rcx|DWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@6bd31264 slotKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v0|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v1|DWORD = MOVE input: rdx|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v2|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v3|DWORD[_] = MOV input: [v0|QWORD[.] + 16] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@Queens.getRowColumn(int, int) [bci: 0]
locals: v0|QWORD[.] v1|DWORD v2|DWORD 
>@ <|@ instruction CMPBRANCH (x: v1|DWORD, y: [v3|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B0 -> B1 falseDestination: B0 -> B11 size: DWORD state [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B3" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v111 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at Queens.getRowColumn(int, int) [bci: 5]
stamp: void
=== Inputs ===
=== Succesors ===
next: i150 
=== Usages ===
=== Predecessor ===
v114 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: i150  <|@  <|@
f <@~|@floating>@ <|@
tid j92 <|@
result v4|QWORD <|@
d <@d|@=== Debug Properties ===
inputBits: 32
nodeSourcePosition: at Queens.getRowColumn(int, int) [bci: 5]
resultBits: 64
stamp: i64 [0 - 4294967295] bits:0...0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
=== Inputs ===
value: i2 
=== Succesors ===
=== Usages ===
v159 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i2  <|@  <|@
f <@~|@floating>@ <|@
tid v159 <|@
result [v4|QWORD + v3|DWORD[_] * 8 + 16] <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S8
=== Inputs ===
base: j92 
index: a148 
=== Succesors ===
=== Usages ===
i150 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: j92 index: a148  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i150 <|@
d <@d|@=== Debug Properties ===
accessStamp: i8 [0 - 1] bits:0000000x
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Array: boolean
memoryOrder: PLAIN
nodeSourcePosition: at Queens.getRowColumn(int, int) [bci: 5]
stamp: i8 [0 - 1] bits:0000000x
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v159 
lastLocationAccess: - 
=== Succesors ===
next: v11 
=== Usages ===
v94 
=== Predecessor ===
v111 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v159 lastLocationAccess: - #next: v11  <|@  <|@
f <@~|@floating>@ <|@
tid i93 <|@
result byte[0|0x0] <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at Queens.getRowColumn(int, int) [bci: 6]
rawvalue: 0
stableDimension: 0
stamp: i8 [0]
stampKind: i8
value: byte[0|0x0]
=== Inputs ===
=== Succesors ===
=== Usages ===
v94 v96 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid v94 <|@
d <@d|@=== Debug Properties ===
condition: EQ
nodeSourcePosition: at Queens.getRowColumn(int, int) [bci: 6]
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i150 
y: i93 
=== Succesors ===
=== Usages ===
v11 
=== Predecessor ===
- >@ <|@
instruction <@==|@jdk.graal.compiler.nodes.calc.IntegerEqualsNode>@ x: i150 y: i93  <|@  <|@
f <@~|@floating>@ <|@
tid i7 <|@
result int[0|0x0] <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at Queens.getRowColumn(int, int) [bci: 6]
rawvalue: 0
stableDimension: 0
stamp: i32 [0]
stampKind: i32
value: int[0|0x0]
=== Inputs ===
=== Succesors ===
=== Usages ===
i34 i34 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@*|@fixed>@ <|@
tid v11 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at Queens.getRowColumn(int, int) [bci: 6]
profileData: PROFILED designatedSuccessorProbability: 0.615625
stamp: void
=== Inputs ===
condition: v94 
=== Succesors ===
trueSuccessor: v10 
falseSuccessor: v9 
=== Usages ===
=== Predecessor ===
i150 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v94 #trueSuccessor: v10 #falseSuccessor: v9  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v4|QWORD = MOV value: v1|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPCONSTBRANCH x: [v4|QWORD + v3|DWORD[_] * 8 + 16] trueDestinationProbability: 0.615625 condition: = trueDestination: B1 -> B2 falseDestination: B1 -> B3 y: 0 size: BYTE inlinedY: null <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B8" 
    xhandlers
    flags 
    probability 4603720276586476339
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v10 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at Queens.getRowColumn(int, int) [bci: 38]
stamp: void
=== Inputs ===
=== Succesors ===
next: v33 
=== Usages ===
=== Predecessor ===
v11 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v33  <|@  <|@
f <@*|@fixed>@ <|@
tid v33 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at Queens.getRowColumn(int, int) [bci: 39]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v32 
=== Predecessor ===
v10 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[0|0x0]] destination: B2 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B4" "B10" 
    xhandlers
    flags 
    probability 4600595904344988058
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v9 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at Queens.getRowColumn(int, int) [bci: 9]
stamp: void
=== Inputs ===
=== Succesors ===
next: a151 
=== Usages ===
=== Predecessor ===
v11 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: a151  <|@  <|@
f <@~|@floating>@ <|@
tid v160 <|@
result [v0|QWORD[.] + 12] <|@
d <@d|@=== Debug Properties ===
displacement: 12
stamp: void*
stride: S1
=== Inputs ===
base: a1 
index: - 
=== Succesors ===
=== Usages ===
a151 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a1 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid a151 <|@
result v5|DWORD[_] <|@
d <@d|@=== Debug Properties ===
accessStamp: n# boolean[]
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Queens.freeMaxs
memoryOrder: PLAIN
nodeSourcePosition: at Queens.getRowColumn(int, int) [bci: 10]
stamp: n# boolean[]
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v160 
lastLocationAccess: - 
=== Succesors ===
next: i152 
=== Usages ===
v162 v161 
=== Predecessor ===
v9 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v160 lastLocationAccess: - #next: i152  <|@  <|@
f <@~|@floating>@ <|@
tid v161 <|@
result [v5|DWORD[_] * 8 + 12] <|@
d <@d|@=== Debug Properties ===
displacement: 12
stamp: void*
stride: S8
=== Inputs ===
base: - 
index: a151 
=== Succesors ===
=== Usages ===
i152 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: - index: a151  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i152 <|@
d <@d|@=== Debug Properties ===
accessStamp: i32 [0 - 2147483647] bits:0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
barrierType: NONE
deoptReasonAndAction: int[-15627|0xffffffffffffc2f5]
deoptSpeculation: long[0|0x0]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: [].length:final
memoryOrder: PLAIN
nodeSourcePosition: at Queens.getRowColumn(int, int) [bci: 16]
stamp: i32 [0 - 2147483647] bits:0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
usedAsNullCheck: true
=== Inputs ===
stateBefore: ?4 
guard: - 
address: v161 
lastLocationAccess: - 
=== Succesors ===
next: v122 
=== Usages ===
v65 
=== Predecessor ===
a151 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: ?4 guard: - address: v161 lastLocationAccess: - #next: v122  <|@  <|@
f <@~|@floating>@ <|@
tid i13 <|@
result v6|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at Queens.getRowColumn(int, int) [bci: 15]
stamp: i32
=== Inputs ===
x: i2 
y: i3 
=== Succesors ===
=== Usages ===
j95 v65 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i2 y: i3  <|@  <|@
f <@~|@floating>@ <|@
tid v65 <|@
d <@d|@=== Debug Properties ===
condition: BT
nodeSourcePosition: at Queens.getRowColumn(int, int) [bci: 16]
op: jdk.graal.compiler.nodes.calc.IntegerBelowNode$BelowOp@5ce4369b
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i13 
y: i152 
=== Succesors ===
=== Usages ===
v122 
=== Predecessor ===
- >@ <|@
instruction <@|<||@jdk.graal.compiler.nodes.calc.IntegerBelowNode>@ x: i13 y: i152  <|@  <|@
f <@*|@fixed>@ <|@
tid v122 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at Queens.getRowColumn(int, int) [bci: 16]
profileData: INJECTED designatedSuccessorProbability: 1.0
stamp: void
=== Inputs ===
condition: v65 
=== Succesors ===
trueSuccessor: v119 
falseSuccessor: v121 
=== Usages ===
=== Predecessor ===
i152 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v65 #trueSuccessor: v119 #falseSuccessor: v121  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v5|DWORD[_] = MOV input: [v0|QWORD[.] + 12] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v6|DWORD = ADD (x: v2|DWORD, y: v1|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@Queens.getRowColumn(int, int) [bci: 0]
locals: v0|QWORD[.] v1|DWORD v2|DWORD 
>@ <|@ instruction CMPBRANCH (x: v6|DWORD, y: [v5|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B3 -> B4 falseDestination: B3 -> B10 size: DWORD state [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B5" "B6" 
    xhandlers
    flags 
    probability 4600595904344988058
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v119 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at Queens.getRowColumn(int, int) [bci: 16]
stamp: void
=== Inputs ===
=== Succesors ===
next: i153 
=== Usages ===
=== Predecessor ===
v122 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: i153  <|@  <|@
f <@~|@floating>@ <|@
tid j95 <|@
result v6|DWORD <|@
d <@d|@=== Debug Properties ===
inputBits: 32
nodeSourcePosition: at Queens.getRowColumn(int, int) [bci: 16]
resultBits: 64
stamp: i64 [0 - 4294967295] bits:0...0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
=== Inputs ===
value: i13 
=== Succesors ===
=== Usages ===
v162 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i13  <|@  <|@
f <@~|@floating>@ <|@
tid v162 <|@
result [v6|DWORD + v5|DWORD[_] * 8 + 16] <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S8
=== Inputs ===
base: j95 
index: a151 
=== Succesors ===
=== Usages ===
i153 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: j95 index: a151  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i153 <|@
d <@d|@=== Debug Properties ===
accessStamp: i8 [0 - 1] bits:0000000x
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Array: boolean
memoryOrder: PLAIN
nodeSourcePosition: at Queens.getRowColumn(int, int) [bci: 16]
stamp: i8 [0 - 1] bits:0000000x
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v162 
lastLocationAccess: - 
=== Succesors ===
next: v21 
=== Usages ===
v96 
=== Predecessor ===
v119 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v162 lastLocationAccess: - #next: v21  <|@  <|@
f <@~|@floating>@ <|@
tid v96 <|@
d <@d|@=== Debug Properties ===
condition: EQ
nodeSourcePosition: at Queens.getRowColumn(int, int) [bci: 17]
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i153 
y: i93 
=== Succesors ===
=== Usages ===
v21 
=== Predecessor ===
- >@ <|@
instruction <@==|@jdk.graal.compiler.nodes.calc.IntegerEqualsNode>@ x: i153 y: i93  <|@  <|@
f <@*|@fixed>@ <|@
tid v21 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at Queens.getRowColumn(int, int) [bci: 17]
profileData: PROFILED designatedSuccessorProbability: 0.2860772357723577
stamp: void
=== Inputs ===
condition: v96 
=== Succesors ===
trueSuccessor: v20 
falseSuccessor: v16 
=== Usages ===
=== Predecessor ===
i153 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v96 #trueSuccessor: v20 #falseSuccessor: v16  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction CMPCONSTBRANCH x: [v6|DWORD + v5|DWORD[_] * 8 + 16] trueDestinationProbability: 0.2860772357723577 condition: = trueDestination: B4 -> B5 falseDestination: B4 -> B6 y: 0 size: BYTE inlinedY: null <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B4" 
    successors "B8" 
    xhandlers
    flags 
    probability 4592587941257569895
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v20 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at Queens.getRowColumn(int, int) [bci: 38]
stamp: void
=== Inputs ===
=== Succesors ===
next: v37 
=== Usages ===
=== Predecessor ===
v21 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v37  <|@  <|@
f <@*|@fixed>@ <|@
tid v37 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at Queens.getRowColumn(int, int) [bci: 38]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v32 
=== Predecessor ===
v20 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[0|0x0]] destination: B5 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B4" 
    successors "B7" "B9" 
    xhandlers
    flags 
    probability 4598615024196386816
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v16 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at Queens.getRowColumn(int, int) [bci: 20]
stamp: void
=== Inputs ===
=== Succesors ===
next: a154 
=== Usages ===
=== Predecessor ===
v21 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: a154  <|@  <|@
f <@~|@floating>@ <|@
tid v163 <|@
result [v0|QWORD[.] + 20] <|@
d <@d|@=== Debug Properties ===
displacement: 20
stamp: void*
stride: S1
=== Inputs ===
base: a1 
index: - 
=== Succesors ===
=== Usages ===
a154 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a1 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid a154 <|@
result v7|DWORD[_] <|@
d <@d|@=== Debug Properties ===
accessStamp: n# boolean[]
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Queens.freeMins
memoryOrder: PLAIN
nodeSourcePosition: at Queens.getRowColumn(int, int) [bci: 21]
stamp: n# boolean[]
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v163 
lastLocationAccess: - 
=== Succesors ===
next: i155 
=== Usages ===
v165 v164 
=== Predecessor ===
v16 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v163 lastLocationAccess: - #next: i155  <|@  <|@
f <@~|@floating>@ <|@
tid v164 <|@
result [v7|DWORD[_] * 8 + 12] <|@
d <@d|@=== Debug Properties ===
displacement: 12
stamp: void*
stride: S8
=== Inputs ===
base: - 
index: a154 
=== Succesors ===
=== Usages ===
i155 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: - index: a154  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i155 <|@
d <@d|@=== Debug Properties ===
accessStamp: i32 [0 - 2147483647] bits:0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
barrierType: NONE
deoptReasonAndAction: int[-20235|0xffffffffffffb0f5]
deoptSpeculation: long[0|0x0]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: [].length:final
memoryOrder: PLAIN
nodeSourcePosition: at Queens.getRowColumn(int, int) [bci: 30]
stamp: i32 [0 - 2147483647] bits:0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
usedAsNullCheck: true
=== Inputs ===
stateBefore: ?4 
guard: - 
address: v164 
lastLocationAccess: - 
=== Succesors ===
next: v130 
=== Usages ===
v83 
=== Predecessor ===
a154 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: ?4 guard: - address: v164 lastLocationAccess: - #next: v130  <|@  <|@
f <@~|@floating>@ <|@
tid i23 <|@
result v8|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at Queens.getRowColumn(int, int) [bci: 26]
stamp: i32
=== Inputs ===
x: i3 
y: i2 
=== Succesors ===
=== Usages ===
i25 
=== Predecessor ===
- >@ <|@
instruction <@-|@jdk.graal.compiler.nodes.calc.SubNode>@ x: i3 y: i2  <|@  <|@
f <@~|@floating>@ <|@
tid i24 <|@
result int[7|0x7] <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at Queens.getRowColumn(int, int) [bci: 27]
rawvalue: 7
stableDimension: 0
stamp: i32 [7]
stampKind: i32
value: int[7|0x7]
=== Inputs ===
=== Succesors ===
=== Usages ===
i25 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid i25 <|@
result v9|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at Queens.getRowColumn(int, int) [bci: 29]
stamp: i32
=== Inputs ===
x: i23 
y: i24 
=== Succesors ===
=== Usages ===
j97 v83 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i23 y: i24  <|@  <|@
f <@~|@floating>@ <|@
tid v83 <|@
d <@d|@=== Debug Properties ===
condition: BT
nodeSourcePosition: at Queens.getRowColumn(int, int) [bci: 30]
op: jdk.graal.compiler.nodes.calc.IntegerBelowNode$BelowOp@5ce4369b
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i25 
y: i155 
=== Succesors ===
=== Usages ===
v130 
=== Predecessor ===
- >@ <|@
instruction <@|<||@jdk.graal.compiler.nodes.calc.IntegerBelowNode>@ x: i25 y: i155  <|@  <|@
f <@*|@fixed>@ <|@
tid v130 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at Queens.getRowColumn(int, int) [bci: 30]
profileData: INJECTED designatedSuccessorProbability: 1.0
stamp: void
=== Inputs ===
condition: v83 
=== Succesors ===
trueSuccessor: v127 
falseSuccessor: v129 
=== Usages ===
=== Predecessor ===
i155 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v83 #trueSuccessor: v127 #falseSuccessor: v129  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v7|DWORD[_] = MOV input: [v0|QWORD[.] + 20] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v8|DWORD = SUB (x: v2|DWORD, ~y: v1|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v9|DWORD = LEA address: [v8|DWORD + 7] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@Queens.getRowColumn(int, int) [bci: 0]
locals: v0|QWORD[.] v1|DWORD v2|DWORD 
>@ <|@ instruction CMPBRANCH (x: v9|DWORD, y: [v7|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B6 -> B7 falseDestination: B6 -> B9 size: DWORD state [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B8" 
    xhandlers
    flags 
    probability 4598615024196386816
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v127 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at Queens.getRowColumn(int, int) [bci: 30]
stamp: void
=== Inputs ===
=== Succesors ===
next: i156 
=== Usages ===
=== Predecessor ===
v130 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: i156  <|@  <|@
f <@~|@floating>@ <|@
tid j97 <|@
result v9|DWORD <|@
d <@d|@=== Debug Properties ===
inputBits: 32
nodeSourcePosition: at Queens.getRowColumn(int, int) [bci: 30]
resultBits: 64
stamp: i64 [0 - 4294967295] bits:0...0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
=== Inputs ===
value: i25 
=== Succesors ===
=== Usages ===
v165 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i25  <|@  <|@
f <@~|@floating>@ <|@
tid v165 <|@
result [v9|DWORD + v7|DWORD[_] * 8 + 16] <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S8
=== Inputs ===
base: j97 
index: a154 
=== Succesors ===
=== Usages ===
i156 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: j97 index: a154  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i156 <|@
d <@d|@=== Debug Properties ===
accessStamp: i8 [0 - 1] bits:0000000x
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Array: boolean
memoryOrder: PLAIN
nodeSourcePosition: at Queens.getRowColumn(int, int) [bci: 30]
stamp: i8 [0 - 1] bits:0000000x
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v165 
lastLocationAccess: - 
=== Succesors ===
next: v31 
=== Usages ===
i91 
=== Predecessor ===
v127 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v165 lastLocationAccess: - #next: v31  <|@  <|@
f <@~|@floating>@ <|@
tid i91 <|@
result v10|DWORD <|@
d <@d|@=== Debug Properties ===
inputBits: 8
nodeSourcePosition: at Queens.getRowColumn(int, int) [bci: 30]
resultBits: 32
stamp: i32 [0 - 1] bits:0...0x
=== Inputs ===
value: i156 
=== Succesors ===
=== Usages ===
i34 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i156  <|@  <|@
f <@*|@fixed>@ <|@
tid v31 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at Queens.getRowColumn(int, int) [bci: 39]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v32 
=== Predecessor ===
i156 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v10|DWORD = MOVZXB input: [v9|DWORD + v7|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [v10|DWORD] destination: B7 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B7" "B2" "B5" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      HIR
f <@~|@floating>@ <|@
tid i34 <|@
result v11|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at Queens.getRowColumn(int, int) [bci: 39]
stamp: i32 [0 - 1] bits:0...0x
valueDescription: i32
=== Inputs ===
merge: v32 
values: i91 i7 i7 
=== Succesors ===
=== Usages ===
v36 
=== Predecessor ===
- >@ <|@
instruction <@ValuePhi|@jdk.graal.compiler.nodes.ValuePhiNode>@ merge: v32 values: i91 i7 i7  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v32 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at Queens.getRowColumn(int, int) [bci: 39]
stamp: void
=== Inputs ===
stateAfter: - 
ends: v31 v33 v37 
=== Succesors ===
next: v36 
=== Usages ===
i34 
=== Predecessor ===
- >@ <|@
instruction <@Merge|@jdk.graal.compiler.nodes.MergeNode>@ stateAfter: - ends: v31 v33 v37 #next: v36  <|@  <|@
f <@*|@fixed>@ <|@
tid v36 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at Queens.getRowColumn(int, int) [bci: 39]
stamp: void
=== Inputs ===
memoryMap: - 
result: i34 
=== Succesors ===
=== Usages ===
=== Predecessor ===
v32 >@ <|@
instruction <@Return|@jdk.graal.compiler.nodes.ReturnNode>@ memoryMap: - result: i34  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [v11|DWORD] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr   -1  <|@ instruction rax|DWORD = MOVE input: v11|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@3dbf6f45 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B12" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v129 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at Queens.getRowColumn(int, int) [bci: 30]
stamp: void
=== Inputs ===
=== Succesors ===
next: v146 
=== Usages ===
=== Predecessor ===
v130 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v146  <|@  <|@
f <@~|@floating>@ <|@
tid i147 <|@
result int[-21531|0xffffffffffffabe5] <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at Queens.getRowColumn(int, int) [bci: 5]
rawvalue: -21531
stableDimension: 0
stamp: i32 [-21531]
stampKind: i32
value: int[-21531|0xffffffffffffabe5]
=== Inputs ===
=== Succesors ===
=== Usages ===
i135 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@*|@fixed>@ <|@
tid v146 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at Queens.getRowColumn(int, int) [bci: 5]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v131 
=== Predecessor ===
v129 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-21531|0xffffffffffffabe5]] destination: B9 -> B12 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B12" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v121 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at Queens.getRowColumn(int, int) [bci: 16]
stamp: void
=== Inputs ===
=== Succesors ===
next: v142 
=== Usages ===
=== Predecessor ===
v122 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v142  <|@  <|@
f <@~|@floating>@ <|@
tid i143 <|@
result int[-16923|0xffffffffffffbde5] <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at Queens.getRowColumn(int, int) [bci: 5]
rawvalue: -16923
stableDimension: 0
stamp: i32 [-16923]
stampKind: i32
value: int[-16923|0xffffffffffffbde5]
=== Inputs ===
=== Succesors ===
=== Usages ===
i135 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@*|@fixed>@ <|@
tid v142 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at Queens.getRowColumn(int, int) [bci: 5]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v131 
=== Predecessor ===
v121 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-16923|0xffffffffffffbde5]] destination: B10 -> B12 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B12" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v113 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at Queens.getRowColumn(int, int) [bci: 5]
stamp: void
=== Inputs ===
=== Succesors ===
next: v138 
=== Usages ===
=== Predecessor ===
v114 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v138  <|@  <|@
f <@~|@floating>@ <|@
tid i139 <|@
result int[-12571|0xffffffffffffcee5] <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at Queens.getRowColumn(int, int) [bci: 5]
rawvalue: -12571
stableDimension: 0
stamp: i32 [-12571]
stampKind: i32
value: int[-12571|0xffffffffffffcee5]
=== Inputs ===
=== Succesors ===
=== Usages ===
i135 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@*|@fixed>@ <|@
tid v138 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at Queens.getRowColumn(int, int) [bci: 5]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v131 
=== Predecessor ===
v113 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-12571|0xffffffffffffcee5]] destination: B11 -> B12 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B11" "B10" "B9" 
    successors 
    xhandlers
    flags 
    probability 2362138004555825152
    begin_IR
      HIR
f <@~|@floating>@ <|@
tid i135 <|@
result v12|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at Queens.getRowColumn(int, int) [bci: 5]
stamp: i32 [-21531 - -12571] bits:1...1xxx1xxx11100101
valueDescription: i32
=== Inputs ===
merge: v131 
values: i139 i143 i147 
=== Succesors ===
=== Usages ===
v137 
=== Predecessor ===
- >@ <|@
instruction <@ValuePhi|@jdk.graal.compiler.nodes.ValuePhiNode>@ merge: v131 values: i139 i143 i147  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v131 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at Queens.getRowColumn(int, int) [bci: 5]
stamp: void
=== Inputs ===
stateAfter: - 
ends: v138 v142 v146 
=== Succesors ===
next: v137 
=== Usages ===
i135 
=== Predecessor ===
- >@ <|@
instruction <@Merge|@jdk.graal.compiler.nodes.MergeNode>@ stateAfter: - ends: v138 v142 v146 #next: v137  <|@  <|@
f <@~|@floating>@ <|@
tid j134 <|@
result long[0|0x0] <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at Queens.getRowColumn(int, int) [bci: 5]
rawvalue: 0
stableDimension: 0
stamp: i64 [0]
stampKind: i64
value: long[0|0x0]
=== Inputs ===
=== Succesors ===
=== Usages ===
v137 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@*|@fixed>@ <|@
tid v137 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at Queens.getRowColumn(int, int) [bci: 5]
stamp: void
=== Inputs ===
stateBefore: ?4 
actionAndReason: i135 
speculation: j134 
=== Succesors ===
=== Usages ===
=== Predecessor ===
v131 >@ <|@
instruction <@DynamicDeoptimize|@jdk.graal.compiler.nodes.DynamicDeoptimizeNode>@ stateBefore: ?4 actionAndReason: i135 speculation: j134  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [v12|DWORD] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr   -1  <|@ instruction MOV (x: [r15|QWORD + 1156], y: v12|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@Queens.getRowColumn(int, int) [bci: 0]
locals: v0|QWORD[.] v1|DWORD v2|DWORD 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
end_cfg
begin_cfg
  name "After ConstantLoadOptimization"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B11" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [rsi|QWORD[.], rdx|DWORD, rcx|DWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@6bd31264 slotKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v0|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v1|DWORD = MOVE input: rdx|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v2|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v3|DWORD[_] = MOV input: [v0|QWORD[.] + 16] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@Queens.getRowColumn(int, int) [bci: 0]
locals: v0|QWORD[.] v1|DWORD v2|DWORD 
>@ <|@ instruction CMPBRANCH (x: v1|DWORD, y: [v3|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B0 -> B1 falseDestination: B0 -> B11 size: DWORD state [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B3" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v4|QWORD = MOV value: v1|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPCONSTBRANCH x: [v4|QWORD + v3|DWORD[_] * 8 + 16] trueDestinationProbability: 0.615625 condition: = trueDestination: B1 -> B2 falseDestination: B1 -> B3 y: 0 size: BYTE inlinedY: null <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B8" 
    xhandlers
    flags 
    probability 4603720276586476339
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[0|0x0]] destination: B2 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B4" "B10" 
    xhandlers
    flags 
    probability 4600595904344988058
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v5|DWORD[_] = MOV input: [v0|QWORD[.] + 12] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v6|DWORD = ADD (x: v2|DWORD, y: v1|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@Queens.getRowColumn(int, int) [bci: 0]
locals: v0|QWORD[.] v1|DWORD v2|DWORD 
>@ <|@ instruction CMPBRANCH (x: v6|DWORD, y: [v5|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B3 -> B4 falseDestination: B3 -> B10 size: DWORD state [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B5" "B6" 
    xhandlers
    flags 
    probability 4600595904344988058
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction CMPCONSTBRANCH x: [v6|DWORD + v5|DWORD[_] * 8 + 16] trueDestinationProbability: 0.2860772357723577 condition: = trueDestination: B4 -> B5 falseDestination: B4 -> B6 y: 0 size: BYTE inlinedY: null <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B4" 
    successors "B7" "B9" 
    xhandlers
    flags 
    probability 4598615024196386816
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v7|DWORD[_] = MOV input: [v0|QWORD[.] + 20] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v8|DWORD = SUB (x: v2|DWORD, ~y: v1|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v9|DWORD = LEA address: [v8|DWORD + 7] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@Queens.getRowColumn(int, int) [bci: 0]
locals: v0|QWORD[.] v1|DWORD v2|DWORD 
>@ <|@ instruction CMPBRANCH (x: v9|DWORD, y: [v7|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B6 -> B7 falseDestination: B6 -> B9 size: DWORD state [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B8" 
    xhandlers
    flags 
    probability 4598615024196386816
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v10|DWORD = MOVZXB input: [v9|DWORD + v7|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [v10|DWORD] destination: B7 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B4" 
    successors "B8" 
    xhandlers
    flags 
    probability 4592587941257569895
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[0|0x0]] destination: B5 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B7" "B2" "B5" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [v11|DWORD] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr   -1  <|@ instruction rax|DWORD = MOVE input: v11|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@3dbf6f45 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B12" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-12571|0xffffffffffffcee5]] destination: B11 -> B12 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B12" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-16923|0xffffffffffffbde5]] destination: B10 -> B12 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B12" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-21531|0xffffffffffffabe5]] destination: B9 -> B12 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B11" "B10" "B9" 
    successors 
    xhandlers
    flags 
    probability 2362138004555825152
    begin_IR
      LIR
      nr   -1  <|@ instruction [v12|DWORD] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr   -1  <|@ instruction MOV (x: [r15|QWORD + 1156], y: v12|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@Queens.getRowColumn(int, int) [bci: 0]
locals: v0|QWORD[.] v1|DWORD v2|DWORD 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: aload_0       
     1: getfield      #3          // freeRows:boolean[]
     4: iload_1       
     5: baload        
     6: ifeq          38
     9: aload_0       
    10: getfield      #5          // freeMaxs:boolean[]
    13: iload_2       
    14: iload_1       
    15: iadd          
    16: baload        
    17: ifeq          38
    20: aload_0       
    21: getfield      #6          // freeMins:boolean[]
    24: iload_2       
    25: iload_1       
    26: isub          
    27: bipush        7
    29: iadd          
    30: baload        
    31: ifeq          38
    34: iconst_1      
    35: goto          39
    38: iconst_0      
    39: ireturn       
   <|@
end_bytecodes
begin_cfg
  name "After SaveCalleeSaveRegisters"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B11" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [rsi|QWORD[.], rdx|DWORD, rcx|DWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@6bd31264 slotKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v0|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v1|DWORD = MOVE input: rdx|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v2|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v3|DWORD[_] = MOV input: [v0|QWORD[.] + 16] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@Queens.getRowColumn(int, int) [bci: 0]
locals: v0|QWORD[.] v1|DWORD v2|DWORD 
>@ <|@ instruction CMPBRANCH (x: v1|DWORD, y: [v3|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B0 -> B1 falseDestination: B0 -> B11 size: DWORD state [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B3" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v4|QWORD = MOV value: v1|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPCONSTBRANCH x: [v4|QWORD + v3|DWORD[_] * 8 + 16] trueDestinationProbability: 0.615625 condition: = trueDestination: B1 -> B2 falseDestination: B1 -> B3 y: 0 size: BYTE inlinedY: null <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B8" 
    xhandlers
    flags 
    probability 4603720276586476339
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[0|0x0]] destination: B2 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B4" "B10" 
    xhandlers
    flags 
    probability 4600595904344988058
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v5|DWORD[_] = MOV input: [v0|QWORD[.] + 12] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v6|DWORD = ADD (x: v2|DWORD, y: v1|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@Queens.getRowColumn(int, int) [bci: 0]
locals: v0|QWORD[.] v1|DWORD v2|DWORD 
>@ <|@ instruction CMPBRANCH (x: v6|DWORD, y: [v5|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B3 -> B4 falseDestination: B3 -> B10 size: DWORD state [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B5" "B6" 
    xhandlers
    flags 
    probability 4600595904344988058
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction CMPCONSTBRANCH x: [v6|DWORD + v5|DWORD[_] * 8 + 16] trueDestinationProbability: 0.2860772357723577 condition: = trueDestination: B4 -> B5 falseDestination: B4 -> B6 y: 0 size: BYTE inlinedY: null <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B4" 
    successors "B7" "B9" 
    xhandlers
    flags 
    probability 4598615024196386816
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v7|DWORD[_] = MOV input: [v0|QWORD[.] + 20] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v8|DWORD = SUB (x: v2|DWORD, ~y: v1|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v9|DWORD = LEA address: [v8|DWORD + 7] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@Queens.getRowColumn(int, int) [bci: 0]
locals: v0|QWORD[.] v1|DWORD v2|DWORD 
>@ <|@ instruction CMPBRANCH (x: v9|DWORD, y: [v7|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B6 -> B7 falseDestination: B6 -> B9 size: DWORD state [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B8" 
    xhandlers
    flags 
    probability 4598615024196386816
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v10|DWORD = MOVZXB input: [v9|DWORD + v7|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [v10|DWORD] destination: B7 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B4" 
    successors "B8" 
    xhandlers
    flags 
    probability 4592587941257569895
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[0|0x0]] destination: B5 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B7" "B2" "B5" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [v11|DWORD] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr   -1  <|@ instruction rax|DWORD = MOVE input: v11|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@3dbf6f45 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B12" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-12571|0xffffffffffffcee5]] destination: B11 -> B12 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B12" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-16923|0xffffffffffffbde5]] destination: B10 -> B12 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B12" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-21531|0xffffffffffffabe5]] destination: B9 -> B12 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B11" "B10" "B9" 
    successors 
    xhandlers
    flags 
    probability 2362138004555825152
    begin_IR
      LIR
      nr   -1  <|@ instruction [v12|DWORD] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr   -1  <|@ instruction MOV (x: [r15|QWORD + 1156], y: v12|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@Queens.getRowColumn(int, int) [bci: 0]
locals: v0|QWORD[.] v1|DWORD v2|DWORD 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: aload_0       
     1: getfield      #3          // freeRows:boolean[]
     4: iload_1       
     5: baload        
     6: ifeq          38
     9: aload_0       
    10: getfield      #5          // freeMaxs:boolean[]
    13: iload_2       
    14: iload_1       
    15: iadd          
    16: baload        
    17: ifeq          38
    20: aload_0       
    21: getfield      #6          // freeMins:boolean[]
    24: iload_2       
    25: iload_1       
    26: isub          
    27: bipush        7
    29: iadd          
    30: baload        
    31: ifeq          38
    34: iconst_1      
    35: goto          39
    38: iconst_0      
    39: ireturn       
   <|@
end_bytecodes
begin_cfg
  name "After PreAllocationOptimizationStage"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B11" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [rsi|QWORD[.], rdx|DWORD, rcx|DWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@6bd31264 slotKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v0|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v1|DWORD = MOVE input: rdx|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v2|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v3|DWORD[_] = MOV input: [v0|QWORD[.] + 16] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@Queens.getRowColumn(int, int) [bci: 0]
locals: v0|QWORD[.] v1|DWORD v2|DWORD 
>@ <|@ instruction CMPBRANCH (x: v1|DWORD, y: [v3|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B0 -> B1 falseDestination: B0 -> B11 size: DWORD state [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B3" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v4|QWORD = MOV value: v1|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPCONSTBRANCH x: [v4|QWORD + v3|DWORD[_] * 8 + 16] trueDestinationProbability: 0.615625 condition: = trueDestination: B1 -> B2 falseDestination: B1 -> B3 y: 0 size: BYTE inlinedY: null <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B8" 
    xhandlers
    flags 
    probability 4603720276586476339
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[0|0x0]] destination: B2 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B4" "B10" 
    xhandlers
    flags 
    probability 4600595904344988058
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v5|DWORD[_] = MOV input: [v0|QWORD[.] + 12] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v6|DWORD = ADD (x: v2|DWORD, y: v1|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@Queens.getRowColumn(int, int) [bci: 0]
locals: v0|QWORD[.] v1|DWORD v2|DWORD 
>@ <|@ instruction CMPBRANCH (x: v6|DWORD, y: [v5|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B3 -> B4 falseDestination: B3 -> B10 size: DWORD state [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B5" "B6" 
    xhandlers
    flags 
    probability 4600595904344988058
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction CMPCONSTBRANCH x: [v6|DWORD + v5|DWORD[_] * 8 + 16] trueDestinationProbability: 0.2860772357723577 condition: = trueDestination: B4 -> B5 falseDestination: B4 -> B6 y: 0 size: BYTE inlinedY: null <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B4" 
    successors "B7" "B9" 
    xhandlers
    flags 
    probability 4598615024196386816
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v7|DWORD[_] = MOV input: [v0|QWORD[.] + 20] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v8|DWORD = SUB (x: v2|DWORD, ~y: v1|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v9|DWORD = LEA address: [v8|DWORD + 7] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@Queens.getRowColumn(int, int) [bci: 0]
locals: v0|QWORD[.] v1|DWORD v2|DWORD 
>@ <|@ instruction CMPBRANCH (x: v9|DWORD, y: [v7|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B6 -> B7 falseDestination: B6 -> B9 size: DWORD state [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B8" 
    xhandlers
    flags 
    probability 4598615024196386816
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v10|DWORD = MOVZXB input: [v9|DWORD + v7|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [v10|DWORD] destination: B7 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B4" 
    successors "B8" 
    xhandlers
    flags 
    probability 4592587941257569895
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[0|0x0]] destination: B5 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B7" "B2" "B5" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [v11|DWORD] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr   -1  <|@ instruction rax|DWORD = MOVE input: v11|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@3dbf6f45 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B12" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-12571|0xffffffffffffcee5]] destination: B11 -> B12 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B12" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-16923|0xffffffffffffbde5]] destination: B10 -> B12 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B12" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-21531|0xffffffffffffabe5]] destination: B9 -> B12 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B11" "B10" "B9" 
    successors 
    xhandlers
    flags 
    probability 2362138004555825152
    begin_IR
      LIR
      nr   -1  <|@ instruction [v12|DWORD] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr   -1  <|@ instruction MOV (x: [r15|QWORD + 1156], y: v12|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@Queens.getRowColumn(int, int) [bci: 0]
locals: v0|QWORD[.] v1|DWORD v2|DWORD 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: aload_0       
     1: getfield      #3          // freeRows:boolean[]
     4: iload_1       
     5: baload        
     6: ifeq          38
     9: aload_0       
    10: getfield      #5          // freeMaxs:boolean[]
    13: iload_2       
    14: iload_1       
    15: iadd          
    16: baload        
    17: ifeq          38
    20: aload_0       
    21: getfield      #6          // freeMins:boolean[]
    24: iload_2       
    25: iload_1       
    26: isub          
    27: bipush        7
    29: iadd          
    30: baload        
    31: ifeq          38
    34: iconst_1      
    35: goto          39
    38: iconst_0      
    39: ireturn       
   <|@
end_bytecodes
begin_cfg
  name "After MarkBasePointers"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B11" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [rsi|QWORD[.], rdx|DWORD, rcx|DWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@6bd31264 slotKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v0|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v1|DWORD = MOVE input: rdx|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v2|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v3|DWORD[_] = MOV input: [v0|QWORD[.] + 16] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@live-base-pointers: []
Queens.getRowColumn(int, int) [bci: 0]
locals: v0|QWORD[.] v1|DWORD v2|DWORD 
>@ <|@ instruction CMPBRANCH (x: v1|DWORD, y: [v3|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B0 -> B1 falseDestination: B0 -> B11 size: DWORD state [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B3" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v4|QWORD = MOV value: v1|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPCONSTBRANCH x: [v4|QWORD + v3|DWORD[_] * 8 + 16] trueDestinationProbability: 0.615625 condition: = trueDestination: B1 -> B2 falseDestination: B1 -> B3 y: 0 size: BYTE inlinedY: null <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B8" 
    xhandlers
    flags 
    probability 4603720276586476339
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[0|0x0]] destination: B2 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B4" "B10" 
    xhandlers
    flags 
    probability 4600595904344988058
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v5|DWORD[_] = MOV input: [v0|QWORD[.] + 12] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v6|DWORD = ADD (x: v2|DWORD, y: v1|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@live-base-pointers: []
Queens.getRowColumn(int, int) [bci: 0]
locals: v0|QWORD[.] v1|DWORD v2|DWORD 
>@ <|@ instruction CMPBRANCH (x: v6|DWORD, y: [v5|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B3 -> B4 falseDestination: B3 -> B10 size: DWORD state [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B5" "B6" 
    xhandlers
    flags 
    probability 4600595904344988058
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction CMPCONSTBRANCH x: [v6|DWORD + v5|DWORD[_] * 8 + 16] trueDestinationProbability: 0.2860772357723577 condition: = trueDestination: B4 -> B5 falseDestination: B4 -> B6 y: 0 size: BYTE inlinedY: null <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B4" 
    successors "B7" "B9" 
    xhandlers
    flags 
    probability 4598615024196386816
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v7|DWORD[_] = MOV input: [v0|QWORD[.] + 20] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v8|DWORD = SUB (x: v2|DWORD, ~y: v1|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v9|DWORD = LEA address: [v8|DWORD + 7] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@live-base-pointers: []
Queens.getRowColumn(int, int) [bci: 0]
locals: v0|QWORD[.] v1|DWORD v2|DWORD 
>@ <|@ instruction CMPBRANCH (x: v9|DWORD, y: [v7|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B6 -> B7 falseDestination: B6 -> B9 size: DWORD state [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B8" 
    xhandlers
    flags 
    probability 4598615024196386816
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v10|DWORD = MOVZXB input: [v9|DWORD + v7|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [v10|DWORD] destination: B7 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B4" 
    successors "B8" 
    xhandlers
    flags 
    probability 4592587941257569895
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[0|0x0]] destination: B5 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B7" "B2" "B5" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [v11|DWORD] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr   -1  <|@ instruction rax|DWORD = MOVE input: v11|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@3dbf6f45 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B12" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-12571|0xffffffffffffcee5]] destination: B11 -> B12 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B12" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-16923|0xffffffffffffbde5]] destination: B10 -> B12 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B12" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-21531|0xffffffffffffabe5]] destination: B9 -> B12 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B11" "B10" "B9" 
    successors 
    xhandlers
    flags 
    probability 2362138004555825152
    begin_IR
      LIR
      nr   -1  <|@ instruction [v12|DWORD] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr   -1  <|@ instruction MOV (x: [r15|QWORD + 1156], y: v12|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@live-base-pointers: []
Queens.getRowColumn(int, int) [bci: 0]
locals: v0|QWORD[.] v1|DWORD v2|DWORD 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: aload_0       
     1: getfield      #3          // freeRows:boolean[]
     4: iload_1       
     5: baload        
     6: ifeq          38
     9: aload_0       
    10: getfield      #5          // freeMaxs:boolean[]
    13: iload_2       
    14: iload_1       
    15: iadd          
    16: baload        
    17: ifeq          38
    20: aload_0       
    21: getfield      #6          // freeMins:boolean[]
    24: iload_2       
    25: iload_1       
    26: isub          
    27: bipush        7
    29: iadd          
    30: baload        
    31: ifeq          38
    34: iconst_1      
    35: goto          39
    38: iconst_0      
    39: ireturn       
   <|@
end_bytecodes
begin_cfg
  name "Before register allocation"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B11" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|QWORD[.], rdx|DWORD, rcx|DWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr    4  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@6bd31264 slotKind: QWORD <|@ <|@
      nr    6  <|@ instruction v0|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr    8  <|@ instruction v1|DWORD = MOVE input: rdx|DWORD moveKind: DWORD <|@ <|@
      nr   10  <|@ instruction v2|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr   12  <|@ instruction v3|DWORD[_] = MOV input: [v0|QWORD[.] + 16] size: DWORD <|@ <|@
      nr   14  <|@ st <@st|@live-base-pointers: []
Queens.getRowColumn(int, int) [bci: 0]
locals: v0|QWORD[.] v1|DWORD v2|DWORD 
>@ <|@ instruction CMPBRANCH (x: v1|DWORD, y: [v3|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B0 -> B1 falseDestination: B0 -> B11 size: DWORD state [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B3" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   16  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   18  <|@ instruction v4|QWORD = MOV value: v1|DWORD size: DWORD <|@ <|@
      nr   20  <|@ instruction CMPCONSTBRANCH x: [v4|QWORD + v3|DWORD[_] * 8 + 16] trueDestinationProbability: 0.615625 condition: = trueDestination: B1 -> B2 falseDestination: B1 -> B3 y: 0 size: BYTE inlinedY: null <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B8" 
    xhandlers
    flags 
    probability 4603720276586476339
    begin_IR
      LIR
      nr   22  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   24  <|@ instruction JUMP ~outgoingValues: [int[0|0x0]] destination: B2 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B4" "B10" 
    xhandlers
    flags 
    probability 4600595904344988058
    begin_IR
      LIR
      nr   26  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   28  <|@ instruction v5|DWORD[_] = MOV input: [v0|QWORD[.] + 12] size: DWORD <|@ <|@
      nr   30  <|@ instruction v6|DWORD = ADD (x: v2|DWORD, y: v1|DWORD) size: DWORD <|@ <|@
      nr   32  <|@ st <@st|@live-base-pointers: []
Queens.getRowColumn(int, int) [bci: 0]
locals: v0|QWORD[.] v1|DWORD v2|DWORD 
>@ <|@ instruction CMPBRANCH (x: v6|DWORD, y: [v5|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B3 -> B4 falseDestination: B3 -> B10 size: DWORD state [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B5" "B6" 
    xhandlers
    flags 
    probability 4600595904344988058
    begin_IR
      LIR
      nr   34  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   36  <|@ instruction CMPCONSTBRANCH x: [v6|DWORD + v5|DWORD[_] * 8 + 16] trueDestinationProbability: 0.2860772357723577 condition: = trueDestination: B4 -> B5 falseDestination: B4 -> B6 y: 0 size: BYTE inlinedY: null <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B4" 
    successors "B7" "B9" 
    xhandlers
    flags 
    probability 4598615024196386816
    begin_IR
      LIR
      nr   38  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   40  <|@ instruction v7|DWORD[_] = MOV input: [v0|QWORD[.] + 20] size: DWORD <|@ <|@
      nr   42  <|@ instruction v8|DWORD = SUB (x: v2|DWORD, ~y: v1|DWORD) size: DWORD <|@ <|@
      nr   44  <|@ instruction v9|DWORD = LEA address: [v8|DWORD + 7] size: DWORD <|@ <|@
      nr   46  <|@ st <@st|@live-base-pointers: []
Queens.getRowColumn(int, int) [bci: 0]
locals: v0|QWORD[.] v1|DWORD v2|DWORD 
>@ <|@ instruction CMPBRANCH (x: v9|DWORD, y: [v7|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B6 -> B7 falseDestination: B6 -> B9 size: DWORD state [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B8" 
    xhandlers
    flags 
    probability 4598615024196386816
    begin_IR
      LIR
      nr   48  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   50  <|@ instruction v10|DWORD = MOVZXB input: [v9|DWORD + v7|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr   52  <|@ instruction JUMP ~outgoingValues: [v10|DWORD] destination: B7 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B4" 
    successors "B8" 
    xhandlers
    flags 
    probability 4592587941257569895
    begin_IR
      LIR
      nr   54  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   56  <|@ instruction JUMP ~outgoingValues: [int[0|0x0]] destination: B5 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B7" "B2" "B5" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   58  <|@ instruction [v11|DWORD] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr   60  <|@ instruction rax|DWORD = MOVE input: v11|DWORD moveKind: DWORD <|@ <|@
      nr   62  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@3dbf6f45 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B12" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   64  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   66  <|@ instruction JUMP ~outgoingValues: [int[-12571|0xffffffffffffcee5]] destination: B11 -> B12 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B12" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   68  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   70  <|@ instruction JUMP ~outgoingValues: [int[-16923|0xffffffffffffbde5]] destination: B10 -> B12 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B12" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   72  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   74  <|@ instruction JUMP ~outgoingValues: [int[-21531|0xffffffffffffabe5]] destination: B9 -> B12 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B11" "B10" "B9" 
    successors 
    xhandlers
    flags 
    probability 2362138004555825152
    begin_IR
      LIR
      nr   76  <|@ instruction [v12|DWORD] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr   78  <|@ instruction MOV (x: [r15|QWORD + 1156], y: v12|DWORD) size: DWORD <|@ <|@
      nr   80  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr   82  <|@ st <@st|@live-base-pointers: []
Queens.getRowColumn(int, int) [bci: 0]
locals: v0|QWORD[.] v1|DWORD v2|DWORD 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: aload_0       
     1: getfield      #3          // freeRows:boolean[]
     4: iload_1       
     5: baload        
     6: ifeq          38
     9: aload_0       
    10: getfield      #5          // freeMaxs:boolean[]
    13: iload_2       
    14: iload_1       
    15: iadd          
    16: baload        
    17: ifeq          38
    20: aload_0       
    21: getfield      #6          // freeMins:boolean[]
    24: iload_2       
    25: iload_1       
    26: isub          
    27: bipush        7
    29: iadd          
    30: baload        
    31: ifeq          38
    34: iconst_1      
    35: goto          39
    38: iconst_0      
    39: ireturn       
   <|@
end_bytecodes
begin_cfg
  name "After SSALinearScanLifetimeAnalysis"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B11" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|QWORD[.], rdx|DWORD, rcx|DWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr    4  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@6bd31264 slotKind: QWORD <|@ <|@
      nr    6  <|@ instruction v0|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr    8  <|@ instruction v1|DWORD = MOVE input: rdx|DWORD moveKind: DWORD <|@ <|@
      nr   10  <|@ instruction v2|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr   12  <|@ instruction v3|DWORD[_] = MOV input: [v0|QWORD[.] + 16] size: DWORD <|@ <|@
      nr   14  <|@ st <@st|@live-base-pointers: []
Queens.getRowColumn(int, int) [bci: 0]
locals: v0|QWORD[.] v1|DWORD v2|DWORD 
>@ <|@ instruction CMPBRANCH (x: v1|DWORD, y: [v3|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B0 -> B1 falseDestination: B0 -> B11 size: DWORD state [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B3" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   16  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   18  <|@ instruction v4|QWORD = MOV value: v1|DWORD size: DWORD <|@ <|@
      nr   20  <|@ instruction CMPCONSTBRANCH x: [v4|QWORD + v3|DWORD[_] * 8 + 16] trueDestinationProbability: 0.615625 condition: = trueDestination: B1 -> B2 falseDestination: B1 -> B3 y: 0 size: BYTE inlinedY: null <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B8" 
    xhandlers
    flags 
    probability 4603720276586476339
    begin_IR
      LIR
      nr   22  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   24  <|@ instruction JUMP ~outgoingValues: [int[0|0x0]] destination: B2 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B4" "B10" 
    xhandlers
    flags 
    probability 4600595904344988058
    begin_IR
      LIR
      nr   26  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   28  <|@ instruction v5|DWORD[_] = MOV input: [v0|QWORD[.] + 12] size: DWORD <|@ <|@
      nr   30  <|@ instruction v6|DWORD = ADD (x: v2|DWORD, y: v1|DWORD) size: DWORD <|@ <|@
      nr   32  <|@ st <@st|@live-base-pointers: []
Queens.getRowColumn(int, int) [bci: 0]
locals: v0|QWORD[.] v1|DWORD v2|DWORD 
>@ <|@ instruction CMPBRANCH (x: v6|DWORD, y: [v5|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B3 -> B4 falseDestination: B3 -> B10 size: DWORD state [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B5" "B6" 
    xhandlers
    flags 
    probability 4600595904344988058
    begin_IR
      LIR
      nr   34  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   36  <|@ instruction CMPCONSTBRANCH x: [v6|DWORD + v5|DWORD[_] * 8 + 16] trueDestinationProbability: 0.2860772357723577 condition: = trueDestination: B4 -> B5 falseDestination: B4 -> B6 y: 0 size: BYTE inlinedY: null <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B4" 
    successors "B7" "B9" 
    xhandlers
    flags 
    probability 4598615024196386816
    begin_IR
      LIR
      nr   38  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   40  <|@ instruction v7|DWORD[_] = MOV input: [v0|QWORD[.] + 20] size: DWORD <|@ <|@
      nr   42  <|@ instruction v8|DWORD = SUB (x: v2|DWORD, ~y: v1|DWORD) size: DWORD <|@ <|@
      nr   44  <|@ instruction v9|DWORD = LEA address: [v8|DWORD + 7] size: DWORD <|@ <|@
      nr   46  <|@ st <@st|@live-base-pointers: []
Queens.getRowColumn(int, int) [bci: 0]
locals: v0|QWORD[.] v1|DWORD v2|DWORD 
>@ <|@ instruction CMPBRANCH (x: v9|DWORD, y: [v7|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B6 -> B7 falseDestination: B6 -> B9 size: DWORD state [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B8" 
    xhandlers
    flags 
    probability 4598615024196386816
    begin_IR
      LIR
      nr   48  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   50  <|@ instruction v10|DWORD = MOVZXB input: [v9|DWORD + v7|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr   52  <|@ instruction JUMP ~outgoingValues: [v10|DWORD] destination: B7 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B4" 
    successors "B8" 
    xhandlers
    flags 
    probability 4592587941257569895
    begin_IR
      LIR
      nr   54  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   56  <|@ instruction JUMP ~outgoingValues: [int[0|0x0]] destination: B5 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B7" "B2" "B5" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   58  <|@ instruction [v11|DWORD] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr   60  <|@ instruction rax|DWORD = MOVE input: v11|DWORD moveKind: DWORD <|@ <|@
      nr   62  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@3dbf6f45 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B12" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   64  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   66  <|@ instruction JUMP ~outgoingValues: [int[-12571|0xffffffffffffcee5]] destination: B11 -> B12 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B12" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   68  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   70  <|@ instruction JUMP ~outgoingValues: [int[-16923|0xffffffffffffbde5]] destination: B10 -> B12 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B12" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   72  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   74  <|@ instruction JUMP ~outgoingValues: [int[-21531|0xffffffffffffabe5]] destination: B9 -> B12 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B11" "B10" "B9" 
    successors 
    xhandlers
    flags 
    probability 2362138004555825152
    begin_IR
      LIR
      nr   76  <|@ instruction [v12|DWORD] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr   78  <|@ instruction MOV (x: [r15|QWORD + 1156], y: v12|DWORD) size: DWORD <|@ <|@
      nr   80  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr   82  <|@ st <@st|@live-base-pointers: []
Queens.getRowColumn(int, int) [bci: 0]
locals: v0|QWORD[.] v1|DWORD v2|DWORD 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: aload_0       
     1: getfield      #3          // freeRows:boolean[]
     4: iload_1       
     5: baload        
     6: ifeq          38
     9: aload_0       
    10: getfield      #5          // freeMaxs:boolean[]
    13: iload_2       
    14: iload_1       
    15: iadd          
    16: baload        
    17: ifeq          38
    20: aload_0       
    21: getfield      #6          // freeMins:boolean[]
    24: iload_2       
    25: iload_1       
    26: isub          
    27: bipush        7
    29: iadd          
    30: baload        
    31: ifeq          38
    34: iconst_1      
    35: goto          39
    38: iconst_0      
    39: ireturn       
   <|@
end_bytecodes
begin_intervals
  name "Before register allocation"
  rax|d fixed "[rax|d]" rax|d v11|d [0, 1[[60, 62[ "NoSpillStore"
  rcx|d fixed "[rcx|d]" rcx|d -1 [0, 10[ "NoSpillStore"
  rdx|d fixed "[rdx|d]" rdx|d -1 [0, 8[ "NoSpillStore"
  rbp|q fixed "[rbp|q]" rbp|q -1 [0, 2[ "NoSpillStore"
  rsi|q fixed "[rsi|q]" rsi|q -1 [0, 6[ "NoSpillStore"
  v0|q QWORD "[v0|q]" v0|q rsi|q [6, 22[[26, 48[[64, 83[6 MustHaveRegister 12 MustHaveRegister 28 MustHaveRegister 40 MustHaveRegister  "NoSpillStore"
  v1|d DWORD "[v1|d]" v1|d rdx|d [8, 22[[26, 48[[64, 83[8 MustHaveRegister 14 MustHaveRegister 18 ShouldHaveRegister 30 ShouldHaveRegister 42 ShouldHaveRegister  "NoSpillStore"
  v2|d DWORD "[v2|d]" v2|d rcx|d [10, 22[[26, 48[[64, 83[10 MustHaveRegister 30 ShouldHaveRegister 42 MustHaveRegister  "NoSpillStore"
  v3|d DWORD "[v3|d]" v3|d -1 [12, 20[12 MustHaveRegister 14 MustHaveRegister 20 MustHaveRegister  "NoSpillStore"
  v4|q QWORD "[v4|q]" v4|q -1 [18, 20[18 MustHaveRegister 20 MustHaveRegister  "NoSpillStore"
  v5|d DWORD "[v5|d]" v5|d -1 [28, 36[28 MustHaveRegister 32 MustHaveRegister 36 MustHaveRegister  "NoSpillStore"
  v6|d DWORD "[v6|d]" v6|d v2|d [30, 36[30 MustHaveRegister 32 MustHaveRegister 36 MustHaveRegister  "NoSpillStore"
  v7|d DWORD "[v7|d]" v7|d -1 [40, 50[40 MustHaveRegister 46 MustHaveRegister 50 MustHaveRegister  "NoSpillStore"
  v8|d DWORD "[v8|d]" v8|d v2|d [42, 44[42 MustHaveRegister 44 MustHaveRegister  "NoSpillStore"
  v9|d DWORD "[v9|d]" v9|d -1 [44, 50[44 MustHaveRegister 46 MustHaveRegister 50 MustHaveRegister  "NoSpillStore"
  v10|d DWORD "[v10|d]" v10|d v11|d [50, 53[50 MustHaveRegister 52 ShouldHaveRegister  "NoSpillStore"
  v11|d DWORD "[v11|d]" v11|d v10|d [58, 60[60 ShouldHaveRegister  "NoSpillStore"
  v12|d DWORD "[v12|d]" v12|d -1 [76, 78[78 MustHaveRegister  "NoSpillStore"
end_intervals
begin_intervals
  name "After register allocation"
  rax|d fixed "[rax|d]" rax|d v11|d [0, 1[[60, 62[ "NoSpillStore"
  rcx|d fixed "[rcx|d]" rcx|d -1 [0, 10[ "NoSpillStore"
  rdx|d fixed "[rdx|d]" rdx|d -1 [0, 8[ "NoSpillStore"
  rbp|q fixed "[rbp|q]" rbp|q -1 [0, 2[ "NoSpillStore"
  rsi|q fixed "[rsi|q]" rsi|q -1 [0, 6[ "NoSpillStore"
  v0|q QWORD "[rsi|q]" v0|q rsi|q [6, 22[[26, 48[[64, 83[6 MustHaveRegister 12 MustHaveRegister 28 MustHaveRegister 40 MustHaveRegister  "NoSpillStore"
  v1|d DWORD "[rdx|d]" v1|d rdx|d [8, 22[[26, 48[[64, 83[8 MustHaveRegister 14 MustHaveRegister 18 ShouldHaveRegister 30 ShouldHaveRegister 42 ShouldHaveRegister  "NoSpillStore"
  v2|d DWORD "[rcx|d]" v2|d rcx|d [10, 22[[26, 48[[64, 83[10 MustHaveRegister 30 ShouldHaveRegister 42 MustHaveRegister  "NoSpillStore"
  v3|d DWORD "[rax|d]" v3|d -1 [12, 20[12 MustHaveRegister 14 MustHaveRegister 20 MustHaveRegister  "NoSpillStore"
  v4|q QWORD "[r10|q]" v4|q -1 [18, 20[18 MustHaveRegister 20 MustHaveRegister  "NoSpillStore"
  v5|d DWORD "[rax|d]" v5|d -1 [28, 36[28 MustHaveRegister 32 MustHaveRegister 36 MustHaveRegister  "NoSpillStore"
  v6|d DWORD "[r10|d]" v6|d v2|d [30, 36[30 MustHaveRegister 32 MustHaveRegister 36 MustHaveRegister  "NoSpillStore"
  v7|d DWORD "[rax|d]" v7|d -1 [40, 50[40 MustHaveRegister 46 MustHaveRegister 50 MustHaveRegister  "NoSpillStore"
  v8|d DWORD "[r10|d]" v8|d v2|d [42, 44[42 MustHaveRegister 44 MustHaveRegister  "NoSpillStore"
  v9|d DWORD "[r10|d]" v9|d -1 [44, 50[44 MustHaveRegister 46 MustHaveRegister 50 MustHaveRegister  "NoSpillStore"
  v10|d DWORD "[rax|d]" v10|d v11|d [50, 53[50 MustHaveRegister 52 ShouldHaveRegister  "NoSpillStore"
  v11|d DWORD "[rax|d]" v11|d v10|d [58, 60[60 ShouldHaveRegister  "NoSpillStore"
  v12|d DWORD "[r10|d]" v12|d -1 [76, 78[78 MustHaveRegister  "NoSpillStore"
end_intervals
begin_cfg
  name "After LinearScanRegisterAllocation"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B11" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|QWORD[.], rdx|DWORD, rcx|DWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr    4  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@6bd31264 slotKind: QWORD <|@ <|@
      nr    6  <|@ instruction v0|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr    8  <|@ instruction v1|DWORD = MOVE input: rdx|DWORD moveKind: DWORD <|@ <|@
      nr   10  <|@ instruction v2|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr   12  <|@ instruction v3|DWORD[_] = MOV input: [v0|QWORD[.] + 16] size: DWORD <|@ <|@
      nr   14  <|@ st <@st|@live-base-pointers: []
Queens.getRowColumn(int, int) [bci: 0]
locals: v0|QWORD[.] v1|DWORD v2|DWORD 
>@ <|@ instruction CMPBRANCH (x: v1|DWORD, y: [v3|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B0 -> B1 falseDestination: B0 -> B11 size: DWORD state [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B3" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   16  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   18  <|@ instruction v4|QWORD = MOV value: v1|DWORD size: DWORD <|@ <|@
      nr   20  <|@ instruction CMPCONSTBRANCH x: [v4|QWORD + v3|DWORD[_] * 8 + 16] trueDestinationProbability: 0.615625 condition: = trueDestination: B1 -> B2 falseDestination: B1 -> B3 y: 0 size: BYTE inlinedY: null <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B8" 
    xhandlers
    flags 
    probability 4603720276586476339
    begin_IR
      LIR
      nr   22  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   24  <|@ instruction JUMP ~outgoingValues: [int[0|0x0]] destination: B2 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B4" "B10" 
    xhandlers
    flags 
    probability 4600595904344988058
    begin_IR
      LIR
      nr   26  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   28  <|@ instruction v5|DWORD[_] = MOV input: [v0|QWORD[.] + 12] size: DWORD <|@ <|@
      nr   30  <|@ instruction v6|DWORD = ADD (x: v2|DWORD, y: v1|DWORD) size: DWORD <|@ <|@
      nr   32  <|@ st <@st|@live-base-pointers: []
Queens.getRowColumn(int, int) [bci: 0]
locals: v0|QWORD[.] v1|DWORD v2|DWORD 
>@ <|@ instruction CMPBRANCH (x: v6|DWORD, y: [v5|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B3 -> B4 falseDestination: B3 -> B10 size: DWORD state [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B5" "B6" 
    xhandlers
    flags 
    probability 4600595904344988058
    begin_IR
      LIR
      nr   34  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   36  <|@ instruction CMPCONSTBRANCH x: [v6|DWORD + v5|DWORD[_] * 8 + 16] trueDestinationProbability: 0.2860772357723577 condition: = trueDestination: B4 -> B5 falseDestination: B4 -> B6 y: 0 size: BYTE inlinedY: null <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B4" 
    successors "B7" "B9" 
    xhandlers
    flags 
    probability 4598615024196386816
    begin_IR
      LIR
      nr   38  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   40  <|@ instruction v7|DWORD[_] = MOV input: [v0|QWORD[.] + 20] size: DWORD <|@ <|@
      nr   42  <|@ instruction v8|DWORD = SUB (x: v2|DWORD, ~y: v1|DWORD) size: DWORD <|@ <|@
      nr   44  <|@ instruction v9|DWORD = LEA address: [v8|DWORD + 7] size: DWORD <|@ <|@
      nr   46  <|@ st <@st|@live-base-pointers: []
Queens.getRowColumn(int, int) [bci: 0]
locals: v0|QWORD[.] v1|DWORD v2|DWORD 
>@ <|@ instruction CMPBRANCH (x: v9|DWORD, y: [v7|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B6 -> B7 falseDestination: B6 -> B9 size: DWORD state [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B8" 
    xhandlers
    flags 
    probability 4598615024196386816
    begin_IR
      LIR
      nr   48  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   50  <|@ instruction v10|DWORD = MOVZXB input: [v9|DWORD + v7|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr   52  <|@ instruction JUMP ~outgoingValues: [v10|DWORD] destination: B7 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B4" 
    successors "B8" 
    xhandlers
    flags 
    probability 4592587941257569895
    begin_IR
      LIR
      nr   54  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   56  <|@ instruction JUMP ~outgoingValues: [int[0|0x0]] destination: B5 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B7" "B2" "B5" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   58  <|@ instruction [v11|DWORD] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr   60  <|@ instruction rax|DWORD = MOVE input: v11|DWORD moveKind: DWORD <|@ <|@
      nr   62  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@3dbf6f45 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B12" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   64  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   66  <|@ instruction JUMP ~outgoingValues: [int[-12571|0xffffffffffffcee5]] destination: B11 -> B12 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B12" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   68  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   70  <|@ instruction JUMP ~outgoingValues: [int[-16923|0xffffffffffffbde5]] destination: B10 -> B12 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B12" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   72  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   74  <|@ instruction JUMP ~outgoingValues: [int[-21531|0xffffffffffffabe5]] destination: B9 -> B12 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B11" "B10" "B9" 
    successors 
    xhandlers
    flags 
    probability 2362138004555825152
    begin_IR
      LIR
      nr   76  <|@ instruction [v12|DWORD] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr   78  <|@ instruction MOV (x: [r15|QWORD + 1156], y: v12|DWORD) size: DWORD <|@ <|@
      nr   80  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr   82  <|@ st <@st|@live-base-pointers: []
Queens.getRowColumn(int, int) [bci: 0]
locals: v0|QWORD[.] v1|DWORD v2|DWORD 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: aload_0       
     1: getfield      #3          // freeRows:boolean[]
     4: iload_1       
     5: baload        
     6: ifeq          38
     9: aload_0       
    10: getfield      #5          // freeMaxs:boolean[]
    13: iload_2       
    14: iload_1       
    15: iadd          
    16: baload        
    17: ifeq          38
    20: aload_0       
    21: getfield      #6          // freeMins:boolean[]
    24: iload_2       
    25: iload_1       
    26: isub          
    27: bipush        7
    29: iadd          
    30: baload        
    31: ifeq          38
    34: iconst_1      
    35: goto          39
    38: iconst_0      
    39: ireturn       
   <|@
end_bytecodes
begin_intervals
  name "After optimize spill position"
  rax|d fixed "[rax|d]" rax|d v11|d [0, 1[[60, 62[ "NoSpillStore"
  rcx|d fixed "[rcx|d]" rcx|d -1 [0, 10[ "NoSpillStore"
  rdx|d fixed "[rdx|d]" rdx|d -1 [0, 8[ "NoSpillStore"
  rbp|q fixed "[rbp|q]" rbp|q -1 [0, 2[ "NoSpillStore"
  rsi|q fixed "[rsi|q]" rsi|q -1 [0, 6[ "NoSpillStore"
  v0|q QWORD "[rsi|q]" v0|q rsi|q [6, 22[[26, 48[[64, 83[6 MustHaveRegister 12 MustHaveRegister 28 MustHaveRegister 40 MustHaveRegister  "NoSpillStore"
  v1|d DWORD "[rdx|d]" v1|d rdx|d [8, 22[[26, 48[[64, 83[8 MustHaveRegister 14 MustHaveRegister 18 ShouldHaveRegister 30 ShouldHaveRegister 42 ShouldHaveRegister  "NoSpillStore"
  v2|d DWORD "[rcx|d]" v2|d rcx|d [10, 22[[26, 48[[64, 83[10 MustHaveRegister 30 ShouldHaveRegister 42 MustHaveRegister  "NoSpillStore"
  v3|d DWORD "[rax|d]" v3|d -1 [12, 20[12 MustHaveRegister 14 MustHaveRegister 20 MustHaveRegister  "NoSpillStore"
  v4|q QWORD "[r10|q]" v4|q -1 [18, 20[18 MustHaveRegister 20 MustHaveRegister  "NoSpillStore"
  v5|d DWORD "[rax|d]" v5|d -1 [28, 36[28 MustHaveRegister 32 MustHaveRegister 36 MustHaveRegister  "NoSpillStore"
  v6|d DWORD "[r10|d]" v6|d v2|d [30, 36[30 MustHaveRegister 32 MustHaveRegister 36 MustHaveRegister  "NoSpillStore"
  v7|d DWORD "[rax|d]" v7|d -1 [40, 50[40 MustHaveRegister 46 MustHaveRegister 50 MustHaveRegister  "NoSpillStore"
  v8|d DWORD "[r10|d]" v8|d v2|d [42, 44[42 MustHaveRegister 44 MustHaveRegister  "NoSpillStore"
  v9|d DWORD "[r10|d]" v9|d -1 [44, 50[44 MustHaveRegister 46 MustHaveRegister 50 MustHaveRegister  "NoSpillStore"
  v10|d DWORD "[rax|d]" v10|d v11|d [50, 53[50 MustHaveRegister 52 ShouldHaveRegister  "NoSpillStore"
  v11|d DWORD "[rax|d]" v11|d v10|d [58, 60[60 ShouldHaveRegister  "NoSpillStore"
  v12|d DWORD "[r10|d]" v12|d -1 [76, 78[78 MustHaveRegister  "NoSpillStore"
end_intervals
begin_cfg
  name "After LinearScanOptimizeSpillPosition"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B11" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|QWORD[.], rdx|DWORD, rcx|DWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr    4  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@6bd31264 slotKind: QWORD <|@ <|@
      nr    6  <|@ instruction v0|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr    8  <|@ instruction v1|DWORD = MOVE input: rdx|DWORD moveKind: DWORD <|@ <|@
      nr   10  <|@ instruction v2|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr   12  <|@ instruction v3|DWORD[_] = MOV input: [v0|QWORD[.] + 16] size: DWORD <|@ <|@
      nr   14  <|@ st <@st|@live-base-pointers: []
Queens.getRowColumn(int, int) [bci: 0]
locals: v0|QWORD[.] v1|DWORD v2|DWORD 
>@ <|@ instruction CMPBRANCH (x: v1|DWORD, y: [v3|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B0 -> B1 falseDestination: B0 -> B11 size: DWORD state [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B3" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   16  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   18  <|@ instruction v4|QWORD = MOV value: v1|DWORD size: DWORD <|@ <|@
      nr   20  <|@ instruction CMPCONSTBRANCH x: [v4|QWORD + v3|DWORD[_] * 8 + 16] trueDestinationProbability: 0.615625 condition: = trueDestination: B1 -> B2 falseDestination: B1 -> B3 y: 0 size: BYTE inlinedY: null <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B8" 
    xhandlers
    flags 
    probability 4603720276586476339
    begin_IR
      LIR
      nr   22  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   24  <|@ instruction JUMP ~outgoingValues: [int[0|0x0]] destination: B2 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B4" "B10" 
    xhandlers
    flags 
    probability 4600595904344988058
    begin_IR
      LIR
      nr   26  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   28  <|@ instruction v5|DWORD[_] = MOV input: [v0|QWORD[.] + 12] size: DWORD <|@ <|@
      nr   30  <|@ instruction v6|DWORD = ADD (x: v2|DWORD, y: v1|DWORD) size: DWORD <|@ <|@
      nr   32  <|@ st <@st|@live-base-pointers: []
Queens.getRowColumn(int, int) [bci: 0]
locals: v0|QWORD[.] v1|DWORD v2|DWORD 
>@ <|@ instruction CMPBRANCH (x: v6|DWORD, y: [v5|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B3 -> B4 falseDestination: B3 -> B10 size: DWORD state [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B5" "B6" 
    xhandlers
    flags 
    probability 4600595904344988058
    begin_IR
      LIR
      nr   34  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   36  <|@ instruction CMPCONSTBRANCH x: [v6|DWORD + v5|DWORD[_] * 8 + 16] trueDestinationProbability: 0.2860772357723577 condition: = trueDestination: B4 -> B5 falseDestination: B4 -> B6 y: 0 size: BYTE inlinedY: null <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B4" 
    successors "B7" "B9" 
    xhandlers
    flags 
    probability 4598615024196386816
    begin_IR
      LIR
      nr   38  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   40  <|@ instruction v7|DWORD[_] = MOV input: [v0|QWORD[.] + 20] size: DWORD <|@ <|@
      nr   42  <|@ instruction v8|DWORD = SUB (x: v2|DWORD, ~y: v1|DWORD) size: DWORD <|@ <|@
      nr   44  <|@ instruction v9|DWORD = LEA address: [v8|DWORD + 7] size: DWORD <|@ <|@
      nr   46  <|@ st <@st|@live-base-pointers: []
Queens.getRowColumn(int, int) [bci: 0]
locals: v0|QWORD[.] v1|DWORD v2|DWORD 
>@ <|@ instruction CMPBRANCH (x: v9|DWORD, y: [v7|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B6 -> B7 falseDestination: B6 -> B9 size: DWORD state [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B8" 
    xhandlers
    flags 
    probability 4598615024196386816
    begin_IR
      LIR
      nr   48  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   50  <|@ instruction v10|DWORD = MOVZXB input: [v9|DWORD + v7|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr   52  <|@ instruction JUMP ~outgoingValues: [v10|DWORD] destination: B7 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B4" 
    successors "B8" 
    xhandlers
    flags 
    probability 4592587941257569895
    begin_IR
      LIR
      nr   54  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   56  <|@ instruction JUMP ~outgoingValues: [int[0|0x0]] destination: B5 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B7" "B2" "B5" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   58  <|@ instruction [v11|DWORD] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr   60  <|@ instruction rax|DWORD = MOVE input: v11|DWORD moveKind: DWORD <|@ <|@
      nr   62  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@3dbf6f45 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B12" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   64  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   66  <|@ instruction JUMP ~outgoingValues: [int[-12571|0xffffffffffffcee5]] destination: B11 -> B12 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B12" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   68  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   70  <|@ instruction JUMP ~outgoingValues: [int[-16923|0xffffffffffffbde5]] destination: B10 -> B12 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B12" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   72  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   74  <|@ instruction JUMP ~outgoingValues: [int[-21531|0xffffffffffffabe5]] destination: B9 -> B12 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B11" "B10" "B9" 
    successors 
    xhandlers
    flags 
    probability 2362138004555825152
    begin_IR
      LIR
      nr   76  <|@ instruction [v12|DWORD] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr   78  <|@ instruction MOV (x: [r15|QWORD + 1156], y: v12|DWORD) size: DWORD <|@ <|@
      nr   80  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr   82  <|@ st <@st|@live-base-pointers: []
Queens.getRowColumn(int, int) [bci: 0]
locals: v0|QWORD[.] v1|DWORD v2|DWORD 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: aload_0       
     1: getfield      #3          // freeRows:boolean[]
     4: iload_1       
     5: baload        
     6: ifeq          38
     9: aload_0       
    10: getfield      #5          // freeMaxs:boolean[]
    13: iload_2       
    14: iload_1       
    15: iadd          
    16: baload        
    17: ifeq          38
    20: aload_0       
    21: getfield      #6          // freeMins:boolean[]
    24: iload_2       
    25: iload_1       
    26: isub          
    27: bipush        7
    29: iadd          
    30: baload        
    31: ifeq          38
    34: iconst_1      
    35: goto          39
    38: iconst_0      
    39: ireturn       
   <|@
end_bytecodes
begin_intervals
  name "After resolve data flow"
  rax|d fixed "[rax|d]" rax|d v11|d [0, 1[[60, 62[ "NoSpillStore"
  rcx|d fixed "[rcx|d]" rcx|d -1 [0, 10[ "NoSpillStore"
  rdx|d fixed "[rdx|d]" rdx|d -1 [0, 8[ "NoSpillStore"
  rbp|q fixed "[rbp|q]" rbp|q -1 [0, 2[ "NoSpillStore"
  rsi|q fixed "[rsi|q]" rsi|q -1 [0, 6[ "NoSpillStore"
  v0|q QWORD "[rsi|q]" v0|q rsi|q [6, 22[[26, 48[[64, 83[6 MustHaveRegister 12 MustHaveRegister 28 MustHaveRegister 40 MustHaveRegister  "NoSpillStore"
  v1|d DWORD "[rdx|d]" v1|d rdx|d [8, 22[[26, 48[[64, 83[8 MustHaveRegister 14 MustHaveRegister 18 ShouldHaveRegister 30 ShouldHaveRegister 42 ShouldHaveRegister  "NoSpillStore"
  v2|d DWORD "[rcx|d]" v2|d rcx|d [10, 22[[26, 48[[64, 83[10 MustHaveRegister 30 ShouldHaveRegister 42 MustHaveRegister  "NoSpillStore"
  v3|d DWORD "[rax|d]" v3|d -1 [12, 20[12 MustHaveRegister 14 MustHaveRegister 20 MustHaveRegister  "NoSpillStore"
  v4|q QWORD "[r10|q]" v4|q -1 [18, 20[18 MustHaveRegister 20 MustHaveRegister  "NoSpillStore"
  v5|d DWORD "[rax|d]" v5|d -1 [28, 36[28 MustHaveRegister 32 MustHaveRegister 36 MustHaveRegister  "NoSpillStore"
  v6|d DWORD "[r10|d]" v6|d v2|d [30, 36[30 MustHaveRegister 32 MustHaveRegister 36 MustHaveRegister  "NoSpillStore"
  v7|d DWORD "[rax|d]" v7|d -1 [40, 50[40 MustHaveRegister 46 MustHaveRegister 50 MustHaveRegister  "NoSpillStore"
  v8|d DWORD "[r10|d]" v8|d v2|d [42, 44[42 MustHaveRegister 44 MustHaveRegister  "NoSpillStore"
  v9|d DWORD "[r10|d]" v9|d -1 [44, 50[44 MustHaveRegister 46 MustHaveRegister 50 MustHaveRegister  "NoSpillStore"
  v10|d DWORD "[rax|d]" v10|d v11|d [50, 53[50 MustHaveRegister 52 ShouldHaveRegister  "NoSpillStore"
  v11|d DWORD "[rax|d]" v11|d v10|d [58, 60[60 ShouldHaveRegister  "NoSpillStore"
  v12|d DWORD "[r10|d]" v12|d -1 [76, 78[78 MustHaveRegister  "NoSpillStore"
end_intervals
begin_cfg
  name "After SSALinearScanResolveDataFlow"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B11" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|QWORD[.], rdx|DWORD, rcx|DWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr    4  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@6bd31264 slotKind: QWORD <|@ <|@
      nr    6  <|@ instruction v0|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr    8  <|@ instruction v1|DWORD = MOVE input: rdx|DWORD moveKind: DWORD <|@ <|@
      nr   10  <|@ instruction v2|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr   12  <|@ instruction v3|DWORD[_] = MOV input: [v0|QWORD[.] + 16] size: DWORD <|@ <|@
      nr   14  <|@ st <@st|@live-base-pointers: []
Queens.getRowColumn(int, int) [bci: 0]
locals: v0|QWORD[.] v1|DWORD v2|DWORD 
>@ <|@ instruction CMPBRANCH (x: v1|DWORD, y: [v3|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B0 -> B1 falseDestination: B0 -> B11 size: DWORD state [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B3" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   16  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   18  <|@ instruction v4|QWORD = MOV value: v1|DWORD size: DWORD <|@ <|@
      nr   20  <|@ instruction CMPCONSTBRANCH x: [v4|QWORD + v3|DWORD[_] * 8 + 16] trueDestinationProbability: 0.615625 condition: = trueDestination: B1 -> B2 falseDestination: B1 -> B3 y: 0 size: BYTE inlinedY: null <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B8" 
    xhandlers
    flags 
    probability 4603720276586476339
    begin_IR
      LIR
      nr   22  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v11|DWORD = MOVE input: int[0|0x0] // MoveResolver resolve mapping <|@ <|@
      nr   24  <|@ instruction JUMP ~outgoingValues: [] destination: B2 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B4" "B10" 
    xhandlers
    flags 
    probability 4600595904344988058
    begin_IR
      LIR
      nr   26  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   28  <|@ instruction v5|DWORD[_] = MOV input: [v0|QWORD[.] + 12] size: DWORD <|@ <|@
      nr   30  <|@ instruction v6|DWORD = ADD (x: v2|DWORD, y: v1|DWORD) size: DWORD <|@ <|@
      nr   32  <|@ st <@st|@live-base-pointers: []
Queens.getRowColumn(int, int) [bci: 0]
locals: v0|QWORD[.] v1|DWORD v2|DWORD 
>@ <|@ instruction CMPBRANCH (x: v6|DWORD, y: [v5|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B3 -> B4 falseDestination: B3 -> B10 size: DWORD state [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B5" "B6" 
    xhandlers
    flags 
    probability 4600595904344988058
    begin_IR
      LIR
      nr   34  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   36  <|@ instruction CMPCONSTBRANCH x: [v6|DWORD + v5|DWORD[_] * 8 + 16] trueDestinationProbability: 0.2860772357723577 condition: = trueDestination: B4 -> B5 falseDestination: B4 -> B6 y: 0 size: BYTE inlinedY: null <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B4" 
    successors "B7" "B9" 
    xhandlers
    flags 
    probability 4598615024196386816
    begin_IR
      LIR
      nr   38  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   40  <|@ instruction v7|DWORD[_] = MOV input: [v0|QWORD[.] + 20] size: DWORD <|@ <|@
      nr   42  <|@ instruction v8|DWORD = SUB (x: v2|DWORD, ~y: v1|DWORD) size: DWORD <|@ <|@
      nr   44  <|@ instruction v9|DWORD = LEA address: [v8|DWORD + 7] size: DWORD <|@ <|@
      nr   46  <|@ st <@st|@live-base-pointers: []
Queens.getRowColumn(int, int) [bci: 0]
locals: v0|QWORD[.] v1|DWORD v2|DWORD 
>@ <|@ instruction CMPBRANCH (x: v9|DWORD, y: [v7|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B6 -> B7 falseDestination: B6 -> B9 size: DWORD state [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B8" 
    xhandlers
    flags 
    probability 4598615024196386816
    begin_IR
      LIR
      nr   48  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   50  <|@ instruction v10|DWORD = MOVZXB input: [v9|DWORD + v7|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr   52  <|@ instruction JUMP ~outgoingValues: [] destination: B7 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B4" 
    successors "B8" 
    xhandlers
    flags 
    probability 4592587941257569895
    begin_IR
      LIR
      nr   54  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v11|DWORD = MOVE input: int[0|0x0] // MoveResolver resolve mapping <|@ <|@
      nr   56  <|@ instruction JUMP ~outgoingValues: [] destination: B5 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B7" "B2" "B5" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   58  <|@ instruction [v11|DWORD] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr   60  <|@ instruction rax|DWORD = MOVE input: v11|DWORD moveKind: DWORD <|@ <|@
      nr   62  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@3dbf6f45 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B12" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   64  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v12|DWORD = MOVE input: int[-12571|0xffffffffffffcee5] // MoveResolver resolve mapping <|@ <|@
      nr   66  <|@ instruction JUMP ~outgoingValues: [] destination: B11 -> B12 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B12" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   68  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v12|DWORD = MOVE input: int[-16923|0xffffffffffffbde5] // MoveResolver resolve mapping <|@ <|@
      nr   70  <|@ instruction JUMP ~outgoingValues: [] destination: B10 -> B12 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B12" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   72  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v12|DWORD = MOVE input: int[-21531|0xffffffffffffabe5] // MoveResolver resolve mapping <|@ <|@
      nr   74  <|@ instruction JUMP ~outgoingValues: [] destination: B9 -> B12 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B11" "B10" "B9" 
    successors 
    xhandlers
    flags 
    probability 2362138004555825152
    begin_IR
      LIR
      nr   76  <|@ instruction [v12|DWORD] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr   78  <|@ instruction MOV (x: [r15|QWORD + 1156], y: v12|DWORD) size: DWORD <|@ <|@
      nr   80  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr   82  <|@ st <@st|@live-base-pointers: []
Queens.getRowColumn(int, int) [bci: 0]
locals: v0|QWORD[.] v1|DWORD v2|DWORD 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: aload_0       
     1: getfield      #3          // freeRows:boolean[]
     4: iload_1       
     5: baload        
     6: ifeq          38
     9: aload_0       
    10: getfield      #5          // freeMaxs:boolean[]
    13: iload_2       
    14: iload_1       
    15: iadd          
    16: baload        
    17: ifeq          38
    20: aload_0       
    21: getfield      #6          // freeMins:boolean[]
    24: iload_2       
    25: iload_1       
    26: isub          
    27: bipush        7
    29: iadd          
    30: baload        
    31: ifeq          38
    34: iconst_1      
    35: goto          39
    38: iconst_0      
    39: ireturn       
   <|@
end_bytecodes
begin_cfg
  name "After SSALinearScanEliminateSpillMove"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B11" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|QWORD[.], rdx|DWORD, rcx|DWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr    4  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@6bd31264 slotKind: QWORD <|@ <|@
      nr    6  <|@ instruction v0|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr    8  <|@ instruction v1|DWORD = MOVE input: rdx|DWORD moveKind: DWORD <|@ <|@
      nr   10  <|@ instruction v2|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr   12  <|@ instruction v3|DWORD[_] = MOV input: [v0|QWORD[.] + 16] size: DWORD <|@ <|@
      nr   14  <|@ st <@st|@live-base-pointers: []
Queens.getRowColumn(int, int) [bci: 0]
locals: v0|QWORD[.] v1|DWORD v2|DWORD 
>@ <|@ instruction CMPBRANCH (x: v1|DWORD, y: [v3|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B0 -> B1 falseDestination: B0 -> B11 size: DWORD state [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B3" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   16  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   18  <|@ instruction v4|QWORD = MOV value: v1|DWORD size: DWORD <|@ <|@
      nr   20  <|@ instruction CMPCONSTBRANCH x: [v4|QWORD + v3|DWORD[_] * 8 + 16] trueDestinationProbability: 0.615625 condition: = trueDestination: B1 -> B2 falseDestination: B1 -> B3 y: 0 size: BYTE inlinedY: null <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B8" 
    xhandlers
    flags 
    probability 4603720276586476339
    begin_IR
      LIR
      nr   22  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v11|DWORD = MOVE input: int[0|0x0] // MoveResolver resolve mapping <|@ <|@
      nr   24  <|@ instruction JUMP ~outgoingValues: [] destination: B2 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B4" "B10" 
    xhandlers
    flags 
    probability 4600595904344988058
    begin_IR
      LIR
      nr   26  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   28  <|@ instruction v5|DWORD[_] = MOV input: [v0|QWORD[.] + 12] size: DWORD <|@ <|@
      nr   30  <|@ instruction v6|DWORD = ADD (x: v2|DWORD, y: v1|DWORD) size: DWORD <|@ <|@
      nr   32  <|@ st <@st|@live-base-pointers: []
Queens.getRowColumn(int, int) [bci: 0]
locals: v0|QWORD[.] v1|DWORD v2|DWORD 
>@ <|@ instruction CMPBRANCH (x: v6|DWORD, y: [v5|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B3 -> B4 falseDestination: B3 -> B10 size: DWORD state [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B5" "B6" 
    xhandlers
    flags 
    probability 4600595904344988058
    begin_IR
      LIR
      nr   34  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   36  <|@ instruction CMPCONSTBRANCH x: [v6|DWORD + v5|DWORD[_] * 8 + 16] trueDestinationProbability: 0.2860772357723577 condition: = trueDestination: B4 -> B5 falseDestination: B4 -> B6 y: 0 size: BYTE inlinedY: null <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B4" 
    successors "B7" "B9" 
    xhandlers
    flags 
    probability 4598615024196386816
    begin_IR
      LIR
      nr   38  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   40  <|@ instruction v7|DWORD[_] = MOV input: [v0|QWORD[.] + 20] size: DWORD <|@ <|@
      nr   42  <|@ instruction v8|DWORD = SUB (x: v2|DWORD, ~y: v1|DWORD) size: DWORD <|@ <|@
      nr   44  <|@ instruction v9|DWORD = LEA address: [v8|DWORD + 7] size: DWORD <|@ <|@
      nr   46  <|@ st <@st|@live-base-pointers: []
Queens.getRowColumn(int, int) [bci: 0]
locals: v0|QWORD[.] v1|DWORD v2|DWORD 
>@ <|@ instruction CMPBRANCH (x: v9|DWORD, y: [v7|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B6 -> B7 falseDestination: B6 -> B9 size: DWORD state [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B8" 
    xhandlers
    flags 
    probability 4598615024196386816
    begin_IR
      LIR
      nr   48  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   50  <|@ instruction v10|DWORD = MOVZXB input: [v9|DWORD + v7|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr   52  <|@ instruction JUMP ~outgoingValues: [] destination: B7 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B4" 
    successors "B8" 
    xhandlers
    flags 
    probability 4592587941257569895
    begin_IR
      LIR
      nr   54  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v11|DWORD = MOVE input: int[0|0x0] // MoveResolver resolve mapping <|@ <|@
      nr   56  <|@ instruction JUMP ~outgoingValues: [] destination: B5 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B7" "B2" "B5" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   58  <|@ instruction [] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr   60  <|@ instruction rax|DWORD = MOVE input: v11|DWORD moveKind: DWORD <|@ <|@
      nr   62  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@3dbf6f45 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B12" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   64  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v12|DWORD = MOVE input: int[-12571|0xffffffffffffcee5] // MoveResolver resolve mapping <|@ <|@
      nr   66  <|@ instruction JUMP ~outgoingValues: [] destination: B11 -> B12 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B12" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   68  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v12|DWORD = MOVE input: int[-16923|0xffffffffffffbde5] // MoveResolver resolve mapping <|@ <|@
      nr   70  <|@ instruction JUMP ~outgoingValues: [] destination: B10 -> B12 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B12" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   72  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v12|DWORD = MOVE input: int[-21531|0xffffffffffffabe5] // MoveResolver resolve mapping <|@ <|@
      nr   74  <|@ instruction JUMP ~outgoingValues: [] destination: B9 -> B12 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B11" "B10" "B9" 
    successors 
    xhandlers
    flags 
    probability 2362138004555825152
    begin_IR
      LIR
      nr   76  <|@ instruction [] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr   78  <|@ instruction MOV (x: [r15|QWORD + 1156], y: v12|DWORD) size: DWORD <|@ <|@
      nr   80  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr   82  <|@ st <@st|@live-base-pointers: []
Queens.getRowColumn(int, int) [bci: 0]
locals: v0|QWORD[.] v1|DWORD v2|DWORD 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: aload_0       
     1: getfield      #3          // freeRows:boolean[]
     4: iload_1       
     5: baload        
     6: ifeq          38
     9: aload_0       
    10: getfield      #5          // freeMaxs:boolean[]
    13: iload_2       
    14: iload_1       
    15: iadd          
    16: baload        
    17: ifeq          38
    20: aload_0       
    21: getfield      #6          // freeMins:boolean[]
    24: iload_2       
    25: iload_1       
    26: isub          
    27: bipush        7
    29: iadd          
    30: baload        
    31: ifeq          38
    34: iconst_1      
    35: goto          39
    38: iconst_0      
    39: ireturn       
   <|@
end_bytecodes
begin_cfg
  name "After LinearScanAssignLocations"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B11" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|QWORD[.], rdx|DWORD, rcx|DWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr    4  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@6bd31264 slotKind: QWORD <|@ <|@
      nr   12  <|@ instruction rax|DWORD[_] = MOV input: [rsi|QWORD[.] + 16] size: DWORD <|@ <|@
      nr   14  <|@ st <@st|@live-base-pointers: []
Queens.getRowColumn(int, int) [bci: 0]
locals: rsi|QWORD[.] rdx|DWORD rcx|DWORD 
>@ <|@ instruction CMPBRANCH (x: rdx|DWORD, y: [rax|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B0 -> B1 falseDestination: B0 -> B11 size: DWORD state [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B3" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   16  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   18  <|@ instruction r10|QWORD = MOV value: rdx|DWORD size: DWORD <|@ <|@
      nr   20  <|@ instruction CMPCONSTBRANCH x: [r10|QWORD + rax|DWORD[_] * 8 + 16] trueDestinationProbability: 0.615625 condition: = trueDestination: B1 -> B2 falseDestination: B1 -> B3 y: 0 size: BYTE inlinedY: null <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B8" 
    xhandlers
    flags 
    probability 4603720276586476339
    begin_IR
      LIR
      nr   22  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction rax|DWORD = MOVE input: int[0|0x0] // MoveResolver resolve mapping <|@ <|@
      nr   24  <|@ instruction JUMP ~outgoingValues: [] destination: B2 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B4" "B10" 
    xhandlers
    flags 
    probability 4600595904344988058
    begin_IR
      LIR
      nr   26  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   28  <|@ instruction rax|DWORD[_] = MOV input: [rsi|QWORD[.] + 12] size: DWORD <|@ <|@
      nr   30  <|@ instruction r10|DWORD = ADD (x: rcx|DWORD, y: rdx|DWORD) size: DWORD <|@ <|@
      nr   32  <|@ st <@st|@live-base-pointers: []
Queens.getRowColumn(int, int) [bci: 0]
locals: rsi|QWORD[.] rdx|DWORD rcx|DWORD 
>@ <|@ instruction CMPBRANCH (x: r10|DWORD, y: [rax|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B3 -> B4 falseDestination: B3 -> B10 size: DWORD state [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B5" "B6" 
    xhandlers
    flags 
    probability 4600595904344988058
    begin_IR
      LIR
      nr   34  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   36  <|@ instruction CMPCONSTBRANCH x: [r10|DWORD + rax|DWORD[_] * 8 + 16] trueDestinationProbability: 0.2860772357723577 condition: = trueDestination: B4 -> B5 falseDestination: B4 -> B6 y: 0 size: BYTE inlinedY: null <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B4" 
    successors "B7" "B9" 
    xhandlers
    flags 
    probability 4598615024196386816
    begin_IR
      LIR
      nr   38  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   40  <|@ instruction rax|DWORD[_] = MOV input: [rsi|QWORD[.] + 20] size: DWORD <|@ <|@
      nr   42  <|@ instruction r10|DWORD = SUB (x: rcx|DWORD, ~y: rdx|DWORD) size: DWORD <|@ <|@
      nr   44  <|@ instruction r10|DWORD = LEA address: [r10|DWORD + 7] size: DWORD <|@ <|@
      nr   46  <|@ st <@st|@live-base-pointers: []
Queens.getRowColumn(int, int) [bci: 0]
locals: rsi|QWORD[.] rdx|DWORD rcx|DWORD 
>@ <|@ instruction CMPBRANCH (x: r10|DWORD, y: [rax|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B6 -> B7 falseDestination: B6 -> B9 size: DWORD state [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B8" 
    xhandlers
    flags 
    probability 4598615024196386816
    begin_IR
      LIR
      nr   48  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   50  <|@ instruction rax|DWORD = MOVZXB input: [r10|DWORD + rax|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr   52  <|@ instruction JUMP ~outgoingValues: [] destination: B7 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B4" 
    successors "B8" 
    xhandlers
    flags 
    probability 4592587941257569895
    begin_IR
      LIR
      nr   54  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction rax|DWORD = MOVE input: int[0|0x0] // MoveResolver resolve mapping <|@ <|@
      nr   56  <|@ instruction JUMP ~outgoingValues: [] destination: B5 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B7" "B2" "B5" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   58  <|@ instruction [] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr   62  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@3dbf6f45 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B12" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   64  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-12571|0xffffffffffffcee5] // MoveResolver resolve mapping <|@ <|@
      nr   66  <|@ instruction JUMP ~outgoingValues: [] destination: B11 -> B12 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B12" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   68  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-16923|0xffffffffffffbde5] // MoveResolver resolve mapping <|@ <|@
      nr   70  <|@ instruction JUMP ~outgoingValues: [] destination: B10 -> B12 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B12" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   72  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-21531|0xffffffffffffabe5] // MoveResolver resolve mapping <|@ <|@
      nr   74  <|@ instruction JUMP ~outgoingValues: [] destination: B9 -> B12 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B11" "B10" "B9" 
    successors 
    xhandlers
    flags 
    probability 2362138004555825152
    begin_IR
      LIR
      nr   76  <|@ instruction [] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr   78  <|@ instruction MOV (x: [r15|QWORD + 1156], y: r10|DWORD) size: DWORD <|@ <|@
      nr   80  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr   82  <|@ st <@st|@live-base-pointers: []
Queens.getRowColumn(int, int) [bci: 0]
locals: rsi|QWORD[.] rdx|DWORD rcx|DWORD 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: aload_0       
     1: getfield      #3          // freeRows:boolean[]
     4: iload_1       
     5: baload        
     6: ifeq          38
     9: aload_0       
    10: getfield      #5          // freeMaxs:boolean[]
    13: iload_2       
    14: iload_1       
    15: iadd          
    16: baload        
    17: ifeq          38
    20: aload_0       
    21: getfield      #6          // freeMins:boolean[]
    24: iload_2       
    25: iload_1       
    26: isub          
    27: bipush        7
    29: iadd          
    30: baload        
    31: ifeq          38
    34: iconst_1      
    35: goto          39
    38: iconst_0      
    39: ireturn       
   <|@
end_bytecodes
begin_cfg
  name "After LinearScan"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B11" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|QWORD[.], rdx|DWORD, rcx|DWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr    4  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@6bd31264 slotKind: QWORD <|@ <|@
      nr   12  <|@ instruction rax|DWORD[_] = MOV input: [rsi|QWORD[.] + 16] size: DWORD <|@ <|@
      nr   14  <|@ st <@st|@live-base-pointers: []
Queens.getRowColumn(int, int) [bci: 0]
locals: rsi|QWORD[.] rdx|DWORD rcx|DWORD 
>@ <|@ instruction CMPBRANCH (x: rdx|DWORD, y: [rax|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B0 -> B1 falseDestination: B0 -> B11 size: DWORD state [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B3" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   16  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   18  <|@ instruction r10|QWORD = MOV value: rdx|DWORD size: DWORD <|@ <|@
      nr   20  <|@ instruction CMPCONSTBRANCH x: [r10|QWORD + rax|DWORD[_] * 8 + 16] trueDestinationProbability: 0.615625 condition: = trueDestination: B1 -> B2 falseDestination: B1 -> B3 y: 0 size: BYTE inlinedY: null <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B8" 
    xhandlers
    flags 
    probability 4603720276586476339
    begin_IR
      LIR
      nr   22  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction rax|DWORD = MOVE input: int[0|0x0] // MoveResolver resolve mapping <|@ <|@
      nr   24  <|@ instruction JUMP ~outgoingValues: [] destination: B2 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B4" "B10" 
    xhandlers
    flags 
    probability 4600595904344988058
    begin_IR
      LIR
      nr   26  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   28  <|@ instruction rax|DWORD[_] = MOV input: [rsi|QWORD[.] + 12] size: DWORD <|@ <|@
      nr   30  <|@ instruction r10|DWORD = ADD (x: rcx|DWORD, y: rdx|DWORD) size: DWORD <|@ <|@
      nr   32  <|@ st <@st|@live-base-pointers: []
Queens.getRowColumn(int, int) [bci: 0]
locals: rsi|QWORD[.] rdx|DWORD rcx|DWORD 
>@ <|@ instruction CMPBRANCH (x: r10|DWORD, y: [rax|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B3 -> B4 falseDestination: B3 -> B10 size: DWORD state [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B5" "B6" 
    xhandlers
    flags 
    probability 4600595904344988058
    begin_IR
      LIR
      nr   34  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   36  <|@ instruction CMPCONSTBRANCH x: [r10|DWORD + rax|DWORD[_] * 8 + 16] trueDestinationProbability: 0.2860772357723577 condition: = trueDestination: B4 -> B5 falseDestination: B4 -> B6 y: 0 size: BYTE inlinedY: null <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B4" 
    successors "B7" "B9" 
    xhandlers
    flags 
    probability 4598615024196386816
    begin_IR
      LIR
      nr   38  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   40  <|@ instruction rax|DWORD[_] = MOV input: [rsi|QWORD[.] + 20] size: DWORD <|@ <|@
      nr   42  <|@ instruction r10|DWORD = SUB (x: rcx|DWORD, ~y: rdx|DWORD) size: DWORD <|@ <|@
      nr   44  <|@ instruction r10|DWORD = LEA address: [r10|DWORD + 7] size: DWORD <|@ <|@
      nr   46  <|@ st <@st|@live-base-pointers: []
Queens.getRowColumn(int, int) [bci: 0]
locals: rsi|QWORD[.] rdx|DWORD rcx|DWORD 
>@ <|@ instruction CMPBRANCH (x: r10|DWORD, y: [rax|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B6 -> B7 falseDestination: B6 -> B9 size: DWORD state [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B8" 
    xhandlers
    flags 
    probability 4598615024196386816
    begin_IR
      LIR
      nr   48  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   50  <|@ instruction rax|DWORD = MOVZXB input: [r10|DWORD + rax|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr   52  <|@ instruction JUMP ~outgoingValues: [] destination: B7 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B4" 
    successors "B8" 
    xhandlers
    flags 
    probability 4592587941257569895
    begin_IR
      LIR
      nr   54  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction rax|DWORD = MOVE input: int[0|0x0] // MoveResolver resolve mapping <|@ <|@
      nr   56  <|@ instruction JUMP ~outgoingValues: [] destination: B5 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B7" "B2" "B5" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   58  <|@ instruction [] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr   62  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@3dbf6f45 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B12" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   64  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-12571|0xffffffffffffcee5] // MoveResolver resolve mapping <|@ <|@
      nr   66  <|@ instruction JUMP ~outgoingValues: [] destination: B11 -> B12 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B12" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   68  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-16923|0xffffffffffffbde5] // MoveResolver resolve mapping <|@ <|@
      nr   70  <|@ instruction JUMP ~outgoingValues: [] destination: B10 -> B12 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B12" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   72  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-21531|0xffffffffffffabe5] // MoveResolver resolve mapping <|@ <|@
      nr   74  <|@ instruction JUMP ~outgoingValues: [] destination: B9 -> B12 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B11" "B10" "B9" 
    successors 
    xhandlers
    flags 
    probability 2362138004555825152
    begin_IR
      LIR
      nr   76  <|@ instruction [] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr   78  <|@ instruction MOV (x: [r15|QWORD + 1156], y: r10|DWORD) size: DWORD <|@ <|@
      nr   80  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr   82  <|@ st <@st|@live-base-pointers: []
Queens.getRowColumn(int, int) [bci: 0]
locals: rsi|QWORD[.] rdx|DWORD rcx|DWORD 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: aload_0       
     1: getfield      #3          // freeRows:boolean[]
     4: iload_1       
     5: baload        
     6: ifeq          38
     9: aload_0       
    10: getfield      #5          // freeMaxs:boolean[]
    13: iload_2       
    14: iload_1       
    15: iadd          
    16: baload        
    17: ifeq          38
    20: aload_0       
    21: getfield      #6          // freeMins:boolean[]
    24: iload_2       
    25: iload_1       
    26: isub          
    27: bipush        7
    29: iadd          
    30: baload        
    31: ifeq          38
    34: iconst_1      
    35: goto          39
    38: iconst_0      
    39: ireturn       
   <|@
end_bytecodes
begin_cfg
  name "After LSStackSlotAllocator"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B11" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|QWORD[.], rdx|DWORD, rcx|DWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr    4  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@6bd31264 slotKind: QWORD <|@ <|@
      nr   12  <|@ instruction rax|DWORD[_] = MOV input: [rsi|QWORD[.] + 16] size: DWORD <|@ <|@
      nr   14  <|@ st <@st|@live-base-pointers: []
Queens.getRowColumn(int, int) [bci: 0]
locals: rsi|QWORD[.] rdx|DWORD rcx|DWORD 
>@ <|@ instruction CMPBRANCH (x: rdx|DWORD, y: [rax|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B0 -> B1 falseDestination: B0 -> B11 size: DWORD state [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B3" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   16  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   18  <|@ instruction r10|QWORD = MOV value: rdx|DWORD size: DWORD <|@ <|@
      nr   20  <|@ instruction CMPCONSTBRANCH x: [r10|QWORD + rax|DWORD[_] * 8 + 16] trueDestinationProbability: 0.615625 condition: = trueDestination: B1 -> B2 falseDestination: B1 -> B3 y: 0 size: BYTE inlinedY: null <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B8" 
    xhandlers
    flags 
    probability 4603720276586476339
    begin_IR
      LIR
      nr   22  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction rax|DWORD = MOVE input: int[0|0x0] // MoveResolver resolve mapping <|@ <|@
      nr   24  <|@ instruction JUMP ~outgoingValues: [] destination: B2 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B4" "B10" 
    xhandlers
    flags 
    probability 4600595904344988058
    begin_IR
      LIR
      nr   26  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   28  <|@ instruction rax|DWORD[_] = MOV input: [rsi|QWORD[.] + 12] size: DWORD <|@ <|@
      nr   30  <|@ instruction r10|DWORD = ADD (x: rcx|DWORD, y: rdx|DWORD) size: DWORD <|@ <|@
      nr   32  <|@ st <@st|@live-base-pointers: []
Queens.getRowColumn(int, int) [bci: 0]
locals: rsi|QWORD[.] rdx|DWORD rcx|DWORD 
>@ <|@ instruction CMPBRANCH (x: r10|DWORD, y: [rax|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B3 -> B4 falseDestination: B3 -> B10 size: DWORD state [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B5" "B6" 
    xhandlers
    flags 
    probability 4600595904344988058
    begin_IR
      LIR
      nr   34  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   36  <|@ instruction CMPCONSTBRANCH x: [r10|DWORD + rax|DWORD[_] * 8 + 16] trueDestinationProbability: 0.2860772357723577 condition: = trueDestination: B4 -> B5 falseDestination: B4 -> B6 y: 0 size: BYTE inlinedY: null <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B4" 
    successors "B7" "B9" 
    xhandlers
    flags 
    probability 4598615024196386816
    begin_IR
      LIR
      nr   38  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   40  <|@ instruction rax|DWORD[_] = MOV input: [rsi|QWORD[.] + 20] size: DWORD <|@ <|@
      nr   42  <|@ instruction r10|DWORD = SUB (x: rcx|DWORD, ~y: rdx|DWORD) size: DWORD <|@ <|@
      nr   44  <|@ instruction r10|DWORD = LEA address: [r10|DWORD + 7] size: DWORD <|@ <|@
      nr   46  <|@ st <@st|@live-base-pointers: []
Queens.getRowColumn(int, int) [bci: 0]
locals: rsi|QWORD[.] rdx|DWORD rcx|DWORD 
>@ <|@ instruction CMPBRANCH (x: r10|DWORD, y: [rax|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B6 -> B7 falseDestination: B6 -> B9 size: DWORD state [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B8" 
    xhandlers
    flags 
    probability 4598615024196386816
    begin_IR
      LIR
      nr   48  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   50  <|@ instruction rax|DWORD = MOVZXB input: [r10|DWORD + rax|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr   52  <|@ instruction JUMP ~outgoingValues: [] destination: B7 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B4" 
    successors "B8" 
    xhandlers
    flags 
    probability 4592587941257569895
    begin_IR
      LIR
      nr   54  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction rax|DWORD = MOVE input: int[0|0x0] // MoveResolver resolve mapping <|@ <|@
      nr   56  <|@ instruction JUMP ~outgoingValues: [] destination: B5 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B7" "B2" "B5" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   58  <|@ instruction [] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr   62  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@3dbf6f45 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B12" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   64  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-12571|0xffffffffffffcee5] // MoveResolver resolve mapping <|@ <|@
      nr   66  <|@ instruction JUMP ~outgoingValues: [] destination: B11 -> B12 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B12" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   68  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-16923|0xffffffffffffbde5] // MoveResolver resolve mapping <|@ <|@
      nr   70  <|@ instruction JUMP ~outgoingValues: [] destination: B10 -> B12 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B12" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   72  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-21531|0xffffffffffffabe5] // MoveResolver resolve mapping <|@ <|@
      nr   74  <|@ instruction JUMP ~outgoingValues: [] destination: B9 -> B12 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B11" "B10" "B9" 
    successors 
    xhandlers
    flags 
    probability 2362138004555825152
    begin_IR
      LIR
      nr   76  <|@ instruction [] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr   78  <|@ instruction MOV (x: [r15|QWORD + 1156], y: r10|DWORD) size: DWORD <|@ <|@
      nr   80  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr   82  <|@ st <@st|@live-base-pointers: []
Queens.getRowColumn(int, int) [bci: 0]
locals: rsi|QWORD[.] rdx|DWORD rcx|DWORD 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: aload_0       
     1: getfield      #3          // freeRows:boolean[]
     4: iload_1       
     5: baload        
     6: ifeq          38
     9: aload_0       
    10: getfield      #5          // freeMaxs:boolean[]
    13: iload_2       
    14: iload_1       
    15: iadd          
    16: baload        
    17: ifeq          38
    20: aload_0       
    21: getfield      #6          // freeMins:boolean[]
    24: iload_2       
    25: iload_1       
    26: isub          
    27: bipush        7
    29: iadd          
    30: baload        
    31: ifeq          38
    34: iconst_1      
    35: goto          39
    38: iconst_0      
    39: ireturn       
   <|@
end_bytecodes
begin_cfg
  name "After AllocationStage"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B11" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|QWORD[.], rdx|DWORD, rcx|DWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr    4  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@6bd31264 slotKind: QWORD <|@ <|@
      nr   12  <|@ instruction rax|DWORD[_] = MOV input: [rsi|QWORD[.] + 16] size: DWORD <|@ <|@
      nr   14  <|@ st <@st|@live-base-pointers: []
Queens.getRowColumn(int, int) [bci: 0]
locals: rsi|QWORD[.] rdx|DWORD rcx|DWORD 
>@ <|@ instruction CMPBRANCH (x: rdx|DWORD, y: [rax|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B0 -> B1 falseDestination: B0 -> B11 size: DWORD state [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B3" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   16  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   18  <|@ instruction r10|QWORD = MOV value: rdx|DWORD size: DWORD <|@ <|@
      nr   20  <|@ instruction CMPCONSTBRANCH x: [r10|QWORD + rax|DWORD[_] * 8 + 16] trueDestinationProbability: 0.615625 condition: = trueDestination: B1 -> B2 falseDestination: B1 -> B3 y: 0 size: BYTE inlinedY: null <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B8" 
    xhandlers
    flags 
    probability 4603720276586476339
    begin_IR
      LIR
      nr   22  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction rax|DWORD = MOVE input: int[0|0x0] // MoveResolver resolve mapping <|@ <|@
      nr   24  <|@ instruction JUMP ~outgoingValues: [] destination: B2 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B4" "B10" 
    xhandlers
    flags 
    probability 4600595904344988058
    begin_IR
      LIR
      nr   26  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   28  <|@ instruction rax|DWORD[_] = MOV input: [rsi|QWORD[.] + 12] size: DWORD <|@ <|@
      nr   30  <|@ instruction r10|DWORD = ADD (x: rcx|DWORD, y: rdx|DWORD) size: DWORD <|@ <|@
      nr   32  <|@ st <@st|@live-base-pointers: []
Queens.getRowColumn(int, int) [bci: 0]
locals: rsi|QWORD[.] rdx|DWORD rcx|DWORD 
>@ <|@ instruction CMPBRANCH (x: r10|DWORD, y: [rax|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B3 -> B4 falseDestination: B3 -> B10 size: DWORD state [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B5" "B6" 
    xhandlers
    flags 
    probability 4600595904344988058
    begin_IR
      LIR
      nr   34  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   36  <|@ instruction CMPCONSTBRANCH x: [r10|DWORD + rax|DWORD[_] * 8 + 16] trueDestinationProbability: 0.2860772357723577 condition: = trueDestination: B4 -> B5 falseDestination: B4 -> B6 y: 0 size: BYTE inlinedY: null <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B4" 
    successors "B7" "B9" 
    xhandlers
    flags 
    probability 4598615024196386816
    begin_IR
      LIR
      nr   38  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   40  <|@ instruction rax|DWORD[_] = MOV input: [rsi|QWORD[.] + 20] size: DWORD <|@ <|@
      nr   42  <|@ instruction r10|DWORD = SUB (x: rcx|DWORD, ~y: rdx|DWORD) size: DWORD <|@ <|@
      nr   44  <|@ instruction r10|DWORD = LEA address: [r10|DWORD + 7] size: DWORD <|@ <|@
      nr   46  <|@ st <@st|@live-base-pointers: []
Queens.getRowColumn(int, int) [bci: 0]
locals: rsi|QWORD[.] rdx|DWORD rcx|DWORD 
>@ <|@ instruction CMPBRANCH (x: r10|DWORD, y: [rax|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B6 -> B7 falseDestination: B6 -> B9 size: DWORD state [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B8" 
    xhandlers
    flags 
    probability 4598615024196386816
    begin_IR
      LIR
      nr   48  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   50  <|@ instruction rax|DWORD = MOVZXB input: [r10|DWORD + rax|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr   52  <|@ instruction JUMP ~outgoingValues: [] destination: B7 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B4" 
    successors "B8" 
    xhandlers
    flags 
    probability 4592587941257569895
    begin_IR
      LIR
      nr   54  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction rax|DWORD = MOVE input: int[0|0x0] // MoveResolver resolve mapping <|@ <|@
      nr   56  <|@ instruction JUMP ~outgoingValues: [] destination: B5 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B7" "B2" "B5" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   58  <|@ instruction [] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr   62  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@3dbf6f45 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B12" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   64  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-12571|0xffffffffffffcee5] // MoveResolver resolve mapping <|@ <|@
      nr   66  <|@ instruction JUMP ~outgoingValues: [] destination: B11 -> B12 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B12" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   68  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-16923|0xffffffffffffbde5] // MoveResolver resolve mapping <|@ <|@
      nr   70  <|@ instruction JUMP ~outgoingValues: [] destination: B10 -> B12 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B12" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   72  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-21531|0xffffffffffffabe5] // MoveResolver resolve mapping <|@ <|@
      nr   74  <|@ instruction JUMP ~outgoingValues: [] destination: B9 -> B12 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B11" "B10" "B9" 
    successors 
    xhandlers
    flags 
    probability 2362138004555825152
    begin_IR
      LIR
      nr   76  <|@ instruction [] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr   78  <|@ instruction MOV (x: [r15|QWORD + 1156], y: r10|DWORD) size: DWORD <|@ <|@
      nr   80  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr   82  <|@ st <@st|@live-base-pointers: []
Queens.getRowColumn(int, int) [bci: 0]
locals: rsi|QWORD[.] rdx|DWORD rcx|DWORD 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: aload_0       
     1: getfield      #3          // freeRows:boolean[]
     4: iload_1       
     5: baload        
     6: ifeq          38
     9: aload_0       
    10: getfield      #5          // freeMaxs:boolean[]
    13: iload_2       
    14: iload_1       
    15: iadd          
    16: baload        
    17: ifeq          38
    20: aload_0       
    21: getfield      #6          // freeMins:boolean[]
    24: iload_2       
    25: iload_1       
    26: isub          
    27: bipush        7
    29: iadd          
    30: baload        
    31: ifeq          38
    34: iconst_1      
    35: goto          39
    38: iconst_0      
    39: ireturn       
   <|@
end_bytecodes
begin_cfg
  name "After EdgeMoveOptimizer"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B11" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|QWORD[.], rdx|DWORD, rcx|DWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr    4  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@6bd31264 slotKind: QWORD <|@ <|@
      nr   12  <|@ instruction rax|DWORD[_] = MOV input: [rsi|QWORD[.] + 16] size: DWORD <|@ <|@
      nr   14  <|@ st <@st|@live-base-pointers: []
Queens.getRowColumn(int, int) [bci: 0]
locals: rsi|QWORD[.] rdx|DWORD rcx|DWORD 
>@ <|@ instruction CMPBRANCH (x: rdx|DWORD, y: [rax|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B0 -> B1 falseDestination: B0 -> B11 size: DWORD state [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B3" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   16  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   18  <|@ instruction r10|QWORD = MOV value: rdx|DWORD size: DWORD <|@ <|@
      nr   20  <|@ instruction CMPCONSTBRANCH x: [r10|QWORD + rax|DWORD[_] * 8 + 16] trueDestinationProbability: 0.615625 condition: = trueDestination: B1 -> B2 falseDestination: B1 -> B3 y: 0 size: BYTE inlinedY: null <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B8" 
    xhandlers
    flags 
    probability 4603720276586476339
    begin_IR
      LIR
      nr   22  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction rax|DWORD = MOVE input: int[0|0x0] // MoveResolver resolve mapping <|@ <|@
      nr   24  <|@ instruction JUMP ~outgoingValues: [] destination: B2 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B4" "B10" 
    xhandlers
    flags 
    probability 4600595904344988058
    begin_IR
      LIR
      nr   26  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   28  <|@ instruction rax|DWORD[_] = MOV input: [rsi|QWORD[.] + 12] size: DWORD <|@ <|@
      nr   30  <|@ instruction r10|DWORD = ADD (x: rcx|DWORD, y: rdx|DWORD) size: DWORD <|@ <|@
      nr   32  <|@ st <@st|@live-base-pointers: []
Queens.getRowColumn(int, int) [bci: 0]
locals: rsi|QWORD[.] rdx|DWORD rcx|DWORD 
>@ <|@ instruction CMPBRANCH (x: r10|DWORD, y: [rax|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B3 -> B4 falseDestination: B3 -> B10 size: DWORD state [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B5" "B6" 
    xhandlers
    flags 
    probability 4600595904344988058
    begin_IR
      LIR
      nr   34  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   36  <|@ instruction CMPCONSTBRANCH x: [r10|DWORD + rax|DWORD[_] * 8 + 16] trueDestinationProbability: 0.2860772357723577 condition: = trueDestination: B4 -> B5 falseDestination: B4 -> B6 y: 0 size: BYTE inlinedY: null <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B4" 
    successors "B7" "B9" 
    xhandlers
    flags 
    probability 4598615024196386816
    begin_IR
      LIR
      nr   38  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   40  <|@ instruction rax|DWORD[_] = MOV input: [rsi|QWORD[.] + 20] size: DWORD <|@ <|@
      nr   42  <|@ instruction r10|DWORD = SUB (x: rcx|DWORD, ~y: rdx|DWORD) size: DWORD <|@ <|@
      nr   44  <|@ instruction r10|DWORD = LEA address: [r10|DWORD + 7] size: DWORD <|@ <|@
      nr   46  <|@ st <@st|@live-base-pointers: []
Queens.getRowColumn(int, int) [bci: 0]
locals: rsi|QWORD[.] rdx|DWORD rcx|DWORD 
>@ <|@ instruction CMPBRANCH (x: r10|DWORD, y: [rax|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B6 -> B7 falseDestination: B6 -> B9 size: DWORD state [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B8" 
    xhandlers
    flags 
    probability 4598615024196386816
    begin_IR
      LIR
      nr   48  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   50  <|@ instruction rax|DWORD = MOVZXB input: [r10|DWORD + rax|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr   52  <|@ instruction JUMP ~outgoingValues: [] destination: B7 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B4" 
    successors "B8" 
    xhandlers
    flags 
    probability 4592587941257569895
    begin_IR
      LIR
      nr   54  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction rax|DWORD = MOVE input: int[0|0x0] // MoveResolver resolve mapping <|@ <|@
      nr   56  <|@ instruction JUMP ~outgoingValues: [] destination: B5 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B7" "B2" "B5" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   58  <|@ instruction [] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr   62  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@3dbf6f45 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B12" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   64  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-12571|0xffffffffffffcee5] // MoveResolver resolve mapping <|@ <|@
      nr   66  <|@ instruction JUMP ~outgoingValues: [] destination: B11 -> B12 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B12" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   68  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-16923|0xffffffffffffbde5] // MoveResolver resolve mapping <|@ <|@
      nr   70  <|@ instruction JUMP ~outgoingValues: [] destination: B10 -> B12 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B12" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   72  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-21531|0xffffffffffffabe5] // MoveResolver resolve mapping <|@ <|@
      nr   74  <|@ instruction JUMP ~outgoingValues: [] destination: B9 -> B12 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B11" "B10" "B9" 
    successors 
    xhandlers
    flags 
    probability 2362138004555825152
    begin_IR
      LIR
      nr   76  <|@ instruction [] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr   78  <|@ instruction MOV (x: [r15|QWORD + 1156], y: r10|DWORD) size: DWORD <|@ <|@
      nr   80  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr   82  <|@ st <@st|@live-base-pointers: []
Queens.getRowColumn(int, int) [bci: 0]
locals: rsi|QWORD[.] rdx|DWORD rcx|DWORD 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: aload_0       
     1: getfield      #3          // freeRows:boolean[]
     4: iload_1       
     5: baload        
     6: ifeq          38
     9: aload_0       
    10: getfield      #5          // freeMaxs:boolean[]
    13: iload_2       
    14: iload_1       
    15: iadd          
    16: baload        
    17: ifeq          38
    20: aload_0       
    21: getfield      #6          // freeMins:boolean[]
    24: iload_2       
    25: iload_1       
    26: isub          
    27: bipush        7
    29: iadd          
    30: baload        
    31: ifeq          38
    34: iconst_1      
    35: goto          39
    38: iconst_0      
    39: ireturn       
   <|@
end_bytecodes
begin_cfg
  name "After RedundantMoveElimination"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B11" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|QWORD[.], rdx|DWORD, rcx|DWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr    4  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@6bd31264 slotKind: QWORD <|@ <|@
      nr   12  <|@ instruction rax|DWORD[_] = MOV input: [rsi|QWORD[.] + 16] size: DWORD <|@ <|@
      nr   14  <|@ st <@st|@live-base-pointers: []
Queens.getRowColumn(int, int) [bci: 0]
locals: rsi|QWORD[.] rdx|DWORD rcx|DWORD 
>@ <|@ instruction CMPBRANCH (x: rdx|DWORD, y: [rax|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B0 -> B1 falseDestination: B0 -> B11 size: DWORD state [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B3" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   16  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   18  <|@ instruction r10|QWORD = MOV value: rdx|DWORD size: DWORD <|@ <|@
      nr   20  <|@ instruction CMPCONSTBRANCH x: [r10|QWORD + rax|DWORD[_] * 8 + 16] trueDestinationProbability: 0.615625 condition: = trueDestination: B1 -> B2 falseDestination: B1 -> B3 y: 0 size: BYTE inlinedY: null <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B8" 
    xhandlers
    flags 
    probability 4603720276586476339
    begin_IR
      LIR
      nr   22  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction rax|DWORD = MOVE input: int[0|0x0] // MoveResolver resolve mapping <|@ <|@
      nr   24  <|@ instruction JUMP ~outgoingValues: [] destination: B2 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B4" "B10" 
    xhandlers
    flags 
    probability 4600595904344988058
    begin_IR
      LIR
      nr   26  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   28  <|@ instruction rax|DWORD[_] = MOV input: [rsi|QWORD[.] + 12] size: DWORD <|@ <|@
      nr   30  <|@ instruction r10|DWORD = ADD (x: rcx|DWORD, y: rdx|DWORD) size: DWORD <|@ <|@
      nr   32  <|@ st <@st|@live-base-pointers: []
Queens.getRowColumn(int, int) [bci: 0]
locals: rsi|QWORD[.] rdx|DWORD rcx|DWORD 
>@ <|@ instruction CMPBRANCH (x: r10|DWORD, y: [rax|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B3 -> B4 falseDestination: B3 -> B10 size: DWORD state [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B5" "B6" 
    xhandlers
    flags 
    probability 4600595904344988058
    begin_IR
      LIR
      nr   34  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   36  <|@ instruction CMPCONSTBRANCH x: [r10|DWORD + rax|DWORD[_] * 8 + 16] trueDestinationProbability: 0.2860772357723577 condition: = trueDestination: B4 -> B5 falseDestination: B4 -> B6 y: 0 size: BYTE inlinedY: null <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B4" 
    successors "B7" "B9" 
    xhandlers
    flags 
    probability 4598615024196386816
    begin_IR
      LIR
      nr   38  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   40  <|@ instruction rax|DWORD[_] = MOV input: [rsi|QWORD[.] + 20] size: DWORD <|@ <|@
      nr   42  <|@ instruction r10|DWORD = SUB (x: rcx|DWORD, ~y: rdx|DWORD) size: DWORD <|@ <|@
      nr   44  <|@ instruction r10|DWORD = LEA address: [r10|DWORD + 7] size: DWORD <|@ <|@
      nr   46  <|@ st <@st|@live-base-pointers: []
Queens.getRowColumn(int, int) [bci: 0]
locals: rsi|QWORD[.] rdx|DWORD rcx|DWORD 
>@ <|@ instruction CMPBRANCH (x: r10|DWORD, y: [rax|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B6 -> B7 falseDestination: B6 -> B9 size: DWORD state [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B8" 
    xhandlers
    flags 
    probability 4598615024196386816
    begin_IR
      LIR
      nr   48  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   50  <|@ instruction rax|DWORD = MOVZXB input: [r10|DWORD + rax|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr   52  <|@ instruction JUMP ~outgoingValues: [] destination: B7 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B4" 
    successors "B8" 
    xhandlers
    flags 
    probability 4592587941257569895
    begin_IR
      LIR
      nr   54  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction rax|DWORD = MOVE input: int[0|0x0] // MoveResolver resolve mapping <|@ <|@
      nr   56  <|@ instruction JUMP ~outgoingValues: [] destination: B5 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B7" "B2" "B5" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   58  <|@ instruction [] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr   62  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@3dbf6f45 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B12" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   64  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-12571|0xffffffffffffcee5] // MoveResolver resolve mapping <|@ <|@
      nr   66  <|@ instruction JUMP ~outgoingValues: [] destination: B11 -> B12 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B12" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   68  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-16923|0xffffffffffffbde5] // MoveResolver resolve mapping <|@ <|@
      nr   70  <|@ instruction JUMP ~outgoingValues: [] destination: B10 -> B12 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B12" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   72  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-21531|0xffffffffffffabe5] // MoveResolver resolve mapping <|@ <|@
      nr   74  <|@ instruction JUMP ~outgoingValues: [] destination: B9 -> B12 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B11" "B10" "B9" 
    successors 
    xhandlers
    flags 
    probability 2362138004555825152
    begin_IR
      LIR
      nr   76  <|@ instruction [] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr   78  <|@ instruction MOV (x: [r15|QWORD + 1156], y: r10|DWORD) size: DWORD <|@ <|@
      nr   80  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr   82  <|@ st <@st|@live-base-pointers: []
Queens.getRowColumn(int, int) [bci: 0]
locals: rsi|QWORD[.] rdx|DWORD rcx|DWORD 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: aload_0       
     1: getfield      #3          // freeRows:boolean[]
     4: iload_1       
     5: baload        
     6: ifeq          38
     9: aload_0       
    10: getfield      #5          // freeMaxs:boolean[]
    13: iload_2       
    14: iload_1       
    15: iadd          
    16: baload        
    17: ifeq          38
    20: aload_0       
    21: getfield      #6          // freeMins:boolean[]
    24: iload_2       
    25: iload_1       
    26: isub          
    27: bipush        7
    29: iadd          
    30: baload        
    31: ifeq          38
    34: iconst_1      
    35: goto          39
    38: iconst_0      
    39: ireturn       
   <|@
end_bytecodes
begin_cfg
  name "After NullCheckOptimizer"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B11" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|QWORD[.], rdx|DWORD, rcx|DWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr    4  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@6bd31264 slotKind: QWORD <|@ <|@
      nr   12  <|@ instruction rax|DWORD[_] = MOV input: [rsi|QWORD[.] + 16] size: DWORD <|@ <|@
      nr   14  <|@ st <@st|@live-base-pointers: []
Queens.getRowColumn(int, int) [bci: 0]
locals: rsi|QWORD[.] rdx|DWORD rcx|DWORD 
>@ <|@ instruction CMPBRANCH (x: rdx|DWORD, y: [rax|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B0 -> B1 falseDestination: B0 -> B11 size: DWORD state [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B3" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   16  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   18  <|@ instruction r10|QWORD = MOV value: rdx|DWORD size: DWORD <|@ <|@
      nr   20  <|@ instruction CMPCONSTBRANCH x: [r10|QWORD + rax|DWORD[_] * 8 + 16] trueDestinationProbability: 0.615625 condition: = trueDestination: B1 -> B2 falseDestination: B1 -> B3 y: 0 size: BYTE inlinedY: null <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B8" 
    xhandlers
    flags 
    probability 4603720276586476339
    begin_IR
      LIR
      nr   22  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction rax|DWORD = MOVE input: int[0|0x0] // MoveResolver resolve mapping <|@ <|@
      nr   24  <|@ instruction JUMP ~outgoingValues: [] destination: B2 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B4" "B10" 
    xhandlers
    flags 
    probability 4600595904344988058
    begin_IR
      LIR
      nr   26  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   28  <|@ instruction rax|DWORD[_] = MOV input: [rsi|QWORD[.] + 12] size: DWORD <|@ <|@
      nr   30  <|@ instruction r10|DWORD = ADD (x: rcx|DWORD, y: rdx|DWORD) size: DWORD <|@ <|@
      nr   32  <|@ st <@st|@live-base-pointers: []
Queens.getRowColumn(int, int) [bci: 0]
locals: rsi|QWORD[.] rdx|DWORD rcx|DWORD 
>@ <|@ instruction CMPBRANCH (x: r10|DWORD, y: [rax|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B3 -> B4 falseDestination: B3 -> B10 size: DWORD state [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B5" "B6" 
    xhandlers
    flags 
    probability 4600595904344988058
    begin_IR
      LIR
      nr   34  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   36  <|@ instruction CMPCONSTBRANCH x: [r10|DWORD + rax|DWORD[_] * 8 + 16] trueDestinationProbability: 0.2860772357723577 condition: = trueDestination: B4 -> B5 falseDestination: B4 -> B6 y: 0 size: BYTE inlinedY: null <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B4" 
    successors "B7" "B9" 
    xhandlers
    flags 
    probability 4598615024196386816
    begin_IR
      LIR
      nr   38  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   40  <|@ instruction rax|DWORD[_] = MOV input: [rsi|QWORD[.] + 20] size: DWORD <|@ <|@
      nr   42  <|@ instruction r10|DWORD = SUB (x: rcx|DWORD, ~y: rdx|DWORD) size: DWORD <|@ <|@
      nr   44  <|@ instruction r10|DWORD = LEA address: [r10|DWORD + 7] size: DWORD <|@ <|@
      nr   46  <|@ st <@st|@live-base-pointers: []
Queens.getRowColumn(int, int) [bci: 0]
locals: rsi|QWORD[.] rdx|DWORD rcx|DWORD 
>@ <|@ instruction CMPBRANCH (x: r10|DWORD, y: [rax|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B6 -> B7 falseDestination: B6 -> B9 size: DWORD state [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B8" 
    xhandlers
    flags 
    probability 4598615024196386816
    begin_IR
      LIR
      nr   48  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   50  <|@ instruction rax|DWORD = MOVZXB input: [r10|DWORD + rax|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr   52  <|@ instruction JUMP ~outgoingValues: [] destination: B7 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B4" 
    successors "B8" 
    xhandlers
    flags 
    probability 4592587941257569895
    begin_IR
      LIR
      nr   54  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction rax|DWORD = MOVE input: int[0|0x0] // MoveResolver resolve mapping <|@ <|@
      nr   56  <|@ instruction JUMP ~outgoingValues: [] destination: B5 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B7" "B2" "B5" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   58  <|@ instruction [] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr   62  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@3dbf6f45 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B12" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   64  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-12571|0xffffffffffffcee5] // MoveResolver resolve mapping <|@ <|@
      nr   66  <|@ instruction JUMP ~outgoingValues: [] destination: B11 -> B12 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B12" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   68  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-16923|0xffffffffffffbde5] // MoveResolver resolve mapping <|@ <|@
      nr   70  <|@ instruction JUMP ~outgoingValues: [] destination: B10 -> B12 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B12" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   72  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-21531|0xffffffffffffabe5] // MoveResolver resolve mapping <|@ <|@
      nr   74  <|@ instruction JUMP ~outgoingValues: [] destination: B9 -> B12 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B11" "B10" "B9" 
    successors 
    xhandlers
    flags 
    probability 2362138004555825152
    begin_IR
      LIR
      nr   76  <|@ instruction [] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr   78  <|@ instruction MOV (x: [r15|QWORD + 1156], y: r10|DWORD) size: DWORD <|@ <|@
      nr   80  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr   82  <|@ st <@st|@live-base-pointers: []
Queens.getRowColumn(int, int) [bci: 0]
locals: rsi|QWORD[.] rdx|DWORD rcx|DWORD 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: aload_0       
     1: getfield      #3          // freeRows:boolean[]
     4: iload_1       
     5: baload        
     6: ifeq          38
     9: aload_0       
    10: getfield      #5          // freeMaxs:boolean[]
    13: iload_2       
    14: iload_1       
    15: iadd          
    16: baload        
    17: ifeq          38
    20: aload_0       
    21: getfield      #6          // freeMins:boolean[]
    24: iload_2       
    25: iload_1       
    26: isub          
    27: bipush        7
    29: iadd          
    30: baload        
    31: ifeq          38
    34: iconst_1      
    35: goto          39
    38: iconst_0      
    39: ireturn       
   <|@
end_bytecodes
begin_cfg
  name "After ControlFlowOptimizer"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B11" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|QWORD[.], rdx|DWORD, rcx|DWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr    4  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@6bd31264 slotKind: QWORD <|@ <|@
      nr   12  <|@ instruction rax|DWORD[_] = MOV input: [rsi|QWORD[.] + 16] size: DWORD <|@ <|@
      nr   14  <|@ st <@st|@live-base-pointers: []
Queens.getRowColumn(int, int) [bci: 0]
locals: rsi|QWORD[.] rdx|DWORD rcx|DWORD 
>@ <|@ instruction CMPBRANCH (x: rdx|DWORD, y: [rax|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B0 -> B1 falseDestination: B0 -> B11 size: DWORD state [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B3" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   16  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   18  <|@ instruction r10|QWORD = MOV value: rdx|DWORD size: DWORD <|@ <|@
      nr   20  <|@ instruction CMPCONSTBRANCH x: [r10|QWORD + rax|DWORD[_] * 8 + 16] trueDestinationProbability: 0.615625 condition: = trueDestination: B1 -> B2 falseDestination: B1 -> B3 y: 0 size: BYTE inlinedY: null <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B8" 
    xhandlers
    flags 
    probability 4603720276586476339
    begin_IR
      LIR
      nr   22  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction rax|DWORD = MOVE input: int[0|0x0] // MoveResolver resolve mapping <|@ <|@
      nr   24  <|@ instruction JUMP ~outgoingValues: [] destination: B2 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B4" "B10" 
    xhandlers
    flags 
    probability 4600595904344988058
    begin_IR
      LIR
      nr   26  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   28  <|@ instruction rax|DWORD[_] = MOV input: [rsi|QWORD[.] + 12] size: DWORD <|@ <|@
      nr   30  <|@ instruction r10|DWORD = ADD (x: rcx|DWORD, y: rdx|DWORD) size: DWORD <|@ <|@
      nr   32  <|@ st <@st|@live-base-pointers: []
Queens.getRowColumn(int, int) [bci: 0]
locals: rsi|QWORD[.] rdx|DWORD rcx|DWORD 
>@ <|@ instruction CMPBRANCH (x: r10|DWORD, y: [rax|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B3 -> B4 falseDestination: B3 -> B10 size: DWORD state [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B5" "B6" 
    xhandlers
    flags 
    probability 4600595904344988058
    begin_IR
      LIR
      nr   34  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   36  <|@ instruction CMPCONSTBRANCH x: [r10|DWORD + rax|DWORD[_] * 8 + 16] trueDestinationProbability: 0.2860772357723577 condition: = trueDestination: B4 -> B5 falseDestination: B4 -> B6 y: 0 size: BYTE inlinedY: null <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B4" 
    successors "B7" "B9" 
    xhandlers
    flags 
    probability 4598615024196386816
    begin_IR
      LIR
      nr   38  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   40  <|@ instruction rax|DWORD[_] = MOV input: [rsi|QWORD[.] + 20] size: DWORD <|@ <|@
      nr   42  <|@ instruction r10|DWORD = SUB (x: rcx|DWORD, ~y: rdx|DWORD) size: DWORD <|@ <|@
      nr   44  <|@ instruction r10|DWORD = LEA address: [r10|DWORD + 7] size: DWORD <|@ <|@
      nr   46  <|@ st <@st|@live-base-pointers: []
Queens.getRowColumn(int, int) [bci: 0]
locals: rsi|QWORD[.] rdx|DWORD rcx|DWORD 
>@ <|@ instruction CMPBRANCH (x: r10|DWORD, y: [rax|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B6 -> B7 falseDestination: B6 -> B9 size: DWORD state [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B8" 
    xhandlers
    flags 
    probability 4598615024196386816
    begin_IR
      LIR
      nr   48  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   50  <|@ instruction rax|DWORD = MOVZXB input: [r10|DWORD + rax|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr   52  <|@ instruction JUMP ~outgoingValues: [] destination: B7 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B4" 
    successors "B8" 
    xhandlers
    flags 
    probability 4592587941257569895
    begin_IR
      LIR
      nr   54  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction rax|DWORD = MOVE input: int[0|0x0] // MoveResolver resolve mapping <|@ <|@
      nr   56  <|@ instruction JUMP ~outgoingValues: [] destination: B5 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B7" "B2" "B5" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   58  <|@ instruction [] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr   62  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@3dbf6f45 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B12" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   64  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-12571|0xffffffffffffcee5] // MoveResolver resolve mapping <|@ <|@
      nr   66  <|@ instruction JUMP ~outgoingValues: [] destination: B11 -> B12 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B12" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   68  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-16923|0xffffffffffffbde5] // MoveResolver resolve mapping <|@ <|@
      nr   70  <|@ instruction JUMP ~outgoingValues: [] destination: B10 -> B12 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B12" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   72  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-21531|0xffffffffffffabe5] // MoveResolver resolve mapping <|@ <|@
      nr   74  <|@ instruction JUMP ~outgoingValues: [] destination: B9 -> B12 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B11" "B10" "B9" 
    successors 
    xhandlers
    flags 
    probability 2362138004555825152
    begin_IR
      LIR
      nr   76  <|@ instruction [] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr   78  <|@ instruction MOV (x: [r15|QWORD + 1156], y: r10|DWORD) size: DWORD <|@ <|@
      nr   80  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr   82  <|@ st <@st|@live-base-pointers: []
Queens.getRowColumn(int, int) [bci: 0]
locals: rsi|QWORD[.] rdx|DWORD rcx|DWORD 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: aload_0       
     1: getfield      #3          // freeRows:boolean[]
     4: iload_1       
     5: baload        
     6: ifeq          38
     9: aload_0       
    10: getfield      #5          // freeMaxs:boolean[]
    13: iload_2       
    14: iload_1       
    15: iadd          
    16: baload        
    17: ifeq          38
    20: aload_0       
    21: getfield      #6          // freeMins:boolean[]
    24: iload_2       
    25: iload_1       
    26: isub          
    27: bipush        7
    29: iadd          
    30: baload        
    31: ifeq          38
    34: iconst_1      
    35: goto          39
    38: iconst_0      
    39: ireturn       
   <|@
end_bytecodes
begin_cfg
  name "After ComputeCodeEmissionOrder"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B11" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|QWORD[.], rdx|DWORD, rcx|DWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr    4  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@6bd31264 slotKind: QWORD <|@ <|@
      nr   12  <|@ instruction rax|DWORD[_] = MOV input: [rsi|QWORD[.] + 16] size: DWORD <|@ <|@
      nr   14  <|@ st <@st|@live-base-pointers: []
Queens.getRowColumn(int, int) [bci: 0]
locals: rsi|QWORD[.] rdx|DWORD rcx|DWORD 
>@ <|@ instruction CMPBRANCH (x: rdx|DWORD, y: [rax|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B0 -> B1 falseDestination: B0 -> B11 size: DWORD state [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B3" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   16  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   18  <|@ instruction r10|QWORD = MOV value: rdx|DWORD size: DWORD <|@ <|@
      nr   20  <|@ instruction CMPCONSTBRANCH x: [r10|QWORD + rax|DWORD[_] * 8 + 16] trueDestinationProbability: 0.615625 condition: = trueDestination: B1 -> B2 falseDestination: B1 -> B3 y: 0 size: BYTE inlinedY: null <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B8" 
    xhandlers
    flags 
    probability 4603720276586476339
    begin_IR
      LIR
      nr   22  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction rax|DWORD = MOVE input: int[0|0x0] // MoveResolver resolve mapping <|@ <|@
      nr   24  <|@ instruction JUMP ~outgoingValues: [] destination: B2 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B7" "B2" "B5" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   58  <|@ instruction [] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr   62  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@3dbf6f45 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B4" "B10" 
    xhandlers
    flags 
    probability 4600595904344988058
    begin_IR
      LIR
      nr   26  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   28  <|@ instruction rax|DWORD[_] = MOV input: [rsi|QWORD[.] + 12] size: DWORD <|@ <|@
      nr   30  <|@ instruction r10|DWORD = ADD (x: rcx|DWORD, y: rdx|DWORD) size: DWORD <|@ <|@
      nr   32  <|@ st <@st|@live-base-pointers: []
Queens.getRowColumn(int, int) [bci: 0]
locals: rsi|QWORD[.] rdx|DWORD rcx|DWORD 
>@ <|@ instruction CMPBRANCH (x: r10|DWORD, y: [rax|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B3 -> B4 falseDestination: B3 -> B10 size: DWORD state [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B5" "B6" 
    xhandlers
    flags 
    probability 4600595904344988058
    begin_IR
      LIR
      nr   34  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   36  <|@ instruction CMPCONSTBRANCH x: [r10|DWORD + rax|DWORD[_] * 8 + 16] trueDestinationProbability: 0.2860772357723577 condition: = trueDestination: B4 -> B5 falseDestination: B4 -> B6 y: 0 size: BYTE inlinedY: null <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B4" 
    successors "B7" "B9" 
    xhandlers
    flags 
    probability 4598615024196386816
    begin_IR
      LIR
      nr   38  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   40  <|@ instruction rax|DWORD[_] = MOV input: [rsi|QWORD[.] + 20] size: DWORD <|@ <|@
      nr   42  <|@ instruction r10|DWORD = SUB (x: rcx|DWORD, ~y: rdx|DWORD) size: DWORD <|@ <|@
      nr   44  <|@ instruction r10|DWORD = LEA address: [r10|DWORD + 7] size: DWORD <|@ <|@
      nr   46  <|@ st <@st|@live-base-pointers: []
Queens.getRowColumn(int, int) [bci: 0]
locals: rsi|QWORD[.] rdx|DWORD rcx|DWORD 
>@ <|@ instruction CMPBRANCH (x: r10|DWORD, y: [rax|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B6 -> B7 falseDestination: B6 -> B9 size: DWORD state [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B8" 
    xhandlers
    flags 
    probability 4598615024196386816
    begin_IR
      LIR
      nr   48  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   50  <|@ instruction rax|DWORD = MOVZXB input: [r10|DWORD + rax|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr   52  <|@ instruction JUMP ~outgoingValues: [] destination: B7 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B4" 
    successors "B8" 
    xhandlers
    flags 
    probability 4592587941257569895
    begin_IR
      LIR
      nr   54  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction rax|DWORD = MOVE input: int[0|0x0] // MoveResolver resolve mapping <|@ <|@
      nr   56  <|@ instruction JUMP ~outgoingValues: [] destination: B5 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B12" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   64  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-12571|0xffffffffffffcee5] // MoveResolver resolve mapping <|@ <|@
      nr   66  <|@ instruction JUMP ~outgoingValues: [] destination: B11 -> B12 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B11" "B10" "B9" 
    successors 
    xhandlers
    flags 
    probability 2362138004555825152
    begin_IR
      LIR
      nr   76  <|@ instruction [] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr   78  <|@ instruction MOV (x: [r15|QWORD + 1156], y: r10|DWORD) size: DWORD <|@ <|@
      nr   80  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr   82  <|@ st <@st|@live-base-pointers: []
Queens.getRowColumn(int, int) [bci: 0]
locals: rsi|QWORD[.] rdx|DWORD rcx|DWORD 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B12" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   68  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-16923|0xffffffffffffbde5] // MoveResolver resolve mapping <|@ <|@
      nr   70  <|@ instruction JUMP ~outgoingValues: [] destination: B10 -> B12 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B12" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   72  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-21531|0xffffffffffffabe5] // MoveResolver resolve mapping <|@ <|@
      nr   74  <|@ instruction JUMP ~outgoingValues: [] destination: B9 -> B12 <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: aload_0       
     1: getfield      #3          // freeRows:boolean[]
     4: iload_1       
     5: baload        
     6: ifeq          38
     9: aload_0       
    10: getfield      #5          // freeMaxs:boolean[]
    13: iload_2       
    14: iload_1       
    15: iadd          
    16: baload        
    17: ifeq          38
    20: aload_0       
    21: getfield      #6          // freeMins:boolean[]
    24: iload_2       
    25: iload_1       
    26: isub          
    27: bipush        7
    29: iadd          
    30: baload        
    31: ifeq          38
    34: iconst_1      
    35: goto          39
    38: iconst_0      
    39: ireturn       
   <|@
end_bytecodes
begin_cfg
  name "After StackMoveOptimization"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B11" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|QWORD[.], rdx|DWORD, rcx|DWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr    4  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@6bd31264 slotKind: QWORD <|@ <|@
      nr   12  <|@ instruction rax|DWORD[_] = MOV input: [rsi|QWORD[.] + 16] size: DWORD <|@ <|@
      nr   14  <|@ st <@st|@live-base-pointers: []
Queens.getRowColumn(int, int) [bci: 0]
locals: rsi|QWORD[.] rdx|DWORD rcx|DWORD 
>@ <|@ instruction CMPBRANCH (x: rdx|DWORD, y: [rax|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B0 -> B1 falseDestination: B0 -> B11 size: DWORD state [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B3" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   16  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   18  <|@ instruction r10|QWORD = MOV value: rdx|DWORD size: DWORD <|@ <|@
      nr   20  <|@ instruction CMPCONSTBRANCH x: [r10|QWORD + rax|DWORD[_] * 8 + 16] trueDestinationProbability: 0.615625 condition: = trueDestination: B1 -> B2 falseDestination: B1 -> B3 y: 0 size: BYTE inlinedY: null <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B8" 
    xhandlers
    flags 
    probability 4603720276586476339
    begin_IR
      LIR
      nr   22  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction rax|DWORD = MOVE input: int[0|0x0] // MoveResolver resolve mapping <|@ <|@
      nr   24  <|@ instruction JUMP ~outgoingValues: [] destination: B2 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B7" "B2" "B5" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   58  <|@ instruction [] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr   62  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@3dbf6f45 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B4" "B10" 
    xhandlers
    flags 
    probability 4600595904344988058
    begin_IR
      LIR
      nr   26  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   28  <|@ instruction rax|DWORD[_] = MOV input: [rsi|QWORD[.] + 12] size: DWORD <|@ <|@
      nr   30  <|@ instruction r10|DWORD = ADD (x: rcx|DWORD, y: rdx|DWORD) size: DWORD <|@ <|@
      nr   32  <|@ st <@st|@live-base-pointers: []
Queens.getRowColumn(int, int) [bci: 0]
locals: rsi|QWORD[.] rdx|DWORD rcx|DWORD 
>@ <|@ instruction CMPBRANCH (x: r10|DWORD, y: [rax|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B3 -> B4 falseDestination: B3 -> B10 size: DWORD state [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B5" "B6" 
    xhandlers
    flags 
    probability 4600595904344988058
    begin_IR
      LIR
      nr   34  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   36  <|@ instruction CMPCONSTBRANCH x: [r10|DWORD + rax|DWORD[_] * 8 + 16] trueDestinationProbability: 0.2860772357723577 condition: = trueDestination: B4 -> B5 falseDestination: B4 -> B6 y: 0 size: BYTE inlinedY: null <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B4" 
    successors "B7" "B9" 
    xhandlers
    flags 
    probability 4598615024196386816
    begin_IR
      LIR
      nr   38  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   40  <|@ instruction rax|DWORD[_] = MOV input: [rsi|QWORD[.] + 20] size: DWORD <|@ <|@
      nr   42  <|@ instruction r10|DWORD = SUB (x: rcx|DWORD, ~y: rdx|DWORD) size: DWORD <|@ <|@
      nr   44  <|@ instruction r10|DWORD = LEA address: [r10|DWORD + 7] size: DWORD <|@ <|@
      nr   46  <|@ st <@st|@live-base-pointers: []
Queens.getRowColumn(int, int) [bci: 0]
locals: rsi|QWORD[.] rdx|DWORD rcx|DWORD 
>@ <|@ instruction CMPBRANCH (x: r10|DWORD, y: [rax|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B6 -> B7 falseDestination: B6 -> B9 size: DWORD state [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B8" 
    xhandlers
    flags 
    probability 4598615024196386816
    begin_IR
      LIR
      nr   48  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   50  <|@ instruction rax|DWORD = MOVZXB input: [r10|DWORD + rax|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr   52  <|@ instruction JUMP ~outgoingValues: [] destination: B7 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B4" 
    successors "B8" 
    xhandlers
    flags 
    probability 4592587941257569895
    begin_IR
      LIR
      nr   54  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction rax|DWORD = MOVE input: int[0|0x0] // MoveResolver resolve mapping <|@ <|@
      nr   56  <|@ instruction JUMP ~outgoingValues: [] destination: B5 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B12" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   64  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-12571|0xffffffffffffcee5] // MoveResolver resolve mapping <|@ <|@
      nr   66  <|@ instruction JUMP ~outgoingValues: [] destination: B11 -> B12 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B11" "B10" "B9" 
    successors 
    xhandlers
    flags 
    probability 2362138004555825152
    begin_IR
      LIR
      nr   76  <|@ instruction [] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr   78  <|@ instruction MOV (x: [r15|QWORD + 1156], y: r10|DWORD) size: DWORD <|@ <|@
      nr   80  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr   82  <|@ st <@st|@live-base-pointers: []
Queens.getRowColumn(int, int) [bci: 0]
locals: rsi|QWORD[.] rdx|DWORD rcx|DWORD 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B12" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   68  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-16923|0xffffffffffffbde5] // MoveResolver resolve mapping <|@ <|@
      nr   70  <|@ instruction JUMP ~outgoingValues: [] destination: B10 -> B12 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B12" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   72  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-21531|0xffffffffffffabe5] // MoveResolver resolve mapping <|@ <|@
      nr   74  <|@ instruction JUMP ~outgoingValues: [] destination: B9 -> B12 <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: aload_0       
     1: getfield      #3          // freeRows:boolean[]
     4: iload_1       
     5: baload        
     6: ifeq          38
     9: aload_0       
    10: getfield      #5          // freeMaxs:boolean[]
    13: iload_2       
    14: iload_1       
    15: iadd          
    16: baload        
    17: ifeq          38
    20: aload_0       
    21: getfield      #6          // freeMins:boolean[]
    24: iload_2       
    25: iload_1       
    26: isub          
    27: bipush        7
    29: iadd          
    30: baload        
    31: ifeq          38
    34: iconst_1      
    35: goto          39
    38: iconst_0      
    39: ireturn       
   <|@
end_bytecodes
begin_cfg
  name "After PostAllocationOptimizationStage"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B11" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|QWORD[.], rdx|DWORD, rcx|DWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr    4  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@6bd31264 slotKind: QWORD <|@ <|@
      nr   12  <|@ instruction rax|DWORD[_] = MOV input: [rsi|QWORD[.] + 16] size: DWORD <|@ <|@
      nr   14  <|@ st <@st|@live-base-pointers: []
Queens.getRowColumn(int, int) [bci: 0]
locals: rsi|QWORD[.] rdx|DWORD rcx|DWORD 
>@ <|@ instruction CMPBRANCH (x: rdx|DWORD, y: [rax|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B0 -> B1 falseDestination: B0 -> B11 size: DWORD state [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B3" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   16  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   18  <|@ instruction r10|QWORD = MOV value: rdx|DWORD size: DWORD <|@ <|@
      nr   20  <|@ instruction CMPCONSTBRANCH x: [r10|QWORD + rax|DWORD[_] * 8 + 16] trueDestinationProbability: 0.615625 condition: = trueDestination: B1 -> B2 falseDestination: B1 -> B3 y: 0 size: BYTE inlinedY: null <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B8" 
    xhandlers
    flags 
    probability 4603720276586476339
    begin_IR
      LIR
      nr   22  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction rax|DWORD = MOVE input: int[0|0x0] // MoveResolver resolve mapping <|@ <|@
      nr   24  <|@ instruction JUMP ~outgoingValues: [] destination: B2 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B7" "B2" "B5" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   58  <|@ instruction [] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr   62  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@3dbf6f45 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B4" "B10" 
    xhandlers
    flags 
    probability 4600595904344988058
    begin_IR
      LIR
      nr   26  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   28  <|@ instruction rax|DWORD[_] = MOV input: [rsi|QWORD[.] + 12] size: DWORD <|@ <|@
      nr   30  <|@ instruction r10|DWORD = ADD (x: rcx|DWORD, y: rdx|DWORD) size: DWORD <|@ <|@
      nr   32  <|@ st <@st|@live-base-pointers: []
Queens.getRowColumn(int, int) [bci: 0]
locals: rsi|QWORD[.] rdx|DWORD rcx|DWORD 
>@ <|@ instruction CMPBRANCH (x: r10|DWORD, y: [rax|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B3 -> B4 falseDestination: B3 -> B10 size: DWORD state [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B5" "B6" 
    xhandlers
    flags 
    probability 4600595904344988058
    begin_IR
      LIR
      nr   34  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   36  <|@ instruction CMPCONSTBRANCH x: [r10|DWORD + rax|DWORD[_] * 8 + 16] trueDestinationProbability: 0.2860772357723577 condition: = trueDestination: B4 -> B5 falseDestination: B4 -> B6 y: 0 size: BYTE inlinedY: null <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B4" 
    successors "B7" "B9" 
    xhandlers
    flags 
    probability 4598615024196386816
    begin_IR
      LIR
      nr   38  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   40  <|@ instruction rax|DWORD[_] = MOV input: [rsi|QWORD[.] + 20] size: DWORD <|@ <|@
      nr   42  <|@ instruction r10|DWORD = SUB (x: rcx|DWORD, ~y: rdx|DWORD) size: DWORD <|@ <|@
      nr   44  <|@ instruction r10|DWORD = LEA address: [r10|DWORD + 7] size: DWORD <|@ <|@
      nr   46  <|@ st <@st|@live-base-pointers: []
Queens.getRowColumn(int, int) [bci: 0]
locals: rsi|QWORD[.] rdx|DWORD rcx|DWORD 
>@ <|@ instruction CMPBRANCH (x: r10|DWORD, y: [rax|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B6 -> B7 falseDestination: B6 -> B9 size: DWORD state [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B8" 
    xhandlers
    flags 
    probability 4598615024196386816
    begin_IR
      LIR
      nr   48  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   50  <|@ instruction rax|DWORD = MOVZXB input: [r10|DWORD + rax|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr   52  <|@ instruction JUMP ~outgoingValues: [] destination: B7 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B4" 
    successors "B8" 
    xhandlers
    flags 
    probability 4592587941257569895
    begin_IR
      LIR
      nr   54  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction rax|DWORD = MOVE input: int[0|0x0] // MoveResolver resolve mapping <|@ <|@
      nr   56  <|@ instruction JUMP ~outgoingValues: [] destination: B5 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B12" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   64  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-12571|0xffffffffffffcee5] // MoveResolver resolve mapping <|@ <|@
      nr   66  <|@ instruction JUMP ~outgoingValues: [] destination: B11 -> B12 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B11" "B10" "B9" 
    successors 
    xhandlers
    flags 
    probability 2362138004555825152
    begin_IR
      LIR
      nr   76  <|@ instruction [] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr   78  <|@ instruction MOV (x: [r15|QWORD + 1156], y: r10|DWORD) size: DWORD <|@ <|@
      nr   80  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr   82  <|@ st <@st|@live-base-pointers: []
Queens.getRowColumn(int, int) [bci: 0]
locals: rsi|QWORD[.] rdx|DWORD rcx|DWORD 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B12" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   68  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-16923|0xffffffffffffbde5] // MoveResolver resolve mapping <|@ <|@
      nr   70  <|@ instruction JUMP ~outgoingValues: [] destination: B10 -> B12 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B12" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   72  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-21531|0xffffffffffffabe5] // MoveResolver resolve mapping <|@ <|@
      nr   74  <|@ instruction JUMP ~outgoingValues: [] destination: B9 -> B12 <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: aload_0       
     1: getfield      #3          // freeRows:boolean[]
     4: iload_1       
     5: baload        
     6: ifeq          38
     9: aload_0       
    10: getfield      #5          // freeMaxs:boolean[]
    13: iload_2       
    14: iload_1       
    15: iadd          
    16: baload        
    17: ifeq          38
    20: aload_0       
    21: getfield      #6          // freeMins:boolean[]
    24: iload_2       
    25: iload_1       
    26: isub          
    27: bipush        7
    29: iadd          
    30: baload        
    31: ifeq          38
    34: iconst_1      
    35: goto          39
    38: iconst_0      
    39: ireturn       
   <|@
end_bytecodes
begin_cfg
  name "After LocationMarker"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B11" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|QWORD[.], rdx|DWORD, rcx|DWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr    4  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@6bd31264 slotKind: QWORD <|@ <|@
      nr   12  <|@ instruction rax|DWORD[_] = MOV input: [rsi|QWORD[.] + 16] size: DWORD <|@ <|@
      nr   14  <|@ st <@st|@reference-map: [rax:0, rsi:0]
live-base-pointers: []
Queens.getRowColumn(int, int) [bci: 0]
locals: rsi|QWORD[.] rdx|DWORD rcx|DWORD 
>@ <|@ instruction CMPBRANCH (x: rdx|DWORD, y: [rax|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B0 -> B1 falseDestination: B0 -> B11 size: DWORD state [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B3" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   16  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   18  <|@ instruction r10|QWORD = MOV value: rdx|DWORD size: DWORD <|@ <|@
      nr   20  <|@ instruction CMPCONSTBRANCH x: [r10|QWORD + rax|DWORD[_] * 8 + 16] trueDestinationProbability: 0.615625 condition: = trueDestination: B1 -> B2 falseDestination: B1 -> B3 y: 0 size: BYTE inlinedY: null <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B8" 
    xhandlers
    flags 
    probability 4603720276586476339
    begin_IR
      LIR
      nr   22  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction rax|DWORD = MOVE input: int[0|0x0] // MoveResolver resolve mapping <|@ <|@
      nr   24  <|@ instruction JUMP ~outgoingValues: [] destination: B2 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B7" "B2" "B5" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   58  <|@ instruction [] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr   62  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@3dbf6f45 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B4" "B10" 
    xhandlers
    flags 
    probability 4600595904344988058
    begin_IR
      LIR
      nr   26  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   28  <|@ instruction rax|DWORD[_] = MOV input: [rsi|QWORD[.] + 12] size: DWORD <|@ <|@
      nr   30  <|@ instruction r10|DWORD = ADD (x: rcx|DWORD, y: rdx|DWORD) size: DWORD <|@ <|@
      nr   32  <|@ st <@st|@reference-map: [rax:0, rsi:0]
live-base-pointers: []
Queens.getRowColumn(int, int) [bci: 0]
locals: rsi|QWORD[.] rdx|DWORD rcx|DWORD 
>@ <|@ instruction CMPBRANCH (x: r10|DWORD, y: [rax|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B3 -> B4 falseDestination: B3 -> B10 size: DWORD state [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B5" "B6" 
    xhandlers
    flags 
    probability 4600595904344988058
    begin_IR
      LIR
      nr   34  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   36  <|@ instruction CMPCONSTBRANCH x: [r10|DWORD + rax|DWORD[_] * 8 + 16] trueDestinationProbability: 0.2860772357723577 condition: = trueDestination: B4 -> B5 falseDestination: B4 -> B6 y: 0 size: BYTE inlinedY: null <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B4" 
    successors "B7" "B9" 
    xhandlers
    flags 
    probability 4598615024196386816
    begin_IR
      LIR
      nr   38  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   40  <|@ instruction rax|DWORD[_] = MOV input: [rsi|QWORD[.] + 20] size: DWORD <|@ <|@
      nr   42  <|@ instruction r10|DWORD = SUB (x: rcx|DWORD, ~y: rdx|DWORD) size: DWORD <|@ <|@
      nr   44  <|@ instruction r10|DWORD = LEA address: [r10|DWORD + 7] size: DWORD <|@ <|@
      nr   46  <|@ st <@st|@reference-map: [rax:0, rsi:0]
live-base-pointers: []
Queens.getRowColumn(int, int) [bci: 0]
locals: rsi|QWORD[.] rdx|DWORD rcx|DWORD 
>@ <|@ instruction CMPBRANCH (x: r10|DWORD, y: [rax|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B6 -> B7 falseDestination: B6 -> B9 size: DWORD state [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B8" 
    xhandlers
    flags 
    probability 4598615024196386816
    begin_IR
      LIR
      nr   48  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   50  <|@ instruction rax|DWORD = MOVZXB input: [r10|DWORD + rax|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr   52  <|@ instruction JUMP ~outgoingValues: [] destination: B7 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B4" 
    successors "B8" 
    xhandlers
    flags 
    probability 4592587941257569895
    begin_IR
      LIR
      nr   54  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction rax|DWORD = MOVE input: int[0|0x0] // MoveResolver resolve mapping <|@ <|@
      nr   56  <|@ instruction JUMP ~outgoingValues: [] destination: B5 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B12" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   64  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-12571|0xffffffffffffcee5] // MoveResolver resolve mapping <|@ <|@
      nr   66  <|@ instruction JUMP ~outgoingValues: [] destination: B11 -> B12 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B11" "B10" "B9" 
    successors 
    xhandlers
    flags 
    probability 2362138004555825152
    begin_IR
      LIR
      nr   76  <|@ instruction [] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr   78  <|@ instruction MOV (x: [r15|QWORD + 1156], y: r10|DWORD) size: DWORD <|@ <|@
      nr   80  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr   82  <|@ st <@st|@reference-map: [rsi:0]
live-base-pointers: []
Queens.getRowColumn(int, int) [bci: 0]
locals: rsi|QWORD[.] rdx|DWORD rcx|DWORD 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B12" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   68  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-16923|0xffffffffffffbde5] // MoveResolver resolve mapping <|@ <|@
      nr   70  <|@ instruction JUMP ~outgoingValues: [] destination: B10 -> B12 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B12" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   72  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-21531|0xffffffffffffabe5] // MoveResolver resolve mapping <|@ <|@
      nr   74  <|@ instruction JUMP ~outgoingValues: [] destination: B9 -> B12 <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: aload_0       
     1: getfield      #3          // freeRows:boolean[]
     4: iload_1       
     5: baload        
     6: ifeq          38
     9: aload_0       
    10: getfield      #5          // freeMaxs:boolean[]
    13: iload_2       
    14: iload_1       
    15: iadd          
    16: baload        
    17: ifeq          38
    20: aload_0       
    21: getfield      #6          // freeMins:boolean[]
    24: iload_2       
    25: iload_1       
    26: isub          
    27: bipush        7
    29: iadd          
    30: baload        
    31: ifeq          38
    34: iconst_1      
    35: goto          39
    38: iconst_0      
    39: ireturn       
   <|@
end_bytecodes
begin_cfg
  name "After FinalCodeAnalysisStage"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B11" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|QWORD[.], rdx|DWORD, rcx|DWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr    4  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@6bd31264 slotKind: QWORD <|@ <|@
      nr   12  <|@ instruction rax|DWORD[_] = MOV input: [rsi|QWORD[.] + 16] size: DWORD <|@ <|@
      nr   14  <|@ st <@st|@reference-map: [rax:0, rsi:0]
live-base-pointers: []
Queens.getRowColumn(int, int) [bci: 0]
locals: rsi|QWORD[.] rdx|DWORD rcx|DWORD 
>@ <|@ instruction CMPBRANCH (x: rdx|DWORD, y: [rax|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B0 -> B1 falseDestination: B0 -> B11 size: DWORD state [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B3" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   16  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   18  <|@ instruction r10|QWORD = MOV value: rdx|DWORD size: DWORD <|@ <|@
      nr   20  <|@ instruction CMPCONSTBRANCH x: [r10|QWORD + rax|DWORD[_] * 8 + 16] trueDestinationProbability: 0.615625 condition: = trueDestination: B1 -> B2 falseDestination: B1 -> B3 y: 0 size: BYTE inlinedY: null <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B8" 
    xhandlers
    flags 
    probability 4603720276586476339
    begin_IR
      LIR
      nr   22  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction rax|DWORD = MOVE input: int[0|0x0] // MoveResolver resolve mapping <|@ <|@
      nr   24  <|@ instruction JUMP ~outgoingValues: [] destination: B2 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B7" "B2" "B5" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   58  <|@ instruction [] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr   62  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@3dbf6f45 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B4" "B10" 
    xhandlers
    flags 
    probability 4600595904344988058
    begin_IR
      LIR
      nr   26  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   28  <|@ instruction rax|DWORD[_] = MOV input: [rsi|QWORD[.] + 12] size: DWORD <|@ <|@
      nr   30  <|@ instruction r10|DWORD = ADD (x: rcx|DWORD, y: rdx|DWORD) size: DWORD <|@ <|@
      nr   32  <|@ st <@st|@reference-map: [rax:0, rsi:0]
live-base-pointers: []
Queens.getRowColumn(int, int) [bci: 0]
locals: rsi|QWORD[.] rdx|DWORD rcx|DWORD 
>@ <|@ instruction CMPBRANCH (x: r10|DWORD, y: [rax|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B3 -> B4 falseDestination: B3 -> B10 size: DWORD state [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B5" "B6" 
    xhandlers
    flags 
    probability 4600595904344988058
    begin_IR
      LIR
      nr   34  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   36  <|@ instruction CMPCONSTBRANCH x: [r10|DWORD + rax|DWORD[_] * 8 + 16] trueDestinationProbability: 0.2860772357723577 condition: = trueDestination: B4 -> B5 falseDestination: B4 -> B6 y: 0 size: BYTE inlinedY: null <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B4" 
    successors "B7" "B9" 
    xhandlers
    flags 
    probability 4598615024196386816
    begin_IR
      LIR
      nr   38  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   40  <|@ instruction rax|DWORD[_] = MOV input: [rsi|QWORD[.] + 20] size: DWORD <|@ <|@
      nr   42  <|@ instruction r10|DWORD = SUB (x: rcx|DWORD, ~y: rdx|DWORD) size: DWORD <|@ <|@
      nr   44  <|@ instruction r10|DWORD = LEA address: [r10|DWORD + 7] size: DWORD <|@ <|@
      nr   46  <|@ st <@st|@reference-map: [rax:0, rsi:0]
live-base-pointers: []
Queens.getRowColumn(int, int) [bci: 0]
locals: rsi|QWORD[.] rdx|DWORD rcx|DWORD 
>@ <|@ instruction CMPBRANCH (x: r10|DWORD, y: [rax|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B6 -> B7 falseDestination: B6 -> B9 size: DWORD state [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B8" 
    xhandlers
    flags 
    probability 4598615024196386816
    begin_IR
      LIR
      nr   48  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   50  <|@ instruction rax|DWORD = MOVZXB input: [r10|DWORD + rax|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr   52  <|@ instruction JUMP ~outgoingValues: [] destination: B7 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B4" 
    successors "B8" 
    xhandlers
    flags 
    probability 4592587941257569895
    begin_IR
      LIR
      nr   54  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction rax|DWORD = MOVE input: int[0|0x0] // MoveResolver resolve mapping <|@ <|@
      nr   56  <|@ instruction JUMP ~outgoingValues: [] destination: B5 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B12" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   64  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-12571|0xffffffffffffcee5] // MoveResolver resolve mapping <|@ <|@
      nr   66  <|@ instruction JUMP ~outgoingValues: [] destination: B11 -> B12 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B11" "B10" "B9" 
    successors 
    xhandlers
    flags 
    probability 2362138004555825152
    begin_IR
      LIR
      nr   76  <|@ instruction [] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr   78  <|@ instruction MOV (x: [r15|QWORD + 1156], y: r10|DWORD) size: DWORD <|@ <|@
      nr   80  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr   82  <|@ st <@st|@reference-map: [rsi:0]
live-base-pointers: []
Queens.getRowColumn(int, int) [bci: 0]
locals: rsi|QWORD[.] rdx|DWORD rcx|DWORD 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B12" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   68  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-16923|0xffffffffffffbde5] // MoveResolver resolve mapping <|@ <|@
      nr   70  <|@ instruction JUMP ~outgoingValues: [] destination: B10 -> B12 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B12" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   72  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-21531|0xffffffffffffabe5] // MoveResolver resolve mapping <|@ <|@
      nr   74  <|@ instruction JUMP ~outgoingValues: [] destination: B9 -> B12 <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: aload_0       
     1: getfield      #3          // freeRows:boolean[]
     4: iload_1       
     5: baload        
     6: ifeq          38
     9: aload_0       
    10: getfield      #5          // freeMaxs:boolean[]
    13: iload_2       
    14: iload_1       
    15: iadd          
    16: baload        
    17: ifeq          38
    20: aload_0       
    21: getfield      #6          // freeMins:boolean[]
    24: iload_2       
    25: iload_1       
    26: isub          
    27: bipush        7
    29: iadd          
    30: baload        
    31: ifeq          38
    34: iconst_1      
    35: goto          39
    38: iconst_0      
    39: ireturn       
   <|@
end_bytecodes
begin_cfg
  name "After code generation"
end_cfg
begin_nmethod
  <<<HexCodeFile
  Platform AMD64 64  <||@
  HexCode 0 448b560849bc000000b3e67f00004d03d44d33e4493bc20f85e3ffffff66669089842400c0feff4883ec189041817f20000000000f85c300000048896c24108b46103b14c50c0000000f8378000000448bd241807cc210000f851c000000b800000000488b6c24104883c418493ba7500400000f8794000000c38b460c448bd14403d2443b14c50c0000000f835c00000041807cc210000f84230000008b4614448bd1442bd2458d5207443b14c50c0000000f833d000000410fb644c210eba3b800000000eb9c41bae5ceffff4589978404000049c787900400000000000090e8000000000f1f84000000000041bae5bdffffebd841bae5abffffebd048896c2410e800000000e92efffffff4488d0d58ffffff49898f68040000e9e0fefffff441c78784040000f5d4ffff49c7879004000000000000e8000000000f1f84000000000041c78784040000f5c2ffff49c7879004000000000000e8000000000f1f84000000000041c78784040000f5b0ffff49c7879004000000000000666690e8000000000f1f840000000000e800000000f4e800000000f4  <||@
  Comment 0 UNVERIFIED_ENTRY  <||@
  Comment 23 {Field[name=CompilerToVM::Data::SharedRuntime_ic_miss_stub, type=address, offset=0, address=0x7fe723e335c8, value=140630366150784]:0x7fe70f04e080}  <||@
  Comment 32 [stack overflow check]  <||@
  Comment 32 VERIFIED_ENTRY  <||@
  Comment 44 FRAME_COMPLETE  <||@
  Comment 44 ENTRY_BARRIER_PATCH  <||@
  Comment 58 block B0 null  <||@
  Comment 58 0 [rsi|QWORD[.], rdx|DWORD, rcx|DWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 58 2 stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD  <||@
  Comment 63 4 [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@6bd31264 slotKind: QWORD  <||@
  Comment 63 12 rax|DWORD[_] = MOV input: [rsi|QWORD[.] + 16] size: DWORD  <||@
  Comment 66 14 CMPBRANCH (x: rdx|DWORD, y: [rax|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B0 -> B1 falseDestination: B0 -> B11 size: DWORD state [bci:0]  <||@
  Comment 66 [rax:0, rsi:0]at Queens.getRowColumn(int, int) [bci: 0, duringCall: false, rethrow: false]
              |0             |1          |2         
     locals:  |rsi|QWORD[.]  |rdx|DWORD  |rcx|DWORD   <||@
  Comment 66 {infopoint: IMPLICIT_EXCEPTION}  <||@
  Comment 79 block B1 null  <||@
  Comment 79 16 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 79 18 r10|QWORD = MOV value: rdx|DWORD size: DWORD  <||@
  Comment 82 20 CMPCONSTBRANCH x: [r10|QWORD + rax|DWORD[_] * 8 + 16] trueDestinationProbability: 0.615625 condition: = trueDestination: B1 -> B2 falseDestination: B1 -> B3 y: 0 size: BYTE inlinedY: null  <||@
  Comment 94 block B2 null  <||@
  Comment 94 22 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 94 -1 rax|DWORD = MOVE input: int[0|0x0]  <||@
  Comment 99 24 JUMP ~outgoingValues: [] destination: B2 -> B8  <||@
  Comment 99 block B8 null  <||@
  Comment 99 58 [] = LABEL alignment: 0 numbPhis: 1 label: ?  <||@
  Comment 99 62 RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@3dbf6f45  <||@
  Comment 108 POLL_RETURN_FAR  <||@
  Comment 122 block B3 null  <||@
  Comment 122 26 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 122 28 rax|DWORD[_] = MOV input: [rsi|QWORD[.] + 12] size: DWORD  <||@
  Comment 125 30 r10|DWORD = ADD (x: rcx|DWORD, y: rdx|DWORD) size: DWORD  <||@
  Comment 131 32 CMPBRANCH (x: r10|DWORD, y: [rax|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B3 -> B4 falseDestination: B3 -> B10 size: DWORD state [bci:0]  <||@
  Comment 131 [rax:0, rsi:0]at Queens.getRowColumn(int, int) [bci: 0, duringCall: false, rethrow: false]
              |0             |1          |2         
     locals:  |rsi|QWORD[.]  |rdx|DWORD  |rcx|DWORD   <||@
  Comment 131 {infopoint: IMPLICIT_EXCEPTION}  <||@
  Comment 145 block B4 null  <||@
  Comment 145 34 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 145 36 CMPCONSTBRANCH x: [r10|DWORD + rax|DWORD[_] * 8 + 16] trueDestinationProbability: 0.2860772357723577 condition: = trueDestination: B4 -> B5 falseDestination: B4 -> B6 y: 0 size: BYTE inlinedY: null  <||@
  Comment 157 block B6 null  <||@
  Comment 157 38 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 157 40 rax|DWORD[_] = MOV input: [rsi|QWORD[.] + 20] size: DWORD  <||@
  Comment 160 42 r10|DWORD = SUB (x: rcx|DWORD, ~y: rdx|DWORD) size: DWORD  <||@
  Comment 166 44 r10|DWORD = LEA address: [r10|DWORD + 7] size: DWORD  <||@
  Comment 170 46 CMPBRANCH (x: r10|DWORD, y: [rax|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B6 -> B7 falseDestination: B6 -> B9 size: DWORD state [bci:0]  <||@
  Comment 170 [rax:0, rsi:0]at Queens.getRowColumn(int, int) [bci: 0, duringCall: false, rethrow: false]
              |0             |1          |2         
     locals:  |rsi|QWORD[.]  |rdx|DWORD  |rcx|DWORD   <||@
  Comment 170 {infopoint: IMPLICIT_EXCEPTION}  <||@
  Comment 184 block B7 null  <||@
  Comment 184 48 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 184 50 rax|DWORD = MOVZXB input: [r10|DWORD + rax|DWORD[_] * 8 + 16] size: DWORD  <||@
  Comment 190 52 JUMP ~outgoingValues: [] destination: B7 -> B8  <||@
  Comment 192 block B5 null  <||@
  Comment 192 54 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 192 -1 rax|DWORD = MOVE input: int[0|0x0]  <||@
  Comment 197 56 JUMP ~outgoingValues: [] destination: B5 -> B8  <||@
  Comment 199 block B11 null  <||@
  Comment 199 64 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 199 -1 r10|DWORD = MOVE input: int[-12571|0xffffffffffffcee5]  <||@
  Comment 205 66 JUMP ~outgoingValues: [] destination: B11 -> B12  <||@
  Comment 205 block B12 null  <||@
  Comment 205 76 [] = LABEL alignment: 0 numbPhis: 1 label: ?  <||@
  Comment 205 78 MOV (x: [r15|QWORD + 1156], y: r10|DWORD) size: DWORD  <||@
  Comment 212 80 MOV x: [r15|QWORD + 1168] y: 0 size: QWORD  <||@
  Comment 223 82 DEOPT info [bci:0]  <||@
  Comment 224 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_uncommon_trap, type=address, offset=0, address=0x7fe723e335a8, value=140630366175610]:0x7fe70f05417a}  <||@
  Comment 229 [rsi:0]at Queens.getRowColumn(int, int) [bci: 0, duringCall: false, rethrow: false]
              |0             |1          |2         
     locals:  |rsi|QWORD[.]  |rdx|DWORD  |rcx|DWORD   <||@
  Comment 237 block B10 null  <||@
  Comment 237 68 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 237 -1 r10|DWORD = MOVE input: int[-16923|0xffffffffffffbde5]  <||@
  Comment 243 70 JUMP ~outgoingValues: [] destination: B10 -> B12  <||@
  Comment 245 block B9 null  <||@
  Comment 245 72 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 245 -1 r10|DWORD = MOVE input: int[-21531|0xffffffffffffabe5]  <||@
  Comment 251 74 JUMP ~outgoingValues: [] destination: B9 -> B12  <||@
  Comment 258 {Field[name=CompilerToVM::Data::nmethod_entry_barrier, type=address, offset=0, address=0x7fe723e33598, value=140630366044704]:0x7fe70f034220}  <||@
  Comment 283 {Field[name=CompilerToVM::Data::SharedRuntime_polling_page_return_handler, type=address, offset=0, address=0x7fe723e335a0, value=140630366179328]:0x7fe70f055000}  <||@
  Comment 311 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_uncommon_trap, type=address, offset=0, address=0x7fe723e335a8, value=140630366175610]:0x7fe70f05417a}  <||@
  Comment 316 [rax:0, rsi:0]at Queens.getRowColumn(int, int) [bci: 0, duringCall: false, rethrow: false]
              |0             |1          |2         
     locals:  |rsi|QWORD[.]  |rdx|DWORD  |rcx|DWORD   <||@
  Comment 346 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_uncommon_trap, type=address, offset=0, address=0x7fe723e335a8, value=140630366175610]:0x7fe70f05417a}  <||@
  Comment 351 [rax:0, rsi:0]at Queens.getRowColumn(int, int) [bci: 0, duringCall: false, rethrow: false]
              |0             |1          |2         
     locals:  |rsi|QWORD[.]  |rdx|DWORD  |rcx|DWORD   <||@
  Comment 384 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_uncommon_trap, type=address, offset=0, address=0x7fe723e335a8, value=140630366175610]:0x7fe70f05417a}  <||@
  Comment 389 [rax:0, rsi:0]at Queens.getRowColumn(int, int) [bci: 0, duringCall: false, rethrow: false]
              |0             |1          |2         
     locals:  |rsi|QWORD[.]  |rdx|DWORD  |rcx|DWORD   <||@
  Comment 397 {Stub<ExceptionHandlerStub.exceptionHandler>@0x7fe70f0b4100:CallingConvention[rax|QWORD[.], rdx|QWORD]:CallingConvention[rax|QWORD[.], rdx|QWORD]; temps=rdi|ILLEGAL,xmm14|ILLEGAL,xmm15|ILLEGAL,xmm12|ILLEGAL,xmm13|ILLEGAL,xmm10|ILLEGAL,xmm11|ILLEGAL,xmm7|ILLEGAL,xmm8|ILLEGAL,xmm9|ILLEGAL,xmm0|ILLEGAL,xmm1|ILLEGAL,xmm2|ILLEGAL,xmm3|ILLEGAL,xmm4|ILLEGAL,xmm5|ILLEGAL,xmm6|ILLEGAL,rax|ILLEGAL,rcx|ILLEGAL,rdx|ILLEGAL,rsi|ILLEGAL,r8|ILLEGAL,r9|ILLEGAL,r10|ILLEGAL,r11|ILLEGAL}  <||@
  Comment 397 EXCEPTION_HANDLER_ENTRY  <||@
  Comment 403 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_unpack, type=address, offset=0, address=0x7fe723e335b8, value=140630366175008]:0x7fe70f053f20}  <||@
  Comment 403 DEOPT_HANDLER_ENTRY  <||@
  HexCodeFile>>> <|@
end_nmethod
begin_compilation
  name " HotSpotCompilation-79[Queens.getRowColumn(int, int)]"
  method "HotSpotCompilation-79[Queens.getRowColumn(int, int)]"
  date 1729020570913
end_compilation
begin_cfg
  name "After code installation"
end_cfg
begin_nmethod
  <<<HexCodeFile
  Platform AMD64 64  <||@
  HexCode 7fe70f0bf900 448b560849bc000000b3e67f00004d03d44d33e4493bc20f8563e7f8ff66669089842400c0feff4883ec189041817f20000000000f85c300000048896c24108b46103b14c50c0000000f8378000000448bd241807cc210000f851c000000b800000000488b6c24104883c418493ba7500400000f8794000000c38b460c448bd14403d2443b14c50c0000000f835c00000041807cc210000f84230000008b4614448bd1442bd2458d5207443b14c50c0000000f833d000000410fb644c210eba3b800000000eb9c41bae5ceffff4589978404000049c787900400000000000090e89547f9ff0f1f84000000000041bae5bdffffebd841bae5abffffebd048896c2410e81948f7ffe92efffffff4488d0d58ffffff49898f68040000e9e055f9fff441c78784040000f5d4ffff49c7879004000000000000e83e47f9ff0f1f84000000000041c78784040000f5c2ffff49c7879004000000000000e81b47f9ff0f1f84000000000041c78784040000f5b0ffff49c7879004000000000000666690e8f546f9ff0f1f840000000000e86e46fffff4e88844f9fff4f4f4f4f4f4f4f4  <||@
  Comment 0 UNVERIFIED_ENTRY  <||@
  Comment 23 {Field[name=CompilerToVM::Data::SharedRuntime_ic_miss_stub, type=address, offset=0, address=0x7fe723e335c8, value=140630366150784]:0x7fe70f04e080}  <||@
  Comment 32 [stack overflow check]  <||@
  Comment 32 VERIFIED_ENTRY  <||@
  Comment 44 FRAME_COMPLETE  <||@
  Comment 44 ENTRY_BARRIER_PATCH  <||@
  Comment 58 block B0 null  <||@
  Comment 58 0 [rsi|QWORD[.], rdx|DWORD, rcx|DWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 58 2 stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD  <||@
  Comment 63 4 [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@6bd31264 slotKind: QWORD  <||@
  Comment 63 12 rax|DWORD[_] = MOV input: [rsi|QWORD[.] + 16] size: DWORD  <||@
  Comment 66 14 CMPBRANCH (x: rdx|DWORD, y: [rax|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B0 -> B1 falseDestination: B0 -> B11 size: DWORD state [bci:0]  <||@
  Comment 66 [rax:0, rsi:0]at Queens.getRowColumn(int, int) [bci: 0, duringCall: false, rethrow: false]
              |0             |1          |2         
     locals:  |rsi|QWORD[.]  |rdx|DWORD  |rcx|DWORD   <||@
  Comment 66 {infopoint: IMPLICIT_EXCEPTION}  <||@
  Comment 79 block B1 null  <||@
  Comment 79 16 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 79 18 r10|QWORD = MOV value: rdx|DWORD size: DWORD  <||@
  Comment 82 20 CMPCONSTBRANCH x: [r10|QWORD + rax|DWORD[_] * 8 + 16] trueDestinationProbability: 0.615625 condition: = trueDestination: B1 -> B2 falseDestination: B1 -> B3 y: 0 size: BYTE inlinedY: null  <||@
  Comment 94 block B2 null  <||@
  Comment 94 22 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 94 -1 rax|DWORD = MOVE input: int[0|0x0]  <||@
  Comment 99 24 JUMP ~outgoingValues: [] destination: B2 -> B8  <||@
  Comment 99 block B8 null  <||@
  Comment 99 58 [] = LABEL alignment: 0 numbPhis: 1 label: ?  <||@
  Comment 99 62 RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@3dbf6f45  <||@
  Comment 108 POLL_RETURN_FAR  <||@
  Comment 122 block B3 null  <||@
  Comment 122 26 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 122 28 rax|DWORD[_] = MOV input: [rsi|QWORD[.] + 12] size: DWORD  <||@
  Comment 125 30 r10|DWORD = ADD (x: rcx|DWORD, y: rdx|DWORD) size: DWORD  <||@
  Comment 131 32 CMPBRANCH (x: r10|DWORD, y: [rax|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B3 -> B4 falseDestination: B3 -> B10 size: DWORD state [bci:0]  <||@
  Comment 131 [rax:0, rsi:0]at Queens.getRowColumn(int, int) [bci: 0, duringCall: false, rethrow: false]
              |0             |1          |2         
     locals:  |rsi|QWORD[.]  |rdx|DWORD  |rcx|DWORD   <||@
  Comment 131 {infopoint: IMPLICIT_EXCEPTION}  <||@
  Comment 145 block B4 null  <||@
  Comment 145 34 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 145 36 CMPCONSTBRANCH x: [r10|DWORD + rax|DWORD[_] * 8 + 16] trueDestinationProbability: 0.2860772357723577 condition: = trueDestination: B4 -> B5 falseDestination: B4 -> B6 y: 0 size: BYTE inlinedY: null  <||@
  Comment 157 block B6 null  <||@
  Comment 157 38 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 157 40 rax|DWORD[_] = MOV input: [rsi|QWORD[.] + 20] size: DWORD  <||@
  Comment 160 42 r10|DWORD = SUB (x: rcx|DWORD, ~y: rdx|DWORD) size: DWORD  <||@
  Comment 166 44 r10|DWORD = LEA address: [r10|DWORD + 7] size: DWORD  <||@
  Comment 170 46 CMPBRANCH (x: r10|DWORD, y: [rax|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B6 -> B7 falseDestination: B6 -> B9 size: DWORD state [bci:0]  <||@
  Comment 170 [rax:0, rsi:0]at Queens.getRowColumn(int, int) [bci: 0, duringCall: false, rethrow: false]
              |0             |1          |2         
     locals:  |rsi|QWORD[.]  |rdx|DWORD  |rcx|DWORD   <||@
  Comment 170 {infopoint: IMPLICIT_EXCEPTION}  <||@
  Comment 184 block B7 null  <||@
  Comment 184 48 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 184 50 rax|DWORD = MOVZXB input: [r10|DWORD + rax|DWORD[_] * 8 + 16] size: DWORD  <||@
  Comment 190 52 JUMP ~outgoingValues: [] destination: B7 -> B8  <||@
  Comment 192 block B5 null  <||@
  Comment 192 54 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 192 -1 rax|DWORD = MOVE input: int[0|0x0]  <||@
  Comment 197 56 JUMP ~outgoingValues: [] destination: B5 -> B8  <||@
  Comment 199 block B11 null  <||@
  Comment 199 64 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 199 -1 r10|DWORD = MOVE input: int[-12571|0xffffffffffffcee5]  <||@
  Comment 205 66 JUMP ~outgoingValues: [] destination: B11 -> B12  <||@
  Comment 205 block B12 null  <||@
  Comment 205 76 [] = LABEL alignment: 0 numbPhis: 1 label: ?  <||@
  Comment 205 78 MOV (x: [r15|QWORD + 1156], y: r10|DWORD) size: DWORD  <||@
  Comment 212 80 MOV x: [r15|QWORD + 1168] y: 0 size: QWORD  <||@
  Comment 223 82 DEOPT info [bci:0]  <||@
  Comment 224 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_uncommon_trap, type=address, offset=0, address=0x7fe723e335a8, value=140630366175610]:0x7fe70f05417a}  <||@
  Comment 229 [rsi:0]at Queens.getRowColumn(int, int) [bci: 0, duringCall: false, rethrow: false]
              |0             |1          |2         
     locals:  |rsi|QWORD[.]  |rdx|DWORD  |rcx|DWORD   <||@
  Comment 237 block B10 null  <||@
  Comment 237 68 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 237 -1 r10|DWORD = MOVE input: int[-16923|0xffffffffffffbde5]  <||@
  Comment 243 70 JUMP ~outgoingValues: [] destination: B10 -> B12  <||@
  Comment 245 block B9 null  <||@
  Comment 245 72 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 245 -1 r10|DWORD = MOVE input: int[-21531|0xffffffffffffabe5]  <||@
  Comment 251 74 JUMP ~outgoingValues: [] destination: B9 -> B12  <||@
  Comment 258 {Field[name=CompilerToVM::Data::nmethod_entry_barrier, type=address, offset=0, address=0x7fe723e33598, value=140630366044704]:0x7fe70f034220}  <||@
  Comment 283 {Field[name=CompilerToVM::Data::SharedRuntime_polling_page_return_handler, type=address, offset=0, address=0x7fe723e335a0, value=140630366179328]:0x7fe70f055000}  <||@
  Comment 311 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_uncommon_trap, type=address, offset=0, address=0x7fe723e335a8, value=140630366175610]:0x7fe70f05417a}  <||@
  Comment 316 [rax:0, rsi:0]at Queens.getRowColumn(int, int) [bci: 0, duringCall: false, rethrow: false]
              |0             |1          |2         
     locals:  |rsi|QWORD[.]  |rdx|DWORD  |rcx|DWORD   <||@
  Comment 346 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_uncommon_trap, type=address, offset=0, address=0x7fe723e335a8, value=140630366175610]:0x7fe70f05417a}  <||@
  Comment 351 [rax:0, rsi:0]at Queens.getRowColumn(int, int) [bci: 0, duringCall: false, rethrow: false]
              |0             |1          |2         
     locals:  |rsi|QWORD[.]  |rdx|DWORD  |rcx|DWORD   <||@
  Comment 384 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_uncommon_trap, type=address, offset=0, address=0x7fe723e335a8, value=140630366175610]:0x7fe70f05417a}  <||@
  Comment 389 [rax:0, rsi:0]at Queens.getRowColumn(int, int) [bci: 0, duringCall: false, rethrow: false]
              |0             |1          |2         
     locals:  |rsi|QWORD[.]  |rdx|DWORD  |rcx|DWORD   <||@
  Comment 397 {Stub<ExceptionHandlerStub.exceptionHandler>@0x7fe70f0b4100:CallingConvention[rax|QWORD[.], rdx|QWORD]:CallingConvention[rax|QWORD[.], rdx|QWORD]; temps=rdi|ILLEGAL,xmm14|ILLEGAL,xmm15|ILLEGAL,xmm12|ILLEGAL,xmm13|ILLEGAL,xmm10|ILLEGAL,xmm11|ILLEGAL,xmm7|ILLEGAL,xmm8|ILLEGAL,xmm9|ILLEGAL,xmm0|ILLEGAL,xmm1|ILLEGAL,xmm2|ILLEGAL,xmm3|ILLEGAL,xmm4|ILLEGAL,xmm5|ILLEGAL,xmm6|ILLEGAL,rax|ILLEGAL,rcx|ILLEGAL,rdx|ILLEGAL,rsi|ILLEGAL,r8|ILLEGAL,r9|ILLEGAL,r10|ILLEGAL,r11|ILLEGAL}  <||@
  Comment 397 EXCEPTION_HANDLER_ENTRY  <||@
  Comment 403 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_unpack, type=address, offset=0, address=0x7fe723e335b8, value=140630366175008]:0x7fe70f053f20}  <||@
  Comment 403 DEOPT_HANDLER_ENTRY  <||@
  HexCodeFile>>> <|@
end_nmethod
