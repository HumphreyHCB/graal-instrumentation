VM Arguments: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:-UnlockExperimentalVMOptions -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -Djdk.graal.CompilationFailureAction=Diagnose -Djdk.graal.DumpOnError=true -Djdk.graal.ShowDumpFiles=true -Djdk.graal.PrintGraph=Network -Djdk.graal.ObjdumpExecutables=objdump,gobjdump -Dgraalvm.locatorDisabled=true -XX:+UseJVMCICompiler -Dgraal.EnableProfiler=false -Dgraal.MinGraphSize=80 -Dgraal.CountCompiledMethods=false -Dgraal.BuboDebugMode=false -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -Dgraal.CompilationFailureAction=Diagnose -Dgraal.Dump=:2 -XX:+UseJVMCICompiler -Dgraal.HotSpotPrintInlining=true -Djdk.graal.LogFile=NormalDump.txt --add-exports=jdk.graal.compiler/jdk.graal.compiler.hotspot.meta.Bubo=ALL-UNNAMED -javaagent:/home/hburchell/Repos/graal-dev/graal-instrumentation/Bubo-Agent/target/JavaAgent-1.0-SNAPSHOT-jar-with-dependencies.jar
sun.java.command=Harness DeltaBlue 300 60000
Connected to the IGV on 127.0.0.1:4445
                            @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.registerAsWord(Register):Word (7 bytes)   inline method (bytecode parsing)
                            @ 14  jdk.graal.compiler.hotspot.stubs.ExceptionHandlerStub.checkNoExceptionInThread(Word, boolean):void (62 bytes)   inline method (bytecode parsing)
                            @ 24  jdk.graal.compiler.hotspot.stubs.ExceptionHandlerStub.checkExceptionNotNull(boolean, Object):void (14 bytes)   inline method (bytecode parsing)
                            @ 30  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.writeExceptionOop(Word, Object):void (15 bytes)   inline method (bytecode parsing)
                            @ 36  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.writeExceptionPc(Word, Word):void (15 bytes)   inline method (bytecode parsing)
                            @ 26  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 4  deltablue.Plan.lambda$execute$0(AbstractConstraint):void (5 bytes)   inline method (bytecode parsing)
                            @ 5  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                            @ 8  deltablue.Planner.lambda$incrementalRemove$0(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                                @ 2  deltablue.Planner.incrementalAdd(AbstractConstraint):void (27 bytes)   not inlining relevance-based (relevance=0.000000, probability=0.000002, bonus=1.000000, nodes=24 > 0.000050)
                                @ 8  deltablue.Planner.lambda$extractPlanFromConstraints$1(Vector, AbstractConstraint):void (20 bytes)   not inlining relevance-based (relevance=0.000000, probability=0.000002, bonus=1.000000, nodes=28 > 0.000050)
                                  @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000081, probability=0.000081, bonus=1.000000, nodes=41 > 0.024272)
                                @ 11  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=35 <= 300.000000)
                                @ 17  som.Vector.lambda$remove$0(Object, boolean[], Object[], int[], Object):void (28 bytes)   not inlining relevance-based (relevance=0.000000, probability=0.000006, bonus=1.000000, nodes=26 > 0.000150)
                                @ 12  deltablue.Planner.lambda$constraintsConsuming$3(AbstractConstraint, ForEachInterface, AbstractConstraint):void (20 bytes)   not inlining relevance-based (relevance=0.020000, probability=0.231743, bonus=1.000000, nodes=23 > 5.999950)
                              @ 1  som.Vector.with(Object):Vector (16 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=40 <= 300.000000)
                                @ 8  deltablue.Planner.lambda$removePropagateFrom$4(Vector, AbstractConstraint):void (13 bytes)   not inlining relevance-based (relevance=0.020000, probability=0.231743, bonus=1.000000, nodes=11 > 5.999950)
                              @ 6  som.Vector.isEmpty():boolean (17 bytes)   relevance-based (relevance=2.000000, probability=2.000000, bonus=1.000000, nodes=10 <= 300.000000)
                                  @ 6  deltablue.BinaryConstraint.isSatisfied():boolean (13 bytes)   relevance-based (relevance=0.062186, probability=0.454708, bonus=1.000000, nodes=14 <= 18.655779)
                                @ 1  som.Vector.isEmpty():boolean (17 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=10 <= 300.000000)
                              @ 13  som.Vector.removeFirst():Object (31 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=18 <= 300.000000)
                                @ 12  deltablue.Planner.lambda$addConstraintsConsumingTo$2(AbstractConstraint, Vector, AbstractConstraint):void (18 bytes)   not inlining relevance-based (relevance=0.106361, probability=1.232426, bonus=1.000000, nodes=42 > 31.908218)
                            @ 18  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 21  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                              @ 23  deltablue.BinaryConstraint.getOutput():Variable (22 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=22 <= 300.000000)
                            @ 35  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 38  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                                @ 1  deltablue.EqualityConstraint.execute():void (42 bytes)   relevance-based (relevance=1.000000, probability=11.587223, bonus=1.000000, nodes=41 <= 300.000000)
                            @ 39  deltablue.Variable.getWalkStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                              @ 20  deltablue.Plan$$Lambda/0x00007f45e0082818.apply(Object):void (8 bytes)   not inlining callee invoke probability is too high (invokeP=6.000000, relevance=1.000000, probability=13.283144, bonus=1.000000, nodes=142)
                            @ 45  deltablue.Variable.setWalkStrength(Strength):void (6 bytes)   inline method (bytecode parsing)
                            @ 50  deltablue.Variable.getStay():boolean (5 bytes)   inline accessor method (bytecode parsing)
                            @ 53  deltablue.Variable.setStay(boolean):void (6 bytes)   inline method (bytecode parsing)
                            @ 57  deltablue.Variable.getStay():boolean (5 bytes)   inline accessor method (bytecode parsing)
                            @ 8  deltablue.Variable.setWalkStrength(Strength):void (6 bytes)   inline method (bytecode parsing)
                            @ 27  deltablue.Variable.setStay(boolean):void (6 bytes)   inline method (bytecode parsing)
                            @ 34  deltablue.Variable.getStay():boolean (5 bytes)   inline accessor method (bytecode parsing)
                            @ 39  deltablue.Variable.getWalkStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 45  deltablue.Variable.setWalkStrength(Strength):void (6 bytes)   inline method (bytecode parsing)
                            @ 50  deltablue.Variable.getStay():boolean (5 bytes)   inline accessor method (bytecode parsing)
                            @ 60  deltablue.Variable.getStay():boolean (5 bytes)   inline accessor method (bytecode parsing)
                            @ 70  deltablue.Variable.getStay():boolean (5 bytes)   inline accessor method (bytecode parsing)
                            @ 81  deltablue.Variable.setStay(boolean):void (6 bytes)   inline method (bytecode parsing)
                            @ 85  deltablue.Variable.getStay():boolean (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 2  deltablue.Strength.weaker(Strength):boolean (17 bytes)   relevance-based (relevance=0.209485, probability=0.147628, bonus=1.000000, nodes=11 <= 62.845624)
                                @ 42  deltablue.Strength.weakest(Strength):Strength (14 bytes)   relevance-based (relevance=0.209485, probability=0.147628, bonus=1.000000, nodes=12 <= 62.845624)
                            @ 18  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 25  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 33  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 37  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 51  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 58  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 66  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 70  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                                @ 92  deltablue.ScaleConstraint.execute():void (74 bytes)   not inlining relevance-based (relevance=0.166540, probability=0.117364, bonus=1.000000, nodes=62 > 49.961935)
                                @ 16  deltablue.AbstractConstraint.isInput():boolean (2 bytes)   trivial (relevance=0.209498, probability=0.147634, bonus=1.000000, nodes=8)
                                @ 41  deltablue.StayConstraint.execute():void (1 bytes)   trivial (relevance=0.209488, probability=0.147626, bonus=1.000000, nodes=3)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 2  deltablue.Strength.weaker(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.704738, bonus=1.000000, nodes=11 <= 300.000000)
                                @ 42  deltablue.Strength.weakest(Strength):Strength (14 bytes)   relevance-based (relevance=1.668565, probability=0.704738, bonus=1.000000, nodes=12 <= 300.000000)
                            @ 18  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 21  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 35  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 38  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                                @ 64  deltablue.EqualityConstraint.execute():void (42 bytes)   relevance-based (relevance=1.334282, probability=0.563550, bonus=1.000000, nodes=38 <= 300.000000)
                              @ 42  deltablue.BinaryConstraint.recalculate():void (68 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=222 <= 300.000000)
                              @ 48  deltablue.BinaryConstraint.getOutput():Variable (22 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=22 <= 300.000000)
                            @ 1  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 6  deltablue.Variable.getConstraints():Vector (5 bytes)   inline accessor method (bytecode parsing)
                            @ 11  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object, Object):Object (10 bytes)   inline method (bytecode parsing)
                              @ 6  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object, Object):Object (24 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 19  deltablue.Planner$$Lambda/0x00007f45e0031a28.<init>(AbstractConstraint, Vector):void (15 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                                      @ 6  deltablue.BinaryConstraint.isSatisfied():boolean (13 bytes)   relevance-based (relevance=0.750721, probability=5.052784, bonus=1.000000, nodes=14 <= 225.216294)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                        @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000030, probability=0.000204, bonus=1.000000, nodes=41 > 0.009111)
                                      @ 14  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=0.375356, probability=2.526364, bonus=1.000000, nodes=35 <= 112.606896)
                                    @ 12  deltablue.Planner.lambda$addConstraintsConsumingTo$2(AbstractConstraint, Vector, AbstractConstraint):void (18 bytes)   relevance-based (relevance=1.000000, probability=11.783360, bonus=1.000000, nodes=72 <= 300.000000)
                                  @ 20  deltablue.Planner$$Lambda/0x00007f45e0031a28.apply(Object):void (16 bytes)   relevance-based (relevance=1.000000, probability=11.783360, bonus=1.000000, nodes=79 <= 300.000000)
                                @ 16  som.Vector.forEach(ForEachInterface):void (32 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=92 <= 300.000000)
                              @ 52  deltablue.Planner.addConstraintsConsumingTo(Variable, Vector):void (20 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=111 <= 300.000000)
                            @ 12  jdk.graal.compiler.replacements.gc.G1WriteBarrierSnippets.satbBarrier(AddressNode$Address, Object, Object, boolean, boolean, int, G1WriteBarrierSnippets$Counters):void (417 bytes)   inline method (bytecode parsing)
                              @ 10  jdk.graal.compiler.hotspot.replacements.HotSpotG1WriteBarrierSnippets.getThread():Word (8 bytes)   inline method (bytecode parsing)
                                @ 4  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.registerAsWord(Register):Word (7 bytes)   inline method (bytecode parsing)
                              @ 17  jdk.graal.compiler.replacements.gc.G1WriteBarrierSnippets.verifyOop(Object):void (17 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotG1WriteBarrierSnippets.verifyOops():boolean (7 bytes)   inline method (bytecode parsing)
                              @ 29  jdk.graal.compiler.hotspot.replacements.HotSpotG1WriteBarrierSnippets.satbQueueMarkingActiveOffset():int (7 bytes)   inline method (bytecode parsing)
                              @ 43  jdk.graal.compiler.replacements.gc.G1WriteBarrierSnippets.isTracingActive(int):boolean (30 bytes)   inline method (bytecode parsing)
                              @ 198  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                              @ 231  org.graalvm.word.LocationIdentity.any():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                              @ 288  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                              @ 315  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                              @ 321  jdk.graal.compiler.hotspot.replacements.HotSpotG1WriteBarrierSnippets.satbQueueIndexOffset():int (7 bytes)   inline method (bytecode parsing)
                              @ 353  jdk.graal.compiler.hotspot.replacements.HotSpotG1WriteBarrierSnippets.satbQueueBufferOffset():int (7 bytes)   inline method (bytecode parsing)
                              @ 370  jdk.graal.compiler.hotspot.replacements.HotSpotG1WriteBarrierSnippets.wordSize():int (4 bytes)   inline method (bytecode parsing)
                              @ 396  jdk.graal.compiler.hotspot.replacements.HotSpotG1WriteBarrierSnippets.satbQueueIndexOffset():int (7 bytes)   inline method (bytecode parsing)
                              @ 413  jdk.graal.compiler.replacements.gc.G1WriteBarrierSnippets.g1PreBarrierStub(Object):void (9 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotG1WriteBarrierSnippets.preWriteBarrierCallDescriptor():ForeignCallDescriptor (4 bytes)   inline method (bytecode parsing)
                            @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotG1WriteBarrierSnippets.getThread():Word (8 bytes)   inline method (bytecode parsing)
                              @ 4  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.registerAsWord(Register):Word (7 bytes)   inline method (bytecode parsing)
                            @ 14  jdk.graal.compiler.replacements.gc.G1WriteBarrierSnippets.verifyOop(Object):void (17 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotG1WriteBarrierSnippets.verifyOops():boolean (7 bytes)   inline method (bytecode parsing)
                            @ 20  jdk.graal.compiler.replacements.gc.G1WriteBarrierSnippets.verifyOop(Object):void (17 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotG1WriteBarrierSnippets.verifyOops():boolean (7 bytes)   inline method (bytecode parsing)
                            @ 27  jdk.graal.compiler.replacements.gc.G1WriteBarrierSnippets.validateObject(Object, Object):void (52 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotG1WriteBarrierSnippets.verifyOops():boolean (7 bytes)   inline method (bytecode parsing)
                            @ 45  jdk.graal.compiler.hotspot.replacements.HotSpotG1WriteBarrierSnippets.verifyBarrier():boolean (21 bytes)   inline method (bytecode parsing)
                            @ 64  jdk.graal.compiler.replacements.gc.G1WriteBarrierSnippets.isTracingActive(int):boolean (30 bytes)   inline method (bytecode parsing)
                            @ 156  jdk.graal.compiler.hotspot.replacements.HotSpotG1WriteBarrierSnippets.logOfHeapRegionGrainBytes():int (7 bytes)   inline method (bytecode parsing)
                            @ 184  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                            @ 209  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                            @ 232  jdk.graal.compiler.hotspot.replacements.HotSpotG1WriteBarrierSnippets.cardTableAddress(Pointer):Word (32 bytes)   inline method (bytecode parsing)
                            @ 253  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                            @ 262  jdk.graal.compiler.hotspot.replacements.HotSpotG1WriteBarrierSnippets.youngCardValue():byte (7 bytes)   inline method (bytecode parsing)
                            @ 305  jdk.graal.compiler.hotspot.replacements.HotSpotG1WriteBarrierSnippets.dirtyCardValue():byte (7 bytes)   inline method (bytecode parsing)
                            @ 345  jdk.graal.compiler.replacements.gc.G1WriteBarrierSnippets.log(boolean, String, long, long, long):void (21 bytes)   inline method (bytecode parsing)
                            @ 352  jdk.graal.compiler.hotspot.replacements.HotSpotG1WriteBarrierSnippets.dirtyCardValue():byte (7 bytes)   inline method (bytecode parsing)
                            @ 366  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                            @ 372  jdk.graal.compiler.hotspot.replacements.HotSpotG1WriteBarrierSnippets.cardQueueIndexOffset():int (7 bytes)   inline method (bytecode parsing)
                            @ 404  jdk.graal.compiler.hotspot.replacements.HotSpotG1WriteBarrierSnippets.cardQueueBufferOffset():int (7 bytes)   inline method (bytecode parsing)
                            @ 421  jdk.graal.compiler.hotspot.replacements.HotSpotG1WriteBarrierSnippets.wordSize():int (4 bytes)   inline method (bytecode parsing)
                            @ 444  jdk.graal.compiler.hotspot.replacements.HotSpotG1WriteBarrierSnippets.cardQueueIndexOffset():int (7 bytes)   inline method (bytecode parsing)
                            @ 461  jdk.graal.compiler.replacements.gc.G1WriteBarrierSnippets.g1PostBarrierStub(Word):void (9 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotG1WriteBarrierSnippets.postWriteBarrierCallDescriptor():ForeignCallDescriptor (4 bytes)   inline method (bytecode parsing)
                            @ 23  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                            @ 37  jdk.graal.compiler.nodes.PiNode.piCastNonNull(Object, GuardingNode):Object (9 bytes)   inline method (bytecode parsing)
                            @ 72  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                            @ 83  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                            @ 23  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                            @ 43  jdk.graal.compiler.nodes.PiNode.piCastNonNull(Object, GuardingNode):Object (9 bytes)   inline method (bytecode parsing)
                            @ 117  jdk.graal.compiler.hotspot.replacements.TypeCheckSnippetUtils.checkUnknownSubType(KlassPointer, KlassPointer, TypeCheckSnippetUtils$Counters):boolean (91 bytes)   inline method (bytecode parsing)
                              @ 55  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                              @ 65  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                              @ 79  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                              @ 87  jdk.graal.compiler.hotspot.replacements.TypeCheckSnippetUtils.checkSelfAndSupers(KlassPointer, KlassPointer, TypeCheckSnippetUtils$Counters):boolean (113 bytes)   inline method (bytecode parsing)
                                @ 12  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                  @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                                @ 63  jdk.graal.compiler.hotspot.replacements.TypeCheckSnippetUtils.loadSecondarySupersElement(Word, int):KlassPointer (26 bytes)   inline method (bytecode parsing)
                                @ 93  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                  @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                                @ 108  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                  @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                            @ 4  deltablue.Plan.lambda$execute$0(AbstractConstraint):void (5 bytes)   inline method (bytecode parsing)
                            @ 8  deltablue.Planner.lambda$incrementalRemove$0(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                                @ 2  deltablue.Planner.incrementalAdd(AbstractConstraint):void (27 bytes)   not inlining relevance-based (relevance=0.000000, probability=0.000000, bonus=1.000000, nodes=24 > 0.000136)
                                @ 8  deltablue.Planner.lambda$extractPlanFromConstraints$1(Vector, AbstractConstraint):void (20 bytes)   not inlining relevance-based (relevance=0.000001, probability=0.000000, bonus=1.000000, nodes=28 > 0.000182)
                                @ 17  som.Vector.lambda$remove$0(Object, boolean[], Object[], int[], Object):void (28 bytes)   not inlining relevance-based (relevance=0.009093, probability=0.006694, bonus=1.000000, nodes=18 > 2.727756)
                                @ 8  deltablue.Planner.lambda$removePropagateFrom$4(Vector, AbstractConstraint):void (13 bytes)   not inlining relevance-based (relevance=0.033744, probability=0.024843, bonus=1.000000, nodes=11 > 10.123179)
                                @ 12  deltablue.Planner.lambda$constraintsConsuming$3(AbstractConstraint, ForEachInterface, AbstractConstraint):void (20 bytes)   not inlining relevance-based (relevance=0.054545, probability=0.040158, bonus=1.000000, nodes=23 > 16.363583)
                                  @ 6  deltablue.BinaryConstraint.isSatisfied():boolean (13 bytes)   relevance-based (relevance=0.093820, probability=0.040911, bonus=1.000000, nodes=14 <= 28.145977)
                                @ 12  deltablue.Planner.lambda$addConstraintsConsumingTo$2(AbstractConstraint, Vector, AbstractConstraint):void (18 bytes)   not inlining relevance-based (relevance=0.136288, probability=0.100339, bonus=1.000000, nodes=42 > 40.886343)
                            @ 18  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 21  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 35  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 38  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 18  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 25  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 33  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 37  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 51  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 58  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 66  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 70  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                                @ 1  deltablue.EqualityConstraint.execute():void (42 bytes)   relevance-based (relevance=1.000000, probability=0.736231, bonus=1.000000, nodes=103 <= 300.000000)
                              @ 20  deltablue.Plan$$Lambda/0x00007f45e0082818.apply(Object):void (8 bytes)   not inlining callee invoke probability is too high (invokeP=6.000000, relevance=1.000000, probability=0.908266, bonus=1.000000, nodes=200)
                            @ 4  deltablue.Plan.lambda$execute$0(AbstractConstraint):void (5 bytes)   inline method (bytecode parsing)
                            @ 8  deltablue.Planner.lambda$incrementalRemove$0(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                                @ 2  deltablue.Planner.incrementalAdd(AbstractConstraint):void (27 bytes)   not inlining relevance-based (relevance=0.000000, probability=0.000003, bonus=1.000000, nodes=24 > 0.000136)
                                @ 8  deltablue.Planner.lambda$extractPlanFromConstraints$1(Vector, AbstractConstraint):void (20 bytes)   not inlining relevance-based (relevance=0.000001, probability=0.000004, bonus=1.000000, nodes=28 > 0.000182)
                                @ 17  som.Vector.lambda$remove$0(Object, boolean[], Object[], int[], Object):void (28 bytes)   not inlining relevance-based (relevance=0.009093, probability=0.059586, bonus=1.000000, nodes=18 > 2.727756)
                                @ 8  deltablue.Planner.lambda$removePropagateFrom$4(Vector, AbstractConstraint):void (13 bytes)   not inlining relevance-based (relevance=0.033744, probability=0.221133, bonus=1.000000, nodes=11 > 10.123179)
                                @ 12  deltablue.Planner.lambda$constraintsConsuming$3(AbstractConstraint, ForEachInterface, AbstractConstraint):void (20 bytes)   not inlining relevance-based (relevance=0.054545, probability=0.357450, bonus=1.000000, nodes=23 > 16.363583)
                                  @ 6  deltablue.BinaryConstraint.isSatisfied():boolean (13 bytes)   relevance-based (relevance=0.093820, probability=0.364149, bonus=1.000000, nodes=14 <= 28.145977)
                                @ 12  deltablue.Planner.lambda$addConstraintsConsumingTo$2(AbstractConstraint, Vector, AbstractConstraint):void (18 bytes)   not inlining relevance-based (relevance=0.136288, probability=0.893132, bonus=1.000000, nodes=42 > 40.886343)
                            @ 18  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 21  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 35  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 38  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 18  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 25  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 33  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 37  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 51  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 58  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 66  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 70  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                                @ 1  deltablue.EqualityConstraint.execute():void (42 bytes)   relevance-based (relevance=1.000000, probability=6.553276, bonus=1.000000, nodes=103 <= 300.000000)
                              @ 20  deltablue.Plan$$Lambda/0x00007f45e0082818.apply(Object):void (8 bytes)   not inlining callee invoke probability is too high (invokeP=6.000000, relevance=1.000000, probability=8.084584, bonus=1.000000, nodes=200)
                            @ 23  jdk.graal.compiler.replacements.AllocationSnippets.allocateArrayImpl(Word, int, int, int, AllocationSnippets$FillContent, int, boolean, boolean, boolean, boolean, AllocationSnippets$AllocationProfilingData):Object (178 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getTLABInfo():Word (5 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getThread():Word (8 bytes)   inline method (bytecode parsing)
                                  @ 4  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.registerAsWord(Register):Word (7 bytes)   inline method (bytecode parsing)
                              @ 9  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.readTlabTop(Word):Word (5 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.readTlabTop(Word):Word (17 bytes)   inline method (bytecode parsing)
                              @ 17  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.readTlabEnd(Word):Word (5 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.readTlabEnd(Word):Word (17 bytes)   inline method (bytecode parsing)
                              @ 36  jdk.graal.compiler.replacements.ReplacementsUtil.dynamicAssert(boolean, String):void (12 bytes)   inline method (bytecode parsing)
                              @ 44  jdk.graal.compiler.replacements.AllocationSnippets.arrayAllocationSize(int, int, int):UnsignedWord (18 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.objectAlignment():int (7 bytes)   inline method (bytecode parsing)
                                @ 11  jdk.graal.compiler.replacements.AllocationSnippets.arrayAllocationSize(int, int, int, int):long (32 bytes)   inline method (bytecode parsing)
                              @ 59  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.useTLAB():boolean (7 bytes)   inline method (bytecode parsing)
                              @ 72  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.shouldAllocateInTLAB(UnsignedWord, boolean):boolean (33 bytes)   inline method (bytecode parsing)
                              @ 102  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.writeTlabTop(Word, Word):void (6 bytes)   inline method (bytecode parsing)
                                @ 2  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.writeTlabTop(Word, Word):void (15 bytes)   inline method (bytecode parsing)
                              @ 109  jdk.graal.compiler.replacements.AllocationSnippets.emitPrefetchAllocate(Word, boolean):void (61 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getPrefetchStyle():int (7 bytes)   inline method (bytecode parsing)
                                @ 9  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getPrefetchLines(boolean):int (18 bytes)   inline method (bytecode parsing)
                                @ 14  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getPrefetchStepSize():int (7 bytes)   inline method (bytecode parsing)
                                @ 20  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getPrefetchDistance():int (7 bytes)   inline method (bytecode parsing)
                              @ 136  jdk.graal.compiler.replacements.AllocationSnippets.formatArray(Word, UnsignedWord, int, Word, AllocationSnippets$FillContent, boolean, int, boolean, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):Object (53 bytes)   inline method (bytecode parsing)
                                @ 5  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.initializeObjectHeader(Word, Word, boolean):void (29 bytes)   inline method (bytecode parsing)
                                  @ 25  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.initializeObjectHeader(Word, Word, KlassPointer):void (20 bytes)   inline method (bytecode parsing)
                                @ 11  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.arrayLengthOffset():int (7 bytes)   inline method (bytecode parsing)
                                @ 15  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                                @ 38  jdk.graal.compiler.replacements.AllocationSnippets.fillContents(Word, AllocationSnippets$FillContent, int, UnsignedWord, boolean, boolean, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):void (58 bytes)   inline method (bytecode parsing)
                                  @ 22  jdk.graal.compiler.replacements.AllocationSnippets.zeroMemory(Word, int, UnsignedWord, boolean, boolean, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):void (19 bytes)   inline method (bytecode parsing)
                                    @ 15  jdk.graal.compiler.replacements.AllocationSnippets.fillMemory(long, Word, int, UnsignedWord, boolean, boolean, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):void (194 bytes)   inline method (bytecode parsing)
                                      @ 17  jdk.graal.compiler.replacements.ReplacementsUtil.dynamicAssert(boolean, String):void (12 bytes)   inline method (bytecode parsing)
                                      @ 56  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                                      @ 89  jdk.graal.compiler.replacements.ReplacementsUtil.dynamicAssert(boolean, String):void (12 bytes)   inline method (bytecode parsing)
                                      @ 153  jdk.graal.compiler.replacements.ReplacementsUtil.staticAssert(boolean, String):void (12 bytes)   inline method (bytecode parsing)
                                      @ 167  jdk.graal.compiler.replacements.AllocationSnippets.fillMemoryAlignedUnrollable(long, Word, UnsignedWord, UnsignedWord, boolean, AllocationSnippets$AllocationSnippetCounters):void (68 bytes)   inline method (bytecode parsing)
                                        @ 5  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                          @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                                        @ 44  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                                      @ 190  jdk.graal.compiler.replacements.AllocationSnippets.fillMemoryAligned(long, Word, UnsignedWord, UnsignedWord, boolean, UnsignedWord, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):void (155 bytes)   inline method (bytecode parsing)
                                        @ 17  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getMinimalBulkZeroingSize():int (7 bytes)   inline method (bytecode parsing)
                                        @ 36  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                          @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                                        @ 53  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                                        @ 105  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                          @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                                        @ 134  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                                @ 44  jdk.graal.compiler.replacements.AllocationSnippets.emitMemoryBarrierIf(boolean):void (14 bytes)   inline method (bytecode parsing)
                              @ 152  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                              @ 158  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.callNewArrayStub(Word, int):Object (35 bytes)   inline method (bytecode parsing)
                                @ 22  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.nonNullOrDeopt(Object):Object (27 bytes)   inline method (bytecode parsing)
                              @ 168  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.profileAllocation(AllocationSnippets$AllocationProfilingData, UnsignedWord):void (51 bytes)   inline method (bytecode parsing)
                              @ 174  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.verifyOop(Object):Object (5 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.verifyOop(Object):Object (19 bytes)   inline method (bytecode parsing)
                            @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotG1WriteBarrierSnippets.getThread():Word (8 bytes)   inline method (bytecode parsing)
                              @ 4  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.registerAsWord(Register):Word (7 bytes)   inline method (bytecode parsing)
                            @ 14  jdk.graal.compiler.replacements.gc.G1WriteBarrierSnippets.verifyOop(Object):void (17 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotG1WriteBarrierSnippets.verifyOops():boolean (7 bytes)   inline method (bytecode parsing)
                            @ 20  jdk.graal.compiler.replacements.gc.G1WriteBarrierSnippets.verifyOop(Object):void (17 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotG1WriteBarrierSnippets.verifyOops():boolean (7 bytes)   inline method (bytecode parsing)
                            @ 27  jdk.graal.compiler.replacements.gc.G1WriteBarrierSnippets.validateObject(Object, Object):void (52 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotG1WriteBarrierSnippets.verifyOops():boolean (7 bytes)   inline method (bytecode parsing)
                            @ 64  jdk.graal.compiler.replacements.gc.G1WriteBarrierSnippets.isTracingActive(int):boolean (30 bytes)   inline method (bytecode parsing)
                            @ 156  jdk.graal.compiler.hotspot.replacements.HotSpotG1WriteBarrierSnippets.logOfHeapRegionGrainBytes():int (7 bytes)   inline method (bytecode parsing)
                            @ 184  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                            @ 209  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                            @ 232  jdk.graal.compiler.hotspot.replacements.HotSpotG1WriteBarrierSnippets.cardTableAddress(Pointer):Word (32 bytes)   inline method (bytecode parsing)
                            @ 253  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                            @ 262  jdk.graal.compiler.hotspot.replacements.HotSpotG1WriteBarrierSnippets.youngCardValue():byte (7 bytes)   inline method (bytecode parsing)
                            @ 305  jdk.graal.compiler.hotspot.replacements.HotSpotG1WriteBarrierSnippets.dirtyCardValue():byte (7 bytes)   inline method (bytecode parsing)
                            @ 345  jdk.graal.compiler.replacements.gc.G1WriteBarrierSnippets.log(boolean, String, long, long, long):void (21 bytes)   inline method (bytecode parsing)
                            @ 352  jdk.graal.compiler.hotspot.replacements.HotSpotG1WriteBarrierSnippets.dirtyCardValue():byte (7 bytes)   inline method (bytecode parsing)
                            @ 366  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                            @ 372  jdk.graal.compiler.hotspot.replacements.HotSpotG1WriteBarrierSnippets.cardQueueIndexOffset():int (7 bytes)   inline method (bytecode parsing)
                            @ 404  jdk.graal.compiler.hotspot.replacements.HotSpotG1WriteBarrierSnippets.cardQueueBufferOffset():int (7 bytes)   inline method (bytecode parsing)
                            @ 421  jdk.graal.compiler.hotspot.replacements.HotSpotG1WriteBarrierSnippets.wordSize():int (4 bytes)   inline method (bytecode parsing)
                            @ 444  jdk.graal.compiler.hotspot.replacements.HotSpotG1WriteBarrierSnippets.cardQueueIndexOffset():int (7 bytes)   inline method (bytecode parsing)
                            @ 461  jdk.graal.compiler.replacements.gc.G1WriteBarrierSnippets.g1PostBarrierStub(Word):void (9 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotG1WriteBarrierSnippets.postWriteBarrierCallDescriptor():ForeignCallDescriptor (4 bytes)   inline method (bytecode parsing)
                            @ 12  java.util.WeakHashMap.getTable():WeakHashMap$Entry[] (9 bytes)   inline method (bytecode parsing)
                            @ 21  java.util.WeakHashMap.indexFor(int, int):int (6 bytes)   inline method (bytecode parsing)
                              @ 1  java.util.WeakHashMap.maskNull(Object):Object (12 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=6)
                                  @ 17  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=0.038322, probability=0.023721, bonus=1.000000, nodes=9)
                                  @ 27  java.lang.StringLatin1.hashCode(byte[]):int (52 bytes)   not inlining relevance-based (relevance=0.038322, probability=0.023721, bonus=1.000000, nodes=22 > 11.496476)
                                @ 1  java.lang.String.hashCode():int (60 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=32 <= 300.000000)
                              @ 7  java.util.WeakHashMap.hash(Object):int (28 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=58 <= 300.000000)
                            @ 33  java.util.WeakHashMap.indexFor(int, int):int (6 bytes)   inline method (bytecode parsing)
                            @ 13  java.util.concurrent.locks.ReentrantLock.lock():void (8 bytes)   inline method (bytecode parsing)
                            @ 25  java.util.concurrent.locks.ReentrantLock.unlock():void (10 bytes)   inline method (bytecode parsing)
                              @ 5  java.util.concurrent.locks.AbstractQueuedSynchronizer.release(int):boolean (19 bytes)   inline method (bytecode parsing)
                                  @ 1  java.lang.ref.ReferenceQueue.headIsNull():boolean (13 bytes)   relevance-based (relevance=1.000533, probability=1.000521, bonus=1.000000, nodes=11 <= 300.000000)
                            @ 9  java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(int):void (20 bytes)   inline method (bytecode parsing)
                                  @ 4  java.util.concurrent.locks.ReentrantLock$Sync.lock():void (13 bytes)   not inlining relevance-based (relevance=0.000533, probability=0.000533, bonus=1.000000, nodes=31 > 0.159886)
                                  @ 17  java.lang.ref.ReferenceQueue.poll0():Reference (65 bytes)   not inlining relevance-based (relevance=0.000533, probability=0.000533, bonus=1.000000, nodes=41 > 0.159886)
                            @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 8  java.util.concurrent.locks.AbstractOwnableSynchronizer.getExclusiveOwnerThread():Thread (5 bytes)   inline accessor method (bytecode parsing)
                            @ 41  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                            @ 46  java.util.concurrent.locks.AbstractQueuedSynchronizer.setState(int):void (6 bytes)   inline method (bytecode parsing)
                                  @ 2  java.util.concurrent.locks.ReentrantLock$Sync.tryRelease(int):boolean (51 bytes)   not inlining relevance-based (relevance=0.000533, probability=0.000533, bonus=1.000000, nodes=37 > 0.159886)
                            @ 22  java.util.concurrent.locks.AbstractQueuedSynchronizer$Node.getAndUnsetStatus(int):int (14 bytes)   inline method (bytecode parsing)
                              @ 10  jdk.internal.misc.Unsafe.getAndBitwiseAndInt(Object, long, int):int (27 bytes)   inline method (bytecode parsing)
                                  @ 12  java.util.concurrent.locks.AbstractQueuedSynchronizer.signalNext(AbstractQueuedSynchronizer$Node):void (34 bytes)   not inlining relevance-based (relevance=0.000517, probability=0.000517, bonus=1.000000, nodes=56 > 0.155245)
                                @ 4  java.lang.ref.ReferenceQueue.poll():Reference (40 bytes)   relevance-based (relevance=1.000521, probability=1.000521, bonus=1.000000, nodes=57 <= 300.000000)
                              @ 1  java.util.WeakHashMap.expungeStaleEntries():void (139 bytes)   relevance-based (relevance=1.615480, probability=1.000000, bonus=1.000000, nodes=128 <= 300.000000)
                            @ 2  java.lang.ref.Reference.refersTo(Object):boolean (6 bytes)   inline method (bytecode parsing)
                              @ 2  java.lang.ref.Reference.refersToImpl(Object):boolean (6 bytes)   inline method (bytecode parsing)
                            @ 11  java.lang.ref.Reference.get():Object (5 bytes)   inline accessor method (bytecode parsing)
                                @ 21  java.lang.String.equals(Object):boolean (56 bytes)   not inlining relevance-based (relevance=0.081773, probability=0.076140, bonus=1.000000, nodes=50 > 24.531789)
                              @ 51  java.util.WeakHashMap.matchesKey(WeakHashMap$Entry, Object):boolean (33 bytes)   relevance-based (relevance=1.015288, probability=1.007270, bonus=1.000000, nodes=32 <= 300.000000)
                            @ 5  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.clearPendingException(Word):Object (30 bytes)   inline method (bytecode parsing)
                            @ 16  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.getPendingException(Word):Object (14 bytes)   inline method (bytecode parsing)
                            @ 27  jdk.graal.compiler.hotspot.stubs.ForeignCallSnippets.getAndClearObjectResult(Word):Object (30 bytes)   inline method (bytecode parsing)
                            @ 26  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                            @ 36  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                            @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.verifyOop(Object):Object (19 bytes)   inline method (bytecode parsing)
                            @ 12  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.loadWordFromObject(Object, int):Word (34 bytes)   inline method (bytecode parsing)
                              @ 18  jdk.graal.compiler.replacements.ReplacementsUtil.staticAssert(boolean, String):void (12 bytes)   inline method (bytecode parsing)
                              @ 24  org.graalvm.word.LocationIdentity.any():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                            @ 24  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.registerAsWord(Register):Word (7 bytes)   inline method (bytecode parsing)
                            @ 37  jdk.graal.compiler.hotspot.replacements.MonitorSnippets.trace(boolean, String, WordBase):void (15 bytes)   inline method (bytecode parsing)
                            @ 46  jdk.graal.compiler.hotspot.replacements.MonitorSnippets.trace(boolean, String, WordBase):void (15 bytes)   inline method (bytecode parsing)
                            @ 55  jdk.graal.compiler.hotspot.replacements.MonitorSnippets.trace(boolean, String, WordBase):void (15 bytes)   inline method (bytecode parsing)
                            @ 58  jdk.graal.compiler.hotspot.replacements.MonitorSnippets.incCounter():void (34 bytes)   inline method (bytecode parsing)
                            @ 122  jdk.graal.compiler.hotspot.replacements.MonitorSnippets.tryFastPathLocking(Object, Register, boolean, MonitorSnippets$Counters, Word, Word, Word):boolean (48 bytes)   inline method (bytecode parsing)
                              @ 42  jdk.graal.compiler.hotspot.replacements.MonitorSnippets.tryStackLocking(Object, Word, Word, Word, boolean, MonitorSnippets$Counters, Register):boolean (270 bytes)   inline method (bytecode parsing)
                                @ 47  jdk.graal.compiler.hotspot.replacements.MonitorSnippets.tryEnterInflated(Object, Word, Word, boolean, MonitorSnippets$Counters):boolean (199 bytes)   inline method (bytecode parsing)
                                  @ 77  jdk.graal.compiler.hotspot.replacements.MonitorSnippets.traceObject(boolean, String, Object, boolean):void (46 bytes)   inline method (bytecode parsing)
                                  @ 85  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                    @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                                  @ 95  jdk.graal.compiler.hotspot.replacements.MonitorSnippets.traceObject(boolean, String, Object, boolean):void (46 bytes)   inline method (bytecode parsing)
                                  @ 103  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                    @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                                  @ 168  jdk.graal.compiler.hotspot.replacements.MonitorSnippets.traceObject(boolean, String, Object, boolean):void (46 bytes)   inline method (bytecode parsing)
                                  @ 176  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                    @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                                  @ 186  jdk.graal.compiler.hotspot.replacements.MonitorSnippets.traceObject(boolean, String, Object, boolean):void (46 bytes)   inline method (bytecode parsing)
                                  @ 194  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                    @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                                @ 75  jdk.graal.compiler.hotspot.replacements.MonitorSnippets.trace(boolean, String, WordBase):void (15 bytes)   inline method (bytecode parsing)
                                @ 139  jdk.graal.compiler.hotspot.replacements.MonitorSnippets.traceObject(boolean, String, Object, boolean):void (46 bytes)   inline method (bytecode parsing)
                                @ 147  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                  @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                                @ 158  jdk.graal.compiler.hotspot.replacements.MonitorSnippets.trace(boolean, String, WordBase):void (15 bytes)   inline method (bytecode parsing)
                                @ 176  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.registerAsWord(Register):Word (7 bytes)   inline method (bytecode parsing)
                                @ 237  jdk.graal.compiler.hotspot.replacements.MonitorSnippets.traceObject(boolean, String, Object, boolean):void (46 bytes)   inline method (bytecode parsing)
                                @ 245  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                  @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                                @ 257  jdk.graal.compiler.hotspot.replacements.MonitorSnippets.traceObject(boolean, String, Object, boolean):void (46 bytes)   inline method (bytecode parsing)
                                @ 265  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                  @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                            @ 130  jdk.graal.compiler.hotspot.replacements.MonitorSnippets.incrementHeldMonitorCount(Word):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  jdk.graal.compiler.hotspot.replacements.MonitorSnippets.updateHeldMonitorCount(Word, int):void (36 bytes)   inline method (bytecode parsing)
                            @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.verifyOop(Object):Object (19 bytes)   inline method (bytecode parsing)
                            @ 6  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.registerAsWord(Register):Word (7 bytes)   inline method (bytecode parsing)
                            @ 43  jdk.graal.compiler.hotspot.replacements.MonitorSnippets.trace(boolean, String, WordBase):void (15 bytes)   inline method (bytecode parsing)
                            @ 51  jdk.graal.compiler.hotspot.replacements.MonitorSnippets.trace(boolean, String, WordBase):void (15 bytes)   inline method (bytecode parsing)
                            @ 60  jdk.graal.compiler.hotspot.replacements.MonitorSnippets.trace(boolean, String, WordBase):void (15 bytes)   inline method (bytecode parsing)
                            @ 73  jdk.graal.compiler.hotspot.replacements.MonitorSnippets.tryFastPathUnlocking(Object, boolean, MonitorSnippets$Counters, Word, Word, Word):boolean (40 bytes)   inline method (bytecode parsing)
                              @ 34  jdk.graal.compiler.hotspot.replacements.MonitorSnippets.tryStackUnlocking(Object, Word, Word, Word, boolean, MonitorSnippets$Counters):boolean (147 bytes)   inline method (bytecode parsing)
                                @ 21  jdk.graal.compiler.hotspot.replacements.MonitorSnippets.traceObject(boolean, String, Object, boolean):void (46 bytes)   inline method (bytecode parsing)
                                @ 29  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                  @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                                @ 41  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.loadWordFromObject(Object, int):Word (34 bytes)   inline method (bytecode parsing)
                                  @ 18  jdk.graal.compiler.replacements.ReplacementsUtil.staticAssert(boolean, String):void (12 bytes)   inline method (bytecode parsing)
                                  @ 24  org.graalvm.word.LocationIdentity.any():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                                @ 76  jdk.graal.compiler.hotspot.replacements.MonitorSnippets.tryExitInflated(Object, Word, boolean, MonitorSnippets$Counters):boolean (369 bytes)   inline method (bytecode parsing)
                                  @ 7  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.loadWordFromObject(Object, int):Word (34 bytes)   inline method (bytecode parsing)
                                    @ 18  jdk.graal.compiler.replacements.ReplacementsUtil.staticAssert(boolean, String):void (12 bytes)   inline method (bytecode parsing)
                                    @ 24  org.graalvm.word.LocationIdentity.any():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                                  @ 159  jdk.graal.compiler.hotspot.replacements.MonitorSnippets.traceObject(boolean, String, Object, boolean):void (46 bytes)   inline method (bytecode parsing)
                                  @ 166  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                    @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                                  @ 253  jdk.graal.compiler.hotspot.replacements.MonitorSnippets.traceObject(boolean, String, Object, boolean):void (46 bytes)   inline method (bytecode parsing)
                                  @ 260  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                    @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                                  @ 302  jdk.graal.compiler.hotspot.replacements.MonitorSnippets.traceObject(boolean, String, Object, boolean):void (46 bytes)   inline method (bytecode parsing)
                                  @ 309  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                    @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                                  @ 357  jdk.graal.compiler.hotspot.replacements.MonitorSnippets.traceObject(boolean, String, Object, boolean):void (46 bytes)   inline method (bytecode parsing)
                                  @ 364  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                    @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                                  @ 339  jdk.graal.compiler.hotspot.replacements.MonitorSnippets.traceObject(boolean, String, Object, boolean):void (46 bytes)   inline method (bytecode parsing)
                                  @ 346  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                    @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                                @ 114  jdk.graal.compiler.hotspot.replacements.MonitorSnippets.traceObject(boolean, String, Object, boolean):void (46 bytes)   inline method (bytecode parsing)
                                @ 122  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                  @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                                @ 134  jdk.graal.compiler.hotspot.replacements.MonitorSnippets.traceObject(boolean, String, Object, boolean):void (46 bytes)   inline method (bytecode parsing)
                                @ 142  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                  @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                            @ 81  jdk.graal.compiler.hotspot.replacements.MonitorSnippets.decrementHeldMonitorCount(Word):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  jdk.graal.compiler.hotspot.replacements.MonitorSnippets.updateHeldMonitorCount(Word, int):void (36 bytes)   inline method (bytecode parsing)
                            @ 99  jdk.graal.compiler.hotspot.replacements.MonitorSnippets.decCounter():void (34 bytes)   inline method (bytecode parsing)
                            @ 10  jdk.graal.compiler.replacements.gc.G1WriteBarrierSnippets.satbBarrier(AddressNode$Address, Object, Object, boolean, boolean, int, G1WriteBarrierSnippets$Counters):void (417 bytes)   inline method (bytecode parsing)
                              @ 10  jdk.graal.compiler.hotspot.replacements.HotSpotG1WriteBarrierSnippets.getThread():Word (8 bytes)   inline method (bytecode parsing)
                                @ 4  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.registerAsWord(Register):Word (7 bytes)   inline method (bytecode parsing)
                              @ 17  jdk.graal.compiler.replacements.gc.G1WriteBarrierSnippets.verifyOop(Object):void (17 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotG1WriteBarrierSnippets.verifyOops():boolean (7 bytes)   inline method (bytecode parsing)
                              @ 29  jdk.graal.compiler.hotspot.replacements.HotSpotG1WriteBarrierSnippets.satbQueueMarkingActiveOffset():int (7 bytes)   inline method (bytecode parsing)
                              @ 43  jdk.graal.compiler.replacements.gc.G1WriteBarrierSnippets.isTracingActive(int):boolean (30 bytes)   inline method (bytecode parsing)
                              @ 198  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                              @ 288  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                              @ 315  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                              @ 321  jdk.graal.compiler.hotspot.replacements.HotSpotG1WriteBarrierSnippets.satbQueueIndexOffset():int (7 bytes)   inline method (bytecode parsing)
                              @ 353  jdk.graal.compiler.hotspot.replacements.HotSpotG1WriteBarrierSnippets.satbQueueBufferOffset():int (7 bytes)   inline method (bytecode parsing)
                              @ 370  jdk.graal.compiler.hotspot.replacements.HotSpotG1WriteBarrierSnippets.wordSize():int (4 bytes)   inline method (bytecode parsing)
                              @ 396  jdk.graal.compiler.hotspot.replacements.HotSpotG1WriteBarrierSnippets.satbQueueIndexOffset():int (7 bytes)   inline method (bytecode parsing)
                              @ 413  jdk.graal.compiler.replacements.gc.G1WriteBarrierSnippets.g1PreBarrierStub(Object):void (9 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotG1WriteBarrierSnippets.preWriteBarrierCallDescriptor():ForeignCallDescriptor (4 bytes)   inline method (bytecode parsing)
                            @ 5  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.clearPendingException(Word):Object (30 bytes)   inline method (bytecode parsing)
                            @ 16  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.getPendingException(Word):Object (14 bytes)   inline method (bytecode parsing)
                            @ 27  jdk.graal.compiler.hotspot.stubs.ForeignCallSnippets.getAndClearObjectResult(Word):Object (30 bytes)   inline method (bytecode parsing)
                            @ 26  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                  @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000116, probability=0.000116, bonus=1.000000, nodes=41 > 0.034774)
                                @ 11  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=35 <= 300.000000)
                              @ 1  som.Vector.with(Object):Vector (16 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=40 <= 300.000000)
                              @ 6  som.Vector.isEmpty():boolean (17 bytes)   relevance-based (relevance=1.828555, probability=2.206920, bonus=1.000000, nodes=10 <= 300.000000)
                                @ 1  som.Vector.isEmpty():boolean (17 bytes)   relevance-based (relevance=1.000000, probability=1.206920, bonus=1.000000, nodes=10 <= 300.000000)
                              @ 13  som.Vector.removeFirst():Object (31 bytes)   relevance-based (relevance=1.000000, probability=1.206920, bonus=1.000000, nodes=18 <= 300.000000)
                              @ 23  deltablue.BinaryConstraint.getOutput():Variable (22 bytes)   relevance-based (relevance=1.000000, probability=1.206920, bonus=1.000000, nodes=22 <= 300.000000)
                            @ 39  deltablue.Variable.getWalkStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 45  deltablue.Variable.setWalkStrength(Strength):void (6 bytes)   inline method (bytecode parsing)
                            @ 50  deltablue.Variable.getStay():boolean (5 bytes)   inline accessor method (bytecode parsing)
                            @ 53  deltablue.Variable.setStay(boolean):void (6 bytes)   inline method (bytecode parsing)
                            @ 57  deltablue.Variable.getStay():boolean (5 bytes)   inline accessor method (bytecode parsing)
                            @ 39  deltablue.Variable.getWalkStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 45  deltablue.Variable.setWalkStrength(Strength):void (6 bytes)   inline method (bytecode parsing)
                            @ 50  deltablue.Variable.getStay():boolean (5 bytes)   inline accessor method (bytecode parsing)
                            @ 60  deltablue.Variable.getStay():boolean (5 bytes)   inline accessor method (bytecode parsing)
                            @ 70  deltablue.Variable.getStay():boolean (5 bytes)   inline accessor method (bytecode parsing)
                            @ 81  deltablue.Variable.setStay(boolean):void (6 bytes)   inline method (bytecode parsing)
                            @ 85  deltablue.Variable.getStay():boolean (5 bytes)   inline accessor method (bytecode parsing)
                            @ 8  deltablue.Variable.setWalkStrength(Strength):void (6 bytes)   inline method (bytecode parsing)
                            @ 27  deltablue.Variable.setStay(boolean):void (6 bytes)   inline method (bytecode parsing)
                            @ 34  deltablue.Variable.getStay():boolean (5 bytes)   inline accessor method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint.isInput():boolean (2 bytes)   trivial (relevance=0.224390, probability=0.120947, bonus=1.000000, nodes=8)
                                @ 41  deltablue.StayConstraint.execute():void (1 bytes)   trivial (relevance=0.224377, probability=0.120940, bonus=1.000000, nodes=3)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 2  deltablue.Strength.weaker(Strength):boolean (17 bytes)   relevance-based (relevance=0.608229, probability=0.327854, bonus=1.000000, nodes=11 <= 182.468613)
                                @ 42  deltablue.Strength.weakest(Strength):Strength (14 bytes)   relevance-based (relevance=0.608229, probability=0.327854, bonus=1.000000, nodes=12 <= 182.468613)
                            @ 18  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 25  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 33  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 37  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 51  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 58  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 66  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 70  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                                @ 92  deltablue.ScaleConstraint.execute():void (74 bytes)   relevance-based (relevance=0.399268, probability=0.215218, bonus=1.000000, nodes=62 <= 119.780322)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 2  deltablue.Strength.weaker(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.758119, bonus=1.000000, nodes=11 <= 300.000000)
                                @ 42  deltablue.Strength.weakest(Strength):Strength (14 bytes)   relevance-based (relevance=1.625666, probability=0.758119, bonus=1.000000, nodes=12 <= 300.000000)
                            @ 18  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 21  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 35  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 38  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                                @ 64  deltablue.EqualityConstraint.execute():void (42 bytes)   relevance-based (relevance=1.250266, probability=0.583054, bonus=1.000000, nodes=38 <= 300.000000)
                              @ 42  deltablue.BinaryConstraint.recalculate():void (68 bytes)   relevance-based (relevance=1.406439, probability=1.206920, bonus=1.000000, nodes=271 <= 300.000000)
                              @ 48  deltablue.BinaryConstraint.getOutput():Variable (22 bytes)   relevance-based (relevance=1.406439, probability=1.206920, bonus=1.000000, nodes=22 <= 300.000000)
                            @ 1  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 6  deltablue.Variable.getConstraints():Vector (5 bytes)   inline accessor method (bytecode parsing)
                            @ 11  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object, Object):Object (10 bytes)   inline method (bytecode parsing)
                              @ 6  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object, Object):Object (24 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 19  deltablue.Planner$$Lambda/0x00007f45e0031a28.<init>(AbstractConstraint, Vector):void (15 bytes)   relevance-based (relevance=1.000000, probability=1.206920, bonus=1.000000, nodes=11 <= 300.000000)
                                      @ 6  deltablue.BinaryConstraint.isSatisfied():boolean (13 bytes)   relevance-based (relevance=0.693930, probability=4.884609, bonus=1.000000, nodes=14 <= 208.178960)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                        @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000043, probability=0.000300, bonus=1.000000, nodes=41 > 0.012775)
                                      @ 14  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=0.367372, probability=2.585947, bonus=1.000000, nodes=35 <= 110.211454)
                                    @ 12  deltablue.Planner.lambda$addConstraintsConsumingTo$2(AbstractConstraint, Vector, AbstractConstraint):void (18 bytes)   relevance-based (relevance=1.000000, probability=11.923661, bonus=1.000000, nodes=72 <= 300.000000)
                                  @ 20  deltablue.Planner$$Lambda/0x00007f45e0031a28.apply(Object):void (16 bytes)   relevance-based (relevance=1.000000, probability=11.923661, bonus=1.000000, nodes=79 <= 300.000000)
                                @ 16  som.Vector.forEach(ForEachInterface):void (32 bytes)   relevance-based (relevance=1.000000, probability=1.206920, bonus=1.000000, nodes=92 <= 300.000000)
                              @ 52  deltablue.Planner.addConstraintsConsumingTo(Variable, Vector):void (20 bytes)   relevance-based (relevance=1.406439, probability=1.206920, bonus=1.000000, nodes=111 <= 300.000000)
                              @ 1  deltablue.Planner.newMark():int (15 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f45e0031810.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 4  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 15  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 30  deltablue.Variable.getWalkStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 65  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 76  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 91  deltablue.Variable.getWalkStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 126  deltablue.Variable.getWalkStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 133  deltablue.Variable.getWalkStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 189  deltablue.Variable.getWalkStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 20  deltablue.Variable.getWalkStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 23  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=0.288554, probability=0.133428, bonus=1.000000, nodes=13 <= 86.566054)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 136  deltablue.Strength.weaker(Strength):boolean (17 bytes)   relevance-based (relevance=0.998290, probability=0.332943, bonus=1.000000, nodes=14 <= 299.487003)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 192  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=0.998290, probability=0.332943, bonus=1.000000, nodes=13 <= 299.487003)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 94  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.333513, bonus=1.000000, nodes=13 <= 300.000000)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 33  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=0.600003, probability=0.200109, bonus=1.000000, nodes=13 <= 180.000800)
                                @ 2  deltablue.BinaryConstraint.chooseMethod(int):Direction (220 bytes)   relevance-based (relevance=1.873957, probability=1.000000, bonus=1.000000, nodes=138 <= 300.000000)
                                @ 7  deltablue.BinaryConstraint.isSatisfied():boolean (13 bytes)   relevance-based (relevance=2.998380, probability=1.000000, bonus=1.000000, nodes=14 <= 300.000000)
                            @ 8  deltablue.AbstractConstraint.lambda$satisfy$1(int, Variable):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                                  @ 48  deltablue.AbstractConstraint$$Lambda/0x00007f45e0031810.apply(Object):void (12 bytes)   not inlining relevance-based (relevance=0.000009, probability=0.000002, bonus=1.000000, nodes=13 > 0.002755)
                            @ 8  deltablue.AbstractConstraint.lambda$satisfy$1(int, Variable):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                                  @ 58  deltablue.AbstractConstraint$$Lambda/0x00007f45e0031810.apply(Object):void (12 bytes)   not inlining relevance-based (relevance=0.000009, probability=0.000002, bonus=1.000000, nodes=13 > 0.002755)
                            @ 8  deltablue.AbstractConstraint.lambda$satisfy$1(int, Variable):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                                  @ 68  deltablue.AbstractConstraint$$Lambda/0x00007f45e0031810.apply(Object):void (12 bytes)   not inlining relevance-based (relevance=0.000009, probability=0.000002, bonus=1.000000, nodes=13 > 0.002755)
                            @ 8  deltablue.AbstractConstraint.lambda$satisfy$1(int, Variable):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                                  @ 15  deltablue.AbstractConstraint$$Lambda/0x00007f45e0031810.apply(Object):void (12 bytes)   relevance-based (relevance=0.545596, probability=0.133407, bonus=1.000000, nodes=13 <= 163.678907)
                            @ 8  deltablue.AbstractConstraint.lambda$satisfy$1(int, Variable):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                                  @ 25  deltablue.AbstractConstraint$$Lambda/0x00007f45e0031810.apply(Object):void (12 bytes)   relevance-based (relevance=0.545596, probability=0.133407, bonus=1.000000, nodes=13 <= 163.678907)
                            @ 8  deltablue.AbstractConstraint.lambda$satisfy$1(int, Variable):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                                  @ 35  deltablue.AbstractConstraint$$Lambda/0x00007f45e0031810.apply(Object):void (12 bytes)   relevance-based (relevance=0.545596, probability=0.133407, bonus=1.000000, nodes=13 <= 163.678907)
                            @ 8  deltablue.AbstractConstraint.lambda$satisfy$1(int, Variable):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                                  @ 28  deltablue.AbstractConstraint$$Lambda/0x00007f45e0031810.apply(Object):void (12 bytes)   relevance-based (relevance=0.834518, probability=0.333511, bonus=1.000000, nodes=13 <= 250.355366)
                            @ 8  deltablue.AbstractConstraint.lambda$satisfy$1(int, Variable):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                                  @ 15  deltablue.AbstractConstraint$$Lambda/0x00007f45e0031810.apply(Object):void (12 bytes)   relevance-based (relevance=1.000000, probability=0.399645, bonus=1.000000, nodes=13 <= 300.000000)
                                @ 20  deltablue.BinaryConstraint.inputsDo(ForEachInterface):void (34 bytes)   relevance-based (relevance=2.998357, probability=0.999992, bonus=1.000000, nodes=95 <= 300.000000)
                              @ 8  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=312 > 300.000000)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f45e0031810.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 4  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 15  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 30  deltablue.Variable.getWalkStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 65  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 76  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 91  deltablue.Variable.getWalkStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 126  deltablue.Variable.getWalkStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 133  deltablue.Variable.getWalkStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 189  deltablue.Variable.getWalkStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 20  deltablue.Variable.getWalkStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 23  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=0.288554, probability=0.152671, bonus=1.000000, nodes=13 <= 86.566054)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 136  deltablue.Strength.weaker(Strength):boolean (17 bytes)   relevance-based (relevance=0.998290, probability=0.380961, bonus=1.000000, nodes=14 <= 299.487003)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 192  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=0.998290, probability=0.380961, bonus=1.000000, nodes=13 <= 299.487003)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 94  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.381613, bonus=1.000000, nodes=13 <= 300.000000)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 33  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=0.600003, probability=0.228969, bonus=1.000000, nodes=13 <= 180.000800)
                                @ 2  deltablue.BinaryConstraint.chooseMethod(int):Direction (220 bytes)   relevance-based (relevance=1.873957, probability=1.144221, bonus=1.000000, nodes=138 <= 300.000000)
                                @ 7  deltablue.BinaryConstraint.isSatisfied():boolean (13 bytes)   relevance-based (relevance=2.998380, probability=1.144221, bonus=1.000000, nodes=14 <= 300.000000)
                            @ 8  deltablue.AbstractConstraint.lambda$satisfy$1(int, Variable):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                                  @ 48  deltablue.AbstractConstraint$$Lambda/0x00007f45e0031810.apply(Object):void (12 bytes)   not inlining relevance-based (relevance=0.000009, probability=0.000003, bonus=1.000000, nodes=13 > 0.002755)
                            @ 8  deltablue.AbstractConstraint.lambda$satisfy$1(int, Variable):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                                  @ 58  deltablue.AbstractConstraint$$Lambda/0x00007f45e0031810.apply(Object):void (12 bytes)   not inlining relevance-based (relevance=0.000009, probability=0.000003, bonus=1.000000, nodes=13 > 0.002755)
                            @ 8  deltablue.AbstractConstraint.lambda$satisfy$1(int, Variable):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                                  @ 68  deltablue.AbstractConstraint$$Lambda/0x00007f45e0031810.apply(Object):void (12 bytes)   not inlining relevance-based (relevance=0.000009, probability=0.000003, bonus=1.000000, nodes=13 > 0.002755)
                            @ 8  deltablue.AbstractConstraint.lambda$satisfy$1(int, Variable):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                                  @ 15  deltablue.AbstractConstraint$$Lambda/0x00007f45e0031810.apply(Object):void (12 bytes)   relevance-based (relevance=0.545596, probability=0.152647, bonus=1.000000, nodes=13 <= 163.678907)
                            @ 8  deltablue.AbstractConstraint.lambda$satisfy$1(int, Variable):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                                  @ 25  deltablue.AbstractConstraint$$Lambda/0x00007f45e0031810.apply(Object):void (12 bytes)   relevance-based (relevance=0.545596, probability=0.152647, bonus=1.000000, nodes=13 <= 163.678907)
                            @ 8  deltablue.AbstractConstraint.lambda$satisfy$1(int, Variable):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                                  @ 35  deltablue.AbstractConstraint$$Lambda/0x00007f45e0031810.apply(Object):void (12 bytes)   relevance-based (relevance=0.545596, probability=0.152647, bonus=1.000000, nodes=13 <= 163.678907)
                            @ 8  deltablue.AbstractConstraint.lambda$satisfy$1(int, Variable):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                                  @ 28  deltablue.AbstractConstraint$$Lambda/0x00007f45e0031810.apply(Object):void (12 bytes)   relevance-based (relevance=0.834518, probability=0.381611, bonus=1.000000, nodes=13 <= 250.355366)
                            @ 8  deltablue.AbstractConstraint.lambda$satisfy$1(int, Variable):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                                  @ 15  deltablue.AbstractConstraint$$Lambda/0x00007f45e0031810.apply(Object):void (12 bytes)   relevance-based (relevance=1.000000, probability=0.457283, bonus=1.000000, nodes=13 <= 300.000000)
                                @ 20  deltablue.BinaryConstraint.inputsDo(ForEachInterface):void (34 bytes)   relevance-based (relevance=2.998357, probability=1.144212, bonus=1.000000, nodes=95 <= 300.000000)
                              @ 19  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining relevance-based (relevance=1.000000, probability=1.144221, bonus=1.000000, nodes=312 > 300.000000)
                            @ 49  java.lang.StringConcatHelper.newArray(long):byte[] (40 bytes)   inline method (bytecode parsing)
                            @ 123  java.lang.String.<init>(byte[], byte):void (15 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.StringLatin1.canEncode(int):boolean (13 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=8)
                              @ 41  java.lang.StringLatin1.canEncode(int):boolean (13 bytes)   trivial (relevance=0.998401, probability=0.998401, bonus=1.000000, nodes=8)
                                @ 51  jdk.internal.misc.Unsafe.allocateUninitializedArray0(Class, int):Object (90 bytes)   trivial (relevance=0.998401, probability=0.998401, bonus=1.000000, nodes=6)
                              @ 33  jdk.internal.misc.Unsafe.allocateUninitializedArray(Class, int):Object (55 bytes)   trivial (relevance=0.998401, probability=0.998401, bonus=1.000000, nodes=7)
                            @ 23  jdk.graal.compiler.replacements.AllocationSnippets.allocateArrayImpl(Word, int, int, int, AllocationSnippets$FillContent, int, boolean, boolean, boolean, boolean, AllocationSnippets$AllocationProfilingData):Object (178 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getTLABInfo():Word (5 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getThread():Word (8 bytes)   inline method (bytecode parsing)
                                  @ 4  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.registerAsWord(Register):Word (7 bytes)   inline method (bytecode parsing)
                              @ 9  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.readTlabTop(Word):Word (5 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.readTlabTop(Word):Word (17 bytes)   inline method (bytecode parsing)
                              @ 17  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.readTlabEnd(Word):Word (5 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.readTlabEnd(Word):Word (17 bytes)   inline method (bytecode parsing)
                              @ 36  jdk.graal.compiler.replacements.ReplacementsUtil.dynamicAssert(boolean, String):void (12 bytes)   inline method (bytecode parsing)
                              @ 44  jdk.graal.compiler.replacements.AllocationSnippets.arrayAllocationSize(int, int, int):UnsignedWord (18 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.objectAlignment():int (7 bytes)   inline method (bytecode parsing)
                                @ 11  jdk.graal.compiler.replacements.AllocationSnippets.arrayAllocationSize(int, int, int, int):long (32 bytes)   inline method (bytecode parsing)
                              @ 59  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.useTLAB():boolean (7 bytes)   inline method (bytecode parsing)
                              @ 72  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.shouldAllocateInTLAB(UnsignedWord, boolean):boolean (33 bytes)   inline method (bytecode parsing)
                              @ 102  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.writeTlabTop(Word, Word):void (6 bytes)   inline method (bytecode parsing)
                                @ 2  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.writeTlabTop(Word, Word):void (15 bytes)   inline method (bytecode parsing)
                              @ 109  jdk.graal.compiler.replacements.AllocationSnippets.emitPrefetchAllocate(Word, boolean):void (61 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getPrefetchStyle():int (7 bytes)   inline method (bytecode parsing)
                                @ 9  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getPrefetchLines(boolean):int (18 bytes)   inline method (bytecode parsing)
                                @ 14  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getPrefetchStepSize():int (7 bytes)   inline method (bytecode parsing)
                                @ 20  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getPrefetchDistance():int (7 bytes)   inline method (bytecode parsing)
                              @ 136  jdk.graal.compiler.replacements.AllocationSnippets.formatArray(Word, UnsignedWord, int, Word, AllocationSnippets$FillContent, boolean, int, boolean, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):Object (53 bytes)   inline method (bytecode parsing)
                                @ 5  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.initializeObjectHeader(Word, Word, boolean):void (29 bytes)   inline method (bytecode parsing)
                                  @ 25  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.initializeObjectHeader(Word, Word, KlassPointer):void (20 bytes)   inline method (bytecode parsing)
                                @ 11  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.arrayLengthOffset():int (7 bytes)   inline method (bytecode parsing)
                                @ 15  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                                @ 38  jdk.graal.compiler.replacements.AllocationSnippets.fillContents(Word, AllocationSnippets$FillContent, int, UnsignedWord, boolean, boolean, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):void (58 bytes)   inline method (bytecode parsing)
                                  @ 22  jdk.graal.compiler.replacements.AllocationSnippets.zeroMemory(Word, int, UnsignedWord, boolean, boolean, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):void (19 bytes)   inline method (bytecode parsing)
                                    @ 15  jdk.graal.compiler.replacements.AllocationSnippets.fillMemory(long, Word, int, UnsignedWord, boolean, boolean, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):void (194 bytes)   inline method (bytecode parsing)
                                      @ 17  jdk.graal.compiler.replacements.ReplacementsUtil.dynamicAssert(boolean, String):void (12 bytes)   inline method (bytecode parsing)
                                      @ 56  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                                      @ 89  jdk.graal.compiler.replacements.ReplacementsUtil.dynamicAssert(boolean, String):void (12 bytes)   inline method (bytecode parsing)
                                      @ 153  jdk.graal.compiler.replacements.ReplacementsUtil.staticAssert(boolean, String):void (12 bytes)   inline method (bytecode parsing)
                                      @ 167  jdk.graal.compiler.replacements.AllocationSnippets.fillMemoryAlignedUnrollable(long, Word, UnsignedWord, UnsignedWord, boolean, AllocationSnippets$AllocationSnippetCounters):void (68 bytes)   inline method (bytecode parsing)
                                        @ 5  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                          @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                                        @ 44  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                                      @ 190  jdk.graal.compiler.replacements.AllocationSnippets.fillMemoryAligned(long, Word, UnsignedWord, UnsignedWord, boolean, UnsignedWord, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):void (155 bytes)   inline method (bytecode parsing)
                                        @ 17  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getMinimalBulkZeroingSize():int (7 bytes)   inline method (bytecode parsing)
                                        @ 36  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                          @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                                        @ 53  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                                        @ 105  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                          @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                                        @ 134  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                                @ 44  jdk.graal.compiler.replacements.AllocationSnippets.emitMemoryBarrierIf(boolean):void (14 bytes)   inline method (bytecode parsing)
                                  @ 7  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                              @ 152  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                              @ 158  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.callNewArrayStub(Word, int):Object (35 bytes)   inline method (bytecode parsing)
                                @ 22  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.nonNullOrDeopt(Object):Object (27 bytes)   inline method (bytecode parsing)
                              @ 168  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.profileAllocation(AllocationSnippets$AllocationProfilingData, UnsignedWord):void (51 bytes)   inline method (bytecode parsing)
                              @ 174  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.verifyOop(Object):Object (5 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.verifyOop(Object):Object (19 bytes)   inline method (bytecode parsing)
                            @ 18  jdk.graal.compiler.replacements.AllocationSnippets.allocateInstanceImpl(Word, UnsignedWord, boolean, AllocationSnippets$FillContent, boolean, boolean, AllocationSnippets$AllocationProfilingData):Object (143 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getTLABInfo():Word (5 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getThread():Word (8 bytes)   inline method (bytecode parsing)
                                  @ 4  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.registerAsWord(Register):Word (7 bytes)   inline method (bytecode parsing)
                              @ 9  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.readTlabTop(Word):Word (5 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.readTlabTop(Word):Word (17 bytes)   inline method (bytecode parsing)
                              @ 17  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.readTlabEnd(Word):Word (5 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.readTlabEnd(Word):Word (17 bytes)   inline method (bytecode parsing)
                              @ 35  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.useTLAB():boolean (7 bytes)   inline method (bytecode parsing)
                              @ 47  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.shouldAllocateInTLAB(UnsignedWord, boolean):boolean (33 bytes)   inline method (bytecode parsing)
                              @ 77  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.writeTlabTop(Word, Word):void (6 bytes)   inline method (bytecode parsing)
                                @ 2  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.writeTlabTop(Word, Word):void (15 bytes)   inline method (bytecode parsing)
                              @ 84  jdk.graal.compiler.replacements.AllocationSnippets.emitPrefetchAllocate(Word, boolean):void (61 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getPrefetchStyle():int (7 bytes)   inline method (bytecode parsing)
                                @ 9  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getPrefetchLines(boolean):int (18 bytes)   inline method (bytecode parsing)
                                @ 14  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getPrefetchStepSize():int (7 bytes)   inline method (bytecode parsing)
                                @ 20  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getPrefetchDistance():int (7 bytes)   inline method (bytecode parsing)
                              @ 103  jdk.graal.compiler.replacements.AllocationSnippets.formatObject(Word, UnsignedWord, Word, AllocationSnippets$FillContent, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):Object (41 bytes)   inline method (bytecode parsing)
                                @ 4  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.initializeObjectHeader(Word, Word, boolean):void (29 bytes)   inline method (bytecode parsing)
                                  @ 25  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.initializeObjectHeader(Word, Word, KlassPointer):void (20 bytes)   inline method (bytecode parsing)
                                @ 8  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.instanceHeaderSize():int (7 bytes)   inline method (bytecode parsing)
                                @ 27  jdk.graal.compiler.replacements.AllocationSnippets.fillContents(Word, AllocationSnippets$FillContent, int, UnsignedWord, boolean, boolean, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):void (58 bytes)   inline method (bytecode parsing)
                                  @ 22  jdk.graal.compiler.replacements.AllocationSnippets.zeroMemory(Word, int, UnsignedWord, boolean, boolean, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):void (19 bytes)   inline method (bytecode parsing)
                                    @ 15  jdk.graal.compiler.replacements.AllocationSnippets.fillMemory(long, Word, int, UnsignedWord, boolean, boolean, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):void (194 bytes)   inline method (bytecode parsing)
                                      @ 17  jdk.graal.compiler.replacements.ReplacementsUtil.dynamicAssert(boolean, String):void (12 bytes)   inline method (bytecode parsing)
                                      @ 56  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                                      @ 89  jdk.graal.compiler.replacements.ReplacementsUtil.dynamicAssert(boolean, String):void (12 bytes)   inline method (bytecode parsing)
                                      @ 153  jdk.graal.compiler.replacements.ReplacementsUtil.staticAssert(boolean, String):void (12 bytes)   inline method (bytecode parsing)
                                      @ 167  jdk.graal.compiler.replacements.AllocationSnippets.fillMemoryAlignedUnrollable(long, Word, UnsignedWord, UnsignedWord, boolean, AllocationSnippets$AllocationSnippetCounters):void (68 bytes)   inline method (bytecode parsing)
                                        @ 5  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                          @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                                        @ 44  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                                      @ 190  jdk.graal.compiler.replacements.AllocationSnippets.fillMemoryAligned(long, Word, UnsignedWord, UnsignedWord, boolean, UnsignedWord, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):void (155 bytes)   inline method (bytecode parsing)
                                        @ 91  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                          @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                                        @ 105  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                          @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                                        @ 134  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                                @ 33  jdk.graal.compiler.replacements.AllocationSnippets.emitMemoryBarrierIf(boolean):void (14 bytes)   inline method (bytecode parsing)
                              @ 119  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                              @ 124  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.callNewInstanceStub(Word):Object (33 bytes)   inline method (bytecode parsing)
                                @ 21  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.nonNullOrDeopt(Object):Object (27 bytes)   inline method (bytecode parsing)
                              @ 133  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.profileAllocation(AllocationSnippets$AllocationProfilingData, UnsignedWord):void (51 bytes)   inline method (bytecode parsing)
                              @ 139  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.verifyOop(Object):Object (5 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.verifyOop(Object):Object (19 bytes)   inline method (bytecode parsing)
                            @ 5  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.clearPendingException(Word):Object (30 bytes)   inline method (bytecode parsing)
                            @ 16  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.getPendingException(Word):Object (14 bytes)   inline method (bytecode parsing)
                            @ 27  jdk.graal.compiler.hotspot.stubs.ForeignCallSnippets.getAndClearObjectResult(Word):Object (30 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.StringLatin1.canEncode(int):boolean (13 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=8)
                              @ 14  java.lang.Math.min(int, int):int (11 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=7)
                              @ 20  java.util.HashMap.resize():HashMap$Node[] (356 bytes)   not inlining relevance-based (relevance=0.002259, probability=0.002254, bonus=1.000000, nodes=188 > 0.677653)
                              @ 123  java.util.HashMap$TreeNode.putTreeVal(HashMap, HashMap$Node[], int, Object, Object):HashMap$TreeNode (314 bytes)   not inlining relevance-based (relevance=0.000040, probability=0.000040, bonus=1.000000, nodes=219 > 0.012099)
                              @ 91  java.lang.String.equals(Object):boolean (56 bytes)   not inlining relevance-based (relevance=0.000355, probability=0.000354, bonus=1.000000, nodes=169 > 0.106441)
                            @ 9  java.util.LinkedHashMap$Entry.<init>(int, Object, Object, HashMap$Node):void (10 bytes)   inline method (bytecode parsing)
                                @ 6  java.util.HashMap$Node.<init>(int, Object, Object, HashMap$Node):void (26 bytes)   not inlining relevance-based (relevance=0.001808, probability=0.001800, bonus=1.000000, nodes=17 > 0.542354)
                                @ 17  java.util.LinkedHashMap.linkNodeAtEnd(LinkedHashMap$Entry):void (76 bytes)   not inlining relevance-based (relevance=0.001808, probability=0.001800, bonus=1.000000, nodes=26 > 0.542354)
                                @ 9  java.util.HashMap$Node.<init>(int, Object, Object, HashMap$Node):void (26 bytes)   relevance-based (relevance=0.805997, probability=0.802381, bonus=1.000000, nodes=17 <= 241.799247)
                              @ 56  java.util.HashMap.newNode(int, Object, Object, HashMap$Node):HashMap$Node (13 bytes)   relevance-based (relevance=0.805997, probability=0.804181, bonus=1.000000, nodes=34 <= 241.799247)
                              @ 203  java.lang.String.equals(Object):boolean (56 bytes)   not inlining relevance-based (relevance=0.000072, probability=0.000045, bonus=1.000000, nodes=68 > 0.021596)
                            @ 9  java.util.LinkedHashMap$Entry.<init>(int, Object, Object, HashMap$Node):void (10 bytes)   inline method (bytecode parsing)
                                @ 6  java.util.HashMap$Node.<init>(int, Object, Object, HashMap$Node):void (26 bytes)   not inlining relevance-based (relevance=0.000578, probability=0.000574, bonus=1.000000, nodes=17 > 0.173281)
                                @ 17  java.util.LinkedHashMap.linkNodeAtEnd(LinkedHashMap$Entry):void (76 bytes)   not inlining relevance-based (relevance=0.000578, probability=0.000574, bonus=1.000000, nodes=26 > 0.173281)
                                @ 9  java.util.HashMap$Node.<init>(int, Object, Object, HashMap$Node):void (26 bytes)   relevance-based (relevance=0.120971, probability=0.120125, bonus=1.000000, nodes=17 <= 36.291276)
                              @ 152  java.util.HashMap.newNode(int, Object, Object, HashMap$Node):HashMap$Node (13 bytes)   relevance-based (relevance=0.120971, probability=0.120698, bonus=1.000000, nodes=34 <= 36.291276)
                              @ 169  java.util.HashMap.treeifyBin(HashMap$Node[], int):void (110 bytes)   not inlining relevance-based (relevance=0.000012, probability=0.000012, bonus=1.000000, nodes=77 > 0.003595)
                              @ 253  java.util.HashMap.afterNodeAccess(HashMap$Node):void (1 bytes)   not inlining relevance-based (relevance=0.075255, probability=0.075085, bonus=1.000000, nodes=154 > 22.576375)
                              @ 288  java.util.HashMap.resize():HashMap$Node[] (356 bytes)   not inlining relevance-based (relevance=0.000946, probability=0.000943, bonus=1.000000, nodes=188 > 0.283665)
                            @ 1  java.util.HashMap.size():int (5 bytes)   inline accessor method (bytecode parsing)
                                @ 15  java.util.LinkedHashMap.removeEldestEntry(Map$Entry):boolean (2 bytes)   not inlining relevance-based (relevance=0.002217, probability=0.001145, bonus=1.000000, nodes=14 > 0.665225)
                              @ 295  java.util.HashMap.afterNodeInsertion(boolean):void (1 bytes)   relevance-based (relevance=0.927004, probability=0.924915, bonus=1.000000, nodes=25 <= 278.101278)
                                @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                              @ 1  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=8)
                                @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=40.978097, bonus=1.000000, nodes=9)
                            @ 3  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                                @ 12  java.lang.StringLatin1.charAt(byte[], int):char (15 bytes)   relevance-based (relevance=1.000000, probability=40.978097, bonus=1.000000, nodes=11 <= 300.000000)
                              @ 19  java.lang.String.charAt(int):char (25 bytes)   relevance-based (relevance=1.000000, probability=40.978097, bonus=1.000000, nodes=16 <= 300.000000)
                            @ 18  jdk.graal.compiler.replacements.AllocationSnippets.allocateInstanceImpl(Word, UnsignedWord, boolean, AllocationSnippets$FillContent, boolean, boolean, AllocationSnippets$AllocationProfilingData):Object (143 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getTLABInfo():Word (5 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getThread():Word (8 bytes)   inline method (bytecode parsing)
                                  @ 4  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.registerAsWord(Register):Word (7 bytes)   inline method (bytecode parsing)
                              @ 9  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.readTlabTop(Word):Word (5 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.readTlabTop(Word):Word (17 bytes)   inline method (bytecode parsing)
                              @ 17  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.readTlabEnd(Word):Word (5 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.readTlabEnd(Word):Word (17 bytes)   inline method (bytecode parsing)
                              @ 35  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.useTLAB():boolean (7 bytes)   inline method (bytecode parsing)
                              @ 47  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.shouldAllocateInTLAB(UnsignedWord, boolean):boolean (33 bytes)   inline method (bytecode parsing)
                              @ 77  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.writeTlabTop(Word, Word):void (6 bytes)   inline method (bytecode parsing)
                                @ 2  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.writeTlabTop(Word, Word):void (15 bytes)   inline method (bytecode parsing)
                              @ 84  jdk.graal.compiler.replacements.AllocationSnippets.emitPrefetchAllocate(Word, boolean):void (61 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getPrefetchStyle():int (7 bytes)   inline method (bytecode parsing)
                                @ 9  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getPrefetchLines(boolean):int (18 bytes)   inline method (bytecode parsing)
                                @ 14  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getPrefetchStepSize():int (7 bytes)   inline method (bytecode parsing)
                                @ 20  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getPrefetchDistance():int (7 bytes)   inline method (bytecode parsing)
                              @ 103  jdk.graal.compiler.replacements.AllocationSnippets.formatObject(Word, UnsignedWord, Word, AllocationSnippets$FillContent, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):Object (41 bytes)   inline method (bytecode parsing)
                                @ 4  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.initializeObjectHeader(Word, Word, boolean):void (29 bytes)   inline method (bytecode parsing)
                                  @ 25  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.initializeObjectHeader(Word, Word, KlassPointer):void (20 bytes)   inline method (bytecode parsing)
                                @ 8  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.instanceHeaderSize():int (7 bytes)   inline method (bytecode parsing)
                                @ 27  jdk.graal.compiler.replacements.AllocationSnippets.fillContents(Word, AllocationSnippets$FillContent, int, UnsignedWord, boolean, boolean, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):void (58 bytes)   inline method (bytecode parsing)
                                  @ 22  jdk.graal.compiler.replacements.AllocationSnippets.zeroMemory(Word, int, UnsignedWord, boolean, boolean, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):void (19 bytes)   inline method (bytecode parsing)
                                    @ 15  jdk.graal.compiler.replacements.AllocationSnippets.fillMemory(long, Word, int, UnsignedWord, boolean, boolean, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):void (194 bytes)   inline method (bytecode parsing)
                                      @ 17  jdk.graal.compiler.replacements.ReplacementsUtil.dynamicAssert(boolean, String):void (12 bytes)   inline method (bytecode parsing)
                                      @ 56  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                                      @ 89  jdk.graal.compiler.replacements.ReplacementsUtil.dynamicAssert(boolean, String):void (12 bytes)   inline method (bytecode parsing)
                                      @ 153  jdk.graal.compiler.replacements.ReplacementsUtil.staticAssert(boolean, String):void (12 bytes)   inline method (bytecode parsing)
                                      @ 167  jdk.graal.compiler.replacements.AllocationSnippets.fillMemoryAlignedUnrollable(long, Word, UnsignedWord, UnsignedWord, boolean, AllocationSnippets$AllocationSnippetCounters):void (68 bytes)   inline method (bytecode parsing)
                                        @ 5  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                          @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                                        @ 44  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                                      @ 190  jdk.graal.compiler.replacements.AllocationSnippets.fillMemoryAligned(long, Word, UnsignedWord, UnsignedWord, boolean, UnsignedWord, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):void (155 bytes)   inline method (bytecode parsing)
                                        @ 91  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                          @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                                        @ 105  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                          @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                                        @ 134  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                                @ 33  jdk.graal.compiler.replacements.AllocationSnippets.emitMemoryBarrierIf(boolean):void (14 bytes)   inline method (bytecode parsing)
                              @ 119  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                              @ 124  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.callNewInstanceStub(Word):Object (33 bytes)   inline method (bytecode parsing)
                                @ 21  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.nonNullOrDeopt(Object):Object (27 bytes)   inline method (bytecode parsing)
                              @ 133  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.profileAllocation(AllocationSnippets$AllocationProfilingData, UnsignedWord):void (51 bytes)   inline method (bytecode parsing)
                              @ 139  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.verifyOop(Object):Object (5 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.verifyOop(Object):Object (19 bytes)   inline method (bytecode parsing)
                            @ 18  jdk.graal.compiler.replacements.AllocationSnippets.allocateInstanceImpl(Word, UnsignedWord, boolean, AllocationSnippets$FillContent, boolean, boolean, AllocationSnippets$AllocationProfilingData):Object (143 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getTLABInfo():Word (5 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getThread():Word (8 bytes)   inline method (bytecode parsing)
                                  @ 4  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.registerAsWord(Register):Word (7 bytes)   inline method (bytecode parsing)
                              @ 9  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.readTlabTop(Word):Word (5 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.readTlabTop(Word):Word (17 bytes)   inline method (bytecode parsing)
                              @ 17  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.readTlabEnd(Word):Word (5 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.readTlabEnd(Word):Word (17 bytes)   inline method (bytecode parsing)
                              @ 35  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.useTLAB():boolean (7 bytes)   inline method (bytecode parsing)
                              @ 47  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.shouldAllocateInTLAB(UnsignedWord, boolean):boolean (33 bytes)   inline method (bytecode parsing)
                              @ 77  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.writeTlabTop(Word, Word):void (6 bytes)   inline method (bytecode parsing)
                                @ 2  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.writeTlabTop(Word, Word):void (15 bytes)   inline method (bytecode parsing)
                              @ 84  jdk.graal.compiler.replacements.AllocationSnippets.emitPrefetchAllocate(Word, boolean):void (61 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getPrefetchStyle():int (7 bytes)   inline method (bytecode parsing)
                                @ 9  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getPrefetchLines(boolean):int (18 bytes)   inline method (bytecode parsing)
                                @ 14  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getPrefetchStepSize():int (7 bytes)   inline method (bytecode parsing)
                                @ 20  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getPrefetchDistance():int (7 bytes)   inline method (bytecode parsing)
                              @ 103  jdk.graal.compiler.replacements.AllocationSnippets.formatObject(Word, UnsignedWord, Word, AllocationSnippets$FillContent, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):Object (41 bytes)   inline method (bytecode parsing)
                                @ 4  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.initializeObjectHeader(Word, Word, boolean):void (29 bytes)   inline method (bytecode parsing)
                                  @ 25  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.initializeObjectHeader(Word, Word, KlassPointer):void (20 bytes)   inline method (bytecode parsing)
                                @ 8  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.instanceHeaderSize():int (7 bytes)   inline method (bytecode parsing)
                                @ 27  jdk.graal.compiler.replacements.AllocationSnippets.fillContents(Word, AllocationSnippets$FillContent, int, UnsignedWord, boolean, boolean, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):void (58 bytes)   inline method (bytecode parsing)
                                  @ 22  jdk.graal.compiler.replacements.AllocationSnippets.zeroMemory(Word, int, UnsignedWord, boolean, boolean, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):void (19 bytes)   inline method (bytecode parsing)
                                    @ 15  jdk.graal.compiler.replacements.AllocationSnippets.fillMemory(long, Word, int, UnsignedWord, boolean, boolean, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):void (194 bytes)   inline method (bytecode parsing)
                                      @ 17  jdk.graal.compiler.replacements.ReplacementsUtil.dynamicAssert(boolean, String):void (12 bytes)   inline method (bytecode parsing)
                                      @ 56  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                                      @ 89  jdk.graal.compiler.replacements.ReplacementsUtil.dynamicAssert(boolean, String):void (12 bytes)   inline method (bytecode parsing)
                                      @ 153  jdk.graal.compiler.replacements.ReplacementsUtil.staticAssert(boolean, String):void (12 bytes)   inline method (bytecode parsing)
                                      @ 167  jdk.graal.compiler.replacements.AllocationSnippets.fillMemoryAlignedUnrollable(long, Word, UnsignedWord, UnsignedWord, boolean, AllocationSnippets$AllocationSnippetCounters):void (68 bytes)   inline method (bytecode parsing)
                                        @ 5  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                          @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                                        @ 44  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                                      @ 190  jdk.graal.compiler.replacements.AllocationSnippets.fillMemoryAligned(long, Word, UnsignedWord, UnsignedWord, boolean, UnsignedWord, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):void (155 bytes)   inline method (bytecode parsing)
                                        @ 91  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                          @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                                        @ 105  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                          @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                                        @ 134  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                                @ 33  jdk.graal.compiler.replacements.AllocationSnippets.emitMemoryBarrierIf(boolean):void (14 bytes)   inline method (bytecode parsing)
                              @ 119  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                              @ 124  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.callNewInstanceStub(Word):Object (33 bytes)   inline method (bytecode parsing)
                                @ 21  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.nonNullOrDeopt(Object):Object (27 bytes)   inline method (bytecode parsing)
                              @ 133  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.profileAllocation(AllocationSnippets$AllocationProfilingData, UnsignedWord):void (51 bytes)   inline method (bytecode parsing)
                              @ 139  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.verifyOop(Object):Object (5 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.verifyOop(Object):Object (19 bytes)   inline method (bytecode parsing)
                            @ 33  java.util.WeakHashMap.indexFor(int, int):int (6 bytes)   inline method (bytecode parsing)
                            @ 13  java.util.concurrent.locks.ReentrantLock.lock():void (8 bytes)   inline method (bytecode parsing)
                            @ 25  java.util.concurrent.locks.ReentrantLock.unlock():void (10 bytes)   inline method (bytecode parsing)
                              @ 5  java.util.concurrent.locks.AbstractQueuedSynchronizer.release(int):boolean (19 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.ref.ReferenceQueue.headIsNull():boolean (13 bytes)   relevance-based (relevance=1.000440, probability=1.000422, bonus=1.000000, nodes=11 <= 300.000000)
                            @ 9  java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(int):void (20 bytes)   inline method (bytecode parsing)
                                @ 4  java.util.concurrent.locks.ReentrantLock$Sync.lock():void (13 bytes)   not inlining relevance-based (relevance=0.000440, probability=0.000440, bonus=1.000000, nodes=31 > 0.132092)
                                @ 17  java.lang.ref.ReferenceQueue.poll0():Reference (65 bytes)   not inlining relevance-based (relevance=0.000440, probability=0.000440, bonus=1.000000, nodes=41 > 0.132092)
                            @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 8  java.util.concurrent.locks.AbstractOwnableSynchronizer.getExclusiveOwnerThread():Thread (5 bytes)   inline accessor method (bytecode parsing)
                            @ 41  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                            @ 46  java.util.concurrent.locks.AbstractQueuedSynchronizer.setState(int):void (6 bytes)   inline method (bytecode parsing)
                                @ 2  java.util.concurrent.locks.ReentrantLock$Sync.tryRelease(int):boolean (51 bytes)   not inlining relevance-based (relevance=0.000440, probability=0.000440, bonus=1.000000, nodes=37 > 0.132092)
                            @ 22  java.util.concurrent.locks.AbstractQueuedSynchronizer$Node.getAndUnsetStatus(int):int (14 bytes)   inline method (bytecode parsing)
                              @ 10  jdk.internal.misc.Unsafe.getAndBitwiseAndInt(Object, long, int):int (27 bytes)   inline method (bytecode parsing)
                                @ 12  java.util.concurrent.locks.AbstractQueuedSynchronizer.signalNext(AbstractQueuedSynchronizer$Node):void (34 bytes)   not inlining relevance-based (relevance=0.000419, probability=0.000419, bonus=1.000000, nodes=56 > 0.125729)
                              @ 4  java.lang.ref.ReferenceQueue.poll():Reference (40 bytes)   relevance-based (relevance=1.000422, probability=1.000422, bonus=1.000000, nodes=57 <= 300.000000)
                            @ 1  java.nio.Buffer.limit():int (5 bytes)   inline accessor method (bytecode parsing)
                                @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                              @ 10  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=8)
                            @ 4  java.nio.Buffer.session():MemorySessionImpl (20 bytes)   inline method (bytecode parsing)
                            @ 11  java.nio.Buffer.checkIndex(int):int (12 bytes)   inline method (bytecode parsing)
                            @ 14  java.nio.DirectByteBuffer.ix(int):long (10 bytes)   inline method (bytecode parsing)
                            @ 17  jdk.internal.misc.ScopedMemoryAccess.getByte(MemorySessionImpl, Object, long):byte (16 bytes)   inline method (bytecode parsing)
                              @ 4  jdk.internal.misc.ScopedMemoryAccess.getByteInternal(MemorySessionImpl, Object, long):byte (34 bytes)   inline method (bytecode parsing)
                              @ 25  java.nio.DirectByteBuffer.get(int):byte (34 bytes)   relevance-based (relevance=1.049801, probability=21.079810, bonus=1.000000, nodes=23 <= 300.000000)
                                @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=20.085873, bonus=1.000000, nodes=9)
                            @ 3  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                                @ 12  java.lang.StringLatin1.charAt(byte[], int):char (15 bytes)   relevance-based (relevance=1.000000, probability=20.085873, bonus=1.000000, nodes=11 <= 300.000000)
                              @ 53  java.lang.String.charAt(int):char (25 bytes)   relevance-based (relevance=1.000302, probability=20.085873, bonus=1.000000, nodes=16 <= 300.000000)
                            @ 4  deltablue.Plan.lambda$execute$0(AbstractConstraint):void (5 bytes)   inline method (bytecode parsing)
                            @ 18  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 21  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 35  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 38  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 18  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 25  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 33  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 37  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 51  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 58  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 66  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 70  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                              @ 1  deltablue.EqualityConstraint.execute():void (42 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=103 <= 300.000000)
                            @ 18  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 21  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 35  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 38  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 29  jdk.graal.compiler.nodes.PiNode.piCastNonNullClass(Class, GuardingNode):Class (9 bytes)   inline method (bytecode parsing)
                            @ 37  jdk.graal.compiler.nodes.java.DynamicNewInstanceNode.throwsInstantiationExceptionInjectedProbability(double, Class, Class):boolean (70 bytes)   inline method (bytecode parsing)
                              @ 38  java.lang.reflect.Modifier.isAbstract(int):boolean (14 bytes)   inline method (bytecode parsing)
                            @ 2  jdk.graal.compiler.hotspot.replacements.HotSpotIsArraySnippets.classIsArray(Class):boolean (33 bytes)   inline method (bytecode parsing)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                              @ 24  jdk.graal.compiler.hotspot.replacements.ClassGetHubNode.piCastNonNull(KlassPointer, GuardingNode):KlassPointer (9 bytes)   inline method (bytecode parsing)
                              @ 29  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.klassIsArray(KlassPointer):boolean (23 bytes)   inline method (bytecode parsing)
                              @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000133, probability=0.000133, bonus=1.000000, nodes=41 > 0.039788)
                            @ 33  jdk.graal.compiler.hotspot.replacements.ClassGetHubNode.piCastNonNull(KlassPointer, GuardingNode):KlassPointer (9 bytes)   inline method (bytecode parsing)
                            @ 43  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.isInstanceKlassFullyInitialized(KlassPointer):boolean (19 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.readInstanceKlassInitState(KlassPointer):byte (14 bytes)   inline method (bytecode parsing)
                            @ 101  jdk.graal.compiler.replacements.AllocationSnippets.allocateInstanceImpl(Word, UnsignedWord, boolean, AllocationSnippets$FillContent, boolean, boolean, AllocationSnippets$AllocationProfilingData):Object (143 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getTLABInfo():Word (5 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getThread():Word (8 bytes)   inline method (bytecode parsing)
                                  @ 4  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.registerAsWord(Register):Word (7 bytes)   inline method (bytecode parsing)
                              @ 9  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.readTlabTop(Word):Word (5 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.readTlabTop(Word):Word (17 bytes)   inline method (bytecode parsing)
                              @ 17  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.readTlabEnd(Word):Word (5 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.readTlabEnd(Word):Word (17 bytes)   inline method (bytecode parsing)
                              @ 35  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.useTLAB():boolean (7 bytes)   inline method (bytecode parsing)
                              @ 47  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.shouldAllocateInTLAB(UnsignedWord, boolean):boolean (33 bytes)   inline method (bytecode parsing)
                              @ 77  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.writeTlabTop(Word, Word):void (6 bytes)   inline method (bytecode parsing)
                                @ 2  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.writeTlabTop(Word, Word):void (15 bytes)   inline method (bytecode parsing)
                              @ 84  jdk.graal.compiler.replacements.AllocationSnippets.emitPrefetchAllocate(Word, boolean):void (61 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getPrefetchStyle():int (7 bytes)   inline method (bytecode parsing)
                                @ 9  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getPrefetchLines(boolean):int (18 bytes)   inline method (bytecode parsing)
                                @ 14  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getPrefetchStepSize():int (7 bytes)   inline method (bytecode parsing)
                                @ 20  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getPrefetchDistance():int (7 bytes)   inline method (bytecode parsing)
                              @ 103  jdk.graal.compiler.replacements.AllocationSnippets.formatObject(Word, UnsignedWord, Word, AllocationSnippets$FillContent, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):Object (41 bytes)   inline method (bytecode parsing)
                                @ 4  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.initializeObjectHeader(Word, Word, boolean):void (29 bytes)   inline method (bytecode parsing)
                                  @ 25  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.initializeObjectHeader(Word, Word, KlassPointer):void (20 bytes)   inline method (bytecode parsing)
                                @ 8  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.instanceHeaderSize():int (7 bytes)   inline method (bytecode parsing)
                                @ 27  jdk.graal.compiler.replacements.AllocationSnippets.fillContents(Word, AllocationSnippets$FillContent, int, UnsignedWord, boolean, boolean, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):void (58 bytes)   inline method (bytecode parsing)
                                  @ 22  jdk.graal.compiler.replacements.AllocationSnippets.zeroMemory(Word, int, UnsignedWord, boolean, boolean, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):void (19 bytes)   inline method (bytecode parsing)
                                    @ 15  jdk.graal.compiler.replacements.AllocationSnippets.fillMemory(long, Word, int, UnsignedWord, boolean, boolean, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):void (194 bytes)   inline method (bytecode parsing)
                                      @ 17  jdk.graal.compiler.replacements.ReplacementsUtil.dynamicAssert(boolean, String):void (12 bytes)   inline method (bytecode parsing)
                                      @ 56  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                                      @ 89  jdk.graal.compiler.replacements.ReplacementsUtil.dynamicAssert(boolean, String):void (12 bytes)   inline method (bytecode parsing)
                                      @ 153  jdk.graal.compiler.replacements.ReplacementsUtil.staticAssert(boolean, String):void (12 bytes)   inline method (bytecode parsing)
                                      @ 167  jdk.graal.compiler.replacements.AllocationSnippets.fillMemoryAlignedUnrollable(long, Word, UnsignedWord, UnsignedWord, boolean, AllocationSnippets$AllocationSnippetCounters):void (68 bytes)   inline method (bytecode parsing)
                                        @ 5  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                          @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                                        @ 44  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                                      @ 190  jdk.graal.compiler.replacements.AllocationSnippets.fillMemoryAligned(long, Word, UnsignedWord, UnsignedWord, boolean, UnsignedWord, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):void (155 bytes)   inline method (bytecode parsing)
                                        @ 105  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                          @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                                        @ 134  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                                @ 33  jdk.graal.compiler.replacements.AllocationSnippets.emitMemoryBarrierIf(boolean):void (14 bytes)   inline method (bytecode parsing)
                                  @ 7  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                              @ 119  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                              @ 124  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.callNewInstanceStub(Word):Object (33 bytes)   inline method (bytecode parsing)
                                @ 21  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.nonNullOrDeopt(Object):Object (27 bytes)   inline method (bytecode parsing)
                              @ 133  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.profileAllocation(AllocationSnippets$AllocationProfilingData, UnsignedWord):void (51 bytes)   inline method (bytecode parsing)
                              @ 139  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.verifyOop(Object):Object (5 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.verifyOop(Object):Object (19 bytes)   inline method (bytecode parsing)
                            @ 118  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.dynamicNewInstanceStub(Class):Object (28 bytes)   inline method (bytecode parsing)
                              @ 16  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.nonNullOrDeopt(Object):Object (27 bytes)   inline method (bytecode parsing)
                            @ 5  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.clearPendingException(Word):Object (30 bytes)   inline method (bytecode parsing)
                            @ 16  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.getPendingException(Word):Object (14 bytes)   inline method (bytecode parsing)
                            @ 27  jdk.graal.compiler.hotspot.stubs.ForeignCallSnippets.getAndClearObjectResult(Word):Object (30 bytes)   inline method (bytecode parsing)
                            @ 4  java.nio.Buffer.session():MemorySessionImpl (20 bytes)   inline method (bytecode parsing)
                            @ 13  java.nio.DirectByteBuffer.ix(int):long (10 bytes)   inline method (bytecode parsing)
                            @ 17  jdk.internal.misc.ScopedMemoryAccess.putByte(MemorySessionImpl, Object, long, byte):void (21 bytes)   inline method (bytecode parsing)
                              @ 6  jdk.internal.misc.ScopedMemoryAccess.putByteInternal(MemorySessionImpl, Object, long, byte):void (35 bytes)   inline method (bytecode parsing)
                              @ 10  java.nio.Buffer.nextPutIndex():int (30 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=12 <= 300.000000)
                            @ 18  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 25  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 33  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 37  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 51  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 58  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 66  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 70  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 7  java.nio.DirectByteBuffer.ix(int):long (10 bytes)   inline method (bytecode parsing)
                              @ 4  java.nio.Buffer.nextPutIndex(int):int (32 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=13 <= 300.000000)
                            @ 7  java.nio.Buffer.session():MemorySessionImpl (20 bytes)   inline method (bytecode parsing)
                            @ 18  jdk.internal.misc.ScopedMemoryAccess.putCharUnaligned(MemorySessionImpl, Object, long, char, boolean):void (23 bytes)   inline method (bytecode parsing)
                              @ 8  jdk.internal.misc.ScopedMemoryAccess.putCharUnalignedInternal(MemorySessionImpl, Object, long, char, boolean):void (37 bytes)   inline method (bytecode parsing)
                                @ 17  jdk.internal.misc.Unsafe.putCharUnaligned(Object, long, char, boolean):void (14 bytes)   inline method (bytecode parsing)
                                @ 7  jdk.internal.misc.Unsafe.convEndian(boolean, char):char (16 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=13 <= 300.000000)
                            @ 7  java.nio.Buffer.session():MemorySessionImpl (20 bytes)   inline method (bytecode parsing)
                              @ 11  java.nio.DirectByteBuffer.putChar(long, char):ByteBuffer (39 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=26 <= 300.000000)
                            @ 18  jdk.internal.misc.ScopedMemoryAccess.putCharUnaligned(MemorySessionImpl, Object, long, char, boolean):void (23 bytes)   inline method (bytecode parsing)
                              @ 8  jdk.internal.misc.ScopedMemoryAccess.putCharUnalignedInternal(MemorySessionImpl, Object, long, char, boolean):void (37 bytes)   inline method (bytecode parsing)
                                @ 17  jdk.internal.misc.Unsafe.putCharUnaligned(Object, long, char, boolean):void (14 bytes)   inline method (bytecode parsing)
                              @ 7  jdk.internal.misc.Unsafe.convEndian(boolean, char):char (16 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=13 <= 300.000000)
                            @ 1  java.util.HashMap$EntryIterator.next():Map$Entry (5 bytes)   inline method (bytecode parsing)
                              @ 1  java.util.HashMap$HashIterator.nextNode():HashMap$Node (100 bytes)   not inlining too large previous low-level graph (low-level-nodes: 450, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=53)
                              @ 7  jdk.internal.misc.Unsafe.convEndian(boolean, char):char (16 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                @ 6  deltablue.BinaryConstraint.isSatisfied():boolean (13 bytes)   relevance-based (relevance=0.737477, probability=0.424453, bonus=1.000000, nodes=14 <= 221.243190)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                  @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000064, probability=0.000037, bonus=1.000000, nodes=41 > 0.019061)
                                @ 14  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=0.484623, probability=0.278923, bonus=1.000000, nodes=35 <= 145.386814)
                              @ 12  deltablue.Planner.lambda$addConstraintsConsumingTo$2(AbstractConstraint, Vector, AbstractConstraint):void (18 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=72 <= 300.000000)
                              @ 6  deltablue.BinaryConstraint.isSatisfied():boolean (13 bytes)   relevance-based (relevance=0.737477, probability=0.424453, bonus=1.000000, nodes=14 <= 221.243190)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000064, probability=0.000037, bonus=1.000000, nodes=41 > 0.019061)
                              @ 14  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=0.484623, probability=0.278923, bonus=1.000000, nodes=35 <= 145.386814)
                              @ 17  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=0.015132, probability=0.014906, bonus=1.000000, nodes=9)
                              @ 27  java.lang.StringLatin1.hashCode(byte[]):int (52 bytes)   not inlining relevance-based (relevance=0.015132, probability=0.014906, bonus=1.000000, nodes=22 > 4.539584)
                              @ 44  java.lang.StringLatin1.equals(byte[], byte[]):boolean (36 bytes)   relevance-based (relevance=0.158026, probability=0.136341, bonus=1.000000, nodes=33 <= 47.407906)
                            @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=14 <= 300.000000)
                              @ 1  som.Vector.isEmpty():boolean (17 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=14 <= 300.000000)
                                  @ 17  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=0.015046, probability=0.014604, bonus=1.000000, nodes=9)
                                  @ 27  java.lang.StringLatin1.hashCode(byte[]):int (52 bytes)   not inlining relevance-based (relevance=0.015046, probability=0.014604, bonus=1.000000, nodes=22 > 4.513881)
                                @ 9  java.lang.String.hashCode():int (60 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=38 <= 300.000000)
                              @ 2  java.util.HashMap.hash(Object):int (20 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=56 <= 300.000000)
                              @ 9  java.util.HashMap.putVal(int, Object, Object, boolean, boolean):Object (300 bytes)   not inlining too large previous low-level graph (low-level-nodes: 766, relevance=1.030275, probability=1.000000, bonus=1.000000, nodes=166)
                            @ 4  som.Vector.<init>():void (7 bytes)   inline method (bytecode parsing)
                              @ 3  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 10  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 14  deltablue.Strength.absoluteWeakest():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 17  deltablue.Variable.setWalkStrength(Strength):void (6 bytes)   inline method (bytecode parsing)
                            @ 22  deltablue.Variable.setStay(boolean):void (6 bytes)   inline method (bytecode parsing)
                            @ 48  deltablue.Variable.getConstraints():Vector (5 bytes)   inline accessor method (bytecode parsing)
                            @ 52  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.Planner$$Lambda/0x00007f45e0083030.<init>(Vector):void (10 bytes)   inline method (bytecode parsing)
                            @ 64  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.Planner$$Lambda/0x00007f45e0083250.<init>(Vector):void (10 bytes)   inline method (bytecode parsing)
                            @ 76  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object):Object (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.lang.invoke.LambdaForm$MH/0x00007f45e0000800.invoke(Object):Object (8 bytes)   inline method (bytecode parsing)
                              @ 31  som.Vector.isEmpty():boolean (17 bytes)   relevance-based (relevance=1.000028, probability=1.000000, bonus=1.000000, nodes=10 <= 300.000000)
                                @ 1  som.Vector.isEmpty():boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.999972, bonus=1.000000, nodes=10 <= 300.000000)
                              @ 38  som.Vector.removeFirst():Object (31 bytes)   relevance-based (relevance=1.000000, probability=0.999972, bonus=1.000000, nodes=18 <= 300.000000)
                                    @ 1  deltablue.BinaryConstraint.isSatisfied():boolean (13 bytes)   trivial (relevance=1.000000, probability=9.879139, bonus=1.000000, nodes=9)
                                  @ 8  deltablue.Planner.lambda$removePropagateFrom$4(Vector, AbstractConstraint):void (13 bytes)   trivial (relevance=1.000000, probability=9.879139, bonus=1.000000, nodes=8)
                                @ 20  deltablue.Planner$$Lambda/0x00007f45e0083030.apply(Object):void (12 bytes)   relevance-based (relevance=1.000000, probability=9.879139, bonus=1.000000, nodes=14 <= 300.000000)
                              @ 57  som.Vector.forEach(ForEachInterface):void (32 bytes)   relevance-based (relevance=1.000000, probability=0.999972, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 6  deltablue.Variable.getConstraints():Vector (5 bytes)   inline accessor method (bytecode parsing)
                            @ 11  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object, Object):Object (10 bytes)   inline method (bytecode parsing)
                              @ 6  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object, Object):Object (24 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 19  deltablue.Planner$$Lambda/0x00007f45e0083470.<init>(AbstractConstraint, ForEachInterface):void (15 bytes)   relevance-based (relevance=1.000000, probability=0.999972, bonus=1.000000, nodes=11 <= 300.000000)
                                      @ 6  deltablue.BinaryConstraint.isSatisfied():boolean (13 bytes)   trivial (relevance=1.000000, probability=4.939570, bonus=1.000000, nodes=9)
                            @ 39  deltablue.Variable.getWalkStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 45  deltablue.Variable.setWalkStrength(Strength):void (6 bytes)   inline method (bytecode parsing)
                            @ 50  deltablue.Variable.getStay():boolean (5 bytes)   inline accessor method (bytecode parsing)
                            @ 53  deltablue.Variable.setStay(boolean):void (6 bytes)   inline method (bytecode parsing)
                            @ 57  deltablue.Variable.getStay():boolean (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 2  deltablue.Strength.weaker(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=4.939570, bonus=1.000000, nodes=11 <= 300.000000)
                                            @ 42  deltablue.Strength.weakest(Strength):Strength (14 bytes)   relevance-based (relevance=1.533636, probability=4.939570, bonus=1.000000, nodes=12 <= 300.000000)
                            @ 18  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 21  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 35  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 38  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                                            @ 64  deltablue.EqualityConstraint.execute():void (42 bytes)   relevance-based (relevance=1.266818, probability=4.080196, bonus=1.000000, nodes=38 <= 300.000000)
                                          @ 1  deltablue.BinaryConstraint.recalculate():void (68 bytes)   relevance-based (relevance=1.000000, probability=4.939570, bonus=1.000000, nodes=86 <= 300.000000)
                                          @ 6  deltablue.BinaryConstraint.getOutput():Variable (22 bytes)   relevance-based (relevance=1.533636, probability=4.939570, bonus=1.000000, nodes=17 <= 300.000000)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                            @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000131, probability=0.000648, bonus=1.000000, nodes=41 > 0.039331)
                                          @ 9  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.533636, probability=4.939570, bonus=1.000000, nodes=35 <= 300.000000)
                                        @ 8  deltablue.Planner.lambda$removePropagateFrom$5(Vector, AbstractConstraint):void (13 bytes)   relevance-based (relevance=1.000000, probability=4.939570, bonus=1.000000, nodes=135 <= 300.000000)
                                      @ 14  deltablue.Planner$$Lambda/0x00007f45e0083250.apply(Object):void (12 bytes)   relevance-based (relevance=1.000000, probability=4.939570, bonus=1.000000, nodes=137 <= 300.000000)
                                    @ 12  deltablue.Planner.lambda$constraintsConsuming$3(AbstractConstraint, ForEachInterface, AbstractConstraint):void (20 bytes)   relevance-based (relevance=1.000000, probability=9.879139, bonus=1.000000, nodes=158 <= 300.000000)
                                  @ 20  deltablue.Planner$$Lambda/0x00007f45e0083470.apply(Object):void (16 bytes)   relevance-based (relevance=1.000000, probability=9.879139, bonus=1.000000, nodes=166 <= 300.000000)
                                @ 16  som.Vector.forEach(ForEachInterface):void (32 bytes)   relevance-based (relevance=1.000000, probability=0.999972, bonus=1.000000, nodes=179 <= 300.000000)
                              @ 69  deltablue.Planner.constraintsConsuming(Variable, ForEachInterface):void (20 bytes)   relevance-based (relevance=1.000000, probability=0.999972, bonus=1.000000, nodes=198 <= 300.000000)
                              @ 31  som.Vector.isEmpty():boolean (17 bytes)   relevance-based (relevance=1.000028, probability=36000.400028, bonus=1.000000, nodes=10 <= 300.000000)
                                @ 1  som.Vector.isEmpty():boolean (17 bytes)   relevance-based (relevance=1.000000, probability=35999.400055, bonus=1.000000, nodes=10 <= 300.000000)
                              @ 38  som.Vector.removeFirst():Object (31 bytes)   relevance-based (relevance=1.000000, probability=35999.400055, bonus=1.000000, nodes=18 <= 300.000000)
                            @ 8  deltablue.AbstractConstraint.lambda$satisfy$1(int, Variable):void (6 bytes)   inline method (bytecode parsing)
                                    @ 1  deltablue.BinaryConstraint.isSatisfied():boolean (13 bytes)   trivial (relevance=1.000000, probability=355652.968076, bonus=1.000000, nodes=9)
                              @ 2  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                                  @ 8  deltablue.Planner.lambda$removePropagateFrom$4(Vector, AbstractConstraint):void (13 bytes)   trivial (relevance=1.000000, probability=355652.968076, bonus=1.000000, nodes=8)
                                @ 20  deltablue.Planner$$Lambda/0x00007f45e0083030.apply(Object):void (12 bytes)   relevance-based (relevance=1.000000, probability=355652.968076, bonus=1.000000, nodes=14 <= 300.000000)
                              @ 57  som.Vector.forEach(ForEachInterface):void (32 bytes)   relevance-based (relevance=1.000000, probability=35999.400055, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 6  deltablue.Variable.getConstraints():Vector (5 bytes)   inline accessor method (bytecode parsing)
                            @ 11  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object, Object):Object (10 bytes)   inline method (bytecode parsing)
                              @ 6  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object, Object):Object (24 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 19  deltablue.Planner$$Lambda/0x00007f45e0083470.<init>(AbstractConstraint, ForEachInterface):void (15 bytes)   relevance-based (relevance=1.000000, probability=35999.400055, bonus=1.000000, nodes=11 <= 300.000000)
                                      @ 6  deltablue.BinaryConstraint.isSatisfied():boolean (13 bytes)   trivial (relevance=1.000000, probability=177826.484038, bonus=1.000000, nodes=9)
                            @ 39  deltablue.Variable.getWalkStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 45  deltablue.Variable.setWalkStrength(Strength):void (6 bytes)   inline method (bytecode parsing)
                            @ 50  deltablue.Variable.getStay():boolean (5 bytes)   inline accessor method (bytecode parsing)
                            @ 53  deltablue.Variable.setStay(boolean):void (6 bytes)   inline method (bytecode parsing)
                            @ 57  deltablue.Variable.getStay():boolean (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 2  deltablue.Strength.weaker(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=177826.484038, bonus=1.000000, nodes=11 <= 300.000000)
                                            @ 42  deltablue.Strength.weakest(Strength):Strength (14 bytes)   relevance-based (relevance=1.533636, probability=177826.484038, bonus=1.000000, nodes=12 <= 300.000000)
                            @ 18  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 21  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 35  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 38  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                                            @ 64  deltablue.EqualityConstraint.execute():void (42 bytes)   relevance-based (relevance=1.266818, probability=146888.683034, bonus=1.000000, nodes=38 <= 300.000000)
                                          @ 1  deltablue.BinaryConstraint.recalculate():void (68 bytes)   relevance-based (relevance=1.000000, probability=177826.484038, bonus=1.000000, nodes=86 <= 300.000000)
                                          @ 6  deltablue.BinaryConstraint.getOutput():Variable (22 bytes)   relevance-based (relevance=1.533636, probability=177826.484038, bonus=1.000000, nodes=17 <= 300.000000)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                            @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000131, probability=23.310700, bonus=1.000000, nodes=41 > 0.039331)
                                          @ 9  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.533636, probability=177826.484038, bonus=1.000000, nodes=35 <= 300.000000)
                                        @ 8  deltablue.Planner.lambda$removePropagateFrom$5(Vector, AbstractConstraint):void (13 bytes)   relevance-based (relevance=1.000000, probability=177826.484038, bonus=1.000000, nodes=135 <= 300.000000)
                                      @ 14  deltablue.Planner$$Lambda/0x00007f45e0083250.apply(Object):void (12 bytes)   relevance-based (relevance=1.000000, probability=177826.484038, bonus=1.000000, nodes=137 <= 300.000000)
                                    @ 12  deltablue.Planner.lambda$constraintsConsuming$3(AbstractConstraint, ForEachInterface, AbstractConstraint):void (20 bytes)   relevance-based (relevance=1.000000, probability=355652.968076, bonus=1.000000, nodes=158 <= 300.000000)
                                  @ 20  deltablue.Planner$$Lambda/0x00007f45e0083470.apply(Object):void (16 bytes)   relevance-based (relevance=1.000000, probability=355652.968076, bonus=1.000000, nodes=166 <= 300.000000)
                                @ 16  som.Vector.forEach(ForEachInterface):void (32 bytes)   relevance-based (relevance=1.000000, probability=35999.400055, bonus=1.000000, nodes=179 <= 300.000000)
                              @ 69  deltablue.Planner.constraintsConsuming(Variable, ForEachInterface):void (20 bytes)   relevance-based (relevance=1.000000, probability=35999.400055, bonus=1.000000, nodes=198 <= 300.000000)
                            @ 1  som.Vector.size():int (10 bytes)   inline method (bytecode parsing)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 6  deltablue.Variable.getConstraints():Vector (5 bytes)   inline accessor method (bytecode parsing)
                            @ 11  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object, Object):Object (10 bytes)   inline method (bytecode parsing)
                              @ 6  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object, Object):Object (24 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                      @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.250000, bonus=1.000000, nodes=13 <= 300.000000)
                                    @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.250000, bonus=1.000000, nodes=24 <= 300.000000)
                                  @ 45  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.250000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                              @ 19  deltablue.Planner$$Lambda/0x00007f45e0031a28.<init>(AbstractConstraint, Vector):void (15 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                      @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.062500, bonus=1.000000, nodes=13 <= 300.000000)
                                    @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.062500, bonus=1.000000, nodes=24 <= 300.000000)
                                  @ 101  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.062500, bonus=1.000000, nodes=30 <= 300.000000)
                                @ 20  deltablue.Planner$$Lambda/0x00007f45e0031a28.apply(Object):void (16 bytes)   not inlining too large previous low-level graph (low-level-nodes: 346, relevance=1.000000, probability=9.879414, bonus=1.000000, nodes=16)
                              @ 16  som.Vector.forEach(ForEachInterface):void (32 bytes)   not inlining callee invoke probability is too high (invokeP=9.879414, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=24)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                      @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.062500, bonus=1.000000, nodes=13 <= 300.000000)
                                    @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.062500, bonus=1.000000, nodes=24 <= 300.000000)
                                  @ 114  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.062500, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                      @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.010417, bonus=1.000000, nodes=13 <= 300.000000)
                                    @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.010417, bonus=1.000000, nodes=24 <= 300.000000)
                                  @ 184  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.010417, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                      @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.010417, bonus=1.000000, nodes=13 <= 300.000000)
                                    @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.010417, bonus=1.000000, nodes=24 <= 300.000000)
                                  @ 218  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.010417, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                        @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.003906, bonus=1.000000, nodes=13 <= 300.000000)
                                      @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.003906, bonus=1.000000, nodes=24 <= 300.000000)
                                    @ 45  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.003906, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                        @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000977, bonus=1.000000, nodes=13 <= 300.000000)
                                      @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000977, bonus=1.000000, nodes=24 <= 300.000000)
                                    @ 101  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000977, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                        @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000977, bonus=1.000000, nodes=13 <= 300.000000)
                                      @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000977, bonus=1.000000, nodes=24 <= 300.000000)
                                    @ 114  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000977, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                        @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000163, bonus=1.000000, nodes=13 <= 300.000000)
                                      @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000163, bonus=1.000000, nodes=24 <= 300.000000)
                                    @ 184  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000163, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                        @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000163, bonus=1.000000, nodes=13 <= 300.000000)
                                      @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000163, bonus=1.000000, nodes=24 <= 300.000000)
                                    @ 218  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000163, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000061, bonus=1.000000, nodes=13 <= 300.000000)
                                        @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000061, bonus=1.000000, nodes=24 <= 300.000000)
                                      @ 45  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000061, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000015, bonus=1.000000, nodes=13 <= 300.000000)
                                        @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000015, bonus=1.000000, nodes=24 <= 300.000000)
                                      @ 101  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000015, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000015, bonus=1.000000, nodes=13 <= 300.000000)
                                        @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000015, bonus=1.000000, nodes=24 <= 300.000000)
                                      @ 114  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000015, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000003, bonus=1.000000, nodes=13 <= 300.000000)
                                        @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000003, bonus=1.000000, nodes=24 <= 300.000000)
                                      @ 184  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000003, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000003, bonus=1.000000, nodes=13 <= 300.000000)
                                        @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000003, bonus=1.000000, nodes=24 <= 300.000000)
                                      @ 218  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000003, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                            @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000001, bonus=1.000000, nodes=13 <= 300.000000)
                                          @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000001, bonus=1.000000, nodes=24 <= 300.000000)
                                        @ 45  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000001, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                            @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                          @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                        @ 101  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                            @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                          @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                        @ 114  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                            @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                          @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                        @ 184  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                            @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                          @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                        @ 218  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 45  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 101  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 114  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 184  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 218  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 45  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 101  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 114  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                              @ 2  deltablue.Strength.weaker(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 184  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 218  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                                          @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining it exceeds the maximum recursive inlining depth
                                          @ 269  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining it exceeds the maximum recursive inlining depth
                                          @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=202 <= 300.000000)
                                        @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=387 > 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 45  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 101  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 114  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 184  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 218  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 45  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 101  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 23  jdk.graal.compiler.replacements.AllocationSnippets.allocateArrayImpl(Word, int, int, int, AllocationSnippets$FillContent, int, boolean, boolean, boolean, boolean, AllocationSnippets$AllocationProfilingData):Object (178 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getTLABInfo():Word (5 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getThread():Word (8 bytes)   inline method (bytecode parsing)
                                  @ 4  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.registerAsWord(Register):Word (7 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                              @ 9  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.readTlabTop(Word):Word (5 bytes)   inline method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.readTlabTop(Word):Word (17 bytes)   inline method (bytecode parsing)
                              @ 17  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.readTlabEnd(Word):Word (5 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.readTlabEnd(Word):Word (17 bytes)   inline method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                              @ 36  jdk.graal.compiler.replacements.ReplacementsUtil.dynamicAssert(boolean, String):void (12 bytes)   inline method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                              @ 44  jdk.graal.compiler.replacements.AllocationSnippets.arrayAllocationSize(int, int, int):UnsignedWord (18 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.objectAlignment():int (7 bytes)   inline method (bytecode parsing)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                @ 11  jdk.graal.compiler.replacements.AllocationSnippets.arrayAllocationSize(int, int, int, int):long (32 bytes)   inline method (bytecode parsing)
                                            @ 114  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                              @ 59  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.useTLAB():boolean (7 bytes)   inline method (bytecode parsing)
                              @ 72  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.shouldAllocateInTLAB(UnsignedWord, boolean):boolean (33 bytes)   inline method (bytecode parsing)
                              @ 102  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.writeTlabTop(Word, Word):void (6 bytes)   inline method (bytecode parsing)
                                @ 2  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.writeTlabTop(Word, Word):void (15 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                              @ 109  jdk.graal.compiler.replacements.AllocationSnippets.emitPrefetchAllocate(Word, boolean):void (61 bytes)   inline method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getPrefetchStyle():int (7 bytes)   inline method (bytecode parsing)
                                @ 9  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getPrefetchLines(boolean):int (18 bytes)   inline method (bytecode parsing)
                                @ 14  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getPrefetchStepSize():int (7 bytes)   inline method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                @ 20  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getPrefetchDistance():int (7 bytes)   inline method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                              @ 136  jdk.graal.compiler.replacements.AllocationSnippets.formatArray(Word, UnsignedWord, int, Word, AllocationSnippets$FillContent, boolean, int, boolean, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):Object (53 bytes)   inline method (bytecode parsing)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                @ 5  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.initializeObjectHeader(Word, Word, boolean):void (29 bytes)   inline method (bytecode parsing)
                                  @ 25  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.initializeObjectHeader(Word, Word, KlassPointer):void (20 bytes)   inline method (bytecode parsing)
                                            @ 184  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                                @ 11  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.arrayLengthOffset():int (7 bytes)   inline method (bytecode parsing)
                                @ 15  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                                @ 38  jdk.graal.compiler.replacements.AllocationSnippets.fillContents(Word, AllocationSnippets$FillContent, int, UnsignedWord, boolean, boolean, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):void (58 bytes)   inline method (bytecode parsing)
                                  @ 22  jdk.graal.compiler.replacements.AllocationSnippets.zeroMemory(Word, int, UnsignedWord, boolean, boolean, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):void (19 bytes)   inline method (bytecode parsing)
                                    @ 15  jdk.graal.compiler.replacements.AllocationSnippets.fillMemory(long, Word, int, UnsignedWord, boolean, boolean, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):void (194 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                                      @ 17  jdk.graal.compiler.replacements.ReplacementsUtil.dynamicAssert(boolean, String):void (12 bytes)   inline method (bytecode parsing)
                                      @ 56  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                      @ 89  jdk.graal.compiler.replacements.ReplacementsUtil.dynamicAssert(boolean, String):void (12 bytes)   inline method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                      @ 153  jdk.graal.compiler.replacements.ReplacementsUtil.staticAssert(boolean, String):void (12 bytes)   inline method (bytecode parsing)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                      @ 167  jdk.graal.compiler.replacements.AllocationSnippets.fillMemoryAlignedUnrollable(long, Word, UnsignedWord, UnsignedWord, boolean, AllocationSnippets$AllocationSnippetCounters):void (68 bytes)   inline method (bytecode parsing)
                                        @ 5  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                          @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                                            @ 218  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                                        @ 44  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                                      @ 190  jdk.graal.compiler.replacements.AllocationSnippets.fillMemoryAligned(long, Word, UnsignedWord, UnsignedWord, boolean, UnsignedWord, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):void (155 bytes)   inline method (bytecode parsing)
                                          @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining it exceeds the maximum recursive inlining depth
                                          @ 269  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining it exceeds the maximum recursive inlining depth
                                          @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=202 <= 300.000000)
                                        @ 17  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getMinimalBulkZeroingSize():int (7 bytes)   inline method (bytecode parsing)
                                        @ 36  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                          @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                                        @ 53  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                                        @ 105  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                          @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                                        @ 134  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                                @ 44  jdk.graal.compiler.replacements.AllocationSnippets.emitMemoryBarrierIf(boolean):void (14 bytes)   inline method (bytecode parsing)
                                  @ 7  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                              @ 152  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                              @ 158  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.callNewArrayStub(Word, int):Object (35 bytes)   inline method (bytecode parsing)
                                        @ 269  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=387 > 300.000000)
                                @ 22  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.nonNullOrDeopt(Object):Object (27 bytes)   inline method (bytecode parsing)
                                      @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   relevance-based (relevance=1.000000, probability=0.000002, bonus=1.000000, nodes=202 <= 300.000000)
                              @ 168  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.profileAllocation(AllocationSnippets$AllocationProfilingData, UnsignedWord):void (51 bytes)   inline method (bytecode parsing)
                              @ 174  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.verifyOop(Object):Object (5 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.verifyOop(Object):Object (19 bytes)   inline method (bytecode parsing)
                                    @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.000122, bonus=1.000000, nodes=387 > 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000061, bonus=1.000000, nodes=13 <= 300.000000)
                                        @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000061, bonus=1.000000, nodes=24 <= 300.000000)
                                      @ 45  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000061, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000015, bonus=1.000000, nodes=13 <= 300.000000)
                                        @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000015, bonus=1.000000, nodes=24 <= 300.000000)
                                      @ 101  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000015, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000015, bonus=1.000000, nodes=13 <= 300.000000)
                                        @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000015, bonus=1.000000, nodes=24 <= 300.000000)
                                      @ 114  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000015, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000003, bonus=1.000000, nodes=13 <= 300.000000)
                                        @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000003, bonus=1.000000, nodes=24 <= 300.000000)
                                      @ 184  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000003, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000003, bonus=1.000000, nodes=13 <= 300.000000)
                                        @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000003, bonus=1.000000, nodes=24 <= 300.000000)
                                      @ 218  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000003, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                            @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000001, bonus=1.000000, nodes=13 <= 300.000000)
                                          @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000001, bonus=1.000000, nodes=24 <= 300.000000)
                                        @ 45  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000001, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                            @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                          @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                        @ 101  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                            @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                          @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                        @ 114  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                            @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                          @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                        @ 184  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                            @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                          @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                        @ 218  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 45  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 101  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 114  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f45e0031810.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                                          @ 184  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 218  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 45  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 101  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                            @ 4  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                            @ 15  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 30  deltablue.Variable.getWalkStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                                            @ 114  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 65  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 76  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 91  deltablue.Variable.getWalkStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 126  deltablue.Variable.getWalkStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 133  deltablue.Variable.getWalkStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 189  deltablue.Variable.getWalkStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 20  deltablue.Variable.getWalkStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                            @ 184  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                                @ 23  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=0.357123, probability=0.155008, bonus=1.000000, nodes=13 <= 107.136912)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                                @ 136  deltablue.Strength.weaker(Strength):boolean (17 bytes)   relevance-based (relevance=0.961441, probability=0.328278, bonus=1.000000, nodes=14 <= 288.432420)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                @ 192  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=0.961441, probability=0.328278, bonus=1.000000, nodes=13 <= 288.432420)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                @ 94  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.341444, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 218  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining it exceeds the maximum recursive inlining depth
                                @ 33  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=0.513299, probability=0.175262, bonus=1.000000, nodes=13 <= 153.989574)
                                          @ 269  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining it exceeds the maximum recursive inlining depth
                                          @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=202 <= 300.000000)
                              @ 2  deltablue.BinaryConstraint.chooseMethod(int):Direction (220 bytes)   relevance-based (relevance=1.946659, probability=1.000000, bonus=1.000000, nodes=138 <= 300.000000)
                                        @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=387 > 300.000000)
                              @ 7  deltablue.BinaryConstraint.isSatisfied():boolean (13 bytes)   relevance-based (relevance=2.928742, probability=1.000000, bonus=1.000000, nodes=14 <= 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 8  deltablue.AbstractConstraint.lambda$satisfy$1(int, Variable):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                                @ 48  deltablue.AbstractConstraint$$Lambda/0x00007f45e0031810.apply(Object):void (12 bytes)   not inlining relevance-based (relevance=0.000011, probability=0.000003, bonus=1.000000, nodes=13 > 0.003293)
                            @ 8  deltablue.AbstractConstraint.lambda$satisfy$1(int, Variable):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                                @ 58  deltablue.AbstractConstraint$$Lambda/0x00007f45e0031810.apply(Object):void (12 bytes)   not inlining relevance-based (relevance=0.000011, probability=0.000003, bonus=1.000000, nodes=13 > 0.003293)
                            @ 8  deltablue.AbstractConstraint.lambda$satisfy$1(int, Variable):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                                @ 68  deltablue.AbstractConstraint$$Lambda/0x00007f45e0031810.apply(Object):void (12 bytes)   not inlining relevance-based (relevance=0.000011, probability=0.000003, bonus=1.000000, nodes=13 > 0.003293)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 8  deltablue.AbstractConstraint.lambda$satisfy$1(int, Variable):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                @ 15  deltablue.AbstractConstraint$$Lambda/0x00007f45e0031810.apply(Object):void (12 bytes)   relevance-based (relevance=0.656791, probability=0.154813, bonus=1.000000, nodes=13 <= 197.037192)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                            @ 8  deltablue.AbstractConstraint.lambda$satisfy$1(int, Variable):void (6 bytes)   inline method (bytecode parsing)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                              @ 2  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                                          @ 45  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                                @ 25  deltablue.AbstractConstraint$$Lambda/0x00007f45e0031810.apply(Object):void (12 bytes)   relevance-based (relevance=0.656791, probability=0.154813, bonus=1.000000, nodes=13 <= 197.037192)
                            @ 8  deltablue.AbstractConstraint.lambda$satisfy$1(int, Variable):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                                @ 35  deltablue.AbstractConstraint$$Lambda/0x00007f45e0031810.apply(Object):void (12 bytes)   relevance-based (relevance=0.656791, probability=0.154813, bonus=1.000000, nodes=13 <= 197.037192)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 8  deltablue.AbstractConstraint.lambda$satisfy$1(int, Variable):void (6 bytes)   inline method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                              @ 2  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                @ 28  deltablue.AbstractConstraint$$Lambda/0x00007f45e0031810.apply(Object):void (12 bytes)   relevance-based (relevance=0.992388, probability=0.343852, bonus=1.000000, nodes=13 <= 297.716284)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 101  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 8  deltablue.AbstractConstraint.lambda$satisfy$1(int, Variable):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                                @ 15  deltablue.AbstractConstraint$$Lambda/0x00007f45e0031810.apply(Object):void (12 bytes)   relevance-based (relevance=1.000000, probability=0.346490, bonus=1.000000, nodes=13 <= 300.000000)
                              @ 20  deltablue.BinaryConstraint.inputsDo(ForEachInterface):void (34 bytes)   relevance-based (relevance=2.928718, probability=0.999992, bonus=1.000000, nodes=95 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 114  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                              @ 24  deltablue.BinaryConstraint.getOutput():Variable (22 bytes)   relevance-based (relevance=2.928718, probability=0.999992, bonus=1.000000, nodes=22 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                              @ 40  deltablue.BinaryConstraint.markUnsatisfied():void (6 bytes)   relevance-based (relevance=1.504496, probability=0.513701, bonus=1.000000, nodes=14 <= 300.000000)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                            @ 26  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 184  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                              @ 52  deltablue.Planner.addPropagate(AbstractConstraint, int):boolean (60 bytes)   not inlining too large previous low-level graph (low-level-nodes: 1145, relevance=2.928718, probability=0.999992, bonus=1.000000, nodes=53)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 218  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 45  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 101  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 114  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 184  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 218  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                                          @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining it exceeds the maximum recursive inlining depth
                                          @ 269  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining it exceeds the maximum recursive inlining depth
                                          @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=202 <= 300.000000)
                                        @ 269  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=387 > 300.000000)
                                      @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   relevance-based (relevance=1.000000, probability=0.000002, bonus=1.000000, nodes=202 <= 300.000000)
                                    @ 269  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.000122, bonus=1.000000, nodes=387 > 300.000000)
                                  @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   relevance-based (relevance=1.000000, probability=0.007812, bonus=1.000000, nodes=202 <= 300.000000)
                                @ 19  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=387 > 300.000000)
                              @ 81  som.Vector.sort(Comparator):void (23 bytes)   relevance-based (relevance=1.000028, probability=1.000000, bonus=1.000000, nodes=22 <= 300.000000)
                            @ 18  jdk.graal.compiler.replacements.AllocationSnippets.allocateInstanceImpl(Word, UnsignedWord, boolean, AllocationSnippets$FillContent, boolean, boolean, AllocationSnippets$AllocationProfilingData):Object (143 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getTLABInfo():Word (5 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getThread():Word (8 bytes)   inline method (bytecode parsing)
                                  @ 4  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.registerAsWord(Register):Word (7 bytes)   inline method (bytecode parsing)
                              @ 9  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.readTlabTop(Word):Word (5 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.readTlabTop(Word):Word (17 bytes)   inline method (bytecode parsing)
                              @ 17  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.readTlabEnd(Word):Word (5 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.readTlabEnd(Word):Word (17 bytes)   inline method (bytecode parsing)
                              @ 35  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.useTLAB():boolean (7 bytes)   inline method (bytecode parsing)
                              @ 47  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.shouldAllocateInTLAB(UnsignedWord, boolean):boolean (33 bytes)   inline method (bytecode parsing)
                              @ 77  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.writeTlabTop(Word, Word):void (6 bytes)   inline method (bytecode parsing)
                                @ 2  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.writeTlabTop(Word, Word):void (15 bytes)   inline method (bytecode parsing)
                              @ 84  jdk.graal.compiler.replacements.AllocationSnippets.emitPrefetchAllocate(Word, boolean):void (61 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getPrefetchStyle():int (7 bytes)   inline method (bytecode parsing)
                                @ 9  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getPrefetchLines(boolean):int (18 bytes)   inline method (bytecode parsing)
                                @ 14  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getPrefetchStepSize():int (7 bytes)   inline method (bytecode parsing)
                                @ 20  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getPrefetchDistance():int (7 bytes)   inline method (bytecode parsing)
                              @ 103  jdk.graal.compiler.replacements.AllocationSnippets.formatObject(Word, UnsignedWord, Word, AllocationSnippets$FillContent, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):Object (41 bytes)   inline method (bytecode parsing)
                                @ 4  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.initializeObjectHeader(Word, Word, boolean):void (29 bytes)   inline method (bytecode parsing)
                                  @ 25  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.initializeObjectHeader(Word, Word, KlassPointer):void (20 bytes)   inline method (bytecode parsing)
                                @ 8  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.instanceHeaderSize():int (7 bytes)   inline method (bytecode parsing)
                                @ 27  jdk.graal.compiler.replacements.AllocationSnippets.fillContents(Word, AllocationSnippets$FillContent, int, UnsignedWord, boolean, boolean, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):void (58 bytes)   inline method (bytecode parsing)
                                  @ 22  jdk.graal.compiler.replacements.AllocationSnippets.zeroMemory(Word, int, UnsignedWord, boolean, boolean, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):void (19 bytes)   inline method (bytecode parsing)
                                    @ 15  jdk.graal.compiler.replacements.AllocationSnippets.fillMemory(long, Word, int, UnsignedWord, boolean, boolean, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):void (194 bytes)   inline method (bytecode parsing)
                                      @ 17  jdk.graal.compiler.replacements.ReplacementsUtil.dynamicAssert(boolean, String):void (12 bytes)   inline method (bytecode parsing)
                                      @ 56  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                                      @ 89  jdk.graal.compiler.replacements.ReplacementsUtil.dynamicAssert(boolean, String):void (12 bytes)   inline method (bytecode parsing)
                                      @ 153  jdk.graal.compiler.replacements.ReplacementsUtil.staticAssert(boolean, String):void (12 bytes)   inline method (bytecode parsing)
                                      @ 167  jdk.graal.compiler.replacements.AllocationSnippets.fillMemoryAlignedUnrollable(long, Word, UnsignedWord, UnsignedWord, boolean, AllocationSnippets$AllocationSnippetCounters):void (68 bytes)   inline method (bytecode parsing)
                                        @ 5  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                          @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                                        @ 44  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                                      @ 190  jdk.graal.compiler.replacements.AllocationSnippets.fillMemoryAligned(long, Word, UnsignedWord, UnsignedWord, boolean, UnsignedWord, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):void (155 bytes)   inline method (bytecode parsing)
                                        @ 91  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                          @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                                        @ 105  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                          @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                                        @ 134  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                                @ 33  jdk.graal.compiler.replacements.AllocationSnippets.emitMemoryBarrierIf(boolean):void (14 bytes)   inline method (bytecode parsing)
                              @ 119  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                              @ 124  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.callNewInstanceStub(Word):Object (33 bytes)   inline method (bytecode parsing)
                                @ 21  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.nonNullOrDeopt(Object):Object (27 bytes)   inline method (bytecode parsing)
                              @ 133  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.profileAllocation(AllocationSnippets$AllocationProfilingData, UnsignedWord):void (51 bytes)   inline method (bytecode parsing)
                              @ 139  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.verifyOop(Object):Object (5 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.verifyOop(Object):Object (19 bytes)   inline method (bytecode parsing)
                            @ 9  deltablue.Plan.<init>():void (7 bytes)   inline method (bytecode parsing)
                              @ 3  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 39  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 67  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                              @ 18  som.Vector.isEmpty():boolean (17 bytes)   relevance-based (relevance=1.000028, probability=1.000000, bonus=1.000000, nodes=10 <= 300.000000)
                                @ 1  som.Vector.isEmpty():boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.999972, bonus=1.000000, nodes=10 <= 300.000000)
                              @ 26  som.Vector.removeFirst():Object (31 bytes)   relevance-based (relevance=1.000000, probability=0.999972, bonus=1.000000, nodes=18 <= 300.000000)
                              @ 36  deltablue.BinaryConstraint.getOutput():Variable (22 bytes)   relevance-based (relevance=1.000000, probability=0.999972, bonus=1.000000, nodes=22 <= 300.000000)
                            @ 2  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f45e0081f08.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 9  deltablue.Variable.getStay():boolean (5 bytes)   inline accessor method (bytecode parsing)
                                    @ 8  deltablue.AbstractConstraint.lambda$inputsKnown$0(int, Variable):boolean (28 bytes)   not inlining relevance-based (relevance=0.000005, probability=0.000005, bonus=1.000000, nodes=21 > 0.001601)
                                  @ 26  deltablue.AbstractConstraint$$Lambda/0x00007f45e0081f08.test(Object):boolean (12 bytes)   trivial (relevance=0.000005, probability=0.000005, bonus=1.000000, nodes=9)
                            @ 1  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 9  deltablue.Variable.getStay():boolean (5 bytes)   inline accessor method (bytecode parsing)
                                    @ 8  deltablue.AbstractConstraint.lambda$inputsKnown$0(int, Variable):boolean (28 bytes)   relevance-based (relevance=1.000000, probability=0.999940, bonus=1.000000, nodes=21 <= 300.000000)
                                  @ 15  deltablue.AbstractConstraint$$Lambda/0x00007f45e0081f08.test(Object):boolean (12 bytes)   relevance-based (relevance=1.000000, probability=0.999940, bonus=1.000000, nodes=23 <= 300.000000)
                                @ 7  deltablue.BinaryConstraint.inputsHasOne(TestInterface):boolean (32 bytes)   relevance-based (relevance=1.000000, probability=0.999972, bonus=1.000000, nodes=42 <= 300.000000)
                              @ 49  deltablue.AbstractConstraint.inputsKnown(int):boolean (19 bytes)   relevance-based (relevance=1.234428, probability=0.999972, bonus=1.000000, nodes=59 <= 300.000000)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000131, probability=0.000131, bonus=1.000000, nodes=41 > 0.039331)
                              @ 58  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.234428, probability=0.999972, bonus=1.000000, nodes=35 <= 300.000000)
                              @ 63  deltablue.BinaryConstraint.getOutput():Variable (22 bytes)   relevance-based (relevance=1.234428, probability=0.999972, bonus=1.000000, nodes=22 <= 300.000000)
                              @ 73  deltablue.BinaryConstraint.getOutput():Variable (22 bytes)   relevance-based (relevance=1.234428, probability=0.999972, bonus=1.000000, nodes=22 <= 300.000000)
                            @ 1  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 6  deltablue.Variable.getConstraints():Vector (5 bytes)   inline accessor method (bytecode parsing)
                            @ 11  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object, Object):Object (10 bytes)   inline method (bytecode parsing)
                              @ 6  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object, Object):Object (24 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 19  deltablue.Planner$$Lambda/0x00007f45e0031a28.<init>(AbstractConstraint, Vector):void (15 bytes)   relevance-based (relevance=1.000000, probability=0.999972, bonus=1.000000, nodes=11 <= 300.000000)
                                  @ 20  deltablue.Planner$$Lambda/0x00007f45e0031a28.apply(Object):void (16 bytes)   not inlining too large previous low-level graph (low-level-nodes: 346, relevance=1.000000, probability=9.879139, bonus=1.000000, nodes=16)
                                @ 16  som.Vector.forEach(ForEachInterface):void (32 bytes)   not inlining callee invoke probability is too high (invokeP=9.879414, relevance=1.000000, probability=0.999972, bonus=1.000000, nodes=24)
                              @ 78  deltablue.Planner.addConstraintsConsumingTo(Variable, Vector):void (20 bytes)   relevance-based (relevance=1.234428, probability=0.999972, bonus=1.000000, nodes=23 <= 300.000000)
                              @ 18  som.Vector.isEmpty():boolean (17 bytes)   relevance-based (relevance=1.000028, probability=36001.542885, bonus=1.000000, nodes=10 <= 300.000000)
                                @ 1  som.Vector.isEmpty():boolean (17 bytes)   relevance-based (relevance=1.000000, probability=36000.542913, bonus=1.000000, nodes=10 <= 300.000000)
                              @ 26  som.Vector.removeFirst():Object (31 bytes)   relevance-based (relevance=1.000000, probability=36000.542913, bonus=1.000000, nodes=18 <= 300.000000)
                              @ 36  deltablue.BinaryConstraint.getOutput():Variable (22 bytes)   relevance-based (relevance=1.000000, probability=36000.542913, bonus=1.000000, nodes=22 <= 300.000000)
                            @ 2  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f45e0081f08.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 9  deltablue.Variable.getStay():boolean (5 bytes)   inline accessor method (bytecode parsing)
                                    @ 8  deltablue.AbstractConstraint.lambda$inputsKnown$0(int, Variable):boolean (28 bytes)   not inlining relevance-based (relevance=0.000005, probability=0.192065, bonus=1.000000, nodes=21 > 0.001601)
                                  @ 26  deltablue.AbstractConstraint$$Lambda/0x00007f45e0081f08.test(Object):boolean (12 bytes)   trivial (relevance=0.000005, probability=0.192065, bonus=1.000000, nodes=9)
                            @ 1  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 9  deltablue.Variable.getStay():boolean (5 bytes)   inline accessor method (bytecode parsing)
                                    @ 8  deltablue.AbstractConstraint.lambda$inputsKnown$0(int, Variable):boolean (28 bytes)   relevance-based (relevance=1.000000, probability=35999.390249, bonus=1.000000, nodes=21 <= 300.000000)
                                  @ 15  deltablue.AbstractConstraint$$Lambda/0x00007f45e0081f08.test(Object):boolean (12 bytes)   relevance-based (relevance=1.000000, probability=35999.390249, bonus=1.000000, nodes=23 <= 300.000000)
                                @ 7  deltablue.BinaryConstraint.inputsHasOne(TestInterface):boolean (32 bytes)   relevance-based (relevance=1.000000, probability=36000.542913, bonus=1.000000, nodes=42 <= 300.000000)
                              @ 49  deltablue.AbstractConstraint.inputsKnown(int):boolean (19 bytes)   relevance-based (relevance=1.234428, probability=36000.542913, bonus=1.000000, nodes=59 <= 300.000000)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000131, probability=4.719195, bonus=1.000000, nodes=41 > 0.039331)
                              @ 58  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.234428, probability=36000.542913, bonus=1.000000, nodes=35 <= 300.000000)
                              @ 63  deltablue.BinaryConstraint.getOutput():Variable (22 bytes)   relevance-based (relevance=1.234428, probability=36000.542913, bonus=1.000000, nodes=22 <= 300.000000)
                              @ 73  deltablue.BinaryConstraint.getOutput():Variable (22 bytes)   relevance-based (relevance=1.234428, probability=36000.542913, bonus=1.000000, nodes=22 <= 300.000000)
                            @ 1  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 6  deltablue.Variable.getConstraints():Vector (5 bytes)   inline accessor method (bytecode parsing)
                            @ 11  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object, Object):Object (10 bytes)   inline method (bytecode parsing)
                              @ 6  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object, Object):Object (24 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 19  deltablue.Planner$$Lambda/0x00007f45e0031a28.<init>(AbstractConstraint, Vector):void (15 bytes)   relevance-based (relevance=1.000000, probability=36000.542913, bonus=1.000000, nodes=11 <= 300.000000)
                                  @ 20  deltablue.Planner$$Lambda/0x00007f45e0031a28.apply(Object):void (16 bytes)   not inlining too large previous low-level graph (low-level-nodes: 346, relevance=1.000000, probability=355664.258835, bonus=1.000000, nodes=16)
                                @ 16  som.Vector.forEach(ForEachInterface):void (32 bytes)   not inlining callee invoke probability is too high (invokeP=9.879414, relevance=1.000000, probability=36000.542913, bonus=1.000000, nodes=24)
                              @ 78  deltablue.Planner.addConstraintsConsumingTo(Variable, Vector):void (20 bytes)   relevance-based (relevance=1.234428, probability=36000.542913, bonus=1.000000, nodes=23 <= 300.000000)
                            @ 49  jdk.graal.compiler.graph.Node.valueEquals(Node):boolean (10 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.graph.Node.getNodeClass():NodeClass (5 bytes)   inline accessor method (bytecode parsing)
                                @ 46  jdk.graal.compiler.graph.Graph$1.equals(Object, Object):boolean (53 bytes)   not inlining relevance-based (relevance=0.031454, probability=0.037899, bonus=1.000000, nodes=25 > 9.436214)
                              @ 36  java.lang.Object.equals(Object):boolean (11 bytes)   not inlining no methods remaining after filtering less frequent methods (6 methods previously)
                              @ 26  org.graalvm.collections.EconomicMapImpl.compareKeys(Object, Object):boolean (52 bytes)   relevance-based (relevance=1.182141, probability=1.861282, bonus=1.000000, nodes=40 <= 300.000000)
                              @ 1  java.util.Formatter.ensureOpen():void (16 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=7)
                            @ 158  java.util.regex.Matcher.start():int (9 bytes)   inline method (bytecode parsing)
                            @ 183  java.util.regex.Matcher.end():int (9 bytes)   inline method (bytecode parsing)
                            @ 1  java.util.AbstractList.<init>():void (10 bytes)   inline method (bytecode parsing)
                              @ 1  java.util.AbstractCollection.<init>():void (5 bytes)   inline method (bytecode parsing)
                                @ 4  java.util.ArrayList.<init>():void (12 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                                  @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                                @ 11  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=8)
                                  @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=3.492529, bonus=1.000000, nodes=9)
                                    @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=3.492529, bonus=1.000000, nodes=5)
                                  @ 14  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000000, probability=3.492529, bonus=1.000000, nodes=8)
                            @ 11  java.lang.Math.max(int, int):int (11 bytes)   inline method (bytecode parsing)
                                    @ 1  java.lang.StringLatin1.canEncode(int):boolean (13 bytes)   trivial (relevance=1.000065, probability=3.492529, bonus=1.000000, nodes=5)
                                    @ 18  java.lang.Math.min(int, int):int (11 bytes)   trivial (relevance=1.000065, probability=3.492529, bonus=1.000000, nodes=7)
                                  @ 17  java.lang.StringLatin1.indexOf(byte[], int, int, int):int (37 bytes)   relevance-based (relevance=1.000000, probability=3.492529, bonus=1.000000, nodes=21 <= 300.000000)
                                @ 27  java.lang.String.indexOf(int, int):int (37 bytes)   relevance-based (relevance=1.782830, probability=3.492529, bonus=1.000000, nodes=32 <= 300.000000)
                                @ 70  java.util.Formatter$FixedString.<init>(String, int, int):void (20 bytes)   relevance-based (relevance=0.560942, probability=1.958980, bonus=1.000000, nodes=14 <= 168.282657)
                            @ 49  java.lang.Math.max(int, int):int (11 bytes)   inline method (bytecode parsing)
                            @ 37  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                        @ 27  jdk.internal.util.ArraysSupport.newLength(int, int, int):int (27 bytes)   not inlining relevance-based (relevance=0.012126, probability=0.030624, bonus=1.000000, nodes=16 > 3.637929)
                                        @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.012126, probability=0.030624, bonus=1.000000, nodes=41 > 3.637929)
                                      @ 7  java.util.ArrayList.grow(int):Object[] (60 bytes)   relevance-based (relevance=0.160185, probability=0.435150, bonus=1.000000, nodes=46 <= 48.055418)
                                    @ 7  java.util.ArrayList.grow():Object[] (11 bytes)   not inlining relevance-based (relevance=0.160185, probability=0.435150, bonus=1.000000, nodes=52 > 48.055418)
                                  @ 20  java.util.ArrayList.add(Object, Object[], int):void (23 bytes)   relevance-based (relevance=0.560942, probability=1.958980, bonus=1.000000, nodes=26 <= 168.282657)
                                @ 73  java.util.ArrayList.add(Object):boolean (25 bytes)   relevance-based (relevance=0.560942, probability=1.958980, bonus=1.000000, nodes=31 <= 168.282657)
                                @ 45  java.util.Formatter$FixedString.<init>(String, int, int):void (20 bytes)   relevance-based (relevance=0.607526, probability=0.607526, bonus=1.000000, nodes=14 <= 182.257714)
                            @ 49  java.lang.Math.max(int, int):int (11 bytes)   inline method (bytecode parsing)
                            @ 37  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                        @ 27  jdk.internal.util.ArraysSupport.newLength(int, int, int):int (27 bytes)   not inlining relevance-based (relevance=0.013133, probability=0.009497, bonus=1.000000, nodes=16 > 3.940042)
                                        @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.013133, probability=0.009497, bonus=1.000000, nodes=41 > 3.940042)
                                      @ 7  java.util.ArrayList.grow(int):Object[] (60 bytes)   relevance-based (relevance=0.173487, probability=0.134950, bonus=1.000000, nodes=46 <= 52.046187)
                                    @ 7  java.util.ArrayList.grow():Object[] (11 bytes)   relevance-based (relevance=0.173487, probability=0.134950, bonus=1.000000, nodes=52 <= 52.046187)
                                  @ 20  java.util.ArrayList.add(Object, Object[], int):void (23 bytes)   relevance-based (relevance=0.607526, probability=0.607526, bonus=1.000000, nodes=67 <= 182.257714)
                                @ 48  java.util.ArrayList.add(Object):boolean (25 bytes)   relevance-based (relevance=0.607526, probability=0.607526, bonus=1.000000, nodes=72 <= 182.257714)
                                  @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=0.826103, probability=2.885003, bonus=1.000000, nodes=9)
                            @ 3  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                                  @ 12  java.lang.StringLatin1.charAt(byte[], int):char (15 bytes)   relevance-based (relevance=0.826103, probability=2.885003, bonus=1.000000, nodes=11 <= 247.830979)
                                @ 99  java.lang.String.charAt(int):char (25 bytes)   relevance-based (relevance=0.826103, probability=2.885003, bonus=1.000000, nodes=16 <= 247.830979)
                                @ 106  java.util.Formatter$Conversion.isValid(char):boolean (358 bytes)   relevance-based (relevance=0.826103, probability=2.885003, bonus=1.000000, nodes=14 <= 247.830979)
                            @ 35  java.lang.Character.isUpperCase(char):boolean (5 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.Character.isUpperCase(int):boolean (9 bytes)   inline method (bytecode parsing)
                                  @ 1  java.lang.CharacterData.of(int):CharacterData (136 bytes)   trivial (relevance=1.022160, probability=2.885003, bonus=1.000000, nodes=5)
                                    @ 2  java.lang.CharacterDataLatin1.getPropertiesEx(int):int (11 bytes)   trivial (relevance=1.000000, probability=2.885003, bonus=1.000000, nodes=6)
                                  @ 5  java.lang.CharacterDataLatin1.isUpperCase(int):boolean (16 bytes)   relevance-based (relevance=1.022160, probability=2.885003, bonus=1.000000, nodes=11 <= 300.000000)
                                  @ 55  java.util.Formatter$Conversion.isText(char):boolean (34 bytes)   relevance-based (relevance=1.022160, probability=2.885003, bonus=1.000000, nodes=16 <= 300.000000)
                                @ 119  java.util.Formatter$FormatSpecifier.<init>(char):void (68 bytes)   relevance-based (relevance=0.826103, probability=2.885003, bonus=1.000000, nodes=36 <= 247.830979)
                            @ 49  java.lang.Math.max(int, int):int (11 bytes)   inline method (bytecode parsing)
                            @ 37  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                        @ 27  jdk.internal.util.ArraysSupport.newLength(int, int, int):int (27 bytes)   not inlining relevance-based (relevance=0.017859, probability=0.045100, bonus=1.000000, nodes=16 > 5.357603)
                                        @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.017859, probability=0.045100, bonus=1.000000, nodes=41 > 5.357603)
                                      @ 7  java.util.ArrayList.grow(int):Object[] (60 bytes)   relevance-based (relevance=0.235905, probability=0.640849, bonus=1.000000, nodes=46 <= 70.771531)
                                    @ 7  java.util.ArrayList.grow():Object[] (11 bytes)   relevance-based (relevance=0.235905, probability=0.640849, bonus=1.000000, nodes=52 <= 70.771531)
                                  @ 20  java.util.ArrayList.add(Object, Object[], int):void (23 bytes)   relevance-based (relevance=0.826103, probability=2.885003, bonus=1.000000, nodes=67 <= 247.830979)
                                @ 122  java.util.ArrayList.add(Object):boolean (25 bytes)   relevance-based (relevance=0.826103, probability=2.885003, bonus=1.000000, nodes=72 <= 247.830979)
                              @ 11  java.util.Formatter.parse(String):List (208 bytes)   not inlining relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=345 > 300.000000)
                                @ 5  java.util.ArrayList$Itr.<init>(ArrayList):void (26 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=15 <= 300.000000)
                              @ 18  java.util.ArrayList.iterator():Iterator (9 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=16 <= 300.000000)
                              @ 27  java.util.ArrayList$Itr.hasNext():boolean (20 bytes)   relevance-based (relevance=2.068979, probability=6.450185, bonus=1.000000, nodes=11 <= 300.000000)
                                @ 1  java.util.ArrayList$Itr.checkForComodification():void (23 bytes)   trivial (relevance=1.000000, probability=5.450185, bonus=1.000000, nodes=9)
                              @ 37  java.util.ArrayList$Itr.next():Object (66 bytes)   relevance-based (relevance=1.748216, probability=5.450185, bonus=1.000000, nodes=25 <= 300.000000)
                              @ 49  java.util.Formatter$FormatSpecifier.index():int (5 bytes)   trivial (relevance=1.748216, probability=5.450185, bonus=1.000000, nodes=9)
                            @ 58  java.util.Formatter$Flags.contains(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                                  @ 89  java.lang.String.toString():String (2 bytes)   trivial (relevance=0.808638, probability=0.906896, bonus=1.000000, nodes=4)
                            @ 34  java.util.Formatter$Flags.contains(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 22  java.util.Formatter$Flags.contains(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                                      @ 31  java.lang.String.length():int (11 bytes)   not inlining relevance-based (relevance=0.001711, probability=0.001549, bonus=1.000000, nodes=10 > 0.513324)
                            @ 2  java.lang.StringBuilder.append(CharSequence):StringBuilder (8 bytes)   inline method (bytecode parsing)
                                        @ 2  java.lang.AbstractStringBuilder.append(CharSequence):AbstractStringBuilder (54 bytes)   not inlining relevance-based (relevance=0.001711, probability=0.001549, bonus=1.000000, nodes=15 > 0.513324)
                                      @ 82  java.lang.StringBuilder.append(CharSequence):Appendable (6 bytes)   trivial (relevance=0.001711, probability=0.001549, bonus=1.000000, nodes=9)
                            @ 2  java.lang.StringBuilder.append(CharSequence):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 2  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                                                @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.625498, bonus=1.000000, nodes=5)
                                              @ 10  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000000, probability=0.625498, bonus=1.000000, nodes=8)
                                                    @ 3  java.lang.Math.max(int, int):int (11 bytes)   trivial (relevance=0.144715, probability=0.079076, bonus=1.000000, nodes=7)
                                                  @ 29  jdk.internal.util.ArraysSupport.newLength(int, int, int):int (27 bytes)   relevance-based (relevance=0.144715, probability=0.079076, bonus=1.000000, nodes=15 <= 43.414542)
                                                @ 24  java.lang.AbstractStringBuilder.newCapacity(int):int (59 bytes)   relevance-based (relevance=0.144715, probability=0.079076, bonus=1.000000, nodes=27 <= 43.414542)
                                                  @ 25  java.lang.Math.min(int, int):int (11 bytes)   trivial (relevance=0.144717, probability=0.079075, bonus=1.000000, nodes=7)
                                                @ 32  java.util.Arrays.copyOf(byte[], int):byte[] (33 bytes)   relevance-based (relevance=0.144715, probability=0.079076, bonus=1.000000, nodes=28 <= 43.414542)
                                              @ 21  java.lang.AbstractStringBuilder.ensureCapacityInternal(int):void (39 bytes)   relevance-based (relevance=1.000000, probability=0.625498, bonus=1.000000, nodes=72 <= 300.000000)
                                                  @ 11  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.625498, bonus=1.000000, nodes=5)
                                                @ 2  java.lang.AbstractStringBuilder.inflateIfNeededFor(String):void (22 bytes)   relevance-based (relevance=1.000000, probability=0.625498, bonus=1.000000, nodes=12 <= 300.000000)
                                                  @ 1  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000010, probability=0.625498, bonus=1.000000, nodes=5)
                                                @ 15  java.lang.String.getBytes(byte[], int, byte):void (44 bytes)   relevance-based (relevance=1.000000, probability=0.625498, bonus=1.000000, nodes=26 <= 300.000000)
                                              @ 30  java.lang.AbstractStringBuilder.putStringAt(int, String):void (19 bytes)   relevance-based (relevance=1.144714, probability=0.625498, bonus=1.000000, nodes=37 <= 300.000000)
                                            @ 2  java.lang.AbstractStringBuilder.append(String):AbstractStringBuilder (45 bytes)   relevance-based (relevance=1.000000, probability=0.625498, bonus=1.000000, nodes=118 <= 300.000000)
                                          @ 21  java.lang.StringBuilder.append(String):AbstractStringBuilder (6 bytes)   relevance-based (relevance=1.000000, probability=0.625498, bonus=1.000000, nodes=120 <= 300.000000)
                                        @ 2  java.lang.AbstractStringBuilder.append(CharSequence):AbstractStringBuilder (54 bytes)   relevance-based (relevance=1.000000, probability=0.905347, bonus=1.000000, nodes=127 <= 300.000000)
                                      @ 10  java.lang.StringBuilder.append(CharSequence):Appendable (6 bytes)   relevance-based (relevance=1.000000, probability=0.905347, bonus=1.000000, nodes=129 <= 300.000000)
                                    @ 53  java.util.Formatter$FormatSpecifier.appendJustified(Appendable, CharSequence):void (89 bytes)   relevance-based (relevance=1.000000, probability=0.906896, bonus=1.000000, nodes=168 <= 300.000000)
                                  @ 93  java.util.Formatter$FormatSpecifier.print(Formatter, String, Locale):void (57 bytes)   relevance-based (relevance=1.230496, probability=0.906896, bonus=1.000000, nodes=180 <= 300.000000)
                            @ 34  java.util.Formatter$Flags.contains(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                                  @ 80  java.util.Formatter$FormatSpecifier.print(Formatter, String, Locale):void (57 bytes)   not inlining relevance-based (relevance=0.017248, probability=0.012712, bonus=1.000000, nodes=19 > 5.174493)
                                @ 176  java.util.Formatter$FormatSpecifier.printString(Formatter, Object, Locale):void (97 bytes)   relevance-based (relevance=0.808638, probability=0.919608, bonus=1.000000, nodes=212 <= 242.591347)
                            @ 4  java.lang.StringBuilder.<init>():void (7 bytes)   inline method (bytecode parsing)
                                  @ 55  java.util.Formatter$FormatSpecifier.print(Formatter, double, Locale):void (158 bytes)   not inlining relevance-based (relevance=0.125876, probability=0.092773, bonus=1.000000, nodes=48 > 37.762936)
                                @ 146  java.util.Formatter$FormatSpecifier.printFloat(Formatter, Object, Locale):void (91 bytes)   relevance-based (relevance=0.125876, probability=0.092773, bonus=1.000000, nodes=23 <= 37.762936)
                              @ 205  java.util.Formatter$FormatSpecifier.print(Formatter, Object, Locale):void (234 bytes)   not inlining relevance-based (relevance=0.808638, probability=2.332616, bonus=1.000000, nodes=254 > 242.591347)
                            @ 58  java.util.Formatter$Flags.contains(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 34  java.util.Formatter$Flags.contains(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 22  java.util.Formatter$Flags.contains(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                                        @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=0.000398, probability=0.000372, bonus=1.000000, nodes=5)
                                      @ 31  java.lang.String.length():int (11 bytes)   trivial (relevance=0.000398, probability=0.000372, bonus=1.000000, nodes=5)
                            @ 2  java.lang.StringBuilder.append(CharSequence):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 2  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                                            @ 2  java.lang.AbstractStringBuilder.append(String):AbstractStringBuilder (45 bytes)   not inlining relevance-based (relevance=0.000398, probability=0.000372, bonus=1.000000, nodes=21 > 0.119442)
                                          @ 21  java.lang.StringBuilder.append(String):AbstractStringBuilder (6 bytes)   trivial (relevance=0.000398, probability=0.000372, bonus=1.000000, nodes=9)
                                        @ 2  java.lang.AbstractStringBuilder.append(CharSequence):AbstractStringBuilder (54 bytes)   not inlining relevance-based (relevance=0.000398, probability=0.000372, bonus=1.000000, nodes=10 > 0.119442)
                                      @ 82  java.lang.StringBuilder.append(CharSequence):Appendable (6 bytes)   trivial (relevance=0.000398, probability=0.000372, bonus=1.000000, nodes=9)
                            @ 2  java.lang.StringBuilder.append(CharSequence):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 2  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                                                @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=0.232683, probability=0.217364, bonus=1.000000, nodes=5)
                                              @ 10  java.lang.String.length():int (11 bytes)   trivial (relevance=0.232683, probability=0.217364, bonus=1.000000, nodes=5)
                            @ 4  som.Vector.<init>():void (7 bytes)   inline method (bytecode parsing)
                              @ 3  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 10  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                                                @ 24  java.lang.AbstractStringBuilder.newCapacity(int):int (59 bytes)   not inlining relevance-based (relevance=0.033673, probability=0.027479, bonus=1.000000, nodes=21 > 10.101823)
                            @ 14  deltablue.Strength.absoluteWeakest():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 17  deltablue.Variable.setWalkStrength(Strength):void (6 bytes)   inline method (bytecode parsing)
                            @ 22  deltablue.Variable.setStay(boolean):void (6 bytes)   inline method (bytecode parsing)
                                                @ 32  java.util.Arrays.copyOf(byte[], int):byte[] (33 bytes)   not inlining relevance-based (relevance=0.033673, probability=0.027479, bonus=1.000000, nodes=29 > 10.101823)
                                              @ 21  java.lang.AbstractStringBuilder.ensureCapacityInternal(int):void (39 bytes)   relevance-based (relevance=0.232683, probability=0.217364, bonus=1.000000, nodes=29 <= 69.804882)
                            @ 48  deltablue.Variable.getConstraints():Vector (5 bytes)   inline accessor method (bytecode parsing)
                            @ 52  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.Planner$$Lambda/0x00007f45e0083030.<init>(Vector):void (10 bytes)   inline method (bytecode parsing)
                                                  @ 11  java.lang.String.coder():byte (15 bytes)   trivial (relevance=0.266356, probability=0.217364, bonus=1.000000, nodes=5)
                                                @ 2  java.lang.AbstractStringBuilder.inflateIfNeededFor(String):void (22 bytes)   trivial (relevance=0.266356, probability=0.217364, bonus=1.000000, nodes=9)
                            @ 64  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.Planner$$Lambda/0x00007f45e0083250.<init>(Vector):void (10 bytes)   inline method (bytecode parsing)
                                                  @ 1  java.lang.String.coder():byte (15 bytes)   trivial (relevance=0.266358, probability=0.217364, bonus=1.000000, nodes=5)
                            @ 76  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object):Object (8 bytes)   inline method (bytecode parsing)
                                                @ 15  java.lang.String.getBytes(byte[], int, byte):void (44 bytes)   relevance-based (relevance=0.266356, probability=0.217364, bonus=1.000000, nodes=22 <= 79.906705)
                              @ 4  java.lang.invoke.LambdaForm$MH/0x00007f45e0000800.invoke(Object):Object (8 bytes)   inline method (bytecode parsing)
                                              @ 30  java.lang.AbstractStringBuilder.putStringAt(int, String):void (19 bytes)   relevance-based (relevance=0.266356, probability=0.217364, bonus=1.000000, nodes=27 <= 79.906705)
                                            @ 2  java.lang.AbstractStringBuilder.append(String):AbstractStringBuilder (45 bytes)   relevance-based (relevance=0.232683, probability=0.217364, bonus=1.000000, nodes=59 <= 69.804882)
                                          @ 21  java.lang.StringBuilder.append(String):AbstractStringBuilder (6 bytes)   relevance-based (relevance=0.232683, probability=0.217364, bonus=1.000000, nodes=61 <= 69.804882)
                                        @ 2  java.lang.AbstractStringBuilder.append(CharSequence):AbstractStringBuilder (54 bytes)   relevance-based (relevance=0.232683, probability=0.217364, bonus=1.000000, nodes=62 <= 69.804882)
                                      @ 10  java.lang.StringBuilder.append(CharSequence):Appendable (6 bytes)   relevance-based (relevance=0.232683, probability=0.217364, bonus=1.000000, nodes=64 <= 69.804882)
                                    @ 53  java.util.Formatter$FormatSpecifier.appendJustified(Appendable, CharSequence):void (89 bytes)   not inlining relevance-based (relevance=0.232683, probability=0.217736, bonus=1.000000, nodes=100 > 69.804882)
                                  @ 80  java.util.Formatter$FormatSpecifier.print(Formatter, String, Locale):void (57 bytes)   relevance-based (relevance=0.232683, probability=0.217736, bonus=1.000000, nodes=19 <= 69.804882)
                                @ 176  java.util.Formatter$FormatSpecifier.printString(Formatter, Object, Locale):void (97 bytes)   relevance-based (relevance=0.232683, probability=0.217736, bonus=1.000000, nodes=25 <= 69.804882)
                                @ 146  java.util.Formatter$FormatSpecifier.printFloat(Formatter, Object, Locale):void (91 bytes)   trivial (relevance=0.023474, probability=0.021966, bonus=1.000000, nodes=7)
                                @ 136  java.util.Formatter$FormatSpecifier.printInteger(Formatter, Object, Locale):void (137 bytes)   trivial (relevance=0.158933, probability=0.148723, bonus=1.000000, nodes=7)
                            @ 27  java.lang.Character.toString():String (8 bytes)   inline method (bytecode parsing)
                                @ 156  java.util.Formatter$FormatSpecifier.printCharacter(Formatter, Object, Locale):void (215 bytes)   trivial (relevance=0.062571, probability=0.058551, bonus=1.000000, nodes=7)
                            @ 34  java.util.Formatter$Flags.contains(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 22  java.util.Formatter$Flags.contains(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                                      @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=0.000193, probability=0.000180, bonus=1.000000, nodes=5)
                                    @ 31  java.lang.String.length():int (11 bytes)   trivial (relevance=0.000193, probability=0.000180, bonus=1.000000, nodes=5)
                            @ 2  java.lang.StringBuilder.append(CharSequence):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 2  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                                          @ 2  java.lang.AbstractStringBuilder.append(String):AbstractStringBuilder (45 bytes)   not inlining relevance-based (relevance=0.000193, probability=0.000180, bonus=1.000000, nodes=21 > 0.057773)
                            @ 5  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                                        @ 21  java.lang.StringBuilder.append(String):AbstractStringBuilder (6 bytes)   trivial (relevance=0.000193, probability=0.000180, bonus=1.000000, nodes=9)
                                      @ 2  java.lang.AbstractStringBuilder.append(CharSequence):AbstractStringBuilder (54 bytes)   not inlining relevance-based (relevance=0.000193, probability=0.000180, bonus=1.000000, nodes=10 > 0.057773)
                                    @ 82  java.lang.StringBuilder.append(CharSequence):Appendable (6 bytes)   trivial (relevance=0.000193, probability=0.000180, bonus=1.000000, nodes=9)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                  @ 53  java.util.Formatter$FormatSpecifier.appendJustified(Appendable, CharSequence):void (89 bytes)   not inlining relevance-based (relevance=0.112548, probability=0.105318, bonus=1.000000, nodes=37 > 33.764305)
                                @ 213  java.util.Formatter$FormatSpecifier.print(Formatter, String, Locale):void (57 bytes)   relevance-based (relevance=0.112548, probability=0.105318, bonus=1.000000, nodes=19 <= 33.764305)
                            @ 4  java.lang.StringBuilder.append(CharSequence, int, int):StringBuilder (10 bytes)   inline method (bytecode parsing)
                                  @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000131, probability=0.000131, bonus=1.000000, nodes=41 > 0.039331)
                                @ 11  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=35 <= 300.000000)
                              @ 26  som.Vector.with(Object):Vector (16 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=40 <= 300.000000)
                                      @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=2.565274, bonus=1.000000, nodes=5)
                                    @ 10  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000000, probability=2.565274, bonus=1.000000, nodes=8)
                              @ 31  som.Vector.isEmpty():boolean (17 bytes)   relevance-based (relevance=1.000028, probability=35353.420000, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 1  som.Vector.size():int (10 bytes)   inline method (bytecode parsing)
                                    @ 18  jdk.internal.util.Preconditions.checkFromToIndex(int, int, int, BiFunction):int (24 bytes)   relevance-based (relevance=1.000000, probability=2.565274, bonus=1.000000, nodes=14 <= 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                                          @ 3  java.lang.Math.max(int, int):int (11 bytes)   trivial (relevance=0.144715, probability=0.324302, bonus=1.000000, nodes=7)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                                        @ 29  jdk.internal.util.ArraysSupport.newLength(int, int, int):int (27 bytes)   relevance-based (relevance=0.144715, probability=0.324302, bonus=1.000000, nodes=15 <= 43.414542)
                                      @ 24  java.lang.AbstractStringBuilder.newCapacity(int):int (59 bytes)   relevance-based (relevance=0.144715, probability=0.324302, bonus=1.000000, nodes=27 <= 43.414542)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                                        @ 25  java.lang.Math.min(int, int):int (11 bytes)   trivial (relevance=0.144717, probability=0.324298, bonus=1.000000, nodes=7)
                                      @ 32  java.util.Arrays.copyOf(byte[], int):byte[] (33 bytes)   relevance-based (relevance=0.144715, probability=0.324302, bonus=1.000000, nodes=28 <= 43.414542)
                                    @ 35  java.lang.AbstractStringBuilder.ensureCapacityInternal(int):void (39 bytes)   relevance-based (relevance=1.000000, probability=2.565274, bonus=1.000000, nodes=72 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                      @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.250000, bonus=1.000000, nodes=13 <= 300.000000)
                            @ 15  java.lang.String.value():byte[] (5 bytes)   inline accessor method (bytecode parsing)
                                    @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.250000, bonus=1.000000, nodes=24 <= 300.000000)
                                  @ 45  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.250000, bonus=1.000000, nodes=30 <= 300.000000)
                                      @ 1  java.lang.AbstractStringBuilder.isLatin1():boolean (19 bytes)   trivial (relevance=1.000010, probability=2.565271, bonus=1.000000, nodes=9)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                                      @ 8  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000010, probability=2.565271, bonus=1.000000, nodes=9)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                                    @ 52  java.lang.AbstractStringBuilder.appendChars(String, int, int):void (207 bytes)   relevance-based (relevance=1.144714, probability=2.565271, bonus=1.000000, nodes=38 <= 300.000000)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 4  java.lang.AbstractStringBuilder.append(CharSequence, int, int):AbstractStringBuilder (67 bytes)   relevance-based (relevance=1.000000, probability=2.565274, bonus=1.000000, nodes=122 <= 300.000000)
                                      @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.062500, bonus=1.000000, nodes=13 <= 300.000000)
                                    @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.062500, bonus=1.000000, nodes=24 <= 300.000000)
                                  @ 101  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.062500, bonus=1.000000, nodes=30 <= 300.000000)
                                @ 16  java.lang.StringBuilder.append(CharSequence, int, int):Appendable (8 bytes)   relevance-based (relevance=1.000000, probability=2.565274, bonus=1.000000, nodes=124 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                              @ 89  java.util.Formatter$FixedString.print(Formatter, Object, Locale):void (23 bytes)   relevance-based (relevance=1.080754, probability=3.117569, bonus=1.000000, nodes=193 <= 300.000000)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                      @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.062500, bonus=1.000000, nodes=13 <= 300.000000)
                                    @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.062500, bonus=1.000000, nodes=24 <= 300.000000)
                                  @ 114  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.062500, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                      @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.010417, bonus=1.000000, nodes=13 <= 300.000000)
                                    @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.010417, bonus=1.000000, nodes=24 <= 300.000000)
                                  @ 184  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.010417, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                      @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.010417, bonus=1.000000, nodes=13 <= 300.000000)
                                    @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.010417, bonus=1.000000, nodes=24 <= 300.000000)
                                  @ 218  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.010417, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                        @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.003906, bonus=1.000000, nodes=13 <= 300.000000)
                                      @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.003906, bonus=1.000000, nodes=24 <= 300.000000)
                                    @ 45  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.003906, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                        @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000977, bonus=1.000000, nodes=13 <= 300.000000)
                                      @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000977, bonus=1.000000, nodes=24 <= 300.000000)
                                    @ 101  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000977, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                        @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000977, bonus=1.000000, nodes=13 <= 300.000000)
                                      @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000977, bonus=1.000000, nodes=24 <= 300.000000)
                                    @ 114  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000977, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                        @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000163, bonus=1.000000, nodes=13 <= 300.000000)
                                      @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000163, bonus=1.000000, nodes=24 <= 300.000000)
                                    @ 184  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000163, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                        @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000163, bonus=1.000000, nodes=13 <= 300.000000)
                                      @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000163, bonus=1.000000, nodes=24 <= 300.000000)
                                    @ 218  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000163, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000061, bonus=1.000000, nodes=13 <= 300.000000)
                                        @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000061, bonus=1.000000, nodes=24 <= 300.000000)
                                      @ 45  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000061, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000015, bonus=1.000000, nodes=13 <= 300.000000)
                                        @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000015, bonus=1.000000, nodes=24 <= 300.000000)
                                      @ 101  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000015, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000015, bonus=1.000000, nodes=13 <= 300.000000)
                                        @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000015, bonus=1.000000, nodes=24 <= 300.000000)
                                      @ 114  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000015, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000003, bonus=1.000000, nodes=13 <= 300.000000)
                                        @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000003, bonus=1.000000, nodes=24 <= 300.000000)
                                      @ 184  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000003, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000003, bonus=1.000000, nodes=13 <= 300.000000)
                                        @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000003, bonus=1.000000, nodes=24 <= 300.000000)
                                      @ 218  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000003, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                            @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000001, bonus=1.000000, nodes=13 <= 300.000000)
                                          @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000001, bonus=1.000000, nodes=24 <= 300.000000)
                                        @ 45  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000001, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                            @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                          @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                        @ 101  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                            @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                          @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                        @ 114  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                            @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                          @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                        @ 184  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                            @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                          @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                        @ 218  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 45  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 101  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 114  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 184  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 218  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 45  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 101  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 114  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 184  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 218  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                                          @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining it exceeds the maximum recursive inlining depth
                                          @ 269  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining it exceeds the maximum recursive inlining depth
                                          @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=202 <= 300.000000)
                                        @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=387 > 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 45  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 101  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 114  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 184  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 218  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 45  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 101  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 114  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 184  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 218  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                                          @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining it exceeds the maximum recursive inlining depth
                                          @ 269  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining it exceeds the maximum recursive inlining depth
                                          @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=202 <= 300.000000)
                                        @ 269  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=387 > 300.000000)
                                      @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   relevance-based (relevance=1.000000, probability=0.000002, bonus=1.000000, nodes=202 <= 300.000000)
                                    @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.000122, bonus=1.000000, nodes=387 > 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000061, bonus=1.000000, nodes=13 <= 300.000000)
                                        @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000061, bonus=1.000000, nodes=24 <= 300.000000)
                                      @ 45  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000061, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 5  jdk.graal.compiler.nodes.java.NewArrayNode.newUninitializedArray(Class, int):Object (7 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000015, bonus=1.000000, nodes=13 <= 300.000000)
                                        @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000015, bonus=1.000000, nodes=24 <= 300.000000)
                                      @ 101  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000015, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 27  jdk.graal.compiler.replacements.arraycopy.ArrayCopyCallNode.disjointArraycopy(Object, int, Object, int, int, JavaKind, int):void (17 bytes)   inline method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000015, bonus=1.000000, nodes=13 <= 300.000000)
                                        @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000015, bonus=1.000000, nodes=24 <= 300.000000)
                                      @ 114  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000015, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000003, bonus=1.000000, nodes=13 <= 300.000000)
                                        @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000003, bonus=1.000000, nodes=24 <= 300.000000)
                                      @ 184  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000003, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000003, bonus=1.000000, nodes=13 <= 300.000000)
                                        @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000003, bonus=1.000000, nodes=24 <= 300.000000)
                                      @ 218  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000003, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 5  jdk.graal.compiler.replacements.arraycopy.ArrayCopySnippets.checkArrayTypes(Object, Object, ArrayCopySnippets$ArrayCopyTypeCheck):void (98 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 20  jdk.graal.compiler.replacements.arraycopy.ArrayCopySnippets.checkLimits(Object, int, Object, int, int, JavaKind, ArrayCopySnippets$Counters):int[] (230 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                              @ 21  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                              @ 37  jdk.graal.compiler.nodes.PiNode.piCastPositive(int, GuardingNode):int (9 bytes)   inline method (bytecode parsing)
                              @ 64  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                              @ 81  jdk.graal.compiler.nodes.PiNode.piCastPositive(int, GuardingNode):int (9 bytes)   inline method (bytecode parsing)
                              @ 108  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                              @ 125  jdk.graal.compiler.nodes.PiNode.piCastPositive(int, GuardingNode):int (9 bytes)   inline method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                              @ 159  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                              @ 200  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                              @ 217  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                              @ 226  jdk.graal.compiler.replacements.arraycopy.ArrayCopySnippets.createCheckLimitsResult(int, int, int):int[] (18 bytes)   inline method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                            @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000001, bonus=1.000000, nodes=13 <= 300.000000)
                            @ 47  jdk.graal.compiler.replacements.arraycopy.ArrayCopySnippets.incrementLengthCounter(int, ArrayCopySnippets$Counters):void (16 bytes)   inline method (bytecode parsing)
                                          @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000001, bonus=1.000000, nodes=24 <= 300.000000)
                              @ 12  jdk.graal.compiler.replacements.SnippetIntegerHistogram.inc(long):void (215 bytes)   inline method (bytecode parsing)
                                        @ 45  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000001, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 52  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                            @ 59  jdk.graal.compiler.replacements.SnippetCounter.add(int):void (13 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                            @ 77  jdk.graal.compiler.replacements.arraycopy.ArrayCopySnippets.doArraycopyExactStubCallSnippet(Object, int, Object, int, int, JavaKind, LocationIdentity, ArrayCopySnippets$Counters):void (19 bytes)   inline method (bytecode parsing)
                              @ 12  jdk.graal.compiler.hotspot.replacements.arraycopy.HotSpotArraycopySnippets.heapWordSize():int (7 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                              @ 15  jdk.graal.compiler.replacements.arraycopy.ArrayCopyCallNode.arraycopy(Object, int, Object, int, int, JavaKind, LocationIdentity, int):void (19 bytes)   inline method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                            @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                          @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                        @ 101  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                            @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                          @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                        @ 114  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                            @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                          @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                        @ 184  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                            @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                          @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                        @ 218  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 45  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 101  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 114  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 184  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 218  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 45  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 101  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 114  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 184  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 218  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                                          @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining it exceeds the maximum recursive inlining depth
                                          @ 269  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining it exceeds the maximum recursive inlining depth
                                          @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=202 <= 300.000000)
                                        @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=387 > 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 45  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 101  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 114  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 184  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 218  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 45  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 101  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 114  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 184  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 218  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                                          @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining it exceeds the maximum recursive inlining depth
                                          @ 269  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining it exceeds the maximum recursive inlining depth
                                          @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=202 <= 300.000000)
                                        @ 269  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=387 > 300.000000)
                                      @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   relevance-based (relevance=1.000000, probability=0.000002, bonus=1.000000, nodes=202 <= 300.000000)
                                    @ 269  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.000122, bonus=1.000000, nodes=387 > 300.000000)
                                  @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   relevance-based (relevance=1.000000, probability=0.007813, bonus=1.000000, nodes=202 <= 300.000000)
                                @ 19  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=387 > 300.000000)
                              @ 81  som.Vector.sort(Comparator):void (23 bytes)   relevance-based (relevance=1.000131, probability=1.000000, bonus=1.000000, nodes=22 <= 300.000000)
                                @ 1  som.Vector.isEmpty():boolean (17 bytes)   relevance-based (relevance=1.000000, probability=35352.420000, bonus=1.000000, nodes=10 <= 300.000000)
                              @ 38  som.Vector.removeFirst():Object (31 bytes)   relevance-based (relevance=1.000000, probability=35352.420000, bonus=1.000000, nodes=18 <= 300.000000)
                                    @ 1  deltablue.BinaryConstraint.isSatisfied():boolean (13 bytes)   trivial (relevance=1.000000, probability=348915.334348, bonus=1.000000, nodes=9)
                                  @ 8  deltablue.Planner.lambda$removePropagateFrom$4(Vector, AbstractConstraint):void (13 bytes)   relevance-based (relevance=1.000000, probability=348915.334348, bonus=1.000000, nodes=16 <= 300.000000)
                                @ 20  deltablue.Planner$$Lambda/0x00007f45e0083030.apply(Object):void (12 bytes)   relevance-based (relevance=1.000000, probability=348915.334348, bonus=1.000000, nodes=19 <= 300.000000)
                              @ 57  som.Vector.forEach(ForEachInterface):void (32 bytes)   relevance-based (relevance=1.000000, probability=35352.420000, bonus=1.000000, nodes=35 <= 300.000000)
                            @ 1  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 6  deltablue.Variable.getConstraints():Vector (5 bytes)   inline accessor method (bytecode parsing)
                            @ 11  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object, Object):Object (10 bytes)   inline method (bytecode parsing)
                              @ 6  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object, Object):Object (24 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 19  deltablue.Planner$$Lambda/0x00007f45e0083470.<init>(AbstractConstraint, ForEachInterface):void (15 bytes)   relevance-based (relevance=1.000000, probability=35352.420000, bonus=1.000000, nodes=11 <= 300.000000)
                                      @ 6  deltablue.BinaryConstraint.isSatisfied():boolean (13 bytes)   trivial (relevance=1.000000, probability=174457.667174, bonus=1.000000, nodes=9)
                            @ 39  deltablue.Variable.getWalkStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 45  deltablue.Variable.setWalkStrength(Strength):void (6 bytes)   inline method (bytecode parsing)
                            @ 50  deltablue.Variable.getStay():boolean (5 bytes)   inline accessor method (bytecode parsing)
                            @ 53  deltablue.Variable.setStay(boolean):void (6 bytes)   inline method (bytecode parsing)
                            @ 57  deltablue.Variable.getStay():boolean (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 2  deltablue.Strength.weaker(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=174457.667174, bonus=1.000000, nodes=11 <= 300.000000)
                                            @ 42  deltablue.Strength.weakest(Strength):Strength (14 bytes)   relevance-based (relevance=1.433588, probability=174457.667174, bonus=1.000000, nodes=12 <= 300.000000)
                            @ 18  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 21  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 35  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 38  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                                            @ 64  deltablue.EqualityConstraint.execute():void (42 bytes)   relevance-based (relevance=1.216794, probability=148075.336710, bonus=1.000000, nodes=38 <= 300.000000)
                                          @ 1  deltablue.BinaryConstraint.recalculate():void (68 bytes)   relevance-based (relevance=1.000000, probability=174457.667174, bonus=1.000000, nodes=86 <= 300.000000)
                                          @ 6  deltablue.BinaryConstraint.getOutput():Variable (22 bytes)   relevance-based (relevance=1.433588, probability=174457.667174, bonus=1.000000, nodes=17 <= 300.000000)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                            @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000131, probability=22.869092, bonus=1.000000, nodes=41 > 0.039331)
                                          @ 9  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.433588, probability=174457.667174, bonus=1.000000, nodes=35 <= 300.000000)
                                        @ 8  deltablue.Planner.lambda$removePropagateFrom$5(Vector, AbstractConstraint):void (13 bytes)   relevance-based (relevance=1.000000, probability=174457.667174, bonus=1.000000, nodes=135 <= 300.000000)
                                      @ 14  deltablue.Planner$$Lambda/0x00007f45e0083250.apply(Object):void (12 bytes)   relevance-based (relevance=1.000000, probability=174457.667174, bonus=1.000000, nodes=137 <= 300.000000)
                                    @ 12  deltablue.Planner.lambda$constraintsConsuming$3(AbstractConstraint, ForEachInterface, AbstractConstraint):void (20 bytes)   relevance-based (relevance=1.000000, probability=348915.334348, bonus=1.000000, nodes=158 <= 300.000000)
                                  @ 20  deltablue.Planner$$Lambda/0x00007f45e0083470.apply(Object):void (16 bytes)   relevance-based (relevance=1.000000, probability=348915.334348, bonus=1.000000, nodes=166 <= 300.000000)
                                @ 16  som.Vector.forEach(ForEachInterface):void (32 bytes)   relevance-based (relevance=1.000000, probability=35352.420000, bonus=1.000000, nodes=179 <= 300.000000)
                              @ 69  deltablue.Planner.constraintsConsuming(Variable, ForEachInterface):void (20 bytes)   relevance-based (relevance=1.000000, probability=35352.420000, bonus=1.000000, nodes=198 <= 300.000000)
                            @ 23  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                            @ 37  jdk.graal.compiler.nodes.PiNode.piCastNonNull(Object, GuardingNode):Object (9 bytes)   inline method (bytecode parsing)
                            @ 91  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                            @ 118  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                            @ 126  jdk.graal.compiler.hotspot.replacements.TypeCheckSnippetUtils.checkSecondarySubType(KlassPointer, KlassPointer, TypeCheckSnippetUtils$Counters):boolean (36 bytes)   inline method (bytecode parsing)
                              @ 24  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                              @ 32  jdk.graal.compiler.hotspot.replacements.TypeCheckSnippetUtils.checkSelfAndSupers(KlassPointer, KlassPointer, TypeCheckSnippetUtils$Counters):boolean (113 bytes)   inline method (bytecode parsing)
                                @ 12  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                  @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                                @ 63  jdk.graal.compiler.hotspot.replacements.TypeCheckSnippetUtils.loadSecondarySupersElement(Word, int):KlassPointer (26 bytes)   inline method (bytecode parsing)
                                @ 93  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                  @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                                @ 108  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                  @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                            @ 23  jdk.graal.compiler.replacements.AllocationSnippets.allocateArrayImpl(Word, int, int, int, AllocationSnippets$FillContent, int, boolean, boolean, boolean, boolean, AllocationSnippets$AllocationProfilingData):Object (178 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getTLABInfo():Word (5 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getThread():Word (8 bytes)   inline method (bytecode parsing)
                                  @ 4  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.registerAsWord(Register):Word (7 bytes)   inline method (bytecode parsing)
                              @ 9  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.readTlabTop(Word):Word (5 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.readTlabTop(Word):Word (17 bytes)   inline method (bytecode parsing)
                              @ 17  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.readTlabEnd(Word):Word (5 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.readTlabEnd(Word):Word (17 bytes)   inline method (bytecode parsing)
                              @ 36  jdk.graal.compiler.replacements.ReplacementsUtil.dynamicAssert(boolean, String):void (12 bytes)   inline method (bytecode parsing)
                              @ 44  jdk.graal.compiler.replacements.AllocationSnippets.arrayAllocationSize(int, int, int):UnsignedWord (18 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.objectAlignment():int (7 bytes)   inline method (bytecode parsing)
                                @ 11  jdk.graal.compiler.replacements.AllocationSnippets.arrayAllocationSize(int, int, int, int):long (32 bytes)   inline method (bytecode parsing)
                              @ 59  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.useTLAB():boolean (7 bytes)   inline method (bytecode parsing)
                              @ 72  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.shouldAllocateInTLAB(UnsignedWord, boolean):boolean (33 bytes)   inline method (bytecode parsing)
                              @ 102  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.writeTlabTop(Word, Word):void (6 bytes)   inline method (bytecode parsing)
                                @ 2  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.writeTlabTop(Word, Word):void (15 bytes)   inline method (bytecode parsing)
                              @ 109  jdk.graal.compiler.replacements.AllocationSnippets.emitPrefetchAllocate(Word, boolean):void (61 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getPrefetchStyle():int (7 bytes)   inline method (bytecode parsing)
                                @ 9  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getPrefetchLines(boolean):int (18 bytes)   inline method (bytecode parsing)
                                @ 14  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getPrefetchStepSize():int (7 bytes)   inline method (bytecode parsing)
                                @ 20  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getPrefetchDistance():int (7 bytes)   inline method (bytecode parsing)
                              @ 136  jdk.graal.compiler.replacements.AllocationSnippets.formatArray(Word, UnsignedWord, int, Word, AllocationSnippets$FillContent, boolean, int, boolean, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):Object (53 bytes)   inline method (bytecode parsing)
                                @ 5  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.initializeObjectHeader(Word, Word, boolean):void (29 bytes)   inline method (bytecode parsing)
                                  @ 25  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.initializeObjectHeader(Word, Word, KlassPointer):void (20 bytes)   inline method (bytecode parsing)
                                @ 11  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.arrayLengthOffset():int (7 bytes)   inline method (bytecode parsing)
                                @ 15  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                                @ 38  jdk.graal.compiler.replacements.AllocationSnippets.fillContents(Word, AllocationSnippets$FillContent, int, UnsignedWord, boolean, boolean, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):void (58 bytes)   inline method (bytecode parsing)
                                @ 44  jdk.graal.compiler.replacements.AllocationSnippets.emitMemoryBarrierIf(boolean):void (14 bytes)   inline method (bytecode parsing)
                                  @ 7  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                              @ 152  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                              @ 158  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.callNewArrayStub(Word, int):Object (35 bytes)   inline method (bytecode parsing)
                                @ 22  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.nonNullOrDeopt(Object):Object (27 bytes)   inline method (bytecode parsing)
                              @ 168  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.profileAllocation(AllocationSnippets$AllocationProfilingData, UnsignedWord):void (51 bytes)   inline method (bytecode parsing)
                              @ 174  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.verifyOop(Object):Object (5 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.verifyOop(Object):Object (19 bytes)   inline method (bytecode parsing)
                            @ 9  deltablue.Plan.<init>():void (7 bytes)   inline method (bytecode parsing)
                              @ 3  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 39  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 67  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                              @ 1  deltablue.Planner.newMark():int (15 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=10 <= 300.000000)
                              @ 18  som.Vector.isEmpty():boolean (17 bytes)   relevance-based (relevance=1.000029, probability=33939.142857, bonus=1.000000, nodes=10 <= 300.000000)
                                @ 1  som.Vector.isEmpty():boolean (17 bytes)   relevance-based (relevance=1.000000, probability=33938.142857, bonus=1.000000, nodes=10 <= 300.000000)
                              @ 26  som.Vector.removeFirst():Object (31 bytes)   relevance-based (relevance=1.000000, probability=33938.142857, bonus=1.000000, nodes=18 <= 300.000000)
                              @ 36  deltablue.BinaryConstraint.getOutput():Variable (22 bytes)   relevance-based (relevance=1.000000, probability=33938.142857, bonus=1.000000, nodes=22 <= 300.000000)
                            @ 2  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f45e0081f08.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 9  deltablue.Variable.getStay():boolean (5 bytes)   inline accessor method (bytecode parsing)
                                    @ 8  deltablue.AbstractConstraint.lambda$inputsKnown$0(int, Variable):boolean (28 bytes)   not inlining relevance-based (relevance=0.000006, probability=0.219546, bonus=1.000000, nodes=21 > 0.001941)
                                  @ 26  deltablue.AbstractConstraint$$Lambda/0x00007f45e0081f08.test(Object):boolean (12 bytes)   trivial (relevance=0.000006, probability=0.219546, bonus=1.000000, nodes=9)
                            @ 1  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 9  deltablue.Variable.getStay():boolean (5 bytes)   inline accessor method (bytecode parsing)
                                    @ 8  deltablue.AbstractConstraint.lambda$inputsKnown$0(int, Variable):boolean (28 bytes)   relevance-based (relevance=1.000000, probability=33936.825327, bonus=1.000000, nodes=21 <= 300.000000)
                                  @ 15  deltablue.AbstractConstraint$$Lambda/0x00007f45e0081f08.test(Object):boolean (12 bytes)   relevance-based (relevance=1.000000, probability=33936.825327, bonus=1.000000, nodes=23 <= 300.000000)
                                @ 7  deltablue.BinaryConstraint.inputsHasOne(TestInterface):boolean (32 bytes)   relevance-based (relevance=1.000000, probability=33938.142857, bonus=1.000000, nodes=42 <= 300.000000)
                              @ 49  deltablue.AbstractConstraint.inputsKnown(int):boolean (19 bytes)   relevance-based (relevance=1.234435, probability=33938.142857, bonus=1.000000, nodes=59 <= 300.000000)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000131, probability=4.448842, bonus=1.000000, nodes=41 > 0.039331)
                              @ 58  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.234435, probability=33938.142857, bonus=1.000000, nodes=35 <= 300.000000)
                              @ 63  deltablue.BinaryConstraint.getOutput():Variable (22 bytes)   relevance-based (relevance=1.234435, probability=33938.142857, bonus=1.000000, nodes=22 <= 300.000000)
                              @ 73  deltablue.BinaryConstraint.getOutput():Variable (22 bytes)   relevance-based (relevance=1.234435, probability=33938.142857, bonus=1.000000, nodes=22 <= 300.000000)
                            @ 1  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 6  deltablue.Variable.getConstraints():Vector (5 bytes)   inline accessor method (bytecode parsing)
                            @ 11  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object, Object):Object (10 bytes)   inline method (bytecode parsing)
                              @ 6  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object, Object):Object (24 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 19  deltablue.Planner$$Lambda/0x00007f45e0031a28.<init>(AbstractConstraint, Vector):void (15 bytes)   relevance-based (relevance=1.000000, probability=33938.142857, bonus=1.000000, nodes=11 <= 300.000000)
                                  @ 20  deltablue.Planner$$Lambda/0x00007f45e0031a28.apply(Object):void (16 bytes)   not inlining too large previous low-level graph (low-level-nodes: 346, relevance=1.000000, probability=334956.941056, bonus=1.000000, nodes=16)
                                @ 16  som.Vector.forEach(ForEachInterface):void (32 bytes)   not inlining callee invoke probability is too high (invokeP=9.869631, relevance=1.000000, probability=33938.142857, bonus=1.000000, nodes=24)
                              @ 78  deltablue.Planner.addConstraintsConsumingTo(Variable, Vector):void (20 bytes)   relevance-based (relevance=1.234435, probability=33938.142857, bonus=1.000000, nodes=23 <= 300.000000)
                            @ 4  deltablue.Planner.<init>():void (10 bytes)   inline method (bytecode parsing)
                            @ 12  som.Vector.<init>():void (7 bytes)   inline method (bytecode parsing)
                              @ 3  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 18  deltablue.Variable.value(int):Variable (15 bytes)   inline method (bytecode parsing)
                              @ 10  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 25  deltablue.Variable.value(int):Variable (15 bytes)   inline method (bytecode parsing)
                              @ 10  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 75  deltablue.StayConstraint.<init>(Variable, Strength$Sym, Planner):void (8 bytes)   inline method (bytecode parsing)
                              @ 4  deltablue.UnaryConstraint.<init>(Variable, Strength$Sym, Planner):void (16 bytes)   inline method (bytecode parsing)
                                @ 2  deltablue.AbstractConstraint.<init>(Strength$Sym):void (13 bytes)   inline method (bytecode parsing)
                                  @ 6  deltablue.Strength.of(Strength$Sym):Strength (11 bytes)   inline method (bytecode parsing)
                                @ 12  deltablue.AbstractConstraint.addConstraint(Planner):void (10 bytes)   inline method (bytecode parsing)
                            @ 114  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 144  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 187  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 248  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                              @ 181  som.Vector.at(int):Object (18 bytes)   relevance-based (relevance=1.000000, probability=0.999983, bonus=1.000000, nodes=10 <= 300.000000)
                              @ 181  som.Vector.at(int):Object (18 bytes)   relevance-based (relevance=1.000000, probability=59997.000034, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 9  deltablue.EditConstraint.<init>(Variable, Strength$Sym, Planner):void (8 bytes)   inline method (bytecode parsing)
                              @ 4  deltablue.UnaryConstraint.<init>(Variable, Strength$Sym, Planner):void (16 bytes)   inline method (bytecode parsing)
                                @ 2  deltablue.AbstractConstraint.<init>(Strength$Sym):void (13 bytes)   inline method (bytecode parsing)
                                  @ 6  deltablue.Strength.of(Strength$Sym):Strength (11 bytes)   inline method (bytecode parsing)
                                @ 12  deltablue.AbstractConstraint.addConstraint(Planner):void (10 bytes)   inline method (bytecode parsing)
                            @ 39  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 44  deltablue.Plan.execute():void (10 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object):Object (8 bytes)   inline method (bytecode parsing)
                                @ 4  java.lang.invoke.LambdaForm$MH/0x00007f45e0000800.invoke(Object):Object (8 bytes)   inline method (bytecode parsing)
                                    @ 7  deltablue.Strength$Sym.customHash():int (5 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                                  @ 1  som.Dictionary.hash(Dictionary$CustomHash):int (20 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                            @ 6  som.Dictionary.getBucketIdx(int):int (10 bytes)   inline method (bytecode parsing)
                                  @ 7  som.Dictionary.getBucket(int):Dictionary$Entry (11 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                                  @ 18  som.IdentityDictionary$IdEntry.match(int, Object):boolean (22 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                @ 4  som.Dictionary.at(Dictionary$CustomHash):Object (39 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=28 <= 300.000000)
                            @ 5  deltablue.Variable.addConstraint(AbstractConstraint):void (9 bytes)   inline method (bytecode parsing)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                    @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000131, probability=0.000131, bonus=1.000000, nodes=41 > 0.039331)
                                  @ 5  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=35 <= 300.000000)
                                @ 1  deltablue.UnaryConstraint.addToGraph():void (14 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=47 <= 300.000000)
                                  @ 1  deltablue.Planner.newMark():int (15 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f45e0031810.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 8  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 697, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=72)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f45e0031810.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 19  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 697, relevance=1.000000, probability=1.261254, bonus=1.000000, nodes=72)
                                @ 6  deltablue.Planner.incrementalAdd(AbstractConstraint):void (27 bytes)   relevance-based (relevance=1.000131, probability=1.000000, bonus=1.000000, nodes=28 <= 300.000000)
                            @ 5  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                    @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000131, probability=0.000131, bonus=1.000000, nodes=41 > 0.039331)
                                  @ 11  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=35 <= 300.000000)
                                @ 14  som.Vector.with(Object):Vector (16 bytes)   relevance-based (relevance=1.000131, probability=1.000000, bonus=1.000000, nodes=40 <= 300.000000)
                            @ 4  som.Vector.<init>():void (7 bytes)   inline method (bytecode parsing)
                              @ 3  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 10  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.Planner$$Lambda/0x00007f45e0081878.<init>(Vector):void (10 bytes)   inline method (bytecode parsing)
                                      @ 1  deltablue.AbstractConstraint.isInput():boolean (2 bytes)   not inlining no type profile exists
                                      @ 8  deltablue.AbstractConstraint.isSatisfied():boolean (0 bytes)   not inlining no type profile exists
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                          @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000131, probability=0.000323, bonus=1.000000, nodes=41 > 0.039331)
                                        @ 16  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=2.467393, bonus=1.000000, nodes=35 <= 300.000000)
                                      @ 8  deltablue.Planner.lambda$extractPlanFromConstraints$1(Vector, AbstractConstraint):void (20 bytes)   relevance-based (relevance=1.000000, probability=9.869570, bonus=1.000000, nodes=59 <= 300.000000)
                                    @ 20  deltablue.Planner$$Lambda/0x00007f45e0081878.apply(Object):void (12 bytes)   relevance-based (relevance=1.000000, probability=9.869570, bonus=1.000000, nodes=64 <= 300.000000)
                                  @ 15  som.Vector.forEach(ForEachInterface):void (32 bytes)   not inlining callee invoke probability is too high (invokeP=14.804678, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=77)
                            @ 9  deltablue.Plan.<init>():void (7 bytes)   inline method (bytecode parsing)
                              @ 3  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 39  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 67  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                                    @ 1  deltablue.Planner.newMark():int (15 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=10 <= 300.000000)
                                    @ 18  som.Vector.isEmpty():boolean (17 bytes)   relevance-based (relevance=1.000031, probability=32768.843137, bonus=1.000000, nodes=10 <= 300.000000)
                                      @ 1  som.Vector.isEmpty():boolean (17 bytes)   relevance-based (relevance=1.000000, probability=32767.843137, bonus=1.000000, nodes=10 <= 300.000000)
                                    @ 26  som.Vector.removeFirst():Object (31 bytes)   relevance-based (relevance=1.000000, probability=32767.843137, bonus=1.000000, nodes=18 <= 300.000000)
                                    @ 36  deltablue.BinaryConstraint.getOutput():Variable (22 bytes)   relevance-based (relevance=1.000000, probability=32767.843137, bonus=1.000000, nodes=22 <= 300.000000)
                            @ 2  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f45e0081f08.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 9  deltablue.Variable.getStay():boolean (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 8  deltablue.AbstractConstraint.lambda$inputsKnown$0(int, Variable):boolean (28 bytes)   not inlining relevance-based (relevance=0.000007, probability=0.228631, bonus=1.000000, nodes=21 > 0.002093)
                                        @ 26  deltablue.AbstractConstraint$$Lambda/0x00007f45e0081f08.test(Object):boolean (12 bytes)   trivial (relevance=0.000007, probability=0.228631, bonus=1.000000, nodes=9)
                            @ 1  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 9  deltablue.Variable.getStay():boolean (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 8  deltablue.AbstractConstraint.lambda$inputsKnown$0(int, Variable):boolean (28 bytes)   relevance-based (relevance=1.000000, probability=32766.506273, bonus=1.000000, nodes=21 <= 300.000000)
                                        @ 15  deltablue.AbstractConstraint$$Lambda/0x00007f45e0081f08.test(Object):boolean (12 bytes)   relevance-based (relevance=1.000000, probability=32766.506273, bonus=1.000000, nodes=23 <= 300.000000)
                                      @ 7  deltablue.BinaryConstraint.inputsHasOne(TestInterface):boolean (32 bytes)   relevance-based (relevance=1.000000, probability=32767.843137, bonus=1.000000, nodes=42 <= 300.000000)
                                    @ 49  deltablue.AbstractConstraint.inputsKnown(int):boolean (19 bytes)   relevance-based (relevance=1.234437, probability=32767.843137, bonus=1.000000, nodes=59 <= 300.000000)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                      @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000131, probability=4.295431, bonus=1.000000, nodes=41 > 0.039331)
                                    @ 58  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.234437, probability=32767.843137, bonus=1.000000, nodes=35 <= 300.000000)
                                    @ 63  deltablue.BinaryConstraint.getOutput():Variable (22 bytes)   relevance-based (relevance=1.234437, probability=32767.843137, bonus=1.000000, nodes=22 <= 300.000000)
                                    @ 73  deltablue.BinaryConstraint.getOutput():Variable (22 bytes)   relevance-based (relevance=1.234437, probability=32767.843137, bonus=1.000000, nodes=22 <= 300.000000)
                            @ 1  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 6  deltablue.Variable.getConstraints():Vector (5 bytes)   inline accessor method (bytecode parsing)
                            @ 11  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object, Object):Object (10 bytes)   inline method (bytecode parsing)
                              @ 6  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object, Object):Object (24 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                      @ 19  deltablue.Planner$$Lambda/0x00007f45e0031a28.<init>(AbstractConstraint, Vector):void (15 bytes)   relevance-based (relevance=1.000000, probability=32767.843137, bonus=1.000000, nodes=11 <= 300.000000)
                                        @ 20  deltablue.Planner$$Lambda/0x00007f45e0031a28.apply(Object):void (16 bytes)   not inlining too large previous low-level graph (low-level-nodes: 346, relevance=1.000000, probability=323404.521897, bonus=1.000000, nodes=16)
                                      @ 16  som.Vector.forEach(ForEachInterface):void (32 bytes)   not inlining callee invoke probability is too high (invokeP=9.869570, relevance=1.000000, probability=32767.843137, bonus=1.000000, nodes=24)
                                    @ 78  deltablue.Planner.addConstraintsConsumingTo(Variable, Vector):void (20 bytes)   relevance-based (relevance=1.234437, probability=32767.843137, bonus=1.000000, nodes=23 <= 300.000000)
                                  @ 20  deltablue.Planner.makePlan(Vector):Plan (86 bytes)   not inlining callee invoke probability is too high (invokeP=32772.367199, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=230)
                                @ 22  deltablue.Planner.extractPlanFromConstraints(Vector):Plan (24 bytes)   relevance-based (relevance=1.000131, probability=1.000000, bonus=1.000000, nodes=27 <= 300.000000)
                                  @ 1  deltablue.UnaryConstraint.isSatisfied():boolean (5 bytes)   trivial (relevance=2.000000, probability=1.000000, bonus=1.000000, nodes=5)
                            @ 21  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.Planner$$Lambda/0x00007f45e0083d70.<init>(Planner):void (10 bytes)   inline method (bytecode parsing)
                                    @ 1  deltablue.UnaryConstraint.getOutput():Variable (5 bytes)   trivial (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=5)
                                    @ 6  deltablue.UnaryConstraint.markUnsatisfied():void (6 bytes)   trivial (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=7)
                            @ 1  som.Vector.capacity():int (6 bytes)   inline method (bytecode parsing)
                            @ 31  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object, Object, Object, Object):Object (13 bytes)   inline method (bytecode parsing)
                              @ 9  java.lang.invoke.LambdaForm$DMH/0x00007f45e0123400.newInvokeSpecial(Object, Object, Object, Object, Object):Object (30 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 7  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                          @ 24  som.Vector$$Lambda/0x00007f45e0082e10.<init>(Object, boolean[], Object[], int[]):void (26 bytes)   relevance-based (relevance=1.000000, probability=0.250000, bonus=1.000000, nodes=17 <= 300.000000)
                                              @ 17  som.Vector.lambda$remove$0(Object, boolean[], Object[], int[], Object):void (28 bytes)   relevance-based (relevance=1.000000, probability=2.467393, bonus=1.000000, nodes=18 <= 300.000000)
                                            @ 20  som.Vector$$Lambda/0x00007f45e0082e10.apply(Object):void (21 bytes)   relevance-based (relevance=1.000000, probability=2.467393, bonus=1.000000, nodes=19 <= 300.000000)
                                          @ 36  som.Vector.forEach(ForEachInterface):void (32 bytes)   relevance-based (relevance=1.000000, probability=0.250000, bonus=1.000000, nodes=35 <= 300.000000)
                                        @ 5  som.Vector.remove(Object):boolean (61 bytes)   relevance-based (relevance=2.000000, probability=0.250000, bonus=1.000000, nodes=67 <= 300.000000)
                                      @ 12  deltablue.Variable.removeConstraint(AbstractConstraint):void (23 bytes)   relevance-based (relevance=1.000000, probability=0.250000, bonus=1.000000, nodes=84 <= 300.000000)
                                    @ 10  deltablue.UnaryConstraint.removeFromGraph():void (21 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=94 <= 300.000000)
                            @ 4  som.Vector.<init>():void (7 bytes)   inline method (bytecode parsing)
                              @ 3  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 10  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 14  deltablue.Strength.absoluteWeakest():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 17  deltablue.Variable.setWalkStrength(Strength):void (6 bytes)   inline method (bytecode parsing)
                            @ 22  deltablue.Variable.setStay(boolean):void (6 bytes)   inline method (bytecode parsing)
                            @ 48  deltablue.Variable.getConstraints():Vector (5 bytes)   inline accessor method (bytecode parsing)
                            @ 52  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.Planner$$Lambda/0x00007f45e0083030.<init>(Vector):void (10 bytes)   inline method (bytecode parsing)
                            @ 64  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.Planner$$Lambda/0x00007f45e0083250.<init>(Vector):void (10 bytes)   inline method (bytecode parsing)
                            @ 76  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object):Object (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.lang.invoke.LambdaForm$MH/0x00007f45e0000800.invoke(Object):Object (8 bytes)   inline method (bytecode parsing)
                                    @ 15  deltablue.Planner.removePropagateFrom(Variable):Vector (86 bytes)   not inlining too large previous low-level graph (low-level-nodes: 939, relevance=2.000000, probability=0.500000, bonus=1.000000, nodes=81)
                            @ 8  deltablue.Planner.lambda$incrementalRemove$0(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                                          @ 1  deltablue.Planner.newMark():int (15 bytes)   relevance-based (relevance=1.000000, probability=4.934785, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f45e0031810.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 8  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 697, relevance=1.000000, probability=4.934785, bonus=1.000000, nodes=72)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f45e0031810.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 19  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 697, relevance=1.000000, probability=6.224018, bonus=1.000000, nodes=72)
                                        @ 2  deltablue.Planner.incrementalAdd(AbstractConstraint):void (27 bytes)   relevance-based (relevance=1.000000, probability=4.934785, bonus=1.000000, nodes=28 <= 300.000000)
                                      @ 20  deltablue.Planner$$Lambda/0x00007f45e0083d70.apply(Object):void (12 bytes)   relevance-based (relevance=1.000000, probability=4.934785, bonus=1.000000, nodes=37 <= 300.000000)
                                    @ 26  som.Vector.forEach(ForEachInterface):void (32 bytes)   not inlining callee invoke probability is too high (invokeP=22.317606, relevance=2.000000, probability=0.500000, bonus=1.000000, nodes=53)
                                  @ 9  deltablue.Planner.incrementalRemove(AbstractConstraint):void (30 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=115 <= 300.000000)
                            @ 1  som.Vector.capacity():int (6 bytes)   inline method (bytecode parsing)
                            @ 31  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object, Object, Object, Object):Object (13 bytes)   inline method (bytecode parsing)
                              @ 9  java.lang.invoke.LambdaForm$DMH/0x00007f45e0123400.newInvokeSpecial(Object, Object, Object, Object, Object):Object (30 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 7  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                        @ 24  som.Vector$$Lambda/0x00007f45e0082e10.<init>(Object, boolean[], Object[], int[]):void (26 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=17 <= 300.000000)
                                            @ 17  som.Vector.lambda$remove$0(Object, boolean[], Object[], int[], Object):void (28 bytes)   relevance-based (relevance=1.000000, probability=4.934785, bonus=1.000000, nodes=18 <= 300.000000)
                                          @ 20  som.Vector$$Lambda/0x00007f45e0082e10.apply(Object):void (21 bytes)   relevance-based (relevance=1.000000, probability=4.934785, bonus=1.000000, nodes=19 <= 300.000000)
                                        @ 36  som.Vector.forEach(ForEachInterface):void (32 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=35 <= 300.000000)
                                      @ 5  som.Vector.remove(Object):boolean (61 bytes)   relevance-based (relevance=2.000000, probability=0.500000, bonus=1.000000, nodes=67 <= 300.000000)
                                    @ 12  deltablue.Variable.removeConstraint(AbstractConstraint):void (23 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=84 <= 300.000000)
                                  @ 13  deltablue.UnaryConstraint.removeFromGraph():void (21 bytes)   relevance-based (relevance=4.000000, probability=1.000000, bonus=1.000000, nodes=94 <= 300.000000)
                                @ 55  deltablue.AbstractConstraint.destroyConstraint(Planner):void (17 bytes)   relevance-based (relevance=1.000131, probability=1.000000, bonus=1.000000, nodes=212 <= 300.000000)
                              @ 225  deltablue.Planner.change(Variable, int):void (59 bytes)   not inlining relevance-based (relevance=1.000017, probability=1.000000, bonus=1.000000, nodes=400 > 300.000000)
                              @ 242  som.Vector.at(int):Object (18 bytes)   relevance-based (relevance=1.000000, probability=59999.000000, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 4  deltablue.Planner.<init>():void (10 bytes)   inline method (bytecode parsing)
                            @ 12  som.Vector.<init>():void (7 bytes)   inline method (bytecode parsing)
                              @ 3  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 18  deltablue.Variable.value(int):Variable (15 bytes)   inline method (bytecode parsing)
                              @ 10  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 25  deltablue.Variable.value(int):Variable (15 bytes)   inline method (bytecode parsing)
                              @ 10  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 75  deltablue.StayConstraint.<init>(Variable, Strength$Sym, Planner):void (8 bytes)   inline method (bytecode parsing)
                              @ 4  deltablue.UnaryConstraint.<init>(Variable, Strength$Sym, Planner):void (16 bytes)   inline method (bytecode parsing)
                                @ 2  deltablue.AbstractConstraint.<init>(Strength$Sym):void (13 bytes)   inline method (bytecode parsing)
                                  @ 6  deltablue.Strength.of(Strength$Sym):Strength (11 bytes)   inline method (bytecode parsing)
                                @ 12  deltablue.AbstractConstraint.addConstraint(Planner):void (10 bytes)   inline method (bytecode parsing)
                            @ 114  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 144  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 187  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 248  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000131, probability=0.000131, bonus=1.000000, nodes=41 > 0.039331)
                              @ 5  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=35 <= 300.000000)
                            @ 10  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 15  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 27  deltablue.Strength.absoluteWeakest():Strength (4 bytes)   inline method (bytecode parsing)
                                @ 4  deltablue.Variable.<init>():void (44 bytes)   relevance-based (relevance=1.000000, probability=0.999983, bonus=1.000000, nodes=27 <= 300.000000)
                              @ 47  deltablue.Variable.value(int):Variable (15 bytes)   relevance-based (relevance=1.000000, probability=0.999983, bonus=1.000000, nodes=32 <= 300.000000)
                            @ 10  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 15  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 27  deltablue.Strength.absoluteWeakest():Strength (4 bytes)   inline method (bytecode parsing)
                                @ 4  deltablue.Variable.<init>():void (44 bytes)   relevance-based (relevance=1.000000, probability=0.999983, bonus=1.000000, nodes=27 <= 300.000000)
                              @ 54  deltablue.Variable.value(int):Variable (15 bytes)   relevance-based (relevance=1.000000, probability=0.999983, bonus=1.000000, nodes=32 <= 300.000000)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000131, probability=0.000131, bonus=1.000000, nodes=41 > 0.039331)
                              @ 62  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=0.999983, bonus=1.000000, nodes=35 <= 300.000000)
                                  @ 7  deltablue.Strength$Sym.customHash():int (5 bytes)   trivial (relevance=1.000000, probability=0.999983, bonus=1.000000, nodes=5)
                                @ 1  som.Dictionary.hash(Dictionary$CustomHash):int (20 bytes)   trivial (relevance=1.000000, probability=0.999983, bonus=1.000000, nodes=5)
                            @ 6  som.Dictionary.getBucketIdx(int):int (10 bytes)   inline method (bytecode parsing)
                                @ 7  som.Dictionary.getBucket(int):Dictionary$Entry (11 bytes)   relevance-based (relevance=1.000000, probability=0.999983, bonus=1.000000, nodes=11 <= 300.000000)
                                @ 18  som.IdentityDictionary$IdEntry.match(int, Object):boolean (22 bytes)   relevance-based (relevance=1.000000, probability=0.999983, bonus=1.000000, nodes=13 <= 300.000000)
                              @ 4  som.Dictionary.at(Dictionary$CustomHash):Object (39 bytes)   relevance-based (relevance=1.000131, probability=0.999983, bonus=1.000000, nodes=28 <= 300.000000)
                            @ 5  deltablue.Variable.addConstraint(AbstractConstraint):void (9 bytes)   inline method (bytecode parsing)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                  @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000131, probability=0.000131, bonus=1.000000, nodes=41 > 0.039331)
                                @ 5  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=0.999983, bonus=1.000000, nodes=35 <= 300.000000)
                              @ 1  deltablue.UnaryConstraint.addToGraph():void (14 bytes)   relevance-based (relevance=1.000131, probability=0.999983, bonus=1.000000, nodes=47 <= 300.000000)
                                @ 1  deltablue.Planner.newMark():int (15 bytes)   relevance-based (relevance=1.000000, probability=0.999983, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f45e0031810.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                @ 8  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 697, relevance=1.000000, probability=0.999983, bonus=1.000000, nodes=72)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f45e0031810.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                @ 19  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 697, relevance=1.000000, probability=1.261233, bonus=1.000000, nodes=72)
                              @ 6  deltablue.Planner.incrementalAdd(AbstractConstraint):void (27 bytes)   relevance-based (relevance=1.000131, probability=0.999983, bonus=1.000000, nodes=28 <= 300.000000)
                            @ 24  deltablue.AbstractConstraint.addConstraint(Planner):void (10 bytes)   inline method (bytecode parsing)
                                          @ 7  deltablue.Strength$Sym.customHash():int (5 bytes)   trivial (relevance=1.000000, probability=0.999983, bonus=1.000000, nodes=5)
                                        @ 1  som.Dictionary.hash(Dictionary$CustomHash):int (20 bytes)   trivial (relevance=1.000000, probability=0.999983, bonus=1.000000, nodes=5)
                            @ 6  som.Dictionary.getBucketIdx(int):int (10 bytes)   inline method (bytecode parsing)
                                        @ 7  som.Dictionary.getBucket(int):Dictionary$Entry (11 bytes)   relevance-based (relevance=1.000000, probability=0.999983, bonus=1.000000, nodes=11 <= 300.000000)
                                        @ 18  som.IdentityDictionary$IdEntry.match(int, Object):boolean (22 bytes)   relevance-based (relevance=1.000000, probability=0.999983, bonus=1.000000, nodes=12 <= 300.000000)
                                      @ 4  som.Dictionary.at(Dictionary$CustomHash):Object (39 bytes)   relevance-based (relevance=1.000000, probability=0.999983, bonus=1.000000, nodes=28 <= 300.000000)
                                    @ 6  deltablue.Strength.of(Strength$Sym):Strength (11 bytes)   relevance-based (relevance=1.000000, probability=0.999983, bonus=1.000000, nodes=31 <= 300.000000)
                                  @ 2  deltablue.AbstractConstraint.<init>(Strength$Sym):void (13 bytes)   relevance-based (relevance=1.000000, probability=0.999983, bonus=1.000000, nodes=35 <= 300.000000)
                                @ 8  deltablue.BinaryConstraint.<init>(Variable, Variable, Strength$Sym, Planner):void (21 bytes)   relevance-based (relevance=1.000000, probability=0.999983, bonus=1.000000, nodes=45 <= 300.000000)
                            @ 5  deltablue.Variable.addConstraint(AbstractConstraint):void (9 bytes)   inline method (bytecode parsing)
                            @ 13  deltablue.Variable.addConstraint(AbstractConstraint):void (9 bytes)   inline method (bytecode parsing)
                            @ 21  deltablue.Variable.addConstraint(AbstractConstraint):void (9 bytes)   inline method (bytecode parsing)
                            @ 29  deltablue.Variable.addConstraint(AbstractConstraint):void (9 bytes)   inline method (bytecode parsing)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                    @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000131, probability=0.000131, bonus=1.000000, nodes=41 > 0.039331)
                                  @ 5  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=0.999983, bonus=1.000000, nodes=35 <= 300.000000)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                    @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000131, probability=0.000131, bonus=1.000000, nodes=41 > 0.039331)
                                  @ 5  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000131, probability=0.999983, bonus=1.000000, nodes=35 <= 300.000000)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                    @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000131, probability=0.000131, bonus=1.000000, nodes=41 > 0.039331)
                                  @ 5  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000131, probability=0.999983, bonus=1.000000, nodes=35 <= 300.000000)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                    @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000131, probability=0.000131, bonus=1.000000, nodes=41 > 0.039331)
                                  @ 5  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000131, probability=0.999983, bonus=1.000000, nodes=35 <= 300.000000)
                                @ 1  deltablue.ScaleConstraint.addToGraph():void (38 bytes)   relevance-based (relevance=1.000000, probability=0.999983, bonus=1.000000, nodes=164 <= 300.000000)
                                  @ 1  deltablue.Planner.newMark():int (15 bytes)   relevance-based (relevance=1.000000, probability=0.999983, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f45e0031810.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 8  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 697, relevance=1.000000, probability=0.999983, bonus=1.000000, nodes=72)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f45e0031810.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 19  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 697, relevance=1.000000, probability=1.261233, bonus=1.000000, nodes=72)
                                @ 6  deltablue.Planner.incrementalAdd(AbstractConstraint):void (27 bytes)   relevance-based (relevance=1.000131, probability=0.999983, bonus=1.000000, nodes=28 <= 300.000000)
                              @ 94  deltablue.ScaleConstraint.<init>(Variable, Variable, Variable, Variable, Strength$Sym, Planner):void (28 bytes)   relevance-based (relevance=1.000131, probability=0.999983, bonus=1.000000, nodes=237 <= 300.000000)
                            @ 10  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 15  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 27  deltablue.Strength.absoluteWeakest():Strength (4 bytes)   inline method (bytecode parsing)
                                @ 4  deltablue.Variable.<init>():void (44 bytes)   relevance-based (relevance=1.000000, probability=59900.769264, bonus=1.000000, nodes=27 <= 300.000000)
                              @ 47  deltablue.Variable.value(int):Variable (15 bytes)   relevance-based (relevance=1.000000, probability=59900.769264, bonus=1.000000, nodes=32 <= 300.000000)
                            @ 10  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 15  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 27  deltablue.Strength.absoluteWeakest():Strength (4 bytes)   inline method (bytecode parsing)
                                @ 4  deltablue.Variable.<init>():void (44 bytes)   relevance-based (relevance=1.000000, probability=59900.769264, bonus=1.000000, nodes=27 <= 300.000000)
                              @ 54  deltablue.Variable.value(int):Variable (15 bytes)   relevance-based (relevance=1.000000, probability=59900.769264, bonus=1.000000, nodes=32 <= 300.000000)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000131, probability=7.852198, bonus=1.000000, nodes=41 > 0.039331)
                              @ 62  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=59900.769264, bonus=1.000000, nodes=35 <= 300.000000)
                                  @ 7  deltablue.Strength$Sym.customHash():int (5 bytes)   trivial (relevance=1.000000, probability=59900.769264, bonus=1.000000, nodes=5)
                                @ 1  som.Dictionary.hash(Dictionary$CustomHash):int (20 bytes)   trivial (relevance=1.000000, probability=59900.769264, bonus=1.000000, nodes=5)
                            @ 6  som.Dictionary.getBucketIdx(int):int (10 bytes)   inline method (bytecode parsing)
                                @ 7  som.Dictionary.getBucket(int):Dictionary$Entry (11 bytes)   relevance-based (relevance=1.000000, probability=59900.769264, bonus=1.000000, nodes=11 <= 300.000000)
                                @ 18  som.IdentityDictionary$IdEntry.match(int, Object):boolean (22 bytes)   relevance-based (relevance=1.000000, probability=59900.769264, bonus=1.000000, nodes=13 <= 300.000000)
                              @ 4  som.Dictionary.at(Dictionary$CustomHash):Object (39 bytes)   relevance-based (relevance=1.000131, probability=59900.769264, bonus=1.000000, nodes=28 <= 300.000000)
                            @ 5  deltablue.Variable.addConstraint(AbstractConstraint):void (9 bytes)   inline method (bytecode parsing)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                  @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000131, probability=7.852198, bonus=1.000000, nodes=41 > 0.039331)
                                @ 5  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=59900.769264, bonus=1.000000, nodes=35 <= 300.000000)
                              @ 1  deltablue.UnaryConstraint.addToGraph():void (14 bytes)   relevance-based (relevance=1.000131, probability=59900.769264, bonus=1.000000, nodes=47 <= 300.000000)
                                @ 1  deltablue.Planner.newMark():int (15 bytes)   relevance-based (relevance=1.000000, probability=59900.769264, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f45e0031810.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                @ 8  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 697, relevance=1.000000, probability=59900.769264, bonus=1.000000, nodes=72)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f45e0031810.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                @ 19  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 697, relevance=1.000000, probability=75550.092516, bonus=1.000000, nodes=72)
                              @ 6  deltablue.Planner.incrementalAdd(AbstractConstraint):void (27 bytes)   relevance-based (relevance=1.000131, probability=59900.769264, bonus=1.000000, nodes=28 <= 300.000000)
                            @ 24  deltablue.AbstractConstraint.addConstraint(Planner):void (10 bytes)   inline method (bytecode parsing)
                                          @ 7  deltablue.Strength$Sym.customHash():int (5 bytes)   trivial (relevance=1.000000, probability=59900.769264, bonus=1.000000, nodes=5)
                                        @ 1  som.Dictionary.hash(Dictionary$CustomHash):int (20 bytes)   trivial (relevance=1.000000, probability=59900.769264, bonus=1.000000, nodes=5)
                            @ 6  som.Dictionary.getBucketIdx(int):int (10 bytes)   inline method (bytecode parsing)
                                        @ 7  som.Dictionary.getBucket(int):Dictionary$Entry (11 bytes)   relevance-based (relevance=1.000000, probability=59900.769264, bonus=1.000000, nodes=11 <= 300.000000)
                                        @ 18  som.IdentityDictionary$IdEntry.match(int, Object):boolean (22 bytes)   relevance-based (relevance=1.000000, probability=59900.769264, bonus=1.000000, nodes=12 <= 300.000000)
                                      @ 4  som.Dictionary.at(Dictionary$CustomHash):Object (39 bytes)   relevance-based (relevance=1.000000, probability=59900.769264, bonus=1.000000, nodes=28 <= 300.000000)
                                    @ 6  deltablue.Strength.of(Strength$Sym):Strength (11 bytes)   relevance-based (relevance=1.000000, probability=59900.769264, bonus=1.000000, nodes=31 <= 300.000000)
                                  @ 2  deltablue.AbstractConstraint.<init>(Strength$Sym):void (13 bytes)   relevance-based (relevance=1.000000, probability=59900.769264, bonus=1.000000, nodes=35 <= 300.000000)
                                @ 8  deltablue.BinaryConstraint.<init>(Variable, Variable, Strength$Sym, Planner):void (21 bytes)   relevance-based (relevance=1.000000, probability=59900.769264, bonus=1.000000, nodes=45 <= 300.000000)
                            @ 5  deltablue.Variable.addConstraint(AbstractConstraint):void (9 bytes)   inline method (bytecode parsing)
                            @ 13  deltablue.Variable.addConstraint(AbstractConstraint):void (9 bytes)   inline method (bytecode parsing)
                            @ 21  deltablue.Variable.addConstraint(AbstractConstraint):void (9 bytes)   inline method (bytecode parsing)
                            @ 29  deltablue.Variable.addConstraint(AbstractConstraint):void (9 bytes)   inline method (bytecode parsing)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                    @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000131, probability=7.852198, bonus=1.000000, nodes=41 > 0.039331)
                                  @ 5  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=59900.769264, bonus=1.000000, nodes=35 <= 300.000000)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                    @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000131, probability=7.852198, bonus=1.000000, nodes=41 > 0.039331)
                                  @ 5  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000131, probability=59900.769264, bonus=1.000000, nodes=35 <= 300.000000)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                    @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000131, probability=7.852198, bonus=1.000000, nodes=41 > 0.039331)
                                  @ 5  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000131, probability=59900.769264, bonus=1.000000, nodes=35 <= 300.000000)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                    @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000131, probability=7.852198, bonus=1.000000, nodes=41 > 0.039331)
                                  @ 5  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000131, probability=59900.769264, bonus=1.000000, nodes=35 <= 300.000000)
                                @ 1  deltablue.ScaleConstraint.addToGraph():void (38 bytes)   relevance-based (relevance=1.000000, probability=59900.769264, bonus=1.000000, nodes=164 <= 300.000000)
                                  @ 1  deltablue.Planner.newMark():int (15 bytes)   relevance-based (relevance=1.000000, probability=59900.769264, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f45e0031810.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 8  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 697, relevance=1.000000, probability=59900.769264, bonus=1.000000, nodes=72)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f45e0031810.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 19  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 697, relevance=1.000000, probability=75550.092516, bonus=1.000000, nodes=72)
                                @ 6  deltablue.Planner.incrementalAdd(AbstractConstraint):void (27 bytes)   relevance-based (relevance=1.000131, probability=59900.769264, bonus=1.000000, nodes=28 <= 300.000000)
                              @ 94  deltablue.ScaleConstraint.<init>(Variable, Variable, Variable, Variable, Strength$Sym, Planner):void (28 bytes)   relevance-based (relevance=1.000131, probability=59900.769264, bonus=1.000000, nodes=237 <= 300.000000)
                            @ 9  deltablue.EditConstraint.<init>(Variable, Strength$Sym, Planner):void (8 bytes)   inline method (bytecode parsing)
                              @ 4  deltablue.UnaryConstraint.<init>(Variable, Strength$Sym, Planner):void (16 bytes)   inline method (bytecode parsing)
                                @ 2  deltablue.AbstractConstraint.<init>(Strength$Sym):void (13 bytes)   inline method (bytecode parsing)
                                  @ 6  deltablue.Strength.of(Strength$Sym):Strength (11 bytes)   inline method (bytecode parsing)
                                @ 12  deltablue.AbstractConstraint.addConstraint(Planner):void (10 bytes)   inline method (bytecode parsing)
                            @ 39  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 44  deltablue.Plan.execute():void (10 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object):Object (8 bytes)   inline method (bytecode parsing)
                                @ 4  java.lang.invoke.LambdaForm$MH/0x00007f45e0000800.invoke(Object):Object (8 bytes)   inline method (bytecode parsing)
                 n          @ 43  java.lang.Object.hashCode():int (0 bytes)   not inlining no methods remaining after filtering less frequent methods (7 methods previously)
                                    @ 7  deltablue.Strength$Sym.customHash():int (5 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                                  @ 1  som.Dictionary.hash(Dictionary$CustomHash):int (20 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                            @ 6  som.Dictionary.getBucketIdx(int):int (10 bytes)   inline method (bytecode parsing)
                                  @ 7  som.Dictionary.getBucket(int):Dictionary$Entry (11 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                                  @ 18  som.IdentityDictionary$IdEntry.match(int, Object):boolean (22 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                @ 4  som.Dictionary.at(Dictionary$CustomHash):Object (39 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=28 <= 300.000000)
                            @ 5  deltablue.Variable.addConstraint(AbstractConstraint):void (9 bytes)   inline method (bytecode parsing)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                    @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000131, probability=0.000131, bonus=1.000000, nodes=41 > 0.039331)
                                  @ 5  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=35 <= 300.000000)
                                @ 1  deltablue.UnaryConstraint.addToGraph():void (14 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=47 <= 300.000000)
                                  @ 1  deltablue.Planner.newMark():int (15 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f45e0031810.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 8  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 697, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=72)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f45e0031810.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 19  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 697, relevance=1.000000, probability=1.261254, bonus=1.000000, nodes=72)
                                @ 6  deltablue.Planner.incrementalAdd(AbstractConstraint):void (27 bytes)   relevance-based (relevance=1.000131, probability=1.000000, bonus=1.000000, nodes=28 <= 300.000000)
                            @ 5  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                    @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000131, probability=0.000131, bonus=1.000000, nodes=41 > 0.039331)
                                  @ 11  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=35 <= 300.000000)
                                @ 14  som.Vector.with(Object):Vector (16 bytes)   relevance-based (relevance=1.000131, probability=1.000000, bonus=1.000000, nodes=40 <= 300.000000)
                            @ 4  som.Vector.<init>():void (7 bytes)   inline method (bytecode parsing)
                              @ 3  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 10  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.Planner$$Lambda/0x00007f45e0081878.<init>(Vector):void (10 bytes)   inline method (bytecode parsing)
                                      @ 1  deltablue.AbstractConstraint.isInput():boolean (2 bytes)   not inlining no type profile exists
                                      @ 8  deltablue.AbstractConstraint.isSatisfied():boolean (0 bytes)   not inlining no type profile exists
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                          @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000131, probability=0.000322, bonus=1.000000, nodes=41 > 0.039331)
                                        @ 16  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=2.459487, bonus=1.000000, nodes=35 <= 300.000000)
                                      @ 8  deltablue.Planner.lambda$extractPlanFromConstraints$1(Vector, AbstractConstraint):void (20 bytes)   relevance-based (relevance=1.000000, probability=9.837947, bonus=1.000000, nodes=59 <= 300.000000)
                                    @ 20  deltablue.Planner$$Lambda/0x00007f45e0081878.apply(Object):void (12 bytes)   relevance-based (relevance=1.000000, probability=9.837947, bonus=1.000000, nodes=64 <= 300.000000)
                                  @ 15  som.Vector.forEach(ForEachInterface):void (32 bytes)   not inlining callee invoke probability is too high (invokeP=14.757243, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=77)
                            @ 9  deltablue.Plan.<init>():void (7 bytes)   inline method (bytecode parsing)
                              @ 3  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 39  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 67  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                                  @ 20  deltablue.Planner.makePlan(Vector):Plan (86 bytes)   not inlining too large previous low-level graph (low-level-nodes: 819, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=69)
                                @ 22  deltablue.Planner.extractPlanFromConstraints(Vector):Plan (24 bytes)   relevance-based (relevance=1.000131, probability=1.000000, bonus=1.000000, nodes=27 <= 300.000000)
                                  @ 1  deltablue.UnaryConstraint.isSatisfied():boolean (5 bytes)   trivial (relevance=2.000000, probability=1.000000, bonus=1.000000, nodes=5)
                            @ 21  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.Planner$$Lambda/0x00007f45e0083d70.<init>(Planner):void (10 bytes)   inline method (bytecode parsing)
                                    @ 1  deltablue.UnaryConstraint.getOutput():Variable (5 bytes)   trivial (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=5)
                                    @ 6  deltablue.UnaryConstraint.markUnsatisfied():void (6 bytes)   trivial (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=7)
                            @ 1  som.Vector.capacity():int (6 bytes)   inline method (bytecode parsing)
                            @ 31  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object, Object, Object, Object):Object (13 bytes)   inline method (bytecode parsing)
                              @ 9  java.lang.invoke.LambdaForm$DMH/0x00007f45e0123400.newInvokeSpecial(Object, Object, Object, Object, Object):Object (30 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 7  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                          @ 24  som.Vector$$Lambda/0x00007f45e0082e10.<init>(Object, boolean[], Object[], int[]):void (26 bytes)   relevance-based (relevance=1.000000, probability=0.250000, bonus=1.000000, nodes=17 <= 300.000000)
                                              @ 17  som.Vector.lambda$remove$0(Object, boolean[], Object[], int[], Object):void (28 bytes)   relevance-based (relevance=1.000000, probability=2.459487, bonus=1.000000, nodes=18 <= 300.000000)
                                            @ 20  som.Vector$$Lambda/0x00007f45e0082e10.apply(Object):void (21 bytes)   relevance-based (relevance=1.000000, probability=2.459487, bonus=1.000000, nodes=19 <= 300.000000)
                                          @ 36  som.Vector.forEach(ForEachInterface):void (32 bytes)   relevance-based (relevance=1.000000, probability=0.250000, bonus=1.000000, nodes=35 <= 300.000000)
                                        @ 5  som.Vector.remove(Object):boolean (61 bytes)   relevance-based (relevance=2.000000, probability=0.250000, bonus=1.000000, nodes=67 <= 300.000000)
                                      @ 12  deltablue.Variable.removeConstraint(AbstractConstraint):void (23 bytes)   relevance-based (relevance=1.000000, probability=0.250000, bonus=1.000000, nodes=84 <= 300.000000)
                                    @ 10  deltablue.UnaryConstraint.removeFromGraph():void (21 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=94 <= 300.000000)
                            @ 4  som.Vector.<init>():void (7 bytes)   inline method (bytecode parsing)
                              @ 3  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 10  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 14  deltablue.Strength.absoluteWeakest():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 17  deltablue.Variable.setWalkStrength(Strength):void (6 bytes)   inline method (bytecode parsing)
                            @ 22  deltablue.Variable.setStay(boolean):void (6 bytes)   inline method (bytecode parsing)
                            @ 48  deltablue.Variable.getConstraints():Vector (5 bytes)   inline accessor method (bytecode parsing)
                            @ 52  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.Planner$$Lambda/0x00007f45e0083030.<init>(Vector):void (10 bytes)   inline method (bytecode parsing)
                            @ 64  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.Planner$$Lambda/0x00007f45e0083250.<init>(Vector):void (10 bytes)   inline method (bytecode parsing)
                            @ 76  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object):Object (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.lang.invoke.LambdaForm$MH/0x00007f45e0000800.invoke(Object):Object (8 bytes)   inline method (bytecode parsing)
                                    @ 15  deltablue.Planner.removePropagateFrom(Variable):Vector (86 bytes)   not inlining too large previous low-level graph (low-level-nodes: 939, relevance=2.000000, probability=0.500000, bonus=1.000000, nodes=81)
                            @ 8  deltablue.Planner.lambda$incrementalRemove$0(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                                          @ 1  deltablue.Planner.newMark():int (15 bytes)   relevance-based (relevance=1.000000, probability=4.918974, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f45e0031810.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 8  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 697, relevance=1.000000, probability=4.918974, bonus=1.000000, nodes=72)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f45e0031810.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 19  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 697, relevance=1.000000, probability=6.204076, bonus=1.000000, nodes=72)
                                        @ 2  deltablue.Planner.incrementalAdd(AbstractConstraint):void (27 bytes)   relevance-based (relevance=1.000000, probability=4.918974, bonus=1.000000, nodes=28 <= 300.000000)
                                      @ 20  deltablue.Planner$$Lambda/0x00007f45e0083d70.apply(Object):void (12 bytes)   relevance-based (relevance=1.000000, probability=4.918974, bonus=1.000000, nodes=37 <= 300.000000)
                                    @ 26  som.Vector.forEach(ForEachInterface):void (32 bytes)   not inlining callee invoke probability is too high (invokeP=22.246098, relevance=2.000000, probability=0.500000, bonus=1.000000, nodes=53)
                                  @ 9  deltablue.Planner.incrementalRemove(AbstractConstraint):void (30 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=115 <= 300.000000)
                            @ 1  som.Vector.capacity():int (6 bytes)   inline method (bytecode parsing)
                            @ 31  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object, Object, Object, Object):Object (13 bytes)   inline method (bytecode parsing)
                              @ 9  java.lang.invoke.LambdaForm$DMH/0x00007f45e0123400.newInvokeSpecial(Object, Object, Object, Object, Object):Object (30 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 7  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                        @ 24  som.Vector$$Lambda/0x00007f45e0082e10.<init>(Object, boolean[], Object[], int[]):void (26 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=17 <= 300.000000)
                                            @ 17  som.Vector.lambda$remove$0(Object, boolean[], Object[], int[], Object):void (28 bytes)   relevance-based (relevance=1.000000, probability=4.918974, bonus=1.000000, nodes=18 <= 300.000000)
                                          @ 20  som.Vector$$Lambda/0x00007f45e0082e10.apply(Object):void (21 bytes)   relevance-based (relevance=1.000000, probability=4.918974, bonus=1.000000, nodes=19 <= 300.000000)
                                        @ 36  som.Vector.forEach(ForEachInterface):void (32 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=35 <= 300.000000)
                                      @ 5  som.Vector.remove(Object):boolean (61 bytes)   relevance-based (relevance=2.000000, probability=0.500000, bonus=1.000000, nodes=67 <= 300.000000)
                                    @ 12  deltablue.Variable.removeConstraint(AbstractConstraint):void (23 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=84 <= 300.000000)
                                  @ 13  deltablue.UnaryConstraint.removeFromGraph():void (21 bytes)   relevance-based (relevance=4.000000, probability=1.000000, bonus=1.000000, nodes=94 <= 300.000000)
                            @ 13  java.lang.StringBuilder.length():int (5 bytes)   inline method (bytecode parsing)
                                @ 55  deltablue.AbstractConstraint.destroyConstraint(Planner):void (17 bytes)   relevance-based (relevance=1.000131, probability=1.000000, bonus=1.000000, nodes=212 <= 300.000000)
                              @ 1  java.lang.AbstractStringBuilder.length():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 101  java.util.Formatter$Flags.contains(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 261  java.lang.StringBuilder.append(char):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 291  java.lang.StringBuilder.append(char):StringBuilder (8 bytes)   inline method (bytecode parsing)
                              @ 109  deltablue.Planner.change(Variable, int):void (59 bytes)   not inlining relevance-based (relevance=1.000148, probability=1.000000, bonus=1.000000, nodes=403 > 300.000000)
                            @ 337  java.lang.StringBuilder.length():int (5 bytes)   inline method (bytecode parsing)
                            @ 9  deltablue.EditConstraint.<init>(Variable, Strength$Sym, Planner):void (8 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.AbstractStringBuilder.length():int (5 bytes)   inline accessor method (bytecode parsing)
                              @ 4  deltablue.UnaryConstraint.<init>(Variable, Strength$Sym, Planner):void (16 bytes)   inline method (bytecode parsing)
                                @ 2  deltablue.AbstractConstraint.<init>(Strength$Sym):void (13 bytes)   inline method (bytecode parsing)
                                  @ 6  deltablue.Strength.of(Strength$Sym):Strength (11 bytes)   inline method (bytecode parsing)
                                @ 12  deltablue.AbstractConstraint.addConstraint(Planner):void (10 bytes)   inline method (bytecode parsing)
                            @ 39  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 44  deltablue.Plan.execute():void (10 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object):Object (8 bytes)   inline method (bytecode parsing)
                                @ 4  java.lang.invoke.LambdaForm$MH/0x00007f45e0000800.invoke(Object):Object (8 bytes)   inline method (bytecode parsing)
                                    @ 7  deltablue.Strength$Sym.customHash():int (5 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                                  @ 1  som.Dictionary.hash(Dictionary$CustomHash):int (20 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                            @ 6  som.Dictionary.getBucketIdx(int):int (10 bytes)   inline method (bytecode parsing)
                                  @ 7  som.Dictionary.getBucket(int):Dictionary$Entry (11 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                                  @ 18  som.IdentityDictionary$IdEntry.match(int, Object):boolean (22 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                @ 4  som.Dictionary.at(Dictionary$CustomHash):Object (39 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=28 <= 300.000000)
                            @ 5  deltablue.Variable.addConstraint(AbstractConstraint):void (9 bytes)   inline method (bytecode parsing)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                    @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000131, probability=0.000131, bonus=1.000000, nodes=41 > 0.039331)
                                  @ 5  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=35 <= 300.000000)
                                @ 1  deltablue.UnaryConstraint.addToGraph():void (14 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=47 <= 300.000000)
                                  @ 1  deltablue.Planner.newMark():int (15 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f45e0031810.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 8  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 697, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=72)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f45e0031810.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                            @ 13  java.text.DecimalFormatSymbols.getZeroDigit():char (5 bytes)   inline accessor method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 19  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 697, relevance=1.000000, probability=1.261254, bonus=1.000000, nodes=72)
                            @ 9  java.text.DecimalFormatSymbols.getLocale():Locale (5 bytes)   inline accessor method (bytecode parsing)
                                @ 6  deltablue.Planner.incrementalAdd(AbstractConstraint):void (27 bytes)   relevance-based (relevance=1.000131, probability=1.000000, bonus=1.000000, nodes=28 <= 300.000000)
                                  @ 13  java.util.Locale.equals(Object):boolean (75 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=8)
                            @ 5  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                                @ 10  java.util.Formatter.getDecimalFormatSymbols(Locale):DecimalFormatSymbols (32 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=15 <= 300.000000)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                              @ 20  java.util.Formatter.getZero(Locale):char (17 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=20 <= 300.000000)
                            @ 1  java.lang.AbstractStringBuilder.length():int (5 bytes)   inline accessor method (bytecode parsing)
                                    @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000131, probability=0.000131, bonus=1.000000, nodes=41 > 0.039331)
                                  @ 11  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=35 <= 300.000000)
                                @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.797318, bonus=1.000000, nodes=5)
                              @ 35  java.lang.String.length():int (11 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                @ 14  som.Vector.with(Object):Vector (16 bytes)   relevance-based (relevance=1.000131, probability=1.000000, bonus=1.000000, nodes=40 <= 300.000000)
                            @ 4  som.Vector.<init>():void (7 bytes)   inline method (bytecode parsing)
                              @ 3  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 10  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                            @ 5  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.Planner$$Lambda/0x00007f45e0081878.<init>(Vector):void (10 bytes)   inline method (bytecode parsing)
                                  @ 9  java.lang.AbstractStringBuilder.isLatin1():boolean (19 bytes)   trivial (relevance=0.368148, probability=0.516726, bonus=1.000000, nodes=9)
                                @ 2  java.lang.AbstractStringBuilder.charAt(int):char (36 bytes)   relevance-based (relevance=0.368148, probability=0.516726, bonus=1.000000, nodes=19 <= 110.444490)
                                @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=1.555697, bonus=1.000000, nodes=9)
                                      @ 1  deltablue.AbstractConstraint.isInput():boolean (2 bytes)   not inlining no type profile exists
                            @ 3  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                                      @ 8  deltablue.AbstractConstraint.isSatisfied():boolean (0 bytes)   not inlining no type profile exists
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                @ 12  java.lang.StringLatin1.charAt(byte[], int):char (15 bytes)   relevance-based (relevance=1.000000, probability=1.555697, bonus=1.000000, nodes=11 <= 300.000000)
                              @ 60  java.lang.String.charAt(int):char (25 bytes)   relevance-based (relevance=1.108377, probability=2.072423, bonus=1.000000, nodes=35 <= 300.000000)
                            @ 13  java.text.DecimalFormatSymbols.getDecimalSeparator():char (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000131, probability=0.000322, bonus=1.000000, nodes=41 > 0.039331)
                                        @ 16  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=2.459487, bonus=1.000000, nodes=35 <= 300.000000)
                            @ 9  java.text.DecimalFormatSymbols.getLocale():Locale (5 bytes)   inline accessor method (bytecode parsing)
                                      @ 8  deltablue.Planner.lambda$extractPlanFromConstraints$1(Vector, AbstractConstraint):void (20 bytes)   relevance-based (relevance=1.000000, probability=9.837947, bonus=1.000000, nodes=59 <= 300.000000)
                                  @ 13  java.util.Locale.equals(Object):boolean (75 bytes)   trivial (relevance=0.254199, probability=0.202677, bonus=1.000000, nodes=8)
                                @ 10  java.util.Formatter.getDecimalFormatSymbols(Locale):DecimalFormatSymbols (32 bytes)   relevance-based (relevance=0.254199, probability=0.202677, bonus=1.000000, nodes=15 <= 76.259640)
                                    @ 20  deltablue.Planner$$Lambda/0x00007f45e0081878.apply(Object):void (12 bytes)   relevance-based (relevance=1.000000, probability=9.837947, bonus=1.000000, nodes=64 <= 300.000000)
                              @ 92  java.util.Formatter.getDecimalSeparator(Locale):char (17 bytes)   relevance-based (relevance=0.254199, probability=0.202677, bonus=1.000000, nodes=20 <= 76.259640)
                                  @ 15  som.Vector.forEach(ForEachInterface):void (32 bytes)   not inlining callee invoke probability is too high (invokeP=14.757243, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=77)
                            @ 9  deltablue.Plan.<init>():void (7 bytes)   inline method (bytecode parsing)
                              @ 3  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 5  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                            @ 39  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 67  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                                  @ 9  java.lang.AbstractStringBuilder.isLatin1():boolean (19 bytes)   trivial (relevance=0.983142, probability=1.529634, bonus=1.000000, nodes=9)
                                @ 2  java.lang.AbstractStringBuilder.charAt(int):char (36 bytes)   relevance-based (relevance=0.983142, probability=1.529634, bonus=1.000000, nodes=19 <= 294.942504)
                                  @ 20  deltablue.Planner.makePlan(Vector):Plan (86 bytes)   not inlining too large previous low-level graph (low-level-nodes: 819, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=69)
                                @ 22  deltablue.Planner.extractPlanFromConstraints(Vector):Plan (24 bytes)   relevance-based (relevance=1.000131, probability=1.000000, bonus=1.000000, nodes=27 <= 300.000000)
                                @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=1.555863, bonus=1.000000, nodes=9)
                            @ 3  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                                  @ 1  deltablue.UnaryConstraint.isSatisfied():boolean (5 bytes)   trivial (relevance=2.000000, probability=1.000000, bonus=1.000000, nodes=5)
                                @ 12  java.lang.StringLatin1.charAt(byte[], int):char (15 bytes)   relevance-based (relevance=1.000000, probability=1.555863, bonus=1.000000, nodes=11 <= 300.000000)
                              @ 274  java.lang.String.charAt(int):char (25 bytes)   relevance-based (relevance=1.000000, probability=3.085497, bonus=1.000000, nodes=35 <= 300.000000)
                            @ 21  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.Planner$$Lambda/0x00007f45e0083d70.<init>(Planner):void (10 bytes)   inline method (bytecode parsing)
                                    @ 1  deltablue.UnaryConstraint.getOutput():Variable (5 bytes)   trivial (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=5)
                                    @ 6  deltablue.UnaryConstraint.markUnsatisfied():void (6 bytes)   trivial (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=7)
                            @ 1  som.Vector.capacity():int (6 bytes)   inline method (bytecode parsing)
                                      @ 3  java.lang.Math.max(int, int):int (11 bytes)   trivial (relevance=0.137290, probability=0.372471, bonus=1.000000, nodes=7)
                            @ 31  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object, Object, Object, Object):Object (13 bytes)   inline method (bytecode parsing)
                                    @ 29  jdk.internal.util.ArraysSupport.newLength(int, int, int):int (27 bytes)   relevance-based (relevance=0.137290, probability=0.372471, bonus=1.000000, nodes=15 <= 41.187022)
                              @ 9  java.lang.invoke.LambdaForm$DMH/0x00007f45e0123400.newInvokeSpecial(Object, Object, Object, Object, Object):Object (30 bytes)   inline method (bytecode parsing)
                                  @ 24  java.lang.AbstractStringBuilder.newCapacity(int):int (59 bytes)   relevance-based (relevance=0.137290, probability=0.372471, bonus=1.000000, nodes=27 <= 41.187022)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 7  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                          @ 24  som.Vector$$Lambda/0x00007f45e0082e10.<init>(Object, boolean[], Object[], int[]):void (26 bytes)   relevance-based (relevance=1.000000, probability=0.250000, bonus=1.000000, nodes=17 <= 300.000000)
                                    @ 25  java.lang.Math.min(int, int):int (11 bytes)   trivial (relevance=0.137291, probability=0.372468, bonus=1.000000, nodes=7)
                                  @ 32  java.util.Arrays.copyOf(byte[], int):byte[] (33 bytes)   relevance-based (relevance=0.137290, probability=0.372471, bonus=1.000000, nodes=28 <= 41.187022)
                                @ 7  java.lang.AbstractStringBuilder.ensureCapacityInternal(int):void (39 bytes)   relevance-based (relevance=1.000000, probability=3.085497, bonus=1.000000, nodes=72 <= 300.000000)
                                              @ 17  som.Vector.lambda$remove$0(Object, boolean[], Object[], int[], Object):void (28 bytes)   relevance-based (relevance=1.000000, probability=2.459487, bonus=1.000000, nodes=18 <= 300.000000)
                                @ 11  java.lang.AbstractStringBuilder.isLatin1():boolean (19 bytes)   trivial (relevance=1.137289, probability=3.085493, bonus=1.000000, nodes=9)
                                            @ 20  som.Vector$$Lambda/0x00007f45e0082e10.apply(Object):void (21 bytes)   relevance-based (relevance=1.000000, probability=2.459487, bonus=1.000000, nodes=19 <= 300.000000)
                                          @ 36  som.Vector.forEach(ForEachInterface):void (32 bytes)   relevance-based (relevance=1.000000, probability=0.250000, bonus=1.000000, nodes=35 <= 300.000000)
                                @ 18  java.lang.StringLatin1.canEncode(int):boolean (13 bytes)   trivial (relevance=1.137289, probability=3.085493, bonus=1.000000, nodes=8)
                              @ 2  java.lang.AbstractStringBuilder.append(char):AbstractStringBuilder (77 bytes)   relevance-based (relevance=1.983142, probability=3.085497, bonus=1.000000, nodes=90 <= 300.000000)
                                        @ 5  som.Vector.remove(Object):boolean (61 bytes)   relevance-based (relevance=2.000000, probability=0.250000, bonus=1.000000, nodes=67 <= 300.000000)
                                      @ 12  deltablue.Variable.removeConstraint(AbstractConstraint):void (23 bytes)   relevance-based (relevance=1.000000, probability=0.250000, bonus=1.000000, nodes=84 <= 300.000000)
                                    @ 10  deltablue.UnaryConstraint.removeFromGraph():void (21 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=94 <= 300.000000)
                                  @ 24  java.lang.AbstractStringBuilder.newCapacity(int):int (59 bytes)   not inlining relevance-based (relevance=0.017880, probability=0.024461, bonus=1.000000, nodes=21 > 5.364049)
                            @ 4  som.Vector.<init>():void (7 bytes)   inline method (bytecode parsing)
                              @ 3  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                                  @ 32  java.util.Arrays.copyOf(byte[], int):byte[] (33 bytes)   not inlining relevance-based (relevance=0.017880, probability=0.024461, bonus=1.000000, nodes=29 > 5.364049)
                            @ 10  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                                @ 7  java.lang.AbstractStringBuilder.ensureCapacityInternal(int):void (39 bytes)   relevance-based (relevance=0.130236, probability=0.202630, bonus=1.000000, nodes=29 <= 39.070914)
                            @ 14  deltablue.Strength.absoluteWeakest():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 17  deltablue.Variable.setWalkStrength(Strength):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  java.lang.AbstractStringBuilder.append(char):AbstractStringBuilder (77 bytes)   not inlining relevance-based (relevance=0.130236, probability=0.202630, bonus=1.000000, nodes=52 > 39.070914)
                            @ 22  deltablue.Variable.setStay(boolean):void (6 bytes)   inline method (bytecode parsing)
                            @ 48  deltablue.Variable.getConstraints():Vector (5 bytes)   inline accessor method (bytecode parsing)
                            @ 52  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.Planner$$Lambda/0x00007f45e0083030.<init>(Vector):void (10 bytes)   inline method (bytecode parsing)
                            @ 64  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.Planner$$Lambda/0x00007f45e0083250.<init>(Vector):void (10 bytes)   inline method (bytecode parsing)
                            @ 76  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object):Object (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.lang.invoke.LambdaForm$MH/0x00007f45e0000800.invoke(Object):Object (8 bytes)   inline method (bytecode parsing)
                                    @ 15  deltablue.Planner.removePropagateFrom(Variable):Vector (86 bytes)   not inlining too large previous low-level graph (low-level-nodes: 939, relevance=2.000000, probability=0.500000, bonus=1.000000, nodes=81)
                            @ 8  deltablue.Planner.lambda$incrementalRemove$0(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                                          @ 1  deltablue.Planner.newMark():int (15 bytes)   relevance-based (relevance=1.000000, probability=4.918974, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f45e0031810.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 8  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 697, relevance=1.000000, probability=4.918974, bonus=1.000000, nodes=72)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f45e0031810.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 19  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 697, relevance=1.000000, probability=6.204076, bonus=1.000000, nodes=72)
                                        @ 2  deltablue.Planner.incrementalAdd(AbstractConstraint):void (27 bytes)   relevance-based (relevance=1.000000, probability=4.918974, bonus=1.000000, nodes=28 <= 300.000000)
                                      @ 20  deltablue.Planner$$Lambda/0x00007f45e0083d70.apply(Object):void (12 bytes)   relevance-based (relevance=1.000000, probability=4.918974, bonus=1.000000, nodes=37 <= 300.000000)
                                    @ 26  som.Vector.forEach(ForEachInterface):void (32 bytes)   not inlining callee invoke probability is too high (invokeP=22.246098, relevance=2.000000, probability=0.500000, bonus=1.000000, nodes=53)
                                  @ 9  deltablue.Planner.incrementalRemove(AbstractConstraint):void (30 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=115 <= 300.000000)
                            @ 1  som.Vector.capacity():int (6 bytes)   inline method (bytecode parsing)
                            @ 31  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object, Object, Object, Object):Object (13 bytes)   inline method (bytecode parsing)
                              @ 9  java.lang.invoke.LambdaForm$DMH/0x00007f45e0123400.newInvokeSpecial(Object, Object, Object, Object, Object):Object (30 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 7  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                        @ 24  som.Vector$$Lambda/0x00007f45e0082e10.<init>(Object, boolean[], Object[], int[]):void (26 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=17 <= 300.000000)
                                            @ 17  som.Vector.lambda$remove$0(Object, boolean[], Object[], int[], Object):void (28 bytes)   relevance-based (relevance=1.000000, probability=4.918974, bonus=1.000000, nodes=18 <= 300.000000)
                                          @ 20  som.Vector$$Lambda/0x00007f45e0082e10.apply(Object):void (21 bytes)   relevance-based (relevance=1.000000, probability=4.918974, bonus=1.000000, nodes=19 <= 300.000000)
                                        @ 36  som.Vector.forEach(ForEachInterface):void (32 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=35 <= 300.000000)
                                      @ 5  som.Vector.remove(Object):boolean (61 bytes)   relevance-based (relevance=2.000000, probability=0.500000, bonus=1.000000, nodes=67 <= 300.000000)
                                    @ 12  deltablue.Variable.removeConstraint(AbstractConstraint):void (23 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=84 <= 300.000000)
                                  @ 13  deltablue.UnaryConstraint.removeFromGraph():void (21 bytes)   relevance-based (relevance=4.000000, probability=1.000000, bonus=1.000000, nodes=94 <= 300.000000)
                                @ 55  deltablue.AbstractConstraint.destroyConstraint(Planner):void (17 bytes)   relevance-based (relevance=1.000131, probability=1.000000, bonus=1.000000, nodes=212 <= 300.000000)
                              @ 139  deltablue.Planner.change(Variable, int):void (59 bytes)   not inlining relevance-based (relevance=1.000148, probability=1.000000, bonus=1.000000, nodes=403 > 300.000000)
                            @ 9  deltablue.EditConstraint.<init>(Variable, Strength$Sym, Planner):void (8 bytes)   inline method (bytecode parsing)
                              @ 4  deltablue.UnaryConstraint.<init>(Variable, Strength$Sym, Planner):void (16 bytes)   inline method (bytecode parsing)
                                @ 2  deltablue.AbstractConstraint.<init>(Strength$Sym):void (13 bytes)   inline method (bytecode parsing)
                                  @ 6  deltablue.Strength.of(Strength$Sym):Strength (11 bytes)   inline method (bytecode parsing)
                                @ 12  deltablue.AbstractConstraint.addConstraint(Planner):void (10 bytes)   inline method (bytecode parsing)
                            @ 39  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 44  deltablue.Plan.execute():void (10 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object):Object (8 bytes)   inline method (bytecode parsing)
                                @ 4  java.lang.invoke.LambdaForm$MH/0x00007f45e0000800.invoke(Object):Object (8 bytes)   inline method (bytecode parsing)
                                    @ 7  deltablue.Strength$Sym.customHash():int (5 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                                  @ 1  som.Dictionary.hash(Dictionary$CustomHash):int (20 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                            @ 6  som.Dictionary.getBucketIdx(int):int (10 bytes)   inline method (bytecode parsing)
                                  @ 7  som.Dictionary.getBucket(int):Dictionary$Entry (11 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                                  @ 18  som.IdentityDictionary$IdEntry.match(int, Object):boolean (22 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                @ 4  som.Dictionary.at(Dictionary$CustomHash):Object (39 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=28 <= 300.000000)
                            @ 5  deltablue.Variable.addConstraint(AbstractConstraint):void (9 bytes)   inline method (bytecode parsing)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                    @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000131, probability=0.000131, bonus=1.000000, nodes=41 > 0.039331)
                                  @ 5  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=35 <= 300.000000)
                                @ 1  deltablue.UnaryConstraint.addToGraph():void (14 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=47 <= 300.000000)
                                  @ 1  deltablue.Planner.newMark():int (15 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f45e0031810.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 8  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 697, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=72)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f45e0031810.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 19  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 697, relevance=1.000000, probability=1.261254, bonus=1.000000, nodes=72)
                                @ 6  deltablue.Planner.incrementalAdd(AbstractConstraint):void (27 bytes)   relevance-based (relevance=1.000131, probability=1.000000, bonus=1.000000, nodes=28 <= 300.000000)
                            @ 5  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                    @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000131, probability=0.000131, bonus=1.000000, nodes=41 > 0.039331)
                                  @ 11  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=35 <= 300.000000)
                                @ 14  som.Vector.with(Object):Vector (16 bytes)   relevance-based (relevance=1.000131, probability=1.000000, bonus=1.000000, nodes=40 <= 300.000000)
                            @ 4  som.Vector.<init>():void (7 bytes)   inline method (bytecode parsing)
                              @ 3  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 10  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.Planner$$Lambda/0x00007f45e0081878.<init>(Vector):void (10 bytes)   inline method (bytecode parsing)
                                      @ 1  deltablue.AbstractConstraint.isInput():boolean (2 bytes)   not inlining no type profile exists
                                      @ 8  deltablue.AbstractConstraint.isSatisfied():boolean (0 bytes)   not inlining no type profile exists
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                          @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000131, probability=0.000322, bonus=1.000000, nodes=41 > 0.039331)
                                        @ 16  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=2.459487, bonus=1.000000, nodes=35 <= 300.000000)
                                      @ 8  deltablue.Planner.lambda$extractPlanFromConstraints$1(Vector, AbstractConstraint):void (20 bytes)   relevance-based (relevance=1.000000, probability=9.837947, bonus=1.000000, nodes=59 <= 300.000000)
                                    @ 20  deltablue.Planner$$Lambda/0x00007f45e0081878.apply(Object):void (12 bytes)   relevance-based (relevance=1.000000, probability=9.837947, bonus=1.000000, nodes=64 <= 300.000000)
                                  @ 15  som.Vector.forEach(ForEachInterface):void (32 bytes)   not inlining callee invoke probability is too high (invokeP=14.757243, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=77)
                            @ 9  deltablue.Plan.<init>():void (7 bytes)   inline method (bytecode parsing)
                              @ 3  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 39  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 67  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                                  @ 20  deltablue.Planner.makePlan(Vector):Plan (86 bytes)   not inlining too large previous low-level graph (low-level-nodes: 819, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=69)
                                @ 22  deltablue.Planner.extractPlanFromConstraints(Vector):Plan (24 bytes)   relevance-based (relevance=1.000131, probability=1.000000, bonus=1.000000, nodes=27 <= 300.000000)
                                  @ 1  deltablue.UnaryConstraint.isSatisfied():boolean (5 bytes)   trivial (relevance=2.000000, probability=1.000000, bonus=1.000000, nodes=5)
                            @ 21  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.Planner$$Lambda/0x00007f45e0083d70.<init>(Planner):void (10 bytes)   inline method (bytecode parsing)
                                    @ 1  deltablue.UnaryConstraint.getOutput():Variable (5 bytes)   trivial (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=5)
                                    @ 6  deltablue.UnaryConstraint.markUnsatisfied():void (6 bytes)   trivial (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=7)
                            @ 1  som.Vector.capacity():int (6 bytes)   inline method (bytecode parsing)
                            @ 31  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object, Object, Object, Object):Object (13 bytes)   inline method (bytecode parsing)
                              @ 9  java.lang.invoke.LambdaForm$DMH/0x00007f45e0123400.newInvokeSpecial(Object, Object, Object, Object, Object):Object (30 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 7  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                          @ 24  som.Vector$$Lambda/0x00007f45e0082e10.<init>(Object, boolean[], Object[], int[]):void (26 bytes)   relevance-based (relevance=1.000000, probability=0.250000, bonus=1.000000, nodes=17 <= 300.000000)
                                              @ 17  som.Vector.lambda$remove$0(Object, boolean[], Object[], int[], Object):void (28 bytes)   relevance-based (relevance=1.000000, probability=2.459487, bonus=1.000000, nodes=18 <= 300.000000)
                                            @ 20  som.Vector$$Lambda/0x00007f45e0082e10.apply(Object):void (21 bytes)   relevance-based (relevance=1.000000, probability=2.459487, bonus=1.000000, nodes=19 <= 300.000000)
                                          @ 36  som.Vector.forEach(ForEachInterface):void (32 bytes)   relevance-based (relevance=1.000000, probability=0.250000, bonus=1.000000, nodes=35 <= 300.000000)
                                        @ 5  som.Vector.remove(Object):boolean (61 bytes)   relevance-based (relevance=2.000000, probability=0.250000, bonus=1.000000, nodes=67 <= 300.000000)
                                      @ 12  deltablue.Variable.removeConstraint(AbstractConstraint):void (23 bytes)   relevance-based (relevance=1.000000, probability=0.250000, bonus=1.000000, nodes=84 <= 300.000000)
                                    @ 10  deltablue.UnaryConstraint.removeFromGraph():void (21 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=94 <= 300.000000)
                            @ 4  som.Vector.<init>():void (7 bytes)   inline method (bytecode parsing)
                              @ 3  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 10  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 14  deltablue.Strength.absoluteWeakest():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 17  deltablue.Variable.setWalkStrength(Strength):void (6 bytes)   inline method (bytecode parsing)
                            @ 22  deltablue.Variable.setStay(boolean):void (6 bytes)   inline method (bytecode parsing)
                            @ 48  deltablue.Variable.getConstraints():Vector (5 bytes)   inline accessor method (bytecode parsing)
                            @ 52  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.Planner$$Lambda/0x00007f45e0083030.<init>(Vector):void (10 bytes)   inline method (bytecode parsing)
                            @ 64  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.Planner$$Lambda/0x00007f45e0083250.<init>(Vector):void (10 bytes)   inline method (bytecode parsing)
                            @ 76  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object):Object (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.lang.invoke.LambdaForm$MH/0x00007f45e0000800.invoke(Object):Object (8 bytes)   inline method (bytecode parsing)
                                    @ 15  deltablue.Planner.removePropagateFrom(Variable):Vector (86 bytes)   not inlining too large previous low-level graph (low-level-nodes: 939, relevance=2.000000, probability=0.500000, bonus=1.000000, nodes=81)
                            @ 8  deltablue.Planner.lambda$incrementalRemove$0(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                                          @ 1  deltablue.Planner.newMark():int (15 bytes)   relevance-based (relevance=1.000000, probability=4.918974, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f45e0031810.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 8  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 697, relevance=1.000000, probability=4.918974, bonus=1.000000, nodes=72)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f45e0031810.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 19  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 697, relevance=1.000000, probability=6.204076, bonus=1.000000, nodes=72)
                                        @ 2  deltablue.Planner.incrementalAdd(AbstractConstraint):void (27 bytes)   relevance-based (relevance=1.000000, probability=4.918974, bonus=1.000000, nodes=28 <= 300.000000)
                                      @ 20  deltablue.Planner$$Lambda/0x00007f45e0083d70.apply(Object):void (12 bytes)   relevance-based (relevance=1.000000, probability=4.918974, bonus=1.000000, nodes=37 <= 300.000000)
                                    @ 26  som.Vector.forEach(ForEachInterface):void (32 bytes)   not inlining callee invoke probability is too high (invokeP=22.246098, relevance=2.000000, probability=0.500000, bonus=1.000000, nodes=53)
                                  @ 9  deltablue.Planner.incrementalRemove(AbstractConstraint):void (30 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=115 <= 300.000000)
                            @ 1  som.Vector.capacity():int (6 bytes)   inline method (bytecode parsing)
                            @ 31  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object, Object, Object, Object):Object (13 bytes)   inline method (bytecode parsing)
                              @ 9  java.lang.invoke.LambdaForm$DMH/0x00007f45e0123400.newInvokeSpecial(Object, Object, Object, Object, Object):Object (30 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 7  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                        @ 24  som.Vector$$Lambda/0x00007f45e0082e10.<init>(Object, boolean[], Object[], int[]):void (26 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=17 <= 300.000000)
                                            @ 17  som.Vector.lambda$remove$0(Object, boolean[], Object[], int[], Object):void (28 bytes)   relevance-based (relevance=1.000000, probability=4.918974, bonus=1.000000, nodes=18 <= 300.000000)
                                          @ 20  som.Vector$$Lambda/0x00007f45e0082e10.apply(Object):void (21 bytes)   relevance-based (relevance=1.000000, probability=4.918974, bonus=1.000000, nodes=19 <= 300.000000)
                                        @ 36  som.Vector.forEach(ForEachInterface):void (32 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=35 <= 300.000000)
                                      @ 5  som.Vector.remove(Object):boolean (61 bytes)   relevance-based (relevance=2.000000, probability=0.500000, bonus=1.000000, nodes=67 <= 300.000000)
                                    @ 12  deltablue.Variable.removeConstraint(AbstractConstraint):void (23 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=84 <= 300.000000)
                                  @ 13  deltablue.UnaryConstraint.removeFromGraph():void (21 bytes)   relevance-based (relevance=4.000000, probability=1.000000, bonus=1.000000, nodes=94 <= 300.000000)
                                @ 55  deltablue.AbstractConstraint.destroyConstraint(Planner):void (17 bytes)   relevance-based (relevance=1.000131, probability=1.000000, bonus=1.000000, nodes=212 <= 300.000000)
                              @ 164  deltablue.Planner.change(Variable, int):void (59 bytes)   not inlining relevance-based (relevance=1.000148, probability=1.000000, bonus=1.000000, nodes=400 > 300.000000)
                            @ 9  deltablue.EditConstraint.<init>(Variable, Strength$Sym, Planner):void (8 bytes)   inline method (bytecode parsing)
                              @ 4  deltablue.UnaryConstraint.<init>(Variable, Strength$Sym, Planner):void (16 bytes)   inline method (bytecode parsing)
                                @ 2  deltablue.AbstractConstraint.<init>(Strength$Sym):void (13 bytes)   inline method (bytecode parsing)
                                  @ 6  deltablue.Strength.of(Strength$Sym):Strength (11 bytes)   inline method (bytecode parsing)
                                @ 12  deltablue.AbstractConstraint.addConstraint(Planner):void (10 bytes)   inline method (bytecode parsing)
                            @ 39  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 44  deltablue.Plan.execute():void (10 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object):Object (8 bytes)   inline method (bytecode parsing)
                                @ 4  java.lang.invoke.LambdaForm$MH/0x00007f45e0000800.invoke(Object):Object (8 bytes)   inline method (bytecode parsing)
                                    @ 7  deltablue.Strength$Sym.customHash():int (5 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                                  @ 1  som.Dictionary.hash(Dictionary$CustomHash):int (20 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                            @ 6  som.Dictionary.getBucketIdx(int):int (10 bytes)   inline method (bytecode parsing)
                                  @ 7  som.Dictionary.getBucket(int):Dictionary$Entry (11 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                                  @ 18  som.IdentityDictionary$IdEntry.match(int, Object):boolean (22 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                @ 4  som.Dictionary.at(Dictionary$CustomHash):Object (39 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=28 <= 300.000000)
                            @ 5  deltablue.Variable.addConstraint(AbstractConstraint):void (9 bytes)   inline method (bytecode parsing)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                    @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000131, probability=0.000131, bonus=1.000000, nodes=41 > 0.039331)
                                  @ 5  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=35 <= 300.000000)
                                @ 1  deltablue.UnaryConstraint.addToGraph():void (14 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=47 <= 300.000000)
                                  @ 1  deltablue.Planner.newMark():int (15 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f45e0031810.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 8  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 697, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=72)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f45e0031810.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 19  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 697, relevance=1.000000, probability=1.261254, bonus=1.000000, nodes=72)
                                @ 6  deltablue.Planner.incrementalAdd(AbstractConstraint):void (27 bytes)   relevance-based (relevance=1.000131, probability=1.000000, bonus=1.000000, nodes=28 <= 300.000000)
                            @ 5  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                    @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000131, probability=0.000131, bonus=1.000000, nodes=41 > 0.039331)
                                  @ 11  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=35 <= 300.000000)
                                @ 14  som.Vector.with(Object):Vector (16 bytes)   relevance-based (relevance=1.000131, probability=1.000000, bonus=1.000000, nodes=40 <= 300.000000)
                            @ 4  som.Vector.<init>():void (7 bytes)   inline method (bytecode parsing)
                              @ 3  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 10  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.Planner$$Lambda/0x00007f45e0081878.<init>(Vector):void (10 bytes)   inline method (bytecode parsing)
                                      @ 1  deltablue.AbstractConstraint.isInput():boolean (2 bytes)   not inlining no type profile exists
                                      @ 8  deltablue.AbstractConstraint.isSatisfied():boolean (0 bytes)   not inlining no type profile exists
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                          @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000131, probability=0.000322, bonus=1.000000, nodes=41 > 0.039331)
                                        @ 16  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=2.459487, bonus=1.000000, nodes=35 <= 300.000000)
                                      @ 8  deltablue.Planner.lambda$extractPlanFromConstraints$1(Vector, AbstractConstraint):void (20 bytes)   relevance-based (relevance=1.000000, probability=9.837947, bonus=1.000000, nodes=59 <= 300.000000)
                                    @ 20  deltablue.Planner$$Lambda/0x00007f45e0081878.apply(Object):void (12 bytes)   relevance-based (relevance=1.000000, probability=9.837947, bonus=1.000000, nodes=64 <= 300.000000)
                                  @ 15  som.Vector.forEach(ForEachInterface):void (32 bytes)   not inlining callee invoke probability is too high (invokeP=14.757243, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=77)
                            @ 9  deltablue.Plan.<init>():void (7 bytes)   inline method (bytecode parsing)
                              @ 3  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 39  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 67  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                                  @ 20  deltablue.Planner.makePlan(Vector):Plan (86 bytes)   not inlining too large previous low-level graph (low-level-nodes: 819, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=69)
                                @ 22  deltablue.Planner.extractPlanFromConstraints(Vector):Plan (24 bytes)   relevance-based (relevance=1.000131, probability=1.000000, bonus=1.000000, nodes=27 <= 300.000000)
                                  @ 1  deltablue.UnaryConstraint.isSatisfied():boolean (5 bytes)   trivial (relevance=2.000000, probability=1.000000, bonus=1.000000, nodes=5)
                            @ 21  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.Planner$$Lambda/0x00007f45e0083d70.<init>(Planner):void (10 bytes)   inline method (bytecode parsing)
                                    @ 1  deltablue.UnaryConstraint.getOutput():Variable (5 bytes)   trivial (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=5)
                                    @ 6  deltablue.UnaryConstraint.markUnsatisfied():void (6 bytes)   trivial (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=7)
                            @ 1  som.Vector.capacity():int (6 bytes)   inline method (bytecode parsing)
                            @ 31  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object, Object, Object, Object):Object (13 bytes)   inline method (bytecode parsing)
                              @ 9  java.lang.invoke.LambdaForm$DMH/0x00007f45e0123400.newInvokeSpecial(Object, Object, Object, Object, Object):Object (30 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 7  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                          @ 24  som.Vector$$Lambda/0x00007f45e0082e10.<init>(Object, boolean[], Object[], int[]):void (26 bytes)   relevance-based (relevance=1.000000, probability=0.250000, bonus=1.000000, nodes=17 <= 300.000000)
                                              @ 17  som.Vector.lambda$remove$0(Object, boolean[], Object[], int[], Object):void (28 bytes)   relevance-based (relevance=1.000000, probability=2.459487, bonus=1.000000, nodes=18 <= 300.000000)
                                            @ 20  som.Vector$$Lambda/0x00007f45e0082e10.apply(Object):void (21 bytes)   relevance-based (relevance=1.000000, probability=2.459487, bonus=1.000000, nodes=19 <= 300.000000)
                                          @ 36  som.Vector.forEach(ForEachInterface):void (32 bytes)   relevance-based (relevance=1.000000, probability=0.250000, bonus=1.000000, nodes=35 <= 300.000000)
                                        @ 5  som.Vector.remove(Object):boolean (61 bytes)   relevance-based (relevance=2.000000, probability=0.250000, bonus=1.000000, nodes=67 <= 300.000000)
                                      @ 12  deltablue.Variable.removeConstraint(AbstractConstraint):void (23 bytes)   relevance-based (relevance=1.000000, probability=0.250000, bonus=1.000000, nodes=84 <= 300.000000)
                                    @ 10  deltablue.UnaryConstraint.removeFromGraph():void (21 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=94 <= 300.000000)
                            @ 4  som.Vector.<init>():void (7 bytes)   inline method (bytecode parsing)
                              @ 3  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 10  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 14  deltablue.Strength.absoluteWeakest():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 17  deltablue.Variable.setWalkStrength(Strength):void (6 bytes)   inline method (bytecode parsing)
                            @ 22  deltablue.Variable.setStay(boolean):void (6 bytes)   inline method (bytecode parsing)
                            @ 48  deltablue.Variable.getConstraints():Vector (5 bytes)   inline accessor method (bytecode parsing)
                            @ 52  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.Planner$$Lambda/0x00007f45e0083030.<init>(Vector):void (10 bytes)   inline method (bytecode parsing)
                            @ 64  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.Planner$$Lambda/0x00007f45e0083250.<init>(Vector):void (10 bytes)   inline method (bytecode parsing)
                            @ 76  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object):Object (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.lang.invoke.LambdaForm$MH/0x00007f45e0000800.invoke(Object):Object (8 bytes)   inline method (bytecode parsing)
                                    @ 15  deltablue.Planner.removePropagateFrom(Variable):Vector (86 bytes)   not inlining too large previous low-level graph (low-level-nodes: 939, relevance=2.000000, probability=0.500000, bonus=1.000000, nodes=81)
                            @ 8  deltablue.Planner.lambda$incrementalRemove$0(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                                          @ 1  deltablue.Planner.newMark():int (15 bytes)   relevance-based (relevance=1.000000, probability=4.918974, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f45e0031810.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 8  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 697, relevance=1.000000, probability=4.918974, bonus=1.000000, nodes=72)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f45e0031810.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 19  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 697, relevance=1.000000, probability=6.204076, bonus=1.000000, nodes=72)
                                        @ 2  deltablue.Planner.incrementalAdd(AbstractConstraint):void (27 bytes)   relevance-based (relevance=1.000000, probability=4.918974, bonus=1.000000, nodes=28 <= 300.000000)
                                      @ 20  deltablue.Planner$$Lambda/0x00007f45e0083d70.apply(Object):void (12 bytes)   relevance-based (relevance=1.000000, probability=4.918974, bonus=1.000000, nodes=37 <= 300.000000)
                                    @ 26  som.Vector.forEach(ForEachInterface):void (32 bytes)   not inlining callee invoke probability is too high (invokeP=22.246098, relevance=2.000000, probability=0.500000, bonus=1.000000, nodes=53)
                                  @ 9  deltablue.Planner.incrementalRemove(AbstractConstraint):void (30 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=115 <= 300.000000)
                            @ 1  som.Vector.capacity():int (6 bytes)   inline method (bytecode parsing)
                            @ 31  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object, Object, Object, Object):Object (13 bytes)   inline method (bytecode parsing)
                              @ 9  java.lang.invoke.LambdaForm$DMH/0x00007f45e0123400.newInvokeSpecial(Object, Object, Object, Object, Object):Object (30 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 7  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                        @ 24  som.Vector$$Lambda/0x00007f45e0082e10.<init>(Object, boolean[], Object[], int[]):void (26 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=17 <= 300.000000)
                                            @ 17  som.Vector.lambda$remove$0(Object, boolean[], Object[], int[], Object):void (28 bytes)   relevance-based (relevance=1.000000, probability=4.918974, bonus=1.000000, nodes=18 <= 300.000000)
                                          @ 20  som.Vector$$Lambda/0x00007f45e0082e10.apply(Object):void (21 bytes)   relevance-based (relevance=1.000000, probability=4.918974, bonus=1.000000, nodes=19 <= 300.000000)
                                        @ 36  som.Vector.forEach(ForEachInterface):void (32 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=35 <= 300.000000)
                                      @ 5  som.Vector.remove(Object):boolean (61 bytes)   relevance-based (relevance=2.000000, probability=0.500000, bonus=1.000000, nodes=67 <= 300.000000)
                                    @ 12  deltablue.Variable.removeConstraint(AbstractConstraint):void (23 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=84 <= 300.000000)
                                  @ 13  deltablue.UnaryConstraint.removeFromGraph():void (21 bytes)   relevance-based (relevance=4.000000, probability=1.000000, bonus=1.000000, nodes=94 <= 300.000000)
                                @ 55  deltablue.AbstractConstraint.destroyConstraint(Planner):void (17 bytes)   relevance-based (relevance=1.000131, probability=1.000000, bonus=1.000000, nodes=212 <= 300.000000)
                              @ 225  deltablue.Planner.change(Variable, int):void (59 bytes)   not inlining relevance-based (relevance=1.000148, probability=1.000000, bonus=1.000000, nodes=400 > 300.000000)
                              @ 181  som.Vector.at(int):Object (18 bytes)   relevance-based (relevance=1.000000, probability=59999.000000, bonus=1.000000, nodes=10 <= 300.000000)
                              @ 242  som.Vector.at(int):Object (18 bytes)   relevance-based (relevance=1.000000, probability=59999.000000, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 158  java.util.regex.Matcher.start():int (9 bytes)   inline method (bytecode parsing)
                            @ 183  java.util.regex.Matcher.end():int (9 bytes)   inline method (bytecode parsing)
                            @ 1  java.util.AbstractList.<init>():void (10 bytes)   inline method (bytecode parsing)
                              @ 1  java.util.AbstractCollection.<init>():void (5 bytes)   inline method (bytecode parsing)
                              @ 4  java.util.ArrayList.<init>():void (12 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                                @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                              @ 11  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=8)
                                @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=3.556781, bonus=1.000000, nodes=9)
                                  @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=3.556781, bonus=1.000000, nodes=5)
                                @ 14  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000000, probability=3.556781, bonus=1.000000, nodes=8)
                            @ 11  java.lang.Math.max(int, int):int (11 bytes)   inline method (bytecode parsing)
                                  @ 1  java.lang.StringLatin1.canEncode(int):boolean (13 bytes)   trivial (relevance=1.000043, probability=3.556781, bonus=1.000000, nodes=5)
                                  @ 18  java.lang.Math.min(int, int):int (11 bytes)   trivial (relevance=1.000043, probability=3.556781, bonus=1.000000, nodes=7)
                                @ 17  java.lang.StringLatin1.indexOf(byte[], int, int, int):int (37 bytes)   relevance-based (relevance=1.000000, probability=3.556781, bonus=1.000000, nodes=21 <= 300.000000)
                              @ 27  java.lang.String.indexOf(int, int):int (37 bytes)   relevance-based (relevance=1.808282, probability=3.556781, bonus=1.000000, nodes=32 <= 300.000000)
                              @ 70  java.util.Formatter$FixedString.<init>(String, int, int):void (20 bytes)   relevance-based (relevance=0.553035, probability=1.966940, bonus=1.000000, nodes=14 <= 165.910477)
                            @ 49  java.lang.Math.max(int, int):int (11 bytes)   inline method (bytecode parsing)
                            @ 37  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                      @ 27  jdk.internal.util.ArraysSupport.newLength(int, int, int):int (27 bytes)   not inlining relevance-based (relevance=0.012438, probability=0.031951, bonus=1.000000, nodes=16 > 3.731498)
                                      @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.012438, probability=0.031951, bonus=1.000000, nodes=41 > 3.731498)
                                    @ 7  java.util.ArrayList.grow(int):Object[] (60 bytes)   relevance-based (relevance=0.156217, probability=0.433230, bonus=1.000000, nodes=46 <= 46.865036)
                                  @ 7  java.util.ArrayList.grow():Object[] (11 bytes)   not inlining relevance-based (relevance=0.156217, probability=0.433230, bonus=1.000000, nodes=52 > 46.865036)
                                @ 20  java.util.ArrayList.add(Object, Object[], int):void (23 bytes)   relevance-based (relevance=0.553035, probability=1.966940, bonus=1.000000, nodes=26 <= 165.910477)
                              @ 73  java.util.ArrayList.add(Object):boolean (25 bytes)   relevance-based (relevance=0.553035, probability=1.966940, bonus=1.000000, nodes=31 <= 165.910477)
                              @ 45  java.util.Formatter$FixedString.<init>(String, int, int):void (20 bytes)   relevance-based (relevance=0.616209, probability=0.616209, bonus=1.000000, nodes=14 <= 184.862697)
                            @ 49  java.lang.Math.max(int, int):int (11 bytes)   inline method (bytecode parsing)
                            @ 37  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                      @ 27  jdk.internal.util.ArraysSupport.newLength(int, int, int):int (27 bytes)   not inlining relevance-based (relevance=0.013859, probability=0.010010, bonus=1.000000, nodes=16 > 4.157753)
                                      @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.013859, probability=0.010010, bonus=1.000000, nodes=41 > 4.157753)
                                    @ 7  java.util.ArrayList.grow(int):Object[] (60 bytes)   relevance-based (relevance=0.174062, probability=0.135724, bonus=1.000000, nodes=46 <= 52.218504)
                                  @ 7  java.util.ArrayList.grow():Object[] (11 bytes)   relevance-based (relevance=0.174062, probability=0.135724, bonus=1.000000, nodes=52 <= 52.218504)
                                @ 20  java.util.ArrayList.add(Object, Object[], int):void (23 bytes)   relevance-based (relevance=0.616209, probability=0.616209, bonus=1.000000, nodes=67 <= 184.862697)
                              @ 48  java.util.ArrayList.add(Object):boolean (25 bytes)   relevance-based (relevance=0.616209, probability=0.616209, bonus=1.000000, nodes=72 <= 184.862697)
                                @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=0.826786, probability=2.940572, bonus=1.000000, nodes=9)
                            @ 3  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                                @ 12  java.lang.StringLatin1.charAt(byte[], int):char (15 bytes)   relevance-based (relevance=0.826786, probability=2.940572, bonus=1.000000, nodes=11 <= 248.035911)
                              @ 99  java.lang.String.charAt(int):char (25 bytes)   relevance-based (relevance=0.826786, probability=2.940572, bonus=1.000000, nodes=16 <= 248.035911)
                              @ 106  java.util.Formatter$Conversion.isValid(char):boolean (358 bytes)   relevance-based (relevance=0.826786, probability=2.940572, bonus=1.000000, nodes=14 <= 248.035911)
                            @ 35  java.lang.Character.isUpperCase(char):boolean (5 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.Character.isUpperCase(int):boolean (9 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.CharacterData.of(int):CharacterData (136 bytes)   trivial (relevance=1.012373, probability=2.940572, bonus=1.000000, nodes=5)
                                  @ 2  java.lang.CharacterDataLatin1.getPropertiesEx(int):int (11 bytes)   trivial (relevance=1.000000, probability=2.940572, bonus=1.000000, nodes=6)
                                @ 5  java.lang.CharacterDataLatin1.isUpperCase(int):boolean (16 bytes)   relevance-based (relevance=1.012373, probability=2.940572, bonus=1.000000, nodes=11 <= 300.000000)
                                @ 55  java.util.Formatter$Conversion.isText(char):boolean (34 bytes)   relevance-based (relevance=1.012373, probability=2.940572, bonus=1.000000, nodes=16 <= 300.000000)
                              @ 119  java.util.Formatter$FormatSpecifier.<init>(char):void (68 bytes)   relevance-based (relevance=0.826786, probability=2.940572, bonus=1.000000, nodes=36 <= 248.035911)
                            @ 49  java.lang.Math.max(int, int):int (11 bytes)   inline method (bytecode parsing)
                            @ 37  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                      @ 27  jdk.internal.util.ArraysSupport.newLength(int, int, int):int (27 bytes)   not inlining relevance-based (relevance=0.018595, probability=0.047766, bonus=1.000000, nodes=16 > 5.578584)
                                      @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.018595, probability=0.047766, bonus=1.000000, nodes=41 > 5.578584)
                                    @ 7  java.util.ArrayList.grow(int):Object[] (60 bytes)   relevance-based (relevance=0.233544, probability=0.647678, bonus=1.000000, nodes=46 <= 70.063158)
                                  @ 7  java.util.ArrayList.grow():Object[] (11 bytes)   relevance-based (relevance=0.233544, probability=0.647678, bonus=1.000000, nodes=52 <= 70.063158)
                                @ 20  java.util.ArrayList.add(Object, Object[], int):void (23 bytes)   relevance-based (relevance=0.826786, probability=2.940572, bonus=1.000000, nodes=67 <= 248.035911)
                              @ 122  java.util.ArrayList.add(Object):boolean (25 bytes)   relevance-based (relevance=0.826786, probability=2.940572, bonus=1.000000, nodes=72 <= 248.035911)
                              @ 141  java.util.regex.Pattern.matcher(CharSequence):Matcher (44 bytes)   not inlining relevance-based (relevance=0.000000, probability=0.000000, bonus=1.000000, nodes=15 > 0.000000)
                            @ 1  java.util.regex.Matcher.getTextLength():int (10 bytes)   inline method (bytecode parsing)
                              @ 150  java.util.regex.Matcher.find(int):boolean (35 bytes)   not inlining relevance-based (relevance=0.000000, probability=0.000000, bonus=1.000000, nodes=21 > 0.000000)
                              @ 1  java.util.regex.Matcher.checkMatch():void (19 bytes)   not inlining relevance-based (relevance=0.002627, probability=0.009342, bonus=1.000000, nodes=10 > 0.787995)
                            @ 33  java.util.regex.Matcher.start(int):int (18 bytes)   inline method (bytecode parsing)
                            @ 38  java.util.regex.Matcher.end(int):int (20 bytes)   inline method (bytecode parsing)
                            @ 48  java.util.regex.Matcher.start(int):int (18 bytes)   inline method (bytecode parsing)
                            @ 53  java.util.regex.Matcher.end(int):int (20 bytes)   inline method (bytecode parsing)
                            @ 63  java.util.regex.Matcher.start(int):int (18 bytes)   inline method (bytecode parsing)
                            @ 68  java.util.regex.Matcher.end(int):int (20 bytes)   inline method (bytecode parsing)
                            @ 78  java.util.regex.Matcher.start(int):int (18 bytes)   inline method (bytecode parsing)
                            @ 83  java.util.regex.Matcher.end(int):int (20 bytes)   inline method (bytecode parsing)
                            @ 91  java.util.regex.Matcher.start(int):int (18 bytes)   inline method (bytecode parsing)
                            @ 131  java.util.regex.Matcher.start(int):int (18 bytes)   inline method (bytecode parsing)
                              @ 174  java.util.Formatter$FormatSpecifier.<init>(String, Matcher):void (255 bytes)   not inlining relevance-based (relevance=0.002627, probability=0.009342, bonus=1.000000, nodes=181 > 0.787995)
                              @ 177  java.util.ArrayList.add(Object):boolean (25 bytes)   not inlining relevance-based (relevance=0.002627, probability=0.009342, bonus=1.000000, nodes=15 > 0.787995)
                              @ 1  java.util.regex.Matcher.checkMatch():void (19 bytes)   not inlining relevance-based (relevance=0.002627, probability=0.009342, bonus=1.000000, nodes=10 > 0.787995)
                            @ 12  java.util.WeakHashMap.getTable():WeakHashMap$Entry[] (9 bytes)   inline method (bytecode parsing)
                            @ 21  java.util.WeakHashMap.indexFor(int, int):int (6 bytes)   inline method (bytecode parsing)
                              @ 1  java.util.WeakHashMap.maskNull(Object):Object (12 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=6)
                                  @ 17  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=0.014962, probability=0.009442, bonus=1.000000, nodes=9)
                                  @ 27  java.lang.StringLatin1.hashCode(byte[]):int (52 bytes)   not inlining relevance-based (relevance=0.014953, probability=0.009436, bonus=1.000000, nodes=22 > 4.486010)
                                  @ 37  java.lang.StringUTF16.hashCode(byte[]):int (52 bytes)   not inlining relevance-based (relevance=0.000008, probability=0.000005, bonus=1.000000, nodes=23 > 0.002451)
                                @ 1  java.lang.String.hashCode():int (60 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=48 <= 300.000000)
                              @ 7  java.util.WeakHashMap.hash(Object):int (28 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=74 <= 300.000000)
                            @ 33  java.util.WeakHashMap.indexFor(int, int):int (6 bytes)   inline method (bytecode parsing)
                              @ 1  java.util.WeakHashMap.expungeStaleEntries():void (139 bytes)   not inlining too large previous low-level graph (low-level-nodes: 496, relevance=1.584638, probability=1.000000, bonus=1.000000, nodes=70)
                            @ 2  java.lang.ref.Reference.refersTo(Object):boolean (6 bytes)   inline method (bytecode parsing)
                              @ 2  java.lang.ref.Reference.refersToImpl(Object):boolean (6 bytes)   inline method (bytecode parsing)
                            @ 11  java.lang.ref.Reference.get():Object (5 bytes)   inline accessor method (bytecode parsing)
                                @ 21  java.lang.String.equals(Object):boolean (56 bytes)   not inlining relevance-based (relevance=0.091740, probability=0.084810, bonus=1.000000, nodes=50 > 27.521915)
                              @ 51  java.util.WeakHashMap.matchesKey(WeakHashMap$Entry, Object):boolean (33 bytes)   relevance-based (relevance=1.014488, probability=1.009277, bonus=1.000000, nodes=32 <= 300.000000)
                            @ 4  som.Vector.<init>():void (7 bytes)   inline method (bytecode parsing)
                              @ 3  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 10  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 14  deltablue.Strength.absoluteWeakest():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 17  deltablue.Variable.setWalkStrength(Strength):void (6 bytes)   inline method (bytecode parsing)
                            @ 22  deltablue.Variable.setStay(boolean):void (6 bytes)   inline method (bytecode parsing)
                            @ 48  deltablue.Variable.getConstraints():Vector (5 bytes)   inline accessor method (bytecode parsing)
                            @ 52  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.Planner$$Lambda/0x00007f45e0083030.<init>(Vector):void (10 bytes)   inline method (bytecode parsing)
                            @ 64  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.Planner$$Lambda/0x00007f45e0083250.<init>(Vector):void (10 bytes)   inline method (bytecode parsing)
                            @ 76  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object):Object (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.lang.invoke.LambdaForm$MH/0x00007f45e0000800.invoke(Object):Object (8 bytes)   inline method (bytecode parsing)
                              @ 31  som.Vector.isEmpty():boolean (17 bytes)   relevance-based (relevance=1.000028, probability=1.000000, bonus=1.000000, nodes=10 <= 300.000000)
                                @ 1  som.Vector.isEmpty():boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.999972, bonus=1.000000, nodes=10 <= 300.000000)
                              @ 38  som.Vector.removeFirst():Object (31 bytes)   relevance-based (relevance=1.000000, probability=0.999972, bonus=1.000000, nodes=18 <= 300.000000)
                                    @ 1  deltablue.BinaryConstraint.isSatisfied():boolean (13 bytes)   trivial (relevance=1.000000, probability=9.837668, bonus=1.000000, nodes=9)
                                  @ 8  deltablue.Planner.lambda$removePropagateFrom$4(Vector, AbstractConstraint):void (13 bytes)   relevance-based (relevance=1.000000, probability=9.837668, bonus=1.000000, nodes=29 <= 300.000000)
                                @ 20  deltablue.Planner$$Lambda/0x00007f45e0083030.apply(Object):void (12 bytes)   relevance-based (relevance=1.000000, probability=9.837668, bonus=1.000000, nodes=33 <= 300.000000)
                              @ 57  som.Vector.forEach(ForEachInterface):void (32 bytes)   relevance-based (relevance=1.000000, probability=0.999972, bonus=1.000000, nodes=49 <= 300.000000)
                            @ 1  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 6  deltablue.Variable.getConstraints():Vector (5 bytes)   inline accessor method (bytecode parsing)
                            @ 11  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object, Object):Object (10 bytes)   inline method (bytecode parsing)
                              @ 6  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object, Object):Object (24 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 19  deltablue.Planner$$Lambda/0x00007f45e0083470.<init>(AbstractConstraint, ForEachInterface):void (15 bytes)   relevance-based (relevance=1.000000, probability=0.999972, bonus=1.000000, nodes=11 <= 300.000000)
                                      @ 6  deltablue.BinaryConstraint.isSatisfied():boolean (13 bytes)   trivial (relevance=1.000000, probability=4.918834, bonus=1.000000, nodes=9)
                            @ 39  deltablue.Variable.getWalkStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 45  deltablue.Variable.setWalkStrength(Strength):void (6 bytes)   inline method (bytecode parsing)
                            @ 50  deltablue.Variable.getStay():boolean (5 bytes)   inline accessor method (bytecode parsing)
                            @ 53  deltablue.Variable.setStay(boolean):void (6 bytes)   inline method (bytecode parsing)
                            @ 57  deltablue.Variable.getStay():boolean (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 2  deltablue.Strength.weaker(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=4.918834, bonus=1.000000, nodes=11 <= 300.000000)
                                            @ 42  deltablue.Strength.weakest(Strength):Strength (14 bytes)   relevance-based (relevance=1.271641, probability=4.918834, bonus=1.000000, nodes=12 <= 300.000000)
                            @ 18  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 21  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 35  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 38  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                                            @ 64  deltablue.EqualityConstraint.execute():void (42 bytes)   relevance-based (relevance=1.135820, probability=4.393467, bonus=1.000000, nodes=38 <= 300.000000)
                                          @ 1  deltablue.BinaryConstraint.recalculate():void (68 bytes)   relevance-based (relevance=1.000000, probability=4.918834, bonus=1.000000, nodes=86 <= 300.000000)
                                          @ 6  deltablue.BinaryConstraint.getOutput():Variable (22 bytes)   relevance-based (relevance=1.271641, probability=4.918834, bonus=1.000000, nodes=17 <= 300.000000)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                            @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000131, probability=0.000645, bonus=1.000000, nodes=41 > 0.039331)
                                          @ 9  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.271641, probability=4.918834, bonus=1.000000, nodes=35 <= 300.000000)
                                        @ 8  deltablue.Planner.lambda$removePropagateFrom$5(Vector, AbstractConstraint):void (13 bytes)   relevance-based (relevance=1.000000, probability=4.918834, bonus=1.000000, nodes=135 <= 300.000000)
                                      @ 14  deltablue.Planner$$Lambda/0x00007f45e0083250.apply(Object):void (12 bytes)   relevance-based (relevance=1.000000, probability=4.918834, bonus=1.000000, nodes=137 <= 300.000000)
                                    @ 12  deltablue.Planner.lambda$constraintsConsuming$3(AbstractConstraint, ForEachInterface, AbstractConstraint):void (20 bytes)   relevance-based (relevance=1.000000, probability=9.837668, bonus=1.000000, nodes=158 <= 300.000000)
                                  @ 20  deltablue.Planner$$Lambda/0x00007f45e0083470.apply(Object):void (16 bytes)   relevance-based (relevance=1.000000, probability=9.837668, bonus=1.000000, nodes=166 <= 300.000000)
                                @ 16  som.Vector.forEach(ForEachInterface):void (32 bytes)   relevance-based (relevance=1.000000, probability=0.999972, bonus=1.000000, nodes=179 <= 300.000000)
                              @ 69  deltablue.Planner.constraintsConsuming(Variable, ForEachInterface):void (20 bytes)   relevance-based (relevance=1.000000, probability=0.999972, bonus=1.000000, nodes=198 <= 300.000000)
                              @ 31  som.Vector.isEmpty():boolean (17 bytes)   relevance-based (relevance=1.000028, probability=35196.486985, bonus=1.000000, nodes=10 <= 300.000000)
                                @ 1  som.Vector.isEmpty():boolean (17 bytes)   relevance-based (relevance=1.000000, probability=35195.487013, bonus=1.000000, nodes=10 <= 300.000000)
                              @ 38  som.Vector.removeFirst():Object (31 bytes)   relevance-based (relevance=1.000000, probability=35195.487013, bonus=1.000000, nodes=18 <= 300.000000)
                                    @ 1  deltablue.BinaryConstraint.isSatisfied():boolean (13 bytes)   trivial (relevance=1.000000, probability=346251.339078, bonus=1.000000, nodes=9)
                                  @ 8  deltablue.Planner.lambda$removePropagateFrom$4(Vector, AbstractConstraint):void (13 bytes)   relevance-based (relevance=1.000000, probability=346251.339078, bonus=1.000000, nodes=29 <= 300.000000)
                                @ 20  deltablue.Planner$$Lambda/0x00007f45e0083030.apply(Object):void (12 bytes)   relevance-based (relevance=1.000000, probability=346251.339078, bonus=1.000000, nodes=33 <= 300.000000)
                              @ 57  som.Vector.forEach(ForEachInterface):void (32 bytes)   relevance-based (relevance=1.000000, probability=35195.487013, bonus=1.000000, nodes=49 <= 300.000000)
                            @ 1  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 6  deltablue.Variable.getConstraints():Vector (5 bytes)   inline accessor method (bytecode parsing)
                            @ 11  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object, Object):Object (10 bytes)   inline method (bytecode parsing)
                              @ 6  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object, Object):Object (24 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 19  deltablue.Planner$$Lambda/0x00007f45e0083470.<init>(AbstractConstraint, ForEachInterface):void (15 bytes)   relevance-based (relevance=1.000000, probability=35195.487013, bonus=1.000000, nodes=11 <= 300.000000)
                                      @ 6  deltablue.BinaryConstraint.isSatisfied():boolean (13 bytes)   trivial (relevance=1.000000, probability=173125.669539, bonus=1.000000, nodes=9)
                            @ 39  deltablue.Variable.getWalkStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 45  deltablue.Variable.setWalkStrength(Strength):void (6 bytes)   inline method (bytecode parsing)
                            @ 50  deltablue.Variable.getStay():boolean (5 bytes)   inline accessor method (bytecode parsing)
                            @ 53  deltablue.Variable.setStay(boolean):void (6 bytes)   inline method (bytecode parsing)
                            @ 57  deltablue.Variable.getStay():boolean (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 2  deltablue.Strength.weaker(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=173125.669539, bonus=1.000000, nodes=11 <= 300.000000)
                                            @ 42  deltablue.Strength.weakest(Strength):Strength (14 bytes)   relevance-based (relevance=1.271641, probability=173125.669539, bonus=1.000000, nodes=12 <= 300.000000)
                            @ 18  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 21  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 35  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 38  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                                            @ 64  deltablue.EqualityConstraint.execute():void (42 bytes)   relevance-based (relevance=1.135820, probability=154634.613662, bonus=1.000000, nodes=38 <= 300.000000)
                                          @ 1  deltablue.BinaryConstraint.recalculate():void (68 bytes)   relevance-based (relevance=1.000000, probability=173125.669539, bonus=1.000000, nodes=86 <= 300.000000)
                                          @ 6  deltablue.BinaryConstraint.getOutput():Variable (22 bytes)   relevance-based (relevance=1.271641, probability=173125.669539, bonus=1.000000, nodes=17 <= 300.000000)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                            @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000131, probability=22.694485, bonus=1.000000, nodes=41 > 0.039331)
                                          @ 9  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.271641, probability=173125.669539, bonus=1.000000, nodes=35 <= 300.000000)
                                        @ 8  deltablue.Planner.lambda$removePropagateFrom$5(Vector, AbstractConstraint):void (13 bytes)   relevance-based (relevance=1.000000, probability=173125.669539, bonus=1.000000, nodes=135 <= 300.000000)
                                      @ 14  deltablue.Planner$$Lambda/0x00007f45e0083250.apply(Object):void (12 bytes)   relevance-based (relevance=1.000000, probability=173125.669539, bonus=1.000000, nodes=137 <= 300.000000)
                                    @ 12  deltablue.Planner.lambda$constraintsConsuming$3(AbstractConstraint, ForEachInterface, AbstractConstraint):void (20 bytes)   relevance-based (relevance=1.000000, probability=346251.339078, bonus=1.000000, nodes=158 <= 300.000000)
                                  @ 20  deltablue.Planner$$Lambda/0x00007f45e0083470.apply(Object):void (16 bytes)   relevance-based (relevance=1.000000, probability=346251.339078, bonus=1.000000, nodes=166 <= 300.000000)
                                @ 16  som.Vector.forEach(ForEachInterface):void (32 bytes)   relevance-based (relevance=1.000000, probability=35195.487013, bonus=1.000000, nodes=179 <= 300.000000)
                              @ 69  deltablue.Planner.constraintsConsuming(Variable, ForEachInterface):void (20 bytes)   relevance-based (relevance=1.000000, probability=35195.487013, bonus=1.000000, nodes=198 <= 300.000000)
                            @ 1  som.Vector.size():int (10 bytes)   inline method (bytecode parsing)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                      @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.250000, bonus=1.000000, nodes=13 <= 300.000000)
                                    @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.250000, bonus=1.000000, nodes=24 <= 300.000000)
                                  @ 45  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.250000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                      @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.062500, bonus=1.000000, nodes=13 <= 300.000000)
                                    @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.062500, bonus=1.000000, nodes=24 <= 300.000000)
                                  @ 101  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.062500, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                      @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.062500, bonus=1.000000, nodes=13 <= 300.000000)
                                    @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.062500, bonus=1.000000, nodes=24 <= 300.000000)
                                  @ 114  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.062500, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                      @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.010417, bonus=1.000000, nodes=13 <= 300.000000)
                                    @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.010417, bonus=1.000000, nodes=24 <= 300.000000)
                                  @ 184  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.010417, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                      @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.010417, bonus=1.000000, nodes=13 <= 300.000000)
                                    @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.010417, bonus=1.000000, nodes=24 <= 300.000000)
                                  @ 218  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.010417, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                        @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.003906, bonus=1.000000, nodes=13 <= 300.000000)
                                      @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.003906, bonus=1.000000, nodes=24 <= 300.000000)
                                    @ 45  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.003906, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                        @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000977, bonus=1.000000, nodes=13 <= 300.000000)
                                      @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000977, bonus=1.000000, nodes=24 <= 300.000000)
                                    @ 101  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000977, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                        @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000977, bonus=1.000000, nodes=13 <= 300.000000)
                                      @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000977, bonus=1.000000, nodes=24 <= 300.000000)
                                    @ 114  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000977, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                        @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000163, bonus=1.000000, nodes=13 <= 300.000000)
                                      @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000163, bonus=1.000000, nodes=24 <= 300.000000)
                                    @ 184  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000163, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                        @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000163, bonus=1.000000, nodes=13 <= 300.000000)
                                      @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000163, bonus=1.000000, nodes=24 <= 300.000000)
                                    @ 218  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000163, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000061, bonus=1.000000, nodes=13 <= 300.000000)
                                        @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000061, bonus=1.000000, nodes=24 <= 300.000000)
                                      @ 45  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000061, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000015, bonus=1.000000, nodes=13 <= 300.000000)
                                        @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000015, bonus=1.000000, nodes=24 <= 300.000000)
                                      @ 101  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000015, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000015, bonus=1.000000, nodes=13 <= 300.000000)
                                        @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000015, bonus=1.000000, nodes=24 <= 300.000000)
                                      @ 114  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000015, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000003, bonus=1.000000, nodes=13 <= 300.000000)
                                        @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000003, bonus=1.000000, nodes=24 <= 300.000000)
                                      @ 184  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000003, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000003, bonus=1.000000, nodes=13 <= 300.000000)
                                        @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000003, bonus=1.000000, nodes=24 <= 300.000000)
                                      @ 218  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000003, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                            @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000001, bonus=1.000000, nodes=13 <= 300.000000)
                                          @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000001, bonus=1.000000, nodes=24 <= 300.000000)
                                        @ 45  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000001, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                            @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                          @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                        @ 101  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                            @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                          @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                        @ 114  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                            @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                          @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                        @ 184  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                            @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                          @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                        @ 218  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 45  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 101  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 114  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 184  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 218  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 45  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 101  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 114  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 184  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 218  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                                          @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining it exceeds the maximum recursive inlining depth
                                          @ 269  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining it exceeds the maximum recursive inlining depth
                                          @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=202 <= 300.000000)
                                        @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=387 > 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 45  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 101  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 114  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 184  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 218  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 45  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 101  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 114  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 184  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 218  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                                          @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining it exceeds the maximum recursive inlining depth
                                          @ 269  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining it exceeds the maximum recursive inlining depth
                                          @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=202 <= 300.000000)
                                        @ 269  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=387 > 300.000000)
                                      @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   relevance-based (relevance=1.000000, probability=0.000002, bonus=1.000000, nodes=202 <= 300.000000)
                                    @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.000122, bonus=1.000000, nodes=387 > 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000061, bonus=1.000000, nodes=13 <= 300.000000)
                                        @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000061, bonus=1.000000, nodes=24 <= 300.000000)
                                      @ 45  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000061, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000015, bonus=1.000000, nodes=13 <= 300.000000)
                                        @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000015, bonus=1.000000, nodes=24 <= 300.000000)
                                      @ 101  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000015, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000015, bonus=1.000000, nodes=13 <= 300.000000)
                                        @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000015, bonus=1.000000, nodes=24 <= 300.000000)
                                      @ 114  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000015, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000003, bonus=1.000000, nodes=13 <= 300.000000)
                                        @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000003, bonus=1.000000, nodes=24 <= 300.000000)
                                      @ 184  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000003, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000003, bonus=1.000000, nodes=13 <= 300.000000)
                                        @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000003, bonus=1.000000, nodes=24 <= 300.000000)
                                      @ 218  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000003, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                            @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000001, bonus=1.000000, nodes=13 <= 300.000000)
                                          @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000001, bonus=1.000000, nodes=24 <= 300.000000)
                                        @ 45  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000001, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                            @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                          @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                        @ 101  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                            @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                          @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                        @ 114  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                            @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                          @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                        @ 184  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                            @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                          @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                        @ 218  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 45  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 101  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 114  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 184  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 218  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 45  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 101  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 114  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 184  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 218  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                                          @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining it exceeds the maximum recursive inlining depth
                                          @ 269  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining it exceeds the maximum recursive inlining depth
                                          @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=202 <= 300.000000)
                                        @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=387 > 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 45  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 101  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 114  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 184  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 218  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 45  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 101  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                              @ 44  java.lang.StringLatin1.equals(byte[], byte[]):boolean (36 bytes)   relevance-based (relevance=0.151681, probability=0.131571, bonus=1.000000, nodes=33 <= 45.504384)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 114  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 184  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 218  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                                          @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining it exceeds the maximum recursive inlining depth
                                          @ 269  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining it exceeds the maximum recursive inlining depth
                                          @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=202 <= 300.000000)
                                        @ 269  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=387 > 300.000000)
                                      @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   relevance-based (relevance=1.000000, probability=0.000002, bonus=1.000000, nodes=202 <= 300.000000)
                                    @ 269  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.000122, bonus=1.000000, nodes=387 > 300.000000)
                                  @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   relevance-based (relevance=1.000000, probability=0.007813, bonus=1.000000, nodes=202 <= 300.000000)
                                @ 19  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=387 > 300.000000)
                              @ 81  som.Vector.sort(Comparator):void (23 bytes)   relevance-based (relevance=1.000028, probability=1.000000, bonus=1.000000, nodes=22 <= 300.000000)
                              @ 17  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=0.015276, probability=0.015046, bonus=1.000000, nodes=9)
                              @ 27  java.lang.StringLatin1.hashCode(byte[]):int (52 bytes)   not inlining relevance-based (relevance=0.015269, probability=0.015038, bonus=1.000000, nodes=22 > 4.580625)
                              @ 37  java.lang.StringUTF16.hashCode(byte[]):int (52 bytes)   not inlining relevance-based (relevance=0.000008, probability=0.000008, bonus=1.000000, nodes=23 > 0.002316)
                            @ 36  java.util.BitSet.wordIndex(int):int (5 bytes)   inline method (bytecode parsing)
                              @ 32  java.util.BitSet.checkInvariants():void (111 bytes)   trivial (relevance=1.028452, probability=1.000000, bonus=1.000000, nodes=4)
                            @ 4  deltablue.Planner.<init>():void (10 bytes)   inline method (bytecode parsing)
                            @ 12  som.Vector.<init>():void (7 bytes)   inline method (bytecode parsing)
                              @ 3  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 18  deltablue.Variable.value(int):Variable (15 bytes)   inline method (bytecode parsing)
                              @ 10  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 25  deltablue.Variable.value(int):Variable (15 bytes)   inline method (bytecode parsing)
                              @ 10  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 75  deltablue.StayConstraint.<init>(Variable, Strength$Sym, Planner):void (8 bytes)   inline method (bytecode parsing)
                              @ 4  deltablue.UnaryConstraint.<init>(Variable, Strength$Sym, Planner):void (16 bytes)   inline method (bytecode parsing)
                                @ 2  deltablue.AbstractConstraint.<init>(Strength$Sym):void (13 bytes)   inline method (bytecode parsing)
                                  @ 6  deltablue.Strength.of(Strength$Sym):Strength (11 bytes)   inline method (bytecode parsing)
                                @ 12  deltablue.AbstractConstraint.addConstraint(Planner):void (10 bytes)   inline method (bytecode parsing)
                            @ 114  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 144  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 187  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 248  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 15  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 27  deltablue.Strength.absoluteWeakest():Strength (4 bytes)   inline method (bytecode parsing)
                              @ 4  deltablue.Variable.<init>():void (44 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=27 <= 300.000000)
                            @ 15  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 27  deltablue.Strength.absoluteWeakest():Strength (4 bytes)   inline method (bytecode parsing)
                              @ 4  deltablue.Variable.<init>():void (44 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=27 <= 300.000000)
                            @ 10  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 15  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 27  deltablue.Strength.absoluteWeakest():Strength (4 bytes)   inline method (bytecode parsing)
                                @ 4  deltablue.Variable.<init>():void (44 bytes)   relevance-based (relevance=1.000000, probability=59947.333333, bonus=1.000000, nodes=27 <= 300.000000)
                              @ 47  deltablue.Variable.value(int):Variable (15 bytes)   relevance-based (relevance=1.000000, probability=59947.333333, bonus=1.000000, nodes=32 <= 300.000000)
                            @ 10  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 15  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 27  deltablue.Strength.absoluteWeakest():Strength (4 bytes)   inline method (bytecode parsing)
                                @ 4  deltablue.Variable.<init>():void (44 bytes)   relevance-based (relevance=1.000000, probability=59947.333333, bonus=1.000000, nodes=27 <= 300.000000)
                              @ 54  deltablue.Variable.value(int):Variable (15 bytes)   relevance-based (relevance=1.000000, probability=59947.333333, bonus=1.000000, nodes=32 <= 300.000000)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000131, probability=7.858302, bonus=1.000000, nodes=41 > 0.039331)
                              @ 62  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=59947.333333, bonus=1.000000, nodes=35 <= 300.000000)
                                  @ 7  deltablue.Strength$Sym.customHash():int (5 bytes)   trivial (relevance=1.000000, probability=59947.333333, bonus=1.000000, nodes=5)
                                @ 1  som.Dictionary.hash(Dictionary$CustomHash):int (20 bytes)   trivial (relevance=1.000000, probability=59947.333333, bonus=1.000000, nodes=5)
                            @ 6  som.Dictionary.getBucketIdx(int):int (10 bytes)   inline method (bytecode parsing)
                                @ 7  som.Dictionary.getBucket(int):Dictionary$Entry (11 bytes)   relevance-based (relevance=1.000000, probability=59947.333333, bonus=1.000000, nodes=11 <= 300.000000)
                                @ 18  som.IdentityDictionary$IdEntry.match(int, Object):boolean (22 bytes)   relevance-based (relevance=1.000000, probability=59947.333333, bonus=1.000000, nodes=13 <= 300.000000)
                              @ 4  som.Dictionary.at(Dictionary$CustomHash):Object (39 bytes)   relevance-based (relevance=1.000131, probability=59947.333333, bonus=1.000000, nodes=28 <= 300.000000)
                            @ 5  deltablue.Variable.addConstraint(AbstractConstraint):void (9 bytes)   inline method (bytecode parsing)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                  @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000131, probability=7.858302, bonus=1.000000, nodes=41 > 0.039331)
                                @ 5  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=59947.333333, bonus=1.000000, nodes=35 <= 300.000000)
                              @ 1  deltablue.UnaryConstraint.addToGraph():void (14 bytes)   relevance-based (relevance=1.000131, probability=59947.333333, bonus=1.000000, nodes=47 <= 300.000000)
                                @ 1  deltablue.Planner.newMark():int (15 bytes)   relevance-based (relevance=1.000000, probability=59947.333333, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f45e0031810.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                @ 8  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 697, relevance=1.000000, probability=59947.333333, bonus=1.000000, nodes=72)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f45e0031810.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                @ 19  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 697, relevance=1.000000, probability=75608.821641, bonus=1.000000, nodes=72)
                              @ 6  deltablue.Planner.incrementalAdd(AbstractConstraint):void (27 bytes)   relevance-based (relevance=1.000131, probability=59947.333333, bonus=1.000000, nodes=28 <= 300.000000)
                            @ 24  deltablue.AbstractConstraint.addConstraint(Planner):void (10 bytes)   inline method (bytecode parsing)
                                          @ 7  deltablue.Strength$Sym.customHash():int (5 bytes)   trivial (relevance=1.000000, probability=59947.333333, bonus=1.000000, nodes=5)
                                        @ 1  som.Dictionary.hash(Dictionary$CustomHash):int (20 bytes)   trivial (relevance=1.000000, probability=59947.333333, bonus=1.000000, nodes=5)
                            @ 6  som.Dictionary.getBucketIdx(int):int (10 bytes)   inline method (bytecode parsing)
                                        @ 7  som.Dictionary.getBucket(int):Dictionary$Entry (11 bytes)   relevance-based (relevance=1.000000, probability=59947.333333, bonus=1.000000, nodes=11 <= 300.000000)
                                        @ 18  som.IdentityDictionary$IdEntry.match(int, Object):boolean (22 bytes)   relevance-based (relevance=1.000000, probability=59947.333333, bonus=1.000000, nodes=12 <= 300.000000)
                                      @ 4  som.Dictionary.at(Dictionary$CustomHash):Object (39 bytes)   relevance-based (relevance=1.000000, probability=59947.333333, bonus=1.000000, nodes=28 <= 300.000000)
                                    @ 6  deltablue.Strength.of(Strength$Sym):Strength (11 bytes)   relevance-based (relevance=1.000000, probability=59947.333333, bonus=1.000000, nodes=31 <= 300.000000)
                                  @ 2  deltablue.AbstractConstraint.<init>(Strength$Sym):void (13 bytes)   relevance-based (relevance=1.000000, probability=59947.333333, bonus=1.000000, nodes=35 <= 300.000000)
                                @ 8  deltablue.BinaryConstraint.<init>(Variable, Variable, Strength$Sym, Planner):void (21 bytes)   relevance-based (relevance=1.000000, probability=59947.333333, bonus=1.000000, nodes=45 <= 300.000000)
                            @ 5  deltablue.Variable.addConstraint(AbstractConstraint):void (9 bytes)   inline method (bytecode parsing)
                            @ 13  deltablue.Variable.addConstraint(AbstractConstraint):void (9 bytes)   inline method (bytecode parsing)
                            @ 21  deltablue.Variable.addConstraint(AbstractConstraint):void (9 bytes)   inline method (bytecode parsing)
                            @ 29  deltablue.Variable.addConstraint(AbstractConstraint):void (9 bytes)   inline method (bytecode parsing)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                    @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000131, probability=7.858302, bonus=1.000000, nodes=41 > 0.039331)
                                  @ 5  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=59947.333333, bonus=1.000000, nodes=35 <= 300.000000)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                    @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000131, probability=7.858302, bonus=1.000000, nodes=41 > 0.039331)
                                  @ 5  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000131, probability=59947.333333, bonus=1.000000, nodes=35 <= 300.000000)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                    @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000131, probability=7.858302, bonus=1.000000, nodes=41 > 0.039331)
                                  @ 5  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000131, probability=59947.333333, bonus=1.000000, nodes=35 <= 300.000000)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                    @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000131, probability=7.858302, bonus=1.000000, nodes=41 > 0.039331)
                                  @ 5  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000131, probability=59947.333333, bonus=1.000000, nodes=35 <= 300.000000)
                                @ 1  deltablue.ScaleConstraint.addToGraph():void (38 bytes)   relevance-based (relevance=1.000000, probability=59947.333333, bonus=1.000000, nodes=164 <= 300.000000)
                                  @ 1  deltablue.Planner.newMark():int (15 bytes)   relevance-based (relevance=1.000000, probability=59947.333333, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f45e0031810.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 8  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 697, relevance=1.000000, probability=59947.333333, bonus=1.000000, nodes=72)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f45e0031810.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 19  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 697, relevance=1.000000, probability=75608.821641, bonus=1.000000, nodes=72)
                                @ 6  deltablue.Planner.incrementalAdd(AbstractConstraint):void (27 bytes)   relevance-based (relevance=1.000131, probability=59947.333333, bonus=1.000000, nodes=28 <= 300.000000)
                              @ 94  deltablue.ScaleConstraint.<init>(Variable, Variable, Variable, Variable, Strength$Sym, Planner):void (28 bytes)   relevance-based (relevance=1.000131, probability=59947.333333, bonus=1.000000, nodes=237 <= 300.000000)
                            @ 9  deltablue.EditConstraint.<init>(Variable, Strength$Sym, Planner):void (8 bytes)   inline method (bytecode parsing)
                              @ 4  deltablue.UnaryConstraint.<init>(Variable, Strength$Sym, Planner):void (16 bytes)   inline method (bytecode parsing)
                                @ 2  deltablue.AbstractConstraint.<init>(Strength$Sym):void (13 bytes)   inline method (bytecode parsing)
                                  @ 6  deltablue.Strength.of(Strength$Sym):Strength (11 bytes)   inline method (bytecode parsing)
                                @ 12  deltablue.AbstractConstraint.addConstraint(Planner):void (10 bytes)   inline method (bytecode parsing)
                            @ 39  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 44  deltablue.Plan.execute():void (10 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object):Object (8 bytes)   inline method (bytecode parsing)
                                @ 4  java.lang.invoke.LambdaForm$MH/0x00007f45e0000800.invoke(Object):Object (8 bytes)   inline method (bytecode parsing)
                                    @ 7  deltablue.Strength$Sym.customHash():int (5 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                                  @ 1  som.Dictionary.hash(Dictionary$CustomHash):int (20 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                            @ 6  som.Dictionary.getBucketIdx(int):int (10 bytes)   inline method (bytecode parsing)
                                  @ 7  som.Dictionary.getBucket(int):Dictionary$Entry (11 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                                  @ 18  som.IdentityDictionary$IdEntry.match(int, Object):boolean (22 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                @ 4  som.Dictionary.at(Dictionary$CustomHash):Object (39 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=28 <= 300.000000)
                            @ 5  deltablue.Variable.addConstraint(AbstractConstraint):void (9 bytes)   inline method (bytecode parsing)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                    @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000131, probability=0.000131, bonus=1.000000, nodes=41 > 0.039331)
                                  @ 5  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=35 <= 300.000000)
                                @ 1  deltablue.UnaryConstraint.addToGraph():void (14 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=47 <= 300.000000)
                                  @ 1  deltablue.Planner.newMark():int (15 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f45e0031810.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 8  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 697, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=72)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f45e0031810.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 19  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 697, relevance=1.000000, probability=1.261254, bonus=1.000000, nodes=72)
                                @ 6  deltablue.Planner.incrementalAdd(AbstractConstraint):void (27 bytes)   relevance-based (relevance=1.000131, probability=1.000000, bonus=1.000000, nodes=28 <= 300.000000)
                            @ 5  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                    @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000131, probability=0.000131, bonus=1.000000, nodes=41 > 0.039331)
                                  @ 11  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=35 <= 300.000000)
                                @ 14  som.Vector.with(Object):Vector (16 bytes)   relevance-based (relevance=1.000131, probability=1.000000, bonus=1.000000, nodes=40 <= 300.000000)
                            @ 4  som.Vector.<init>():void (7 bytes)   inline method (bytecode parsing)
                              @ 3  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 10  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.Planner$$Lambda/0x00007f45e0081878.<init>(Vector):void (10 bytes)   inline method (bytecode parsing)
                                      @ 1  deltablue.AbstractConstraint.isInput():boolean (2 bytes)   not inlining no type profile exists
                                      @ 8  deltablue.AbstractConstraint.isSatisfied():boolean (0 bytes)   not inlining no type profile exists
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                          @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000131, probability=0.000322, bonus=1.000000, nodes=41 > 0.039331)
                                        @ 16  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=2.459487, bonus=1.000000, nodes=35 <= 300.000000)
                                      @ 8  deltablue.Planner.lambda$extractPlanFromConstraints$1(Vector, AbstractConstraint):void (20 bytes)   relevance-based (relevance=1.000000, probability=9.837947, bonus=1.000000, nodes=59 <= 300.000000)
                                    @ 20  deltablue.Planner$$Lambda/0x00007f45e0081878.apply(Object):void (12 bytes)   relevance-based (relevance=1.000000, probability=9.837947, bonus=1.000000, nodes=64 <= 300.000000)
                                  @ 15  som.Vector.forEach(ForEachInterface):void (32 bytes)   not inlining callee invoke probability is too high (invokeP=14.757243, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=77)
                            @ 9  deltablue.Plan.<init>():void (7 bytes)   inline method (bytecode parsing)
                              @ 3  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 39  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 67  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                                  @ 20  deltablue.Planner.makePlan(Vector):Plan (86 bytes)   not inlining too large previous low-level graph (low-level-nodes: 819, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=69)
                                @ 22  deltablue.Planner.extractPlanFromConstraints(Vector):Plan (24 bytes)   relevance-based (relevance=1.000131, probability=1.000000, bonus=1.000000, nodes=27 <= 300.000000)
                                  @ 1  deltablue.UnaryConstraint.isSatisfied():boolean (5 bytes)   trivial (relevance=2.000000, probability=1.000000, bonus=1.000000, nodes=5)
                            @ 21  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.Planner$$Lambda/0x00007f45e0083d70.<init>(Planner):void (10 bytes)   inline method (bytecode parsing)
                                    @ 1  deltablue.UnaryConstraint.getOutput():Variable (5 bytes)   trivial (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=5)
                                    @ 6  deltablue.UnaryConstraint.markUnsatisfied():void (6 bytes)   trivial (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=7)
                            @ 1  som.Vector.capacity():int (6 bytes)   inline method (bytecode parsing)
                            @ 31  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object, Object, Object, Object):Object (13 bytes)   inline method (bytecode parsing)
                              @ 9  java.lang.invoke.LambdaForm$DMH/0x00007f45e0123400.newInvokeSpecial(Object, Object, Object, Object, Object):Object (30 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 7  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                          @ 24  som.Vector$$Lambda/0x00007f45e0082e10.<init>(Object, boolean[], Object[], int[]):void (26 bytes)   relevance-based (relevance=1.000000, probability=0.250000, bonus=1.000000, nodes=17 <= 300.000000)
                                              @ 17  som.Vector.lambda$remove$0(Object, boolean[], Object[], int[], Object):void (28 bytes)   relevance-based (relevance=1.000000, probability=2.459487, bonus=1.000000, nodes=18 <= 300.000000)
                                            @ 20  som.Vector$$Lambda/0x00007f45e0082e10.apply(Object):void (21 bytes)   relevance-based (relevance=1.000000, probability=2.459487, bonus=1.000000, nodes=19 <= 300.000000)
                                          @ 36  som.Vector.forEach(ForEachInterface):void (32 bytes)   relevance-based (relevance=1.000000, probability=0.250000, bonus=1.000000, nodes=35 <= 300.000000)
                                        @ 5  som.Vector.remove(Object):boolean (61 bytes)   relevance-based (relevance=2.000000, probability=0.250000, bonus=1.000000, nodes=67 <= 300.000000)
                                      @ 12  deltablue.Variable.removeConstraint(AbstractConstraint):void (23 bytes)   relevance-based (relevance=1.000000, probability=0.250000, bonus=1.000000, nodes=84 <= 300.000000)
                                    @ 10  deltablue.UnaryConstraint.removeFromGraph():void (21 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=94 <= 300.000000)
                            @ 4  som.Vector.<init>():void (7 bytes)   inline method (bytecode parsing)
                              @ 3  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 10  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 14  deltablue.Strength.absoluteWeakest():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 17  deltablue.Variable.setWalkStrength(Strength):void (6 bytes)   inline method (bytecode parsing)
                            @ 22  deltablue.Variable.setStay(boolean):void (6 bytes)   inline method (bytecode parsing)
                            @ 48  deltablue.Variable.getConstraints():Vector (5 bytes)   inline accessor method (bytecode parsing)
                            @ 52  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.Planner$$Lambda/0x00007f45e0083030.<init>(Vector):void (10 bytes)   inline method (bytecode parsing)
                            @ 64  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.Planner$$Lambda/0x00007f45e0083250.<init>(Vector):void (10 bytes)   inline method (bytecode parsing)
                            @ 76  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object):Object (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.lang.invoke.LambdaForm$MH/0x00007f45e0000800.invoke(Object):Object (8 bytes)   inline method (bytecode parsing)
                                    @ 15  deltablue.Planner.removePropagateFrom(Variable):Vector (86 bytes)   not inlining too large previous low-level graph (low-level-nodes: 939, relevance=2.000000, probability=0.500000, bonus=1.000000, nodes=81)
                            @ 8  deltablue.Planner.lambda$incrementalRemove$0(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                                          @ 1  deltablue.Planner.newMark():int (15 bytes)   relevance-based (relevance=1.000000, probability=4.918974, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f45e0031810.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 8  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 697, relevance=1.000000, probability=4.918974, bonus=1.000000, nodes=72)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f45e0031810.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 19  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 697, relevance=1.000000, probability=6.204076, bonus=1.000000, nodes=72)
                                        @ 2  deltablue.Planner.incrementalAdd(AbstractConstraint):void (27 bytes)   relevance-based (relevance=1.000000, probability=4.918974, bonus=1.000000, nodes=28 <= 300.000000)
                                      @ 20  deltablue.Planner$$Lambda/0x00007f45e0083d70.apply(Object):void (12 bytes)   relevance-based (relevance=1.000000, probability=4.918974, bonus=1.000000, nodes=37 <= 300.000000)
                                    @ 26  som.Vector.forEach(ForEachInterface):void (32 bytes)   not inlining callee invoke probability is too high (invokeP=22.246098, relevance=2.000000, probability=0.500000, bonus=1.000000, nodes=53)
                                  @ 9  deltablue.Planner.incrementalRemove(AbstractConstraint):void (30 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=115 <= 300.000000)
                            @ 1  som.Vector.capacity():int (6 bytes)   inline method (bytecode parsing)
                            @ 31  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object, Object, Object, Object):Object (13 bytes)   inline method (bytecode parsing)
                              @ 9  java.lang.invoke.LambdaForm$DMH/0x00007f45e0123400.newInvokeSpecial(Object, Object, Object, Object, Object):Object (30 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 7  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                        @ 24  som.Vector$$Lambda/0x00007f45e0082e10.<init>(Object, boolean[], Object[], int[]):void (26 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=17 <= 300.000000)
                                            @ 17  som.Vector.lambda$remove$0(Object, boolean[], Object[], int[], Object):void (28 bytes)   relevance-based (relevance=1.000000, probability=4.918974, bonus=1.000000, nodes=18 <= 300.000000)
                                          @ 20  som.Vector$$Lambda/0x00007f45e0082e10.apply(Object):void (21 bytes)   relevance-based (relevance=1.000000, probability=4.918974, bonus=1.000000, nodes=19 <= 300.000000)
                                        @ 36  som.Vector.forEach(ForEachInterface):void (32 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=35 <= 300.000000)
                                      @ 5  som.Vector.remove(Object):boolean (61 bytes)   relevance-based (relevance=2.000000, probability=0.500000, bonus=1.000000, nodes=67 <= 300.000000)
                                    @ 12  deltablue.Variable.removeConstraint(AbstractConstraint):void (23 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=84 <= 300.000000)
                                  @ 13  deltablue.UnaryConstraint.removeFromGraph():void (21 bytes)   relevance-based (relevance=4.000000, probability=1.000000, bonus=1.000000, nodes=94 <= 300.000000)
                                @ 55  deltablue.AbstractConstraint.destroyConstraint(Planner):void (17 bytes)   relevance-based (relevance=1.000131, probability=1.000000, bonus=1.000000, nodes=212 <= 300.000000)
                              @ 109  deltablue.Planner.change(Variable, int):void (59 bytes)   not inlining relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=403 > 300.000000)
                            @ 9  deltablue.EditConstraint.<init>(Variable, Strength$Sym, Planner):void (8 bytes)   inline method (bytecode parsing)
                              @ 4  deltablue.UnaryConstraint.<init>(Variable, Strength$Sym, Planner):void (16 bytes)   inline method (bytecode parsing)
                                @ 2  deltablue.AbstractConstraint.<init>(Strength$Sym):void (13 bytes)   inline method (bytecode parsing)
                                  @ 6  deltablue.Strength.of(Strength$Sym):Strength (11 bytes)   inline method (bytecode parsing)
                                @ 12  deltablue.AbstractConstraint.addConstraint(Planner):void (10 bytes)   inline method (bytecode parsing)
                            @ 39  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 44  deltablue.Plan.execute():void (10 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object):Object (8 bytes)   inline method (bytecode parsing)
                                @ 4  java.lang.invoke.LambdaForm$MH/0x00007f45e0000800.invoke(Object):Object (8 bytes)   inline method (bytecode parsing)
                                    @ 7  deltablue.Strength$Sym.customHash():int (5 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                                  @ 1  som.Dictionary.hash(Dictionary$CustomHash):int (20 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                            @ 6  som.Dictionary.getBucketIdx(int):int (10 bytes)   inline method (bytecode parsing)
                                  @ 7  som.Dictionary.getBucket(int):Dictionary$Entry (11 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                                  @ 18  som.IdentityDictionary$IdEntry.match(int, Object):boolean (22 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                @ 4  som.Dictionary.at(Dictionary$CustomHash):Object (39 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=28 <= 300.000000)
                            @ 5  deltablue.Variable.addConstraint(AbstractConstraint):void (9 bytes)   inline method (bytecode parsing)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                    @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000131, probability=0.000131, bonus=1.000000, nodes=41 > 0.039331)
                                  @ 5  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=35 <= 300.000000)
                                @ 1  deltablue.UnaryConstraint.addToGraph():void (14 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=47 <= 300.000000)
                                  @ 1  deltablue.Planner.newMark():int (15 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f45e0031810.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 8  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 697, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=72)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f45e0031810.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 19  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 697, relevance=1.000000, probability=1.261254, bonus=1.000000, nodes=72)
                                @ 6  deltablue.Planner.incrementalAdd(AbstractConstraint):void (27 bytes)   relevance-based (relevance=1.000131, probability=1.000000, bonus=1.000000, nodes=28 <= 300.000000)
                            @ 5  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                    @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000131, probability=0.000131, bonus=1.000000, nodes=41 > 0.039331)
                                  @ 11  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=35 <= 300.000000)
                                @ 14  som.Vector.with(Object):Vector (16 bytes)   relevance-based (relevance=1.000131, probability=1.000000, bonus=1.000000, nodes=40 <= 300.000000)
                            @ 4  som.Vector.<init>():void (7 bytes)   inline method (bytecode parsing)
                              @ 3  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 10  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.Planner$$Lambda/0x00007f45e0081878.<init>(Vector):void (10 bytes)   inline method (bytecode parsing)
                                      @ 1  deltablue.AbstractConstraint.isInput():boolean (2 bytes)   not inlining no type profile exists
                                      @ 8  deltablue.AbstractConstraint.isSatisfied():boolean (0 bytes)   not inlining no type profile exists
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                          @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000131, probability=0.000322, bonus=1.000000, nodes=41 > 0.039331)
                                        @ 16  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=2.459487, bonus=1.000000, nodes=35 <= 300.000000)
                                      @ 8  deltablue.Planner.lambda$extractPlanFromConstraints$1(Vector, AbstractConstraint):void (20 bytes)   relevance-based (relevance=1.000000, probability=9.837947, bonus=1.000000, nodes=59 <= 300.000000)
                                    @ 20  deltablue.Planner$$Lambda/0x00007f45e0081878.apply(Object):void (12 bytes)   relevance-based (relevance=1.000000, probability=9.837947, bonus=1.000000, nodes=64 <= 300.000000)
                                  @ 15  som.Vector.forEach(ForEachInterface):void (32 bytes)   not inlining callee invoke probability is too high (invokeP=14.757243, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=77)
                            @ 9  deltablue.Plan.<init>():void (7 bytes)   inline method (bytecode parsing)
                              @ 3  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 39  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 67  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                                  @ 20  deltablue.Planner.makePlan(Vector):Plan (86 bytes)   not inlining too large previous low-level graph (low-level-nodes: 819, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=69)
                                @ 22  deltablue.Planner.extractPlanFromConstraints(Vector):Plan (24 bytes)   relevance-based (relevance=1.000131, probability=1.000000, bonus=1.000000, nodes=27 <= 300.000000)
                                  @ 1  deltablue.UnaryConstraint.isSatisfied():boolean (5 bytes)   trivial (relevance=2.000000, probability=1.000000, bonus=1.000000, nodes=5)
                            @ 21  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.Planner$$Lambda/0x00007f45e0083d70.<init>(Planner):void (10 bytes)   inline method (bytecode parsing)
                                    @ 1  deltablue.UnaryConstraint.getOutput():Variable (5 bytes)   trivial (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=5)
                                    @ 6  deltablue.UnaryConstraint.markUnsatisfied():void (6 bytes)   trivial (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=7)
                            @ 1  som.Vector.capacity():int (6 bytes)   inline method (bytecode parsing)
                            @ 31  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object, Object, Object, Object):Object (13 bytes)   inline method (bytecode parsing)
                              @ 9  java.lang.invoke.LambdaForm$DMH/0x00007f45e0123400.newInvokeSpecial(Object, Object, Object, Object, Object):Object (30 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 7  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                          @ 24  som.Vector$$Lambda/0x00007f45e0082e10.<init>(Object, boolean[], Object[], int[]):void (26 bytes)   relevance-based (relevance=1.000000, probability=0.250000, bonus=1.000000, nodes=17 <= 300.000000)
                                              @ 17  som.Vector.lambda$remove$0(Object, boolean[], Object[], int[], Object):void (28 bytes)   relevance-based (relevance=1.000000, probability=2.459487, bonus=1.000000, nodes=18 <= 300.000000)
                                            @ 20  som.Vector$$Lambda/0x00007f45e0082e10.apply(Object):void (21 bytes)   relevance-based (relevance=1.000000, probability=2.459487, bonus=1.000000, nodes=19 <= 300.000000)
                                          @ 36  som.Vector.forEach(ForEachInterface):void (32 bytes)   relevance-based (relevance=1.000000, probability=0.250000, bonus=1.000000, nodes=35 <= 300.000000)
                                        @ 5  som.Vector.remove(Object):boolean (61 bytes)   relevance-based (relevance=2.000000, probability=0.250000, bonus=1.000000, nodes=67 <= 300.000000)
                                      @ 12  deltablue.Variable.removeConstraint(AbstractConstraint):void (23 bytes)   relevance-based (relevance=1.000000, probability=0.250000, bonus=1.000000, nodes=84 <= 300.000000)
                                    @ 10  deltablue.UnaryConstraint.removeFromGraph():void (21 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=94 <= 300.000000)
                            @ 4  som.Vector.<init>():void (7 bytes)   inline method (bytecode parsing)
                              @ 3  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 10  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 14  deltablue.Strength.absoluteWeakest():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 17  deltablue.Variable.setWalkStrength(Strength):void (6 bytes)   inline method (bytecode parsing)
                            @ 22  deltablue.Variable.setStay(boolean):void (6 bytes)   inline method (bytecode parsing)
                            @ 48  deltablue.Variable.getConstraints():Vector (5 bytes)   inline accessor method (bytecode parsing)
                            @ 52  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.Planner$$Lambda/0x00007f45e0083030.<init>(Vector):void (10 bytes)   inline method (bytecode parsing)
                            @ 64  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.Planner$$Lambda/0x00007f45e0083250.<init>(Vector):void (10 bytes)   inline method (bytecode parsing)
                            @ 76  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object):Object (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.lang.invoke.LambdaForm$MH/0x00007f45e0000800.invoke(Object):Object (8 bytes)   inline method (bytecode parsing)
                                    @ 15  deltablue.Planner.removePropagateFrom(Variable):Vector (86 bytes)   not inlining too large previous low-level graph (low-level-nodes: 939, relevance=2.000000, probability=0.500000, bonus=1.000000, nodes=81)
                            @ 8  deltablue.Planner.lambda$incrementalRemove$0(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                                          @ 1  deltablue.Planner.newMark():int (15 bytes)   relevance-based (relevance=1.000000, probability=4.918974, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f45e0031810.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 8  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 697, relevance=1.000000, probability=4.918974, bonus=1.000000, nodes=72)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f45e0031810.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 19  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 697, relevance=1.000000, probability=6.204076, bonus=1.000000, nodes=72)
                                        @ 2  deltablue.Planner.incrementalAdd(AbstractConstraint):void (27 bytes)   relevance-based (relevance=1.000000, probability=4.918974, bonus=1.000000, nodes=28 <= 300.000000)
                                      @ 20  deltablue.Planner$$Lambda/0x00007f45e0083d70.apply(Object):void (12 bytes)   relevance-based (relevance=1.000000, probability=4.918974, bonus=1.000000, nodes=37 <= 300.000000)
                                    @ 26  som.Vector.forEach(ForEachInterface):void (32 bytes)   not inlining callee invoke probability is too high (invokeP=22.246098, relevance=2.000000, probability=0.500000, bonus=1.000000, nodes=53)
                                  @ 9  deltablue.Planner.incrementalRemove(AbstractConstraint):void (30 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=115 <= 300.000000)
                            @ 1  som.Vector.capacity():int (6 bytes)   inline method (bytecode parsing)
                            @ 31  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object, Object, Object, Object):Object (13 bytes)   inline method (bytecode parsing)
                              @ 9  java.lang.invoke.LambdaForm$DMH/0x00007f45e0123400.newInvokeSpecial(Object, Object, Object, Object, Object):Object (30 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 7  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                        @ 24  som.Vector$$Lambda/0x00007f45e0082e10.<init>(Object, boolean[], Object[], int[]):void (26 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=17 <= 300.000000)
                                            @ 17  som.Vector.lambda$remove$0(Object, boolean[], Object[], int[], Object):void (28 bytes)   relevance-based (relevance=1.000000, probability=4.918974, bonus=1.000000, nodes=18 <= 300.000000)
                                          @ 20  som.Vector$$Lambda/0x00007f45e0082e10.apply(Object):void (21 bytes)   relevance-based (relevance=1.000000, probability=4.918974, bonus=1.000000, nodes=19 <= 300.000000)
                                        @ 36  som.Vector.forEach(ForEachInterface):void (32 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=35 <= 300.000000)
                                      @ 5  som.Vector.remove(Object):boolean (61 bytes)   relevance-based (relevance=2.000000, probability=0.500000, bonus=1.000000, nodes=67 <= 300.000000)
                                    @ 12  deltablue.Variable.removeConstraint(AbstractConstraint):void (23 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=84 <= 300.000000)
                                  @ 13  deltablue.UnaryConstraint.removeFromGraph():void (21 bytes)   relevance-based (relevance=4.000000, probability=1.000000, bonus=1.000000, nodes=94 <= 300.000000)
                                @ 55  deltablue.AbstractConstraint.destroyConstraint(Planner):void (17 bytes)   relevance-based (relevance=1.000131, probability=1.000000, bonus=1.000000, nodes=212 <= 300.000000)
                              @ 139  deltablue.Planner.change(Variable, int):void (59 bytes)   not inlining relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=403 > 300.000000)
                            @ 9  deltablue.EditConstraint.<init>(Variable, Strength$Sym, Planner):void (8 bytes)   inline method (bytecode parsing)
                              @ 4  deltablue.UnaryConstraint.<init>(Variable, Strength$Sym, Planner):void (16 bytes)   inline method (bytecode parsing)
                                @ 2  deltablue.AbstractConstraint.<init>(Strength$Sym):void (13 bytes)   inline method (bytecode parsing)
                                  @ 6  deltablue.Strength.of(Strength$Sym):Strength (11 bytes)   inline method (bytecode parsing)
                                @ 12  deltablue.AbstractConstraint.addConstraint(Planner):void (10 bytes)   inline method (bytecode parsing)
                            @ 39  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 44  deltablue.Plan.execute():void (10 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object):Object (8 bytes)   inline method (bytecode parsing)
                                @ 4  java.lang.invoke.LambdaForm$MH/0x00007f45e0000800.invoke(Object):Object (8 bytes)   inline method (bytecode parsing)
                                    @ 7  deltablue.Strength$Sym.customHash():int (5 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                                  @ 1  som.Dictionary.hash(Dictionary$CustomHash):int (20 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                            @ 6  som.Dictionary.getBucketIdx(int):int (10 bytes)   inline method (bytecode parsing)
                                  @ 7  som.Dictionary.getBucket(int):Dictionary$Entry (11 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                                  @ 18  som.IdentityDictionary$IdEntry.match(int, Object):boolean (22 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                @ 4  som.Dictionary.at(Dictionary$CustomHash):Object (39 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=28 <= 300.000000)
                            @ 5  deltablue.Variable.addConstraint(AbstractConstraint):void (9 bytes)   inline method (bytecode parsing)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                    @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000131, probability=0.000131, bonus=1.000000, nodes=41 > 0.039331)
                                  @ 5  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=35 <= 300.000000)
                                @ 1  deltablue.UnaryConstraint.addToGraph():void (14 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=47 <= 300.000000)
                                  @ 1  deltablue.Planner.newMark():int (15 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f45e0031810.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 8  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 697, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=72)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f45e0031810.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 19  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 697, relevance=1.000000, probability=1.261254, bonus=1.000000, nodes=72)
                                @ 6  deltablue.Planner.incrementalAdd(AbstractConstraint):void (27 bytes)   relevance-based (relevance=1.000131, probability=1.000000, bonus=1.000000, nodes=28 <= 300.000000)
                            @ 5  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                    @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000131, probability=0.000131, bonus=1.000000, nodes=41 > 0.039331)
                                  @ 11  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=35 <= 300.000000)
                                @ 14  som.Vector.with(Object):Vector (16 bytes)   relevance-based (relevance=1.000131, probability=1.000000, bonus=1.000000, nodes=40 <= 300.000000)
                            @ 4  som.Vector.<init>():void (7 bytes)   inline method (bytecode parsing)
                              @ 3  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 10  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.Planner$$Lambda/0x00007f45e0081878.<init>(Vector):void (10 bytes)   inline method (bytecode parsing)
                                      @ 1  deltablue.AbstractConstraint.isInput():boolean (2 bytes)   not inlining no type profile exists
                                      @ 8  deltablue.AbstractConstraint.isSatisfied():boolean (0 bytes)   not inlining no type profile exists
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                          @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000131, probability=0.000322, bonus=1.000000, nodes=41 > 0.039331)
                                        @ 16  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=2.459487, bonus=1.000000, nodes=35 <= 300.000000)
                                      @ 8  deltablue.Planner.lambda$extractPlanFromConstraints$1(Vector, AbstractConstraint):void (20 bytes)   relevance-based (relevance=1.000000, probability=9.837947, bonus=1.000000, nodes=59 <= 300.000000)
                                    @ 20  deltablue.Planner$$Lambda/0x00007f45e0081878.apply(Object):void (12 bytes)   relevance-based (relevance=1.000000, probability=9.837947, bonus=1.000000, nodes=64 <= 300.000000)
                                  @ 15  som.Vector.forEach(ForEachInterface):void (32 bytes)   not inlining callee invoke probability is too high (invokeP=14.757243, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=77)
                            @ 9  deltablue.Plan.<init>():void (7 bytes)   inline method (bytecode parsing)
                              @ 3  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 39  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 67  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                                  @ 20  deltablue.Planner.makePlan(Vector):Plan (86 bytes)   not inlining too large previous low-level graph (low-level-nodes: 819, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=69)
                                @ 22  deltablue.Planner.extractPlanFromConstraints(Vector):Plan (24 bytes)   relevance-based (relevance=1.000131, probability=1.000000, bonus=1.000000, nodes=27 <= 300.000000)
                                  @ 1  deltablue.UnaryConstraint.isSatisfied():boolean (5 bytes)   trivial (relevance=2.000000, probability=1.000000, bonus=1.000000, nodes=5)
                            @ 21  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.Planner$$Lambda/0x00007f45e0083d70.<init>(Planner):void (10 bytes)   inline method (bytecode parsing)
                                    @ 1  deltablue.UnaryConstraint.getOutput():Variable (5 bytes)   trivial (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=5)
                                    @ 6  deltablue.UnaryConstraint.markUnsatisfied():void (6 bytes)   trivial (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=7)
                            @ 1  som.Vector.capacity():int (6 bytes)   inline method (bytecode parsing)
                            @ 31  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object, Object, Object, Object):Object (13 bytes)   inline method (bytecode parsing)
                              @ 9  java.lang.invoke.LambdaForm$DMH/0x00007f45e0123400.newInvokeSpecial(Object, Object, Object, Object, Object):Object (30 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 7  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                          @ 24  som.Vector$$Lambda/0x00007f45e0082e10.<init>(Object, boolean[], Object[], int[]):void (26 bytes)   relevance-based (relevance=1.000000, probability=0.250000, bonus=1.000000, nodes=17 <= 300.000000)
                                              @ 17  som.Vector.lambda$remove$0(Object, boolean[], Object[], int[], Object):void (28 bytes)   relevance-based (relevance=1.000000, probability=2.459487, bonus=1.000000, nodes=18 <= 300.000000)
                                            @ 20  som.Vector$$Lambda/0x00007f45e0082e10.apply(Object):void (21 bytes)   relevance-based (relevance=1.000000, probability=2.459487, bonus=1.000000, nodes=19 <= 300.000000)
                                          @ 36  som.Vector.forEach(ForEachInterface):void (32 bytes)   relevance-based (relevance=1.000000, probability=0.250000, bonus=1.000000, nodes=35 <= 300.000000)
                                        @ 5  som.Vector.remove(Object):boolean (61 bytes)   relevance-based (relevance=2.000000, probability=0.250000, bonus=1.000000, nodes=67 <= 300.000000)
                                      @ 12  deltablue.Variable.removeConstraint(AbstractConstraint):void (23 bytes)   relevance-based (relevance=1.000000, probability=0.250000, bonus=1.000000, nodes=84 <= 300.000000)
                                    @ 10  deltablue.UnaryConstraint.removeFromGraph():void (21 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=94 <= 300.000000)
                            @ 4  som.Vector.<init>():void (7 bytes)   inline method (bytecode parsing)
                              @ 3  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 10  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 14  deltablue.Strength.absoluteWeakest():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 17  deltablue.Variable.setWalkStrength(Strength):void (6 bytes)   inline method (bytecode parsing)
                            @ 22  deltablue.Variable.setStay(boolean):void (6 bytes)   inline method (bytecode parsing)
                            @ 48  deltablue.Variable.getConstraints():Vector (5 bytes)   inline accessor method (bytecode parsing)
                            @ 52  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.Planner$$Lambda/0x00007f45e0083030.<init>(Vector):void (10 bytes)   inline method (bytecode parsing)
                            @ 64  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.Planner$$Lambda/0x00007f45e0083250.<init>(Vector):void (10 bytes)   inline method (bytecode parsing)
                            @ 76  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object):Object (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.lang.invoke.LambdaForm$MH/0x00007f45e0000800.invoke(Object):Object (8 bytes)   inline method (bytecode parsing)
                                    @ 15  deltablue.Planner.removePropagateFrom(Variable):Vector (86 bytes)   not inlining too large previous low-level graph (low-level-nodes: 939, relevance=2.000000, probability=0.500000, bonus=1.000000, nodes=81)
                            @ 8  deltablue.Planner.lambda$incrementalRemove$0(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                                          @ 1  deltablue.Planner.newMark():int (15 bytes)   relevance-based (relevance=1.000000, probability=4.918974, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f45e0031810.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 8  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 697, relevance=1.000000, probability=4.918974, bonus=1.000000, nodes=72)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f45e0031810.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 19  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 697, relevance=1.000000, probability=6.204076, bonus=1.000000, nodes=72)
                                        @ 2  deltablue.Planner.incrementalAdd(AbstractConstraint):void (27 bytes)   relevance-based (relevance=1.000000, probability=4.918974, bonus=1.000000, nodes=28 <= 300.000000)
                                      @ 20  deltablue.Planner$$Lambda/0x00007f45e0083d70.apply(Object):void (12 bytes)   relevance-based (relevance=1.000000, probability=4.918974, bonus=1.000000, nodes=37 <= 300.000000)
                                    @ 26  som.Vector.forEach(ForEachInterface):void (32 bytes)   not inlining callee invoke probability is too high (invokeP=22.246098, relevance=2.000000, probability=0.500000, bonus=1.000000, nodes=53)
                                  @ 9  deltablue.Planner.incrementalRemove(AbstractConstraint):void (30 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=115 <= 300.000000)
                            @ 1  som.Vector.capacity():int (6 bytes)   inline method (bytecode parsing)
                            @ 31  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object, Object, Object, Object):Object (13 bytes)   inline method (bytecode parsing)
                              @ 9  java.lang.invoke.LambdaForm$DMH/0x00007f45e0123400.newInvokeSpecial(Object, Object, Object, Object, Object):Object (30 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 7  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                        @ 24  som.Vector$$Lambda/0x00007f45e0082e10.<init>(Object, boolean[], Object[], int[]):void (26 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=17 <= 300.000000)
                                            @ 17  som.Vector.lambda$remove$0(Object, boolean[], Object[], int[], Object):void (28 bytes)   relevance-based (relevance=1.000000, probability=4.918974, bonus=1.000000, nodes=18 <= 300.000000)
                                          @ 20  som.Vector$$Lambda/0x00007f45e0082e10.apply(Object):void (21 bytes)   relevance-based (relevance=1.000000, probability=4.918974, bonus=1.000000, nodes=19 <= 300.000000)
                                        @ 36  som.Vector.forEach(ForEachInterface):void (32 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=35 <= 300.000000)
                                      @ 5  som.Vector.remove(Object):boolean (61 bytes)   relevance-based (relevance=2.000000, probability=0.500000, bonus=1.000000, nodes=67 <= 300.000000)
                                    @ 12  deltablue.Variable.removeConstraint(AbstractConstraint):void (23 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=84 <= 300.000000)
                                  @ 13  deltablue.UnaryConstraint.removeFromGraph():void (21 bytes)   relevance-based (relevance=4.000000, probability=1.000000, bonus=1.000000, nodes=94 <= 300.000000)
                                @ 55  deltablue.AbstractConstraint.destroyConstraint(Planner):void (17 bytes)   relevance-based (relevance=1.000131, probability=1.000000, bonus=1.000000, nodes=212 <= 300.000000)
                              @ 164  deltablue.Planner.change(Variable, int):void (59 bytes)   not inlining relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=400 > 300.000000)
                            @ 9  deltablue.EditConstraint.<init>(Variable, Strength$Sym, Planner):void (8 bytes)   inline method (bytecode parsing)
                              @ 4  deltablue.UnaryConstraint.<init>(Variable, Strength$Sym, Planner):void (16 bytes)   inline method (bytecode parsing)
                                @ 2  deltablue.AbstractConstraint.<init>(Strength$Sym):void (13 bytes)   inline method (bytecode parsing)
                                  @ 6  deltablue.Strength.of(Strength$Sym):Strength (11 bytes)   inline method (bytecode parsing)
                                @ 12  deltablue.AbstractConstraint.addConstraint(Planner):void (10 bytes)   inline method (bytecode parsing)
                            @ 39  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 44  deltablue.Plan.execute():void (10 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object):Object (8 bytes)   inline method (bytecode parsing)
                                @ 4  java.lang.invoke.LambdaForm$MH/0x00007f45e0000800.invoke(Object):Object (8 bytes)   inline method (bytecode parsing)
                                    @ 7  deltablue.Strength$Sym.customHash():int (5 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                                  @ 1  som.Dictionary.hash(Dictionary$CustomHash):int (20 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                            @ 6  som.Dictionary.getBucketIdx(int):int (10 bytes)   inline method (bytecode parsing)
                                  @ 7  som.Dictionary.getBucket(int):Dictionary$Entry (11 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                                  @ 18  som.IdentityDictionary$IdEntry.match(int, Object):boolean (22 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                @ 4  som.Dictionary.at(Dictionary$CustomHash):Object (39 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=28 <= 300.000000)
                            @ 5  deltablue.Variable.addConstraint(AbstractConstraint):void (9 bytes)   inline method (bytecode parsing)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                    @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000131, probability=0.000131, bonus=1.000000, nodes=41 > 0.039331)
                                  @ 5  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=35 <= 300.000000)
                                @ 1  deltablue.UnaryConstraint.addToGraph():void (14 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=47 <= 300.000000)
                                  @ 1  deltablue.Planner.newMark():int (15 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f45e0031810.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 8  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 697, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=72)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f45e0031810.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 19  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 697, relevance=1.000000, probability=1.261254, bonus=1.000000, nodes=72)
                                @ 6  deltablue.Planner.incrementalAdd(AbstractConstraint):void (27 bytes)   relevance-based (relevance=1.000131, probability=1.000000, bonus=1.000000, nodes=28 <= 300.000000)
                            @ 5  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                    @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000131, probability=0.000131, bonus=1.000000, nodes=41 > 0.039331)
                                  @ 11  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=35 <= 300.000000)
                                @ 14  som.Vector.with(Object):Vector (16 bytes)   relevance-based (relevance=1.000131, probability=1.000000, bonus=1.000000, nodes=40 <= 300.000000)
                            @ 4  som.Vector.<init>():void (7 bytes)   inline method (bytecode parsing)
                              @ 3  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 10  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.Planner$$Lambda/0x00007f45e0081878.<init>(Vector):void (10 bytes)   inline method (bytecode parsing)
                                      @ 1  deltablue.AbstractConstraint.isInput():boolean (2 bytes)   not inlining no type profile exists
                                      @ 8  deltablue.AbstractConstraint.isSatisfied():boolean (0 bytes)   not inlining no type profile exists
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                          @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000131, probability=0.000322, bonus=1.000000, nodes=41 > 0.039331)
                                        @ 16  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=2.459487, bonus=1.000000, nodes=35 <= 300.000000)
                                      @ 8  deltablue.Planner.lambda$extractPlanFromConstraints$1(Vector, AbstractConstraint):void (20 bytes)   relevance-based (relevance=1.000000, probability=9.837947, bonus=1.000000, nodes=59 <= 300.000000)
                                    @ 20  deltablue.Planner$$Lambda/0x00007f45e0081878.apply(Object):void (12 bytes)   relevance-based (relevance=1.000000, probability=9.837947, bonus=1.000000, nodes=64 <= 300.000000)
                                  @ 15  som.Vector.forEach(ForEachInterface):void (32 bytes)   not inlining callee invoke probability is too high (invokeP=14.757243, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=77)
                            @ 9  deltablue.Plan.<init>():void (7 bytes)   inline method (bytecode parsing)
                              @ 3  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 39  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 67  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                                  @ 20  deltablue.Planner.makePlan(Vector):Plan (86 bytes)   not inlining too large previous low-level graph (low-level-nodes: 819, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=69)
                                @ 22  deltablue.Planner.extractPlanFromConstraints(Vector):Plan (24 bytes)   relevance-based (relevance=1.000131, probability=1.000000, bonus=1.000000, nodes=27 <= 300.000000)
                                  @ 1  deltablue.UnaryConstraint.isSatisfied():boolean (5 bytes)   trivial (relevance=2.000000, probability=1.000000, bonus=1.000000, nodes=5)
                            @ 21  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.Planner$$Lambda/0x00007f45e0083d70.<init>(Planner):void (10 bytes)   inline method (bytecode parsing)
                                    @ 1  deltablue.UnaryConstraint.getOutput():Variable (5 bytes)   trivial (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=5)
                                    @ 6  deltablue.UnaryConstraint.markUnsatisfied():void (6 bytes)   trivial (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=7)
                            @ 1  som.Vector.capacity():int (6 bytes)   inline method (bytecode parsing)
                            @ 31  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object, Object, Object, Object):Object (13 bytes)   inline method (bytecode parsing)
                              @ 9  java.lang.invoke.LambdaForm$DMH/0x00007f45e0123400.newInvokeSpecial(Object, Object, Object, Object, Object):Object (30 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 7  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                          @ 24  som.Vector$$Lambda/0x00007f45e0082e10.<init>(Object, boolean[], Object[], int[]):void (26 bytes)   relevance-based (relevance=1.000000, probability=0.250000, bonus=1.000000, nodes=17 <= 300.000000)
                                              @ 17  som.Vector.lambda$remove$0(Object, boolean[], Object[], int[], Object):void (28 bytes)   relevance-based (relevance=1.000000, probability=2.459487, bonus=1.000000, nodes=18 <= 300.000000)
                                            @ 20  som.Vector$$Lambda/0x00007f45e0082e10.apply(Object):void (21 bytes)   relevance-based (relevance=1.000000, probability=2.459487, bonus=1.000000, nodes=19 <= 300.000000)
                                          @ 36  som.Vector.forEach(ForEachInterface):void (32 bytes)   relevance-based (relevance=1.000000, probability=0.250000, bonus=1.000000, nodes=35 <= 300.000000)
                                        @ 5  som.Vector.remove(Object):boolean (61 bytes)   relevance-based (relevance=2.000000, probability=0.250000, bonus=1.000000, nodes=67 <= 300.000000)
                                      @ 12  deltablue.Variable.removeConstraint(AbstractConstraint):void (23 bytes)   relevance-based (relevance=1.000000, probability=0.250000, bonus=1.000000, nodes=84 <= 300.000000)
                                    @ 10  deltablue.UnaryConstraint.removeFromGraph():void (21 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=94 <= 300.000000)
                            @ 4  som.Vector.<init>():void (7 bytes)   inline method (bytecode parsing)
                              @ 3  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 10  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 14  deltablue.Strength.absoluteWeakest():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 17  deltablue.Variable.setWalkStrength(Strength):void (6 bytes)   inline method (bytecode parsing)
                            @ 22  deltablue.Variable.setStay(boolean):void (6 bytes)   inline method (bytecode parsing)
                            @ 48  deltablue.Variable.getConstraints():Vector (5 bytes)   inline accessor method (bytecode parsing)
                            @ 52  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.Planner$$Lambda/0x00007f45e0083030.<init>(Vector):void (10 bytes)   inline method (bytecode parsing)
                            @ 64  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.Planner$$Lambda/0x00007f45e0083250.<init>(Vector):void (10 bytes)   inline method (bytecode parsing)
                            @ 76  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object):Object (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.lang.invoke.LambdaForm$MH/0x00007f45e0000800.invoke(Object):Object (8 bytes)   inline method (bytecode parsing)
                                    @ 15  deltablue.Planner.removePropagateFrom(Variable):Vector (86 bytes)   not inlining too large previous low-level graph (low-level-nodes: 939, relevance=2.000000, probability=0.500000, bonus=1.000000, nodes=81)
                            @ 8  deltablue.Planner.lambda$incrementalRemove$0(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                                          @ 1  deltablue.Planner.newMark():int (15 bytes)   relevance-based (relevance=1.000000, probability=4.918974, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f45e0031810.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 8  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 697, relevance=1.000000, probability=4.918974, bonus=1.000000, nodes=72)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f45e0031810.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 19  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 697, relevance=1.000000, probability=6.204076, bonus=1.000000, nodes=72)
                                        @ 2  deltablue.Planner.incrementalAdd(AbstractConstraint):void (27 bytes)   relevance-based (relevance=1.000000, probability=4.918974, bonus=1.000000, nodes=28 <= 300.000000)
                                      @ 20  deltablue.Planner$$Lambda/0x00007f45e0083d70.apply(Object):void (12 bytes)   relevance-based (relevance=1.000000, probability=4.918974, bonus=1.000000, nodes=37 <= 300.000000)
                                    @ 26  som.Vector.forEach(ForEachInterface):void (32 bytes)   not inlining callee invoke probability is too high (invokeP=22.246098, relevance=2.000000, probability=0.500000, bonus=1.000000, nodes=53)
                                  @ 9  deltablue.Planner.incrementalRemove(AbstractConstraint):void (30 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=115 <= 300.000000)
                            @ 1  som.Vector.capacity():int (6 bytes)   inline method (bytecode parsing)
                            @ 31  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object, Object, Object, Object):Object (13 bytes)   inline method (bytecode parsing)
                              @ 9  java.lang.invoke.LambdaForm$DMH/0x00007f45e0123400.newInvokeSpecial(Object, Object, Object, Object, Object):Object (30 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 7  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                        @ 24  som.Vector$$Lambda/0x00007f45e0082e10.<init>(Object, boolean[], Object[], int[]):void (26 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=17 <= 300.000000)
                                            @ 17  som.Vector.lambda$remove$0(Object, boolean[], Object[], int[], Object):void (28 bytes)   relevance-based (relevance=1.000000, probability=4.918974, bonus=1.000000, nodes=18 <= 300.000000)
                                          @ 20  som.Vector$$Lambda/0x00007f45e0082e10.apply(Object):void (21 bytes)   relevance-based (relevance=1.000000, probability=4.918974, bonus=1.000000, nodes=19 <= 300.000000)
                                        @ 36  som.Vector.forEach(ForEachInterface):void (32 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=35 <= 300.000000)
                                      @ 5  som.Vector.remove(Object):boolean (61 bytes)   relevance-based (relevance=2.000000, probability=0.500000, bonus=1.000000, nodes=67 <= 300.000000)
                                    @ 12  deltablue.Variable.removeConstraint(AbstractConstraint):void (23 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=84 <= 300.000000)
                                  @ 13  deltablue.UnaryConstraint.removeFromGraph():void (21 bytes)   relevance-based (relevance=4.000000, probability=1.000000, bonus=1.000000, nodes=94 <= 300.000000)
                                @ 55  deltablue.AbstractConstraint.destroyConstraint(Planner):void (17 bytes)   relevance-based (relevance=1.000131, probability=1.000000, bonus=1.000000, nodes=212 <= 300.000000)
                              @ 225  deltablue.Planner.change(Variable, int):void (59 bytes)   not inlining relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=400 > 300.000000)
                              @ 181  som.Vector.at(int):Object (18 bytes)   relevance-based (relevance=1.000000, probability=64756.000000, bonus=1.000000, nodes=10 <= 300.000000)
                              @ 242  som.Vector.at(int):Object (18 bytes)   relevance-based (relevance=1.000000, probability=59999.000000, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 4  deltablue.Planner.<init>():void (10 bytes)   inline method (bytecode parsing)
                            @ 16  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object):Object (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.lang.invoke.LambdaForm$MH/0x00007f45e0000800.invoke(Object):Object (8 bytes)   inline method (bytecode parsing)
                            @ 55  deltablue.EqualityConstraint.<init>(Variable, Variable, Strength$Sym, Planner):void (16 bytes)   inline method (bytecode parsing)
                              @ 12  deltablue.AbstractConstraint.addConstraint(Planner):void (10 bytes)   inline method (bytecode parsing)
                            @ 76  deltablue.StayConstraint.<init>(Variable, Strength$Sym, Planner):void (8 bytes)   inline method (bytecode parsing)
                              @ 4  deltablue.UnaryConstraint.<init>(Variable, Strength$Sym, Planner):void (16 bytes)   inline method (bytecode parsing)
                                @ 2  deltablue.AbstractConstraint.<init>(Strength$Sym):void (13 bytes)   inline method (bytecode parsing)
                                  @ 6  deltablue.Strength.of(Strength$Sym):Strength (11 bytes)   inline method (bytecode parsing)
                                @ 12  deltablue.AbstractConstraint.addConstraint(Planner):void (10 bytes)   inline method (bytecode parsing)
                            @ 91  deltablue.EditConstraint.<init>(Variable, Strength$Sym, Planner):void (8 bytes)   inline method (bytecode parsing)
                              @ 4  deltablue.UnaryConstraint.<init>(Variable, Strength$Sym, Planner):void (16 bytes)   inline method (bytecode parsing)
                                @ 2  deltablue.AbstractConstraint.<init>(Strength$Sym):void (13 bytes)   inline method (bytecode parsing)
                                  @ 6  deltablue.Strength.of(Strength$Sym):Strength (11 bytes)   inline method (bytecode parsing)
                                @ 12  deltablue.AbstractConstraint.addConstraint(Planner):void (10 bytes)   inline method (bytecode parsing)
                            @ 124  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 129  deltablue.Plan.execute():void (10 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object):Object (8 bytes)   inline method (bytecode parsing)
                                @ 4  java.lang.invoke.LambdaForm$MH/0x00007f45e0000800.invoke(Object):Object (8 bytes)   inline method (bytecode parsing)
                            @ 135  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                        @ 7  deltablue.Strength$Sym.customHash():int (5 bytes)   trivial (relevance=1.000000, probability=0.999983, bonus=1.000000, nodes=5)
                                      @ 1  som.Dictionary.hash(Dictionary$CustomHash):int (20 bytes)   trivial (relevance=1.000000, probability=0.999983, bonus=1.000000, nodes=5)
                            @ 6  som.Dictionary.getBucketIdx(int):int (10 bytes)   inline method (bytecode parsing)
                                      @ 7  som.Dictionary.getBucket(int):Dictionary$Entry (11 bytes)   relevance-based (relevance=1.000000, probability=0.999983, bonus=1.000000, nodes=11 <= 300.000000)
                                      @ 18  som.IdentityDictionary$IdEntry.match(int, Object):boolean (22 bytes)   relevance-based (relevance=1.000000, probability=0.999983, bonus=1.000000, nodes=12 <= 300.000000)
                                    @ 4  som.Dictionary.at(Dictionary$CustomHash):Object (39 bytes)   relevance-based (relevance=1.000000, probability=0.999983, bonus=1.000000, nodes=28 <= 300.000000)
                                  @ 6  deltablue.Strength.of(Strength$Sym):Strength (11 bytes)   relevance-based (relevance=1.000000, probability=0.999983, bonus=1.000000, nodes=31 <= 300.000000)
                                @ 2  deltablue.AbstractConstraint.<init>(Strength$Sym):void (13 bytes)   relevance-based (relevance=1.000000, probability=0.999983, bonus=1.000000, nodes=35 <= 300.000000)
                              @ 6  deltablue.BinaryConstraint.<init>(Variable, Variable, Strength$Sym, Planner):void (21 bytes)   relevance-based (relevance=1.000000, probability=0.999983, bonus=1.000000, nodes=45 <= 300.000000)
                            @ 5  deltablue.Variable.addConstraint(AbstractConstraint):void (9 bytes)   inline method (bytecode parsing)
                            @ 13  deltablue.Variable.addConstraint(AbstractConstraint):void (9 bytes)   inline method (bytecode parsing)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                  @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000131, probability=0.000131, bonus=1.000000, nodes=41 > 0.039331)
                                @ 5  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=0.999983, bonus=1.000000, nodes=35 <= 300.000000)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                  @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000131, probability=0.000131, bonus=1.000000, nodes=41 > 0.039331)
                                @ 5  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000131, probability=0.999983, bonus=1.000000, nodes=35 <= 300.000000)
                              @ 1  deltablue.BinaryConstraint.addToGraph():void (22 bytes)   relevance-based (relevance=1.000000, probability=0.999983, bonus=1.000000, nodes=86 <= 300.000000)
                                @ 1  deltablue.Planner.newMark():int (15 bytes)   relevance-based (relevance=1.000000, probability=0.999983, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f45e0031810.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                @ 8  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 697, relevance=1.000000, probability=0.999983, bonus=1.000000, nodes=72)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f45e0031810.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                @ 19  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 697, relevance=1.000000, probability=1.261233, bonus=1.000000, nodes=72)
                              @ 6  deltablue.Planner.incrementalAdd(AbstractConstraint):void (27 bytes)   relevance-based (relevance=1.000131, probability=0.999983, bonus=1.000000, nodes=28 <= 300.000000)
                                        @ 7  deltablue.Strength$Sym.customHash():int (5 bytes)   trivial (relevance=1.000000, probability=59886.520034, bonus=1.000000, nodes=5)
                                      @ 1  som.Dictionary.hash(Dictionary$CustomHash):int (20 bytes)   trivial (relevance=1.000000, probability=59886.520034, bonus=1.000000, nodes=5)
                            @ 6  som.Dictionary.getBucketIdx(int):int (10 bytes)   inline method (bytecode parsing)
                                      @ 7  som.Dictionary.getBucket(int):Dictionary$Entry (11 bytes)   relevance-based (relevance=1.000000, probability=59886.520034, bonus=1.000000, nodes=11 <= 300.000000)
                                      @ 18  som.IdentityDictionary$IdEntry.match(int, Object):boolean (22 bytes)   relevance-based (relevance=1.000000, probability=59886.520034, bonus=1.000000, nodes=12 <= 300.000000)
                                    @ 4  som.Dictionary.at(Dictionary$CustomHash):Object (39 bytes)   relevance-based (relevance=1.000000, probability=59886.520034, bonus=1.000000, nodes=28 <= 300.000000)
                                  @ 6  deltablue.Strength.of(Strength$Sym):Strength (11 bytes)   relevance-based (relevance=1.000000, probability=59886.520034, bonus=1.000000, nodes=31 <= 300.000000)
                                @ 2  deltablue.AbstractConstraint.<init>(Strength$Sym):void (13 bytes)   relevance-based (relevance=1.000000, probability=59886.520034, bonus=1.000000, nodes=35 <= 300.000000)
                              @ 6  deltablue.BinaryConstraint.<init>(Variable, Variable, Strength$Sym, Planner):void (21 bytes)   relevance-based (relevance=1.000000, probability=59886.520034, bonus=1.000000, nodes=45 <= 300.000000)
                            @ 5  deltablue.Variable.addConstraint(AbstractConstraint):void (9 bytes)   inline method (bytecode parsing)
                            @ 13  deltablue.Variable.addConstraint(AbstractConstraint):void (9 bytes)   inline method (bytecode parsing)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                  @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000131, probability=7.850331, bonus=1.000000, nodes=41 > 0.039331)
                                @ 5  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=59886.520034, bonus=1.000000, nodes=35 <= 300.000000)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                  @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000131, probability=7.850331, bonus=1.000000, nodes=41 > 0.039331)
                                @ 5  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000131, probability=59886.520034, bonus=1.000000, nodes=35 <= 300.000000)
                              @ 1  deltablue.BinaryConstraint.addToGraph():void (22 bytes)   relevance-based (relevance=1.000000, probability=59886.520034, bonus=1.000000, nodes=86 <= 300.000000)
                                @ 1  deltablue.Planner.newMark():int (15 bytes)   relevance-based (relevance=1.000000, probability=59886.520034, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f45e0031810.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                @ 8  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 697, relevance=1.000000, probability=59886.520034, bonus=1.000000, nodes=72)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f45e0031810.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                @ 19  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 697, relevance=1.000000, probability=75532.120615, bonus=1.000000, nodes=72)
                              @ 6  deltablue.Planner.incrementalAdd(AbstractConstraint):void (27 bytes)   relevance-based (relevance=1.000131, probability=59886.520034, bonus=1.000000, nodes=28 <= 300.000000)
                                  @ 7  deltablue.Strength$Sym.customHash():int (5 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                                @ 1  som.Dictionary.hash(Dictionary$CustomHash):int (20 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                            @ 6  som.Dictionary.getBucketIdx(int):int (10 bytes)   inline method (bytecode parsing)
                                @ 7  som.Dictionary.getBucket(int):Dictionary$Entry (11 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                                @ 18  som.IdentityDictionary$IdEntry.match(int, Object):boolean (22 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=13 <= 300.000000)
                              @ 4  som.Dictionary.at(Dictionary$CustomHash):Object (39 bytes)   relevance-based (relevance=1.000148, probability=1.000000, bonus=1.000000, nodes=28 <= 300.000000)
                            @ 5  deltablue.Variable.addConstraint(AbstractConstraint):void (9 bytes)   inline method (bytecode parsing)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                  @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000131, probability=0.000131, bonus=1.000000, nodes=41 > 0.039331)
                                @ 5  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=35 <= 300.000000)
                              @ 1  deltablue.UnaryConstraint.addToGraph():void (14 bytes)   relevance-based (relevance=1.000148, probability=1.000000, bonus=1.000000, nodes=47 <= 300.000000)
                                @ 1  deltablue.Planner.newMark():int (15 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f45e0031810.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                @ 8  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 697, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=72)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f45e0031810.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                @ 19  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 697, relevance=1.000000, probability=1.261254, bonus=1.000000, nodes=72)
                              @ 6  deltablue.Planner.incrementalAdd(AbstractConstraint):void (27 bytes)   relevance-based (relevance=1.000148, probability=1.000000, bonus=1.000000, nodes=28 <= 300.000000)
                                  @ 7  deltablue.Strength$Sym.customHash():int (5 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                                @ 1  som.Dictionary.hash(Dictionary$CustomHash):int (20 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                            @ 6  som.Dictionary.getBucketIdx(int):int (10 bytes)   inline method (bytecode parsing)
                                @ 7  som.Dictionary.getBucket(int):Dictionary$Entry (11 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                                @ 18  som.IdentityDictionary$IdEntry.match(int, Object):boolean (22 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=13 <= 300.000000)
                              @ 4  som.Dictionary.at(Dictionary$CustomHash):Object (39 bytes)   relevance-based (relevance=1.000148, probability=1.000000, bonus=1.000000, nodes=28 <= 300.000000)
                            @ 5  deltablue.Variable.addConstraint(AbstractConstraint):void (9 bytes)   inline method (bytecode parsing)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                  @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000131, probability=0.000131, bonus=1.000000, nodes=41 > 0.039331)
                                @ 5  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=35 <= 300.000000)
                              @ 1  deltablue.UnaryConstraint.addToGraph():void (14 bytes)   relevance-based (relevance=1.000148, probability=1.000000, bonus=1.000000, nodes=47 <= 300.000000)
                                @ 1  deltablue.Planner.newMark():int (15 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f45e0031810.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                @ 8  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 697, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=72)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f45e0031810.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                @ 19  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 697, relevance=1.000000, probability=1.261254, bonus=1.000000, nodes=72)
                              @ 6  deltablue.Planner.incrementalAdd(AbstractConstraint):void (27 bytes)   relevance-based (relevance=1.000148, probability=1.000000, bonus=1.000000, nodes=28 <= 300.000000)
                            @ 5  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                  @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000131, probability=0.000131, bonus=1.000000, nodes=41 > 0.039331)
                                @ 11  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=35 <= 300.000000)
                              @ 96  som.Vector.with(Object):Vector (16 bytes)   relevance-based (relevance=1.000148, probability=1.000000, bonus=1.000000, nodes=40 <= 300.000000)
                            @ 4  som.Vector.<init>():void (7 bytes)   inline method (bytecode parsing)
                              @ 3  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 10  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.Planner$$Lambda/0x00007f45e0081878.<init>(Vector):void (10 bytes)   inline method (bytecode parsing)
                                    @ 1  deltablue.AbstractConstraint.isInput():boolean (2 bytes)   not inlining no type profile exists
                                    @ 8  deltablue.AbstractConstraint.isSatisfied():boolean (0 bytes)   not inlining no type profile exists
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                        @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000131, probability=0.000304, bonus=1.000000, nodes=41 > 0.039331)
                                      @ 16  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=2.316539, bonus=1.000000, nodes=35 <= 300.000000)
                                    @ 8  deltablue.Planner.lambda$extractPlanFromConstraints$1(Vector, AbstractConstraint):void (20 bytes)   relevance-based (relevance=1.000000, probability=9.266156, bonus=1.000000, nodes=59 <= 300.000000)
                                  @ 20  deltablue.Planner$$Lambda/0x00007f45e0081878.apply(Object):void (12 bytes)   relevance-based (relevance=1.000000, probability=9.266156, bonus=1.000000, nodes=64 <= 300.000000)
                                @ 15  som.Vector.forEach(ForEachInterface):void (32 bytes)   not inlining callee invoke probability is too high (invokeP=13.899537, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=77)
                            @ 9  deltablue.Plan.<init>():void (7 bytes)   inline method (bytecode parsing)
                              @ 3  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 39  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 67  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                                @ 20  deltablue.Planner.makePlan(Vector):Plan (86 bytes)   not inlining too large previous low-level graph (low-level-nodes: 819, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=69)
                              @ 104  deltablue.Planner.extractPlanFromConstraints(Vector):Plan (24 bytes)   relevance-based (relevance=1.000148, probability=1.000000, bonus=1.000000, nodes=27 <= 300.000000)
                                @ 1  deltablue.UnaryConstraint.isSatisfied():boolean (5 bytes)   trivial (relevance=2.000000, probability=1.000000, bonus=1.000000, nodes=5)
                            @ 21  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.Planner$$Lambda/0x00007f45e0083d70.<init>(Planner):void (10 bytes)   inline method (bytecode parsing)
                                  @ 1  deltablue.UnaryConstraint.getOutput():Variable (5 bytes)   trivial (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=5)
                                  @ 6  deltablue.UnaryConstraint.markUnsatisfied():void (6 bytes)   trivial (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=7)
                            @ 1  som.Vector.capacity():int (6 bytes)   inline method (bytecode parsing)
                            @ 31  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object, Object, Object, Object):Object (13 bytes)   inline method (bytecode parsing)
                              @ 9  java.lang.invoke.LambdaForm$DMH/0x00007f45e0123400.newInvokeSpecial(Object, Object, Object, Object, Object):Object (30 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 7  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                        @ 24  som.Vector$$Lambda/0x00007f45e0082e10.<init>(Object, boolean[], Object[], int[]):void (26 bytes)   relevance-based (relevance=1.000000, probability=0.250000, bonus=1.000000, nodes=17 <= 300.000000)
                                            @ 17  som.Vector.lambda$remove$0(Object, boolean[], Object[], int[], Object):void (28 bytes)   relevance-based (relevance=1.000000, probability=2.316539, bonus=1.000000, nodes=18 <= 300.000000)
                                          @ 20  som.Vector$$Lambda/0x00007f45e0082e10.apply(Object):void (21 bytes)   relevance-based (relevance=1.000000, probability=2.316539, bonus=1.000000, nodes=19 <= 300.000000)
                                        @ 36  som.Vector.forEach(ForEachInterface):void (32 bytes)   relevance-based (relevance=1.000000, probability=0.250000, bonus=1.000000, nodes=35 <= 300.000000)
                                      @ 5  som.Vector.remove(Object):boolean (61 bytes)   relevance-based (relevance=2.000000, probability=0.250000, bonus=1.000000, nodes=67 <= 300.000000)
                                    @ 12  deltablue.Variable.removeConstraint(AbstractConstraint):void (23 bytes)   relevance-based (relevance=1.000000, probability=0.250000, bonus=1.000000, nodes=84 <= 300.000000)
                                  @ 10  deltablue.UnaryConstraint.removeFromGraph():void (21 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=94 <= 300.000000)
                            @ 4  som.Vector.<init>():void (7 bytes)   inline method (bytecode parsing)
                              @ 3  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 10  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 14  deltablue.Strength.absoluteWeakest():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 17  deltablue.Variable.setWalkStrength(Strength):void (6 bytes)   inline method (bytecode parsing)
                            @ 22  deltablue.Variable.setStay(boolean):void (6 bytes)   inline method (bytecode parsing)
                            @ 48  deltablue.Variable.getConstraints():Vector (5 bytes)   inline accessor method (bytecode parsing)
                            @ 52  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.Planner$$Lambda/0x00007f45e0083030.<init>(Vector):void (10 bytes)   inline method (bytecode parsing)
                            @ 64  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.Planner$$Lambda/0x00007f45e0083250.<init>(Vector):void (10 bytes)   inline method (bytecode parsing)
                            @ 76  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object):Object (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.lang.invoke.LambdaForm$MH/0x00007f45e0000800.invoke(Object):Object (8 bytes)   inline method (bytecode parsing)
                                  @ 15  deltablue.Planner.removePropagateFrom(Variable):Vector (86 bytes)   not inlining too large previous low-level graph (low-level-nodes: 939, relevance=2.000000, probability=0.500000, bonus=1.000000, nodes=81)
                            @ 8  deltablue.Planner.lambda$incrementalRemove$0(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                                        @ 1  deltablue.Planner.newMark():int (15 bytes)   relevance-based (relevance=1.000000, probability=4.633078, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f45e0031810.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                        @ 8  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 697, relevance=1.000000, probability=4.633078, bonus=1.000000, nodes=72)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f45e0031810.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                        @ 19  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 697, relevance=1.000000, probability=5.843489, bonus=1.000000, nodes=72)
                                      @ 2  deltablue.Planner.incrementalAdd(AbstractConstraint):void (27 bytes)   relevance-based (relevance=1.000000, probability=4.633078, bonus=1.000000, nodes=28 <= 300.000000)
                                    @ 20  deltablue.Planner$$Lambda/0x00007f45e0083d70.apply(Object):void (12 bytes)   relevance-based (relevance=1.000000, probability=4.633078, bonus=1.000000, nodes=37 <= 300.000000)
                                  @ 26  som.Vector.forEach(ForEachInterface):void (32 bytes)   not inlining callee invoke probability is too high (invokeP=20.953133, relevance=2.000000, probability=0.500000, bonus=1.000000, nodes=53)
                                @ 9  deltablue.Planner.incrementalRemove(AbstractConstraint):void (30 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=115 <= 300.000000)
                            @ 1  som.Vector.capacity():int (6 bytes)   inline method (bytecode parsing)
                            @ 31  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object, Object, Object, Object):Object (13 bytes)   inline method (bytecode parsing)
                              @ 9  java.lang.invoke.LambdaForm$DMH/0x00007f45e0123400.newInvokeSpecial(Object, Object, Object, Object, Object):Object (30 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 7  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                      @ 24  som.Vector$$Lambda/0x00007f45e0082e10.<init>(Object, boolean[], Object[], int[]):void (26 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=17 <= 300.000000)
                                          @ 17  som.Vector.lambda$remove$0(Object, boolean[], Object[], int[], Object):void (28 bytes)   relevance-based (relevance=1.000000, probability=4.633078, bonus=1.000000, nodes=18 <= 300.000000)
                                        @ 20  som.Vector$$Lambda/0x00007f45e0082e10.apply(Object):void (21 bytes)   relevance-based (relevance=1.000000, probability=4.633078, bonus=1.000000, nodes=19 <= 300.000000)
                                      @ 36  som.Vector.forEach(ForEachInterface):void (32 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=35 <= 300.000000)
                                    @ 5  som.Vector.remove(Object):boolean (61 bytes)   relevance-based (relevance=2.000000, probability=0.500000, bonus=1.000000, nodes=67 <= 300.000000)
                                  @ 12  deltablue.Variable.removeConstraint(AbstractConstraint):void (23 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=84 <= 300.000000)
                                @ 13  deltablue.UnaryConstraint.removeFromGraph():void (21 bytes)   relevance-based (relevance=4.000000, probability=1.000000, bonus=1.000000, nodes=94 <= 300.000000)
                              @ 161  deltablue.AbstractConstraint.destroyConstraint(Planner):void (17 bytes)   relevance-based (relevance=1.000148, probability=1.000000, bonus=1.000000, nodes=212 <= 300.000000)
                            @ 4  deltablue.Plan.lambda$execute$0(AbstractConstraint):void (5 bytes)   inline method (bytecode parsing)
                            @ 18  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 21  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 35  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 38  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 18  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 25  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 33  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 37  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 51  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 58  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 66  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 70  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                                  @ 1  deltablue.EqualityConstraint.execute():void (42 bytes)   relevance-based (relevance=1.000000, probability=926.615571, bonus=1.000000, nodes=103 <= 300.000000)
                                @ 20  deltablue.Plan$$Lambda/0x00007f45e0082818.apply(Object):void (8 bytes)   relevance-based (relevance=1.000000, probability=926.615571, bonus=1.000000, nodes=113 <= 300.000000)
                              @ 6  som.Vector.forEach(ForEachInterface):void (32 bytes)   relevance-based (relevance=1.000000, probability=100.000000, bonus=1.000000, nodes=127 <= 300.000000)
                            @ 4  som.Vector.<init>():void (7 bytes)   inline method (bytecode parsing)
                              @ 3  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 10  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 14  deltablue.Strength.absoluteWeakest():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 17  deltablue.Variable.setWalkStrength(Strength):void (6 bytes)   inline method (bytecode parsing)
                            @ 22  deltablue.Variable.setStay(boolean):void (6 bytes)   inline method (bytecode parsing)
                            @ 48  deltablue.Variable.getConstraints():Vector (5 bytes)   inline accessor method (bytecode parsing)
                            @ 52  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.Planner$$Lambda/0x00007f45e0083030.<init>(Vector):void (10 bytes)   inline method (bytecode parsing)
                            @ 64  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.Planner$$Lambda/0x00007f45e0083250.<init>(Vector):void (10 bytes)   inline method (bytecode parsing)
                            @ 76  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object):Object (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.lang.invoke.LambdaForm$MH/0x00007f45e0000800.invoke(Object):Object (8 bytes)   inline method (bytecode parsing)
                            @ 5  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                  @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000131, probability=0.000131, bonus=1.000000, nodes=41 > 0.039331)
                                @ 11  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=35 <= 300.000000)
                              @ 26  som.Vector.with(Object):Vector (16 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=40 <= 300.000000)
                              @ 31  som.Vector.isEmpty():boolean (17 bytes)   relevance-based (relevance=1.000028, probability=35651.000000, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 1  som.Vector.size():int (10 bytes)   inline method (bytecode parsing)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                      @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.250000, bonus=1.000000, nodes=13 <= 300.000000)
                                    @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.250000, bonus=1.000000, nodes=24 <= 300.000000)
                                  @ 45  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.250000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                      @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.062500, bonus=1.000000, nodes=13 <= 300.000000)
                                    @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.062500, bonus=1.000000, nodes=24 <= 300.000000)
                                  @ 101  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.062500, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                      @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.062500, bonus=1.000000, nodes=13 <= 300.000000)
                                    @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.062500, bonus=1.000000, nodes=24 <= 300.000000)
                                  @ 114  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.062500, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                      @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.010417, bonus=1.000000, nodes=13 <= 300.000000)
                                    @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.010417, bonus=1.000000, nodes=24 <= 300.000000)
                                  @ 184  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.010417, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                      @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.010417, bonus=1.000000, nodes=13 <= 300.000000)
                                    @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.010417, bonus=1.000000, nodes=24 <= 300.000000)
                                  @ 218  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.010417, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                        @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.003906, bonus=1.000000, nodes=13 <= 300.000000)
                                      @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.003906, bonus=1.000000, nodes=24 <= 300.000000)
                                    @ 45  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.003906, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                        @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000977, bonus=1.000000, nodes=13 <= 300.000000)
                                      @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000977, bonus=1.000000, nodes=24 <= 300.000000)
                                    @ 101  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000977, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                        @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000977, bonus=1.000000, nodes=13 <= 300.000000)
                                      @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000977, bonus=1.000000, nodes=24 <= 300.000000)
                                    @ 114  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000977, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                        @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000163, bonus=1.000000, nodes=13 <= 300.000000)
                                      @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000163, bonus=1.000000, nodes=24 <= 300.000000)
                                    @ 184  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000163, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                        @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000163, bonus=1.000000, nodes=13 <= 300.000000)
                                      @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000163, bonus=1.000000, nodes=24 <= 300.000000)
                                    @ 218  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000163, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000061, bonus=1.000000, nodes=13 <= 300.000000)
                                        @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000061, bonus=1.000000, nodes=24 <= 300.000000)
                                      @ 45  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000061, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000015, bonus=1.000000, nodes=13 <= 300.000000)
                                        @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000015, bonus=1.000000, nodes=24 <= 300.000000)
                                      @ 101  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000015, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000015, bonus=1.000000, nodes=13 <= 300.000000)
                                        @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000015, bonus=1.000000, nodes=24 <= 300.000000)
                                      @ 114  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000015, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000003, bonus=1.000000, nodes=13 <= 300.000000)
                                        @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000003, bonus=1.000000, nodes=24 <= 300.000000)
                                      @ 184  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000003, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000003, bonus=1.000000, nodes=13 <= 300.000000)
                                        @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000003, bonus=1.000000, nodes=24 <= 300.000000)
                                      @ 218  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000003, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                            @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000001, bonus=1.000000, nodes=13 <= 300.000000)
                                          @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000001, bonus=1.000000, nodes=24 <= 300.000000)
                                        @ 45  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000001, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                            @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                          @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                        @ 101  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                            @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                          @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                        @ 114  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                            @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                          @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                        @ 184  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                            @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                          @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                        @ 218  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 45  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 101  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 114  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 184  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 218  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 45  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 101  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 114  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 184  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 218  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                                          @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining it exceeds the maximum recursive inlining depth
                                          @ 269  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining it exceeds the maximum recursive inlining depth
                                          @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=202 <= 300.000000)
                                        @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=387 > 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 45  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 101  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 114  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 184  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 218  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 45  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 101  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 114  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 184  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 218  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                                          @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining it exceeds the maximum recursive inlining depth
                                          @ 269  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining it exceeds the maximum recursive inlining depth
                                          @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=202 <= 300.000000)
                                        @ 269  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=387 > 300.000000)
                                      @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   relevance-based (relevance=1.000000, probability=0.000002, bonus=1.000000, nodes=202 <= 300.000000)
                                    @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.000122, bonus=1.000000, nodes=387 > 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000061, bonus=1.000000, nodes=13 <= 300.000000)
                                        @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000061, bonus=1.000000, nodes=24 <= 300.000000)
                                      @ 45  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000061, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000015, bonus=1.000000, nodes=13 <= 300.000000)
                                        @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000015, bonus=1.000000, nodes=24 <= 300.000000)
                                      @ 101  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000015, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000015, bonus=1.000000, nodes=13 <= 300.000000)
                                        @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000015, bonus=1.000000, nodes=24 <= 300.000000)
                                      @ 114  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000015, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000003, bonus=1.000000, nodes=13 <= 300.000000)
                                        @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000003, bonus=1.000000, nodes=24 <= 300.000000)
                                      @ 184  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000003, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000003, bonus=1.000000, nodes=13 <= 300.000000)
                                        @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000003, bonus=1.000000, nodes=24 <= 300.000000)
                                      @ 218  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000003, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                            @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000001, bonus=1.000000, nodes=13 <= 300.000000)
                                          @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000001, bonus=1.000000, nodes=24 <= 300.000000)
                                        @ 45  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000001, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                            @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                          @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                        @ 101  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                            @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                          @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                        @ 114  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                            @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                          @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                        @ 184  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                            @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                          @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                        @ 218  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 45  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 101  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 114  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 184  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 218  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 45  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 101  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 114  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 184  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 218  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                                          @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining it exceeds the maximum recursive inlining depth
                                          @ 269  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining it exceeds the maximum recursive inlining depth
                                          @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=202 <= 300.000000)
                                        @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=387 > 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 45  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 101  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 114  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 184  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 218  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 45  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 101  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 114  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 184  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 218  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                                          @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining it exceeds the maximum recursive inlining depth
                                          @ 269  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining it exceeds the maximum recursive inlining depth
                                          @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=202 <= 300.000000)
                                        @ 269  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=387 > 300.000000)
                                      @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   relevance-based (relevance=1.000000, probability=0.000002, bonus=1.000000, nodes=202 <= 300.000000)
                                    @ 269  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.000122, bonus=1.000000, nodes=387 > 300.000000)
                                  @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   relevance-based (relevance=1.000000, probability=0.007813, bonus=1.000000, nodes=202 <= 300.000000)
                                @ 19  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=387 > 300.000000)
                              @ 81  som.Vector.sort(Comparator):void (23 bytes)   relevance-based (relevance=1.000131, probability=1.000000, bonus=1.000000, nodes=22 <= 300.000000)
                                @ 1  som.Vector.isEmpty():boolean (17 bytes)   relevance-based (relevance=1.000000, probability=35650.000000, bonus=1.000000, nodes=10 <= 300.000000)
                              @ 38  som.Vector.removeFirst():Object (31 bytes)   relevance-based (relevance=1.000000, probability=35650.000000, bonus=1.000000, nodes=18 <= 300.000000)
                                    @ 1  deltablue.BinaryConstraint.isSatisfied():boolean (13 bytes)   trivial (relevance=1.000000, probability=330338.451075, bonus=1.000000, nodes=9)
                                  @ 8  deltablue.Planner.lambda$removePropagateFrom$4(Vector, AbstractConstraint):void (13 bytes)   relevance-based (relevance=1.000000, probability=330338.451075, bonus=1.000000, nodes=29 <= 300.000000)
                                @ 20  deltablue.Planner$$Lambda/0x00007f45e0083030.apply(Object):void (12 bytes)   relevance-based (relevance=1.000000, probability=330338.451075, bonus=1.000000, nodes=33 <= 300.000000)
                              @ 57  som.Vector.forEach(ForEachInterface):void (32 bytes)   relevance-based (relevance=1.000000, probability=35650.000000, bonus=1.000000, nodes=49 <= 300.000000)
                            @ 1  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 6  deltablue.Variable.getConstraints():Vector (5 bytes)   inline accessor method (bytecode parsing)
                            @ 11  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object, Object):Object (10 bytes)   inline method (bytecode parsing)
                              @ 6  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object, Object):Object (24 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 19  deltablue.Planner$$Lambda/0x00007f45e0083470.<init>(AbstractConstraint, ForEachInterface):void (15 bytes)   relevance-based (relevance=1.000000, probability=35650.000000, bonus=1.000000, nodes=11 <= 300.000000)
                                      @ 6  deltablue.BinaryConstraint.isSatisfied():boolean (13 bytes)   trivial (relevance=1.000000, probability=165169.225538, bonus=1.000000, nodes=9)
                            @ 39  deltablue.Variable.getWalkStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 45  deltablue.Variable.setWalkStrength(Strength):void (6 bytes)   inline method (bytecode parsing)
                            @ 50  deltablue.Variable.getStay():boolean (5 bytes)   inline accessor method (bytecode parsing)
                            @ 60  deltablue.Variable.getStay():boolean (5 bytes)   inline accessor method (bytecode parsing)
                            @ 70  deltablue.Variable.getStay():boolean (5 bytes)   inline accessor method (bytecode parsing)
                            @ 81  deltablue.Variable.setStay(boolean):void (6 bytes)   inline method (bytecode parsing)
                            @ 85  deltablue.Variable.getStay():boolean (5 bytes)   inline accessor method (bytecode parsing)
                            @ 39  deltablue.Variable.getWalkStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 45  deltablue.Variable.setWalkStrength(Strength):void (6 bytes)   inline method (bytecode parsing)
                            @ 50  deltablue.Variable.getStay():boolean (5 bytes)   inline accessor method (bytecode parsing)
                            @ 53  deltablue.Variable.setStay(boolean):void (6 bytes)   inline method (bytecode parsing)
                            @ 57  deltablue.Variable.getStay():boolean (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 2  deltablue.Strength.weaker(Strength):boolean (17 bytes)   relevance-based (relevance=0.577718, probability=53094.616690, bonus=1.000000, nodes=11 <= 173.315450)
                                            @ 42  deltablue.Strength.weakest(Strength):Strength (14 bytes)   relevance-based (relevance=0.577718, probability=53094.616690, bonus=1.000000, nodes=12 <= 173.315450)
                            @ 18  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 21  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 35  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 38  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                                            @ 64  deltablue.EqualityConstraint.execute():void (42 bytes)   relevance-based (relevance=0.525731, probability=48316.771878, bonus=1.000000, nodes=38 <= 157.719249)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 2  deltablue.Strength.weaker(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=112074.608847, bonus=1.000000, nodes=11 <= 300.000000)
                                            @ 42  deltablue.Strength.weakest(Strength):Strength (14 bytes)   relevance-based (relevance=1.000008, probability=112074.608847, bonus=1.000000, nodes=12 <= 300.000000)
                            @ 18  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 25  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 33  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 37  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 51  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 58  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 66  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 70  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                                            @ 92  deltablue.ScaleConstraint.execute():void (74 bytes)   relevance-based (relevance=0.927241, probability=103919.311552, bonus=1.000000, nodes=62 <= 278.172155)
                                          @ 1  deltablue.ScaleConstraint.recalculate():void (96 bytes)   relevance-based (relevance=1.000000, probability=165169.225538, bonus=1.000000, nodes=223 <= 300.000000)
                                          @ 6  deltablue.BinaryConstraint.getOutput():Variable (22 bytes)   relevance-based (relevance=1.473755, probability=165169.225538, bonus=1.000000, nodes=17 <= 300.000000)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                            @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000131, probability=21.651501, bonus=1.000000, nodes=41 > 0.039331)
                                          @ 9  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.473755, probability=165169.225538, bonus=1.000000, nodes=35 <= 300.000000)
                                        @ 8  deltablue.Planner.lambda$removePropagateFrom$5(Vector, AbstractConstraint):void (13 bytes)   relevance-based (relevance=1.000000, probability=165169.225538, bonus=1.000000, nodes=274 <= 300.000000)
                                      @ 14  deltablue.Planner$$Lambda/0x00007f45e0083250.apply(Object):void (12 bytes)   relevance-based (relevance=1.000000, probability=165169.225538, bonus=1.000000, nodes=278 <= 300.000000)
                                    @ 12  deltablue.Planner.lambda$constraintsConsuming$3(AbstractConstraint, ForEachInterface, AbstractConstraint):void (20 bytes)   not inlining relevance-based (relevance=1.000000, probability=330338.451075, bonus=1.000000, nodes=306 > 300.000000)
                                  @ 20  deltablue.Planner$$Lambda/0x00007f45e0083470.apply(Object):void (16 bytes)   relevance-based (relevance=1.000000, probability=330338.451075, bonus=1.000000, nodes=13 <= 300.000000)
                                @ 16  som.Vector.forEach(ForEachInterface):void (32 bytes)   not inlining callee invoke probability is too high (invokeP=9.266156, relevance=1.000000, probability=35650.000000, bonus=1.000000, nodes=30)
                              @ 69  deltablue.Planner.constraintsConsuming(Variable, ForEachInterface):void (20 bytes)   relevance-based (relevance=1.000000, probability=35650.000000, bonus=1.000000, nodes=23 <= 300.000000)
                              @ 54  java.lang.Object.equals(Object):boolean (11 bytes)   trivial (relevance=1.007570, probability=8.587587, bonus=1.000000, nodes=9)
                            @ 1  java.util.Objects.requireNonNull(Object):Object (14 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.Planner.lambda$chainTest$7(int):Variable (8 bytes)   inline method (bytecode parsing)
                            @ 15  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 27  deltablue.Strength.absoluteWeakest():Strength (4 bytes)   inline method (bytecode parsing)
                                @ 4  deltablue.Variable.<init>():void (44 bytes)   relevance-based (relevance=1.000000, probability=0.999983, bonus=1.000000, nodes=27 <= 300.000000)
                              @ 17  deltablue.Planner$$Lambda/0x00007f45e0023148.apply(int):Object (5 bytes)   relevance-based (relevance=1.000000, probability=0.999983, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.Planner.lambda$chainTest$7(int):Variable (8 bytes)   inline method (bytecode parsing)
                            @ 15  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 27  deltablue.Strength.absoluteWeakest():Strength (4 bytes)   inline method (bytecode parsing)
                                @ 4  deltablue.Variable.<init>():void (44 bytes)   relevance-based (relevance=1.000000, probability=59614.300034, bonus=1.000000, nodes=27 <= 300.000000)
                              @ 17  deltablue.Planner$$Lambda/0x00007f45e0023148.apply(int):Object (5 bytes)   relevance-based (relevance=1.000000, probability=59614.300034, bonus=1.000000, nodes=30 <= 300.000000)
                              @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                              @ 7  jdk.internal.misc.Unsafe.convEndian(boolean, int):int (16 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=16 <= 300.000000)
                            @ 8  jdk.internal.misc.ScopedMemoryAccess.putIntUnalignedInternal(MemorySessionImpl, Object, long, int, boolean):void (37 bytes)   inline method (bytecode parsing)
                              @ 17  jdk.internal.misc.Unsafe.putIntUnaligned(Object, long, int, boolean):void (14 bytes)   inline method (bytecode parsing)
                              @ 7  jdk.internal.misc.Unsafe.convEndian(boolean, int):int (16 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=16 <= 300.000000)
                            @ 7  java.nio.DirectByteBuffer.ix(int):long (10 bytes)   inline method (bytecode parsing)
                              @ 4  java.nio.Buffer.nextPutIndex(int):int (32 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=13 <= 300.000000)
                            @ 7  java.nio.Buffer.session():MemorySessionImpl (20 bytes)   inline method (bytecode parsing)
                            @ 18  jdk.internal.misc.ScopedMemoryAccess.putIntUnaligned(MemorySessionImpl, Object, long, int, boolean):void (23 bytes)   inline method (bytecode parsing)
                              @ 8  jdk.internal.misc.ScopedMemoryAccess.putIntUnalignedInternal(MemorySessionImpl, Object, long, int, boolean):void (37 bytes)   inline method (bytecode parsing)
                                @ 17  jdk.internal.misc.Unsafe.putIntUnaligned(Object, long, int, boolean):void (14 bytes)   inline method (bytecode parsing)
                                @ 7  jdk.internal.misc.Unsafe.convEndian(boolean, int):int (16 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=16 <= 300.000000)
                              @ 11  java.nio.DirectByteBuffer.putInt(long, int):ByteBuffer (39 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=31 <= 300.000000)
                            @ 7  java.nio.Buffer.session():MemorySessionImpl (20 bytes)   inline method (bytecode parsing)
                            @ 18  jdk.internal.misc.ScopedMemoryAccess.putIntUnaligned(MemorySessionImpl, Object, long, int, boolean):void (23 bytes)   inline method (bytecode parsing)
                              @ 8  jdk.internal.misc.ScopedMemoryAccess.putIntUnalignedInternal(MemorySessionImpl, Object, long, int, boolean):void (37 bytes)   inline method (bytecode parsing)
                                @ 17  jdk.internal.misc.Unsafe.putIntUnaligned(Object, long, int, boolean):void (14 bytes)   inline method (bytecode parsing)
                              @ 7  jdk.internal.misc.Unsafe.convEndian(boolean, int):int (16 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=16 <= 300.000000)
                            @ 39  deltablue.Variable.getWalkStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 45  deltablue.Variable.setWalkStrength(Strength):void (6 bytes)   inline method (bytecode parsing)
                            @ 50  deltablue.Variable.getStay():boolean (5 bytes)   inline accessor method (bytecode parsing)
                            @ 60  deltablue.Variable.getStay():boolean (5 bytes)   inline accessor method (bytecode parsing)
                            @ 70  deltablue.Variable.getStay():boolean (5 bytes)   inline accessor method (bytecode parsing)
                            @ 81  deltablue.Variable.setStay(boolean):void (6 bytes)   inline method (bytecode parsing)
                            @ 85  deltablue.Variable.getStay():boolean (5 bytes)   inline accessor method (bytecode parsing)
                            @ 39  deltablue.Variable.getWalkStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 45  deltablue.Variable.setWalkStrength(Strength):void (6 bytes)   inline method (bytecode parsing)
                            @ 50  deltablue.Variable.getStay():boolean (5 bytes)   inline accessor method (bytecode parsing)
                            @ 53  deltablue.Variable.setStay(boolean):void (6 bytes)   inline method (bytecode parsing)
                            @ 57  deltablue.Variable.getStay():boolean (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                    @ 2  deltablue.Strength.weaker(Strength):boolean (17 bytes)   relevance-based (relevance=0.581492, probability=0.325898, bonus=1.000000, nodes=11 <= 174.447571)
                                  @ 42  deltablue.Strength.weakest(Strength):Strength (14 bytes)   relevance-based (relevance=0.581492, probability=0.325898, bonus=1.000000, nodes=12 <= 174.447571)
                            @ 18  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 21  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 35  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 38  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                                  @ 64  deltablue.EqualityConstraint.execute():void (42 bytes)   relevance-based (relevance=0.532473, probability=0.298425, bonus=1.000000, nodes=38 <= 159.741982)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                    @ 2  deltablue.Strength.weaker(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.674102, bonus=1.000000, nodes=11 <= 300.000000)
                                  @ 42  deltablue.Strength.weakest(Strength):Strength (14 bytes)   relevance-based (relevance=1.000008, probability=0.674102, bonus=1.000000, nodes=12 <= 300.000000)
                            @ 18  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 25  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 33  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 37  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 51  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 58  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 66  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 70  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                                  @ 92  deltablue.ScaleConstraint.execute():void (74 bytes)   relevance-based (relevance=0.932177, probability=0.628377, bonus=1.000000, nodes=62 <= 279.652966)
                                @ 1  deltablue.ScaleConstraint.recalculate():void (96 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=223 <= 300.000000)
                                @ 6  deltablue.BinaryConstraint.getOutput():Variable (22 bytes)   relevance-based (relevance=1.483466, probability=1.000000, bonus=1.000000, nodes=17 <= 300.000000)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                  @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000131, probability=0.000131, bonus=1.000000, nodes=41 > 0.039331)
                                @ 9  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.483466, probability=1.000000, bonus=1.000000, nodes=35 <= 300.000000)
                              @ 8  deltablue.Planner.lambda$removePropagateFrom$5(Vector, AbstractConstraint):void (13 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=274 <= 300.000000)
                            @ 4  deltablue.Planner.<init>():void (10 bytes)   inline method (bytecode parsing)
                            @ 16  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object):Object (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.lang.invoke.LambdaForm$MH/0x00007f45e0000800.invoke(Object):Object (8 bytes)   inline method (bytecode parsing)
                            @ 55  deltablue.EqualityConstraint.<init>(Variable, Variable, Strength$Sym, Planner):void (16 bytes)   inline method (bytecode parsing)
                              @ 12  deltablue.AbstractConstraint.addConstraint(Planner):void (10 bytes)   inline method (bytecode parsing)
                            @ 76  deltablue.StayConstraint.<init>(Variable, Strength$Sym, Planner):void (8 bytes)   inline method (bytecode parsing)
                              @ 4  deltablue.UnaryConstraint.<init>(Variable, Strength$Sym, Planner):void (16 bytes)   inline method (bytecode parsing)
                                @ 2  deltablue.AbstractConstraint.<init>(Strength$Sym):void (13 bytes)   inline method (bytecode parsing)
                                  @ 6  deltablue.Strength.of(Strength$Sym):Strength (11 bytes)   inline method (bytecode parsing)
                                @ 12  deltablue.AbstractConstraint.addConstraint(Planner):void (10 bytes)   inline method (bytecode parsing)
                            @ 91  deltablue.EditConstraint.<init>(Variable, Strength$Sym, Planner):void (8 bytes)   inline method (bytecode parsing)
                              @ 4  deltablue.UnaryConstraint.<init>(Variable, Strength$Sym, Planner):void (16 bytes)   inline method (bytecode parsing)
                                @ 2  deltablue.AbstractConstraint.<init>(Strength$Sym):void (13 bytes)   inline method (bytecode parsing)
                                  @ 6  deltablue.Strength.of(Strength$Sym):Strength (11 bytes)   inline method (bytecode parsing)
                                @ 12  deltablue.AbstractConstraint.addConstraint(Planner):void (10 bytes)   inline method (bytecode parsing)
                            @ 124  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 129  deltablue.Plan.execute():void (10 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object):Object (8 bytes)   inline method (bytecode parsing)
                                @ 4  java.lang.invoke.LambdaForm$MH/0x00007f45e0000800.invoke(Object):Object (8 bytes)   inline method (bytecode parsing)
                            @ 135  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 1  java.util.Objects.requireNonNull(Object):Object (14 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.Planner.lambda$chainTest$7(int):Variable (8 bytes)   inline method (bytecode parsing)
                            @ 15  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 27  deltablue.Strength.absoluteWeakest():Strength (4 bytes)   inline method (bytecode parsing)
                                  @ 4  deltablue.Variable.<init>():void (44 bytes)   relevance-based (relevance=1.000000, probability=59887.451613, bonus=1.000000, nodes=27 <= 300.000000)
                                @ 17  deltablue.Planner$$Lambda/0x00007f45e0023148.apply(int):Object (5 bytes)   relevance-based (relevance=1.000000, probability=59887.451613, bonus=1.000000, nodes=30 <= 300.000000)
                              @ 21  java.util.Arrays.setAll(Object[], IntFunction):void (30 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=46 <= 300.000000)
                                  @ 7  deltablue.Strength$Sym.customHash():int (5 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                                @ 1  som.Dictionary.hash(Dictionary$CustomHash):int (20 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                            @ 6  som.Dictionary.getBucketIdx(int):int (10 bytes)   inline method (bytecode parsing)
                                @ 7  som.Dictionary.getBucket(int):Dictionary$Entry (11 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                                @ 18  som.IdentityDictionary$IdEntry.match(int, Object):boolean (22 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=13 <= 300.000000)
                              @ 4  som.Dictionary.at(Dictionary$CustomHash):Object (39 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=28 <= 300.000000)
                            @ 5  deltablue.Variable.addConstraint(AbstractConstraint):void (9 bytes)   inline method (bytecode parsing)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                  @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000131, probability=0.000131, bonus=1.000000, nodes=41 > 0.039331)
                                @ 5  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=35 <= 300.000000)
                              @ 1  deltablue.UnaryConstraint.addToGraph():void (14 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=47 <= 300.000000)
                                @ 1  deltablue.Planner.newMark():int (15 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f45e0031810.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                @ 8  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 697, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=72)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f45e0031810.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                @ 19  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 697, relevance=1.000000, probability=1.261254, bonus=1.000000, nodes=72)
                              @ 6  deltablue.Planner.incrementalAdd(AbstractConstraint):void (27 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=28 <= 300.000000)
                                  @ 7  deltablue.Strength$Sym.customHash():int (5 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                                @ 1  som.Dictionary.hash(Dictionary$CustomHash):int (20 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                            @ 6  som.Dictionary.getBucketIdx(int):int (10 bytes)   inline method (bytecode parsing)
                                @ 7  som.Dictionary.getBucket(int):Dictionary$Entry (11 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                                @ 18  som.IdentityDictionary$IdEntry.match(int, Object):boolean (22 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=13 <= 300.000000)
                              @ 4  som.Dictionary.at(Dictionary$CustomHash):Object (39 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=28 <= 300.000000)
                            @ 5  deltablue.Variable.addConstraint(AbstractConstraint):void (9 bytes)   inline method (bytecode parsing)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                  @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000131, probability=0.000131, bonus=1.000000, nodes=41 > 0.039331)
                                @ 5  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=35 <= 300.000000)
                              @ 1  deltablue.UnaryConstraint.addToGraph():void (14 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=47 <= 300.000000)
                                @ 1  deltablue.Planner.newMark():int (15 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f45e0031810.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                @ 8  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 697, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=72)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f45e0031810.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                @ 19  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 697, relevance=1.000000, probability=1.261254, bonus=1.000000, nodes=72)
                              @ 6  deltablue.Planner.incrementalAdd(AbstractConstraint):void (27 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=28 <= 300.000000)
                            @ 5  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                  @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000131, probability=0.000131, bonus=1.000000, nodes=41 > 0.039331)
                                @ 11  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=35 <= 300.000000)
                              @ 96  som.Vector.with(Object):Vector (16 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=40 <= 300.000000)
                            @ 4  som.Vector.<init>():void (7 bytes)   inline method (bytecode parsing)
                              @ 3  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 10  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.Planner$$Lambda/0x00007f45e0081878.<init>(Vector):void (10 bytes)   inline method (bytecode parsing)
                                    @ 1  deltablue.AbstractConstraint.isInput():boolean (2 bytes)   not inlining no type profile exists
                                    @ 8  deltablue.AbstractConstraint.isSatisfied():boolean (0 bytes)   not inlining no type profile exists
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                        @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000131, probability=0.000303, bonus=1.000000, nodes=41 > 0.039331)
                                      @ 16  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=2.308758, bonus=1.000000, nodes=35 <= 300.000000)
                                    @ 8  deltablue.Planner.lambda$extractPlanFromConstraints$1(Vector, AbstractConstraint):void (20 bytes)   relevance-based (relevance=1.000000, probability=9.235033, bonus=1.000000, nodes=59 <= 300.000000)
                                  @ 20  deltablue.Planner$$Lambda/0x00007f45e0081878.apply(Object):void (12 bytes)   relevance-based (relevance=1.000000, probability=9.235033, bonus=1.000000, nodes=64 <= 300.000000)
                                @ 15  som.Vector.forEach(ForEachInterface):void (32 bytes)   not inlining callee invoke probability is too high (invokeP=13.852852, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=77)
                            @ 9  deltablue.Plan.<init>():void (7 bytes)   inline method (bytecode parsing)
                              @ 3  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 39  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 67  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                                @ 20  deltablue.Planner.makePlan(Vector):Plan (86 bytes)   not inlining too large previous low-level graph (low-level-nodes: 819, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=69)
                              @ 104  deltablue.Planner.extractPlanFromConstraints(Vector):Plan (24 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=27 <= 300.000000)
                                        @ 7  deltablue.Strength$Sym.customHash():int (5 bytes)   trivial (relevance=1.000000, probability=60117.774193, bonus=1.000000, nodes=5)
                                      @ 1  som.Dictionary.hash(Dictionary$CustomHash):int (20 bytes)   trivial (relevance=1.000000, probability=60117.774193, bonus=1.000000, nodes=5)
                            @ 6  som.Dictionary.getBucketIdx(int):int (10 bytes)   inline method (bytecode parsing)
                                      @ 7  som.Dictionary.getBucket(int):Dictionary$Entry (11 bytes)   relevance-based (relevance=1.000000, probability=60117.774193, bonus=1.000000, nodes=11 <= 300.000000)
                                      @ 18  som.IdentityDictionary$IdEntry.match(int, Object):boolean (22 bytes)   relevance-based (relevance=1.000000, probability=60117.774193, bonus=1.000000, nodes=12 <= 300.000000)
                                    @ 4  som.Dictionary.at(Dictionary$CustomHash):Object (39 bytes)   relevance-based (relevance=1.000000, probability=60117.774193, bonus=1.000000, nodes=28 <= 300.000000)
                                  @ 6  deltablue.Strength.of(Strength$Sym):Strength (11 bytes)   relevance-based (relevance=1.000000, probability=60117.774193, bonus=1.000000, nodes=31 <= 300.000000)
                                @ 2  deltablue.AbstractConstraint.<init>(Strength$Sym):void (13 bytes)   relevance-based (relevance=1.000000, probability=60117.774193, bonus=1.000000, nodes=35 <= 300.000000)
                              @ 6  deltablue.BinaryConstraint.<init>(Variable, Variable, Strength$Sym, Planner):void (21 bytes)   relevance-based (relevance=1.000000, probability=60117.774193, bonus=1.000000, nodes=45 <= 300.000000)
                            @ 5  deltablue.Variable.addConstraint(AbstractConstraint):void (9 bytes)   inline method (bytecode parsing)
                            @ 13  deltablue.Variable.addConstraint(AbstractConstraint):void (9 bytes)   inline method (bytecode parsing)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                  @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000131, probability=7.880645, bonus=1.000000, nodes=41 > 0.039331)
                                @ 5  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=60117.774193, bonus=1.000000, nodes=35 <= 300.000000)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                  @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000131, probability=7.880645, bonus=1.000000, nodes=41 > 0.039331)
                                @ 5  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000131, probability=60117.774193, bonus=1.000000, nodes=35 <= 300.000000)
                              @ 1  deltablue.BinaryConstraint.addToGraph():void (22 bytes)   relevance-based (relevance=1.000000, probability=60117.774193, bonus=1.000000, nodes=86 <= 300.000000)
                                @ 1  deltablue.Planner.newMark():int (15 bytes)   relevance-based (relevance=1.000000, probability=60117.774193, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f45e0031810.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                @ 8  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 697, relevance=1.000000, probability=60117.774193, bonus=1.000000, nodes=72)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f45e0031810.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                @ 19  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 697, relevance=1.000000, probability=75823.790879, bonus=1.000000, nodes=72)
                              @ 6  deltablue.Planner.incrementalAdd(AbstractConstraint):void (27 bytes)   relevance-based (relevance=1.000131, probability=60117.774193, bonus=1.000000, nodes=28 <= 300.000000)
                                @ 1  deltablue.UnaryConstraint.isSatisfied():boolean (5 bytes)   trivial (relevance=2.000000, probability=1.000000, bonus=1.000000, nodes=5)
                            @ 21  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.Planner$$Lambda/0x00007f45e0083d70.<init>(Planner):void (10 bytes)   inline method (bytecode parsing)
                                  @ 1  deltablue.UnaryConstraint.getOutput():Variable (5 bytes)   trivial (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=5)
                                  @ 6  deltablue.UnaryConstraint.markUnsatisfied():void (6 bytes)   trivial (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=7)
                            @ 1  som.Vector.capacity():int (6 bytes)   inline method (bytecode parsing)
                            @ 31  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object, Object, Object, Object):Object (13 bytes)   inline method (bytecode parsing)
                              @ 9  java.lang.invoke.LambdaForm$DMH/0x00007f45e0123400.newInvokeSpecial(Object, Object, Object, Object, Object):Object (30 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 7  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                        @ 24  som.Vector$$Lambda/0x00007f45e0082e10.<init>(Object, boolean[], Object[], int[]):void (26 bytes)   relevance-based (relevance=1.000000, probability=0.250000, bonus=1.000000, nodes=17 <= 300.000000)
                                            @ 17  som.Vector.lambda$remove$0(Object, boolean[], Object[], int[], Object):void (28 bytes)   relevance-based (relevance=1.000000, probability=2.308758, bonus=1.000000, nodes=26 <= 300.000000)
                                          @ 20  som.Vector$$Lambda/0x00007f45e0082e10.apply(Object):void (21 bytes)   relevance-based (relevance=1.000000, probability=2.308758, bonus=1.000000, nodes=28 <= 300.000000)
                                        @ 36  som.Vector.forEach(ForEachInterface):void (32 bytes)   relevance-based (relevance=1.000000, probability=0.250000, bonus=1.000000, nodes=41 <= 300.000000)
                                      @ 5  som.Vector.remove(Object):boolean (61 bytes)   relevance-based (relevance=2.000000, probability=0.250000, bonus=1.000000, nodes=73 <= 300.000000)
                                    @ 12  deltablue.Variable.removeConstraint(AbstractConstraint):void (23 bytes)   relevance-based (relevance=1.000000, probability=0.250000, bonus=1.000000, nodes=90 <= 300.000000)
                                  @ 10  deltablue.UnaryConstraint.removeFromGraph():void (21 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=100 <= 300.000000)
                            @ 4  som.Vector.<init>():void (7 bytes)   inline method (bytecode parsing)
                              @ 3  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 10  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 14  deltablue.Strength.absoluteWeakest():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 17  deltablue.Variable.setWalkStrength(Strength):void (6 bytes)   inline method (bytecode parsing)
                            @ 22  deltablue.Variable.setStay(boolean):void (6 bytes)   inline method (bytecode parsing)
                            @ 48  deltablue.Variable.getConstraints():Vector (5 bytes)   inline accessor method (bytecode parsing)
                            @ 52  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.Planner$$Lambda/0x00007f45e0083030.<init>(Vector):void (10 bytes)   inline method (bytecode parsing)
                            @ 64  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.Planner$$Lambda/0x00007f45e0083250.<init>(Vector):void (10 bytes)   inline method (bytecode parsing)
                            @ 76  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object):Object (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.lang.invoke.LambdaForm$MH/0x00007f45e0000800.invoke(Object):Object (8 bytes)   inline method (bytecode parsing)
                                  @ 15  deltablue.Planner.removePropagateFrom(Variable):Vector (86 bytes)   not inlining too large previous low-level graph (low-level-nodes: 764, relevance=2.000000, probability=0.500000, bonus=1.000000, nodes=81)
                            @ 8  deltablue.Planner.lambda$incrementalRemove$0(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                                        @ 1  deltablue.Planner.newMark():int (15 bytes)   relevance-based (relevance=1.000000, probability=4.617516, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f45e0031810.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                        @ 8  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 697, relevance=1.000000, probability=4.617516, bonus=1.000000, nodes=72)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f45e0031810.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                        @ 19  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 697, relevance=1.000000, probability=5.823862, bonus=1.000000, nodes=72)
                                      @ 2  deltablue.Planner.incrementalAdd(AbstractConstraint):void (27 bytes)   relevance-based (relevance=1.000000, probability=4.617516, bonus=1.000000, nodes=28 <= 300.000000)
                                    @ 20  deltablue.Planner$$Lambda/0x00007f45e0083d70.apply(Object):void (12 bytes)   relevance-based (relevance=1.000000, probability=4.617516, bonus=1.000000, nodes=37 <= 300.000000)
                                  @ 26  som.Vector.forEach(ForEachInterface):void (32 bytes)   not inlining callee invoke probability is too high (invokeP=20.882756, relevance=2.000000, probability=0.500000, bonus=1.000000, nodes=53)
                                @ 9  deltablue.Planner.incrementalRemove(AbstractConstraint):void (30 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=121 <= 300.000000)
                            @ 1  som.Vector.capacity():int (6 bytes)   inline method (bytecode parsing)
                            @ 31  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object, Object, Object, Object):Object (13 bytes)   inline method (bytecode parsing)
                              @ 9  java.lang.invoke.LambdaForm$DMH/0x00007f45e0123400.newInvokeSpecial(Object, Object, Object, Object, Object):Object (30 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 7  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                      @ 24  som.Vector$$Lambda/0x00007f45e0082e10.<init>(Object, boolean[], Object[], int[]):void (26 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=17 <= 300.000000)
                                          @ 17  som.Vector.lambda$remove$0(Object, boolean[], Object[], int[], Object):void (28 bytes)   relevance-based (relevance=1.000000, probability=4.617516, bonus=1.000000, nodes=26 <= 300.000000)
                                        @ 20  som.Vector$$Lambda/0x00007f45e0082e10.apply(Object):void (21 bytes)   relevance-based (relevance=1.000000, probability=4.617516, bonus=1.000000, nodes=28 <= 300.000000)
                                      @ 36  som.Vector.forEach(ForEachInterface):void (32 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=41 <= 300.000000)
                                    @ 5  som.Vector.remove(Object):boolean (61 bytes)   relevance-based (relevance=2.000000, probability=0.500000, bonus=1.000000, nodes=73 <= 300.000000)
                                  @ 12  deltablue.Variable.removeConstraint(AbstractConstraint):void (23 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=90 <= 300.000000)
                                @ 13  deltablue.UnaryConstraint.removeFromGraph():void (21 bytes)   relevance-based (relevance=4.000000, probability=1.000000, bonus=1.000000, nodes=100 <= 300.000000)
                              @ 161  deltablue.AbstractConstraint.destroyConstraint(Planner):void (17 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=224 <= 300.000000)
                            @ 4  deltablue.Plan.lambda$execute$0(AbstractConstraint):void (5 bytes)   inline method (bytecode parsing)
                            @ 18  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 21  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 35  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 38  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 18  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 25  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 33  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 37  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 51  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 58  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 66  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 70  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                                  @ 1  deltablue.EqualityConstraint.execute():void (42 bytes)   relevance-based (relevance=1.000000, probability=923.503292, bonus=1.000000, nodes=103 <= 300.000000)
                                @ 20  deltablue.Plan$$Lambda/0x00007f45e0082818.apply(Object):void (8 bytes)   relevance-based (relevance=1.000000, probability=923.503292, bonus=1.000000, nodes=113 <= 300.000000)
                              @ 6  som.Vector.forEach(ForEachInterface):void (32 bytes)   relevance-based (relevance=1.000000, probability=100.000000, bonus=1.000000, nodes=127 <= 300.000000)
                            @ 1  java.util.Objects.requireNonNull(Object):Object (14 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.Planner.lambda$chainTest$7(int):Variable (8 bytes)   inline method (bytecode parsing)
                            @ 15  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 27  deltablue.Strength.absoluteWeakest():Strength (4 bytes)   inline method (bytecode parsing)
                                @ 4  deltablue.Variable.<init>():void (44 bytes)   relevance-based (relevance=1.000000, probability=59887.451613, bonus=1.000000, nodes=27 <= 300.000000)
                              @ 17  deltablue.Planner$$Lambda/0x00007f45e0023148.apply(int):Object (5 bytes)   relevance-based (relevance=1.000000, probability=59887.451613, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 6  deltablue.Variable.getConstraints():Vector (5 bytes)   inline accessor method (bytecode parsing)
                            @ 11  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object, Object):Object (10 bytes)   inline method (bytecode parsing)
                              @ 6  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object, Object):Object (24 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                              @ 19  deltablue.Planner$$Lambda/0x00007f45e0083470.<init>(AbstractConstraint, ForEachInterface):void (15 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                                    @ 6  deltablue.BinaryConstraint.isSatisfied():boolean (13 bytes)   trivial (relevance=1.000000, probability=4.617516, bonus=1.000000, nodes=9)
                                    @ 14  deltablue.Planner$$Lambda/0x00007f45e0083250.apply(Object):void (12 bytes)   not inlining too large previous low-level graph (low-level-nodes: 659, relevance=1.000000, probability=4.617516, bonus=1.000000, nodes=9)
                                  @ 12  deltablue.Planner.lambda$constraintsConsuming$3(AbstractConstraint, ForEachInterface, AbstractConstraint):void (20 bytes)   relevance-based (relevance=1.000000, probability=9.235033, bonus=1.000000, nodes=20 <= 300.000000)
                                @ 20  deltablue.Planner$$Lambda/0x00007f45e0083470.apply(Object):void (16 bytes)   relevance-based (relevance=1.000000, probability=9.235033, bonus=1.000000, nodes=28 <= 300.000000)
                              @ 16  som.Vector.forEach(ForEachInterface):void (32 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=42 <= 300.000000)
                                  @ 3  java.lang.Math.max(int, int):int (11 bytes)   trivial (relevance=0.133950, probability=0.118127, bonus=1.000000, nodes=7)
                                @ 29  jdk.internal.util.ArraysSupport.newLength(int, int, int):int (27 bytes)   relevance-based (relevance=0.133950, probability=0.118127, bonus=1.000000, nodes=15 <= 40.185021)
                              @ 24  java.lang.AbstractStringBuilder.newCapacity(int):int (59 bytes)   relevance-based (relevance=0.133950, probability=0.118127, bonus=1.000000, nodes=27 <= 40.185021)
                                @ 25  java.lang.Math.min(int, int):int (11 bytes)   trivial (relevance=0.133951, probability=0.118126, bonus=1.000000, nodes=7)
                              @ 32  java.util.Arrays.copyOf(byte[], int):byte[] (33 bytes)   relevance-based (relevance=0.133950, probability=0.118127, bonus=1.000000, nodes=28 <= 40.185021)
                                @ 7  deltablue.Strength$Sym.customHash():int (5 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                              @ 1  som.Dictionary.hash(Dictionary$CustomHash):int (20 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=13 <= 300.000000)
                            @ 6  som.Dictionary.getBucketIdx(int):int (10 bytes)   inline method (bytecode parsing)
                              @ 7  som.Dictionary.getBucket(int):Dictionary$Entry (11 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                              @ 18  som.IdentityDictionary$IdEntry.match(int, Object):boolean (22 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=13 <= 300.000000)
                            @ 23  java.lang.String.indexOf(int):int (7 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=23.882238, bonus=1.000000, nodes=9)
                            @ 3  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                                @ 12  java.lang.StringLatin1.charAt(byte[], int):char (15 bytes)   relevance-based (relevance=1.000000, probability=23.882238, bonus=1.000000, nodes=11 <= 300.000000)
                              @ 15  java.lang.String.charAt(int):char (25 bytes)   relevance-based (relevance=1.000000, probability=23.882238, bonus=1.000000, nodes=16 <= 300.000000)
                                @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=23.882238, bonus=1.000000, nodes=9)
                                  @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=23.882238, bonus=1.000000, nodes=5)
                                @ 14  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000000, probability=23.882238, bonus=1.000000, nodes=8)
                            @ 11  java.lang.Math.max(int, int):int (11 bytes)   inline method (bytecode parsing)
                                  @ 1  java.lang.StringLatin1.canEncode(int):boolean (13 bytes)   trivial (relevance=1.000023, probability=23.882238, bonus=1.000000, nodes=5)
                                  @ 18  java.lang.Math.min(int, int):int (11 bytes)   trivial (relevance=1.000023, probability=23.882238, bonus=1.000000, nodes=7)
                                @ 17  java.lang.StringLatin1.indexOf(byte[], int, int, int):int (37 bytes)   relevance-based (relevance=1.000000, probability=23.882238, bonus=1.000000, nodes=18 <= 300.000000)
                              @ 3  java.lang.String.indexOf(int, int):int (37 bytes)   relevance-based (relevance=1.000000, probability=23.882238, bonus=1.000000, nodes=29 <= 300.000000)
                            @ 23  java.lang.String.indexOf(int):int (7 bytes)   inline method (bytecode parsing)
                            @ 35  java.lang.String.indexOf(int):int (7 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=23.856282, bonus=1.000000, nodes=9)
                            @ 3  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                                @ 12  java.lang.StringLatin1.charAt(byte[], int):char (15 bytes)   relevance-based (relevance=1.000000, probability=23.856282, bonus=1.000000, nodes=11 <= 300.000000)
                              @ 15  java.lang.String.charAt(int):char (25 bytes)   relevance-based (relevance=1.000000, probability=23.856282, bonus=1.000000, nodes=16 <= 300.000000)
                                @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=23.856282, bonus=1.000000, nodes=9)
                                  @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=23.856282, bonus=1.000000, nodes=5)
                                @ 14  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000000, probability=23.856282, bonus=1.000000, nodes=8)
                            @ 11  java.lang.Math.max(int, int):int (11 bytes)   inline method (bytecode parsing)
                                  @ 1  java.lang.StringLatin1.canEncode(int):boolean (13 bytes)   trivial (relevance=1.000023, probability=23.856282, bonus=1.000000, nodes=5)
                                  @ 18  java.lang.Math.min(int, int):int (11 bytes)   trivial (relevance=1.000023, probability=23.856282, bonus=1.000000, nodes=7)
                                @ 17  java.lang.StringLatin1.indexOf(byte[], int, int, int):int (37 bytes)   relevance-based (relevance=1.000000, probability=23.856282, bonus=1.000000, nodes=18 <= 300.000000)
                              @ 3  java.lang.String.indexOf(int, int):int (37 bytes)   relevance-based (relevance=1.000000, probability=23.856282, bonus=1.000000, nodes=29 <= 300.000000)
                                @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=23.856282, bonus=1.000000, nodes=9)
                                  @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=23.856282, bonus=1.000000, nodes=5)
                                @ 14  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000000, probability=23.856282, bonus=1.000000, nodes=8)
                            @ 11  java.lang.Math.max(int, int):int (11 bytes)   inline method (bytecode parsing)
                                  @ 1  java.lang.StringLatin1.canEncode(int):boolean (13 bytes)   trivial (relevance=1.000023, probability=23.856282, bonus=1.000000, nodes=5)
                                  @ 18  java.lang.Math.min(int, int):int (11 bytes)   trivial (relevance=1.000023, probability=23.856282, bonus=1.000000, nodes=7)
                                @ 17  java.lang.StringLatin1.indexOf(byte[], int, int, int):int (37 bytes)   relevance-based (relevance=1.000000, probability=23.856282, bonus=1.000000, nodes=18 <= 300.000000)
                              @ 3  java.lang.String.indexOf(int, int):int (37 bytes)   relevance-based (relevance=1.000023, probability=23.856282, bonus=1.000000, nodes=29 <= 300.000000)
                            @ 13  java.util.WeakHashMap.getTable():WeakHashMap$Entry[] (9 bytes)   inline method (bytecode parsing)
                            @ 23  java.util.WeakHashMap.indexFor(int, int):int (6 bytes)   inline method (bytecode parsing)
                              @ 1  java.util.WeakHashMap.maskNull(Object):Object (12 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=6)
                                  @ 17  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=0.015302, probability=0.009619, bonus=1.000000, nodes=9)
                                  @ 27  java.lang.StringLatin1.hashCode(byte[]):int (52 bytes)   not inlining relevance-based (relevance=0.015294, probability=0.009614, bonus=1.000000, nodes=22 > 4.588326)
                                  @ 37  java.lang.StringUTF16.hashCode(byte[]):int (52 bytes)   not inlining relevance-based (relevance=0.000008, probability=0.000005, bonus=1.000000, nodes=23 > 0.002314)
                                @ 1  java.lang.String.hashCode():int (60 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=48 <= 300.000000)
                              @ 7  java.util.WeakHashMap.hash(Object):int (28 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=74 <= 300.000000)
                            @ 33  java.util.WeakHashMap.indexFor(int, int):int (6 bytes)   inline method (bytecode parsing)
                              @ 1  java.util.WeakHashMap.expungeStaleEntries():void (139 bytes)   not inlining too large previous low-level graph (low-level-nodes: 496, relevance=1.590840, probability=1.000000, bonus=1.000000, nodes=70)
                            @ 2  java.lang.ref.Reference.refersTo(Object):boolean (6 bytes)   inline method (bytecode parsing)
                              @ 2  java.lang.ref.Reference.refersToImpl(Object):boolean (6 bytes)   inline method (bytecode parsing)
                            @ 11  java.lang.ref.Reference.get():Object (5 bytes)   inline accessor method (bytecode parsing)
                                @ 21  java.lang.String.equals(Object):boolean (56 bytes)   not inlining relevance-based (relevance=0.034690, probability=0.031568, bonus=1.000000, nodes=50 > 10.406938)
                              @ 54  java.util.WeakHashMap.matchesKey(WeakHashMap$Entry, Object):boolean (33 bytes)   relevance-based (relevance=0.355440, probability=0.355024, bonus=1.000000, nodes=32 <= 106.631961)
                            @ 3  java.lang.ref.WeakReference.<init>(Object, ReferenceQueue):void (7 bytes)   inline method (bytecode parsing)
                                @ 3  java.lang.ref.Reference.<init>(Object, ReferenceQueue):void (25 bytes)   relevance-based (relevance=1.000000, probability=0.998831, bonus=1.000000, nodes=20 <= 300.000000)
                              @ 127  java.util.WeakHashMap$Entry.<init>(Object, Object, ReferenceQueue, int, WeakHashMap$Entry):void (24 bytes)   relevance-based (relevance=1.588981, probability=0.998831, bonus=1.000000, nodes=32 <= 300.000000)
                            @ 1  java.util.WeakHashMap.getTable():WeakHashMap$Entry[] (9 bytes)   inline method (bytecode parsing)
                            @ 23  java.util.WeakHashMap.newTable(int):WeakHashMap$Entry[] (5 bytes)   inline method (bytecode parsing)
                              @ 155  java.util.WeakHashMap.resize(int):void (86 bytes)   not inlining relevance-based (relevance=0.006770, probability=0.004256, bonus=1.000000, nodes=55 > 2.031050)
                            @ 18  jdk.graal.compiler.replacements.AllocationSnippets.allocateInstanceImpl(Word, UnsignedWord, boolean, AllocationSnippets$FillContent, boolean, boolean, AllocationSnippets$AllocationProfilingData):Object (143 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getTLABInfo():Word (5 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getThread():Word (8 bytes)   inline method (bytecode parsing)
                                  @ 4  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.registerAsWord(Register):Word (7 bytes)   inline method (bytecode parsing)
                              @ 9  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.readTlabTop(Word):Word (5 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.readTlabTop(Word):Word (17 bytes)   inline method (bytecode parsing)
                              @ 17  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.readTlabEnd(Word):Word (5 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.readTlabEnd(Word):Word (17 bytes)   inline method (bytecode parsing)
                              @ 35  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.useTLAB():boolean (7 bytes)   inline method (bytecode parsing)
                              @ 47  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.shouldAllocateInTLAB(UnsignedWord, boolean):boolean (33 bytes)   inline method (bytecode parsing)
                              @ 77  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.writeTlabTop(Word, Word):void (6 bytes)   inline method (bytecode parsing)
                                @ 2  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.writeTlabTop(Word, Word):void (15 bytes)   inline method (bytecode parsing)
                              @ 84  jdk.graal.compiler.replacements.AllocationSnippets.emitPrefetchAllocate(Word, boolean):void (61 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getPrefetchStyle():int (7 bytes)   inline method (bytecode parsing)
                                @ 9  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getPrefetchLines(boolean):int (18 bytes)   inline method (bytecode parsing)
                                @ 14  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getPrefetchStepSize():int (7 bytes)   inline method (bytecode parsing)
                                @ 20  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getPrefetchDistance():int (7 bytes)   inline method (bytecode parsing)
                              @ 103  jdk.graal.compiler.replacements.AllocationSnippets.formatObject(Word, UnsignedWord, Word, AllocationSnippets$FillContent, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):Object (41 bytes)   inline method (bytecode parsing)
                                @ 4  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.initializeObjectHeader(Word, Word, boolean):void (29 bytes)   inline method (bytecode parsing)
                                  @ 25  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.initializeObjectHeader(Word, Word, KlassPointer):void (20 bytes)   inline method (bytecode parsing)
                                @ 8  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.instanceHeaderSize():int (7 bytes)   inline method (bytecode parsing)
                                @ 27  jdk.graal.compiler.replacements.AllocationSnippets.fillContents(Word, AllocationSnippets$FillContent, int, UnsignedWord, boolean, boolean, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):void (58 bytes)   inline method (bytecode parsing)
                                  @ 22  jdk.graal.compiler.replacements.AllocationSnippets.zeroMemory(Word, int, UnsignedWord, boolean, boolean, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):void (19 bytes)   inline method (bytecode parsing)
                                    @ 15  jdk.graal.compiler.replacements.AllocationSnippets.fillMemory(long, Word, int, UnsignedWord, boolean, boolean, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):void (194 bytes)   inline method (bytecode parsing)
                                      @ 17  jdk.graal.compiler.replacements.ReplacementsUtil.dynamicAssert(boolean, String):void (12 bytes)   inline method (bytecode parsing)
                                      @ 56  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                                      @ 89  jdk.graal.compiler.replacements.ReplacementsUtil.dynamicAssert(boolean, String):void (12 bytes)   inline method (bytecode parsing)
                                      @ 153  jdk.graal.compiler.replacements.ReplacementsUtil.staticAssert(boolean, String):void (12 bytes)   inline method (bytecode parsing)
                                      @ 167  jdk.graal.compiler.replacements.AllocationSnippets.fillMemoryAlignedUnrollable(long, Word, UnsignedWord, UnsignedWord, boolean, AllocationSnippets$AllocationSnippetCounters):void (68 bytes)   inline method (bytecode parsing)
                                        @ 5  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                          @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                                        @ 44  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                                      @ 190  jdk.graal.compiler.replacements.AllocationSnippets.fillMemoryAligned(long, Word, UnsignedWord, UnsignedWord, boolean, UnsignedWord, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):void (155 bytes)   inline method (bytecode parsing)
                                        @ 91  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                          @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                                        @ 105  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                          @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                                        @ 134  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                                @ 33  jdk.graal.compiler.replacements.AllocationSnippets.emitMemoryBarrierIf(boolean):void (14 bytes)   inline method (bytecode parsing)
                                  @ 7  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                              @ 119  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                              @ 124  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.callNewInstanceStub(Word):Object (33 bytes)   inline method (bytecode parsing)
                                @ 21  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.nonNullOrDeopt(Object):Object (27 bytes)   inline method (bytecode parsing)
                              @ 133  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.profileAllocation(AllocationSnippets$AllocationProfilingData, UnsignedWord):void (51 bytes)   inline method (bytecode parsing)
                              @ 139  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.verifyOop(Object):Object (5 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.verifyOop(Object):Object (19 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=23.556803, bonus=1.000000, nodes=9)
                            @ 3  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                                @ 12  java.lang.StringLatin1.charAt(byte[], int):char (15 bytes)   relevance-based (relevance=1.000000, probability=23.556803, bonus=1.000000, nodes=11 <= 300.000000)
                              @ 15  java.lang.String.charAt(int):char (25 bytes)   relevance-based (relevance=1.006654, probability=23.556803, bonus=1.000000, nodes=16 <= 300.000000)
                              @ 25  java.net.URI.match(char, long, long):boolean (56 bytes)   relevance-based (relevance=1.006654, probability=23.556803, bonus=1.000000, nodes=28 <= 300.000000)
                              @ 51  java.net.URI$Parser.scanEscape(int, int, char):int (115 bytes)   not inlining relevance-based (relevance=0.007178, probability=0.155715, bonus=1.000000, nodes=39 > 2.153456)
                            @ 4  som.Vector.<init>():void (7 bytes)   inline method (bytecode parsing)
                              @ 3  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 10  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 14  deltablue.Strength.absoluteWeakest():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 17  deltablue.Variable.setWalkStrength(Strength):void (6 bytes)   inline method (bytecode parsing)
                            @ 22  deltablue.Variable.setStay(boolean):void (6 bytes)   inline method (bytecode parsing)
                            @ 48  deltablue.Variable.getConstraints():Vector (5 bytes)   inline accessor method (bytecode parsing)
                            @ 52  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.Planner$$Lambda/0x00007f45e0083030.<init>(Vector):void (10 bytes)   inline method (bytecode parsing)
                            @ 64  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.Planner$$Lambda/0x00007f45e0083250.<init>(Vector):void (10 bytes)   inline method (bytecode parsing)
                            @ 76  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object):Object (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.lang.invoke.LambdaForm$MH/0x00007f45e0000800.invoke(Object):Object (8 bytes)   inline method (bytecode parsing)
                              @ 31  som.Vector.isEmpty():boolean (17 bytes)   relevance-based (relevance=1.000028, probability=1.000000, bonus=1.000000, nodes=10 <= 300.000000)
                                @ 1  som.Vector.isEmpty():boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.999972, bonus=1.000000, nodes=10 <= 300.000000)
                              @ 38  som.Vector.removeFirst():Object (31 bytes)   relevance-based (relevance=1.000000, probability=0.999972, bonus=1.000000, nodes=18 <= 300.000000)
                                    @ 1  deltablue.BinaryConstraint.isSatisfied():boolean (13 bytes)   trivial (relevance=1.000131, probability=9.234771, bonus=1.000000, nodes=9)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                    @ 9  som.Vector.append(Object):void (51 bytes)   not inlining relevance-based (relevance=0.000131, probability=0.001208, bonus=1.000000, nodes=35 > 0.039231)
                                  @ 8  deltablue.Planner.lambda$removePropagateFrom$4(Vector, AbstractConstraint):void (13 bytes)   relevance-based (relevance=1.000000, probability=9.234771, bonus=1.000000, nodes=38 <= 300.000000)
                                @ 20  deltablue.Planner$$Lambda/0x00007f45e0083030.apply(Object):void (12 bytes)   relevance-based (relevance=1.000000, probability=9.234771, bonus=1.000000, nodes=42 <= 300.000000)
                              @ 57  som.Vector.forEach(ForEachInterface):void (32 bytes)   relevance-based (relevance=1.000000, probability=0.999972, bonus=1.000000, nodes=55 <= 300.000000)
                            @ 1  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 6  deltablue.Variable.getConstraints():Vector (5 bytes)   inline accessor method (bytecode parsing)
                            @ 11  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object, Object):Object (10 bytes)   inline method (bytecode parsing)
                              @ 6  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object, Object):Object (24 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 19  deltablue.Planner$$Lambda/0x00007f45e0083470.<init>(AbstractConstraint, ForEachInterface):void (15 bytes)   relevance-based (relevance=1.000000, probability=0.999972, bonus=1.000000, nodes=11 <= 300.000000)
                                      @ 6  deltablue.BinaryConstraint.isSatisfied():boolean (13 bytes)   trivial (relevance=1.000000, probability=4.617386, bonus=1.000000, nodes=9)
                                      @ 14  deltablue.Planner$$Lambda/0x00007f45e0083250.apply(Object):void (12 bytes)   not inlining too large previous low-level graph (low-level-nodes: 659, relevance=1.000000, probability=4.617386, bonus=1.000000, nodes=12)
                                    @ 12  deltablue.Planner.lambda$constraintsConsuming$3(AbstractConstraint, ForEachInterface, AbstractConstraint):void (20 bytes)   relevance-based (relevance=1.000000, probability=9.234771, bonus=1.000000, nodes=28 <= 300.000000)
                                  @ 20  deltablue.Planner$$Lambda/0x00007f45e0083470.apply(Object):void (16 bytes)   relevance-based (relevance=1.000000, probability=9.234771, bonus=1.000000, nodes=33 <= 300.000000)
                                @ 16  som.Vector.forEach(ForEachInterface):void (32 bytes)   relevance-based (relevance=1.000000, probability=0.999972, bonus=1.000000, nodes=47 <= 300.000000)
                              @ 69  deltablue.Planner.constraintsConsuming(Variable, ForEachInterface):void (20 bytes)   relevance-based (relevance=1.000000, probability=0.999972, bonus=1.000000, nodes=66 <= 300.000000)
                              @ 31  som.Vector.isEmpty():boolean (17 bytes)   relevance-based (relevance=1.000028, probability=35308.097464, bonus=1.000000, nodes=10 <= 300.000000)
                                @ 1  som.Vector.isEmpty():boolean (17 bytes)   relevance-based (relevance=1.000000, probability=35307.097492, bonus=1.000000, nodes=10 <= 300.000000)
                              @ 38  som.Vector.removeFirst():Object (31 bytes)   relevance-based (relevance=1.000000, probability=35307.097492, bonus=1.000000, nodes=18 <= 300.000000)
                                    @ 1  deltablue.BinaryConstraint.isSatisfied():boolean (13 bytes)   trivial (relevance=1.000131, probability=326062.207765, bonus=1.000000, nodes=9)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                    @ 9  som.Vector.append(Object):void (51 bytes)   not inlining relevance-based (relevance=0.000131, probability=42.639232, bonus=1.000000, nodes=35 > 0.039231)
                                  @ 8  deltablue.Planner.lambda$removePropagateFrom$4(Vector, AbstractConstraint):void (13 bytes)   relevance-based (relevance=1.000000, probability=326062.207765, bonus=1.000000, nodes=38 <= 300.000000)
                                @ 20  deltablue.Planner$$Lambda/0x00007f45e0083030.apply(Object):void (12 bytes)   relevance-based (relevance=1.000000, probability=326062.207765, bonus=1.000000, nodes=42 <= 300.000000)
                              @ 57  som.Vector.forEach(ForEachInterface):void (32 bytes)   relevance-based (relevance=1.000000, probability=35307.097492, bonus=1.000000, nodes=55 <= 300.000000)
                            @ 1  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 6  deltablue.Variable.getConstraints():Vector (5 bytes)   inline accessor method (bytecode parsing)
                            @ 11  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object, Object):Object (10 bytes)   inline method (bytecode parsing)
                              @ 6  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object, Object):Object (24 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 19  deltablue.Planner$$Lambda/0x00007f45e0083470.<init>(AbstractConstraint, ForEachInterface):void (15 bytes)   relevance-based (relevance=1.000000, probability=35307.097492, bonus=1.000000, nodes=11 <= 300.000000)
                                      @ 6  deltablue.BinaryConstraint.isSatisfied():boolean (13 bytes)   trivial (relevance=1.000000, probability=163031.103882, bonus=1.000000, nodes=9)
                                      @ 14  deltablue.Planner$$Lambda/0x00007f45e0083250.apply(Object):void (12 bytes)   not inlining too large previous low-level graph (low-level-nodes: 659, relevance=1.000000, probability=163031.103882, bonus=1.000000, nodes=12)
                                    @ 12  deltablue.Planner.lambda$constraintsConsuming$3(AbstractConstraint, ForEachInterface, AbstractConstraint):void (20 bytes)   relevance-based (relevance=1.000000, probability=326062.207765, bonus=1.000000, nodes=28 <= 300.000000)
                                  @ 20  deltablue.Planner$$Lambda/0x00007f45e0083470.apply(Object):void (16 bytes)   relevance-based (relevance=1.000000, probability=326062.207765, bonus=1.000000, nodes=33 <= 300.000000)
                                @ 16  som.Vector.forEach(ForEachInterface):void (32 bytes)   relevance-based (relevance=1.000000, probability=35307.097492, bonus=1.000000, nodes=47 <= 300.000000)
                              @ 69  deltablue.Planner.constraintsConsuming(Variable, ForEachInterface):void (20 bytes)   relevance-based (relevance=1.000000, probability=35307.097492, bonus=1.000000, nodes=66 <= 300.000000)
                            @ 1  som.Vector.size():int (10 bytes)   inline method (bytecode parsing)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                      @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.250000, bonus=1.000000, nodes=13 <= 300.000000)
                                    @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.250000, bonus=1.000000, nodes=24 <= 300.000000)
                                  @ 45  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.250000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                      @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.062500, bonus=1.000000, nodes=13 <= 300.000000)
                                    @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.062500, bonus=1.000000, nodes=24 <= 300.000000)
                                  @ 101  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.062500, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                      @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.062500, bonus=1.000000, nodes=13 <= 300.000000)
                                    @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.062500, bonus=1.000000, nodes=24 <= 300.000000)
                                  @ 114  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.062500, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                      @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.010417, bonus=1.000000, nodes=13 <= 300.000000)
                                    @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.010417, bonus=1.000000, nodes=24 <= 300.000000)
                                  @ 184  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.010417, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 68  java.lang.StringBuilder.<init>():void (7 bytes)   inline method (bytecode parsing)
                            @ 79  java.lang.StringBuilder.append(CharSequence, int, int):StringBuilder (10 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 103  java.lang.StringBuilder.append(char):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 210  java.lang.StringBuilder.toString():String (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.String.<init>(StringBuilder):void (7 bytes)   inline method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                      @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.010417, bonus=1.000000, nodes=13 <= 300.000000)
                                    @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.010417, bonus=1.000000, nodes=24 <= 300.000000)
                                  @ 218  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.010417, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                        @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.003906, bonus=1.000000, nodes=13 <= 300.000000)
                                      @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.003906, bonus=1.000000, nodes=24 <= 300.000000)
                                    @ 45  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.003906, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                        @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000977, bonus=1.000000, nodes=13 <= 300.000000)
                                      @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000977, bonus=1.000000, nodes=24 <= 300.000000)
                                    @ 101  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000977, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                        @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000977, bonus=1.000000, nodes=13 <= 300.000000)
                                      @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000977, bonus=1.000000, nodes=24 <= 300.000000)
                                    @ 114  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000977, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=24.517476, bonus=1.000000, nodes=5)
                                        @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000163, bonus=1.000000, nodes=13 <= 300.000000)
                              @ 27  java.lang.String.length():int (11 bytes)   trivial (relevance=1.101199, probability=24.517476, bonus=1.000000, nodes=8)
                                      @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000163, bonus=1.000000, nodes=24 <= 300.000000)
                                    @ 184  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000163, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 5  java.lang.AbstractStringBuilder.getValue():byte[] (5 bytes)   inline accessor method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 1  java.lang.AbstractStringBuilder.length():int (5 bytes)   inline accessor method (bytecode parsing)
                                @ 10  java.lang.StringBuilder.length():int (5 bytes)   trivial (relevance=0.156651, probability=0.156644, bonus=1.000000, nodes=5)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                        @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000163, bonus=1.000000, nodes=13 <= 300.000000)
                                @ 16  java.lang.AbstractStringBuilder.isLatin1():boolean (19 bytes)   trivial (relevance=0.156651, probability=0.156644, bonus=1.000000, nodes=9)
                                      @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000163, bonus=1.000000, nodes=24 <= 300.000000)
                                    @ 218  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000163, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 13  java.util.Arrays.copyOfRangeByte(byte[], int, int):byte[] (33 bytes)   inline method (bytecode parsing)
                              @ 2  java.util.Arrays.checkLength(int, int):void (38 bytes)   inline method (bytecode parsing)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                                  @ 24  java.lang.Math.min(int, int):int (11 bytes)   trivial (relevance=0.156645, probability=0.112245, bonus=1.000000, nodes=7)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                                @ 32  java.util.Arrays.copyOfRange(byte[], int, int):byte[] (25 bytes)   relevance-based (relevance=0.156644, probability=0.156636, bonus=1.000000, nodes=33 <= 46.993061)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                              @ 3  java.lang.String.<init>(AbstractStringBuilder, Void):void (99 bytes)   not inlining relevance-based (relevance=0.156644, probability=0.156644, bonus=1.000000, nodes=66 > 46.993061)
                                @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=23.517476, bonus=1.000000, nodes=9)
                            @ 3  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                                @ 12  java.lang.StringLatin1.charAt(byte[], int):char (15 bytes)   relevance-based (relevance=1.000000, probability=23.517476, bonus=1.000000, nodes=11 <= 300.000000)
                              @ 36  java.lang.String.charAt(int):char (25 bytes)   relevance-based (relevance=1.056284, probability=23.517476, bonus=1.000000, nodes=16 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000061, bonus=1.000000, nodes=13 <= 300.000000)
                              @ 53  java.net.URI.match(char, long, long):boolean (56 bytes)   relevance-based (relevance=1.056284, probability=23.517476, bonus=1.000000, nodes=28 <= 300.000000)
                                        @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000061, bonus=1.000000, nodes=24 <= 300.000000)
                                      @ 45  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000061, bonus=1.000000, nodes=30 <= 300.000000)
                              @ 2  java.lang.AbstractStringBuilder.append(char):AbstractStringBuilder (77 bytes)   not inlining relevance-based (relevance=0.050638, probability=1.096485, bonus=1.000000, nodes=50 > 15.191308)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                              @ 3  java.lang.AbstractStringBuilder.<init>(int):void (39 bytes)   not inlining relevance-based (relevance=0.007234, probability=0.156635, bonus=1.000000, nodes=11 > 2.170103)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000015, bonus=1.000000, nodes=13 <= 300.000000)
                                        @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000015, bonus=1.000000, nodes=24 <= 300.000000)
                              @ 4  java.lang.AbstractStringBuilder.append(CharSequence, int, int):AbstractStringBuilder (67 bytes)   not inlining relevance-based (relevance=0.007234, probability=0.156635, bonus=1.000000, nodes=25 > 2.170103)
                            @ 3  java.lang.StringBuilder.append(char):StringBuilder (8 bytes)   inline method (bytecode parsing)
                                      @ 101  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000015, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 18  java.lang.StringBuilder.append(char):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 33  java.lang.StringBuilder.append(char):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                              @ 88  java.net.URI.appendEscape(StringBuilder, byte):void (38 bytes)   not inlining relevance-based (relevance=0.007234, probability=0.156635, bonus=1.000000, nodes=26 > 2.170103)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000015, bonus=1.000000, nodes=13 <= 300.000000)
                                        @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000015, bonus=1.000000, nodes=24 <= 300.000000)
                                      @ 114  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000015, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000003, bonus=1.000000, nodes=13 <= 300.000000)
                                        @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000003, bonus=1.000000, nodes=24 <= 300.000000)
                                      @ 184  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000003, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000003, bonus=1.000000, nodes=13 <= 300.000000)
                                        @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000003, bonus=1.000000, nodes=24 <= 300.000000)
                                      @ 218  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000003, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                            @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000001, bonus=1.000000, nodes=13 <= 300.000000)
                                          @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000001, bonus=1.000000, nodes=24 <= 300.000000)
                                        @ 45  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000001, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                            @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                          @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                        @ 101  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                            @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                          @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                        @ 114  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                            @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                          @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                        @ 184  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                            @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                          @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                        @ 218  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 45  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 101  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 114  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 184  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 218  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 45  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 101  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 114  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 184  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 218  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                                          @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining it exceeds the maximum recursive inlining depth
                                          @ 269  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining it exceeds the maximum recursive inlining depth
                                          @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=202 <= 300.000000)
                                        @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=387 > 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 45  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 101  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 114  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 184  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 218  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 45  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 101  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 114  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 184  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 218  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                                          @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining it exceeds the maximum recursive inlining depth
                                          @ 269  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining it exceeds the maximum recursive inlining depth
                                          @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=202 <= 300.000000)
                                        @ 269  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=387 > 300.000000)
                                      @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   relevance-based (relevance=1.000000, probability=0.000002, bonus=1.000000, nodes=202 <= 300.000000)
                                    @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.000122, bonus=1.000000, nodes=387 > 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000061, bonus=1.000000, nodes=13 <= 300.000000)
                                        @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000061, bonus=1.000000, nodes=24 <= 300.000000)
                                      @ 45  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000061, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000015, bonus=1.000000, nodes=13 <= 300.000000)
                                        @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000015, bonus=1.000000, nodes=24 <= 300.000000)
                                      @ 101  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000015, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000015, bonus=1.000000, nodes=13 <= 300.000000)
                                        @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000015, bonus=1.000000, nodes=24 <= 300.000000)
                                      @ 114  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000015, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000003, bonus=1.000000, nodes=13 <= 300.000000)
                                        @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000003, bonus=1.000000, nodes=24 <= 300.000000)
                                      @ 184  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000003, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000003, bonus=1.000000, nodes=13 <= 300.000000)
                                        @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000003, bonus=1.000000, nodes=24 <= 300.000000)
                                      @ 218  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000003, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                            @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000001, bonus=1.000000, nodes=13 <= 300.000000)
                                          @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000001, bonus=1.000000, nodes=24 <= 300.000000)
                                        @ 45  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000001, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                            @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                          @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                        @ 101  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                            @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                          @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                        @ 114  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                            @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                          @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                        @ 184  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                            @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                          @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                        @ 218  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 45  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 101  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 114  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 184  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 218  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 45  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 101  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 114  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 184  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 218  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                                          @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining it exceeds the maximum recursive inlining depth
                                          @ 269  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining it exceeds the maximum recursive inlining depth
                                          @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=202 <= 300.000000)
                                        @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=387 > 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 45  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 101  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 114  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 184  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 218  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 45  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 101  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 114  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 184  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 218  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                                          @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining it exceeds the maximum recursive inlining depth
                                          @ 269  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining it exceeds the maximum recursive inlining depth
                                          @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=202 <= 300.000000)
                                        @ 269  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=387 > 300.000000)
                                      @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   relevance-based (relevance=1.000000, probability=0.000002, bonus=1.000000, nodes=202 <= 300.000000)
                                    @ 269  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.000122, bonus=1.000000, nodes=387 > 300.000000)
                                  @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   relevance-based (relevance=1.000000, probability=0.007812, bonus=1.000000, nodes=202 <= 300.000000)
                                @ 19  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=387 > 300.000000)
                              @ 81  som.Vector.sort(Comparator):void (23 bytes)   relevance-based (relevance=1.000028, probability=1.000000, bonus=1.000000, nodes=22 <= 300.000000)
                            @ 5  deltablue.Variable.addConstraint(AbstractConstraint):void (9 bytes)   inline method (bytecode parsing)
                            @ 5  deltablue.Variable.addConstraint(AbstractConstraint):void (9 bytes)   inline method (bytecode parsing)
                            @ 13  deltablue.Variable.addConstraint(AbstractConstraint):void (9 bytes)   inline method (bytecode parsing)
                            @ 5  deltablue.Variable.addConstraint(AbstractConstraint):void (9 bytes)   inline method (bytecode parsing)
                            @ 13  deltablue.Variable.addConstraint(AbstractConstraint):void (9 bytes)   inline method (bytecode parsing)
                            @ 21  deltablue.Variable.addConstraint(AbstractConstraint):void (9 bytes)   inline method (bytecode parsing)
                            @ 29  deltablue.Variable.addConstraint(AbstractConstraint):void (9 bytes)   inline method (bytecode parsing)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                @ 5  som.Vector.append(Object):void (51 bytes)   not inlining relevance-based (relevance=0.000276, probability=0.000136, bonus=1.000000, nodes=35 > 0.082936)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                @ 5  som.Vector.append(Object):void (51 bytes)   not inlining relevance-based (relevance=0.000276, probability=0.000136, bonus=1.000000, nodes=35 > 0.082936)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                @ 5  som.Vector.append(Object):void (51 bytes)   not inlining relevance-based (relevance=0.000276, probability=0.000136, bonus=1.000000, nodes=35 > 0.082936)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                @ 5  som.Vector.append(Object):void (51 bytes)   not inlining relevance-based (relevance=0.000276, probability=0.000136, bonus=1.000000, nodes=35 > 0.082936)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                @ 5  som.Vector.append(Object):void (51 bytes)   not inlining relevance-based (relevance=0.034191, probability=0.016811, bonus=1.000000, nodes=35 > 10.257361)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                @ 5  som.Vector.append(Object):void (51 bytes)   not inlining relevance-based (relevance=0.034191, probability=0.016811, bonus=1.000000, nodes=35 > 10.257361)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                  @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000131, probability=0.000064, bonus=1.000000, nodes=41 > 0.039331)
                                @ 5  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=0.491668, bonus=1.000000, nodes=35 <= 300.000000)
                              @ 1  deltablue.UnaryConstraint.addToGraph():void (14 bytes)   not inlining callee invoke probability is too high (invokeP=6.000131, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=115)
                                @ 1  deltablue.Planner.newMark():int (15 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f45e0031810.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                @ 8  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 697, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=72)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f45e0031810.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                @ 19  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 697, relevance=1.000000, probability=1.261254, bonus=1.000000, nodes=72)
                              @ 6  deltablue.Planner.incrementalAdd(AbstractConstraint):void (27 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=28 <= 300.000000)
                            @ 49  jdk.graal.compiler.graph.Node.valueEquals(Node):boolean (10 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.graph.Node.getNodeClass():NodeClass (5 bytes)   inline accessor method (bytecode parsing)
                              @ 46  jdk.graal.compiler.graph.Graph$1.equals(Object, Object):boolean (53 bytes)   not inlining relevance-based (relevance=0.007446, probability=0.006269, bonus=1.000000, nodes=25 > 2.233918)
                            @ 36  java.lang.Object.equals(Object):boolean (11 bytes)   not inlining no methods remaining after filtering less frequent methods (6 methods previously)
                              @ 2  java.lang.ref.Reference.refersToImpl(Object):boolean (6 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=12 <= 300.000000)
                            @ 15  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 27  deltablue.Strength.absoluteWeakest():Strength (4 bytes)   inline method (bytecode parsing)
                                @ 17  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=0.015302, probability=0.009615, bonus=1.000000, nodes=9)
                                @ 27  java.lang.StringLatin1.hashCode(byte[]):int (52 bytes)   not inlining relevance-based (relevance=0.015294, probability=0.009610, bonus=1.000000, nodes=22 > 4.588326)
                                @ 37  java.lang.StringUTF16.hashCode(byte[]):int (52 bytes)   not inlining relevance-based (relevance=0.000008, probability=0.000005, bonus=1.000000, nodes=23 > 0.002314)
                              @ 1  java.lang.String.hashCode():int (60 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=48 <= 300.000000)
                            @ 33  java.util.WeakHashMap.indexFor(int, int):int (6 bytes)   inline method (bytecode parsing)
                              @ 1  java.util.WeakHashMap.expungeStaleEntries():void (139 bytes)   not inlining too large previous low-level graph (low-level-nodes: 496, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=70)
                            @ 2  java.lang.ref.Reference.refersTo(Object):boolean (6 bytes)   inline method (bytecode parsing)
                              @ 2  java.lang.ref.Reference.refersToImpl(Object):boolean (6 bytes)   inline method (bytecode parsing)
                            @ 11  java.lang.ref.Reference.get():Object (5 bytes)   inline accessor method (bytecode parsing)
                              @ 21  java.lang.String.equals(Object):boolean (56 bytes)   not inlining relevance-based (relevance=0.098133, probability=0.089363, bonus=1.000000, nodes=50 > 29.439873)
                            @ 4  som.Vector.<init>():void (7 bytes)   inline method (bytecode parsing)
                              @ 3  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 10  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 14  deltablue.Strength.absoluteWeakest():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 17  deltablue.Variable.setWalkStrength(Strength):void (6 bytes)   inline method (bytecode parsing)
                            @ 22  deltablue.Variable.setStay(boolean):void (6 bytes)   inline method (bytecode parsing)
                            @ 48  deltablue.Variable.getConstraints():Vector (5 bytes)   inline accessor method (bytecode parsing)
                            @ 52  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.Planner$$Lambda/0x00007f45e0083030.<init>(Vector):void (10 bytes)   inline method (bytecode parsing)
                            @ 64  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.Planner$$Lambda/0x00007f45e0083250.<init>(Vector):void (10 bytes)   inline method (bytecode parsing)
                            @ 76  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object):Object (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.lang.invoke.LambdaForm$MH/0x00007f45e0000800.invoke(Object):Object (8 bytes)   inline method (bytecode parsing)
                            @ 5  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                  @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000131, probability=0.000131, bonus=1.000000, nodes=41 > 0.039331)
                                @ 11  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=35 <= 300.000000)
                              @ 26  som.Vector.with(Object):Vector (16 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=40 <= 300.000000)
                              @ 31  som.Vector.isEmpty():boolean (17 bytes)   relevance-based (relevance=1.000028, probability=35196.760563, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 1  som.Vector.size():int (10 bytes)   inline method (bytecode parsing)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                      @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.250000, bonus=1.000000, nodes=13 <= 300.000000)
                                    @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.250000, bonus=1.000000, nodes=24 <= 300.000000)
                                  @ 45  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.250000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                      @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.062500, bonus=1.000000, nodes=13 <= 300.000000)
                                    @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.062500, bonus=1.000000, nodes=24 <= 300.000000)
                                  @ 101  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.062500, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                      @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.062500, bonus=1.000000, nodes=13 <= 300.000000)
                                    @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.062500, bonus=1.000000, nodes=24 <= 300.000000)
                                  @ 114  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.062500, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                      @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.010417, bonus=1.000000, nodes=13 <= 300.000000)
                                    @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.010417, bonus=1.000000, nodes=24 <= 300.000000)
                                  @ 184  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.010417, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                      @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.010417, bonus=1.000000, nodes=13 <= 300.000000)
                                    @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.010417, bonus=1.000000, nodes=24 <= 300.000000)
                                  @ 218  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.010417, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                        @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.003906, bonus=1.000000, nodes=13 <= 300.000000)
                                      @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.003906, bonus=1.000000, nodes=24 <= 300.000000)
                                    @ 45  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.003906, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                        @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000977, bonus=1.000000, nodes=13 <= 300.000000)
                                      @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000977, bonus=1.000000, nodes=24 <= 300.000000)
                                    @ 101  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000977, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                        @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000977, bonus=1.000000, nodes=13 <= 300.000000)
                                      @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000977, bonus=1.000000, nodes=24 <= 300.000000)
                                    @ 114  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000977, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                        @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000163, bonus=1.000000, nodes=13 <= 300.000000)
                                      @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000163, bonus=1.000000, nodes=24 <= 300.000000)
                                    @ 184  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000163, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                        @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000163, bonus=1.000000, nodes=13 <= 300.000000)
                                      @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000163, bonus=1.000000, nodes=24 <= 300.000000)
                                    @ 218  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000163, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000061, bonus=1.000000, nodes=13 <= 300.000000)
                                        @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000061, bonus=1.000000, nodes=24 <= 300.000000)
                                      @ 45  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000061, bonus=1.000000, nodes=30 <= 300.000000)
                              @ 1  java.util.ArrayList$Itr.checkForComodification():void (23 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=9)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000015, bonus=1.000000, nodes=13 <= 300.000000)
                                        @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000015, bonus=1.000000, nodes=24 <= 300.000000)
                                      @ 101  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000015, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000015, bonus=1.000000, nodes=13 <= 300.000000)
                                        @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000015, bonus=1.000000, nodes=24 <= 300.000000)
                                      @ 114  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000015, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000003, bonus=1.000000, nodes=13 <= 300.000000)
                                        @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000003, bonus=1.000000, nodes=24 <= 300.000000)
                                      @ 184  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000003, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000003, bonus=1.000000, nodes=13 <= 300.000000)
                                        @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000003, bonus=1.000000, nodes=24 <= 300.000000)
                                      @ 218  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000003, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                            @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000001, bonus=1.000000, nodes=13 <= 300.000000)
                                          @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000001, bonus=1.000000, nodes=24 <= 300.000000)
                                        @ 45  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000001, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                            @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                          @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                        @ 101  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                            @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                          @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                        @ 114  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                            @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                          @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                        @ 184  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                            @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                          @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                        @ 218  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 45  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 101  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 114  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 184  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 218  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 39  deltablue.Variable.getWalkStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 45  deltablue.Variable.setWalkStrength(Strength):void (6 bytes)   inline method (bytecode parsing)
                            @ 50  deltablue.Variable.getStay():boolean (5 bytes)   inline accessor method (bytecode parsing)
                            @ 60  deltablue.Variable.getStay():boolean (5 bytes)   inline accessor method (bytecode parsing)
                            @ 70  deltablue.Variable.getStay():boolean (5 bytes)   inline accessor method (bytecode parsing)
                            @ 81  deltablue.Variable.setStay(boolean):void (6 bytes)   inline method (bytecode parsing)
                            @ 85  deltablue.Variable.getStay():boolean (5 bytes)   inline accessor method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 45  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 101  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 114  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 184  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                                @ 2  deltablue.Strength.weaker(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                              @ 42  deltablue.Strength.weakest(Strength):Strength (14 bytes)   relevance-based (relevance=1.000008, probability=1.000000, bonus=1.000000, nodes=12 <= 300.000000)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                            @ 18  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                            @ 218  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 25  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 33  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 37  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                                          @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining it exceeds the maximum recursive inlining depth
                                          @ 269  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining it exceeds the maximum recursive inlining depth
                                          @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=202 <= 300.000000)
                            @ 51  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 58  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 66  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 70  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                              @ 92  deltablue.ScaleConstraint.execute():void (74 bytes)   relevance-based (relevance=0.934434, probability=0.934427, bonus=1.000000, nodes=62 <= 280.330255)
                                        @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=387 > 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 45  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 101  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 114  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 184  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 218  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 45  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 101  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 114  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 184  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 218  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                                          @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining it exceeds the maximum recursive inlining depth
                                          @ 269  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining it exceeds the maximum recursive inlining depth
                                          @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=202 <= 300.000000)
                                        @ 269  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=387 > 300.000000)
                                      @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   relevance-based (relevance=1.000000, probability=0.000002, bonus=1.000000, nodes=202 <= 300.000000)
                                    @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.000122, bonus=1.000000, nodes=387 > 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000061, bonus=1.000000, nodes=13 <= 300.000000)
                                        @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000061, bonus=1.000000, nodes=24 <= 300.000000)
                                      @ 45  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000061, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000015, bonus=1.000000, nodes=13 <= 300.000000)
                                        @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000015, bonus=1.000000, nodes=24 <= 300.000000)
                                      @ 101  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000015, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000015, bonus=1.000000, nodes=13 <= 300.000000)
                                        @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000015, bonus=1.000000, nodes=24 <= 300.000000)
                                      @ 114  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000015, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000003, bonus=1.000000, nodes=13 <= 300.000000)
                                        @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000003, bonus=1.000000, nodes=24 <= 300.000000)
                                      @ 184  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000003, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000003, bonus=1.000000, nodes=13 <= 300.000000)
                                        @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000003, bonus=1.000000, nodes=24 <= 300.000000)
                                      @ 218  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000003, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                            @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000001, bonus=1.000000, nodes=13 <= 300.000000)
                                          @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000001, bonus=1.000000, nodes=24 <= 300.000000)
                                        @ 45  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000001, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                            @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                          @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                        @ 101  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                            @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                          @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                        @ 114  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                            @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                          @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                        @ 184  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                            @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                          @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                        @ 218  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 45  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 101  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 114  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 184  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 218  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 45  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 101  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 114  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 184  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 218  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                                          @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining it exceeds the maximum recursive inlining depth
                                          @ 269  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining it exceeds the maximum recursive inlining depth
                                          @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=202 <= 300.000000)
                                        @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=387 > 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 45  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 101  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 114  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 184  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 218  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 45  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                              @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=9)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 3  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                              @ 12  java.lang.StringLatin1.charAt(byte[], int):char (15 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 101  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 114  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 184  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 218  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                                          @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining it exceeds the maximum recursive inlining depth
                                          @ 269  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining it exceeds the maximum recursive inlining depth
                                          @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=202 <= 300.000000)
                                        @ 269  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=387 > 300.000000)
                                      @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   relevance-based (relevance=1.000000, probability=0.000002, bonus=1.000000, nodes=202 <= 300.000000)
                                    @ 269  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.000122, bonus=1.000000, nodes=387 > 300.000000)
                                  @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   relevance-based (relevance=1.000000, probability=0.007813, bonus=1.000000, nodes=202 <= 300.000000)
                                @ 19  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=387 > 300.000000)
                              @ 81  som.Vector.sort(Comparator):void (23 bytes)   relevance-based (relevance=1.000131, probability=1.000000, bonus=1.000000, nodes=22 <= 300.000000)
                                @ 1  som.Vector.isEmpty():boolean (17 bytes)   relevance-based (relevance=1.000000, probability=35195.760563, bonus=1.000000, nodes=10 <= 300.000000)
                              @ 38  som.Vector.removeFirst():Object (31 bytes)   relevance-based (relevance=1.000000, probability=35195.760563, bonus=1.000000, nodes=18 <= 300.000000)
                                    @ 1  deltablue.BinaryConstraint.isSatisfied():boolean (13 bytes)   trivial (relevance=1.000131, probability=325033.681992, bonus=1.000000, nodes=9)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                    @ 9  som.Vector.append(Object):void (51 bytes)   not inlining relevance-based (relevance=0.000131, probability=42.504732, bonus=1.000000, nodes=35 > 0.039231)
                                  @ 8  deltablue.Planner.lambda$removePropagateFrom$4(Vector, AbstractConstraint):void (13 bytes)   relevance-based (relevance=1.000000, probability=325033.681992, bonus=1.000000, nodes=38 <= 300.000000)
                                @ 20  deltablue.Planner$$Lambda/0x00007f45e0083030.apply(Object):void (12 bytes)   relevance-based (relevance=1.000000, probability=325033.681992, bonus=1.000000, nodes=42 <= 300.000000)
                              @ 57  som.Vector.forEach(ForEachInterface):void (32 bytes)   relevance-based (relevance=1.000000, probability=35195.760563, bonus=1.000000, nodes=55 <= 300.000000)
                            @ 1  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 6  deltablue.Variable.getConstraints():Vector (5 bytes)   inline accessor method (bytecode parsing)
                            @ 11  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object, Object):Object (10 bytes)   inline method (bytecode parsing)
                              @ 6  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object, Object):Object (24 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 19  deltablue.Planner$$Lambda/0x00007f45e0083470.<init>(AbstractConstraint, ForEachInterface):void (15 bytes)   relevance-based (relevance=1.000000, probability=35195.760563, bonus=1.000000, nodes=11 <= 300.000000)
                                      @ 6  deltablue.BinaryConstraint.isSatisfied():boolean (13 bytes)   trivial (relevance=1.000000, probability=162516.840996, bonus=1.000000, nodes=9)
                                      @ 14  deltablue.Planner$$Lambda/0x00007f45e0083250.apply(Object):void (12 bytes)   not inlining too large previous low-level graph (low-level-nodes: 659, relevance=1.000000, probability=162516.840996, bonus=1.000000, nodes=12)
                                    @ 12  deltablue.Planner.lambda$constraintsConsuming$3(AbstractConstraint, ForEachInterface, AbstractConstraint):void (20 bytes)   relevance-based (relevance=1.000000, probability=325033.681992, bonus=1.000000, nodes=28 <= 300.000000)
                                  @ 20  deltablue.Planner$$Lambda/0x00007f45e0083470.apply(Object):void (16 bytes)   relevance-based (relevance=1.000000, probability=325033.681992, bonus=1.000000, nodes=33 <= 300.000000)
                                @ 16  som.Vector.forEach(ForEachInterface):void (32 bytes)   relevance-based (relevance=1.000000, probability=35195.760563, bonus=1.000000, nodes=47 <= 300.000000)
                              @ 69  deltablue.Planner.constraintsConsuming(Variable, ForEachInterface):void (20 bytes)   relevance-based (relevance=1.000000, probability=35195.760563, bonus=1.000000, nodes=66 <= 300.000000)
                                      @ 7  deltablue.Strength$Sym.customHash():int (5 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                                    @ 1  som.Dictionary.hash(Dictionary$CustomHash):int (20 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=12 <= 300.000000)
                            @ 6  som.Dictionary.getBucketIdx(int):int (10 bytes)   inline method (bytecode parsing)
                                    @ 7  som.Dictionary.getBucket(int):Dictionary$Entry (11 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                                    @ 18  som.IdentityDictionary$IdEntry.match(int, Object):boolean (22 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                  @ 4  som.Dictionary.at(Dictionary$CustomHash):Object (39 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=35 <= 300.000000)
                                @ 6  deltablue.Strength.of(Strength$Sym):Strength (11 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=38 <= 300.000000)
                              @ 2  deltablue.AbstractConstraint.<init>(Strength$Sym):void (13 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=42 <= 300.000000)
                            @ 22  jdk.graal.compiler.hotspot.replacements.HotSpotHashCodeSnippets.computeIdentityHashCode(Object):int (127 bytes)   inline method (bytecode parsing)
                              @ 7  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.loadWordFromObject(Object, int):Word (34 bytes)   inline method (bytecode parsing)
                                @ 18  jdk.graal.compiler.replacements.ReplacementsUtil.staticAssert(boolean, String):void (12 bytes)   inline method (bytecode parsing)
                                @ 24  org.graalvm.word.LocationIdentity.any():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                            @ 5  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.clearPendingException(Word):Object (30 bytes)   inline method (bytecode parsing)
                            @ 16  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.getPendingException(Word):Object (14 bytes)   inline method (bytecode parsing)
                            @ 27  jdk.graal.compiler.hotspot.stubs.ForeignCallSnippets.getAndClearObjectResult(Word):Object (30 bytes)   inline method (bytecode parsing)
                            @ 10  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 15  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 27  deltablue.Strength.absoluteWeakest():Strength (4 bytes)   inline method (bytecode parsing)
                              @ 4  deltablue.Variable.<init>():void (44 bytes)   not inlining too large previous low-level graph (low-level-nodes: 356, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=27)
                              @ 1  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.006388, probability=1.000000, bonus=1.000000, nodes=5)
                              @ 14  java.lang.Math.min(int, int):int (11 bytes)   trivial (relevance=1.597522, probability=1.000000, bonus=1.000000, nodes=7)
                                @ 17  java.lang.Math.max(int, int):int (11 bytes)   trivial (relevance=0.406489, probability=0.180911, bonus=1.000000, nodes=7)
                                @ 17  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=0.015302, probability=0.014547, bonus=1.000000, nodes=9)
                                  @ 25  java.lang.Math.min(int, int):int (11 bytes)   trivial (relevance=0.406493, probability=0.180911, bonus=1.000000, nodes=7)
                                @ 27  java.util.Arrays.copyOf(long[], int):long[] (33 bytes)   relevance-based (relevance=0.406489, probability=0.180911, bonus=1.000000, nodes=21 <= 121.946729)
                                @ 27  java.lang.StringLatin1.hashCode(byte[]):int (52 bytes)   not inlining relevance-based (relevance=0.015294, probability=0.014539, bonus=1.000000, nodes=22 > 4.588326)
                              @ 34  java.util.BitSet.ensureCapacity(int):void (39 bytes)   relevance-based (relevance=1.000000, probability=0.625970, bonus=1.000000, nodes=41 <= 300.000000)
                                @ 37  java.lang.StringUTF16.hashCode(byte[]):int (52 bytes)   not inlining relevance-based (relevance=0.000008, probability=0.000007, bonus=1.000000, nodes=23 > 0.002314)
                              @ 9  java.lang.String.hashCode():int (60 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=48 <= 300.000000)
                              @ 101  java.util.BitSet.checkInvariants():void (111 bytes)   trivial (relevance=2.246883, probability=0.999994, bonus=1.000000, nodes=4)
                            @ 5  jdk.graal.compiler.replacements.arraycopy.ArrayCopySnippets.checkArrayTypes(Object, Object, ArrayCopySnippets$ArrayCopyTypeCheck):void (98 bytes)   inline method (bytecode parsing)
                            @ 20  jdk.graal.compiler.replacements.arraycopy.ArrayCopySnippets.checkLimits(Object, int, Object, int, int, JavaKind, ArrayCopySnippets$Counters):int[] (230 bytes)   inline method (bytecode parsing)
                              @ 21  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                              @ 37  jdk.graal.compiler.nodes.PiNode.piCastPositive(int, GuardingNode):int (9 bytes)   inline method (bytecode parsing)
                              @ 64  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                              @ 81  jdk.graal.compiler.nodes.PiNode.piCastPositive(int, GuardingNode):int (9 bytes)   inline method (bytecode parsing)
                              @ 108  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                              @ 125  jdk.graal.compiler.nodes.PiNode.piCastPositive(int, GuardingNode):int (9 bytes)   inline method (bytecode parsing)
                              @ 159  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                              @ 200  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                              @ 217  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                              @ 226  jdk.graal.compiler.replacements.arraycopy.ArrayCopySnippets.createCheckLimitsResult(int, int, int):int[] (18 bytes)   inline method (bytecode parsing)
                            @ 47  jdk.graal.compiler.replacements.arraycopy.ArrayCopySnippets.incrementLengthCounter(int, ArrayCopySnippets$Counters):void (16 bytes)   inline method (bytecode parsing)
                              @ 12  jdk.graal.compiler.replacements.SnippetIntegerHistogram.inc(long):void (215 bytes)   inline method (bytecode parsing)
                            @ 52  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                            @ 59  jdk.graal.compiler.replacements.SnippetCounter.add(int):void (13 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                            @ 77  jdk.graal.compiler.replacements.arraycopy.ArrayCopySnippets.doArraycopyExactStubCallSnippet(Object, int, Object, int, int, JavaKind, LocationIdentity, ArrayCopySnippets$Counters):void (19 bytes)   inline method (bytecode parsing)
                              @ 12  jdk.graal.compiler.hotspot.replacements.arraycopy.HotSpotArraycopySnippets.heapWordSize():int (7 bytes)   inline method (bytecode parsing)
                              @ 15  jdk.graal.compiler.replacements.arraycopy.ArrayCopyCallNode.arraycopy(Object, int, Object, int, int, JavaKind, LocationIdentity, int):void (19 bytes)   inline method (bytecode parsing)
                            @ 23  jdk.graal.compiler.replacements.AllocationSnippets.allocateArrayImpl(Word, int, int, int, AllocationSnippets$FillContent, int, boolean, boolean, boolean, boolean, AllocationSnippets$AllocationProfilingData):Object (178 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getTLABInfo():Word (5 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getThread():Word (8 bytes)   inline method (bytecode parsing)
                                  @ 4  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.registerAsWord(Register):Word (7 bytes)   inline method (bytecode parsing)
                              @ 9  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.readTlabTop(Word):Word (5 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.readTlabTop(Word):Word (17 bytes)   inline method (bytecode parsing)
                              @ 17  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.readTlabEnd(Word):Word (5 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.readTlabEnd(Word):Word (17 bytes)   inline method (bytecode parsing)
                              @ 36  jdk.graal.compiler.replacements.ReplacementsUtil.dynamicAssert(boolean, String):void (12 bytes)   inline method (bytecode parsing)
                              @ 44  jdk.graal.compiler.replacements.AllocationSnippets.arrayAllocationSize(int, int, int):UnsignedWord (18 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.objectAlignment():int (7 bytes)   inline method (bytecode parsing)
                                @ 11  jdk.graal.compiler.replacements.AllocationSnippets.arrayAllocationSize(int, int, int, int):long (32 bytes)   inline method (bytecode parsing)
                              @ 59  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.useTLAB():boolean (7 bytes)   inline method (bytecode parsing)
                              @ 72  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.shouldAllocateInTLAB(UnsignedWord, boolean):boolean (33 bytes)   inline method (bytecode parsing)
                              @ 102  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.writeTlabTop(Word, Word):void (6 bytes)   inline method (bytecode parsing)
                                @ 2  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.writeTlabTop(Word, Word):void (15 bytes)   inline method (bytecode parsing)
                              @ 109  jdk.graal.compiler.replacements.AllocationSnippets.emitPrefetchAllocate(Word, boolean):void (61 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getPrefetchStyle():int (7 bytes)   inline method (bytecode parsing)
                                @ 9  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getPrefetchLines(boolean):int (18 bytes)   inline method (bytecode parsing)
                                @ 14  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getPrefetchStepSize():int (7 bytes)   inline method (bytecode parsing)
                                @ 20  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getPrefetchDistance():int (7 bytes)   inline method (bytecode parsing)
                              @ 136  jdk.graal.compiler.replacements.AllocationSnippets.formatArray(Word, UnsignedWord, int, Word, AllocationSnippets$FillContent, boolean, int, boolean, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):Object (53 bytes)   inline method (bytecode parsing)
                                @ 5  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.initializeObjectHeader(Word, Word, boolean):void (29 bytes)   inline method (bytecode parsing)
                                  @ 25  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.initializeObjectHeader(Word, Word, KlassPointer):void (20 bytes)   inline method (bytecode parsing)
                                @ 11  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.arrayLengthOffset():int (7 bytes)   inline method (bytecode parsing)
                                @ 15  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                                @ 38  jdk.graal.compiler.replacements.AllocationSnippets.fillContents(Word, AllocationSnippets$FillContent, int, UnsignedWord, boolean, boolean, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):void (58 bytes)   inline method (bytecode parsing)
                                  @ 22  jdk.graal.compiler.replacements.AllocationSnippets.zeroMemory(Word, int, UnsignedWord, boolean, boolean, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):void (19 bytes)   inline method (bytecode parsing)
                                    @ 15  jdk.graal.compiler.replacements.AllocationSnippets.fillMemory(long, Word, int, UnsignedWord, boolean, boolean, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):void (194 bytes)   inline method (bytecode parsing)
                                      @ 17  jdk.graal.compiler.replacements.ReplacementsUtil.dynamicAssert(boolean, String):void (12 bytes)   inline method (bytecode parsing)
                                      @ 56  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                                      @ 89  jdk.graal.compiler.replacements.ReplacementsUtil.dynamicAssert(boolean, String):void (12 bytes)   inline method (bytecode parsing)
                                      @ 153  jdk.graal.compiler.replacements.ReplacementsUtil.staticAssert(boolean, String):void (12 bytes)   inline method (bytecode parsing)
                                      @ 167  jdk.graal.compiler.replacements.AllocationSnippets.fillMemoryAlignedUnrollable(long, Word, UnsignedWord, UnsignedWord, boolean, AllocationSnippets$AllocationSnippetCounters):void (68 bytes)   inline method (bytecode parsing)
                                        @ 5  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                          @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                                        @ 44  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                                      @ 190  jdk.graal.compiler.replacements.AllocationSnippets.fillMemoryAligned(long, Word, UnsignedWord, UnsignedWord, boolean, UnsignedWord, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):void (155 bytes)   inline method (bytecode parsing)
                                        @ 17  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getMinimalBulkZeroingSize():int (7 bytes)   inline method (bytecode parsing)
                                        @ 36  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                          @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                                        @ 53  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                                        @ 105  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                          @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                                        @ 134  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                                @ 44  jdk.graal.compiler.replacements.AllocationSnippets.emitMemoryBarrierIf(boolean):void (14 bytes)   inline method (bytecode parsing)
                                  @ 7  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                              @ 152  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                              @ 158  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.callNewArrayStub(Word, int):Object (35 bytes)   inline method (bytecode parsing)
                                @ 22  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.nonNullOrDeopt(Object):Object (27 bytes)   inline method (bytecode parsing)
                              @ 168  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.profileAllocation(AllocationSnippets$AllocationProfilingData, UnsignedWord):void (51 bytes)   inline method (bytecode parsing)
                              @ 174  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.verifyOop(Object):Object (5 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.verifyOop(Object):Object (19 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                              @ 10  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=8)
                                    @ 3  java.lang.Math.max(int, int):int (11 bytes)   trivial (relevance=0.133981, probability=0.118151, bonus=1.000000, nodes=7)
                                  @ 29  jdk.internal.util.ArraysSupport.newLength(int, int, int):int (27 bytes)   relevance-based (relevance=0.133981, probability=0.118151, bonus=1.000000, nodes=15 <= 40.194428)
                                @ 24  java.lang.AbstractStringBuilder.newCapacity(int):int (59 bytes)   relevance-based (relevance=0.133981, probability=0.118151, bonus=1.000000, nodes=27 <= 40.194428)
                                  @ 25  java.lang.Math.min(int, int):int (11 bytes)   trivial (relevance=0.133983, probability=0.118151, bonus=1.000000, nodes=7)
                                @ 32  java.util.Arrays.copyOf(byte[], int):byte[] (33 bytes)   relevance-based (relevance=0.133981, probability=0.118151, bonus=1.000000, nodes=28 <= 40.194428)
                              @ 21  java.lang.AbstractStringBuilder.ensureCapacityInternal(int):void (39 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=72 <= 300.000000)
                                  @ 11  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.006631, probability=0.999999, bonus=1.000000, nodes=5)
                                  @ 18  java.lang.AbstractStringBuilder.inflate():void (42 bytes)   not inlining relevance-based (relevance=0.006631, probability=0.006587, bonus=1.000000, nodes=45 > 1.989194)
                                @ 2  java.lang.AbstractStringBuilder.inflateIfNeededFor(String):void (22 bytes)   relevance-based (relevance=1.000000, probability=0.999999, bonus=1.000000, nodes=21 <= 300.000000)
                                  @ 1  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.006372, probability=0.999999, bonus=1.000000, nodes=5)
                                @ 15  java.lang.String.getBytes(byte[], int, byte):void (44 bytes)   relevance-based (relevance=1.006631, probability=0.999999, bonus=1.000000, nodes=53 <= 300.000000)
                              @ 30  java.lang.AbstractStringBuilder.putStringAt(int, String):void (19 bytes)   relevance-based (relevance=1.133980, probability=0.999999, bonus=1.000000, nodes=74 <= 300.000000)
                            @ 8  java.util.HashMap$EntryIterator.<init>(HashMap):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  java.util.HashMap$HashIterator.<init>(HashMap):void (79 bytes)   not inlining too large previous low-level graph (low-level-nodes: 409, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=58)
                            @ 15  java.util.HashMap$EntrySet.<init>(HashMap):void (10 bytes)   inline method (bytecode parsing)
                              @ 6  java.util.AbstractSet.<init>():void (5 bytes)   inline method (bytecode parsing)
                                @ 1  java.util.AbstractCollection.<init>():void (5 bytes)   inline method (bytecode parsing)
                            @ 4  jdk.graal.compiler.graph.Node.getNodeClass():NodeClass (5 bytes)   inline accessor method (bytecode parsing)
                              @ 40  jdk.graal.compiler.graph.Graph$1.hashCode(Object):int (15 bytes)   not inlining relevance-based (relevance=0.024163, probability=0.020151, bonus=1.000000, nodes=14 > 7.248895)
                 n            @ 48  java.lang.Object.hashCode():int (0 bytes)   trivial (relevance=1.174737, probability=0.979704, bonus=1.000000, nodes=5)
                              @ 61  org.graalvm.collections.EconomicMapImpl.getHashTableSize():int (43 bytes)   relevance-based (relevance=1.199073, probability=1.000000, bonus=1.000000, nodes=21 <= 300.000000)
                            @ 4  java.util.Collections.singletonIterator(Object):Iterator (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.util.Collections$1.<init>(Object):void (15 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 39  deltablue.Variable.getWalkStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 45  deltablue.Variable.setWalkStrength(Strength):void (6 bytes)   inline method (bytecode parsing)
                            @ 50  deltablue.Variable.getStay():boolean (5 bytes)   inline accessor method (bytecode parsing)
                            @ 53  deltablue.Variable.setStay(boolean):void (6 bytes)   inline method (bytecode parsing)
                            @ 57  deltablue.Variable.getStay():boolean (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                @ 2  deltablue.Strength.weaker(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                              @ 42  deltablue.Strength.weakest(Strength):Strength (14 bytes)   relevance-based (relevance=1.197772, probability=1.000000, bonus=1.000000, nodes=12 <= 300.000000)
                            @ 18  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 21  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 35  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 38  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                              @ 64  deltablue.EqualityConstraint.execute():void (42 bytes)   relevance-based (relevance=1.098886, probability=0.917442, bonus=1.000000, nodes=38 <= 300.000000)
                                    @ 3  java.lang.Math.max(int, int):int (11 bytes)   trivial (relevance=0.133981, probability=0.118151, bonus=1.000000, nodes=7)
                                  @ 29  jdk.internal.util.ArraysSupport.newLength(int, int, int):int (27 bytes)   relevance-based (relevance=0.133981, probability=0.118151, bonus=1.000000, nodes=15 <= 40.194428)
                                @ 24  java.lang.AbstractStringBuilder.newCapacity(int):int (59 bytes)   relevance-based (relevance=0.133981, probability=0.118151, bonus=1.000000, nodes=27 <= 40.194428)
                                  @ 25  java.lang.Math.min(int, int):int (11 bytes)   trivial (relevance=0.133983, probability=0.118151, bonus=1.000000, nodes=7)
                                @ 32  java.util.Arrays.copyOf(byte[], int):byte[] (33 bytes)   relevance-based (relevance=0.133981, probability=0.118151, bonus=1.000000, nodes=28 <= 40.194428)
                              @ 7  java.lang.AbstractStringBuilder.ensureCapacityInternal(int):void (39 bytes)   relevance-based (relevance=1.000018, probability=1.000000, bonus=1.000000, nodes=72 <= 300.000000)
                              @ 11  java.lang.AbstractStringBuilder.isLatin1():boolean (19 bytes)   trivial (relevance=1.133980, probability=0.999999, bonus=1.000000, nodes=9)
                              @ 18  java.lang.StringLatin1.canEncode(int):boolean (13 bytes)   trivial (relevance=1.133961, probability=0.999982, bonus=1.000000, nodes=9)
                              @ 46  java.lang.AbstractStringBuilder.isLatin1():boolean (19 bytes)   trivial (relevance=0.000021, probability=0.000018, bonus=1.000000, nodes=9)
                            @ 2  java.lang.StringUTF16.checkIndex(int, byte[]):void (9 bytes)   inline method (bytecode parsing)
                              @ 2  java.lang.StringUTF16.length(byte[]):int (5 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                              @ 72  java.lang.StringUTF16.putCharSB(byte[], int, int):void (12 bytes)   not inlining relevance-based (relevance=0.000021, probability=0.000018, bonus=1.000000, nodes=15 > 0.006185)
                            @ 45  java.nio.Buffer.session():MemorySessionImpl (20 bytes)   inline method (bytecode parsing)
                            @ 59  jdk.internal.misc.ScopedMemoryAccess.copyMemory(MemorySessionImpl, MemorySessionImpl, Object, long, Object, long, long):void (27 bytes)   inline method (bytecode parsing)
                              @ 12  jdk.internal.misc.ScopedMemoryAccess.copyMemoryInternal(MemorySessionImpl, MemorySessionImpl, Object, long, Object, long, long):void (56 bytes)   inline method (bytecode parsing)
                              @ 52  java.nio.DirectByteBuffer.base():Object (2 bytes)   trivial (relevance=1.000000, probability=0.626030, bonus=1.000000, nodes=4)
                                  @ 3  jdk.internal.misc.Unsafe.checkSize(long):void (32 bytes)   trivial (relevance=1.000000, probability=0.626030, bonus=1.000000, nodes=8)
                                      @ 15  jdk.internal.misc.Unsafe.checkOffset(Object, long):void (32 bytes)   trivial (relevance=0.853000, probability=0.288183, bonus=1.000000, nodes=8)
                                      @ 6  jdk.internal.misc.Unsafe.checkNativeAddress(long):void (28 bytes)   trivial (relevance=1.000000, probability=0.337847, bonus=1.000000, nodes=5)
                                    @ 3  jdk.internal.misc.Unsafe.checkPointer(Object, long):void (19 bytes)   relevance-based (relevance=1.854875, probability=0.626030, bonus=1.000000, nodes=17 <= 300.000000)
                                      @ 1  java.lang.Class.getComponentType():Class (14 bytes)   trivial (relevance=0.854011, probability=0.288525, bonus=1.000000, nodes=5)
                                    @ 15  jdk.internal.misc.Unsafe.checkPrimitiveArray(Class):void (22 bytes)   trivial (relevance=0.854011, probability=0.288525, bonus=1.000000, nodes=5)
                                  @ 9  jdk.internal.misc.Unsafe.checkPrimitivePointer(Object, long):void (19 bytes)   relevance-based (relevance=1.000000, probability=0.626030, bonus=1.000000, nodes=26 <= 300.000000)
                                      @ 6  jdk.internal.misc.Unsafe.checkNativeAddress(long):void (28 bytes)   trivial (relevance=1.000000, probability=0.626030, bonus=1.000000, nodes=5)
                                    @ 3  jdk.internal.misc.Unsafe.checkPointer(Object, long):void (19 bytes)   trivial (relevance=1.000000, probability=0.626030, bonus=1.000000, nodes=6)
                                  @ 17  jdk.internal.misc.Unsafe.checkPrimitivePointer(Object, long):void (19 bytes)   trivial (relevance=1.853000, probability=0.626030, bonus=1.000000, nodes=6)
                                @ 9  jdk.internal.misc.Unsafe.copyMemoryChecks(Object, long, Object, long, long):void (21 bytes)   relevance-based (relevance=1.087908, probability=0.626030, bonus=1.000000, nodes=32 <= 300.000000)
                              @ 28  jdk.internal.misc.Unsafe.copyMemory(Object, long, Object, long, long):void (33 bytes)   relevance-based (relevance=1.000000, probability=0.626030, bonus=1.000000, nodes=40 <= 300.000000)
                            @ 4  java.nio.Buffer.session():MemorySessionImpl (20 bytes)   inline method (bytecode parsing)
                            @ 11  java.nio.Buffer.checkIndex(int):int (12 bytes)   inline method (bytecode parsing)
                            @ 14  java.nio.DirectByteBuffer.ix(int):long (10 bytes)   inline method (bytecode parsing)
                            @ 18  jdk.internal.misc.ScopedMemoryAccess.putByte(MemorySessionImpl, Object, long, byte):void (21 bytes)   inline method (bytecode parsing)
                              @ 6  jdk.internal.misc.ScopedMemoryAccess.putByteInternal(MemorySessionImpl, Object, long, byte):void (35 bytes)   inline method (bytecode parsing)
                              @ 107  java.nio.DirectByteBuffer.put(int, byte):ByteBuffer (37 bytes)   relevance-based (relevance=1.000000, probability=1.454987, bonus=1.000000, nodes=29 <= 300.000000)
                            @ 19  org.graalvm.collections.EconomicMapImpl.getKey(int):Object (9 bytes)   inline method (bytecode parsing)
                            @ 4  jdk.graal.compiler.graph.Node.getNodeClass():NodeClass (5 bytes)   inline accessor method (bytecode parsing)
                                @ 40  jdk.graal.compiler.graph.Graph$1.hashCode(Object):int (15 bytes)   not inlining relevance-based (relevance=0.024217, probability=0.020199, bonus=1.000000, nodes=14 > 7.265028)
                 n              @ 48  java.lang.Object.hashCode():int (0 bytes)   trivial (relevance=1.174510, probability=0.979657, bonus=1.000000, nodes=5)
                                @ 61  org.graalvm.collections.EconomicMapImpl.getHashTableSize():int (43 bytes)   relevance-based (relevance=1.198900, probability=1.000000, bonus=1.000000, nodes=21 <= 300.000000)
                              @ 3  org.graalvm.collections.EconomicMapImpl.getHashIndex(Object):int (68 bytes)   relevance-based (relevance=3.470219, probability=1.000000, bonus=1.000000, nodes=81 <= 300.000000)
                              @ 6  org.graalvm.collections.EconomicMapImpl.getHashArray(int):int (126 bytes)   relevance-based (relevance=1.198900, probability=1.000000, bonus=1.000000, nodes=31 <= 300.000000)
                            @ 49  jdk.graal.compiler.graph.Node.valueEquals(Node):boolean (10 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.graph.Node.getNodeClass():NodeClass (5 bytes)   inline accessor method (bytecode parsing)
                                @ 46  jdk.graal.compiler.graph.Graph$1.equals(Object, Object):boolean (53 bytes)   not inlining relevance-based (relevance=0.004515, probability=0.003170, bonus=1.000000, nodes=25 > 1.354367)
                              @ 36  java.lang.Object.equals(Object):boolean (11 bytes)   not inlining no methods remaining after filtering less frequent methods (6 methods previously)
                              @ 26  org.graalvm.collections.EconomicMapImpl.compareKeys(Object, Object):boolean (52 bytes)   relevance-based (relevance=0.606179, probability=0.505612, bonus=1.000000, nodes=40 <= 181.853586)
                              @ 36  org.graalvm.collections.EconomicMapImpl.getRawValue(int):Object (11 bytes)   relevance-based (relevance=0.260696, probability=0.217446, bonus=1.000000, nodes=10 <= 78.208843)
                            @ 15  org.graalvm.collections.EconomicMapImpl.getKey(int):Object (9 bytes)   inline method (bytecode parsing)
                              @ 56  org.graalvm.collections.EconomicMapImpl.findWithCollision(Object, EconomicMapImpl$CollisionLink):int (65 bytes)   not inlining relevance-based (relevance=0.021659, probability=0.018066, bonus=1.000000, nodes=42 > 6.497838)
                            @ 51  org.graalvm.word.LocationIdentity.any():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                            @ 72  jdk.graal.compiler.hotspot.HotSpotBackend.unsafeArraycopy(Word, Word, Word):void (10 bytes)   inline method (bytecode parsing)
                            @ 4  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 15  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 30  deltablue.Variable.getWalkStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 65  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 76  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 91  deltablue.Variable.getWalkStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 126  deltablue.Variable.getWalkStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 133  deltablue.Variable.getWalkStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 189  deltablue.Variable.getWalkStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                              @ 136  deltablue.Strength.weaker(Strength):boolean (17 bytes)   relevance-based (relevance=0.999490, probability=0.402410, bonus=1.000000, nodes=14 <= 299.847060)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                              @ 192  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=0.999490, probability=0.402410, bonus=1.000000, nodes=13 <= 299.847060)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                              @ 94  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.402616, bonus=1.000000, nodes=13 <= 300.000000)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                              @ 33  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=0.484268, probability=0.194974, bonus=1.000000, nodes=13 <= 145.280483)
                              @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=9)
                                @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                              @ 14  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=8)
                            @ 11  java.lang.Math.max(int, int):int (11 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.StringLatin1.canEncode(int):boolean (13 bytes)   trivial (relevance=1.000023, probability=1.000000, bonus=1.000000, nodes=9)
                                @ 18  java.lang.Math.min(int, int):int (11 bytes)   trivial (relevance=1.000023, probability=1.000000, bonus=1.000000, nodes=7)
                              @ 17  java.lang.StringLatin1.indexOf(byte[], int, int, int):int (37 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=24 <= 300.000000)
                            @ 11  java.lang.Math.max(int, int):int (11 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.StringLatin1.canEncode(int):boolean (13 bytes)   trivial (relevance=1.000023, probability=1.000000, bonus=1.000000, nodes=9)
                              @ 18  java.lang.Math.min(int, int):int (11 bytes)   trivial (relevance=1.000023, probability=1.000000, bonus=1.000000, nodes=7)
                            @ 12  deltablue.AbstractConstraint.addConstraint(Planner):void (10 bytes)   inline method (bytecode parsing)
                            @ 5  deltablue.Variable.addConstraint(AbstractConstraint):void (9 bytes)   inline method (bytecode parsing)
                              @ 6  deltablue.BinaryConstraint.<init>(Variable, Variable, Strength$Sym, Planner):void (21 bytes)   not inlining too large previous low-level graph (low-level-nodes: 395, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=17)
                            @ 13  deltablue.Variable.addConstraint(AbstractConstraint):void (9 bytes)   inline method (bytecode parsing)
                            @ 5  deltablue.Variable.addConstraint(AbstractConstraint):void (9 bytes)   inline method (bytecode parsing)
                            @ 13  deltablue.Variable.addConstraint(AbstractConstraint):void (9 bytes)   inline method (bytecode parsing)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                  @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000131, probability=0.000131, bonus=1.000000, nodes=41 > 0.039331)
                                @ 5  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=35 <= 300.000000)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                  @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000131, probability=0.000131, bonus=1.000000, nodes=41 > 0.039331)
                                @ 5  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000131, probability=1.000000, bonus=1.000000, nodes=35 <= 300.000000)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                              @ 1  deltablue.BinaryConstraint.addToGraph():void (22 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=86 <= 300.000000)
                                @ 1  deltablue.Planner.newMark():int (15 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=10 <= 300.000000)
                                @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000131, probability=0.000131, bonus=1.000000, nodes=41 > 0.039331)
                              @ 5  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=35 <= 300.000000)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f45e0031810.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                                @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000131, probability=0.000131, bonus=1.000000, nodes=41 > 0.039331)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                              @ 5  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000131, probability=1.000000, bonus=1.000000, nodes=35 <= 300.000000)
                                @ 8  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 697, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=72)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f45e0031810.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                @ 19  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 697, relevance=1.000000, probability=1.261254, bonus=1.000000, nodes=72)
                              @ 6  deltablue.Planner.incrementalAdd(AbstractConstraint):void (27 bytes)   relevance-based (relevance=1.000131, probability=1.000000, bonus=1.000000, nodes=28 <= 300.000000)
                            @ 4  som.Vector.<init>():void (7 bytes)   inline method (bytecode parsing)
                              @ 3  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 10  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 14  deltablue.Strength.absoluteWeakest():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 17  deltablue.Variable.setWalkStrength(Strength):void (6 bytes)   inline method (bytecode parsing)
                            @ 22  deltablue.Variable.setStay(boolean):void (6 bytes)   inline method (bytecode parsing)
                            @ 48  deltablue.Variable.getConstraints():Vector (5 bytes)   inline accessor method (bytecode parsing)
                            @ 52  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.Planner$$Lambda/0x00007f45e0083030.<init>(Vector):void (10 bytes)   inline method (bytecode parsing)
                            @ 64  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.Planner$$Lambda/0x00007f45e0083250.<init>(Vector):void (10 bytes)   inline method (bytecode parsing)
                            @ 76  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object):Object (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.lang.invoke.LambdaForm$MH/0x00007f45e0000800.invoke(Object):Object (8 bytes)   inline method (bytecode parsing)
                              @ 31  som.Vector.isEmpty():boolean (17 bytes)   relevance-based (relevance=1.000029, probability=1.000000, bonus=1.000000, nodes=10 <= 300.000000)
                                @ 1  som.Vector.isEmpty():boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.999971, bonus=1.000000, nodes=10 <= 300.000000)
                              @ 38  som.Vector.removeFirst():Object (31 bytes)   relevance-based (relevance=1.000000, probability=0.999971, bonus=1.000000, nodes=18 <= 300.000000)
                                    @ 1  deltablue.BinaryConstraint.isSatisfied():boolean (13 bytes)   trivial (relevance=1.000131, probability=9.234760, bonus=1.000000, nodes=9)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                    @ 9  som.Vector.append(Object):void (51 bytes)   not inlining relevance-based (relevance=0.000131, probability=0.001208, bonus=1.000000, nodes=35 > 0.039231)
                                  @ 8  deltablue.Planner.lambda$removePropagateFrom$4(Vector, AbstractConstraint):void (13 bytes)   relevance-based (relevance=1.000000, probability=9.234760, bonus=1.000000, nodes=38 <= 300.000000)
                                @ 20  deltablue.Planner$$Lambda/0x00007f45e0083030.apply(Object):void (12 bytes)   relevance-based (relevance=1.000000, probability=9.234760, bonus=1.000000, nodes=42 <= 300.000000)
                              @ 57  som.Vector.forEach(ForEachInterface):void (32 bytes)   relevance-based (relevance=1.000000, probability=0.999971, bonus=1.000000, nodes=55 <= 300.000000)
                            @ 1  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 6  deltablue.Variable.getConstraints():Vector (5 bytes)   inline accessor method (bytecode parsing)
                            @ 11  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object, Object):Object (10 bytes)   inline method (bytecode parsing)
                              @ 6  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object, Object):Object (24 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 19  deltablue.Planner$$Lambda/0x00007f45e0083470.<init>(AbstractConstraint, ForEachInterface):void (15 bytes)   relevance-based (relevance=1.000000, probability=0.999971, bonus=1.000000, nodes=11 <= 300.000000)
                                      @ 6  deltablue.BinaryConstraint.isSatisfied():boolean (13 bytes)   trivial (relevance=1.000000, probability=4.617380, bonus=1.000000, nodes=9)
                                      @ 14  deltablue.Planner$$Lambda/0x00007f45e0083250.apply(Object):void (12 bytes)   not inlining too large previous low-level graph (low-level-nodes: 659, relevance=1.000000, probability=4.617380, bonus=1.000000, nodes=12)
                                    @ 12  deltablue.Planner.lambda$constraintsConsuming$3(AbstractConstraint, ForEachInterface, AbstractConstraint):void (20 bytes)   relevance-based (relevance=1.000000, probability=9.234760, bonus=1.000000, nodes=41 <= 300.000000)
                                  @ 20  deltablue.Planner$$Lambda/0x00007f45e0083470.apply(Object):void (16 bytes)   relevance-based (relevance=1.000000, probability=9.234760, bonus=1.000000, nodes=45 <= 300.000000)
                                @ 16  som.Vector.forEach(ForEachInterface):void (32 bytes)   relevance-based (relevance=1.000000, probability=0.999971, bonus=1.000000, nodes=58 <= 300.000000)
                              @ 69  deltablue.Planner.constraintsConsuming(Variable, ForEachInterface):void (20 bytes)   relevance-based (relevance=1.000000, probability=0.999971, bonus=1.000000, nodes=77 <= 300.000000)
                              @ 31  som.Vector.isEmpty():boolean (17 bytes)   relevance-based (relevance=1.000029, probability=35033.673335, bonus=1.000000, nodes=10 <= 300.000000)
                                @ 1  som.Vector.isEmpty():boolean (17 bytes)   relevance-based (relevance=1.000000, probability=35032.673364, bonus=1.000000, nodes=10 <= 300.000000)
                              @ 38  som.Vector.removeFirst():Object (31 bytes)   relevance-based (relevance=1.000000, probability=35032.673364, bonus=1.000000, nodes=18 <= 300.000000)
                                    @ 1  deltablue.BinaryConstraint.isSatisfied():boolean (13 bytes)   trivial (relevance=1.000131, probability=323527.567842, bonus=1.000000, nodes=9)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                    @ 9  som.Vector.append(Object):void (51 bytes)   not inlining relevance-based (relevance=0.000131, probability=42.307777, bonus=1.000000, nodes=35 > 0.039231)
                                  @ 8  deltablue.Planner.lambda$removePropagateFrom$4(Vector, AbstractConstraint):void (13 bytes)   relevance-based (relevance=1.000000, probability=323527.567842, bonus=1.000000, nodes=38 <= 300.000000)
                                @ 20  deltablue.Planner$$Lambda/0x00007f45e0083030.apply(Object):void (12 bytes)   relevance-based (relevance=1.000000, probability=323527.567842, bonus=1.000000, nodes=42 <= 300.000000)
                              @ 57  som.Vector.forEach(ForEachInterface):void (32 bytes)   relevance-based (relevance=1.000000, probability=35032.673364, bonus=1.000000, nodes=55 <= 300.000000)
                            @ 1  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 6  deltablue.Variable.getConstraints():Vector (5 bytes)   inline accessor method (bytecode parsing)
                            @ 11  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object, Object):Object (10 bytes)   inline method (bytecode parsing)
                              @ 6  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object, Object):Object (24 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 19  deltablue.Planner$$Lambda/0x00007f45e0083470.<init>(AbstractConstraint, ForEachInterface):void (15 bytes)   relevance-based (relevance=1.000000, probability=35032.673364, bonus=1.000000, nodes=11 <= 300.000000)
                                      @ 6  deltablue.BinaryConstraint.isSatisfied():boolean (13 bytes)   trivial (relevance=1.000000, probability=161763.783921, bonus=1.000000, nodes=9)
                            @ 41  java.lang.Enum.ordinal():int (5 bytes)   inline accessor method (bytecode parsing)
                                      @ 14  deltablue.Planner$$Lambda/0x00007f45e0083250.apply(Object):void (12 bytes)   not inlining too large previous low-level graph (low-level-nodes: 659, relevance=1.000000, probability=161763.783921, bonus=1.000000, nodes=12)
                                    @ 12  deltablue.Planner.lambda$constraintsConsuming$3(AbstractConstraint, ForEachInterface, AbstractConstraint):void (20 bytes)   relevance-based (relevance=1.000000, probability=323527.567842, bonus=1.000000, nodes=41 <= 300.000000)
                                  @ 20  deltablue.Planner$$Lambda/0x00007f45e0083470.apply(Object):void (16 bytes)   relevance-based (relevance=1.000000, probability=323527.567842, bonus=1.000000, nodes=45 <= 300.000000)
                                @ 16  som.Vector.forEach(ForEachInterface):void (32 bytes)   relevance-based (relevance=1.000000, probability=35032.673364, bonus=1.000000, nodes=58 <= 300.000000)
                              @ 69  deltablue.Planner.constraintsConsuming(Variable, ForEachInterface):void (20 bytes)   relevance-based (relevance=1.000000, probability=35032.673364, bonus=1.000000, nodes=77 <= 300.000000)
                            @ 1  som.Vector.size():int (10 bytes)   inline method (bytecode parsing)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                      @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.250000, bonus=1.000000, nodes=13 <= 300.000000)
                                    @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.250000, bonus=1.000000, nodes=24 <= 300.000000)
                                  @ 45  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.250000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                      @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.062500, bonus=1.000000, nodes=13 <= 300.000000)
                                    @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.062500, bonus=1.000000, nodes=24 <= 300.000000)
                                  @ 101  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.062500, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                      @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.062500, bonus=1.000000, nodes=13 <= 300.000000)
                                    @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.062500, bonus=1.000000, nodes=24 <= 300.000000)
                                  @ 114  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.062500, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                      @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.010417, bonus=1.000000, nodes=13 <= 300.000000)
                                    @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.010417, bonus=1.000000, nodes=24 <= 300.000000)
                                  @ 184  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.010417, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                      @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.010417, bonus=1.000000, nodes=13 <= 300.000000)
                                    @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.010417, bonus=1.000000, nodes=24 <= 300.000000)
                                  @ 218  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.010417, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                        @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.003906, bonus=1.000000, nodes=13 <= 300.000000)
                                      @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.003906, bonus=1.000000, nodes=24 <= 300.000000)
                                    @ 45  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.003906, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                        @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000977, bonus=1.000000, nodes=13 <= 300.000000)
                                      @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000977, bonus=1.000000, nodes=24 <= 300.000000)
                                    @ 101  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000977, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                        @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000977, bonus=1.000000, nodes=13 <= 300.000000)
                                      @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000977, bonus=1.000000, nodes=24 <= 300.000000)
                                    @ 114  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000977, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                        @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000163, bonus=1.000000, nodes=13 <= 300.000000)
                                      @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000163, bonus=1.000000, nodes=24 <= 300.000000)
                                    @ 184  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000163, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                        @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000163, bonus=1.000000, nodes=13 <= 300.000000)
                                      @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000163, bonus=1.000000, nodes=24 <= 300.000000)
                                    @ 218  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000163, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                              @ 9  java.util.HashMap$Node.<init>(int, Object, Object, HashMap$Node):void (26 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=17 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000061, bonus=1.000000, nodes=13 <= 300.000000)
                                        @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000061, bonus=1.000000, nodes=24 <= 300.000000)
                                      @ 45  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000061, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000015, bonus=1.000000, nodes=13 <= 300.000000)
                                        @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000015, bonus=1.000000, nodes=24 <= 300.000000)
                                      @ 101  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000015, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000015, bonus=1.000000, nodes=13 <= 300.000000)
                                        @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000015, bonus=1.000000, nodes=24 <= 300.000000)
                                      @ 114  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000015, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000003, bonus=1.000000, nodes=13 <= 300.000000)
                                        @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000003, bonus=1.000000, nodes=24 <= 300.000000)
                                      @ 184  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000003, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000003, bonus=1.000000, nodes=13 <= 300.000000)
                                        @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000003, bonus=1.000000, nodes=24 <= 300.000000)
                                      @ 218  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000003, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                            @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000001, bonus=1.000000, nodes=13 <= 300.000000)
                                          @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000001, bonus=1.000000, nodes=24 <= 300.000000)
                                        @ 45  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000001, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                            @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                          @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                        @ 101  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                            @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                          @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                        @ 114  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                            @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                          @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                        @ 184  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                            @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                          @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                        @ 218  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 45  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 101  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 114  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 184  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 218  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 45  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 101  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  org.graalvm.collections.EconomicMapImpl.size():int (10 bytes)   inline method (bytecode parsing)
                            @ 84  org.graalvm.collections.EconomicMapImpl.getKey(int):Object (9 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 114  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 184  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 218  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                                          @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining it exceeds the maximum recursive inlining depth
                                          @ 269  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining it exceeds the maximum recursive inlining depth
                                          @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=202 <= 300.000000)
                              @ 6  org.graalvm.collections.EconomicMapImpl.getHashThreshold():int (22 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=12 <= 300.000000)
                                        @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=387 > 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 4  jdk.graal.compiler.graph.Node.getNodeClass():NodeClass (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 40  jdk.graal.compiler.graph.Graph$1.hashCode(Object):int (15 bytes)   not inlining relevance-based (relevance=0.024217, probability=0.435377, bonus=1.000000, nodes=14 > 7.265028)
                 n                @ 48  java.lang.Object.hashCode():int (0 bytes)   trivial (relevance=1.174510, probability=21.115734, bonus=1.000000, nodes=5)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 61  org.graalvm.collections.EconomicMapImpl.getHashTableSize():int (43 bytes)   relevance-based (relevance=1.198900, probability=21.554219, bonus=1.000000, nodes=21 <= 300.000000)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                @ 2  org.graalvm.collections.EconomicMapImpl.getHashIndex(Object):int (68 bytes)   relevance-based (relevance=1.149109, probability=21.554219, bonus=1.000000, nodes=81 <= 300.000000)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 45  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                                @ 10  org.graalvm.collections.EconomicMapImpl.getHashArray(int):int (126 bytes)   relevance-based (relevance=1.198900, probability=21.554219, bonus=1.000000, nodes=31 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                @ 38  org.graalvm.collections.EconomicMapImpl.setHashArray(int, int):void (112 bytes)   relevance-based (relevance=1.198900, probability=21.554219, bonus=1.000000, nodes=37 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 101  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                                @ 43  org.graalvm.collections.EconomicMapImpl.getRawValue(int):Object (11 bytes)   relevance-based (relevance=1.198900, probability=21.554219, bonus=1.000000, nodes=10 <= 300.000000)
                                @ 121  org.graalvm.collections.EconomicMapImpl.getRawValue(int):Object (11 bytes)   relevance-based (relevance=0.086463, probability=1.554465, bonus=1.000000, nodes=10 <= 25.938970)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                                @ 126  org.graalvm.collections.EconomicMapImpl$CollisionLink.<init>(Object, int):void (15 bytes)   relevance-based (relevance=0.086463, probability=1.554465, bonus=1.000000, nodes=11 <= 25.938970)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                @ 129  org.graalvm.collections.EconomicMapImpl.setRawValue(int, Object):void (12 bytes)   relevance-based (relevance=0.086463, probability=1.554465, bonus=1.000000, nodes=12 <= 25.938970)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 114  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                                @ 104  org.graalvm.collections.EconomicMapImpl$CollisionLink.<init>(Object, int):void (15 bytes)   relevance-based (relevance=0.037351, probability=0.671513, bonus=1.000000, nodes=11 <= 11.205373)
                                @ 107  org.graalvm.collections.EconomicMapImpl.setRawValue(int, Object):void (12 bytes)   not inlining relevance-based (relevance=0.037351, probability=0.671513, bonus=1.000000, nodes=12 > 11.205373)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                                @ 157  org.graalvm.collections.EconomicMapImpl.setRawValue(int, Object):void (12 bytes)   not inlining relevance-based (relevance=0.031755, probability=0.570905, bonus=1.000000, nodes=12 > 9.526555)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 184  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                              @ 99  org.graalvm.collections.EconomicMapImpl.putHashEntry(Object, int, boolean):void (161 bytes)   relevance-based (relevance=1.000000, probability=21.554219, bonus=1.000000, nodes=188 <= 300.000000)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 218  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 45  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 101  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 114  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 184  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 218  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                                          @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining it exceeds the maximum recursive inlining depth
                                          @ 269  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining it exceeds the maximum recursive inlining depth
                                          @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=202 <= 300.000000)
                                        @ 269  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=387 > 300.000000)
                                      @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   relevance-based (relevance=1.000000, probability=0.000002, bonus=1.000000, nodes=202 <= 300.000000)
                                    @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.000122, bonus=1.000000, nodes=387 > 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000061, bonus=1.000000, nodes=13 <= 300.000000)
                                        @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000061, bonus=1.000000, nodes=24 <= 300.000000)
                                      @ 45  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000061, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000015, bonus=1.000000, nodes=13 <= 300.000000)
                                        @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000015, bonus=1.000000, nodes=24 <= 300.000000)
                                      @ 101  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000015, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000015, bonus=1.000000, nodes=13 <= 300.000000)
                                        @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000015, bonus=1.000000, nodes=24 <= 300.000000)
                                      @ 114  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000015, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000003, bonus=1.000000, nodes=13 <= 300.000000)
                                        @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000003, bonus=1.000000, nodes=24 <= 300.000000)
                                      @ 184  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000003, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000003, bonus=1.000000, nodes=13 <= 300.000000)
                                        @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000003, bonus=1.000000, nodes=24 <= 300.000000)
                                      @ 218  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000003, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                            @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000001, bonus=1.000000, nodes=13 <= 300.000000)
                                          @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000001, bonus=1.000000, nodes=24 <= 300.000000)
                                        @ 45  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000001, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                            @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                          @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                        @ 101  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                            @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                          @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                        @ 114  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                            @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                          @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                        @ 184  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                            @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                          @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                        @ 218  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 45  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 101  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 114  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 184  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 218  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 45  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 101  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 114  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 184  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 218  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                                          @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining it exceeds the maximum recursive inlining depth
                                          @ 269  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining it exceeds the maximum recursive inlining depth
                                          @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=202 <= 300.000000)
                                        @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=387 > 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 45  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 101  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 114  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 184  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 218  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 45  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 101  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 114  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 184  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 218  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                                          @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining it exceeds the maximum recursive inlining depth
                                          @ 269  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining it exceeds the maximum recursive inlining depth
                                          @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=202 <= 300.000000)
                                        @ 269  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=387 > 300.000000)
                                      @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   relevance-based (relevance=1.000000, probability=0.000002, bonus=1.000000, nodes=202 <= 300.000000)
                                    @ 269  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.000122, bonus=1.000000, nodes=387 > 300.000000)
                                  @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   relevance-based (relevance=1.000000, probability=0.007812, bonus=1.000000, nodes=202 <= 300.000000)
                                @ 19  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=387 > 300.000000)
                              @ 81  som.Vector.sort(Comparator):void (23 bytes)   relevance-based (relevance=1.000029, probability=1.000000, bonus=1.000000, nodes=22 <= 300.000000)
                            @ 13  java.util.concurrent.locks.ReentrantLock.lock():void (8 bytes)   inline method (bytecode parsing)
                            @ 25  java.util.concurrent.locks.ReentrantLock.unlock():void (10 bytes)   inline method (bytecode parsing)
                              @ 5  java.util.concurrent.locks.AbstractQueuedSynchronizer.release(int):boolean (19 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.ref.ReferenceQueue.headIsNull():boolean (13 bytes)   relevance-based (relevance=1.000600, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                            @ 9  java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(int):void (20 bytes)   inline method (bytecode parsing)
                              @ 4  java.util.concurrent.locks.ReentrantLock$Sync.lock():void (13 bytes)   not inlining relevance-based (relevance=0.000600, probability=0.000599, bonus=1.000000, nodes=31 > 0.179935)
                              @ 17  java.lang.ref.ReferenceQueue.poll0():Reference (65 bytes)   not inlining relevance-based (relevance=0.000600, probability=0.000599, bonus=1.000000, nodes=41 > 0.179935)
                            @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 8  java.util.concurrent.locks.AbstractOwnableSynchronizer.getExclusiveOwnerThread():Thread (5 bytes)   inline accessor method (bytecode parsing)
                            @ 41  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                            @ 46  java.util.concurrent.locks.AbstractQueuedSynchronizer.setState(int):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  java.util.concurrent.locks.ReentrantLock$Sync.tryRelease(int):boolean (51 bytes)   not inlining relevance-based (relevance=0.000600, probability=0.000599, bonus=1.000000, nodes=37 > 0.179935)
                            @ 22  java.util.concurrent.locks.AbstractQueuedSynchronizer$Node.getAndUnsetStatus(int):int (14 bytes)   inline method (bytecode parsing)
                              @ 10  jdk.internal.misc.Unsafe.getAndBitwiseAndInt(Object, long, int):int (27 bytes)   inline method (bytecode parsing)
                              @ 12  java.util.concurrent.locks.AbstractQueuedSynchronizer.signalNext(AbstractQueuedSynchronizer$Node):void (34 bytes)   not inlining relevance-based (relevance=0.000543, probability=0.000543, bonus=1.000000, nodes=56 > 0.162873)
                              @ 2  org.graalvm.collections.EconomicMapImpl.checkKeyNonNull(Object):void (15 bytes)   trivial (relevance=1.250481, probability=1.000000, bonus=1.000000, nodes=6)
                                @ 1  org.graalvm.collections.EconomicMapImpl.hasHashArray():boolean (13 bytes)   trivial (relevance=1.250100, probability=1.000000, bonus=1.000000, nodes=9)
                            @ 19  org.graalvm.collections.EconomicMapImpl.getKey(int):Object (9 bytes)   inline method (bytecode parsing)
                            @ 4  jdk.graal.compiler.graph.Node.getNodeClass():NodeClass (5 bytes)   inline accessor method (bytecode parsing)
                                    @ 40  jdk.graal.compiler.graph.Graph$1.hashCode(Object):int (15 bytes)   not inlining relevance-based (relevance=0.024217, probability=0.016158, bonus=1.000000, nodes=14 > 7.265028)
                 n                  @ 48  java.lang.Object.hashCode():int (0 bytes)   trivial (relevance=1.174510, probability=0.783663, bonus=1.000000, nodes=5)
                                    @ 61  org.graalvm.collections.EconomicMapImpl.getHashTableSize():int (43 bytes)   relevance-based (relevance=1.198900, probability=0.799936, bonus=1.000000, nodes=21 <= 300.000000)
                                  @ 3  org.graalvm.collections.EconomicMapImpl.getHashIndex(Object):int (68 bytes)   relevance-based (relevance=3.473862, probability=0.799936, bonus=1.000000, nodes=81 <= 300.000000)
                                  @ 6  org.graalvm.collections.EconomicMapImpl.getHashArray(int):int (126 bytes)   relevance-based (relevance=1.198900, probability=0.799936, bonus=1.000000, nodes=31 <= 300.000000)
                            @ 49  jdk.graal.compiler.graph.Node.valueEquals(Node):boolean (10 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.graph.Node.getNodeClass():NodeClass (5 bytes)   inline accessor method (bytecode parsing)
                                    @ 46  jdk.graal.compiler.graph.Graph$1.equals(Object, Object):boolean (53 bytes)   not inlining relevance-based (relevance=0.004513, probability=0.002535, bonus=1.000000, nodes=25 > 1.353923)
                                  @ 36  java.lang.Object.equals(Object):boolean (11 bytes)   not inlining no methods remaining after filtering less frequent methods (6 methods previously)
                                  @ 26  org.graalvm.collections.EconomicMapImpl.compareKeys(Object, Object):boolean (52 bytes)   relevance-based (relevance=0.605980, probability=0.404325, bonus=1.000000, nodes=40 <= 181.793898)
                                  @ 36  org.graalvm.collections.EconomicMapImpl.getRawValue(int):Object (11 bytes)   relevance-based (relevance=0.260860, probability=0.174052, bonus=1.000000, nodes=10 <= 78.257854)
                            @ 15  org.graalvm.collections.EconomicMapImpl.getKey(int):Object (9 bytes)   inline method (bytecode parsing)
                                  @ 56  org.graalvm.collections.EconomicMapImpl.findWithCollision(Object, EconomicMapImpl$CollisionLink):int (65 bytes)   not inlining relevance-based (relevance=0.021633, probability=0.014434, bonus=1.000000, nodes=42 > 6.489941)
                                @ 9  org.graalvm.collections.EconomicMapImpl.findHash(Object):int (62 bytes)   relevance-based (relevance=1.000000, probability=0.799936, bonus=1.000000, nodes=168 <= 300.000000)
                            @ 49  jdk.graal.compiler.graph.Node.valueEquals(Node):boolean (10 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.graph.Node.getNodeClass():NodeClass (5 bytes)   inline accessor method (bytecode parsing)
                                    @ 46  jdk.graal.compiler.graph.Graph$1.equals(Object, Object):boolean (53 bytes)   not inlining relevance-based (relevance=0.002643, probability=0.002332, bonus=1.000000, nodes=25 > 0.792978)
                                  @ 36  java.lang.Object.equals(Object):boolean (11 bytes)   not inlining no methods remaining after filtering less frequent methods (6 methods previously)
                                  @ 26  org.graalvm.collections.EconomicMapImpl.compareKeys(Object, Object):boolean (52 bytes)   relevance-based (relevance=0.354916, probability=0.371921, bonus=1.000000, nodes=40 <= 106.474736)
                                @ 15  org.graalvm.collections.EconomicMapImpl.findLinear(Object):int (42 bytes)   relevance-based (relevance=0.299845, probability=0.200064, bonus=1.000000, nodes=66 <= 89.953479)
                              @ 7  org.graalvm.collections.EconomicMapImpl.find(Object):int (19 bytes)   relevance-based (relevance=1.250481, probability=1.000000, bonus=1.000000, nodes=237 <= 300.000000)
                                @ 2  org.graalvm.collections.EconomicMapImpl.getRawValue(int):Object (11 bytes)   relevance-based (relevance=0.315109, probability=0.200308, bonus=1.000000, nodes=10 <= 94.532668)
                              @ 18  org.graalvm.collections.EconomicMapImpl.getValue(int):Object (23 bytes)   relevance-based (relevance=0.300210, probability=0.200308, bonus=1.000000, nodes=19 <= 90.063099)
                            @ 8  deltablue.AbstractConstraint.lambda$satisfy$1(int, Variable):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                              @ 28  deltablue.AbstractConstraint$$Lambda/0x00007f45e0031810.apply(Object):void (12 bytes)   relevance-based (relevance=0.986997, probability=0.496728, bonus=1.000000, nodes=13 <= 296.099044)
                            @ 8  deltablue.AbstractConstraint.lambda$satisfy$1(int, Variable):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                              @ 15  deltablue.AbstractConstraint$$Lambda/0x00007f45e0031810.apply(Object):void (12 bytes)   relevance-based (relevance=1.000000, probability=0.503272, bonus=1.000000, nodes=13 <= 300.000000)
                            @ 4  som.Vector.<init>():void (7 bytes)   inline method (bytecode parsing)
                              @ 3  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 10  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 14  deltablue.Strength.absoluteWeakest():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 17  deltablue.Variable.setWalkStrength(Strength):void (6 bytes)   inline method (bytecode parsing)
                            @ 22  deltablue.Variable.setStay(boolean):void (6 bytes)   inline method (bytecode parsing)
                            @ 48  deltablue.Variable.getConstraints():Vector (5 bytes)   inline accessor method (bytecode parsing)
                            @ 52  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.Planner$$Lambda/0x00007f45e0083030.<init>(Vector):void (10 bytes)   inline method (bytecode parsing)
                            @ 64  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.Planner$$Lambda/0x00007f45e0083250.<init>(Vector):void (10 bytes)   inline method (bytecode parsing)
                            @ 76  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object):Object (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.lang.invoke.LambdaForm$MH/0x00007f45e0000800.invoke(Object):Object (8 bytes)   inline method (bytecode parsing)
                            @ 5  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                  @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000131, probability=0.000131, bonus=1.000000, nodes=41 > 0.039331)
                                @ 11  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=35 <= 300.000000)
                              @ 26  som.Vector.with(Object):Vector (16 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=40 <= 300.000000)
                              @ 31  som.Vector.isEmpty():boolean (17 bytes)   relevance-based (relevance=1.000029, probability=35039.896679, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 1  som.Vector.size():int (10 bytes)   inline method (bytecode parsing)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                      @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.250000, bonus=1.000000, nodes=13 <= 300.000000)
                                    @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.250000, bonus=1.000000, nodes=24 <= 300.000000)
                                  @ 45  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.250000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                      @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.062500, bonus=1.000000, nodes=13 <= 300.000000)
                                    @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.062500, bonus=1.000000, nodes=24 <= 300.000000)
                                  @ 101  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.062500, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                      @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.062500, bonus=1.000000, nodes=13 <= 300.000000)
                                    @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.062500, bonus=1.000000, nodes=24 <= 300.000000)
                                  @ 114  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.062500, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                      @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.010417, bonus=1.000000, nodes=13 <= 300.000000)
                                    @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.010417, bonus=1.000000, nodes=24 <= 300.000000)
                                  @ 184  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.010417, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                      @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.010417, bonus=1.000000, nodes=13 <= 300.000000)
                                    @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.010417, bonus=1.000000, nodes=24 <= 300.000000)
                                  @ 218  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.010417, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                        @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.003906, bonus=1.000000, nodes=13 <= 300.000000)
                                      @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.003906, bonus=1.000000, nodes=24 <= 300.000000)
                                    @ 45  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.003906, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                        @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000977, bonus=1.000000, nodes=13 <= 300.000000)
                                      @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000977, bonus=1.000000, nodes=24 <= 300.000000)
                                    @ 101  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000977, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                        @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000977, bonus=1.000000, nodes=13 <= 300.000000)
                                      @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000977, bonus=1.000000, nodes=24 <= 300.000000)
                                    @ 114  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000977, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                        @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000163, bonus=1.000000, nodes=13 <= 300.000000)
                                      @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000163, bonus=1.000000, nodes=24 <= 300.000000)
                                    @ 184  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000163, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                        @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000163, bonus=1.000000, nodes=13 <= 300.000000)
                                      @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000163, bonus=1.000000, nodes=24 <= 300.000000)
                                    @ 218  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000163, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000061, bonus=1.000000, nodes=13 <= 300.000000)
                                        @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000061, bonus=1.000000, nodes=24 <= 300.000000)
                                      @ 45  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000061, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000015, bonus=1.000000, nodes=13 <= 300.000000)
                                        @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000015, bonus=1.000000, nodes=24 <= 300.000000)
                                      @ 101  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000015, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000015, bonus=1.000000, nodes=13 <= 300.000000)
                                        @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000015, bonus=1.000000, nodes=24 <= 300.000000)
                                      @ 114  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000015, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000003, bonus=1.000000, nodes=13 <= 300.000000)
                                        @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000003, bonus=1.000000, nodes=24 <= 300.000000)
                                      @ 184  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000003, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000003, bonus=1.000000, nodes=13 <= 300.000000)
                                        @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000003, bonus=1.000000, nodes=24 <= 300.000000)
                                      @ 218  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000003, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                            @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000001, bonus=1.000000, nodes=13 <= 300.000000)
                                          @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000001, bonus=1.000000, nodes=24 <= 300.000000)
                                        @ 45  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000001, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                            @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                          @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                        @ 101  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                            @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                          @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                        @ 114  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                            @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                          @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                        @ 184  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                            @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                          @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                        @ 218  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 45  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 101  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 114  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 184  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 218  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 45  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 101  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 114  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 184  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 218  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                                          @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining it exceeds the maximum recursive inlining depth
                                          @ 269  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining it exceeds the maximum recursive inlining depth
                                          @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=202 <= 300.000000)
                                        @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=387 > 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 45  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 101  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 114  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 184  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 218  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 45  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 101  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 114  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 184  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 218  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                                          @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining it exceeds the maximum recursive inlining depth
                                          @ 269  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining it exceeds the maximum recursive inlining depth
                                          @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=202 <= 300.000000)
                                        @ 269  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=387 > 300.000000)
                                      @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   relevance-based (relevance=1.000000, probability=0.000002, bonus=1.000000, nodes=202 <= 300.000000)
                                    @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.000122, bonus=1.000000, nodes=387 > 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000061, bonus=1.000000, nodes=13 <= 300.000000)
                                        @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000061, bonus=1.000000, nodes=24 <= 300.000000)
                                      @ 45  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000061, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000015, bonus=1.000000, nodes=13 <= 300.000000)
                                        @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000015, bonus=1.000000, nodes=24 <= 300.000000)
                                      @ 101  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000015, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000015, bonus=1.000000, nodes=13 <= 300.000000)
                                        @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000015, bonus=1.000000, nodes=24 <= 300.000000)
                                      @ 114  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000015, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000003, bonus=1.000000, nodes=13 <= 300.000000)
                                        @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000003, bonus=1.000000, nodes=24 <= 300.000000)
                                      @ 184  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000003, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000003, bonus=1.000000, nodes=13 <= 300.000000)
                                        @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000003, bonus=1.000000, nodes=24 <= 300.000000)
                                      @ 218  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000003, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                            @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000001, bonus=1.000000, nodes=13 <= 300.000000)
                                          @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000001, bonus=1.000000, nodes=24 <= 300.000000)
                                        @ 45  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000001, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                            @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                          @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                        @ 101  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                            @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                          @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                        @ 114  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                            @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                          @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                        @ 184  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                            @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                          @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                        @ 218  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 45  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 1  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 6  deltablue.Variable.getConstraints():Vector (5 bytes)   inline accessor method (bytecode parsing)
                            @ 11  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object, Object):Object (10 bytes)   inline method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                              @ 6  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object, Object):Object (24 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 101  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 114  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                              @ 19  deltablue.Planner$$Lambda/0x00007f45e0083470.<init>(AbstractConstraint, ForEachInterface):void (15 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                                          @ 184  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 218  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                                    @ 6  deltablue.BinaryConstraint.isSatisfied():boolean (13 bytes)   trivial (relevance=1.000254, probability=4.617507, bonus=1.000000, nodes=9)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                                    @ 14  deltablue.Planner$$Lambda/0x00007f45e0083250.apply(Object):void (12 bytes)   not inlining too large previous low-level graph (low-level-nodes: 659, relevance=1.000000, probability=4.616336, bonus=1.000000, nodes=12)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                                  @ 12  deltablue.Planner.lambda$constraintsConsuming$3(AbstractConstraint, ForEachInterface, AbstractConstraint):void (20 bytes)   relevance-based (relevance=1.000000, probability=9.235013, bonus=1.000000, nodes=31 <= 300.000000)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                                @ 20  deltablue.Planner$$Lambda/0x00007f45e0083470.apply(Object):void (16 bytes)   relevance-based (relevance=1.000000, probability=9.235013, bonus=1.000000, nodes=36 <= 300.000000)
                              @ 16  som.Vector.forEach(ForEachInterface):void (32 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=50 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 45  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 101  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 114  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 184  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 218  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                                          @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining it exceeds the maximum recursive inlining depth
                                          @ 269  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining it exceeds the maximum recursive inlining depth
                                          @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=202 <= 300.000000)
                                        @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=387 > 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 45  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 101  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 114  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 184  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 218  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 45  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 101  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 114  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 184  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 218  deltablue.Planner$$Lambda/0x00007f45e0083ae0.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                                          @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining it exceeds the maximum recursive inlining depth
                                          @ 269  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining it exceeds the maximum recursive inlining depth
                                          @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=202 <= 300.000000)
                                        @ 269  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=387 > 300.000000)
                                      @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   relevance-based (relevance=1.000000, probability=0.000002, bonus=1.000000, nodes=202 <= 300.000000)
                                    @ 269  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.000122, bonus=1.000000, nodes=387 > 300.000000)
                                  @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   relevance-based (relevance=1.000000, probability=0.007813, bonus=1.000000, nodes=202 <= 300.000000)
                                @ 19  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=387 > 300.000000)
                              @ 81  som.Vector.sort(Comparator):void (23 bytes)   relevance-based (relevance=1.000131, probability=1.000000, bonus=1.000000, nodes=22 <= 300.000000)
                                @ 1  som.Vector.isEmpty():boolean (17 bytes)   relevance-based (relevance=1.000000, probability=35038.896679, bonus=1.000000, nodes=10 <= 300.000000)
                              @ 38  som.Vector.removeFirst():Object (31 bytes)   relevance-based (relevance=1.000000, probability=35038.896679, bonus=1.000000, nodes=18 <= 300.000000)
                                    @ 1  deltablue.BinaryConstraint.isSatisfied():boolean (13 bytes)   trivial (relevance=1.000131, probability=323584.676832, bonus=1.000000, nodes=9)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                    @ 9  som.Vector.append(Object):void (51 bytes)   not inlining relevance-based (relevance=0.000131, probability=42.315245, bonus=1.000000, nodes=35 > 0.039231)
                                  @ 8  deltablue.Planner.lambda$removePropagateFrom$4(Vector, AbstractConstraint):void (13 bytes)   relevance-based (relevance=1.000000, probability=323584.676832, bonus=1.000000, nodes=38 <= 300.000000)
                                @ 20  deltablue.Planner$$Lambda/0x00007f45e0083030.apply(Object):void (12 bytes)   relevance-based (relevance=1.000000, probability=323584.676832, bonus=1.000000, nodes=42 <= 300.000000)
                              @ 57  som.Vector.forEach(ForEachInterface):void (32 bytes)   relevance-based (relevance=1.000000, probability=35038.896679, bonus=1.000000, nodes=55 <= 300.000000)
                            @ 1  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 6  deltablue.Variable.getConstraints():Vector (5 bytes)   inline accessor method (bytecode parsing)
                            @ 11  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object, Object):Object (10 bytes)   inline method (bytecode parsing)
                              @ 6  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object, Object):Object (24 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 19  deltablue.Planner$$Lambda/0x00007f45e0083470.<init>(AbstractConstraint, ForEachInterface):void (15 bytes)   relevance-based (relevance=1.000000, probability=35038.896679, bonus=1.000000, nodes=11 <= 300.000000)
                                      @ 6  deltablue.BinaryConstraint.isSatisfied():boolean (13 bytes)   trivial (relevance=1.000254, probability=161792.338416, bonus=1.000000, nodes=9)
                                      @ 14  deltablue.Planner$$Lambda/0x00007f45e0083250.apply(Object):void (12 bytes)   not inlining too large previous low-level graph (low-level-nodes: 659, relevance=0.999746, probability=161751.305614, bonus=1.000000, nodes=12)
                                    @ 12  deltablue.Planner.lambda$constraintsConsuming$3(AbstractConstraint, ForEachInterface, AbstractConstraint):void (20 bytes)   relevance-based (relevance=1.000000, probability=323584.676832, bonus=1.000000, nodes=44 <= 300.000000)
                                  @ 20  deltablue.Planner$$Lambda/0x00007f45e0083470.apply(Object):void (16 bytes)   relevance-based (relevance=1.000000, probability=323584.676832, bonus=1.000000, nodes=48 <= 300.000000)
                                @ 16  som.Vector.forEach(ForEachInterface):void (32 bytes)   relevance-based (relevance=1.000000, probability=35038.896679, bonus=1.000000, nodes=61 <= 300.000000)
                              @ 69  deltablue.Planner.constraintsConsuming(Variable, ForEachInterface):void (20 bytes)   relevance-based (relevance=1.000000, probability=35038.896679, bonus=1.000000, nodes=80 <= 300.000000)
                            @ 1  deltablue.Planner.lambda$chainTest$7(int):Variable (8 bytes)   inline method (bytecode parsing)
                            @ 15  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 27  deltablue.Strength.absoluteWeakest():Strength (4 bytes)   inline method (bytecode parsing)
                              @ 4  deltablue.Variable.<init>():void (44 bytes)   not inlining too large previous low-level graph (low-level-nodes: 356, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=27)
                            @ 1  java.lang.AbstractStringBuilder.length():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 2  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f45e0081f08.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 9  deltablue.Variable.getStay():boolean (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 8  deltablue.AbstractConstraint.lambda$inputsKnown$0(int, Variable):boolean (28 bytes)   not inlining relevance-based (relevance=0.000007, probability=0.000007, bonus=1.000000, nodes=21 > 0.002225)
                                @ 26  deltablue.AbstractConstraint$$Lambda/0x00007f45e0081f08.test(Object):boolean (12 bytes)   trivial (relevance=0.000007, probability=0.000007, bonus=1.000000, nodes=9)
                            @ 1  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 9  deltablue.Variable.getStay():boolean (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 8  deltablue.AbstractConstraint.lambda$inputsKnown$0(int, Variable):boolean (28 bytes)   relevance-based (relevance=1.000000, probability=0.999957, bonus=1.000000, nodes=21 <= 300.000000)
                                @ 15  deltablue.AbstractConstraint$$Lambda/0x00007f45e0081f08.test(Object):boolean (12 bytes)   relevance-based (relevance=1.000000, probability=0.999957, bonus=1.000000, nodes=23 <= 300.000000)
                              @ 7  deltablue.BinaryConstraint.inputsHasOne(TestInterface):boolean (32 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=42 <= 300.000000)
                            @ 1  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 9  deltablue.Variable.getStay():boolean (5 bytes)   inline accessor method (bytecode parsing)
                                @ 8  deltablue.AbstractConstraint.lambda$inputsKnown$0(int, Variable):boolean (28 bytes)   not inlining relevance-based (relevance=0.000007, probability=0.000007, bonus=1.000000, nodes=21 > 0.002225)
                              @ 26  deltablue.AbstractConstraint$$Lambda/0x00007f45e0081f08.test(Object):boolean (12 bytes)   trivial (relevance=0.000007, probability=0.000007, bonus=1.000000, nodes=9)
                            @ 1  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 9  deltablue.Variable.getStay():boolean (5 bytes)   inline accessor method (bytecode parsing)
                                @ 8  deltablue.AbstractConstraint.lambda$inputsKnown$0(int, Variable):boolean (28 bytes)   relevance-based (relevance=1.000000, probability=0.999993, bonus=1.000000, nodes=21 <= 300.000000)
                              @ 15  deltablue.AbstractConstraint$$Lambda/0x00007f45e0081f08.test(Object):boolean (12 bytes)   relevance-based (relevance=1.000000, probability=0.999993, bonus=1.000000, nodes=23 <= 300.000000)
                            @ 12  deltablue.AbstractConstraint.addConstraint(Planner):void (10 bytes)   inline method (bytecode parsing)
                                        @ 7  deltablue.Strength$Sym.customHash():int (5 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                                      @ 1  som.Dictionary.hash(Dictionary$CustomHash):int (20 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=12 <= 300.000000)
                            @ 6  som.Dictionary.getBucketIdx(int):int (10 bytes)   inline method (bytecode parsing)
                                      @ 7  som.Dictionary.getBucket(int):Dictionary$Entry (11 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                                      @ 18  som.IdentityDictionary$IdEntry.match(int, Object):boolean (22 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                    @ 4  som.Dictionary.at(Dictionary$CustomHash):Object (39 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=35 <= 300.000000)
                                  @ 6  deltablue.Strength.of(Strength$Sym):Strength (11 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=38 <= 300.000000)
                                @ 2  deltablue.AbstractConstraint.<init>(Strength$Sym):void (13 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=42 <= 300.000000)
                            @ 5  deltablue.Variable.addConstraint(AbstractConstraint):void (9 bytes)   inline method (bytecode parsing)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                    @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000131, probability=0.000131, bonus=1.000000, nodes=41 > 0.039331)
                                  @ 5  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=35 <= 300.000000)
                                @ 1  deltablue.UnaryConstraint.addToGraph():void (14 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=47 <= 300.000000)
                                  @ 1  deltablue.Planner.newMark():int (15 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f45e0031810.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 8  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 697, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=72)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f45e0031810.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 19  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 697, relevance=1.000000, probability=1.261254, bonus=1.000000, nodes=72)
                                @ 6  deltablue.Planner.incrementalAdd(AbstractConstraint):void (27 bytes)   relevance-based (relevance=1.000131, probability=1.000000, bonus=1.000000, nodes=28 <= 300.000000)
                              @ 4  deltablue.UnaryConstraint.<init>(Variable, Strength$Sym, Planner):void (16 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=119 <= 300.000000)
                                  @ 17  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=0.015302, probability=0.013542, bonus=1.000000, nodes=9)
                                  @ 27  java.lang.StringLatin1.hashCode(byte[]):int (52 bytes)   not inlining relevance-based (relevance=0.015294, probability=0.013535, bonus=1.000000, nodes=22 > 4.588326)
                                  @ 37  java.lang.StringUTF16.hashCode(byte[]):int (52 bytes)   not inlining relevance-based (relevance=0.000008, probability=0.000007, bonus=1.000000, nodes=23 > 0.002314)
                                @ 9  java.lang.String.hashCode():int (60 bytes)   relevance-based (relevance=1.000000, probability=0.935236, bonus=1.000000, nodes=48 <= 300.000000)
                              @ 23  java.util.HashMap.hash(Object):int (20 bytes)   relevance-based (relevance=1.539800, probability=0.935236, bonus=1.000000, nodes=66 <= 300.000000)
                              @ 95  java.util.HashMap$TreeNode.getTreeNode(int, Object):HashMap$TreeNode (22 bytes)   not inlining relevance-based (relevance=0.000743, probability=0.000657, bonus=1.000000, nodes=23 > 0.222882)
                              @ 63  java.lang.Long.equals(Object):boolean (30 bytes)   not inlining relevance-based (relevance=0.686314, probability=0.607375, bonus=1.000000, nodes=237 > 205.894211)
                              @ 128  java.lang.Long.equals(Object):boolean (30 bytes)   not inlining relevance-based (relevance=0.254782, probability=0.210182, bonus=1.000000, nodes=82 > 76.434720)
                            @ 24  deltablue.AbstractConstraint.addConstraint(Planner):void (10 bytes)   inline method (bytecode parsing)
                              @ 8  deltablue.BinaryConstraint.<init>(Variable, Variable, Strength$Sym, Planner):void (21 bytes)   not inlining too large previous low-level graph (low-level-nodes: 395, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=17)
                            @ 5  deltablue.Variable.addConstraint(AbstractConstraint):void (9 bytes)   inline method (bytecode parsing)
                            @ 13  deltablue.Variable.addConstraint(AbstractConstraint):void (9 bytes)   inline method (bytecode parsing)
                            @ 21  deltablue.Variable.addConstraint(AbstractConstraint):void (9 bytes)   inline method (bytecode parsing)
                            @ 29  deltablue.Variable.addConstraint(AbstractConstraint):void (9 bytes)   inline method (bytecode parsing)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                  @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000131, probability=0.000131, bonus=1.000000, nodes=41 > 0.039331)
                                @ 5  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=35 <= 300.000000)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                  @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000131, probability=0.000131, bonus=1.000000, nodes=41 > 0.039331)
                                @ 5  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000131, probability=1.000000, bonus=1.000000, nodes=35 <= 300.000000)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                  @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000131, probability=0.000131, bonus=1.000000, nodes=41 > 0.039331)
                                @ 5  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000131, probability=1.000000, bonus=1.000000, nodes=35 <= 300.000000)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                  @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000131, probability=0.000131, bonus=1.000000, nodes=41 > 0.039331)
                                @ 5  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000131, probability=1.000000, bonus=1.000000, nodes=35 <= 300.000000)
                              @ 1  deltablue.ScaleConstraint.addToGraph():void (38 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=164 <= 300.000000)
                                @ 1  deltablue.Planner.newMark():int (15 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f45e0031810.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                @ 8  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 697, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=72)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f45e0031810.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                @ 19  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 697, relevance=1.000000, probability=1.261254, bonus=1.000000, nodes=72)
                              @ 6  deltablue.Planner.incrementalAdd(AbstractConstraint):void (27 bytes)   relevance-based (relevance=1.000131, probability=1.000000, bonus=1.000000, nodes=28 <= 300.000000)
                            @ 5  deltablue.Variable.addConstraint(AbstractConstraint):void (9 bytes)   inline method (bytecode parsing)
                            @ 13  deltablue.Variable.addConstraint(AbstractConstraint):void (9 bytes)   inline method (bytecode parsing)
                            @ 21  deltablue.Variable.addConstraint(AbstractConstraint):void (9 bytes)   inline method (bytecode parsing)
                            @ 29  deltablue.Variable.addConstraint(AbstractConstraint):void (9 bytes)   inline method (bytecode parsing)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000131, probability=0.000131, bonus=1.000000, nodes=41 > 0.039331)
                              @ 5  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=35 <= 300.000000)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000131, probability=0.000131, bonus=1.000000, nodes=41 > 0.039331)
                              @ 5  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000131, probability=1.000000, bonus=1.000000, nodes=35 <= 300.000000)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000131, probability=0.000131, bonus=1.000000, nodes=41 > 0.039331)
                              @ 5  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000131, probability=1.000000, bonus=1.000000, nodes=35 <= 300.000000)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000131, probability=0.000131, bonus=1.000000, nodes=41 > 0.039331)
                              @ 5  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000131, probability=1.000000, bonus=1.000000, nodes=35 <= 300.000000)
                              @ 1  java.util.LinkedList$ListItr.checkForComodification():void (23 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=9)
                              @ 5  java.util.LinkedList$ListItr.hasNext():boolean (20 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                            @ 5  java.util.Objects.checkIndex(int, int):int (7 bytes)   inline method (bytecode parsing)
                            @ 11  java.util.ArrayList.elementData(int):Object (7 bytes)   inline method (bytecode parsing)
                            @ 5  java.lang.AbstractStringBuilder.getValue():byte[] (5 bytes)   inline accessor method (bytecode parsing)
                            @ 1  java.lang.AbstractStringBuilder.length():int (5 bytes)   inline accessor method (bytecode parsing)
                              @ 10  java.lang.StringBuilder.length():int (5 bytes)   trivial (relevance=1.000035, probability=1.000000, bonus=1.000000, nodes=5)
                              @ 16  java.lang.AbstractStringBuilder.isLatin1():boolean (19 bytes)   trivial (relevance=1.000035, probability=1.000000, bonus=1.000000, nodes=9)
                            @ 13  java.util.Arrays.copyOfRangeByte(byte[], int, int):byte[] (33 bytes)   inline method (bytecode parsing)
                              @ 2  java.util.Arrays.checkLength(int, int):void (38 bytes)   inline method (bytecode parsing)
                                @ 24  java.lang.Math.min(int, int):int (11 bytes)   trivial (relevance=1.000010, probability=0.717636, bonus=1.000000, nodes=7)
                              @ 32  java.util.Arrays.copyOfRange(byte[], int, int):byte[] (25 bytes)   relevance-based (relevance=1.000000, probability=0.999965, bonus=1.000000, nodes=33 <= 300.000000)
                            @ 13  java.util.Arrays.copyOfRangeByte(byte[], int, int):byte[] (33 bytes)   inline method (bytecode parsing)
                              @ 2  java.util.Arrays.checkLength(int, int):void (38 bytes)   inline method (bytecode parsing)
                              @ 92  java.util.Arrays.copyOfRange(byte[], int, int):byte[] (25 bytes)   not inlining relevance-based (relevance=0.000049, probability=0.000035, bonus=1.000000, nodes=34 > 0.014745)
                            @ 5  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000131, probability=0.000131, bonus=1.000000, nodes=41 > 0.039331)
                              @ 11  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=35 <= 300.000000)
                            @ 49  java.lang.Math.max(int, int):int (11 bytes)   inline method (bytecode parsing)
                            @ 37  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                              @ 5  java.util.ArrayList$Itr.<init>(ArrayList):void (26 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=15 <= 300.000000)
                                    @ 27  jdk.internal.util.ArraysSupport.newLength(int, int, int):int (27 bytes)   not inlining relevance-based (relevance=0.026413, probability=0.018437, bonus=1.000000, nodes=16 > 7.923751)
                                    @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.026413, probability=0.018437, bonus=1.000000, nodes=41 > 7.923751)
                                  @ 7  java.util.ArrayList.grow(int):Object[] (60 bytes)   relevance-based (relevance=0.324873, probability=0.245211, bonus=1.000000, nodes=46 <= 97.461869)
                                @ 7  java.util.ArrayList.grow():Object[] (11 bytes)   relevance-based (relevance=0.324873, probability=0.245211, bonus=1.000000, nodes=52 <= 97.461869)
                              @ 20  java.util.ArrayList.add(Object, Object[], int):void (23 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=67 <= 300.000000)
                            @ 111  org.graalvm.collections.EconomicMapImpl.setKey(int, Object):void (10 bytes)   inline method (bytecode parsing)
                            @ 143  org.graalvm.collections.EconomicMapImpl.size():int (10 bytes)   inline method (bytecode parsing)
                            @ 147  org.graalvm.collections.EconomicMapImpl.size():int (10 bytes)   inline method (bytecode parsing)
                              @ 2  org.graalvm.collections.EconomicMapImpl.checkKeyNonNull(Object):void (15 bytes)   trivial (relevance=2.148438, probability=1.000000, bonus=1.000000, nodes=6)
                                @ 1  org.graalvm.collections.EconomicMapImpl.hasHashArray():boolean (13 bytes)   trivial (relevance=1.252979, probability=1.000000, bonus=1.000000, nodes=9)
                            @ 19  org.graalvm.collections.EconomicMapImpl.getKey(int):Object (9 bytes)   inline method (bytecode parsing)
                            @ 4  jdk.graal.compiler.graph.Node.getNodeClass():NodeClass (5 bytes)   inline accessor method (bytecode parsing)
                                    @ 40  jdk.graal.compiler.graph.Graph$1.hashCode(Object):int (15 bytes)   not inlining relevance-based (relevance=0.024217, probability=0.016121, bonus=1.000000, nodes=14 > 7.265028)
                 n                  @ 48  java.lang.Object.hashCode():int (0 bytes)   trivial (relevance=1.174510, probability=0.781862, bonus=1.000000, nodes=5)
                                    @ 61  org.graalvm.collections.EconomicMapImpl.getHashTableSize():int (43 bytes)   relevance-based (relevance=1.198900, probability=0.798098, bonus=1.000000, nodes=21 <= 300.000000)
                                  @ 3  org.graalvm.collections.EconomicMapImpl.getHashIndex(Object):int (68 bytes)   relevance-based (relevance=3.473862, probability=0.798098, bonus=1.000000, nodes=81 <= 300.000000)
                                  @ 6  org.graalvm.collections.EconomicMapImpl.getHashArray(int):int (126 bytes)   relevance-based (relevance=1.198900, probability=0.798098, bonus=1.000000, nodes=31 <= 300.000000)
                            @ 49  jdk.graal.compiler.graph.Node.valueEquals(Node):boolean (10 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.graph.Node.getNodeClass():NodeClass (5 bytes)   inline accessor method (bytecode parsing)
                                    @ 46  jdk.graal.compiler.graph.Graph$1.equals(Object, Object):boolean (53 bytes)   not inlining relevance-based (relevance=0.004513, probability=0.002529, bonus=1.000000, nodes=25 > 1.353923)
                                  @ 36  java.lang.Object.equals(Object):boolean (11 bytes)   not inlining no methods remaining after filtering less frequent methods (6 methods previously)
                                  @ 26  org.graalvm.collections.EconomicMapImpl.compareKeys(Object, Object):boolean (52 bytes)   relevance-based (relevance=0.605980, probability=0.403396, bonus=1.000000, nodes=40 <= 181.793898)
                                  @ 36  org.graalvm.collections.EconomicMapImpl.getRawValue(int):Object (11 bytes)   relevance-based (relevance=0.260860, probability=0.173652, bonus=1.000000, nodes=10 <= 78.257854)
                            @ 15  org.graalvm.collections.EconomicMapImpl.getKey(int):Object (9 bytes)   inline method (bytecode parsing)
                                  @ 56  org.graalvm.collections.EconomicMapImpl.findWithCollision(Object, EconomicMapImpl$CollisionLink):int (65 bytes)   not inlining relevance-based (relevance=0.021633, probability=0.014401, bonus=1.000000, nodes=42 > 6.489941)
                                @ 9  org.graalvm.collections.EconomicMapImpl.findHash(Object):int (62 bytes)   relevance-based (relevance=1.000000, probability=0.798098, bonus=1.000000, nodes=168 <= 300.000000)
                            @ 49  jdk.graal.compiler.graph.Node.valueEquals(Node):boolean (10 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.graph.Node.getNodeClass():NodeClass (5 bytes)   inline accessor method (bytecode parsing)
                                    @ 46  jdk.graal.compiler.graph.Graph$1.equals(Object, Object):boolean (53 bytes)   not inlining relevance-based (relevance=0.002674, probability=0.002353, bonus=1.000000, nodes=25 > 0.802105)
                                  @ 36  java.lang.Object.equals(Object):boolean (11 bytes)   not inlining no methods remaining after filtering less frequent methods (6 methods previously)
                                  @ 26  org.graalvm.collections.EconomicMapImpl.compareKeys(Object, Object):boolean (52 bytes)   relevance-based (relevance=0.359001, probability=0.375337, bonus=1.000000, nodes=40 <= 107.700200)
                                @ 15  org.graalvm.collections.EconomicMapImpl.findLinear(Object):int (42 bytes)   relevance-based (relevance=0.303296, probability=0.201902, bonus=1.000000, nodes=66 <= 90.988793)
                              @ 7  org.graalvm.collections.EconomicMapImpl.find(Object):int (19 bytes)   relevance-based (relevance=2.148438, probability=1.000000, bonus=1.000000, nodes=237 <= 300.000000)
                                @ 2  org.graalvm.collections.EconomicMapImpl.getRawValue(int):Object (11 bytes)   relevance-based (relevance=0.679293, probability=0.431024, bonus=1.000000, nodes=10 <= 203.787995)
                              @ 18  org.graalvm.collections.EconomicMapImpl.getValue(int):Object (23 bytes)   relevance-based (relevance=0.647482, probability=0.431024, bonus=1.000000, nodes=19 <= 194.244614)
                                @ 2  org.graalvm.collections.EconomicMapImpl.getRawValue(int):Object (11 bytes)   relevance-based (relevance=0.658309, probability=0.431024, bonus=1.000000, nodes=10 <= 197.492565)
                                @ 43  org.graalvm.collections.EconomicMapImpl.setRawValue(int, Object):void (12 bytes)   relevance-based (relevance=0.647482, probability=0.423935, bonus=1.000000, nodes=12 <= 194.244614)
                                @ 31  org.graalvm.collections.EconomicMapImpl$CollisionLink.<init>(Object, int):void (15 bytes)   not inlining relevance-based (relevance=0.010827, probability=0.007089, bonus=1.000000, nodes=11 > 3.247951)
                                @ 34  org.graalvm.collections.EconomicMapImpl.setRawValue(int, Object):void (12 bytes)   not inlining relevance-based (relevance=0.010827, probability=0.007089, bonus=1.000000, nodes=12 > 3.247951)
                              @ 26  org.graalvm.collections.EconomicMapImpl.setValue(int, Object):void (47 bytes)   relevance-based (relevance=0.647482, probability=0.431024, bonus=1.000000, nodes=34 <= 194.244614)
                            @ 14  java.lang.Math.max(int, int):int (11 bytes)   inline method (bytecode parsing)
                              @ 70  org.graalvm.collections.EconomicMapImpl.grow():void (91 bytes)   not inlining relevance-based (relevance=0.056782, probability=0.037799, bonus=1.000000, nodes=58 > 17.034497)
                                @ 2  org.graalvm.collections.EconomicMapImpl.getRawValue(int):Object (11 bytes)   relevance-based (relevance=0.869005, probability=0.568976, bonus=1.000000, nodes=10 <= 260.701594)
                                @ 43  org.graalvm.collections.EconomicMapImpl.setRawValue(int, Object):void (12 bytes)   relevance-based (relevance=0.854714, probability=0.559619, bonus=1.000000, nodes=12 <= 256.414110)
                                @ 31  org.graalvm.collections.EconomicMapImpl$CollisionLink.<init>(Object, int):void (15 bytes)   not inlining relevance-based (relevance=0.014292, probability=0.009357, bonus=1.000000, nodes=11 > 4.287483)
                                @ 34  org.graalvm.collections.EconomicMapImpl.setRawValue(int, Object):void (12 bytes)   not inlining relevance-based (relevance=0.014292, probability=0.009357, bonus=1.000000, nodes=12 > 4.287483)
                              @ 118  org.graalvm.collections.EconomicMapImpl.setValue(int, Object):void (47 bytes)   relevance-based (relevance=0.854714, probability=0.568976, bonus=1.000000, nodes=34 <= 256.414110)
                              @ 132  org.graalvm.collections.EconomicMapImpl.hasHashArray():boolean (13 bytes)   trivial (relevance=0.854714, probability=0.568976, bonus=1.000000, nodes=9)
                              @ 139  org.graalvm.collections.EconomicMapImpl.getHashTableSize():int (43 bytes)   relevance-based (relevance=0.534819, probability=0.356025, bonus=1.000000, nodes=21 <= 160.445658)
                            @ 4  jdk.graal.compiler.graph.Node.getNodeClass():NodeClass (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 40  jdk.graal.compiler.graph.Graph$1.hashCode(Object):int (15 bytes)   not inlining relevance-based (relevance=0.014514, probability=0.007191, bonus=1.000000, nodes=14 > 4.354100)
                 n                @ 48  java.lang.Object.hashCode():int (0 bytes)   trivial (relevance=0.703911, probability=0.348782, bonus=1.000000, nodes=5)
                                  @ 61  org.graalvm.collections.EconomicMapImpl.getHashTableSize():int (43 bytes)   relevance-based (relevance=0.718528, probability=0.356025, bonus=1.000000, nodes=21 <= 215.558546)
                                @ 2  org.graalvm.collections.EconomicMapImpl.getHashIndex(Object):int (68 bytes)   relevance-based (relevance=0.599323, probability=0.356025, bonus=1.000000, nodes=81 <= 179.796970)
                                @ 10  org.graalvm.collections.EconomicMapImpl.getHashArray(int):int (126 bytes)   relevance-based (relevance=0.641194, probability=0.356025, bonus=1.000000, nodes=31 <= 192.358262)
                              @ 169  org.graalvm.collections.EconomicMapImpl.putHashEntry(Object, int, boolean):void (161 bytes)   not inlining relevance-based (relevance=0.534819, probability=0.356025, bonus=1.000000, nodes=174 > 160.445658)
                              @ 180  org.graalvm.collections.EconomicMapImpl.getHashThreshold():int (22 bytes)   relevance-based (relevance=0.319895, probability=0.212952, bonus=1.000000, nodes=12 <= 95.968452)
                            @ 1  org.graalvm.collections.EconomicMapImpl.size():int (10 bytes)   inline method (bytecode parsing)
                            @ 84  org.graalvm.collections.EconomicMapImpl.getKey(int):Object (9 bytes)   inline method (bytecode parsing)
                              @ 187  org.graalvm.collections.EconomicMapImpl.createHash():void (109 bytes)   not inlining too large previous low-level graph (low-level-nodes: 1180, relevance=0.020761, probability=0.013821, bonus=1.000000, nodes=57)
                              @ 2  org.graalvm.collections.EconomicMapImpl.getRawValue(int):Object (11 bytes)   relevance-based (relevance=1.016749, probability=1.000000, bonus=1.000000, nodes=10 <= 300.000000)
                              @ 43  org.graalvm.collections.EconomicMapImpl.setRawValue(int, Object):void (12 bytes)   relevance-based (relevance=1.000000, probability=0.983527, bonus=1.000000, nodes=12 <= 300.000000)
                              @ 31  org.graalvm.collections.EconomicMapImpl$CollisionLink.<init>(Object, int):void (15 bytes)   not inlining relevance-based (relevance=0.016749, probability=0.016473, bonus=1.000000, nodes=11 > 5.024787)
                              @ 34  org.graalvm.collections.EconomicMapImpl.setRawValue(int, Object):void (12 bytes)   not inlining relevance-based (relevance=0.016749, probability=0.016473, bonus=1.000000, nodes=12 > 5.024787)
                              @ 2  java.lang.AbstractStringBuilder.append(String):AbstractStringBuilder (45 bytes)   not inlining too large previous low-level graph (low-level-nodes: 368, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=23)
                            @ 12  java.util.ArrayDeque.elementAt(Object[], int):Object (4 bytes)   inline method (bytecode parsing)
                              @ 28  java.util.ArrayDeque.inc(int, int):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.999290, bonus=1.000000, nodes=10 <= 300.000000)
                                      @ 3  java.lang.Math.max(int, int):int (11 bytes)   trivial (relevance=0.133981, probability=0.118151, bonus=1.000000, nodes=7)
                                    @ 29  jdk.internal.util.ArraysSupport.newLength(int, int, int):int (27 bytes)   relevance-based (relevance=0.133981, probability=0.118151, bonus=1.000000, nodes=15 <= 40.194428)
                                  @ 24  java.lang.AbstractStringBuilder.newCapacity(int):int (59 bytes)   relevance-based (relevance=0.133981, probability=0.118151, bonus=1.000000, nodes=27 <= 40.194428)
                                    @ 25  java.lang.Math.min(int, int):int (11 bytes)   trivial (relevance=0.133983, probability=0.118151, bonus=1.000000, nodes=7)
                                  @ 32  java.util.Arrays.copyOf(byte[], int):byte[] (33 bytes)   relevance-based (relevance=0.133981, probability=0.118151, bonus=1.000000, nodes=28 <= 40.194428)
                                @ 7  java.lang.AbstractStringBuilder.ensureCapacityInternal(int):void (39 bytes)   relevance-based (relevance=1.000018, probability=1.000000, bonus=1.000000, nodes=72 <= 300.000000)
                                @ 11  java.lang.AbstractStringBuilder.isLatin1():boolean (19 bytes)   trivial (relevance=1.133980, probability=0.999999, bonus=1.000000, nodes=9)
                                @ 18  java.lang.StringLatin1.canEncode(int):boolean (13 bytes)   trivial (relevance=1.133961, probability=0.999982, bonus=1.000000, nodes=9)
                                @ 46  java.lang.AbstractStringBuilder.isLatin1():boolean (19 bytes)   trivial (relevance=0.000020, probability=0.000018, bonus=1.000000, nodes=9)
                            @ 2  java.lang.StringUTF16.checkIndex(int, byte[]):void (9 bytes)   inline method (bytecode parsing)
                              @ 2  java.lang.StringUTF16.length(byte[]):int (5 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                                @ 72  java.lang.StringUTF16.putCharSB(byte[], int, int):void (12 bytes)   not inlining relevance-based (relevance=0.000020, probability=0.000018, bonus=1.000000, nodes=15 > 0.006128)
                              @ 2  java.lang.AbstractStringBuilder.append(char):AbstractStringBuilder (77 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=107 <= 300.000000)
                            @ 2  java.lang.StringBuilder.append(CharSequence):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 1  java.lang.AbstractStringBuilder.length():int (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 10  java.lang.StringBuilder.length():int (5 bytes)   trivial (relevance=0.504562, probability=0.335355, bonus=1.000000, nodes=5)
                                    @ 24  java.lang.AbstractStringBuilder.newCapacity(int):int (59 bytes)   not inlining relevance-based (relevance=0.067602, probability=0.039623, bonus=1.000000, nodes=21 > 20.280578)
                                    @ 32  java.util.Arrays.copyOf(byte[], int):byte[] (33 bytes)   not inlining relevance-based (relevance=0.067602, probability=0.039623, bonus=1.000000, nodes=29 > 20.280578)
                                  @ 21  java.lang.AbstractStringBuilder.ensureCapacityInternal(int):void (39 bytes)   relevance-based (relevance=0.504562, probability=0.335355, bonus=1.000000, nodes=29 <= 151.368581)
                                    @ 11  java.lang.AbstractStringBuilder.getCoder():byte (15 bytes)   trivial (relevance=0.572164, probability=0.335355, bonus=1.000000, nodes=5)
                                  @ 26  java.lang.AbstractStringBuilder.inflateIfNeededFor(AbstractStringBuilder):void (22 bytes)   trivial (relevance=0.572164, probability=0.335355, bonus=1.000000, nodes=9)
                                  @ 42  java.lang.AbstractStringBuilder.getBytes(byte[], int, byte):void (44 bytes)   relevance-based (relevance=0.572164, probability=0.335355, bonus=1.000000, nodes=27 <= 171.649159)
                                @ 37  java.lang.AbstractStringBuilder.append(AbstractStringBuilder):AbstractStringBuilder (70 bytes)   relevance-based (relevance=0.504562, probability=0.335355, bonus=1.000000, nodes=70 <= 151.368581)
                            @ 2  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                                  @ 2  java.lang.AbstractStringBuilder.append(String):AbstractStringBuilder (45 bytes)   not inlining too large previous low-level graph (low-level-nodes: 368, relevance=1.000000, probability=0.664645, bonus=1.000000, nodes=23)
                                @ 21  java.lang.StringBuilder.append(String):AbstractStringBuilder (6 bytes)   trivial (relevance=1.000000, probability=0.664645, bonus=1.000000, nodes=9)
                              @ 2  java.lang.AbstractStringBuilder.append(CharSequence):AbstractStringBuilder (54 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=92 <= 300.000000)
                            @ 1  java.lang.AbstractStringBuilder.length():int (5 bytes)   inline accessor method (bytecode parsing)
                                @ 10  java.lang.StringBuilder.length():int (5 bytes)   trivial (relevance=0.504969, probability=0.335534, bonus=1.000000, nodes=5)
                                  @ 24  java.lang.AbstractStringBuilder.newCapacity(int):int (59 bytes)   not inlining relevance-based (relevance=0.067656, probability=0.039644, bonus=1.000000, nodes=21 > 20.296939)
                                  @ 32  java.util.Arrays.copyOf(byte[], int):byte[] (33 bytes)   not inlining relevance-based (relevance=0.067656, probability=0.039644, bonus=1.000000, nodes=29 > 20.296939)
                                @ 21  java.lang.AbstractStringBuilder.ensureCapacityInternal(int):void (39 bytes)   relevance-based (relevance=0.504969, probability=0.335534, bonus=1.000000, nodes=29 <= 151.490694)
                                  @ 11  java.lang.AbstractStringBuilder.getCoder():byte (15 bytes)   trivial (relevance=0.572625, probability=0.335534, bonus=1.000000, nodes=5)
                                @ 26  java.lang.AbstractStringBuilder.inflateIfNeededFor(AbstractStringBuilder):void (22 bytes)   trivial (relevance=0.572625, probability=0.335534, bonus=1.000000, nodes=9)
                                @ 42  java.lang.AbstractStringBuilder.getBytes(byte[], int, byte):void (44 bytes)   relevance-based (relevance=0.572625, probability=0.335534, bonus=1.000000, nodes=27 <= 171.787633)
                              @ 37  java.lang.AbstractStringBuilder.append(AbstractStringBuilder):AbstractStringBuilder (70 bytes)   relevance-based (relevance=0.504969, probability=0.335534, bonus=1.000000, nodes=70 <= 151.490694)
                            @ 2  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                                @ 2  java.lang.AbstractStringBuilder.append(String):AbstractStringBuilder (45 bytes)   not inlining too large previous low-level graph (low-level-nodes: 368, relevance=1.000000, probability=0.664466, bonus=1.000000, nodes=23)
                              @ 21  java.lang.StringBuilder.append(String):AbstractStringBuilder (6 bytes)   trivial (relevance=1.000000, probability=0.664466, bonus=1.000000, nodes=9)
                            @ 22  java.util.Formatter$Flags.contains(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 1  java.lang.AbstractStringBuilder.length():int (5 bytes)   inline accessor method (bytecode parsing)
                              @ 31  java.lang.StringBuilder.length():int (5 bytes)   trivial (relevance=0.001444, probability=0.001442, bonus=1.000000, nodes=5)
                            @ 2  java.lang.StringBuilder.append(CharSequence):StringBuilder (8 bytes)   inline method (bytecode parsing)
                                @ 2  java.lang.AbstractStringBuilder.append(CharSequence):AbstractStringBuilder (54 bytes)   not inlining relevance-based (relevance=0.001444, probability=0.001442, bonus=1.000000, nodes=27 > 0.433172)
                              @ 82  java.lang.StringBuilder.append(CharSequence):Appendable (6 bytes)   trivial (relevance=0.001444, probability=0.001442, bonus=1.000000, nodes=9)
                            @ 2  java.lang.StringBuilder.append(CharSequence):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 1  java.lang.AbstractStringBuilder.length():int (5 bytes)   inline accessor method (bytecode parsing)
                                    @ 10  java.lang.StringBuilder.length():int (5 bytes)   trivial (relevance=0.504307, probability=0.334759, bonus=1.000000, nodes=5)
                                      @ 24  java.lang.AbstractStringBuilder.newCapacity(int):int (59 bytes)   not inlining relevance-based (relevance=0.067568, probability=0.039552, bonus=1.000000, nodes=21 > 20.270338)
                                      @ 32  java.util.Arrays.copyOf(byte[], int):byte[] (33 bytes)   not inlining relevance-based (relevance=0.067568, probability=0.039552, bonus=1.000000, nodes=29 > 20.270338)
                                    @ 21  java.lang.AbstractStringBuilder.ensureCapacityInternal(int):void (39 bytes)   relevance-based (relevance=0.504307, probability=0.334759, bonus=1.000000, nodes=29 <= 151.292148)
                                      @ 11  java.lang.AbstractStringBuilder.getCoder():byte (15 bytes)   trivial (relevance=0.571875, probability=0.334759, bonus=1.000000, nodes=5)
                                    @ 26  java.lang.AbstractStringBuilder.inflateIfNeededFor(AbstractStringBuilder):void (22 bytes)   trivial (relevance=0.571875, probability=0.334759, bonus=1.000000, nodes=9)
                                    @ 42  java.lang.AbstractStringBuilder.getBytes(byte[], int, byte):void (44 bytes)   relevance-based (relevance=0.571875, probability=0.334759, bonus=1.000000, nodes=27 <= 171.562485)
                                  @ 37  java.lang.AbstractStringBuilder.append(AbstractStringBuilder):AbstractStringBuilder (70 bytes)   relevance-based (relevance=0.504307, probability=0.334759, bonus=1.000000, nodes=70 <= 151.292148)
                            @ 2  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                                    @ 2  java.lang.AbstractStringBuilder.append(String):AbstractStringBuilder (45 bytes)   not inlining too large previous low-level graph (low-level-nodes: 368, relevance=1.000000, probability=0.663799, bonus=1.000000, nodes=23)
                                  @ 21  java.lang.StringBuilder.append(String):AbstractStringBuilder (6 bytes)   trivial (relevance=1.000000, probability=0.663799, bonus=1.000000, nodes=9)
                                @ 2  java.lang.AbstractStringBuilder.append(CharSequence):AbstractStringBuilder (54 bytes)   relevance-based (relevance=1.000000, probability=0.998558, bonus=1.000000, nodes=92 <= 300.000000)
                              @ 10  java.lang.StringBuilder.append(CharSequence):Appendable (6 bytes)   relevance-based (relevance=1.000000, probability=0.998558, bonus=1.000000, nodes=97 <= 300.000000)
                              @ 217  java.util.HashMap$TreeNode.split(HashMap, HashMap$Node[], int, int):void (218 bytes)   not inlining relevance-based (relevance=0.000092, probability=0.000405, bonus=1.000000, nodes=119 > 0.027737)
                            @ 4  jdk.graal.compiler.graph.Node.getNodeClass():NodeClass (5 bytes)   inline accessor method (bytecode parsing)
                                @ 40  jdk.graal.compiler.graph.Graph$1.hashCode(Object):int (15 bytes)   not inlining relevance-based (relevance=0.024217, probability=0.020199, bonus=1.000000, nodes=14 > 7.265028)
                 n              @ 48  java.lang.Object.hashCode():int (0 bytes)   trivial (relevance=1.174510, probability=0.979657, bonus=1.000000, nodes=5)
                                @ 61  org.graalvm.collections.EconomicMapImpl.getHashTableSize():int (43 bytes)   relevance-based (relevance=1.198900, probability=1.000000, bonus=1.000000, nodes=21 <= 300.000000)
                              @ 2  org.graalvm.collections.EconomicMapImpl.getHashIndex(Object):int (68 bytes)   relevance-based (relevance=1.122048, probability=1.000000, bonus=1.000000, nodes=81 <= 300.000000)
                              @ 10  org.graalvm.collections.EconomicMapImpl.getHashArray(int):int (126 bytes)   relevance-based (relevance=1.198900, probability=1.000000, bonus=1.000000, nodes=31 <= 300.000000)
                            @ 1  org.graalvm.collections.EconomicMapImpl.size():int (10 bytes)   inline method (bytecode parsing)
                            @ 84  org.graalvm.collections.EconomicMapImpl.getKey(int):Object (9 bytes)   inline method (bytecode parsing)
                              @ 28  org.graalvm.collections.EconomicMapImpl.createHash():void (109 bytes)   not inlining too large previous low-level graph (low-level-nodes: 1180, relevance=0.004860, probability=0.004054, bonus=1.000000, nodes=57)
                              @ 38  org.graalvm.collections.EconomicMapImpl.setHashArray(int, int):void (112 bytes)   relevance-based (relevance=1.194039, probability=0.995946, bonus=1.000000, nodes=37 <= 300.000000)
                              @ 43  org.graalvm.collections.EconomicMapImpl.getRawValue(int):Object (11 bytes)   relevance-based (relevance=1.194039, probability=0.995946, bonus=1.000000, nodes=10 <= 300.000000)
                              @ 121  org.graalvm.collections.EconomicMapImpl.getRawValue(int):Object (11 bytes)   relevance-based (relevance=0.090903, probability=0.075822, bonus=1.000000, nodes=10 <= 27.270953)
                              @ 126  org.graalvm.collections.EconomicMapImpl$CollisionLink.<init>(Object, int):void (15 bytes)   relevance-based (relevance=0.090903, probability=0.075822, bonus=1.000000, nodes=11 <= 27.270953)
                              @ 129  org.graalvm.collections.EconomicMapImpl.setRawValue(int, Object):void (12 bytes)   relevance-based (relevance=0.090903, probability=0.075822, bonus=1.000000, nodes=12 <= 27.270953)
                              @ 104  org.graalvm.collections.EconomicMapImpl$CollisionLink.<init>(Object, int):void (15 bytes)   not inlining relevance-based (relevance=0.034629, probability=0.028884, bonus=1.000000, nodes=11 > 10.388603)
                              @ 107  org.graalvm.collections.EconomicMapImpl.setRawValue(int, Object):void (12 bytes)   not inlining relevance-based (relevance=0.034629, probability=0.028884, bonus=1.000000, nodes=12 > 10.388603)
                              @ 157  org.graalvm.collections.EconomicMapImpl.setRawValue(int, Object):void (12 bytes)   not inlining relevance-based (relevance=0.029765, probability=0.024827, bonus=1.000000, nodes=12 > 8.929548)
                            @ 58  java.util.Formatter$Flags.contains(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                                @ 89  java.lang.String.toString():String (2 bytes)   trivial (relevance=1.000000, probability=0.428347, bonus=1.000000, nodes=4)
                            @ 34  java.util.Formatter$Flags.contains(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 22  java.util.Formatter$Flags.contains(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                                    @ 31  java.lang.String.length():int (11 bytes)   not inlining relevance-based (relevance=0.001468, probability=0.000628, bonus=1.000000, nodes=10 > 0.440399)
                            @ 2  java.lang.StringBuilder.append(CharSequence):StringBuilder (8 bytes)   inline method (bytecode parsing)
                                      @ 2  java.lang.AbstractStringBuilder.append(CharSequence):AbstractStringBuilder (54 bytes)   not inlining relevance-based (relevance=0.001468, probability=0.000628, bonus=1.000000, nodes=15 > 0.440399)
                                    @ 82  java.lang.StringBuilder.append(CharSequence):Appendable (6 bytes)   trivial (relevance=0.001468, probability=0.000628, bonus=1.000000, nodes=9)
                            @ 2  java.lang.StringBuilder.append(CharSequence):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 2  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                                          @ 2  java.lang.AbstractStringBuilder.append(String):AbstractStringBuilder (45 bytes)   not inlining too large previous low-level graph (low-level-nodes: 368, relevance=1.000000, probability=0.284329, bonus=1.000000, nodes=23)
                                        @ 21  java.lang.StringBuilder.append(String):AbstractStringBuilder (6 bytes)   trivial (relevance=1.000000, probability=0.284329, bonus=1.000000, nodes=9)
                                      @ 2  java.lang.AbstractStringBuilder.append(CharSequence):AbstractStringBuilder (54 bytes)   relevance-based (relevance=1.000000, probability=0.427719, bonus=1.000000, nodes=17 <= 300.000000)
                                    @ 10  java.lang.StringBuilder.append(CharSequence):Appendable (6 bytes)   relevance-based (relevance=1.000000, probability=0.427719, bonus=1.000000, nodes=19 <= 300.000000)
                                  @ 53  java.util.Formatter$FormatSpecifier.appendJustified(Appendable, CharSequence):void (89 bytes)   relevance-based (relevance=1.000000, probability=0.428347, bonus=1.000000, nodes=59 <= 300.000000)
                                @ 93  java.util.Formatter$FormatSpecifier.print(Formatter, String, Locale):void (57 bytes)   relevance-based (relevance=1.570489, probability=0.428347, bonus=1.000000, nodes=72 <= 300.000000)
                            @ 34  java.util.Formatter$Flags.contains(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                                @ 80  java.util.Formatter$FormatSpecifier.print(Formatter, String, Locale):void (57 bytes)   not inlining relevance-based (relevance=0.031939, probability=0.008711, bonus=1.000000, nodes=19 > 9.581640)
                              @ 176  java.util.Formatter$FormatSpecifier.printString(Formatter, Object, Locale):void (97 bytes)   relevance-based (relevance=1.000000, probability=0.437058, bonus=1.000000, nodes=104 <= 300.000000)
                            @ 4  java.lang.StringBuilder.<init>():void (7 bytes)   inline method (bytecode parsing)
                                  @ 3  java.lang.AbstractStringBuilder.<init>(int):void (39 bytes)   relevance-based (relevance=0.248503, probability=0.067779, bonus=1.000000, nodes=11 <= 74.551033)
                                  @ 11  java.lang.Double.compare(double, double):int (54 bytes)   relevance-based (relevance=0.248503, probability=0.067779, bonus=1.000000, nodes=25 <= 74.551033)
                                  @ 26  java.lang.Double.isNaN(double):boolean (12 bytes)   trivial (relevance=0.254365, probability=0.067779, bonus=1.000000, nodes=7)
                            @ 10  java.util.Formatter$Flags.contains(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 32  java.util.Formatter$Flags.contains(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 55  java.util.Formatter$Flags.contains(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 74  java.lang.StringBuilder.append(char):StringBuilder (8 bytes)   inline method (bytecode parsing)
                                  @ 43  java.util.Formatter$FormatSpecifier.leadingSign(StringBuilder, boolean):StringBuilder (80 bytes)   relevance-based (relevance=0.254365, probability=0.067779, bonus=1.000000, nodes=13 <= 76.309417)
                                  @ 49  java.lang.Double.isInfinite(double):boolean (17 bytes)   trivial (relevance=0.254365, probability=0.067779, bonus=1.000000, nodes=9)
                            @ 275  java.lang.StringBuilder.<init>():void (7 bytes)   inline method (bytecode parsing)
                            @ 280  jdk.internal.math.FormattedFPDecimal.getMantissa():char[] (5 bytes)   inline accessor method (bytecode parsing)
                            @ 283  java.lang.StringBuilder.append(char[]):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 299  java.util.Formatter$Flags.contains(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 4  jdk.internal.math.FormattedFPDecimal.<init>():void (5 bytes)   inline method (bytecode parsing)
                                        @ 5  jdk.internal.math.DoubleToDecimal.<init>(boolean):void (21 bytes)   trivial (relevance=0.254365, probability=0.067779, bonus=1.000000, nodes=9)
                            @ 49  jdk.internal.math.DoubleToDecimal.append(int):void (19 bytes)   inline method (bytecode parsing)
                                        @ 10  jdk.internal.math.DoubleToDecimal.toDecimal(double, FormattedFPDecimal):int (220 bytes)   not inlining relevance-based (relevance=0.254365, probability=0.067779, bonus=1.000000, nodes=78 > 76.309417)
                                      @ 12  jdk.internal.math.DoubleToDecimal.split(double, FormattedFPDecimal):void (15 bytes)   relevance-based (relevance=0.254365, probability=0.067779, bonus=1.000000, nodes=14 <= 76.309417)
                            @ 64  jdk.internal.math.MathUtils.pow10(int):long (6 bytes)   inline method (bytecode parsing)
                            @ 119  jdk.internal.math.MathUtils.pow10(int):long (6 bytes)   inline method (bytecode parsing)
                                        @ 14  jdk.internal.math.FormattedFPDecimal.round(long):void (149 bytes)   not inlining relevance-based (relevance=0.254365, probability=0.067779, bonus=1.000000, nodes=86 > 76.309417)
                                            @ 29  jdk.internal.math.FormattedFPDecimal.fillWithZeros(int, int):void (20 bytes)   relevance-based (relevance=0.254365, probability=0.052580, bonus=1.000000, nodes=22 <= 76.309417)
                            @ 30  jdk.internal.math.FormattedFPDecimal.toDigit(long):char (6 bytes)   inline method (bytecode parsing)
                              @ 2  jdk.internal.math.FormattedFPDecimal.toDigit(int):char (6 bytes)   inline method (bytecode parsing)
                                            @ 42  jdk.internal.math.FormattedFPDecimal.fillWithDigits(long, int, int):long (42 bytes)   relevance-based (relevance=0.254365, probability=0.052580, bonus=1.000000, nodes=37 <= 76.309417)
                                          @ 8  jdk.internal.math.FormattedFPDecimal.plainCharsPureInteger():void (47 bytes)   relevance-based (relevance=0.254365, probability=0.052580, bonus=1.000000, nodes=59 <= 76.309417)
                                        @ 18  jdk.internal.math.FormattedFPDecimal.plainChars():FormattedFPDecimal (39 bytes)   not inlining relevance-based (relevance=0.254365, probability=0.067779, bonus=1.000000, nodes=81 > 76.309417)
                                      @ 56  jdk.internal.math.FormattedFPDecimal.plain(int):FormattedFPDecimal (22 bytes)   relevance-based (relevance=0.254365, probability=0.067779, bonus=1.000000, nodes=17 <= 76.309417)
                                    @ 266  jdk.internal.math.FormattedFPDecimal.valueOf(double, int, char):FormattedFPDecimal (96 bytes)   relevance-based (relevance=0.254365, probability=0.067779, bonus=1.000000, nodes=30 <= 76.309417)
                                    @ 3  java.lang.AbstractStringBuilder.<init>(int):void (39 bytes)   relevance-based (relevance=0.254365, probability=0.067779, bonus=1.000000, nodes=11 <= 76.309417)
                                        @ 24  java.lang.AbstractStringBuilder.newCapacity(int):int (59 bytes)   not inlining relevance-based (relevance=0.034080, probability=0.008008, bonus=1.000000, nodes=21 > 10.224045)
                                        @ 32  java.util.Arrays.copyOf(byte[], int):byte[] (33 bytes)   not inlining relevance-based (relevance=0.034080, probability=0.008008, bonus=1.000000, nodes=29 > 10.224045)
                                      @ 10  java.lang.AbstractStringBuilder.ensureCapacityInternal(int):void (39 bytes)   relevance-based (relevance=0.254365, probability=0.067779, bonus=1.000000, nodes=29 <= 76.309417)
                                        @ 7  java.lang.AbstractStringBuilder.isLatin1():boolean (19 bytes)   trivial (relevance=0.288445, probability=0.067779, bonus=1.000000, nodes=9)
                                        @ 40  java.lang.StringLatin1.canEncode(int):boolean (13 bytes)   trivial (relevance=0.288445, probability=0.221531, bonus=1.000000, nodes=9)
                                      @ 17  java.lang.AbstractStringBuilder.appendChars(char[], int, int):void (130 bytes)   relevance-based (relevance=0.288445, probability=0.067779, bonus=1.000000, nodes=40 <= 86.533461)
                                    @ 2  java.lang.AbstractStringBuilder.append(char[]):AbstractStringBuilder (22 bytes)   relevance-based (relevance=0.254365, probability=0.067779, bonus=1.000000, nodes=67 <= 76.309417)
                                  @ 77  java.util.Formatter$FormatSpecifier.print(Formatter, StringBuilder, double, Locale, int, char, int, boolean):void (912 bytes)   not inlining relevance-based (relevance=0.254365, probability=0.067779, bonus=1.000000, nodes=135 > 76.309417)
                            @ 11  java.util.Formatter$Flags.contains(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                                  @ 114  java.util.Formatter$FormatSpecifier.trailingSign(StringBuilder, boolean):StringBuilder (26 bytes)   trivial (relevance=0.254365, probability=0.067779, bonus=1.000000, nodes=6)
                            @ 22  java.util.Formatter$Flags.contains(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 49  java.lang.Math.max(int, int):int (11 bytes)   inline method (bytecode parsing)
                            @ 37  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                            @ 1  java.lang.AbstractStringBuilder.length():int (5 bytes)   inline accessor method (bytecode parsing)
                                    @ 31  java.lang.StringBuilder.length():int (5 bytes)   trivial (relevance=0.000373, probability=0.000099, bonus=1.000000, nodes=5)
                            @ 2  java.lang.StringBuilder.append(CharSequence):StringBuilder (8 bytes)   inline method (bytecode parsing)
                                        @ 37  java.lang.AbstractStringBuilder.append(AbstractStringBuilder):AbstractStringBuilder (70 bytes)   not inlining relevance-based (relevance=0.000373, probability=0.000099, bonus=1.000000, nodes=31 > 0.112022)
                                      @ 2  java.lang.AbstractStringBuilder.append(CharSequence):AbstractStringBuilder (54 bytes)   trivial (relevance=0.000373, probability=0.000099, bonus=1.000000, nodes=8)
                                    @ 82  java.lang.StringBuilder.append(CharSequence):Appendable (6 bytes)   not inlining relevance-based (relevance=0.000373, probability=0.000099, bonus=1.000000, nodes=10 > 0.112022)
                            @ 2  java.lang.StringBuilder.append(CharSequence):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 1  java.lang.AbstractStringBuilder.length():int (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 10  java.lang.StringBuilder.length():int (5 bytes)   trivial (relevance=0.254365, probability=0.067679, bonus=1.000000, nodes=5)
                                            @ 24  java.lang.AbstractStringBuilder.newCapacity(int):int (59 bytes)   not inlining relevance-based (relevance=0.034080, probability=0.007996, bonus=1.000000, nodes=21 > 10.224045)
                                            @ 32  java.util.Arrays.copyOf(byte[], int):byte[] (33 bytes)   not inlining relevance-based (relevance=0.034080, probability=0.007996, bonus=1.000000, nodes=29 > 10.224045)
                                          @ 21  java.lang.AbstractStringBuilder.ensureCapacityInternal(int):void (39 bytes)   relevance-based (relevance=0.254365, probability=0.067679, bonus=1.000000, nodes=29 <= 76.309417)
                                @ 3  java.lang.Math.max(int, int):int (11 bytes)   trivial (relevance=0.081535, probability=0.075388, bonus=1.000000, nodes=7)
                              @ 27  jdk.internal.util.ArraysSupport.newLength(int, int, int):int (27 bytes)   relevance-based (relevance=0.081535, probability=0.075388, bonus=1.000000, nodes=15 <= 24.460462)
                                            @ 11  java.lang.AbstractStringBuilder.getCoder():byte (15 bytes)   trivial (relevance=0.288445, probability=0.067679, bonus=1.000000, nodes=5)
                                          @ 26  java.lang.AbstractStringBuilder.inflateIfNeededFor(AbstractStringBuilder):void (22 bytes)   trivial (relevance=0.288445, probability=0.067679, bonus=1.000000, nodes=9)
                              @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.081535, probability=0.075388, bonus=1.000000, nodes=41 > 24.460462)
                                          @ 42  java.lang.AbstractStringBuilder.getBytes(byte[], int, byte):void (44 bytes)   relevance-based (relevance=0.288445, probability=0.067679, bonus=1.000000, nodes=27 <= 86.533461)
                                        @ 37  java.lang.AbstractStringBuilder.append(AbstractStringBuilder):AbstractStringBuilder (70 bytes)   relevance-based (relevance=0.254365, probability=0.067679, bonus=1.000000, nodes=70 <= 76.309417)
                                      @ 2  java.lang.AbstractStringBuilder.append(CharSequence):AbstractStringBuilder (54 bytes)   relevance-based (relevance=0.254365, probability=0.067679, bonus=1.000000, nodes=71 <= 76.309417)
                                    @ 10  java.lang.StringBuilder.append(CharSequence):Appendable (6 bytes)   relevance-based (relevance=0.254365, probability=0.067679, bonus=1.000000, nodes=73 <= 76.309417)
                                  @ 154  java.util.Formatter$FormatSpecifier.appendJustified(Appendable, CharSequence):void (89 bytes)   not inlining relevance-based (relevance=0.254365, probability=0.067779, bonus=1.000000, nodes=101 > 76.309417)
                                @ 55  java.util.Formatter$FormatSpecifier.print(Formatter, double, Locale):void (158 bytes)   relevance-based (relevance=0.248503, probability=0.067779, bonus=1.000000, nodes=64 <= 74.551033)
                              @ 146  java.util.Formatter$FormatSpecifier.printFloat(Formatter, Object, Locale):void (91 bytes)   not inlining relevance-based (relevance=0.248503, probability=0.067779, bonus=1.000000, nodes=78 > 74.551033)
                            @ 4  java.lang.StringBuilder.<init>():void (7 bytes)   inline method (bytecode parsing)
                            @ 222  java.lang.Long.toHexString(long):String (6 bytes)   inline method (bytecode parsing)
                            @ 232  java.util.Formatter$Flags.contains(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 260  java.util.Formatter$Flags.contains(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 298  java.util.Formatter$Flags.contains(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 322  java.util.Formatter$Flags.contains(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 342  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                                @ 101  java.util.Formatter$FormatSpecifier.print(Formatter, long, Locale):void (357 bytes)   not inlining relevance-based (relevance=0.050417, probability=0.014720, bonus=1.000000, nodes=96 > 15.125103)
                            @ 4  java.lang.StringBuilder.<init>():void (7 bytes)   inline method (bytecode parsing)
                            @ 222  java.lang.Long.toHexString(long):String (6 bytes)   inline method (bytecode parsing)
                            @ 232  java.util.Formatter$Flags.contains(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 260  java.util.Formatter$Flags.contains(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 298  java.util.Formatter$Flags.contains(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 322  java.util.Formatter$Flags.contains(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 342  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                                    @ 3  java.lang.AbstractStringBuilder.<init>(int):void (39 bytes)   relevance-based (relevance=1.359157, probability=0.291972, bonus=1.000000, nodes=11 <= 300.000000)
                                    @ 218  java.util.Formatter$FormatSpecifier.checkBadFlags(int):void (24 bytes)   trivial (relevance=0.359157, probability=0.077153, bonus=1.000000, nodes=8)
                            @ 16  java.lang.Math.max(int, int):int (11 bytes)   inline method (bytecode parsing)
                            @ 50  java.lang.String.<init>(byte[], byte):void (15 bytes)   inline method (bytecode parsing)
                                      @ 40  java.lang.Long.formatUnsignedLong0(long, int, byte[], int, int):void (47 bytes)   relevance-based (relevance=0.359157, probability=0.077153, bonus=1.000000, nodes=32 <= 107.747031)
                                    @ 2  java.lang.Long.toUnsignedString0(long, int):String (83 bytes)   relevance-based (relevance=0.359157, probability=0.077153, bonus=1.000000, nodes=47 <= 107.747031)
                                      @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=0.359157, probability=0.077153, bonus=1.000000, nodes=5)
                                    @ 250  java.lang.String.length():int (11 bytes)   trivial (relevance=0.359157, probability=0.077153, bonus=1.000000, nodes=8)
                            @ 10  java.lang.StringBuilder.append(char):StringBuilder (8 bytes)   inline method (bytecode parsing)
                                    @ 314  java.util.Formatter$FormatSpecifier.trailingZeros(StringBuilder, int):void (21 bytes)   not inlining relevance-based (relevance=0.007297, probability=0.001567, bonus=1.000000, nodes=23 > 2.189023)
                            @ 28  java.lang.String.<init>(byte[], byte):void (15 bytes)   inline method (bytecode parsing)
                                        @ 1  java.lang.Long.stringSize(long):int (55 bytes)   relevance-based (relevance=1.000000, probability=0.214818, bonus=1.000000, nodes=45 <= 300.000000)
                                        @ 18  java.lang.Long.getChars(long, int, byte[]):int (195 bytes)   relevance-based (relevance=1.071382, probability=0.214818, bonus=1.000000, nodes=109 <= 300.000000)
                                      @ 21  java.lang.Long.toString(long):String (55 bytes)   relevance-based (relevance=1.000000, probability=0.214818, bonus=1.000000, nodes=157 <= 300.000000)
                                    @ 34  java.lang.Long.toString(long, int):String (139 bytes)   relevance-based (relevance=1.000000, probability=0.214818, bonus=1.000000, nodes=159 <= 300.000000)
                            @ 10  java.util.Formatter$Flags.contains(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 32  java.util.Formatter$Flags.contains(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 55  java.util.Formatter$Flags.contains(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 74  java.lang.StringBuilder.append(char):StringBuilder (8 bytes)   inline method (bytecode parsing)
                                      @ 2  java.lang.AbstractStringBuilder.append(char):AbstractStringBuilder (77 bytes)   not inlining relevance-based (relevance=0.001780, probability=0.000382, bonus=1.000000, nodes=48 > 0.533921)
                                    @ 44  java.util.Formatter$FormatSpecifier.leadingSign(StringBuilder, boolean):StringBuilder (80 bytes)   relevance-based (relevance=1.071382, probability=0.214818, bonus=1.000000, nodes=30 <= 300.000000)
                                    @ 79  java.util.Formatter$FormatSpecifier.adjustWidth(int, int, boolean):int (29 bytes)   trivial (relevance=1.071382, probability=0.214818, bonus=1.000000, nodes=9)
                            @ 13  java.lang.StringBuilder.length():int (5 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.AbstractStringBuilder.length():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 101  java.util.Formatter$Flags.contains(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 261  java.lang.StringBuilder.append(char):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 291  java.lang.StringBuilder.append(char):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 337  java.lang.StringBuilder.length():int (5 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.AbstractStringBuilder.length():int (5 bytes)   inline accessor method (bytecode parsing)
                                    @ 84  java.util.Formatter$FormatSpecifier.localizedMagnitude(Formatter, StringBuilder, CharSequence, int, int, int, Locale):StringBuilder (381 bytes)   not inlining too large previous low-level graph (low-level-nodes: 1021, relevance=1.071382, probability=0.214818, bonus=1.000000, nodes=95)
                            @ 11  java.util.Formatter$Flags.contains(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                                    @ 93  java.util.Formatter$FormatSpecifier.trailingSign(StringBuilder, boolean):StringBuilder (26 bytes)   relevance-based (relevance=1.071382, probability=0.214818, bonus=1.000000, nodes=19 <= 300.000000)
                                  @ 62  java.util.Formatter$FormatSpecifier.print(Formatter, long, Locale):void (357 bytes)   not inlining relevance-based (relevance=1.126598, probability=0.291972, bonus=1.000000, nodes=302 > 300.000000)
                                @ 78  java.util.Formatter$FormatSpecifier.print(Formatter, int, Locale):void (66 bytes)   relevance-based (relevance=1.000000, probability=0.291972, bonus=1.000000, nodes=33 <= 300.000000)
                              @ 136  java.util.Formatter$FormatSpecifier.printInteger(Formatter, Object, Locale):void (137 bytes)   relevance-based (relevance=1.124456, probability=0.306692, bonus=1.000000, nodes=67 <= 300.000000)
                            @ 27  java.lang.Character.toString():String (8 bytes)   inline method (bytecode parsing)
                            @ 18  java.lang.StringLatin1.toBytes(char):byte[] (9 bytes)   inline method (bytecode parsing)
                            @ 22  java.lang.String.<init>(byte[], byte):void (15 bytes)   inline method (bytecode parsing)
                            @ 35  java.lang.String.<init>(byte[], byte):void (15 bytes)   inline method (bytecode parsing)
                                  @ 7  java.lang.StringLatin1.canEncode(int):boolean (13 bytes)   trivial (relevance=0.444165, probability=0.120477, bonus=1.000000, nodes=9)
                                  @ 31  java.lang.StringUTF16.toBytes(char):byte[] (12 bytes)   not inlining relevance-based (relevance=0.002449, probability=0.000664, bonus=1.000000, nodes=10 > 0.734707)
                                @ 4  java.lang.String.valueOf(char):String (39 bytes)   relevance-based (relevance=0.441716, probability=0.120477, bonus=1.000000, nodes=34 <= 132.514875)
                            @ 34  java.util.Formatter$Flags.contains(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 22  java.util.Formatter$Flags.contains(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                                    @ 31  java.lang.String.length():int (11 bytes)   not inlining relevance-based (relevance=0.000652, probability=0.000177, bonus=1.000000, nodes=10 > 0.195610)
                            @ 2  java.lang.StringBuilder.append(CharSequence):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 2  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                                          @ 2  java.lang.AbstractStringBuilder.append(String):AbstractStringBuilder (45 bytes)   not inlining too large previous low-level graph (low-level-nodes: 368, relevance=0.000652, probability=0.000177, bonus=1.000000, nodes=21)
                                        @ 21  java.lang.StringBuilder.append(String):AbstractStringBuilder (6 bytes)   trivial (relevance=0.000652, probability=0.000177, bonus=1.000000, nodes=9)
                                      @ 2  java.lang.AbstractStringBuilder.append(CharSequence):AbstractStringBuilder (54 bytes)   not inlining relevance-based (relevance=0.000652, probability=0.000177, bonus=1.000000, nodes=10 > 0.195610)
                                    @ 82  java.lang.StringBuilder.append(CharSequence):Appendable (6 bytes)   trivial (relevance=0.000652, probability=0.000177, bonus=1.000000, nodes=9)
                            @ 2  java.lang.StringBuilder.append(CharSequence):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 2  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                                          @ 2  java.lang.AbstractStringBuilder.append(String):AbstractStringBuilder (45 bytes)   not inlining too large previous low-level graph (low-level-nodes: 368, relevance=0.444165, probability=0.120300, bonus=1.000000, nodes=21)
                                        @ 21  java.lang.StringBuilder.append(String):AbstractStringBuilder (6 bytes)   trivial (relevance=0.444165, probability=0.120300, bonus=1.000000, nodes=9)
                                      @ 2  java.lang.AbstractStringBuilder.append(CharSequence):AbstractStringBuilder (54 bytes)   relevance-based (relevance=0.444165, probability=0.120300, bonus=1.000000, nodes=10 <= 133.249582)
                                    @ 10  java.lang.StringBuilder.append(CharSequence):Appendable (6 bytes)   relevance-based (relevance=0.444165, probability=0.120300, bonus=1.000000, nodes=12 <= 133.249582)
                                  @ 53  java.util.Formatter$FormatSpecifier.appendJustified(Appendable, CharSequence):void (89 bytes)   relevance-based (relevance=0.444165, probability=0.120477, bonus=1.000000, nodes=52 <= 133.249582)
                                @ 211  java.util.Formatter$FormatSpecifier.print(Formatter, String, Locale):void (57 bytes)   relevance-based (relevance=0.444165, probability=0.120477, bonus=1.000000, nodes=65 <= 133.249582)
                              @ 156  java.util.Formatter$FormatSpecifier.printCharacter(Formatter, Object, Locale):void (215 bytes)   relevance-based (relevance=0.441716, probability=0.120477, bonus=1.000000, nodes=111 <= 132.514875)
                            @ 34  java.util.Formatter$Flags.contains(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 22  java.util.Formatter$Flags.contains(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                                    @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=0.000366, probability=0.000100, bonus=1.000000, nodes=5)
                                  @ 31  java.lang.String.length():int (11 bytes)   trivial (relevance=0.000366, probability=0.000100, bonus=1.000000, nodes=5)
                            @ 2  java.lang.StringBuilder.append(CharSequence):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 2  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                                        @ 2  java.lang.AbstractStringBuilder.append(String):AbstractStringBuilder (45 bytes)   not inlining too large previous low-level graph (low-level-nodes: 368, relevance=0.000366, probability=0.000100, bonus=1.000000, nodes=21)
                                      @ 21  java.lang.StringBuilder.append(String):AbstractStringBuilder (6 bytes)   trivial (relevance=0.000366, probability=0.000100, bonus=1.000000, nodes=9)
                                    @ 2  java.lang.AbstractStringBuilder.append(CharSequence):AbstractStringBuilder (54 bytes)   not inlining relevance-based (relevance=0.000366, probability=0.000100, bonus=1.000000, nodes=10 > 0.109789)
                                  @ 82  java.lang.StringBuilder.append(CharSequence):Appendable (6 bytes)   trivial (relevance=0.000366, probability=0.000100, bonus=1.000000, nodes=9)
                            @ 2  java.lang.StringBuilder.append(CharSequence):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 2  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                                        @ 2  java.lang.AbstractStringBuilder.append(String):AbstractStringBuilder (45 bytes)   not inlining too large previous low-level graph (low-level-nodes: 368, relevance=0.249295, probability=0.067895, bonus=1.000000, nodes=21)
                                      @ 21  java.lang.StringBuilder.append(String):AbstractStringBuilder (6 bytes)   trivial (relevance=0.249295, probability=0.067895, bonus=1.000000, nodes=9)
                                    @ 2  java.lang.AbstractStringBuilder.append(CharSequence):AbstractStringBuilder (54 bytes)   relevance-based (relevance=0.249295, probability=0.067895, bonus=1.000000, nodes=10 <= 74.788477)
                                  @ 10  java.lang.StringBuilder.append(CharSequence):Appendable (6 bytes)   relevance-based (relevance=0.249295, probability=0.067895, bonus=1.000000, nodes=12 <= 74.788477)
                                @ 53  java.util.Formatter$FormatSpecifier.appendJustified(Appendable, CharSequence):void (89 bytes)   relevance-based (relevance=0.249295, probability=0.067994, bonus=1.000000, nodes=48 <= 74.788477)
                              @ 213  java.util.Formatter$FormatSpecifier.print(Formatter, String, Locale):void (57 bytes)   relevance-based (relevance=0.249295, probability=0.067994, bonus=1.000000, nodes=61 <= 74.788477)
                              @ 3  java.lang.Math.max(int, int):int (11 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=7)
                              @ 14  java.lang.Class.getComponentType():Class (14 bytes)   trivial (relevance=0.027990, probability=0.027228, bonus=1.000000, nodes=7)
                              @ 32  java.lang.Math.min(int, int):int (11 bytes)   trivial (relevance=1.027990, probability=1.000000, bonus=1.000000, nodes=7)
                            @ 5  jdk.graal.compiler.replacements.arraycopy.ArrayCopySnippets.checkArrayTypes(Object, Object, ArrayCopySnippets$ArrayCopyTypeCheck):void (98 bytes)   inline method (bytecode parsing)
                            @ 20  jdk.graal.compiler.replacements.arraycopy.ArrayCopySnippets.checkLimits(Object, int, Object, int, int, JavaKind, ArrayCopySnippets$Counters):int[] (230 bytes)   inline method (bytecode parsing)
                              @ 21  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                              @ 37  jdk.graal.compiler.nodes.PiNode.piCastPositive(int, GuardingNode):int (9 bytes)   inline method (bytecode parsing)
                              @ 64  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                              @ 81  jdk.graal.compiler.nodes.PiNode.piCastPositive(int, GuardingNode):int (9 bytes)   inline method (bytecode parsing)
                              @ 108  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                              @ 125  jdk.graal.compiler.nodes.PiNode.piCastPositive(int, GuardingNode):int (9 bytes)   inline method (bytecode parsing)
                              @ 159  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                              @ 200  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                              @ 217  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                              @ 226  jdk.graal.compiler.replacements.arraycopy.ArrayCopySnippets.createCheckLimitsResult(int, int, int):int[] (18 bytes)   inline method (bytecode parsing)
                            @ 47  jdk.graal.compiler.replacements.arraycopy.ArrayCopySnippets.incrementLengthCounter(int, ArrayCopySnippets$Counters):void (16 bytes)   inline method (bytecode parsing)
                              @ 12  jdk.graal.compiler.replacements.SnippetIntegerHistogram.inc(long):void (215 bytes)   inline method (bytecode parsing)
                            @ 66  jdk.graal.compiler.replacements.arraycopy.ArrayCopyWithDelayedLoweringNode.arraycopy(Object, int, Object, int, int, ArrayCopySnippets$WorkSnippetID, GraphState$GuardsStage, JavaKind):void (17 bytes)   inline method (bytecode parsing)
                            @ 15  jdk.graal.compiler.replacements.ReplacementsUtil.staticAssert(boolean, String):void (12 bytes)   inline method (bytecode parsing)
                            @ 1  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                            @ 58  jdk.graal.compiler.nodes.java.DynamicNewArrayNode.throwsIllegalArgumentException(Class, Class):boolean (11 bytes)   inline method (bytecode parsing)
                            @ 5  java.lang.Integer.intValue():int (5 bytes)   inline method (bytecode parsing)
                            @ 86  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.loadKlassFromObject(Object, int, LocationIdentity):KlassPointer (32 bytes)   inline method (bytecode parsing)
                              @ 18  jdk.graal.compiler.replacements.ReplacementsUtil.staticAssert(boolean, String):void (12 bytes)   inline method (bytecode parsing)
                            @ 117  jdk.graal.compiler.hotspot.replacements.ClassGetHubNode.piCastNonNull(KlassPointer, GuardingNode):KlassPointer (9 bytes)   inline method (bytecode parsing)
                            @ 249  jdk.graal.compiler.replacements.AllocationSnippets.allocateArrayImpl(Word, int, int, int, AllocationSnippets$FillContent, int, boolean, boolean, boolean, boolean, AllocationSnippets$AllocationProfilingData):Object (178 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getTLABInfo():Word (5 bytes)   inline method (bytecode parsing)
                            @ 1  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getThread():Word (8 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                                  @ 4  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.registerAsWord(Register):Word (7 bytes)   inline method (bytecode parsing)
                              @ 9  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.readTlabTop(Word):Word (5 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.readTlabTop(Word):Word (17 bytes)   inline method (bytecode parsing)
                            @ 5  java.lang.Long.longValue():long (5 bytes)   inline method (bytecode parsing)
                              @ 17  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.readTlabEnd(Word):Word (5 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.readTlabEnd(Word):Word (17 bytes)   inline method (bytecode parsing)
                              @ 36  jdk.graal.compiler.replacements.ReplacementsUtil.dynamicAssert(boolean, String):void (12 bytes)   inline method (bytecode parsing)
                              @ 44  jdk.graal.compiler.replacements.AllocationSnippets.arrayAllocationSize(int, int, int):UnsignedWord (18 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.objectAlignment():int (7 bytes)   inline method (bytecode parsing)
                                @ 11  jdk.graal.compiler.replacements.AllocationSnippets.arrayAllocationSize(int, int, int, int):long (32 bytes)   inline method (bytecode parsing)
                              @ 59  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.useTLAB():boolean (7 bytes)   inline method (bytecode parsing)
                              @ 72  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.shouldAllocateInTLAB(UnsignedWord, boolean):boolean (33 bytes)   inline method (bytecode parsing)
                              @ 102  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.writeTlabTop(Word, Word):void (6 bytes)   inline method (bytecode parsing)
                                @ 2  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.writeTlabTop(Word, Word):void (15 bytes)   inline method (bytecode parsing)
                              @ 109  jdk.graal.compiler.replacements.AllocationSnippets.emitPrefetchAllocate(Word, boolean):void (61 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getPrefetchStyle():int (7 bytes)   inline method (bytecode parsing)
                                @ 9  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getPrefetchLines(boolean):int (18 bytes)   inline method (bytecode parsing)
                                @ 14  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getPrefetchStepSize():int (7 bytes)   inline method (bytecode parsing)
                                @ 20  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getPrefetchDistance():int (7 bytes)   inline method (bytecode parsing)
                              @ 136  jdk.graal.compiler.replacements.AllocationSnippets.formatArray(Word, UnsignedWord, int, Word, AllocationSnippets$FillContent, boolean, int, boolean, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):Object (53 bytes)   inline method (bytecode parsing)
                                @ 5  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.initializeObjectHeader(Word, Word, boolean):void (29 bytes)   inline method (bytecode parsing)
                                  @ 25  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.initializeObjectHeader(Word, Word, KlassPointer):void (20 bytes)   inline method (bytecode parsing)
                                @ 11  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.arrayLengthOffset():int (7 bytes)   inline method (bytecode parsing)
                                @ 15  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                                @ 38  jdk.graal.compiler.replacements.AllocationSnippets.fillContents(Word, AllocationSnippets$FillContent, int, UnsignedWord, boolean, boolean, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):void (58 bytes)   inline method (bytecode parsing)
                                  @ 22  jdk.graal.compiler.replacements.AllocationSnippets.zeroMemory(Word, int, UnsignedWord, boolean, boolean, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):void (19 bytes)   inline method (bytecode parsing)
                                    @ 15  jdk.graal.compiler.replacements.AllocationSnippets.fillMemory(long, Word, int, UnsignedWord, boolean, boolean, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):void (194 bytes)   inline method (bytecode parsing)
                                      @ 17  jdk.graal.compiler.replacements.ReplacementsUtil.dynamicAssert(boolean, String):void (12 bytes)   inline method (bytecode parsing)
                                      @ 56  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                                      @ 89  jdk.graal.compiler.replacements.ReplacementsUtil.dynamicAssert(boolean, String):void (12 bytes)   inline method (bytecode parsing)
                                      @ 153  jdk.graal.compiler.replacements.ReplacementsUtil.staticAssert(boolean, String):void (12 bytes)   inline method (bytecode parsing)
                                      @ 167  jdk.graal.compiler.replacements.AllocationSnippets.fillMemoryAlignedUnrollable(long, Word, UnsignedWord, UnsignedWord, boolean, AllocationSnippets$AllocationSnippetCounters):void (68 bytes)   inline method (bytecode parsing)
                                        @ 5  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                          @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                                        @ 44  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                                      @ 190  jdk.graal.compiler.replacements.AllocationSnippets.fillMemoryAligned(long, Word, UnsignedWord, UnsignedWord, boolean, UnsignedWord, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):void (155 bytes)   inline method (bytecode parsing)
                                        @ 17  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getMinimalBulkZeroingSize():int (7 bytes)   inline method (bytecode parsing)
                                        @ 36  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                          @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                                        @ 53  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                                        @ 105  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                          @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                                        @ 134  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                                @ 44  jdk.graal.compiler.replacements.AllocationSnippets.emitMemoryBarrierIf(boolean):void (14 bytes)   inline method (bytecode parsing)
                                  @ 7  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                              @ 152  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                              @ 158  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.callNewArrayStub(Word, int):Object (35 bytes)   inline method (bytecode parsing)
                                @ 22  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.nonNullOrDeopt(Object):Object (27 bytes)   inline method (bytecode parsing)
                              @ 168  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.profileAllocation(AllocationSnippets$AllocationProfilingData, UnsignedWord):void (51 bytes)   inline method (bytecode parsing)
                              @ 174  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.verifyOop(Object):Object (5 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.verifyOop(Object):Object (19 bytes)   inline method (bytecode parsing)
                            @ 14  jdk.graal.compiler.hotspot.replacements.arraycopy.HotSpotArraycopySnippets.doCheckcastArraycopySnippet(Object, int, Object, int, int, JavaKind, LocationIdentity, ArrayCopySnippets$Counters):void (228 bytes)   inline method (bytecode parsing)
                              @ 23  jdk.graal.compiler.nodes.PiNode.piCastNonNull(Object, GuardingNode):Object (9 bytes)   inline method (bytecode parsing)
                              @ 32  jdk.graal.compiler.nodes.PiNode.piCastNonNull(Object, GuardingNode):Object (9 bytes)   inline method (bytecode parsing)
                              @ 39  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.loadHub(Object):KlassPointer (5 bytes)   inline method (bytecode parsing)
                              @ 46  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.loadHub(Object):KlassPointer (5 bytes)   inline method (bytecode parsing)
                              @ 131  jdk.graal.compiler.hotspot.replacements.arraycopy.HotSpotArraycopySnippets.getDestElemClass(KlassPointer):KlassPointer (14 bytes)   inline method (bytecode parsing)
                              @ 139  jdk.graal.compiler.hotspot.replacements.arraycopy.HotSpotArraycopySnippets.getSuperCheckOffset(KlassPointer):Word (20 bytes)   inline method (bytecode parsing)
                              @ 149  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                              @ 159  jdk.graal.compiler.replacements.SnippetCounter.add(int):void (13 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                 n            @ 224  java.lang.System.arraycopy(Object, int, Object, int, int):void (0 bytes)   not inlining native method (bytecode parsing)
                              @ 96  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                              @ 106  jdk.graal.compiler.replacements.SnippetCounter.add(int):void (13 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                              @ 119  jdk.graal.compiler.hotspot.replacements.arraycopy.HotSpotArraycopySnippets.heapWordSize():int (7 bytes)   inline method (bytecode parsing)
                              @ 122  jdk.graal.compiler.replacements.arraycopy.ArrayCopyCallNode.arraycopyObjectKillsAny(Object, int, Object, int, int, int):void (21 bytes)   inline method (bytecode parsing)
                                @ 9  org.graalvm.word.LocationIdentity.any():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                            @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.registerAsWord(Register):Word (7 bytes)   inline method (bytecode parsing)
                            @ 6  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.readExceptionOop(Word):Object (14 bytes)   inline method (bytecode parsing)
                            @ 12  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.writeExceptionOop(Word, Object):void (15 bytes)   inline method (bytecode parsing)
                            @ 22  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.writeExceptionPc(Word, Word):void (15 bytes)   inline method (bytecode parsing)
                            @ 23  jdk.graal.compiler.replacements.AllocationSnippets.allocateArrayImpl(Word, int, int, int, AllocationSnippets$FillContent, int, boolean, boolean, boolean, boolean, AllocationSnippets$AllocationProfilingData):Object (178 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getTLABInfo():Word (5 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getThread():Word (8 bytes)   inline method (bytecode parsing)
                                  @ 4  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.registerAsWord(Register):Word (7 bytes)   inline method (bytecode parsing)
                              @ 9  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.readTlabTop(Word):Word (5 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.readTlabTop(Word):Word (17 bytes)   inline method (bytecode parsing)
                              @ 17  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.readTlabEnd(Word):Word (5 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.readTlabEnd(Word):Word (17 bytes)   inline method (bytecode parsing)
                              @ 36  jdk.graal.compiler.replacements.ReplacementsUtil.dynamicAssert(boolean, String):void (12 bytes)   inline method (bytecode parsing)
                              @ 44  jdk.graal.compiler.replacements.AllocationSnippets.arrayAllocationSize(int, int, int):UnsignedWord (18 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.objectAlignment():int (7 bytes)   inline method (bytecode parsing)
                                @ 11  jdk.graal.compiler.replacements.AllocationSnippets.arrayAllocationSize(int, int, int, int):long (32 bytes)   inline method (bytecode parsing)
                              @ 59  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.useTLAB():boolean (7 bytes)   inline method (bytecode parsing)
                              @ 72  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.shouldAllocateInTLAB(UnsignedWord, boolean):boolean (33 bytes)   inline method (bytecode parsing)
                              @ 102  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.writeTlabTop(Word, Word):void (6 bytes)   inline method (bytecode parsing)
                                @ 2  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.writeTlabTop(Word, Word):void (15 bytes)   inline method (bytecode parsing)
                              @ 109  jdk.graal.compiler.replacements.AllocationSnippets.emitPrefetchAllocate(Word, boolean):void (61 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getPrefetchStyle():int (7 bytes)   inline method (bytecode parsing)
                                @ 9  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getPrefetchLines(boolean):int (18 bytes)   inline method (bytecode parsing)
                                @ 14  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getPrefetchStepSize():int (7 bytes)   inline method (bytecode parsing)
                                @ 20  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getPrefetchDistance():int (7 bytes)   inline method (bytecode parsing)
                              @ 136  jdk.graal.compiler.replacements.AllocationSnippets.formatArray(Word, UnsignedWord, int, Word, AllocationSnippets$FillContent, boolean, int, boolean, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):Object (53 bytes)   inline method (bytecode parsing)
                                @ 5  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.initializeObjectHeader(Word, Word, boolean):void (29 bytes)   inline method (bytecode parsing)
                                  @ 25  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.initializeObjectHeader(Word, Word, KlassPointer):void (20 bytes)   inline method (bytecode parsing)
                                @ 11  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.arrayLengthOffset():int (7 bytes)   inline method (bytecode parsing)
                                @ 15  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                                @ 38  jdk.graal.compiler.replacements.AllocationSnippets.fillContents(Word, AllocationSnippets$FillContent, int, UnsignedWord, boolean, boolean, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):void (58 bytes)   inline method (bytecode parsing)
                                  @ 22  jdk.graal.compiler.replacements.AllocationSnippets.zeroMemory(Word, int, UnsignedWord, boolean, boolean, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):void (19 bytes)   inline method (bytecode parsing)
                                    @ 15  jdk.graal.compiler.replacements.AllocationSnippets.fillMemory(long, Word, int, UnsignedWord, boolean, boolean, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):void (194 bytes)   inline method (bytecode parsing)
                                      @ 17  jdk.graal.compiler.replacements.ReplacementsUtil.dynamicAssert(boolean, String):void (12 bytes)   inline method (bytecode parsing)
                                      @ 56  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                                      @ 89  jdk.graal.compiler.replacements.ReplacementsUtil.dynamicAssert(boolean, String):void (12 bytes)   inline method (bytecode parsing)
                                      @ 153  jdk.graal.compiler.replacements.ReplacementsUtil.staticAssert(boolean, String):void (12 bytes)   inline method (bytecode parsing)
                                      @ 167  jdk.graal.compiler.replacements.AllocationSnippets.fillMemoryAlignedUnrollable(long, Word, UnsignedWord, UnsignedWord, boolean, AllocationSnippets$AllocationSnippetCounters):void (68 bytes)   inline method (bytecode parsing)
                                        @ 5  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                          @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                                        @ 44  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                                      @ 190  jdk.graal.compiler.replacements.AllocationSnippets.fillMemoryAligned(long, Word, UnsignedWord, UnsignedWord, boolean, UnsignedWord, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):void (155 bytes)   inline method (bytecode parsing)
                                        @ 17  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getMinimalBulkZeroingSize():int (7 bytes)   inline method (bytecode parsing)
                                        @ 36  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                          @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                                        @ 53  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                                        @ 105  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                          @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                                        @ 134  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                                @ 44  jdk.graal.compiler.replacements.AllocationSnippets.emitMemoryBarrierIf(boolean):void (14 bytes)   inline method (bytecode parsing)
                              @ 152  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                              @ 158  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.callNewArrayStub(Word, int):Object (35 bytes)   inline method (bytecode parsing)
                                @ 22  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.nonNullOrDeopt(Object):Object (27 bytes)   inline method (bytecode parsing)
                              @ 168  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.profileAllocation(AllocationSnippets$AllocationProfilingData, UnsignedWord):void (51 bytes)   inline method (bytecode parsing)
                              @ 174  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.verifyOop(Object):Object (5 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.verifyOop(Object):Object (19 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                              @ 1  java.lang.String.length():int (11 bytes)   trivial (relevance=1.180511, probability=1.000000, bonus=1.000000, nodes=8)
                                @ 6  jdk.internal.util.Preconditions.checkFromToIndex(int, int, int, BiFunction):int (24 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=14 <= 300.000000)
                              @ 8  java.lang.String.checkBoundsBeginEnd(int, int, int):void (11 bytes)   relevance-based (relevance=1.180511, probability=1.000000, bonus=1.000000, nodes=13 <= 300.000000)
                              @ 28  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.099803, probability=0.931633, bonus=1.000000, nodes=9)
                            @ 20  java.lang.String.<init>(byte[], byte):void (15 bytes)   inline method (bytecode parsing)
                            @ 13  java.util.Arrays.copyOfRangeByte(byte[], int, int):byte[] (33 bytes)   inline method (bytecode parsing)
                              @ 2  java.util.Arrays.checkLength(int, int):void (38 bytes)   inline method (bytecode parsing)
                                  @ 24  java.lang.Math.min(int, int):int (11 bytes)   trivial (relevance=1.554918, probability=0.744372, bonus=1.000000, nodes=7)
                                @ 16  java.util.Arrays.copyOfRange(byte[], int, int):byte[] (25 bytes)   relevance-based (relevance=1.000000, probability=0.931245, bonus=1.000000, nodes=44 <= 300.000000)
                              @ 41  java.lang.StringLatin1.newString(byte[], int, int):String (24 bytes)   relevance-based (relevance=1.099720, probability=0.931563, bonus=1.000000, nodes=62 <= 300.000000)
                            @ 31  java.lang.String.<init>(byte[], byte):void (15 bytes)   inline method (bytecode parsing)
                            @ 54  java.lang.String.<init>(byte[], byte):void (15 bytes)   inline method (bytecode parsing)
                              @ 54  java.lang.StringUTF16.newString(byte[], int, int):String (58 bytes)   not inlining relevance-based (relevance=0.000083, probability=0.000070, bonus=1.000000, nodes=41 > 0.024958)
                            @ 20  java.lang.String.<init>(byte[], byte):void (15 bytes)   inline method (bytecode parsing)
                            @ 13  java.util.Arrays.copyOfRangeByte(byte[], int, int):byte[] (33 bytes)   inline method (bytecode parsing)
                              @ 2  java.util.Arrays.checkLength(int, int):void (38 bytes)   inline method (bytecode parsing)
                                @ 24  java.lang.Math.min(int, int):int (11 bytes)   trivial (relevance=1.560421, probability=0.799667, bonus=1.000000, nodes=7)
                              @ 16  java.util.Arrays.copyOfRange(byte[], int, int):byte[] (25 bytes)   relevance-based (relevance=1.000000, probability=0.999662, bonus=1.000000, nodes=44 <= 300.000000)
                              @ 97  jdk.internal.util.ArraysSupport.hashCode(int, byte[], int, int):int (33 bytes)   relevance-based (relevance=0.092082, probability=0.084311, bonus=1.000000, nodes=27 <= 27.624453)
                            @ 25  java.lang.System$2.getUTF16Char(byte[], int):char (6 bytes)   inline method (bytecode parsing)
                              @ 71  jdk.internal.util.ArraysSupport.utf16hashCode(int, byte[], int, int):int (40 bytes)   not inlining relevance-based (relevance=0.000083, probability=0.000076, bonus=1.000000, nodes=29 > 0.024927)
                              @ 51  jdk.internal.util.ArraysSupport.signedHashCode(int, byte[], int, int):int (37 bytes)   relevance-based (relevance=1.000000, probability=0.915613, bonus=1.000000, nodes=29 <= 300.000000)
                              @ 25  java.lang.Math.min(int, int):int (11 bytes)   trivial (relevance=1.000010, probability=0.999994, bonus=1.000000, nodes=7)
                            @ 64  java.util.Locale.getLanguage():String (8 bytes)   inline method (bytecode parsing)
                              @ 4  sun.util.locale.BaseLocale.getLanguage():String (5 bytes)   inline accessor method (bytecode parsing)
                            @ 182  java.lang.String.<init>(byte[], byte):void (15 bytes)   inline method (bytecode parsing)
                                @ 4  java.lang.CharacterDataLatin1.getProperties(int):int (11 bytes)   trivial (relevance=1.869053, probability=3.207625, bonus=1.000000, nodes=6)
                              @ 40  java.lang.CharacterDataLatin1.toUpperCaseEx(int):int (71 bytes)   relevance-based (relevance=1.181973, probability=3.207625, bonus=1.000000, nodes=26 <= 300.000000)
                                @ 4  java.lang.CharacterDataLatin1.getProperties(int):int (11 bytes)   trivial (relevance=0.923001, probability=3.148741, bonus=1.000000, nodes=6)
                              @ 139  java.lang.CharacterDataLatin1.toUpperCaseEx(int):int (71 bytes)   relevance-based (relevance=0.493833, probability=3.148741, bonus=1.000000, nodes=26 <= 148.150045)
                              @ 146  java.lang.StringLatin1.canEncode(int):boolean (13 bytes)   trivial (relevance=0.923001, probability=3.148741, bonus=1.000000, nodes=9)
                                @ 3  java.lang.Math.max(int, int):int (11 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=7)
                              @ 29  jdk.internal.util.ArraysSupport.newLength(int, int, int):int (27 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=15 <= 300.000000)
                            @ 34  java.util.Formatter$Flags.contains(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 22  java.util.Formatter$Flags.contains(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                                @ 31  java.lang.String.length():int (11 bytes)   not inlining relevance-based (relevance=0.001468, probability=0.001466, bonus=1.000000, nodes=10 > 0.440399)
                            @ 2  java.lang.StringBuilder.append(CharSequence):StringBuilder (8 bytes)   inline method (bytecode parsing)
                                  @ 2  java.lang.AbstractStringBuilder.append(CharSequence):AbstractStringBuilder (54 bytes)   not inlining relevance-based (relevance=0.001468, probability=0.001466, bonus=1.000000, nodes=15 > 0.440399)
                                @ 82  java.lang.StringBuilder.append(CharSequence):Appendable (6 bytes)   trivial (relevance=0.001468, probability=0.001466, bonus=1.000000, nodes=9)
                            @ 2  java.lang.StringBuilder.append(CharSequence):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 2  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                                      @ 2  java.lang.AbstractStringBuilder.append(String):AbstractStringBuilder (45 bytes)   not inlining too large previous low-level graph (low-level-nodes: 368, relevance=1.000000, probability=0.663783, bonus=1.000000, nodes=23)
                                    @ 21  java.lang.StringBuilder.append(String):AbstractStringBuilder (6 bytes)   trivial (relevance=1.000000, probability=0.663783, bonus=1.000000, nodes=9)
                                  @ 2  java.lang.AbstractStringBuilder.append(CharSequence):AbstractStringBuilder (54 bytes)   relevance-based (relevance=1.000000, probability=0.998534, bonus=1.000000, nodes=17 <= 300.000000)
                                @ 10  java.lang.StringBuilder.append(CharSequence):Appendable (6 bytes)   relevance-based (relevance=1.000000, probability=0.998534, bonus=1.000000, nodes=19 <= 300.000000)
                              @ 53  java.util.Formatter$FormatSpecifier.appendJustified(Appendable, CharSequence):void (89 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=59 <= 300.000000)
                            @ 36  java.util.BitSet.wordIndex(int):int (5 bytes)   inline method (bytecode parsing)
                              @ 32  java.util.BitSet.checkInvariants():void (111 bytes)   trivial (relevance=1.218744, probability=1.000000, bonus=1.000000, nodes=4)
                            @ 32  java.lang.ref.Reference.refersTo(Object):boolean (6 bytes)   inline method (bytecode parsing)
                            @ 70  java.util.WeakHashMap.indexFor(int, int):int (6 bytes)   inline method (bytecode parsing)
                            @ 5  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                              @ 2  java.lang.ref.Reference.refersToImpl(Object):boolean (6 bytes)   relevance-based (relevance=0.752510, probability=0.750559, bonus=1.000000, nodes=12 <= 225.752934)
                            @ 20  deltablue.Variable.getWalkStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                              @ 2  java.lang.ref.Reference.refersToImpl(Object):boolean (6 bytes)   relevance-based (relevance=0.752510, probability=287.979057, bonus=1.000000, nodes=12 <= 225.752934)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                              @ 23  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.999952, bonus=1.000000, nodes=13 <= 300.000000)
                            @ 8  deltablue.AbstractConstraint.lambda$satisfy$1(int, Variable):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                              @ 48  deltablue.AbstractConstraint$$Lambda/0x00007f45e0031810.apply(Object):void (12 bytes)   not inlining relevance-based (relevance=0.000017, probability=0.000017, bonus=1.000000, nodes=13 > 0.005012)
                            @ 8  deltablue.AbstractConstraint.lambda$satisfy$1(int, Variable):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                              @ 58  deltablue.AbstractConstraint$$Lambda/0x00007f45e0031810.apply(Object):void (12 bytes)   not inlining relevance-based (relevance=0.000017, probability=0.000017, bonus=1.000000, nodes=13 > 0.005012)
                            @ 8  deltablue.AbstractConstraint.lambda$satisfy$1(int, Variable):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                              @ 68  deltablue.AbstractConstraint$$Lambda/0x00007f45e0031810.apply(Object):void (12 bytes)   not inlining relevance-based (relevance=0.000017, probability=0.000017, bonus=1.000000, nodes=13 > 0.005012)
                            @ 8  deltablue.AbstractConstraint.lambda$satisfy$1(int, Variable):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                              @ 15  deltablue.AbstractConstraint$$Lambda/0x00007f45e0031810.apply(Object):void (12 bytes)   relevance-based (relevance=1.000000, probability=0.999983, bonus=1.000000, nodes=13 <= 300.000000)
                            @ 8  deltablue.AbstractConstraint.lambda$satisfy$1(int, Variable):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                              @ 25  deltablue.AbstractConstraint$$Lambda/0x00007f45e0031810.apply(Object):void (12 bytes)   relevance-based (relevance=1.000000, probability=0.999983, bonus=1.000000, nodes=13 <= 300.000000)
                            @ 8  deltablue.AbstractConstraint.lambda$satisfy$1(int, Variable):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                              @ 35  deltablue.AbstractConstraint$$Lambda/0x00007f45e0031810.apply(Object):void (12 bytes)   relevance-based (relevance=1.000000, probability=0.999983, bonus=1.000000, nodes=13 <= 300.000000)
                            @ 23  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                            @ 37  jdk.graal.compiler.nodes.PiNode.piCastNonNull(Object, GuardingNode):Object (9 bytes)   inline method (bytecode parsing)
                            @ 72  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                            @ 83  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                            @ 5  java.lang.String.<init>(StringBuilder):void (7 bytes)   inline method (bytecode parsing)
                            @ 5  java.lang.AbstractStringBuilder.getValue():byte[] (5 bytes)   inline accessor method (bytecode parsing)
                              @ 3  java.lang.String.<init>(AbstractStringBuilder, Void):void (99 bytes)   not inlining too large previous low-level graph (low-level-nodes: 376, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=41)
                              @ 2  java.lang.CharacterDataLatin1.getPropertiesEx(int):int (11 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=8)
                            @ 32  java.lang.ref.Reference.refersTo(Object):boolean (6 bytes)   inline method (bytecode parsing)
                            @ 70  java.util.WeakHashMap.indexFor(int, int):int (6 bytes)   inline method (bytecode parsing)
                              @ 2  java.lang.ref.Reference.refersToImpl(Object):boolean (6 bytes)   relevance-based (relevance=0.752563, probability=0.429407, bonus=1.000000, nodes=12 <= 225.768773)
                              @ 2  java.lang.ref.Reference.refersToImpl(Object):boolean (6 bytes)   not inlining relevance-based (relevance=0.007602, probability=0.004337, bonus=1.000000, nodes=12 > 2.280493)
                              @ 2  java.lang.ref.Reference.refersToImpl(Object):boolean (6 bytes)   relevance-based (relevance=0.752563, probability=283.220946, bonus=1.000000, nodes=12 <= 225.768773)
                            @ 35  java.lang.Character.isUpperCase(char):boolean (5 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.Character.isUpperCase(int):boolean (9 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.CharacterData.of(int):CharacterData (136 bytes)   trivial (relevance=1.225212, probability=1.000000, bonus=1.000000, nodes=8)
                                @ 2  java.lang.CharacterDataLatin1.getPropertiesEx(int):int (11 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=8)
                              @ 5  java.lang.CharacterDataLatin1.isUpperCase(int):boolean (16 bytes)   relevance-based (relevance=1.225212, probability=1.000000, bonus=1.000000, nodes=13 <= 300.000000)
                              @ 55  java.util.Formatter$Conversion.isText(char):boolean (34 bytes)   relevance-based (relevance=1.225212, probability=1.000000, bonus=1.000000, nodes=16 <= 300.000000)
                            @ 58  java.util.Formatter$Flags.contains(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                              @ 89  java.lang.String.toString():String (2 bytes)   trivial (relevance=1.000000, probability=0.980566, bonus=1.000000, nodes=4)
                            @ 34  java.util.Formatter$Flags.contains(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 22  java.util.Formatter$Flags.contains(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                                  @ 31  java.lang.String.length():int (11 bytes)   not inlining relevance-based (relevance=0.001468, probability=0.001437, bonus=1.000000, nodes=10 > 0.440399)
                            @ 2  java.lang.StringBuilder.append(CharSequence):StringBuilder (8 bytes)   inline method (bytecode parsing)
                                    @ 2  java.lang.AbstractStringBuilder.append(CharSequence):AbstractStringBuilder (54 bytes)   not inlining relevance-based (relevance=0.001468, probability=0.001437, bonus=1.000000, nodes=15 > 0.440399)
                                  @ 82  java.lang.StringBuilder.append(CharSequence):Appendable (6 bytes)   trivial (relevance=0.001468, probability=0.001437, bonus=1.000000, nodes=9)
                            @ 2  java.lang.StringBuilder.append(CharSequence):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 2  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                                        @ 2  java.lang.AbstractStringBuilder.append(String):AbstractStringBuilder (45 bytes)   not inlining too large previous low-level graph (low-level-nodes: 368, relevance=1.000000, probability=0.650883, bonus=1.000000, nodes=23)
                                      @ 21  java.lang.StringBuilder.append(String):AbstractStringBuilder (6 bytes)   trivial (relevance=1.000000, probability=0.650883, bonus=1.000000, nodes=9)
                                    @ 2  java.lang.AbstractStringBuilder.append(CharSequence):AbstractStringBuilder (54 bytes)   relevance-based (relevance=1.000000, probability=0.979128, bonus=1.000000, nodes=17 <= 300.000000)
                                  @ 10  java.lang.StringBuilder.append(CharSequence):Appendable (6 bytes)   relevance-based (relevance=1.000000, probability=0.979128, bonus=1.000000, nodes=19 <= 300.000000)
                                @ 53  java.util.Formatter$FormatSpecifier.appendJustified(Appendable, CharSequence):void (89 bytes)   relevance-based (relevance=1.000000, probability=0.980566, bonus=1.000000, nodes=59 <= 300.000000)
                              @ 93  java.util.Formatter$FormatSpecifier.print(Formatter, String, Locale):void (57 bytes)   relevance-based (relevance=1.558798, probability=0.980566, bonus=1.000000, nodes=72 <= 300.000000)
                            @ 34  java.util.Formatter$Flags.contains(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                              @ 80  java.util.Formatter$FormatSpecifier.print(Formatter, String, Locale):void (57 bytes)   not inlining relevance-based (relevance=0.030895, probability=0.019434, bonus=1.000000, nodes=19 > 9.268372)
                              @ 4  java.lang.CharacterDataLatin1.getProperties(int):int (11 bytes)   trivial (relevance=1.872958, probability=1.000000, bonus=1.000000, nodes=8)
                              @ 7  java.lang.Integer.stringSize(int):int (47 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=44 <= 300.000000)
                                    @ 3  java.lang.Math.max(int, int):int (11 bytes)   trivial (relevance=0.133981, probability=0.118151, bonus=1.000000, nodes=7)
                                  @ 29  jdk.internal.util.ArraysSupport.newLength(int, int, int):int (27 bytes)   relevance-based (relevance=0.133981, probability=0.118151, bonus=1.000000, nodes=15 <= 40.194428)
                                @ 24  java.lang.AbstractStringBuilder.newCapacity(int):int (59 bytes)   relevance-based (relevance=0.133981, probability=0.118151, bonus=1.000000, nodes=27 <= 40.194428)
                                  @ 25  java.lang.Math.min(int, int):int (11 bytes)   trivial (relevance=0.133983, probability=0.118151, bonus=1.000000, nodes=7)
                                @ 32  java.util.Arrays.copyOf(byte[], int):byte[] (33 bytes)   relevance-based (relevance=0.133981, probability=0.118151, bonus=1.000000, nodes=28 <= 40.194428)
                              @ 14  java.lang.AbstractStringBuilder.ensureCapacityInternal(int):void (39 bytes)   relevance-based (relevance=1.085439, probability=1.000000, bonus=1.000000, nodes=72 <= 300.000000)
                              @ 18  java.lang.AbstractStringBuilder.isLatin1():boolean (19 bytes)   trivial (relevance=1.085438, probability=0.999999, bonus=1.000000, nodes=9)
                              @ 30  java.lang.Integer.getChars(int, int, byte[]):int (121 bytes)   relevance-based (relevance=1.085438, probability=0.999999, bonus=1.000000, nodes=80 <= 300.000000)
                            @ 4  java.nio.Buffer.session():MemorySessionImpl (20 bytes)   inline method (bytecode parsing)
                            @ 11  java.nio.Buffer.checkIndex(int):int (12 bytes)   inline method (bytecode parsing)
                            @ 14  java.nio.DirectByteBuffer.ix(int):long (10 bytes)   inline method (bytecode parsing)
                            @ 17  jdk.internal.misc.ScopedMemoryAccess.getByte(MemorySessionImpl, Object, long):byte (16 bytes)   inline method (bytecode parsing)
                              @ 4  jdk.internal.misc.ScopedMemoryAccess.getByteInternal(MemorySessionImpl, Object, long):byte (34 bytes)   inline method (bytecode parsing)
                            @ 32  java.lang.ref.Reference.refersTo(Object):boolean (6 bytes)   inline method (bytecode parsing)
                            @ 70  java.util.WeakHashMap.indexFor(int, int):int (6 bytes)   inline method (bytecode parsing)
                              @ 2  java.lang.ref.Reference.refersToImpl(Object):boolean (6 bytes)   relevance-based (relevance=0.752621, probability=283.444107, bonus=1.000000, nodes=12 <= 225.786178)
                              @ 6  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000147, probability=0.999742, bonus=1.000000, nodes=9)
                            @ 49  java.lang.StringConcatHelper.newArray(long):byte[] (40 bytes)   inline method (bytecode parsing)
                            @ 123  java.lang.String.<init>(byte[], byte):void (15 bytes)   inline method (bytecode parsing)
                              @ 18  java.lang.StringLatin1.replace(byte[], char, char):String (198 bytes)   not inlining too large previous low-level graph (low-level-nodes: 345, relevance=1.000147, probability=0.999742, bonus=1.000000, nodes=107)
                            @ 1  java.util.Objects.requireNonNull(Object):Object (14 bytes)   inline method (bytecode parsing)
                            @ 1  java.lang.AbstractStringBuilder.length():int (5 bytes)   inline accessor method (bytecode parsing)
                              @ 10  java.lang.StringBuilder.length():int (5 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                                    @ 3  java.lang.Math.max(int, int):int (11 bytes)   trivial (relevance=0.133981, probability=0.118151, bonus=1.000000, nodes=7)
                                  @ 29  jdk.internal.util.ArraysSupport.newLength(int, int, int):int (27 bytes)   relevance-based (relevance=0.133981, probability=0.118151, bonus=1.000000, nodes=15 <= 40.194428)
                                @ 24  java.lang.AbstractStringBuilder.newCapacity(int):int (59 bytes)   relevance-based (relevance=0.133981, probability=0.118151, bonus=1.000000, nodes=27 <= 40.194428)
                                  @ 25  java.lang.Math.min(int, int):int (11 bytes)   trivial (relevance=0.133983, probability=0.118151, bonus=1.000000, nodes=7)
                                @ 32  java.util.Arrays.copyOf(byte[], int):byte[] (33 bytes)   relevance-based (relevance=0.133981, probability=0.118151, bonus=1.000000, nodes=28 <= 40.194428)
                              @ 21  java.lang.AbstractStringBuilder.ensureCapacityInternal(int):void (39 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=72 <= 300.000000)
                                @ 11  java.lang.AbstractStringBuilder.getCoder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.999999, bonus=1.000000, nodes=5)
                              @ 26  java.lang.AbstractStringBuilder.inflateIfNeededFor(AbstractStringBuilder):void (22 bytes)   relevance-based (relevance=1.133980, probability=0.999999, bonus=1.000000, nodes=12 <= 300.000000)
                              @ 42  java.lang.AbstractStringBuilder.getBytes(byte[], int, byte):void (44 bytes)   relevance-based (relevance=1.133980, probability=0.999999, bonus=1.000000, nodes=27 <= 300.000000)
                            @ 4  java.lang.StringBuilder.<init>():void (7 bytes)   inline method (bytecode parsing)
                            @ 222  java.lang.Long.toHexString(long):String (6 bytes)   inline method (bytecode parsing)
                            @ 232  java.util.Formatter$Flags.contains(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 260  java.util.Formatter$Flags.contains(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 298  java.util.Formatter$Flags.contains(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 322  java.util.Formatter$Flags.contains(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 342  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                              @ 3  java.lang.AbstractStringBuilder.<init>(int):void (39 bytes)   relevance-based (relevance=1.375763, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                              @ 218  java.util.Formatter$FormatSpecifier.checkBadFlags(int):void (24 bytes)   trivial (relevance=0.375763, probability=0.273131, bonus=1.000000, nodes=8)
                            @ 16  java.lang.Math.max(int, int):int (11 bytes)   inline method (bytecode parsing)
                            @ 50  java.lang.String.<init>(byte[], byte):void (15 bytes)   inline method (bytecode parsing)
                                @ 40  java.lang.Long.formatUnsignedLong0(long, int, byte[], int, int):void (47 bytes)   relevance-based (relevance=0.375763, probability=0.273131, bonus=1.000000, nodes=32 <= 112.728975)
                              @ 2  java.lang.Long.toUnsignedString0(long, int):String (83 bytes)   relevance-based (relevance=0.375763, probability=0.273131, bonus=1.000000, nodes=47 <= 112.728975)
                                @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=0.375763, probability=0.273131, bonus=1.000000, nodes=5)
                              @ 250  java.lang.String.length():int (11 bytes)   trivial (relevance=0.375763, probability=0.273131, bonus=1.000000, nodes=8)
                            @ 10  java.lang.StringBuilder.append(char):StringBuilder (8 bytes)   inline method (bytecode parsing)
                              @ 314  java.util.Formatter$FormatSpecifier.trailingZeros(StringBuilder, int):void (21 bytes)   not inlining relevance-based (relevance=0.007872, probability=0.005722, bonus=1.000000, nodes=23 > 2.361461)
                            @ 28  java.lang.String.<init>(byte[], byte):void (15 bytes)   inline method (bytecode parsing)
                                  @ 1  java.lang.Long.stringSize(long):int (55 bytes)   relevance-based (relevance=1.000000, probability=0.726869, bonus=1.000000, nodes=45 <= 300.000000)
                                  @ 18  java.lang.Long.getChars(long, int, byte[]):int (195 bytes)   relevance-based (relevance=1.071382, probability=0.726869, bonus=1.000000, nodes=109 <= 300.000000)
                                @ 21  java.lang.Long.toString(long):String (55 bytes)   relevance-based (relevance=1.000000, probability=0.726869, bonus=1.000000, nodes=157 <= 300.000000)
                              @ 34  java.lang.Long.toString(long, int):String (139 bytes)   relevance-based (relevance=1.000000, probability=0.726869, bonus=1.000000, nodes=159 <= 300.000000)
                            @ 10  java.util.Formatter$Flags.contains(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 32  java.util.Formatter$Flags.contains(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 55  java.util.Formatter$Flags.contains(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 74  java.lang.StringBuilder.append(char):StringBuilder (8 bytes)   inline method (bytecode parsing)
                                @ 2  java.lang.AbstractStringBuilder.append(char):AbstractStringBuilder (77 bytes)   not inlining relevance-based (relevance=0.001759, probability=0.001276, bonus=1.000000, nodes=48 > 0.527604)
                              @ 44  java.util.Formatter$FormatSpecifier.leadingSign(StringBuilder, boolean):StringBuilder (80 bytes)   relevance-based (relevance=1.071382, probability=0.726869, bonus=1.000000, nodes=30 <= 300.000000)
                              @ 79  java.util.Formatter$FormatSpecifier.adjustWidth(int, int, boolean):int (29 bytes)   trivial (relevance=1.071382, probability=0.726869, bonus=1.000000, nodes=9)
                            @ 13  java.lang.StringBuilder.length():int (5 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.AbstractStringBuilder.length():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 101  java.util.Formatter$Flags.contains(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 261  java.lang.StringBuilder.append(char):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 291  java.lang.StringBuilder.append(char):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 337  java.lang.StringBuilder.length():int (5 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.AbstractStringBuilder.length():int (5 bytes)   inline accessor method (bytecode parsing)
                              @ 84  java.util.Formatter$FormatSpecifier.localizedMagnitude(Formatter, StringBuilder, CharSequence, int, int, int, Locale):StringBuilder (381 bytes)   not inlining too large previous low-level graph (low-level-nodes: 1021, relevance=1.071382, probability=0.726869, bonus=1.000000, nodes=95)
                            @ 11  java.util.Formatter$Flags.contains(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                              @ 93  java.util.Formatter$FormatSpecifier.trailingSign(StringBuilder, boolean):StringBuilder (26 bytes)   relevance-based (relevance=1.071382, probability=0.726869, bonus=1.000000, nodes=19 <= 300.000000)
                              @ 2  java.lang.AbstractStringBuilder.append(String):AbstractStringBuilder (45 bytes)   not inlining too large previous low-level graph (low-level-nodes: 368, relevance=0.402586, probability=0.273131, bonus=1.000000, nodes=21)
                            @ 22  java.util.Formatter$Flags.contains(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 1  java.lang.AbstractStringBuilder.length():int (5 bytes)   inline accessor method (bytecode parsing)
                                @ 31  java.lang.StringBuilder.length():int (5 bytes)   trivial (relevance=0.001468, probability=0.001466, bonus=1.000000, nodes=5)
                            @ 2  java.lang.StringBuilder.append(CharSequence):StringBuilder (8 bytes)   inline method (bytecode parsing)
                                    @ 37  java.lang.AbstractStringBuilder.append(AbstractStringBuilder):AbstractStringBuilder (70 bytes)   not inlining relevance-based (relevance=0.001468, probability=0.001466, bonus=1.000000, nodes=31 > 0.440399)
                                  @ 2  java.lang.AbstractStringBuilder.append(CharSequence):AbstractStringBuilder (54 bytes)   trivial (relevance=0.001468, probability=0.001466, bonus=1.000000, nodes=8)
                                @ 82  java.lang.StringBuilder.append(CharSequence):Appendable (6 bytes)   not inlining relevance-based (relevance=0.001468, probability=0.001466, bonus=1.000000, nodes=10 > 0.440399)
                            @ 2  java.lang.StringBuilder.append(CharSequence):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 1  java.lang.AbstractStringBuilder.length():int (5 bytes)   inline accessor method (bytecode parsing)
                                      @ 10  java.lang.StringBuilder.length():int (5 bytes)   trivial (relevance=1.000000, probability=0.998534, bonus=1.000000, nodes=5)
                                            @ 3  java.lang.Math.max(int, int):int (11 bytes)   trivial (relevance=0.133981, probability=0.117978, bonus=1.000000, nodes=7)
                                          @ 29  jdk.internal.util.ArraysSupport.newLength(int, int, int):int (27 bytes)   relevance-based (relevance=0.133981, probability=0.117978, bonus=1.000000, nodes=15 <= 40.194428)
                                        @ 24  java.lang.AbstractStringBuilder.newCapacity(int):int (59 bytes)   relevance-based (relevance=0.133981, probability=0.117978, bonus=1.000000, nodes=27 <= 40.194428)
                                          @ 25  java.lang.Math.min(int, int):int (11 bytes)   trivial (relevance=0.133983, probability=0.117977, bonus=1.000000, nodes=7)
                                        @ 32  java.util.Arrays.copyOf(byte[], int):byte[] (33 bytes)   relevance-based (relevance=0.133981, probability=0.117978, bonus=1.000000, nodes=28 <= 40.194428)
                                      @ 21  java.lang.AbstractStringBuilder.ensureCapacityInternal(int):void (39 bytes)   relevance-based (relevance=1.000000, probability=0.998534, bonus=1.000000, nodes=72 <= 300.000000)
                                        @ 11  java.lang.AbstractStringBuilder.getCoder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.998533, bonus=1.000000, nodes=5)
                                      @ 26  java.lang.AbstractStringBuilder.inflateIfNeededFor(AbstractStringBuilder):void (22 bytes)   trivial (relevance=1.133980, probability=0.998533, bonus=1.000000, nodes=9)
                                      @ 42  java.lang.AbstractStringBuilder.getBytes(byte[], int, byte):void (44 bytes)   relevance-based (relevance=1.133980, probability=0.998533, bonus=1.000000, nodes=27 <= 300.000000)
                                    @ 37  java.lang.AbstractStringBuilder.append(AbstractStringBuilder):AbstractStringBuilder (70 bytes)   relevance-based (relevance=1.000000, probability=0.998534, bonus=1.000000, nodes=112 <= 300.000000)
                                  @ 2  java.lang.AbstractStringBuilder.append(CharSequence):AbstractStringBuilder (54 bytes)   relevance-based (relevance=1.000000, probability=0.998534, bonus=1.000000, nodes=113 <= 300.000000)
                                @ 10  java.lang.StringBuilder.append(CharSequence):Appendable (6 bytes)   relevance-based (relevance=1.000000, probability=0.998534, bonus=1.000000, nodes=115 <= 300.000000)
                              @ 353  java.util.Formatter$FormatSpecifier.appendJustified(Appendable, CharSequence):void (89 bytes)   relevance-based (relevance=1.473968, probability=1.000000, bonus=1.000000, nodes=143 <= 300.000000)
                              @ 2  java.nio.Buffer.position(int):Buffer (52 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=16 <= 300.000000)
                            @ 28  java.lang.String.<init>(byte[], byte):void (15 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.Integer.stringSize(int):int (47 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=44 <= 300.000000)
                              @ 18  java.lang.Integer.getChars(int, int, byte[]):int (121 bytes)   relevance-based (relevance=1.085439, probability=1.000000, bonus=1.000000, nodes=80 <= 300.000000)
                            @ 10  java.util.Formatter$Flags.contains(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 32  java.util.Formatter$Flags.contains(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 55  java.util.Formatter$Flags.contains(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 74  java.lang.StringBuilder.append(char):StringBuilder (8 bytes)   inline method (bytecode parsing)
                              @ 2  java.lang.AbstractStringBuilder.append(char):AbstractStringBuilder (77 bytes)   not inlining relevance-based (relevance=0.001868, probability=0.001865, bonus=1.000000, nodes=48 > 0.560470)
                            @ 28  java.lang.String.<init>(byte[], byte):void (15 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.Long.stringSize(long):int (55 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=45 <= 300.000000)
                              @ 18  java.lang.Long.getChars(long, int, byte[]):int (195 bytes)   relevance-based (relevance=1.071382, probability=1.000000, bonus=1.000000, nodes=109 <= 300.000000)
                            @ 4  java.lang.StringBuilder.<init>():void (7 bytes)   inline method (bytecode parsing)
                            @ 222  java.lang.Long.toHexString(long):String (6 bytes)   inline method (bytecode parsing)
                            @ 232  java.util.Formatter$Flags.contains(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 260  java.util.Formatter$Flags.contains(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 298  java.util.Formatter$Flags.contains(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 322  java.util.Formatter$Flags.contains(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 342  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                              @ 101  java.util.Formatter$FormatSpecifier.print(Formatter, long, Locale):void (357 bytes)   not inlining too large previous low-level graph (low-level-nodes: 1560, relevance=0.049216, probability=0.046907, bonus=1.000000, nodes=96)
                            @ 4  java.lang.StringBuilder.<init>():void (7 bytes)   inline method (bytecode parsing)
                            @ 222  java.lang.Long.toHexString(long):String (6 bytes)   inline method (bytecode parsing)
                            @ 232  java.util.Formatter$Flags.contains(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 260  java.util.Formatter$Flags.contains(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 298  java.util.Formatter$Flags.contains(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 322  java.util.Formatter$Flags.contains(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 342  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                                @ 62  java.util.Formatter$FormatSpecifier.print(Formatter, long, Locale):void (357 bytes)   not inlining too large previous low-level graph (low-level-nodes: 1560, relevance=1.127440, probability=0.953093, bonus=1.000000, nodes=96)
                              @ 78  java.util.Formatter$FormatSpecifier.print(Formatter, int, Locale):void (66 bytes)   relevance-based (relevance=1.000000, probability=0.953093, bonus=1.000000, nodes=33 <= 300.000000)
                            @ 15  java.lang.String.value():byte[] (5 bytes)   inline accessor method (bytecode parsing)
                              @ 1  java.lang.AbstractStringBuilder.isLatin1():boolean (19 bytes)   trivial (relevance=1.000010, probability=1.000000, bonus=1.000000, nodes=9)
                              @ 8  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000010, probability=1.000000, bonus=1.000000, nodes=9)
                                @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                              @ 10  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=8)
                              @ 18  jdk.internal.util.Preconditions.checkFromToIndex(int, int, int, BiFunction):int (24 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=14 <= 300.000000)
                                    @ 3  java.lang.Math.max(int, int):int (11 bytes)   trivial (relevance=0.133981, probability=0.118151, bonus=1.000000, nodes=7)
                                  @ 29  jdk.internal.util.ArraysSupport.newLength(int, int, int):int (27 bytes)   relevance-based (relevance=0.133981, probability=0.118151, bonus=1.000000, nodes=15 <= 40.194428)
                                @ 24  java.lang.AbstractStringBuilder.newCapacity(int):int (59 bytes)   relevance-based (relevance=0.133981, probability=0.118151, bonus=1.000000, nodes=27 <= 40.194428)
                                  @ 25  java.lang.Math.min(int, int):int (11 bytes)   trivial (relevance=0.133983, probability=0.118151, bonus=1.000000, nodes=7)
                                @ 32  java.util.Arrays.copyOf(byte[], int):byte[] (33 bytes)   relevance-based (relevance=0.133981, probability=0.118151, bonus=1.000000, nodes=28 <= 40.194428)
                              @ 35  java.lang.AbstractStringBuilder.ensureCapacityInternal(int):void (39 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=72 <= 300.000000)
                            @ 15  java.lang.String.value():byte[] (5 bytes)   inline accessor method (bytecode parsing)
                                @ 1  java.lang.AbstractStringBuilder.isLatin1():boolean (19 bytes)   trivial (relevance=1.000010, probability=0.999999, bonus=1.000000, nodes=9)
                                @ 8  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000010, probability=0.999999, bonus=1.000000, nodes=9)
                              @ 52  java.lang.AbstractStringBuilder.appendChars(String, int, int):void (207 bytes)   relevance-based (relevance=1.133980, probability=0.999999, bonus=1.000000, nodes=38 <= 300.000000)
                            @ 2  java.nio.MappedByteBuffer.position(int):MappedByteBuffer (8 bytes)   inline method (bytecode parsing)
                              @ 2  java.nio.ByteBuffer.position(int):ByteBuffer (8 bytes)   inline method (bytecode parsing)
                              @ 2  java.nio.Buffer.position(int):Buffer (52 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=16 <= 300.000000)
                                @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                              @ 2  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=8)
                              @ 13  java.util.ArrayDeque.sub(int, int, int):int (14 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=18 <= 300.000000)
                                @ 1  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.006372, probability=1.000000, bonus=1.000000, nodes=5)
                              @ 21  java.lang.String.getBytes(byte[], int, byte):void (44 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=51 <= 300.000000)
                            @ 4  java.lang.StringBuilder.append(CharSequence, int, int):StringBuilder (10 bytes)   inline method (bytecode parsing)
                              @ 4  java.lang.AbstractStringBuilder.append(CharSequence, int, int):AbstractStringBuilder (67 bytes)   not inlining too large previous low-level graph (low-level-nodes: 390, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=30)
                            @ 4  java.lang.StringBuilder.append(CharSequence, int, int):StringBuilder (10 bytes)   inline method (bytecode parsing)
                                @ 4  java.lang.AbstractStringBuilder.append(CharSequence, int, int):AbstractStringBuilder (67 bytes)   not inlining too large previous low-level graph (low-level-nodes: 390, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=26)
                              @ 16  java.lang.StringBuilder.append(CharSequence, int, int):Appendable (8 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                            @ 4  java.lang.StringBuilder.<init>():void (7 bytes)   inline method (bytecode parsing)
                            @ 222  java.lang.Long.toHexString(long):String (6 bytes)   inline method (bytecode parsing)
                            @ 232  java.util.Formatter$Flags.contains(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 260  java.util.Formatter$Flags.contains(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 298  java.util.Formatter$Flags.contains(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 322  java.util.Formatter$Flags.contains(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 342  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                              @ 62  java.util.Formatter$FormatSpecifier.print(Formatter, long, Locale):void (357 bytes)   not inlining too large previous low-level graph (low-level-nodes: 1560, relevance=1.127440, probability=1.000000, bonus=1.000000, nodes=96)
                            @ 32  java.util.BitSet.wordIndex(int):int (5 bytes)   inline method (bytecode parsing)
                                  @ 17  java.lang.Math.max(int, int):int (11 bytes)   trivial (relevance=0.045304, probability=0.029505, bonus=1.000000, nodes=7)
                                  @ 27  java.util.Arrays.copyOf(long[], int):long[] (33 bytes)   not inlining relevance-based (relevance=0.045304, probability=0.029505, bonus=1.000000, nodes=22 > 13.591298)
                                @ 14  java.util.BitSet.ensureCapacity(int):void (39 bytes)   relevance-based (relevance=0.123572, probability=0.109981, bonus=1.000000, nodes=28 <= 37.071534)
                              @ 38  java.util.BitSet.expandTo(int):void (23 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=41 <= 300.000000)
                              @ 54  java.util.BitSet.checkInvariants():void (111 bytes)   trivial (relevance=1.123572, probability=1.000000, bonus=1.000000, nodes=4)
                            @ 19  java.util.Objects.checkFromIndexSize(int, int, int):int (8 bytes)   inline method (bytecode parsing)
                            @ 24  java.nio.Buffer.position():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 31  java.nio.Buffer.limit():int (5 bytes)   inline accessor method (bytecode parsing)
                              @ 1  java.nio.DirectByteBuffer.isReadOnly():boolean (2 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=4)
                              @ 4  jdk.internal.util.Preconditions.checkFromIndexSize(int, int, int, BiFunction):int (25 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=15 <= 300.000000)
                            @ 45  java.nio.Buffer.session():MemorySessionImpl (20 bytes)   inline method (bytecode parsing)
                            @ 59  jdk.internal.misc.ScopedMemoryAccess.copyMemory(MemorySessionImpl, MemorySessionImpl, Object, long, Object, long, long):void (27 bytes)   inline method (bytecode parsing)
                              @ 12  jdk.internal.misc.ScopedMemoryAccess.copyMemoryInternal(MemorySessionImpl, MemorySessionImpl, Object, long, Object, long, long):void (56 bytes)   inline method (bytecode parsing)
                                @ 52  java.nio.DirectByteBuffer.base():Object (2 bytes)   trivial (relevance=1.000000, probability=0.626408, bonus=1.000000, nodes=4)
                                    @ 3  jdk.internal.misc.Unsafe.checkSize(long):void (32 bytes)   trivial (relevance=1.000000, probability=0.626408, bonus=1.000000, nodes=8)
                                        @ 15  jdk.internal.misc.Unsafe.checkOffset(Object, long):void (32 bytes)   trivial (relevance=0.778875, probability=0.274271, bonus=1.000000, nodes=8)
                                        @ 6  jdk.internal.misc.Unsafe.checkNativeAddress(long):void (28 bytes)   trivial (relevance=1.000000, probability=0.352137, bonus=1.000000, nodes=5)
                                      @ 3  jdk.internal.misc.Unsafe.checkPointer(Object, long):void (19 bytes)   relevance-based (relevance=1.781087, probability=0.626408, bonus=1.000000, nodes=17 <= 300.000000)
                                        @ 1  java.lang.Class.getComponentType():Class (14 bytes)   trivial (relevance=0.780117, probability=0.274708, bonus=1.000000, nodes=5)
                                      @ 15  jdk.internal.misc.Unsafe.checkPrimitiveArray(Class):void (22 bytes)   trivial (relevance=0.780117, probability=0.274708, bonus=1.000000, nodes=5)
                                    @ 9  jdk.internal.misc.Unsafe.checkPrimitivePointer(Object, long):void (19 bytes)   relevance-based (relevance=1.000000, probability=0.626408, bonus=1.000000, nodes=26 <= 300.000000)
                                        @ 6  jdk.internal.misc.Unsafe.checkNativeAddress(long):void (28 bytes)   trivial (relevance=1.000000, probability=0.626408, bonus=1.000000, nodes=5)
                                      @ 3  jdk.internal.misc.Unsafe.checkPointer(Object, long):void (19 bytes)   trivial (relevance=1.000000, probability=0.626408, bonus=1.000000, nodes=6)
                                    @ 17  jdk.internal.misc.Unsafe.checkPrimitivePointer(Object, long):void (19 bytes)   trivial (relevance=1.778875, probability=0.626408, bonus=1.000000, nodes=6)
                                  @ 9  jdk.internal.misc.Unsafe.copyMemoryChecks(Object, long, Object, long, long):void (21 bytes)   relevance-based (relevance=1.147383, probability=0.626408, bonus=1.000000, nodes=32 <= 300.000000)
                                @ 28  jdk.internal.misc.Unsafe.copyMemory(Object, long, Object, long, long):void (33 bytes)   relevance-based (relevance=1.000000, probability=0.626408, bonus=1.000000, nodes=40 <= 300.000000)
                            @ 4  java.nio.Buffer.session():MemorySessionImpl (20 bytes)   inline method (bytecode parsing)
                            @ 11  java.nio.Buffer.checkIndex(int):int (12 bytes)   inline method (bytecode parsing)
                            @ 14  java.nio.DirectByteBuffer.ix(int):long (10 bytes)   inline method (bytecode parsing)
                            @ 18  jdk.internal.misc.ScopedMemoryAccess.putByte(MemorySessionImpl, Object, long, byte):void (21 bytes)   inline method (bytecode parsing)
                              @ 6  jdk.internal.misc.ScopedMemoryAccess.putByteInternal(MemorySessionImpl, Object, long, byte):void (35 bytes)   inline method (bytecode parsing)
                                @ 107  java.nio.DirectByteBuffer.put(int, byte):ByteBuffer (37 bytes)   relevance-based (relevance=1.000000, probability=1.453054, bonus=1.000000, nodes=29 <= 300.000000)
                              @ 54  java.nio.ByteBuffer.putArray(int, byte[], int, int):ByteBuffer (122 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=106 <= 300.000000)
                            @ 2  java.nio.MappedByteBuffer.position(int):MappedByteBuffer (8 bytes)   inline method (bytecode parsing)
                              @ 2  java.nio.ByteBuffer.position(int):ByteBuffer (8 bytes)   inline method (bytecode parsing)
                                @ 2  java.nio.Buffer.position(int):Buffer (52 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=16 <= 300.000000)
                              @ 63  java.nio.MappedByteBuffer.position(int):ByteBuffer (6 bytes)   relevance-based (relevance=2.839804, probability=1.000000, bonus=1.000000, nodes=19 <= 300.000000)
                            @ 15  java.lang.StringCoding.hasNegatives(byte[], int, int):boolean (16 bytes)   inline method (bytecode parsing)
                            @ 183  java.lang.Character.toCodePoint(char, char):int (10 bytes)   inline method (bytecode parsing)
                                @ 7  java.lang.String.encodeUTF8_UTF16(byte[], boolean):byte[] (372 bytes)   not inlining relevance-based (relevance=0.000012, probability=0.000012, bonus=1.000000, nodes=198 > 0.003541)
                              @ 10  java.lang.String.encodeUTF8(byte, byte[], boolean):byte[] (142 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=25 <= 300.000000)
                            @ 15  java.lang.StringCoding.hasNegatives(byte[], int, int):boolean (16 bytes)   inline method (bytecode parsing)
                            @ 183  java.lang.Character.toCodePoint(char, char):int (10 bytes)   inline method (bytecode parsing)
                              @ 7  java.lang.String.encodeUTF8_UTF16(byte[], boolean):byte[] (372 bytes)   not inlining relevance-based (relevance=0.000012, probability=0.000012, bonus=1.000000, nodes=207 > 0.003530)
                              @ 4  java.util.ArrayList$Itr.hasNext():boolean (20 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=31 <= 300.000000)
                            @ 28  java.lang.String.<init>(byte[], byte):void (15 bytes)   inline method (bytecode parsing)
                              @ 4  java.lang.Integer.toString(int):String (55 bytes)   not inlining too large previous low-level graph (low-level-nodes: 370, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=19)
                            @ 4  java.nio.Buffer.session():MemorySessionImpl (20 bytes)   inline method (bytecode parsing)
                            @ 11  java.nio.Buffer.checkIndex(int):int (12 bytes)   inline method (bytecode parsing)
                            @ 14  java.nio.DirectByteBuffer.ix(int):long (10 bytes)   inline method (bytecode parsing)
                            @ 18  jdk.internal.misc.ScopedMemoryAccess.putByte(MemorySessionImpl, Object, long, byte):void (21 bytes)   inline method (bytecode parsing)
                              @ 6  jdk.internal.misc.ScopedMemoryAccess.putByteInternal(MemorySessionImpl, Object, long, byte):void (35 bytes)   inline method (bytecode parsing)
                            @ 36  java.lang.Long.<init>(long):void (10 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.Number.<init>():void (5 bytes)   inline method (bytecode parsing)
                            @ 28  java.lang.String.<init>(byte[], byte):void (15 bytes)   inline method (bytecode parsing)
                              @ 21  java.lang.Long.toString(long):String (55 bytes)   not inlining too large previous low-level graph (low-level-nodes: 544, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=19)
                            @ 8  deltablue.Variable.setWalkStrength(Strength):void (6 bytes)   inline method (bytecode parsing)
                            @ 27  deltablue.Variable.setStay(boolean):void (6 bytes)   inline method (bytecode parsing)
                            @ 34  deltablue.Variable.getStay():boolean (5 bytes)   inline accessor method (bytecode parsing)
                              @ 16  deltablue.AbstractConstraint.isInput():boolean (2 bytes)   trivial (relevance=1.000049, probability=1.000000, bonus=1.000000, nodes=8)
                              @ 41  deltablue.StayConstraint.execute():void (1 bytes)   trivial (relevance=1.000000, probability=0.999951, bonus=1.000000, nodes=3)
                              @ 25  java.util.ArrayDeque.dec(int, int):int (13 bytes)   relevance-based (relevance=1.002503, probability=1.000000, bonus=1.000000, nodes=18 <= 300.000000)
                            @ 55  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                              @ 47  java.util.ArrayDeque.grow(int):void (165 bytes)   not inlining relevance-based (relevance=0.003670, probability=0.002496, bonus=1.000000, nodes=75 > 1.100968)
                            @ 9  java.nio.HeapByteBuffer.ix(int):int (7 bytes)   inline method (bytecode parsing)
                              @ 6  java.nio.Buffer.nextPutIndex():int (30 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=12 <= 300.000000)
                                @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                              @ 36  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=8)
                                @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=9)
                            @ 3  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                                @ 12  java.lang.StringLatin1.charAt(byte[], int):char (15 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                              @ 50  java.lang.String.charAt(int):char (25 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=16 <= 300.000000)
                            @ 1  java.util.AbstractList.<init>():void (10 bytes)   inline method (bytecode parsing)
                              @ 1  java.util.AbstractCollection.<init>():void (5 bytes)   inline method (bytecode parsing)
                            @ 34  java.lang.ref.Reference.refersTo(Object):boolean (6 bytes)   inline method (bytecode parsing)
                              @ 2  java.lang.ref.Reference.refersToImpl(Object):boolean (6 bytes)   relevance-based (relevance=1.000000, probability=0.999971, bonus=1.000000, nodes=12 <= 300.000000)
                            @ 2  java.lang.ref.WeakReference.<init>(Object):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  java.lang.ref.Reference.<init>(Object):void (7 bytes)   inline method (bytecode parsing)
                              @ 91  java.lang.ThreadLocal$ThreadLocalMap$Entry.<init>(ThreadLocal, Object):void (11 bytes)   not inlining relevance-based (relevance=0.000029, probability=0.000029, bonus=1.000000, nodes=14 > 0.008797)
                            @ 34  java.lang.ref.Reference.refersTo(Object):boolean (6 bytes)   inline method (bytecode parsing)
                              @ 2  java.lang.ref.Reference.refersToImpl(Object):boolean (6 bytes)   inline method (bytecode parsing)
                              @ 113  java.lang.ThreadLocal$ThreadLocalMap.cleanSomeSlots(int, int):boolean (61 bytes)   not inlining relevance-based (relevance=0.000029, probability=0.000029, bonus=1.000000, nodes=55 > 0.008797)
                            @ 18  jdk.graal.compiler.replacements.AllocationSnippets.allocateInstanceImpl(Word, UnsignedWord, boolean, AllocationSnippets$FillContent, boolean, boolean, AllocationSnippets$AllocationProfilingData):Object (143 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getTLABInfo():Word (5 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getThread():Word (8 bytes)   inline method (bytecode parsing)
                                  @ 4  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.registerAsWord(Register):Word (7 bytes)   inline method (bytecode parsing)
                              @ 9  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.readTlabTop(Word):Word (5 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.readTlabTop(Word):Word (17 bytes)   inline method (bytecode parsing)
                              @ 17  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.readTlabEnd(Word):Word (5 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.readTlabEnd(Word):Word (17 bytes)   inline method (bytecode parsing)
                              @ 35  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.useTLAB():boolean (7 bytes)   inline method (bytecode parsing)
                              @ 47  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.shouldAllocateInTLAB(UnsignedWord, boolean):boolean (33 bytes)   inline method (bytecode parsing)
                              @ 77  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.writeTlabTop(Word, Word):void (6 bytes)   inline method (bytecode parsing)
                                @ 2  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.writeTlabTop(Word, Word):void (15 bytes)   inline method (bytecode parsing)
                              @ 84  jdk.graal.compiler.replacements.AllocationSnippets.emitPrefetchAllocate(Word, boolean):void (61 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getPrefetchStyle():int (7 bytes)   inline method (bytecode parsing)
                                @ 9  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getPrefetchLines(boolean):int (18 bytes)   inline method (bytecode parsing)
                                @ 14  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getPrefetchStepSize():int (7 bytes)   inline method (bytecode parsing)
                                @ 20  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getPrefetchDistance():int (7 bytes)   inline method (bytecode parsing)
                              @ 103  jdk.graal.compiler.replacements.AllocationSnippets.formatObject(Word, UnsignedWord, Word, AllocationSnippets$FillContent, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):Object (41 bytes)   inline method (bytecode parsing)
                                @ 4  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.initializeObjectHeader(Word, Word, boolean):void (29 bytes)   inline method (bytecode parsing)
                                  @ 25  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.initializeObjectHeader(Word, Word, KlassPointer):void (20 bytes)   inline method (bytecode parsing)
                                @ 8  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.instanceHeaderSize():int (7 bytes)   inline method (bytecode parsing)
                                @ 27  jdk.graal.compiler.replacements.AllocationSnippets.fillContents(Word, AllocationSnippets$FillContent, int, UnsignedWord, boolean, boolean, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):void (58 bytes)   inline method (bytecode parsing)
                                  @ 22  jdk.graal.compiler.replacements.AllocationSnippets.zeroMemory(Word, int, UnsignedWord, boolean, boolean, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):void (19 bytes)   inline method (bytecode parsing)
                                    @ 15  jdk.graal.compiler.replacements.AllocationSnippets.fillMemory(long, Word, int, UnsignedWord, boolean, boolean, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):void (194 bytes)   inline method (bytecode parsing)
                                      @ 17  jdk.graal.compiler.replacements.ReplacementsUtil.dynamicAssert(boolean, String):void (12 bytes)   inline method (bytecode parsing)
                                      @ 56  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                                      @ 89  jdk.graal.compiler.replacements.ReplacementsUtil.dynamicAssert(boolean, String):void (12 bytes)   inline method (bytecode parsing)
                                      @ 153  jdk.graal.compiler.replacements.ReplacementsUtil.staticAssert(boolean, String):void (12 bytes)   inline method (bytecode parsing)
                                      @ 167  jdk.graal.compiler.replacements.AllocationSnippets.fillMemoryAlignedUnrollable(long, Word, UnsignedWord, UnsignedWord, boolean, AllocationSnippets$AllocationSnippetCounters):void (68 bytes)   inline method (bytecode parsing)
                                        @ 5  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                          @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                                        @ 44  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                                      @ 190  jdk.graal.compiler.replacements.AllocationSnippets.fillMemoryAligned(long, Word, UnsignedWord, UnsignedWord, boolean, UnsignedWord, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):void (155 bytes)   inline method (bytecode parsing)
                                        @ 91  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                          @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                                        @ 105  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                          @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                                        @ 134  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                                @ 33  jdk.graal.compiler.replacements.AllocationSnippets.emitMemoryBarrierIf(boolean):void (14 bytes)   inline method (bytecode parsing)
                                  @ 7  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                              @ 119  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                              @ 124  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.callNewInstanceStub(Word):Object (33 bytes)   inline method (bytecode parsing)
                                @ 21  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.nonNullOrDeopt(Object):Object (27 bytes)   inline method (bytecode parsing)
                              @ 133  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.profileAllocation(AllocationSnippets$AllocationProfilingData, UnsignedWord):void (51 bytes)   inline method (bytecode parsing)
                              @ 139  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.verifyOop(Object):Object (5 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.verifyOop(Object):Object (19 bytes)   inline method (bytecode parsing)
                                @ 1  java.util.HashMap$HashIterator.nextNode():HashMap$Node (100 bytes)   not inlining too large previous low-level graph (low-level-nodes: 450, relevance=0.000038, probability=0.000036, bonus=1.000000, nodes=53)
                                @ 1  java.util.ArrayList$Itr.checkForComodification():void (23 bytes)   trivial (relevance=1.000000, probability=0.946054, bonus=1.000000, nodes=9)
                              @ 4  java.util.ArrayList$Itr.next():Object (66 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=47 <= 300.000000)
                                @ 13  java.util.ArrayDeque.sub(int, int, int):int (14 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=18 <= 300.000000)
                              @ 14  java.util.ArrayDeque.size():int (17 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=21 <= 300.000000)
                            @ 20  java.lang.ClassValue$Entry.value():Object (9 bytes)   inline method (bytecode parsing)
                            @ 14  java.lang.ClassValue$ClassValueMap.getCache():ClassValue$Entry[] (5 bytes)   inline accessor method (bytecode parsing)
                              @ 1  java.lang.ClassValue.getCacheCarefully(Class):ClassValue$Entry[] (20 bytes)   relevance-based (relevance=1.001560, probability=1.000000, bonus=1.000000, nodes=14 <= 300.000000)
                            @ 6  java.lang.ClassValue$ClassValueMap.loadFromCache(ClassValue$Entry[], int):ClassValue$Entry (9 bytes)   inline method (bytecode parsing)
                            @ 9  java.lang.ClassValue.castEntry(ClassValue$Entry):ClassValue$Entry (2 bytes)   inline method (bytecode parsing)
                              @ 7  java.lang.ClassValue$ClassValueMap.probeHomeLocation(ClassValue$Entry[], ClassValue):ClassValue$Entry (13 bytes)   relevance-based (relevance=1.001495, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                            @ 5  java.lang.ref.Reference.get():Object (5 bytes)   inline accessor method (bytecode parsing)
                              @ 13  java.lang.ClassValue.match(ClassValue$Entry):boolean (21 bytes)   relevance-based (relevance=1.001495, probability=1.000000, bonus=1.000000, nodes=25 <= 300.000000)
                              @ 1  java.lang.ClassValue$Entry.assertNotPromise():void (22 bytes)   trivial (relevance=0.999930, probability=0.998438, bonus=1.000000, nodes=4)
                            @ 11  java.lang.ClassValue$Entry.value():Object (9 bytes)   inline method (bytecode parsing)
                              @ 27  java.lang.ClassValue.getFromBackup(ClassValue$Entry[], Class):Object (21 bytes)   not inlining relevance-based (relevance=0.001564, probability=0.001562, bonus=1.000000, nodes=24 > 0.469253)
                                @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                              @ 36  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=8)
                                @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                              @ 2  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=8)
                              @ 9  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                              @ 23  java.lang.StringConcatHelper.checkOverflow(long):long (17 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=8)
                              @ 1  java.util.RegularEnumSet$EnumSetIterator.next():Enum (60 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=20 <= 300.000000)
                                  @ 13  java.util.ArrayDeque.sub(int, int, int):int (14 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=18 <= 300.000000)
                                @ 14  java.util.ArrayDeque.size():int (17 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=21 <= 300.000000)
                              @ 5  java.util.ArrayDeque$DeqIterator.<init>(ArrayDeque):void (34 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=38 <= 300.000000)
                              @ 7  java.lang.AbstractStringBuilder.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=9)
                              @ 40  java.lang.StringLatin1.canEncode(int):boolean (13 bytes)   trivial (relevance=1.000000, probability=3.363674, bonus=1.000000, nodes=9)
                            @ 18  java.lang.StringLatin1.toBytes(char):byte[] (9 bytes)   inline method (bytecode parsing)
                            @ 22  java.lang.String.<init>(byte[], byte):void (15 bytes)   inline method (bytecode parsing)
                            @ 35  java.lang.String.<init>(byte[], byte):void (15 bytes)   inline method (bytecode parsing)
                              @ 7  java.lang.StringLatin1.canEncode(int):boolean (13 bytes)   trivial (relevance=1.012473, probability=1.000000, bonus=1.000000, nodes=9)
                              @ 31  java.lang.StringUTF16.toBytes(char):byte[] (12 bytes)   not inlining relevance-based (relevance=0.012473, probability=0.012319, bonus=1.000000, nodes=10 > 3.741849)
                                  @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                                @ 2  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=8)
                                  @ 1  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.006372, probability=1.000000, bonus=1.000000, nodes=5)
                                @ 21  java.lang.String.getBytes(byte[], int, byte):void (44 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=51 <= 300.000000)
                              @ 3  java.lang.StringConcatHelper.prepend(long, byte[], String):long (37 bytes)   relevance-based (relevance=1.695474, probability=1.000000, bonus=1.000000, nodes=67 <= 300.000000)
                                  @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=0.412804, probability=0.410191, bonus=1.000000, nodes=5)
                                @ 2  java.lang.String.length():int (11 bytes)   trivial (relevance=0.412804, probability=0.410191, bonus=1.000000, nodes=8)
                                  @ 1  java.lang.String.coder():byte (15 bytes)   trivial (relevance=0.415434, probability=0.410191, bonus=1.000000, nodes=5)
                                @ 21  java.lang.String.getBytes(byte[], int, byte):void (44 bytes)   relevance-based (relevance=0.412804, probability=0.410191, bonus=1.000000, nodes=51 <= 123.841238)
                                @ 1  org.graalvm.collections.EconomicMapImpl.hasHashArray():boolean (13 bytes)   trivial (relevance=1.259409, probability=1.000000, bonus=1.000000, nodes=9)
                              @ 16  java.lang.StringConcatHelper.prepend(long, byte[], String):long (37 bytes)   relevance-based (relevance=0.412804, probability=0.410191, bonus=1.000000, nodes=67 <= 123.841238)
                            @ 19  org.graalvm.collections.EconomicMapImpl.getKey(int):Object (9 bytes)   inline method (bytecode parsing)
                            @ 4  jdk.graal.compiler.graph.Node.getNodeClass():NodeClass (5 bytes)   inline accessor method (bytecode parsing)
                                    @ 40  jdk.graal.compiler.graph.Graph$1.hashCode(Object):int (15 bytes)   not inlining relevance-based (relevance=0.024217, probability=0.016039, bonus=1.000000, nodes=14 > 7.265028)
                 n                  @ 48  java.lang.Object.hashCode():int (0 bytes)   trivial (relevance=1.174510, probability=0.777870, bonus=1.000000, nodes=5)
                                    @ 61  org.graalvm.collections.EconomicMapImpl.getHashTableSize():int (43 bytes)   relevance-based (relevance=1.198900, probability=0.794024, bonus=1.000000, nodes=21 <= 300.000000)
                                  @ 3  org.graalvm.collections.EconomicMapImpl.getHashIndex(Object):int (68 bytes)   relevance-based (relevance=3.473862, probability=0.794024, bonus=1.000000, nodes=81 <= 300.000000)
                                  @ 6  org.graalvm.collections.EconomicMapImpl.getHashArray(int):int (126 bytes)   relevance-based (relevance=1.198900, probability=0.794024, bonus=1.000000, nodes=31 <= 300.000000)
                            @ 49  jdk.graal.compiler.graph.Node.valueEquals(Node):boolean (10 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.graph.Node.getNodeClass():NodeClass (5 bytes)   inline accessor method (bytecode parsing)
                                    @ 46  jdk.graal.compiler.graph.Graph$1.equals(Object, Object):boolean (53 bytes)   not inlining relevance-based (relevance=0.004513, probability=0.002516, bonus=1.000000, nodes=25 > 1.353923)
                                  @ 36  java.lang.Object.equals(Object):boolean (11 bytes)   not inlining no methods remaining after filtering less frequent methods (6 methods previously)
                                  @ 26  org.graalvm.collections.EconomicMapImpl.compareKeys(Object, Object):boolean (52 bytes)   relevance-based (relevance=0.605980, probability=0.401336, bonus=1.000000, nodes=40 <= 181.793898)
                                  @ 36  org.graalvm.collections.EconomicMapImpl.getRawValue(int):Object (11 bytes)   relevance-based (relevance=0.260860, probability=0.172766, bonus=1.000000, nodes=10 <= 78.257854)
                            @ 15  org.graalvm.collections.EconomicMapImpl.getKey(int):Object (9 bytes)   inline method (bytecode parsing)
                                  @ 56  org.graalvm.collections.EconomicMapImpl.findWithCollision(Object, EconomicMapImpl$CollisionLink):int (65 bytes)   not inlining relevance-based (relevance=0.021633, probability=0.014327, bonus=1.000000, nodes=42 > 6.489941)
                                @ 9  org.graalvm.collections.EconomicMapImpl.findHash(Object):int (62 bytes)   relevance-based (relevance=1.000000, probability=0.794024, bonus=1.000000, nodes=168 <= 300.000000)
                            @ 49  jdk.graal.compiler.graph.Node.valueEquals(Node):boolean (10 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.graph.Node.getNodeClass():NodeClass (5 bytes)   inline accessor method (bytecode parsing)
                                    @ 46  jdk.graal.compiler.graph.Graph$1.equals(Object, Object):boolean (53 bytes)   not inlining relevance-based (relevance=0.002742, probability=0.002401, bonus=1.000000, nodes=25 > 0.822492)
                                  @ 36  java.lang.Object.equals(Object):boolean (11 bytes)   not inlining no methods remaining after filtering less frequent methods (6 methods previously)
                                  @ 26  org.graalvm.collections.EconomicMapImpl.compareKeys(Object, Object):boolean (52 bytes)   relevance-based (relevance=0.368125, probability=0.382912, bonus=1.000000, nodes=40 <= 110.437611)
                                @ 15  org.graalvm.collections.EconomicMapImpl.findLinear(Object):int (42 bytes)   relevance-based (relevance=0.311005, probability=0.205976, bonus=1.000000, nodes=66 <= 93.301452)
                              @ 2  org.graalvm.collections.EconomicMapImpl.find(Object):int (19 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=237 <= 300.000000)
                              @ 2  java.lang.CharacterDataLatin1.getProperties(int):int (11 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=8)
                                    @ 17  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=0.015302, probability=0.013533, bonus=1.000000, nodes=9)
                                    @ 27  java.lang.StringLatin1.hashCode(byte[]):int (52 bytes)   not inlining relevance-based (relevance=0.015294, probability=0.013526, bonus=1.000000, nodes=22 > 4.588326)
                                    @ 37  java.lang.StringUTF16.hashCode(byte[]):int (52 bytes)   not inlining relevance-based (relevance=0.000008, probability=0.000007, bonus=1.000000, nodes=23 > 0.002314)
                                  @ 9  java.lang.String.hashCode():int (60 bytes)   relevance-based (relevance=1.000000, probability=0.934857, bonus=1.000000, nodes=48 <= 300.000000)
                                @ 23  java.util.HashMap.hash(Object):int (20 bytes)   relevance-based (relevance=1.539847, probability=0.934857, bonus=1.000000, nodes=66 <= 300.000000)
                                @ 95  java.util.HashMap$TreeNode.getTreeNode(int, Object):HashMap$TreeNode (22 bytes)   not inlining relevance-based (relevance=0.000739, probability=0.000653, bonus=1.000000, nodes=23 > 0.221638)
                                @ 63  java.lang.Long.equals(Object):boolean (30 bytes)   not inlining relevance-based (relevance=0.686498, probability=0.607110, bonus=1.000000, nodes=237 > 205.949458)
                                @ 128  java.lang.Long.equals(Object):boolean (30 bytes)   not inlining relevance-based (relevance=0.255374, probability=0.210635, bonus=1.000000, nodes=82 > 76.612281)
                              @ 2  java.util.HashMap.getNode(Object):HashMap$Node (150 bytes)   relevance-based (relevance=1.132755, probability=1.000000, bonus=1.000000, nodes=165 <= 300.000000)
                            @ 18  java.lang.StringLatin1.toBytes(char):byte[] (9 bytes)   inline method (bytecode parsing)
                            @ 22  java.lang.String.<init>(byte[], byte):void (15 bytes)   inline method (bytecode parsing)
                            @ 35  java.lang.String.<init>(byte[], byte):void (15 bytes)   inline method (bytecode parsing)
                                @ 7  java.lang.StringLatin1.canEncode(int):boolean (13 bytes)   trivial (relevance=1.012473, probability=1.000000, bonus=1.000000, nodes=9)
                                @ 31  java.lang.StringUTF16.toBytes(char):byte[] (12 bytes)   not inlining relevance-based (relevance=0.012473, probability=0.012319, bonus=1.000000, nodes=10 > 3.741849)
                              @ 4  java.lang.String.valueOf(char):String (39 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=34 <= 300.000000)
                              @ 51  jdk.internal.misc.Unsafe.allocateUninitializedArray0(Class, int):Object (90 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=9)
                            @ 12  java.util.LinkedList$Node.<init>(LinkedList$Node, Object, LinkedList$Node):void (20 bytes)   inline method (bytecode parsing)
                            @ 4  java.util.BitSet.wordIndex(int):int (5 bytes)   inline method (bytecode parsing)
                              @ 47  java.util.BitSet.initWords(int):void (15 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=14 <= 300.000000)
                            @ 5  java.util.Objects.checkIndex(int, int):int (7 bytes)   inline method (bytecode parsing)
                            @ 11  java.util.ArrayList.elementData(int):Object (7 bytes)   inline method (bytecode parsing)
                                @ 54  java.lang.Object.equals(Object):boolean (11 bytes)   trivial (relevance=1.007553, probability=8.526699, bonus=1.000000, nodes=9)
                              @ 7  java.util.ArrayList.indexOfRange(Object, int, int):int (71 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=69 <= 300.000000)
                            @ 26  java.lang.StringBuilder.<init>():void (7 bytes)   inline method (bytecode parsing)
                            @ 33  java.lang.StringBuilder.append(char):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 46  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 69  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 58  java.lang.StringBuilder.append(char):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 61  java.lang.StringBuilder.toString():String (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.String.<init>(StringBuilder):void (7 bytes)   inline method (bytecode parsing)
                              @ 3  java.lang.AbstractStringBuilder.<init>(int):void (39 bytes)   relevance-based (relevance=1.000000, probability=0.748305, bonus=1.000000, nodes=11 <= 300.000000)
                                      @ 3  java.lang.Math.max(int, int):int (11 bytes)   trivial (relevance=0.133981, probability=0.088413, bonus=1.000000, nodes=7)
                                    @ 29  jdk.internal.util.ArraysSupport.newLength(int, int, int):int (27 bytes)   relevance-based (relevance=0.133981, probability=0.088413, bonus=1.000000, nodes=15 <= 40.194428)
                                  @ 24  java.lang.AbstractStringBuilder.newCapacity(int):int (59 bytes)   relevance-based (relevance=0.133981, probability=0.088413, bonus=1.000000, nodes=27 <= 40.194428)
                                    @ 25  java.lang.Math.min(int, int):int (11 bytes)   trivial (relevance=0.133983, probability=0.088413, bonus=1.000000, nodes=7)
                                  @ 32  java.util.Arrays.copyOf(byte[], int):byte[] (33 bytes)   relevance-based (relevance=0.133981, probability=0.088413, bonus=1.000000, nodes=28 <= 40.194428)
                                @ 7  java.lang.AbstractStringBuilder.ensureCapacityInternal(int):void (39 bytes)   relevance-based (relevance=1.000018, probability=0.748305, bonus=1.000000, nodes=72 <= 300.000000)
                                @ 11  java.lang.AbstractStringBuilder.isLatin1():boolean (19 bytes)   trivial (relevance=1.133980, probability=0.748304, bonus=1.000000, nodes=9)
                                @ 18  java.lang.StringLatin1.canEncode(int):boolean (13 bytes)   trivial (relevance=1.133961, probability=0.748291, bonus=1.000000, nodes=5)
                                @ 46  java.lang.AbstractStringBuilder.isLatin1():boolean (19 bytes)   trivial (relevance=0.000020, probability=0.000013, bonus=1.000000, nodes=9)
                            @ 2  java.lang.StringUTF16.checkIndex(int, byte[]):void (9 bytes)   inline method (bytecode parsing)
                              @ 2  java.lang.StringUTF16.length(byte[]):int (5 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                                @ 72  java.lang.StringUTF16.putCharSB(byte[], int, int):void (12 bytes)   not inlining relevance-based (relevance=0.000020, probability=0.000013, bonus=1.000000, nodes=15 > 0.006128)
                              @ 2  java.lang.AbstractStringBuilder.append(char):AbstractStringBuilder (77 bytes)   relevance-based (relevance=1.000000, probability=0.748305, bonus=1.000000, nodes=102 <= 300.000000)
                                @ 11  java.lang.Enum.toString():String (5 bytes)   trivial (relevance=1.000000, probability=2.078471, bonus=1.000000, nodes=5)
                              @ 43  java.lang.String.valueOf(Object):String (15 bytes)   relevance-based (relevance=1.562538, probability=2.078533, bonus=1.000000, nodes=31 <= 300.000000)
                              @ 2  java.lang.AbstractStringBuilder.append(String):AbstractStringBuilder (45 bytes)   not inlining too large previous low-level graph (low-level-nodes: 368, relevance=1.861033, probability=2.078533, bonus=1.000000, nodes=23)
                              @ 2  java.lang.AbstractStringBuilder.append(String):AbstractStringBuilder (45 bytes)   not inlining too large previous low-level graph (low-level-nodes: 368, relevance=1.191032, probability=1.330228, bonus=1.000000, nodes=21)
                                      @ 3  java.lang.Math.max(int, int):int (11 bytes)   trivial (relevance=0.133981, probability=0.088413, bonus=1.000000, nodes=7)
                                    @ 29  jdk.internal.util.ArraysSupport.newLength(int, int, int):int (27 bytes)   relevance-based (relevance=0.133981, probability=0.088413, bonus=1.000000, nodes=15 <= 40.194428)
                                  @ 24  java.lang.AbstractStringBuilder.newCapacity(int):int (59 bytes)   relevance-based (relevance=0.133981, probability=0.088413, bonus=1.000000, nodes=27 <= 40.194428)
                                    @ 25  java.lang.Math.min(int, int):int (11 bytes)   trivial (relevance=0.133983, probability=0.088413, bonus=1.000000, nodes=7)
                                  @ 32  java.util.Arrays.copyOf(byte[], int):byte[] (33 bytes)   relevance-based (relevance=0.133981, probability=0.088413, bonus=1.000000, nodes=28 <= 40.194428)
                                @ 7  java.lang.AbstractStringBuilder.ensureCapacityInternal(int):void (39 bytes)   relevance-based (relevance=1.000018, probability=0.748305, bonus=1.000000, nodes=72 <= 300.000000)
                                @ 11  java.lang.AbstractStringBuilder.isLatin1():boolean (19 bytes)   trivial (relevance=1.133980, probability=0.748304, bonus=1.000000, nodes=9)
                                @ 18  java.lang.StringLatin1.canEncode(int):boolean (13 bytes)   trivial (relevance=1.133961, probability=0.748291, bonus=1.000000, nodes=5)
                                @ 46  java.lang.AbstractStringBuilder.isLatin1():boolean (19 bytes)   trivial (relevance=0.000020, probability=0.000013, bonus=1.000000, nodes=9)
                            @ 2  java.lang.StringUTF16.checkIndex(int, byte[]):void (9 bytes)   inline method (bytecode parsing)
                              @ 2  java.lang.StringUTF16.length(byte[]):int (5 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                                @ 72  java.lang.StringUTF16.putCharSB(byte[], int, int):void (12 bytes)   not inlining relevance-based (relevance=0.000020, probability=0.000013, bonus=1.000000, nodes=15 > 0.006128)
                              @ 2  java.lang.AbstractStringBuilder.append(char):AbstractStringBuilder (77 bytes)   relevance-based (relevance=1.133981, probability=0.748305, bonus=1.000000, nodes=102 <= 300.000000)
                            @ 5  java.lang.AbstractStringBuilder.getValue():byte[] (5 bytes)   inline accessor method (bytecode parsing)
                              @ 3  java.lang.String.<init>(AbstractStringBuilder, Void):void (99 bytes)   not inlining too large previous low-level graph (low-level-nodes: 376, relevance=1.133980, probability=0.748304, bonus=1.000000, nodes=41)
                            @ 4  java.lang.Long.hashCode(long):int (8 bytes)   inline method (bytecode parsing)
                            @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 8  java.util.concurrent.locks.AbstractOwnableSynchronizer.getExclusiveOwnerThread():Thread (5 bytes)   inline accessor method (bytecode parsing)
                            @ 41  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                            @ 46  java.util.concurrent.locks.AbstractQueuedSynchronizer.setState(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 7  java.util.concurrent.locks.AbstractQueuedSynchronizer.compareAndSetState(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 15  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                            @ 21  java.util.concurrent.locks.AbstractOwnableSynchronizer.getExclusiveOwnerThread():Thread (5 bytes)   inline accessor method (bytecode parsing)
                            @ 29  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 51  java.util.concurrent.locks.AbstractQueuedSynchronizer.setState(int):void (6 bytes)   inline method (bytecode parsing)
                              @ 17  java.lang.Math.max(int, int):int (11 bytes)   trivial (relevance=0.366092, probability=0.267985, bonus=1.000000, nodes=7)
                                @ 25  java.lang.Math.min(int, int):int (11 bytes)   trivial (relevance=0.366095, probability=0.267985, bonus=1.000000, nodes=7)
                              @ 27  java.util.Arrays.copyOf(long[], int):long[] (33 bytes)   relevance-based (relevance=0.366092, probability=0.267985, bonus=1.000000, nodes=21 <= 109.827459)
                            @ 12  java.util.LinkedList$Node.<init>(LinkedList$Node, Object, LinkedList$Node):void (20 bytes)   inline method (bytecode parsing)
                              @ 2  java.util.LinkedList.linkLast(Object):void (59 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=38 <= 300.000000)
                                  @ 54  java.lang.Object.equals(Object):boolean (11 bytes)   trivial (relevance=1.007553, probability=8.526699, bonus=1.000000, nodes=9)
                                @ 7  java.util.ArrayList.indexOfRange(Object, int, int):int (71 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=69 <= 300.000000)
                              @ 2  java.util.ArrayList.indexOf(Object):int (11 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=70 <= 300.000000)
                            @ 22  java.util.concurrent.locks.AbstractQueuedSynchronizer$Node.getAndUnsetStatus(int):int (14 bytes)   inline method (bytecode parsing)
                              @ 10  jdk.internal.misc.Unsafe.getAndBitwiseAndInt(Object, long, int):int (27 bytes)   inline method (bytecode parsing)
                                @ 3  jdk.internal.misc.Unsafe.checkSize(long):void (32 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=8)
                            @ 5  java.lang.Thread.isVirtual():boolean (5 bytes)   inline method (bytecode parsing)
                                    @ 15  jdk.internal.misc.Unsafe.checkOffset(Object, long):void (32 bytes)   trivial (relevance=0.743791, probability=0.426537, bonus=1.000000, nodes=8)
                                    @ 6  jdk.internal.misc.Unsafe.checkNativeAddress(long):void (28 bytes)   trivial (relevance=1.000000, probability=0.573463, bonus=1.000000, nodes=5)
                              @ 30  java.util.concurrent.locks.LockSupport.unpark(Thread):void (26 bytes)   not inlining relevance-based (relevance=0.011722, probability=0.007395, bonus=1.000000, nodes=23 > 3.516667)
                                  @ 3  jdk.internal.misc.Unsafe.checkPointer(Object, long):void (19 bytes)   relevance-based (relevance=1.746021, probability=1.000000, bonus=1.000000, nodes=17 <= 300.000000)
                                    @ 1  java.lang.Class.getComponentType():Class (14 bytes)   trivial (relevance=0.745068, probability=0.427269, bonus=1.000000, nodes=7)
                                  @ 15  jdk.internal.misc.Unsafe.checkPrimitiveArray(Class):void (22 bytes)   relevance-based (relevance=0.745068, probability=0.427269, bonus=1.000000, nodes=15 <= 223.520464)
                                @ 9  jdk.internal.misc.Unsafe.checkPrimitivePointer(Object, long):void (19 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=38 <= 300.000000)
                                    @ 15  jdk.internal.misc.Unsafe.checkOffset(Object, long):void (32 bytes)   trivial (relevance=0.743791, probability=0.426537, bonus=1.000000, nodes=8)
                                    @ 6  jdk.internal.misc.Unsafe.checkNativeAddress(long):void (28 bytes)   trivial (relevance=1.000000, probability=0.573463, bonus=1.000000, nodes=5)
                                  @ 3  jdk.internal.misc.Unsafe.checkPointer(Object, long):void (19 bytes)   relevance-based (relevance=1.746021, probability=1.000000, bonus=1.000000, nodes=17 <= 300.000000)
                                    @ 1  java.lang.Class.getComponentType():Class (14 bytes)   trivial (relevance=0.745068, probability=0.427269, bonus=1.000000, nodes=7)
                                  @ 15  jdk.internal.misc.Unsafe.checkPrimitiveArray(Class):void (22 bytes)   relevance-based (relevance=0.745068, probability=0.427269, bonus=1.000000, nodes=15 <= 223.520464)
                                @ 17  jdk.internal.misc.Unsafe.checkPrimitivePointer(Object, long):void (19 bytes)   relevance-based (relevance=1.743791, probability=1.000000, bonus=1.000000, nodes=38 <= 300.000000)
                              @ 9  jdk.internal.misc.Unsafe.copyMemoryChecks(Object, long, Object, long, long):void (21 bytes)   relevance-based (relevance=1.179839, probability=1.000000, bonus=1.000000, nodes=76 <= 300.000000)
                            @ 5  jdk.graal.compiler.hotspot.replacements.HotSpotIsArraySnippets.classIsArray(Class):boolean (33 bytes)   inline method (bytecode parsing)
                              @ 24  jdk.graal.compiler.hotspot.replacements.ClassGetHubNode.piCastNonNull(KlassPointer, GuardingNode):KlassPointer (9 bytes)   inline method (bytecode parsing)
                              @ 29  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.klassIsArray(KlassPointer):boolean (23 bytes)   inline method (bytecode parsing)
                            @ 21  java.lang.StringBuilder.<init>():void (7 bytes)   inline method (bytecode parsing)
                            @ 28  java.lang.StringBuilder.append(char):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 51  java.lang.StringBuilder.append(Object):StringBuilder (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 77  java.lang.StringBuilder.append(char):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 82  java.lang.StringBuilder.append(char):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 67  java.lang.StringBuilder.append(char):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 70  java.lang.StringBuilder.toString():String (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.String.<init>(StringBuilder):void (7 bytes)   inline method (bytecode parsing)
                                @ 5  java.util.ArrayList$Itr.<init>(ArrayList):void (26 bytes)   relevance-based (relevance=0.223453, probability=0.087948, bonus=1.000000, nodes=15 <= 67.035784)
                            @ 14  java.util.HashMap$KeySet.<init>(HashMap):void (10 bytes)   inline method (bytecode parsing)
                              @ 6  java.util.AbstractSet.<init>():void (5 bytes)   inline method (bytecode parsing)
                                @ 1  java.util.AbstractCollection.<init>():void (5 bytes)   inline method (bytecode parsing)
                            @ 15  java.util.LinkedHashMap$LinkedKeySet.<init>(LinkedHashMap, boolean):void (15 bytes)   inline method (bytecode parsing)
                              @ 6  java.util.AbstractSet.<init>():void (5 bytes)   inline method (bytecode parsing)
                                @ 1  java.util.AbstractCollection.<init>():void (5 bytes)   inline method (bytecode parsing)
                                  @ 1  java.util.LinkedHashMap.sequencedKeySet():SequencedSet (31 bytes)   not inlining relevance-based (relevance=0.000123, probability=0.000048, bonus=1.000000, nodes=23 > 0.036856)
                                @ 4  java.util.HashMap.keySet():Set (25 bytes)   relevance-based (relevance=0.876153, probability=0.344842, bonus=1.000000, nodes=28 <= 262.845947)
                            @ 8  java.util.HashMap$KeyIterator.<init>(HashMap):void (6 bytes)   inline method (bytecode parsing)
                            @ 12  java.util.LinkedHashMap$LinkedKeyIterator.<init>(LinkedHashMap, boolean):void (7 bytes)   inline method (bytecode parsing)
                                  @ 3  java.util.LinkedHashMap$LinkedHashIterator.<init>(LinkedHashMap, boolean):void (47 bytes)   not inlining relevance-based (relevance=0.000152, probability=0.000048, bonus=1.000000, nodes=33 > 0.045456)
                                  @ 2  java.util.HashMap$HashIterator.<init>(HashMap):void (79 bytes)   not inlining too large previous low-level graph (low-level-nodes: 409, relevance=1.000000, probability=0.344793, bonus=1.000000, nodes=58)
                                @ 7  java.util.HashMap$KeySet.iterator():Iterator (12 bytes)   relevance-based (relevance=1.080594, probability=0.344842, bonus=1.000000, nodes=21 <= 300.000000)
                                @ 5  java.util.RegularEnumSet$EnumSetIterator.<init>(RegularEnumSet):void (23 bytes)   relevance-based (relevance=1.000000, probability=0.567211, bonus=1.000000, nodes=14 <= 300.000000)
                              @ 1  java.util.RegularEnumSet.iterator():Iterator (9 bytes)   relevance-based (relevance=1.441135, probability=1.000000, bonus=1.000000, nodes=103 <= 300.000000)
                              @ 6  java.util.RegularEnumSet$EnumSetIterator.hasNext():boolean (15 bytes)   relevance-based (relevance=1.763014, probability=1.000000, bonus=1.000000, nodes=30 <= 300.000000)
                              @ 3  java.lang.AbstractStringBuilder.<init>(int):void (39 bytes)   relevance-based (relevance=1.223351, probability=0.693897, bonus=1.000000, nodes=11 <= 300.000000)
                                      @ 3  java.lang.Math.max(int, int):int (11 bytes)   trivial (relevance=0.133981, probability=0.081985, bonus=1.000000, nodes=7)
                                    @ 29  jdk.internal.util.ArraysSupport.newLength(int, int, int):int (27 bytes)   relevance-based (relevance=0.133981, probability=0.081985, bonus=1.000000, nodes=15 <= 40.194428)
                                  @ 24  java.lang.AbstractStringBuilder.newCapacity(int):int (59 bytes)   relevance-based (relevance=0.133981, probability=0.081985, bonus=1.000000, nodes=27 <= 40.194428)
                                    @ 25  java.lang.Math.min(int, int):int (11 bytes)   trivial (relevance=0.133983, probability=0.081984, bonus=1.000000, nodes=7)
                                  @ 32  java.util.Arrays.copyOf(byte[], int):byte[] (33 bytes)   relevance-based (relevance=0.133981, probability=0.081985, bonus=1.000000, nodes=28 <= 40.194428)
                                @ 7  java.lang.AbstractStringBuilder.ensureCapacityInternal(int):void (39 bytes)   relevance-based (relevance=1.000018, probability=0.693897, bonus=1.000000, nodes=72 <= 300.000000)
                                @ 11  java.lang.AbstractStringBuilder.isLatin1():boolean (19 bytes)   trivial (relevance=1.133980, probability=0.693897, bonus=1.000000, nodes=9)
                                @ 18  java.lang.StringLatin1.canEncode(int):boolean (13 bytes)   trivial (relevance=1.133961, probability=0.693885, bonus=1.000000, nodes=5)
                                @ 46  java.lang.AbstractStringBuilder.isLatin1():boolean (19 bytes)   trivial (relevance=0.000020, probability=0.000012, bonus=1.000000, nodes=9)
                            @ 2  java.lang.StringUTF16.checkIndex(int, byte[]):void (9 bytes)   inline method (bytecode parsing)
                              @ 2  java.lang.StringUTF16.length(byte[]):int (5 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                                @ 72  java.lang.StringUTF16.putCharSB(byte[], int, int):void (12 bytes)   not inlining relevance-based (relevance=0.000020, probability=0.000012, bonus=1.000000, nodes=15 > 0.006128)
                              @ 2  java.lang.AbstractStringBuilder.append(char):AbstractStringBuilder (77 bytes)   relevance-based (relevance=1.223351, probability=0.693897, bonus=1.000000, nodes=102 <= 300.000000)
                                @ 1  java.util.ArrayList$Itr.checkForComodification():void (23 bytes)   trivial (relevance=0.054516, probability=0.177892, bonus=1.000000, nodes=9)
                                @ 1  java.util.HashMap$HashIterator.nextNode():HashMap$Node (100 bytes)   not inlining too large previous low-level graph (low-level-nodes: 450, relevance=0.081562, probability=0.266147, bonus=1.000000, nodes=53)
                                @ 1  java.util.RegularEnumSet$EnumSetIterator.next():Enum (60 bytes)   relevance-based (relevance=1.000000, probability=3.885845, bonus=1.000000, nodes=20 <= 300.000000)
                              @ 33  java.util.RegularEnumSet$EnumSetIterator.next():Object (5 bytes)   relevance-based (relevance=1.190842, probability=4.329884, bonus=1.000000, nodes=54 <= 300.000000)
                                @ 11  java.lang.Enum.toString():String (5 bytes)   trivial (relevance=1.000000, probability=4.329759, bonus=1.000000, nodes=5)
                              @ 2  java.lang.String.valueOf(Object):String (15 bytes)   relevance-based (relevance=1.114271, probability=4.329884, bonus=1.000000, nodes=31 <= 300.000000)
                              @ 2  java.lang.AbstractStringBuilder.append(String):AbstractStringBuilder (45 bytes)   not inlining too large previous low-level graph (low-level-nodes: 368, relevance=1.114271, probability=4.329884, bonus=1.000000, nodes=23)
                              @ 56  java.util.RegularEnumSet$EnumSetIterator.hasNext():boolean (15 bytes)   relevance-based (relevance=1.114271, probability=4.329884, bonus=1.000000, nodes=30 <= 300.000000)
                                      @ 3  java.lang.Math.max(int, int):int (11 bytes)   trivial (relevance=0.125369, probability=0.429597, bonus=1.000000, nodes=7)
                                    @ 29  jdk.internal.util.ArraysSupport.newLength(int, int, int):int (27 bytes)   relevance-based (relevance=0.125369, probability=0.429597, bonus=1.000000, nodes=15 <= 37.610620)
                                  @ 24  java.lang.AbstractStringBuilder.newCapacity(int):int (59 bytes)   relevance-based (relevance=0.125369, probability=0.429597, bonus=1.000000, nodes=27 <= 37.610620)
                                    @ 25  java.lang.Math.min(int, int):int (11 bytes)   trivial (relevance=0.125370, probability=0.429594, bonus=1.000000, nodes=7)
                                  @ 32  java.util.Arrays.copyOf(byte[], int):byte[] (33 bytes)   relevance-based (relevance=0.125369, probability=0.429597, bonus=1.000000, nodes=28 <= 37.610620)
                                @ 7  java.lang.AbstractStringBuilder.ensureCapacityInternal(int):void (39 bytes)   relevance-based (relevance=0.935717, probability=3.635987, bonus=1.000000, nodes=72 <= 280.715173)
                                @ 11  java.lang.AbstractStringBuilder.isLatin1():boolean (19 bytes)   trivial (relevance=1.061066, probability=3.635983, bonus=1.000000, nodes=9)
                                @ 18  java.lang.StringLatin1.canEncode(int):boolean (13 bytes)   trivial (relevance=1.061048, probability=3.635921, bonus=1.000000, nodes=5)
                            @ 30  jdk.internal.math.FormattedFPDecimal.toDigit(long):char (6 bytes)   inline method (bytecode parsing)
                                @ 46  java.lang.AbstractStringBuilder.isLatin1():boolean (19 bytes)   trivial (relevance=0.000019, probability=0.000065, bonus=1.000000, nodes=9)
                              @ 2  jdk.internal.math.FormattedFPDecimal.toDigit(int):char (6 bytes)   inline method (bytecode parsing)
                            @ 2  java.lang.StringUTF16.checkIndex(int, byte[]):void (9 bytes)   inline method (bytecode parsing)
                              @ 2  java.lang.StringUTF16.length(byte[]):int (5 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                                @ 72  java.lang.StringUTF16.putCharSB(byte[], int, int):void (12 bytes)   not inlining relevance-based (relevance=0.000019, probability=0.000065, bonus=1.000000, nodes=15 > 0.005734)
                              @ 2  java.lang.AbstractStringBuilder.append(char):AbstractStringBuilder (77 bytes)   relevance-based (relevance=0.935700, probability=3.635987, bonus=1.000000, nodes=102 <= 280.710117)
                                      @ 3  java.lang.Math.max(int, int):int (11 bytes)   trivial (relevance=0.125369, probability=0.429596, bonus=1.000000, nodes=7)
                                    @ 29  jdk.internal.util.ArraysSupport.newLength(int, int, int):int (27 bytes)   relevance-based (relevance=0.125369, probability=0.429596, bonus=1.000000, nodes=15 <= 37.610575)
                                  @ 24  java.lang.AbstractStringBuilder.newCapacity(int):int (59 bytes)   relevance-based (relevance=0.125369, probability=0.429596, bonus=1.000000, nodes=27 <= 37.610575)
                                    @ 25  java.lang.Math.min(int, int):int (11 bytes)   trivial (relevance=0.125370, probability=0.429594, bonus=1.000000, nodes=7)
                                  @ 32  java.util.Arrays.copyOf(byte[], int):byte[] (33 bytes)   relevance-based (relevance=0.125369, probability=0.429596, bonus=1.000000, nodes=28 <= 37.610575)
                                @ 7  java.lang.AbstractStringBuilder.ensureCapacityInternal(int):void (39 bytes)   relevance-based (relevance=0.935716, probability=3.635983, bonus=1.000000, nodes=72 <= 280.714841)
                                @ 11  java.lang.AbstractStringBuilder.isLatin1():boolean (19 bytes)   trivial (relevance=1.061064, probability=3.635978, bonus=1.000000, nodes=9)
                                @ 18  java.lang.StringLatin1.canEncode(int):boolean (13 bytes)   trivial (relevance=1.061046, probability=3.635917, bonus=1.000000, nodes=5)
                                @ 46  java.lang.AbstractStringBuilder.isLatin1():boolean (19 bytes)   trivial (relevance=0.000019, probability=0.000065, bonus=1.000000, nodes=9)
                            @ 2  java.lang.StringUTF16.checkIndex(int, byte[]):void (9 bytes)   inline method (bytecode parsing)
                              @ 2  java.lang.StringUTF16.length(byte[]):int (5 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                                @ 72  java.lang.StringUTF16.putCharSB(byte[], int, int):void (12 bytes)   not inlining relevance-based (relevance=0.000019, probability=0.000065, bonus=1.000000, nodes=15 > 0.005734)
                              @ 2  java.lang.AbstractStringBuilder.append(char):AbstractStringBuilder (77 bytes)   relevance-based (relevance=0.935699, probability=3.635983, bonus=1.000000, nodes=102 <= 280.709785)
                                      @ 3  java.lang.Math.max(int, int):int (11 bytes)   trivial (relevance=0.133981, probability=0.081985, bonus=1.000000, nodes=7)
                                    @ 29  jdk.internal.util.ArraysSupport.newLength(int, int, int):int (27 bytes)   relevance-based (relevance=0.133981, probability=0.081985, bonus=1.000000, nodes=15 <= 40.194428)
                                  @ 24  java.lang.AbstractStringBuilder.newCapacity(int):int (59 bytes)   relevance-based (relevance=0.133981, probability=0.081985, bonus=1.000000, nodes=27 <= 40.194428)
                                    @ 25  java.lang.Math.min(int, int):int (11 bytes)   trivial (relevance=0.133983, probability=0.081984, bonus=1.000000, nodes=7)
                                  @ 32  java.util.Arrays.copyOf(byte[], int):byte[] (33 bytes)   relevance-based (relevance=0.133981, probability=0.081985, bonus=1.000000, nodes=28 <= 40.194428)
                                @ 7  java.lang.AbstractStringBuilder.ensureCapacityInternal(int):void (39 bytes)   relevance-based (relevance=1.000018, probability=0.693897, bonus=1.000000, nodes=72 <= 300.000000)
                                @ 11  java.lang.AbstractStringBuilder.isLatin1():boolean (19 bytes)   trivial (relevance=1.133980, probability=0.693897, bonus=1.000000, nodes=9)
                                @ 18  java.lang.StringLatin1.canEncode(int):boolean (13 bytes)   trivial (relevance=1.133961, probability=0.693885, bonus=1.000000, nodes=5)
                                @ 46  java.lang.AbstractStringBuilder.isLatin1():boolean (19 bytes)   trivial (relevance=0.000020, probability=0.000012, bonus=1.000000, nodes=9)
                            @ 2  java.lang.StringUTF16.checkIndex(int, byte[]):void (9 bytes)   inline method (bytecode parsing)
                              @ 2  java.lang.StringUTF16.length(byte[]):int (5 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                                @ 72  java.lang.StringUTF16.putCharSB(byte[], int, int):void (12 bytes)   not inlining relevance-based (relevance=0.000020, probability=0.000012, bonus=1.000000, nodes=15 > 0.006128)
                              @ 2  java.lang.AbstractStringBuilder.append(char):AbstractStringBuilder (77 bytes)   relevance-based (relevance=1.223351, probability=0.693897, bonus=1.000000, nodes=102 <= 300.000000)
                            @ 5  java.lang.AbstractStringBuilder.getValue():byte[] (5 bytes)   inline accessor method (bytecode parsing)
                              @ 3  java.lang.String.<init>(AbstractStringBuilder, Void):void (99 bytes)   not inlining too large previous low-level graph (low-level-nodes: 376, relevance=1.223349, probability=0.693897, bonus=1.000000, nodes=41)
                              @ 8  java.lang.Math.min(int, int):int (11 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=7)
                              @ 44  java.util.BitSet.recalculateWordsInUse():void (39 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=38 <= 300.000000)
                              @ 48  java.util.BitSet.checkInvariants():void (111 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=4)
                            @ 1  java.util.AbstractList.<init>():void (10 bytes)   inline method (bytecode parsing)
                              @ 1  java.util.AbstractCollection.<init>():void (5 bytes)   inline method (bytecode parsing)
                            @ 12  java.lang.String.<init>(byte[], byte):void (15 bytes)   inline method (bytecode parsing)
                            @ 16  java.lang.Math.max(int, int):int (11 bytes)   inline method (bytecode parsing)
                            @ 50  java.lang.String.<init>(byte[], byte):void (15 bytes)   inline method (bytecode parsing)
                              @ 40  java.lang.Long.formatUnsignedLong0(long, int, byte[], int, int):void (47 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=33 <= 300.000000)
                                  @ 25  java.lang.Math.min(int, int):int (11 bytes)   trivial (relevance=0.435867, probability=0.258356, bonus=1.000000, nodes=7)
                                @ 21  java.util.Arrays.copyOf(long[], int):long[] (33 bytes)   relevance-based (relevance=0.435863, probability=0.258356, bonus=1.000000, nodes=21 <= 130.758775)
                                @ 28  java.util.BitSet.checkInvariants():void (111 bytes)   trivial (relevance=0.435858, probability=0.258353, bonus=1.000000, nodes=4)
                              @ 8  java.util.BitSet.trimToSize():void (32 bytes)   relevance-based (relevance=1.000000, probability=0.851101, bonus=1.000000, nodes=34 <= 300.000000)
                              @ 34  java.util.BitSet.checkInvariants():void (111 bytes)   trivial (relevance=1.687060, probability=0.999997, bonus=1.000000, nodes=4)
                            @ 5  jdk.graal.compiler.nodes.java.NewArrayNode.newUninitializedArray(Class, int):Object (7 bytes)   inline method (bytecode parsing)
                            @ 27  jdk.graal.compiler.replacements.arraycopy.ArrayCopyCallNode.disjointArraycopy(Object, int, Object, int, int, JavaKind, int):void (17 bytes)   inline method (bytecode parsing)
                            @ 23  jdk.graal.compiler.replacements.AllocationSnippets.allocateArrayImpl(Word, int, int, int, AllocationSnippets$FillContent, int, boolean, boolean, boolean, boolean, AllocationSnippets$AllocationProfilingData):Object (178 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getTLABInfo():Word (5 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getThread():Word (8 bytes)   inline method (bytecode parsing)
                                  @ 4  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.registerAsWord(Register):Word (7 bytes)   inline method (bytecode parsing)
                              @ 9  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.readTlabTop(Word):Word (5 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.readTlabTop(Word):Word (17 bytes)   inline method (bytecode parsing)
                              @ 17  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.readTlabEnd(Word):Word (5 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.readTlabEnd(Word):Word (17 bytes)   inline method (bytecode parsing)
                              @ 36  jdk.graal.compiler.replacements.ReplacementsUtil.dynamicAssert(boolean, String):void (12 bytes)   inline method (bytecode parsing)
                              @ 44  jdk.graal.compiler.replacements.AllocationSnippets.arrayAllocationSize(int, int, int):UnsignedWord (18 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.objectAlignment():int (7 bytes)   inline method (bytecode parsing)
                                @ 11  jdk.graal.compiler.replacements.AllocationSnippets.arrayAllocationSize(int, int, int, int):long (32 bytes)   inline method (bytecode parsing)
                              @ 59  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.useTLAB():boolean (7 bytes)   inline method (bytecode parsing)
                              @ 72  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.shouldAllocateInTLAB(UnsignedWord, boolean):boolean (33 bytes)   inline method (bytecode parsing)
                              @ 102  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.writeTlabTop(Word, Word):void (6 bytes)   inline method (bytecode parsing)
                                @ 2  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.writeTlabTop(Word, Word):void (15 bytes)   inline method (bytecode parsing)
                              @ 109  jdk.graal.compiler.replacements.AllocationSnippets.emitPrefetchAllocate(Word, boolean):void (61 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getPrefetchStyle():int (7 bytes)   inline method (bytecode parsing)
                                @ 9  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getPrefetchLines(boolean):int (18 bytes)   inline method (bytecode parsing)
                                @ 14  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getPrefetchStepSize():int (7 bytes)   inline method (bytecode parsing)
                                @ 20  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getPrefetchDistance():int (7 bytes)   inline method (bytecode parsing)
                              @ 136  jdk.graal.compiler.replacements.AllocationSnippets.formatArray(Word, UnsignedWord, int, Word, AllocationSnippets$FillContent, boolean, int, boolean, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):Object (53 bytes)   inline method (bytecode parsing)
                                @ 5  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.initializeObjectHeader(Word, Word, boolean):void (29 bytes)   inline method (bytecode parsing)
                                  @ 25  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.initializeObjectHeader(Word, Word, KlassPointer):void (20 bytes)   inline method (bytecode parsing)
                                @ 11  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.arrayLengthOffset():int (7 bytes)   inline method (bytecode parsing)
                                @ 15  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                                @ 38  jdk.graal.compiler.replacements.AllocationSnippets.fillContents(Word, AllocationSnippets$FillContent, int, UnsignedWord, boolean, boolean, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):void (58 bytes)   inline method (bytecode parsing)
                                @ 44  jdk.graal.compiler.replacements.AllocationSnippets.emitMemoryBarrierIf(boolean):void (14 bytes)   inline method (bytecode parsing)
                                  @ 7  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                              @ 152  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                              @ 158  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.callNewArrayStub(Word, int):Object (35 bytes)   inline method (bytecode parsing)
                                @ 22  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.nonNullOrDeopt(Object):Object (27 bytes)   inline method (bytecode parsing)
                              @ 168  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.profileAllocation(AllocationSnippets$AllocationProfilingData, UnsignedWord):void (51 bytes)   inline method (bytecode parsing)
                              @ 174  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.verifyOop(Object):Object (5 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.verifyOop(Object):Object (19 bytes)   inline method (bytecode parsing)
                              @ 20  java.util.HashMap.resize():HashMap$Node[] (356 bytes)   not inlining too large previous low-level graph (low-level-nodes: 983, relevance=0.002078, probability=0.002074, bonus=1.000000, nodes=188)
                              @ 123  java.util.HashMap$TreeNode.putTreeVal(HashMap, HashMap$Node[], int, Object, Object):HashMap$TreeNode (314 bytes)   not inlining relevance-based (relevance=0.000032, probability=0.000032, bonus=1.000000, nodes=219 > 0.009478)
                              @ 91  java.lang.String.equals(Object):boolean (56 bytes)   not inlining relevance-based (relevance=0.000289, probability=0.000288, bonus=1.000000, nodes=188 > 0.086576)
                            @ 9  java.util.LinkedHashMap$Entry.<init>(int, Object, Object, HashMap$Node):void (10 bytes)   inline method (bytecode parsing)
                                @ 6  java.util.HashMap$Node.<init>(int, Object, Object, HashMap$Node):void (26 bytes)   not inlining relevance-based (relevance=0.001427, probability=0.001421, bonus=1.000000, nodes=17 > 0.427986)
                                @ 17  java.util.LinkedHashMap.linkNodeAtEnd(LinkedHashMap$Entry):void (76 bytes)   not inlining relevance-based (relevance=0.001427, probability=0.001421, bonus=1.000000, nodes=26 > 0.427986)
                                @ 9  java.util.HashMap$Node.<init>(int, Object, Object, HashMap$Node):void (26 bytes)   relevance-based (relevance=0.806622, probability=0.803528, bonus=1.000000, nodes=17 <= 241.986656)
                              @ 56  java.util.HashMap.newNode(int, Object, Object, HashMap$Node):HashMap$Node (13 bytes)   relevance-based (relevance=0.806622, probability=0.804950, bonus=1.000000, nodes=34 <= 241.986656)
                              @ 203  java.lang.String.equals(Object):boolean (56 bytes)   not inlining relevance-based (relevance=0.000061, probability=0.000038, bonus=1.000000, nodes=68 > 0.018296)
                            @ 9  java.util.LinkedHashMap$Entry.<init>(int, Object, Object, HashMap$Node):void (10 bytes)   inline method (bytecode parsing)
                                @ 6  java.util.HashMap$Node.<init>(int, Object, Object, HashMap$Node):void (26 bytes)   not inlining relevance-based (relevance=0.000455, probability=0.000452, bonus=1.000000, nodes=17 > 0.136512)
                                @ 17  java.util.LinkedHashMap.linkNodeAtEnd(LinkedHashMap$Entry):void (76 bytes)   not inlining relevance-based (relevance=0.000455, probability=0.000452, bonus=1.000000, nodes=26 > 0.136512)
                                @ 9  java.util.HashMap$Node.<init>(int, Object, Object, HashMap$Node):void (26 bytes)   relevance-based (relevance=0.120914, probability=0.120211, bonus=1.000000, nodes=17 <= 36.274144)
                              @ 152  java.util.HashMap.newNode(int, Object, Object, HashMap$Node):HashMap$Node (13 bytes)   relevance-based (relevance=0.120914, probability=0.120663, bonus=1.000000, nodes=34 <= 36.274144)
                              @ 169  java.util.HashMap.treeifyBin(HashMap$Node[], int):void (110 bytes)   not inlining relevance-based (relevance=0.000009, probability=0.000009, bonus=1.000000, nodes=77 > 0.002817)
                              @ 253  java.util.HashMap.afterNodeAccess(HashMap$Node):void (1 bytes)   not inlining relevance-based (relevance=0.074518, probability=0.074363, bonus=1.000000, nodes=75 > 22.355285)
                              @ 288  java.util.HashMap.resize():HashMap$Node[] (356 bytes)   not inlining too large previous low-level graph (low-level-nodes: 983, relevance=0.000986, probability=0.000984, bonus=1.000000, nodes=188)
                            @ 1  java.util.HashMap.size():int (5 bytes)   inline accessor method (bytecode parsing)
                                @ 15  java.util.LinkedHashMap.removeEldestEntry(Map$Entry):boolean (2 bytes)   not inlining relevance-based (relevance=0.001763, probability=0.000908, bonus=1.000000, nodes=14 > 0.528943)
                              @ 295  java.util.HashMap.afterNodeInsertion(boolean):void (1 bytes)   relevance-based (relevance=0.927560, probability=0.925637, bonus=1.000000, nodes=25 <= 278.268061)
                              @ 25  java.util.BitSet.checkInvariants():void (111 bytes)   trivial (relevance=1.243171, probability=1.000000, bonus=1.000000, nodes=4)
                              @ 29  java.util.BitSet.checkInvariants():void (111 bytes)   trivial (relevance=1.243171, probability=1.000000, bonus=1.000000, nodes=4)
                            @ 55  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                @ 14  java.lang.Class.getComponentType():Class (14 bytes)   trivial (relevance=0.028525, probability=0.027734, bonus=1.000000, nodes=7)
                                @ 32  java.lang.Math.min(int, int):int (11 bytes)   trivial (relevance=1.028525, probability=1.000000, bonus=1.000000, nodes=7)
                              @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   relevance-based (relevance=1.334611, probability=1.000000, bonus=1.000000, nodes=40 <= 300.000000)
                            @ 5  jdk.graal.compiler.replacements.arraycopy.ArrayCopySnippets.checkArrayTypes(Object, Object, ArrayCopySnippets$ArrayCopyTypeCheck):void (98 bytes)   inline method (bytecode parsing)
                            @ 20  jdk.graal.compiler.replacements.arraycopy.ArrayCopySnippets.checkLimits(Object, int, Object, int, int, JavaKind, ArrayCopySnippets$Counters):int[] (230 bytes)   inline method (bytecode parsing)
                              @ 21  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                              @ 37  jdk.graal.compiler.nodes.PiNode.piCastPositive(int, GuardingNode):int (9 bytes)   inline method (bytecode parsing)
                              @ 64  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                              @ 81  jdk.graal.compiler.nodes.PiNode.piCastPositive(int, GuardingNode):int (9 bytes)   inline method (bytecode parsing)
                              @ 108  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                              @ 125  jdk.graal.compiler.nodes.PiNode.piCastPositive(int, GuardingNode):int (9 bytes)   inline method (bytecode parsing)
                              @ 159  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                              @ 200  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                              @ 217  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                              @ 226  jdk.graal.compiler.replacements.arraycopy.ArrayCopySnippets.createCheckLimitsResult(int, int, int):int[] (18 bytes)   inline method (bytecode parsing)
                            @ 47  jdk.graal.compiler.replacements.arraycopy.ArrayCopySnippets.incrementLengthCounter(int, ArrayCopySnippets$Counters):void (16 bytes)   inline method (bytecode parsing)
                              @ 12  jdk.graal.compiler.replacements.SnippetIntegerHistogram.inc(long):void (215 bytes)   inline method (bytecode parsing)
                            @ 52  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                            @ 59  jdk.graal.compiler.replacements.SnippetCounter.add(int):void (13 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                            @ 77  jdk.graal.compiler.replacements.arraycopy.ArrayCopySnippets.doArraycopyExactStubCallSnippet(Object, int, Object, int, int, JavaKind, LocationIdentity, ArrayCopySnippets$Counters):void (19 bytes)   inline method (bytecode parsing)
                              @ 12  jdk.graal.compiler.hotspot.replacements.arraycopy.HotSpotArraycopySnippets.heapWordSize():int (7 bytes)   inline method (bytecode parsing)
                              @ 15  jdk.graal.compiler.replacements.arraycopy.ArrayCopyCallNode.arraycopy(Object, int, Object, int, int, JavaKind, LocationIdentity, int):void (19 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                              @ 7  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                              @ 14  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=9)
                              @ 28  java.lang.StringLatin1.indexOf(byte[], byte[]):int (25 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=18 <= 300.000000)
                            @ 12  jdk.graal.compiler.replacements.ReplacementsUtil.dynamicAssert(boolean, String):void (12 bytes)   inline method (bytecode parsing)
                            @ 26  jdk.graal.compiler.replacements.ReplacementsUtil.dynamicAssert(boolean, String):void (12 bytes)   inline method (bytecode parsing)
                            @ 83  jdk.graal.compiler.replacements.StringLatin1Snippets.byteArrayOffset(long):long (17 bytes)   inline method (bytecode parsing)
                            @ 94  java.lang.Byte.toUnsignedInt(byte):int (6 bytes)   inline method (bytecode parsing)
                            @ 158  jdk.graal.compiler.replacements.StringLatin1Snippets.byteArrayOffset(long):long (17 bytes)   inline method (bytecode parsing)
                            @ 167  java.lang.Byte.toUnsignedInt(byte):int (6 bytes)   inline method (bytecode parsing)
                            @ 172  java.lang.Byte.toUnsignedInt(byte):int (6 bytes)   inline method (bytecode parsing)
                            @ 234  jdk.graal.compiler.replacements.StringLatin1Snippets.byteArrayOffset(long):long (17 bytes)   inline method (bytecode parsing)
                            @ 239  jdk.graal.compiler.replacements.StringLatin1Snippets.byteArrayOffset(long):long (17 bytes)   inline method (bytecode parsing)
                            @ 1  java.lang.ref.Reference.get():Object (5 bytes)   inline accessor method (bytecode parsing)
                            @ 17  java.lang.Enum.ordinal():int (5 bytes)   inline accessor method (bytecode parsing)
                                @ 25  java.util.ArrayDeque.dec(int, int):int (13 bytes)   relevance-based (relevance=1.002498, probability=1.000000, bonus=1.000000, nodes=18 <= 300.000000)
                            @ 55  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                              @ 2  java.util.EnumSet.typeCheck(Enum):void (59 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=12 <= 300.000000)
                                @ 47  java.util.ArrayDeque.grow(int):void (165 bytes)   not inlining too large previous low-level graph (low-level-nodes: 1244, relevance=0.003659, probability=0.002492, bonus=1.000000, nodes=75)
                              @ 2  java.util.ArrayDeque.addFirst(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=42 <= 300.000000)
                            @ 28  java.lang.String.<init>(byte[], byte):void (15 bytes)   inline method (bytecode parsing)
                              @ 4  java.lang.Long.toString(long):String (55 bytes)   not inlining too large previous low-level graph (low-level-nodes: 544, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=19)
                            @ 1  java.lang.ref.Reference.get():Object (5 bytes)   inline accessor method (bytecode parsing)
                              @ 15  java.lang.ref.SoftReference.get():Object (29 bytes)   relevance-based (relevance=1.000000, probability=0.993019, bonus=1.000000, nodes=20 <= 300.000000)
                            @ 5  java.lang.Class$ReflectionData.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                              @ 39  java.lang.Class.newReflectionData(SoftReference, int):Class$ReflectionData (66 bytes)   not inlining relevance-based (relevance=0.007174, probability=0.006981, bonus=1.000000, nodes=61 > 2.152275)
                            @ 0  jdk.internal.misc.PreviewFeatures.isEnabled():boolean (4 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.Class.isUnnamedClass():boolean (36 bytes)   trivial (relevance=1.000825, probability=1.000000, bonus=1.000000, nodes=5)
                            @ 1  java.lang.ref.Reference.get():Object (5 bytes)   inline accessor method (bytecode parsing)
                                @ 15  java.lang.ref.SoftReference.get():Object (29 bytes)   relevance-based (relevance=1.000000, probability=0.993027, bonus=1.000000, nodes=20 <= 300.000000)
                            @ 5  java.lang.Class$ReflectionData.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                                @ 39  java.lang.Class.newReflectionData(SoftReference, int):Class$ReflectionData (66 bytes)   not inlining relevance-based (relevance=0.007166, probability=0.006973, bonus=1.000000, nodes=61 > 2.149869)
                              @ 11  java.lang.Class.reflectionData():Class$ReflectionData (43 bytes)   relevance-based (relevance=1.000825, probability=1.000000, bonus=1.000000, nodes=45 <= 300.000000)
                            @ 16  java.lang.String.concat(String):String (15 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.String.isEmpty():boolean (14 bytes)   inline method (bytecode parsing)
                              @ 11  java.lang.StringConcatHelper.simpleConcat(Object, Object):String (94 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.StringConcatHelper.stringOf(Object):String (20 bytes)   inline method (bytecode parsing)
                                  @ 5  java.lang.String.toString():String (2 bytes)   inline method (bytecode parsing)
                                @ 27  java.lang.String.isEmpty():boolean (14 bytes)   inline method (bytecode parsing)
                                @ 61  java.lang.StringConcatHelper.newArray(long):byte[] (40 bytes)   inline method (bytecode parsing)
                            @ 38  java.lang.String.lastIndexOf(int):int (12 bytes)   inline method (bytecode parsing)
                            @ 43  java.lang.String.substring(int):String (10 bytes)   inline method (bytecode parsing)
                              @ 26  java.lang.Class.getSimpleName0():String (49 bytes)   not inlining relevance-based (relevance=0.000848, probability=0.000825, bonus=1.000000, nodes=114 > 0.254304)
                            @ 0  jdk.internal.misc.PreviewFeatures.isEnabled():boolean (4 bytes)   inline method (bytecode parsing)
                            @ 4  java.lang.Integer.hashCode(int):int (2 bytes)   inline method (bytecode parsing)
                            @ 12  java.util.ArrayDeque.elementAt(Object[], int):Object (4 bytes)   inline method (bytecode parsing)
                                  @ 28  java.util.ArrayDeque.inc(int, int):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.999291, bonus=1.000000, nodes=10 <= 300.000000)
                                @ 1  java.util.ArrayDeque.pollFirst():Object (36 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=26 <= 300.000000)
                              @ 1  java.util.ArrayDeque.removeFirst():Object (19 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=28 <= 300.000000)
                                @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.999883, bonus=1.000000, nodes=5)
                              @ 6  java.lang.String.length():int (11 bytes)   trivial (relevance=1.002962, probability=0.999883, bonus=1.000000, nodes=8)
                                @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.999883, bonus=1.000000, nodes=5)
                              @ 10  java.lang.String.length():int (11 bytes)   trivial (relevance=1.002962, probability=0.999883, bonus=1.000000, nodes=8)
                              @ 39  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.996930, bonus=1.000000, nodes=5)
                              @ 47  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.996930, bonus=1.000000, nodes=5)
                              @ 70  jdk.internal.util.ArraysSupport.mismatch(byte[], int, byte[], int, int):int (103 bytes)   relevance-based (relevance=1.000000, probability=0.996930, bonus=1.000000, nodes=62 <= 300.000000)
                              @ 2  jdk.internal.math.DoubleToDecimal.y(int):int (20 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=16 <= 300.000000)
                              @ 26  jdk.internal.math.DoubleToDecimal.appendDigit(int):void (22 bytes)   relevance-based (relevance=1.000000, probability=8.000000, bonus=1.000000, nodes=15 <= 300.000000)
                            @ 20  java.util.concurrent.ConcurrentHashMap.spread(int):int (10 bytes)   inline method (bytecode parsing)
                            @ 83  java.util.concurrent.ConcurrentHashMap$ReservationNode.<init>():void (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.util.concurrent.ConcurrentHashMap$Node.<init>(int, Object, Object):void (20 bytes)   inline method (bytecode parsing)
                            @ 110  java.util.regex.Matcher.getTextLength():int (10 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                            @ 4  java.security.CodeSource.getLocationNoFragString():String (5 bytes)   inline accessor method (bytecode parsing)
                                @ 13  sun.util.locale.BaseLocale.hashCode():int (67 bytes)   not inlining relevance-based (relevance=0.000067, probability=0.000032, bonus=1.000000, nodes=48 > 0.020161)
                                @ 13  java.lang.String.hashCode():int (60 bytes)   not inlining relevance-based (relevance=0.049225, probability=0.046879, bonus=1.000000, nodes=50 > 14.767649)
                                @ 17  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=0.015302, probability=0.014353, bonus=1.000000, nodes=9)
                                @ 27  java.lang.StringLatin1.hashCode(byte[]):int (52 bytes)   not inlining relevance-based (relevance=0.015294, probability=0.014345, bonus=1.000000, nodes=22 > 4.588326)
                                @ 37  java.lang.StringUTF16.hashCode(byte[]):int (52 bytes)   not inlining relevance-based (relevance=0.000008, probability=0.000007, bonus=1.000000, nodes=23 > 0.002314)
                              @ 17  java.lang.String.hashCode():int (60 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=99 <= 300.000000)
                              @ 70  java.util.concurrent.ConcurrentHashMap.tabAt(ConcurrentHashMap$Node[], int):ConcurrentHashMap$Node (22 bytes)   relevance-based (relevance=1.139051, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                              @ 4  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=8)
                            @ 23  java.security.CodeSource.getLocationNoFragString():String (5 bytes)   inline accessor method (bytecode parsing)
                            @ 30  java.security.CodeSource.getLocationNoFragString():String (5 bytes)   inline accessor method (bytecode parsing)
                            @ 13  java.lang.WeakPairMap$Pair$Weak.first():Object (5 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.ref.Reference.get():Object (5 bytes)   inline accessor method (bytecode parsing)
                            @ 17  java.lang.WeakPairMap$Pair$Weak.second():Object (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.lang.ref.Reference.get():Object (5 bytes)   inline accessor method (bytecode parsing)
                                @ 24  java.lang.WeakPairMap$Pair.equals(Object, Object, WeakPairMap$Pair):boolean (34 bytes)   not inlining relevance-based (relevance=0.000424, probability=0.000088, bonus=1.000000, nodes=29 > 0.127114)
                                @ 33  java.util.Objects.equals(Object, Object):boolean (23 bytes)   not inlining relevance-based (relevance=0.056373, probability=0.046831, bonus=1.000000, nodes=24 > 16.911889)
                                @ 48  java.security.CodeSource.matchCerts(CodeSource, boolean):boolean (254 bytes)   not inlining relevance-based (relevance=0.056373, probability=0.046831, bonus=1.000000, nodes=18 > 16.911889)
                              @ 241  java.lang.String.equals(Object):boolean (56 bytes)   relevance-based (relevance=1.000018, probability=0.877940, bonus=1.000000, nodes=121 <= 300.000000)
                              @ 101  java.util.concurrent.ConcurrentHashMap.casTabAt(ConcurrentHashMap$Node[], int, ConcurrentHashMap$Node, ConcurrentHashMap$Node):boolean (21 bytes)   not inlining relevance-based (relevance=0.001154, probability=0.000912, bonus=1.000000, nodes=14 > 0.346317)
                            @ 5  jdk.internal.loader.NativeLibraries$NativeLibraryContext$1.apply(Thread):Deque (10 bytes)   inline method (bytecode parsing)
                              @ 115  jdk.vm.ci.hotspot.JFR$CompilerPhaseEvent$$Lambda/0x00007f45e0170870.apply(Object):Object (12 bytes)   not inlining relevance-based (relevance=0.001154, probability=0.000912, bonus=1.000000, nodes=62 > 0.346317)
                              @ 134  java.util.concurrent.ConcurrentHashMap$Node.<init>(int, Object, Object):void (20 bytes)   not inlining relevance-based (relevance=0.001154, probability=0.000912, bonus=1.000000, nodes=14 > 0.346317)
                              @ 145  java.util.concurrent.ConcurrentHashMap.setTabAt(ConcurrentHashMap$Node[], int, ConcurrentHashMap$Node):void (20 bytes)   not inlining relevance-based (relevance=0.001154, probability=0.000912, bonus=1.000000, nodes=13 > 0.346317)
                              @ 51  java.util.concurrent.ConcurrentHashMap.initTable():ConcurrentHashMap$Node[] (112 bytes)   not inlining relevance-based (relevance=0.000020, probability=0.000016, bonus=1.000000, nodes=87 > 0.006075)
                              @ 274  java.util.concurrent.ConcurrentHashMap.tabAt(ConcurrentHashMap$Node[], int):ConcurrentHashMap$Node (22 bytes)   relevance-based (relevance=0.138560, probability=0.109468, bonus=1.000000, nodes=11 <= 41.568147)
                            @ 13  java.lang.WeakPairMap$Pair$Weak.first():Object (5 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.ref.Reference.get():Object (5 bytes)   inline accessor method (bytecode parsing)
                            @ 17  java.lang.WeakPairMap$Pair$Weak.second():Object (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.lang.ref.Reference.get():Object (5 bytes)   inline accessor method (bytecode parsing)
                              @ 323  java.lang.String.equals(Object):boolean (56 bytes)   not inlining relevance-based (relevance=0.130870, probability=0.108893, bonus=1.000000, nodes=85 > 39.261048)
                              @ 356  jdk.vm.ci.hotspot.JFR$CompilerPhaseEvent$$Lambda/0x00007f45e0170870.apply(Object):Object (12 bytes)   not inlining relevance-based (relevance=0.000749, probability=0.000592, bonus=1.000000, nodes=28 > 0.224758)
                              @ 398  java.util.concurrent.ConcurrentHashMap$Node.<init>(int, Object, Object):void (20 bytes)   not inlining relevance-based (relevance=0.000749, probability=0.000592, bonus=1.000000, nodes=14 > 0.224758)
                            @ 161  java.util.concurrent.ConcurrentHashMap.resizeStamp(int):int (9 bytes)   inline method (bytecode parsing)
                              @ 570  java.util.concurrent.ConcurrentHashMap.addCount(long, int):void (280 bytes)   not inlining relevance-based (relevance=0.001603, probability=0.001504, bonus=1.000000, nodes=77 > 0.481022)
                            @ 28  java.lang.String.<init>(byte[], byte):void (15 bytes)   inline method (bytecode parsing)
                              @ 4  java.lang.Integer.toString(int):String (55 bytes)   not inlining too large previous low-level graph (low-level-nodes: 370, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=19)
                            @ 49  jdk.internal.math.DoubleToDecimal.append(int):void (19 bytes)   inline method (bytecode parsing)
                            @ 15  jdk.internal.math.MathUtils.pow10(int):long (6 bytes)   inline method (bytecode parsing)
                            @ 47  jdk.internal.math.MathUtils.pow10(int):long (6 bytes)   inline method (bytecode parsing)
                                @ 7  jdk.internal.math.MathUtils.flog10pow2(int):int (11 bytes)   relevance-based (relevance=0.621814, probability=0.554614, bonus=1.000000, nodes=10 <= 186.544342)
                                @ 36  jdk.internal.math.FormattedFPDecimal.set(long, int, int):void (17 bytes)   relevance-based (relevance=0.505641, probability=0.450995, bonus=1.000000, nodes=13 <= 151.692165)
                            @ 8  jdk.internal.math.DoubleToDecimal.append(int):void (19 bytes)   inline method (bytecode parsing)
                                @ 157  jdk.internal.math.DoubleToDecimal.toChars3(int, int, int, int):int (31 bytes)   not inlining relevance-based (relevance=0.093544, probability=0.083434, bonus=1.000000, nodes=33 > 28.063134)
                            @ 8  jdk.internal.math.DoubleToDecimal.append(int):void (19 bytes)   inline method (bytecode parsing)
                                @ 145  jdk.internal.math.DoubleToDecimal.toChars2(int, int, int, int):int (44 bytes)   not inlining relevance-based (relevance=0.004499, probability=0.004013, bonus=1.000000, nodes=45 > 1.349672)
                            @ 54  jdk.internal.math.DoubleToDecimal.append(int):void (19 bytes)   inline method (bytecode parsing)
                                @ 123  jdk.internal.math.DoubleToDecimal.toChars1(int, int, int, int):int (100 bytes)   not inlining relevance-based (relevance=0.018131, probability=0.016172, bonus=1.000000, nodes=55 > 5.439371)
                              @ 123  jdk.internal.math.DoubleToDecimal.toChars(long, int, FormattedFPDecimal):int (161 bytes)   relevance-based (relevance=0.555231, probability=0.554614, bonus=1.000000, nodes=87 <= 166.569157)
                              @ 135  jdk.internal.math.DoubleToDecimal.toDecimal(int, long, int, FormattedFPDecimal):int (385 bytes)   not inlining relevance-based (relevance=0.418203, probability=0.417739, bonus=1.000000, nodes=149 > 125.460973)
                            @ 15  jdk.internal.math.MathUtils.pow10(int):long (6 bytes)   inline method (bytecode parsing)
                            @ 47  jdk.internal.math.MathUtils.pow10(int):long (6 bytes)   inline method (bytecode parsing)
                              @ 7  jdk.internal.math.MathUtils.flog10pow2(int):int (11 bytes)   relevance-based (relevance=1.119950, probability=1.000000, bonus=1.000000, nodes=10 <= 300.000000)
                              @ 36  jdk.internal.math.FormattedFPDecimal.set(long, int, int):void (17 bytes)   relevance-based (relevance=0.910315, probability=0.812818, bonus=1.000000, nodes=13 <= 273.094585)
                            @ 8  jdk.internal.math.DoubleToDecimal.append(int):void (19 bytes)   inline method (bytecode parsing)
                                @ 2  jdk.internal.math.DoubleToDecimal.appendDigit(int):void (22 bytes)   relevance-based (relevance=0.168849, probability=0.150765, bonus=1.000000, nodes=17 <= 50.654814)
                                  @ 2  jdk.internal.math.DoubleToDecimal.y(int):int (20 bytes)   relevance-based (relevance=0.168849, probability=0.150765, bonus=1.000000, nodes=16 <= 50.654814)
                                  @ 26  jdk.internal.math.DoubleToDecimal.appendDigit(int):void (22 bytes)   relevance-based (relevance=0.168849, probability=1.206121, bonus=1.000000, nodes=15 <= 50.654814)
                                @ 13  jdk.internal.math.DoubleToDecimal.append8Digits(int):void (42 bytes)   relevance-based (relevance=0.168849, probability=0.150765, bonus=1.000000, nodes=48 <= 50.654814)
                              @ 157  jdk.internal.math.DoubleToDecimal.toChars3(int, int, int, int):int (31 bytes)   not inlining relevance-based (relevance=0.168849, probability=0.150765, bonus=1.000000, nodes=79 > 50.654814)
                            @ 8  jdk.internal.math.DoubleToDecimal.append(int):void (19 bytes)   inline method (bytecode parsing)
                              @ 145  jdk.internal.math.DoubleToDecimal.toChars2(int, int, int, int):int (44 bytes)   not inlining relevance-based (relevance=0.008088, probability=0.007222, bonus=1.000000, nodes=45 > 2.426475)
                            @ 54  jdk.internal.math.DoubleToDecimal.append(int):void (19 bytes)   inline method (bytecode parsing)
                              @ 123  jdk.internal.math.DoubleToDecimal.toChars1(int, int, int, int):int (100 bytes)   not inlining relevance-based (relevance=0.032697, probability=0.029195, bonus=1.000000, nodes=55 > 9.809154)
                            @ 5  java.util.Objects.checkIndex(int, int):int (7 bytes)   inline method (bytecode parsing)
                              @ 21  java.util.ArrayList.fastRemove(Object[], int):void (44 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=38 <= 300.000000)
                                    @ 3  java.lang.Math.max(int, int):int (11 bytes)   trivial (relevance=0.133981, probability=0.118151, bonus=1.000000, nodes=7)
                                  @ 29  jdk.internal.util.ArraysSupport.newLength(int, int, int):int (27 bytes)   relevance-based (relevance=0.133981, probability=0.118151, bonus=1.000000, nodes=15 <= 40.194428)
                                @ 24  java.lang.AbstractStringBuilder.newCapacity(int):int (59 bytes)   relevance-based (relevance=0.133981, probability=0.118151, bonus=1.000000, nodes=27 <= 40.194428)
                                  @ 25  java.lang.Math.min(int, int):int (11 bytes)   trivial (relevance=0.133983, probability=0.118151, bonus=1.000000, nodes=7)
                                @ 32  java.util.Arrays.copyOf(byte[], int):byte[] (33 bytes)   relevance-based (relevance=0.133981, probability=0.118151, bonus=1.000000, nodes=28 <= 40.194428)
                              @ 10  java.lang.AbstractStringBuilder.ensureCapacityInternal(int):void (39 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=72 <= 300.000000)
                                @ 7  java.lang.AbstractStringBuilder.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=0.999999, bonus=1.000000, nodes=9)
                                @ 40  java.lang.StringLatin1.canEncode(int):boolean (13 bytes)   trivial (relevance=1.000000, probability=3.363691, bonus=1.000000, nodes=9)
                              @ 17  java.lang.AbstractStringBuilder.appendChars(char[], int, int):void (130 bytes)   relevance-based (relevance=1.133980, probability=0.999999, bonus=1.000000, nodes=40 <= 300.000000)
                            @ 4  java.lang.StringBuilder.<init>():void (7 bytes)   inline method (bytecode parsing)
                                @ 3  java.lang.AbstractStringBuilder.<init>(int):void (39 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                                @ 11  java.lang.Double.compare(double, double):int (54 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=25 <= 300.000000)
                                @ 26  java.lang.Double.isNaN(double):boolean (12 bytes)   trivial (relevance=1.026936, probability=1.000000, bonus=1.000000, nodes=7)
                            @ 10  java.util.Formatter$Flags.contains(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 32  java.util.Formatter$Flags.contains(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 55  java.util.Formatter$Flags.contains(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 74  java.lang.StringBuilder.append(char):StringBuilder (8 bytes)   inline method (bytecode parsing)
                                @ 43  java.util.Formatter$FormatSpecifier.leadingSign(StringBuilder, boolean):StringBuilder (80 bytes)   relevance-based (relevance=1.026936, probability=1.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                @ 49  java.lang.Double.isInfinite(double):boolean (17 bytes)   relevance-based (relevance=1.026936, probability=1.000000, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 275  java.lang.StringBuilder.<init>():void (7 bytes)   inline method (bytecode parsing)
                            @ 280  jdk.internal.math.FormattedFPDecimal.getMantissa():char[] (5 bytes)   inline accessor method (bytecode parsing)
                            @ 283  java.lang.StringBuilder.append(char[]):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 299  java.util.Formatter$Flags.contains(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 4  jdk.internal.math.FormattedFPDecimal.<init>():void (5 bytes)   inline method (bytecode parsing)
                                      @ 5  jdk.internal.math.DoubleToDecimal.<init>(boolean):void (21 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=9)
                            @ 49  jdk.internal.math.DoubleToDecimal.append(int):void (19 bytes)   inline method (bytecode parsing)
                            @ 15  jdk.internal.math.MathUtils.pow10(int):long (6 bytes)   inline method (bytecode parsing)
                            @ 47  jdk.internal.math.MathUtils.pow10(int):long (6 bytes)   inline method (bytecode parsing)
                                          @ 7  jdk.internal.math.MathUtils.flog10pow2(int):int (11 bytes)   relevance-based (relevance=0.621002, probability=0.553863, bonus=1.000000, nodes=10 <= 186.300621)
                                          @ 36  jdk.internal.math.FormattedFPDecimal.set(long, int, int):void (17 bytes)   relevance-based (relevance=0.621002, probability=0.553863, bonus=1.000000, nodes=13 <= 186.300621)
                                        @ 123  jdk.internal.math.DoubleToDecimal.toChars(long, int, FormattedFPDecimal):int (161 bytes)   relevance-based (relevance=0.554478, probability=0.553863, bonus=1.000000, nodes=36 <= 166.343329)
                                        @ 135  jdk.internal.math.DoubleToDecimal.toDecimal(int, long, int, FormattedFPDecimal):int (385 bytes)   not inlining relevance-based (relevance=0.418959, probability=0.418495, bonus=1.000000, nodes=149 > 125.687837)
                                      @ 10  jdk.internal.math.DoubleToDecimal.toDecimal(double, FormattedFPDecimal):int (220 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=104 <= 300.000000)
                                    @ 12  jdk.internal.math.DoubleToDecimal.split(double, FormattedFPDecimal):void (15 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=114 <= 300.000000)
                            @ 64  jdk.internal.math.MathUtils.pow10(int):long (6 bytes)   inline method (bytecode parsing)
                            @ 119  jdk.internal.math.MathUtils.pow10(int):long (6 bytes)   inline method (bytecode parsing)
                                      @ 14  jdk.internal.math.FormattedFPDecimal.round(long):void (149 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=86 <= 300.000000)
                                          @ 29  jdk.internal.math.FormattedFPDecimal.fillWithZeros(int, int):void (20 bytes)   relevance-based (relevance=1.000000, probability=0.741178, bonus=1.000000, nodes=22 <= 300.000000)
                            @ 30  jdk.internal.math.FormattedFPDecimal.toDigit(long):char (6 bytes)   inline method (bytecode parsing)
                              @ 2  jdk.internal.math.FormattedFPDecimal.toDigit(int):char (6 bytes)   inline method (bytecode parsing)
                                          @ 42  jdk.internal.math.FormattedFPDecimal.fillWithDigits(long, int, int):long (42 bytes)   relevance-based (relevance=1.000000, probability=0.741178, bonus=1.000000, nodes=37 <= 300.000000)
                                        @ 8  jdk.internal.math.FormattedFPDecimal.plainCharsPureInteger():void (47 bytes)   relevance-based (relevance=1.000000, probability=0.741178, bonus=1.000000, nodes=59 <= 300.000000)
                            @ 30  jdk.internal.math.FormattedFPDecimal.toDigit(long):char (6 bytes)   inline method (bytecode parsing)
                              @ 2  jdk.internal.math.FormattedFPDecimal.toDigit(int):char (6 bytes)   inline method (bytecode parsing)
                                          @ 34  jdk.internal.math.FormattedFPDecimal.fillWithDigits(long, int, int):long (42 bytes)   relevance-based (relevance=0.127370, probability=0.094404, bonus=1.000000, nodes=37 <= 38.211143)
                                        @ 27  jdk.internal.math.FormattedFPDecimal.plainCharsMixed():void (71 bytes)   not inlining relevance-based (relevance=0.127370, probability=0.094404, bonus=1.000000, nodes=54 > 38.211143)
                            @ 53  jdk.internal.math.FormattedFPDecimal.fillWithZeros(int, int):void (20 bytes)   inline method (bytecode parsing)
                            @ 30  jdk.internal.math.FormattedFPDecimal.toDigit(long):char (6 bytes)   inline method (bytecode parsing)
                              @ 2  jdk.internal.math.FormattedFPDecimal.toDigit(int):char (6 bytes)   inline method (bytecode parsing)
                                          @ 36  jdk.internal.math.FormattedFPDecimal.fillWithDigits(long, int, int):long (42 bytes)   relevance-based (relevance=0.221833, probability=0.164417, bonus=1.000000, nodes=37 <= 66.549762)
                                        @ 34  jdk.internal.math.FormattedFPDecimal.plainCharsPureFraction():void (65 bytes)   not inlining relevance-based (relevance=0.221833, probability=0.164417, bonus=1.000000, nodes=70 > 66.549762)
                                      @ 18  jdk.internal.math.FormattedFPDecimal.plainChars():FormattedFPDecimal (39 bytes)   relevance-based (relevance=1.512650, probability=1.000000, bonus=1.000000, nodes=81 <= 300.000000)
                                    @ 56  jdk.internal.math.FormattedFPDecimal.plain(int):FormattedFPDecimal (22 bytes)   relevance-based (relevance=1.001109, probability=1.000000, bonus=1.000000, nodes=165 <= 300.000000)
                                  @ 266  jdk.internal.math.FormattedFPDecimal.valueOf(double, int, char):FormattedFPDecimal (96 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=273 <= 300.000000)
                                @ 77  java.util.Formatter$FormatSpecifier.print(Formatter, StringBuilder, double, Locale, int, char, int, boolean):void (912 bytes)   not inlining relevance-based (relevance=1.026936, probability=1.000000, bonus=1.000000, nodes=311 > 300.000000)
                            @ 11  java.util.Formatter$Flags.contains(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                                @ 114  java.util.Formatter$FormatSpecifier.trailingSign(StringBuilder, boolean):StringBuilder (26 bytes)   trivial (relevance=1.026936, probability=1.000000, bonus=1.000000, nodes=6)
                            @ 22  java.util.Formatter$Flags.contains(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 1  java.lang.AbstractStringBuilder.length():int (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 31  java.lang.StringBuilder.length():int (5 bytes)   trivial (relevance=0.001468, probability=0.001466, bonus=1.000000, nodes=5)
                            @ 2  java.lang.StringBuilder.append(CharSequence):StringBuilder (8 bytes)   inline method (bytecode parsing)
                                      @ 37  java.lang.AbstractStringBuilder.append(AbstractStringBuilder):AbstractStringBuilder (70 bytes)   not inlining too large previous low-level graph (low-level-nodes: 359, relevance=0.001468, probability=0.001466, bonus=1.000000, nodes=31)
                                    @ 2  java.lang.AbstractStringBuilder.append(CharSequence):AbstractStringBuilder (54 bytes)   trivial (relevance=0.001468, probability=0.001466, bonus=1.000000, nodes=8)
                                  @ 82  java.lang.StringBuilder.append(CharSequence):Appendable (6 bytes)   not inlining relevance-based (relevance=0.001468, probability=0.001466, bonus=1.000000, nodes=10 > 0.440399)
                            @ 2  java.lang.StringBuilder.append(CharSequence):StringBuilder (8 bytes)   inline method (bytecode parsing)
                                      @ 37  java.lang.AbstractStringBuilder.append(AbstractStringBuilder):AbstractStringBuilder (70 bytes)   not inlining too large previous low-level graph (low-level-nodes: 359, relevance=1.000000, probability=0.998534, bonus=1.000000, nodes=31)
                                    @ 2  java.lang.AbstractStringBuilder.append(CharSequence):AbstractStringBuilder (54 bytes)   trivial (relevance=1.000000, probability=0.998534, bonus=1.000000, nodes=8)
                                  @ 10  java.lang.StringBuilder.append(CharSequence):Appendable (6 bytes)   relevance-based (relevance=1.000000, probability=0.998534, bonus=1.000000, nodes=10 <= 300.000000)
                                @ 154  java.util.Formatter$FormatSpecifier.appendJustified(Appendable, CharSequence):void (89 bytes)   relevance-based (relevance=1.026936, probability=1.000000, bonus=1.000000, nodes=39 <= 300.000000)
                              @ 55  java.util.Formatter$FormatSpecifier.print(Formatter, double, Locale):void (158 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=96 <= 300.000000)
                            @ 1  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                            @ 5  java.lang.Double.doubleValue():double (5 bytes)   inline method (bytecode parsing)
                            @ 1  java.lang.StringBuilder.length():int (5 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.AbstractStringBuilder.length():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 17  java.lang.StringBuilder.charAt(int):char (6 bytes)   inline method (bytecode parsing)
                            @ 98  java.lang.StringBuilder.append(char):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 5  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                                @ 9  java.lang.AbstractStringBuilder.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=1.757494, bonus=1.000000, nodes=9)
                              @ 2  java.lang.AbstractStringBuilder.charAt(int):char (36 bytes)   relevance-based (relevance=1.173259, probability=1.757494, bonus=1.000000, nodes=19 <= 300.000000)
                                      @ 3  java.lang.Math.max(int, int):int (11 bytes)   trivial (relevance=0.099209, probability=0.087485, bonus=1.000000, nodes=7)
                                    @ 29  jdk.internal.util.ArraysSupport.newLength(int, int, int):int (27 bytes)   relevance-based (relevance=0.099209, probability=0.087485, bonus=1.000000, nodes=15 <= 29.762604)
                                  @ 24  java.lang.AbstractStringBuilder.newCapacity(int):int (59 bytes)   relevance-based (relevance=0.099209, probability=0.087485, bonus=1.000000, nodes=27 <= 29.762604)
                                    @ 25  java.lang.Math.min(int, int):int (11 bytes)   trivial (relevance=0.099210, probability=0.087485, bonus=1.000000, nodes=7)
                                  @ 32  java.util.Arrays.copyOf(byte[], int):byte[] (33 bytes)   relevance-based (relevance=0.099209, probability=0.087485, bonus=1.000000, nodes=28 <= 29.762604)
                                @ 7  java.lang.AbstractStringBuilder.ensureCapacityInternal(int):void (39 bytes)   relevance-based (relevance=0.740466, probability=0.740453, bonus=1.000000, nodes=72 <= 222.139773)
                                @ 11  java.lang.AbstractStringBuilder.isLatin1():boolean (19 bytes)   trivial (relevance=0.839658, probability=0.740452, bonus=1.000000, nodes=9)
                                @ 18  java.lang.StringLatin1.canEncode(int):boolean (13 bytes)   trivial (relevance=0.839644, probability=0.740439, bonus=1.000000, nodes=5)
                                @ 46  java.lang.AbstractStringBuilder.isLatin1():boolean (19 bytes)   trivial (relevance=0.000015, probability=0.000013, bonus=1.000000, nodes=9)
                            @ 2  java.lang.StringUTF16.checkIndex(int, byte[]):void (9 bytes)   inline method (bytecode parsing)
                              @ 2  java.lang.StringUTF16.length(byte[]):int (5 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                                @ 72  java.lang.StringUTF16.putCharSB(byte[], int, int):void (12 bytes)   not inlining relevance-based (relevance=0.000015, probability=0.000013, bonus=1.000000, nodes=15 > 0.004537)
                              @ 2  java.lang.AbstractStringBuilder.append(char):AbstractStringBuilder (77 bytes)   relevance-based (relevance=0.740453, probability=0.740453, bonus=1.000000, nodes=102 <= 222.135772)
                            @ 10  java.lang.StringBuilder.append(char):StringBuilder (8 bytes)   inline method (bytecode parsing)
                                        @ 3  java.lang.Math.max(int, int):int (11 bytes)   trivial (relevance=0.099495, probability=0.553649, bonus=1.000000, nodes=7)
                                      @ 29  jdk.internal.util.ArraysSupport.newLength(int, int, int):int (27 bytes)   relevance-based (relevance=0.099495, probability=0.553649, bonus=1.000000, nodes=15 <= 29.848576)
                                    @ 24  java.lang.AbstractStringBuilder.newCapacity(int):int (59 bytes)   relevance-based (relevance=0.099495, probability=0.553649, bonus=1.000000, nodes=27 <= 29.848576)
                                      @ 25  java.lang.Math.min(int, int):int (11 bytes)   trivial (relevance=0.099496, probability=0.553646, bonus=1.000000, nodes=7)
                                    @ 32  java.util.Arrays.copyOf(byte[], int):byte[] (33 bytes)   relevance-based (relevance=0.099495, probability=0.553649, bonus=1.000000, nodes=28 <= 29.848576)
                                  @ 7  java.lang.AbstractStringBuilder.ensureCapacityInternal(int):void (39 bytes)   relevance-based (relevance=0.742605, probability=4.685934, bonus=1.000000, nodes=72 <= 222.781446)
                                  @ 11  java.lang.AbstractStringBuilder.isLatin1():boolean (19 bytes)   trivial (relevance=0.842084, probability=4.685928, bonus=1.000000, nodes=9)
                                  @ 18  java.lang.StringLatin1.canEncode(int):boolean (13 bytes)   trivial (relevance=0.842070, probability=4.685849, bonus=1.000000, nodes=5)
                                  @ 46  java.lang.AbstractStringBuilder.isLatin1():boolean (19 bytes)   trivial (relevance=0.000015, probability=0.000084, bonus=1.000000, nodes=9)
                            @ 2  java.lang.StringUTF16.checkIndex(int, byte[]):void (9 bytes)   inline method (bytecode parsing)
                              @ 2  java.lang.StringUTF16.length(byte[]):int (5 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                                  @ 72  java.lang.StringUTF16.putCharSB(byte[], int, int):void (12 bytes)   not inlining relevance-based (relevance=0.000015, probability=0.000084, bonus=1.000000, nodes=15 > 0.004550)
                                @ 2  java.lang.AbstractStringBuilder.append(char):AbstractStringBuilder (77 bytes)   relevance-based (relevance=0.742591, probability=4.685934, bonus=1.000000, nodes=102 <= 222.777433)
                              @ 108  java.util.Formatter$FormatSpecifier.trailingZeros(StringBuilder, int):void (21 bytes)   relevance-based (relevance=0.742591, probability=0.742591, bonus=1.000000, nodes=116 <= 222.777433)
                                @ 29  jdk.internal.math.FormattedFPDecimal.fillWithZeros(int, int):void (20 bytes)   relevance-based (relevance=1.000000, probability=0.738076, bonus=1.000000, nodes=22 <= 300.000000)
                            @ 30  jdk.internal.math.FormattedFPDecimal.toDigit(long):char (6 bytes)   inline method (bytecode parsing)
                              @ 2  jdk.internal.math.FormattedFPDecimal.toDigit(int):char (6 bytes)   inline method (bytecode parsing)
                                @ 42  jdk.internal.math.FormattedFPDecimal.fillWithDigits(long, int, int):long (42 bytes)   relevance-based (relevance=1.000000, probability=0.738076, bonus=1.000000, nodes=37 <= 300.000000)
                              @ 8  jdk.internal.math.FormattedFPDecimal.plainCharsPureInteger():void (47 bytes)   relevance-based (relevance=1.000000, probability=0.738076, bonus=1.000000, nodes=59 <= 300.000000)
                            @ 30  jdk.internal.math.FormattedFPDecimal.toDigit(long):char (6 bytes)   inline method (bytecode parsing)
                              @ 2  jdk.internal.math.FormattedFPDecimal.toDigit(int):char (6 bytes)   inline method (bytecode parsing)
                                @ 34  jdk.internal.math.FormattedFPDecimal.fillWithDigits(long, int, int):long (42 bytes)   relevance-based (relevance=0.129410, probability=0.095514, bonus=1.000000, nodes=37 <= 38.822866)
                              @ 27  jdk.internal.math.FormattedFPDecimal.plainCharsMixed():void (71 bytes)   not inlining relevance-based (relevance=0.129410, probability=0.095514, bonus=1.000000, nodes=54 > 38.822866)
                            @ 53  jdk.internal.math.FormattedFPDecimal.fillWithZeros(int, int):void (20 bytes)   inline method (bytecode parsing)
                            @ 30  jdk.internal.math.FormattedFPDecimal.toDigit(long):char (6 bytes)   inline method (bytecode parsing)
                              @ 2  jdk.internal.math.FormattedFPDecimal.toDigit(int):char (6 bytes)   inline method (bytecode parsing)
                                @ 36  jdk.internal.math.FormattedFPDecimal.fillWithDigits(long, int, int):long (42 bytes)   relevance-based (relevance=0.225464, probability=0.166410, bonus=1.000000, nodes=37 <= 67.639257)
                              @ 34  jdk.internal.math.FormattedFPDecimal.plainCharsPureFraction():void (65 bytes)   not inlining relevance-based (relevance=0.225464, probability=0.166410, bonus=1.000000, nodes=70 > 67.639257)
                            @ 23  jdk.graal.compiler.replacements.AllocationSnippets.allocateArrayImpl(Word, int, int, int, AllocationSnippets$FillContent, int, boolean, boolean, boolean, boolean, AllocationSnippets$AllocationProfilingData):Object (178 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getTLABInfo():Word (5 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getThread():Word (8 bytes)   inline method (bytecode parsing)
                                  @ 4  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.registerAsWord(Register):Word (7 bytes)   inline method (bytecode parsing)
                              @ 9  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.readTlabTop(Word):Word (5 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.readTlabTop(Word):Word (17 bytes)   inline method (bytecode parsing)
                              @ 17  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.readTlabEnd(Word):Word (5 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.readTlabEnd(Word):Word (17 bytes)   inline method (bytecode parsing)
                              @ 36  jdk.graal.compiler.replacements.ReplacementsUtil.dynamicAssert(boolean, String):void (12 bytes)   inline method (bytecode parsing)
                              @ 44  jdk.graal.compiler.replacements.AllocationSnippets.arrayAllocationSize(int, int, int):UnsignedWord (18 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.objectAlignment():int (7 bytes)   inline method (bytecode parsing)
                                @ 11  jdk.graal.compiler.replacements.AllocationSnippets.arrayAllocationSize(int, int, int, int):long (32 bytes)   inline method (bytecode parsing)
                              @ 59  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.useTLAB():boolean (7 bytes)   inline method (bytecode parsing)
                              @ 72  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.shouldAllocateInTLAB(UnsignedWord, boolean):boolean (33 bytes)   inline method (bytecode parsing)
                              @ 102  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.writeTlabTop(Word, Word):void (6 bytes)   inline method (bytecode parsing)
                                @ 2  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.writeTlabTop(Word, Word):void (15 bytes)   inline method (bytecode parsing)
                              @ 109  jdk.graal.compiler.replacements.AllocationSnippets.emitPrefetchAllocate(Word, boolean):void (61 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getPrefetchStyle():int (7 bytes)   inline method (bytecode parsing)
                                @ 9  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getPrefetchLines(boolean):int (18 bytes)   inline method (bytecode parsing)
                                @ 14  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getPrefetchStepSize():int (7 bytes)   inline method (bytecode parsing)
                                @ 20  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getPrefetchDistance():int (7 bytes)   inline method (bytecode parsing)
                              @ 136  jdk.graal.compiler.replacements.AllocationSnippets.formatArray(Word, UnsignedWord, int, Word, AllocationSnippets$FillContent, boolean, int, boolean, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):Object (53 bytes)   inline method (bytecode parsing)
                                @ 5  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.initializeObjectHeader(Word, Word, boolean):void (29 bytes)   inline method (bytecode parsing)
                                  @ 25  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.initializeObjectHeader(Word, Word, KlassPointer):void (20 bytes)   inline method (bytecode parsing)
                                @ 11  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.arrayLengthOffset():int (7 bytes)   inline method (bytecode parsing)
                                @ 15  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                                @ 38  jdk.graal.compiler.replacements.AllocationSnippets.fillContents(Word, AllocationSnippets$FillContent, int, UnsignedWord, boolean, boolean, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):void (58 bytes)   inline method (bytecode parsing)
                                  @ 22  jdk.graal.compiler.replacements.AllocationSnippets.zeroMemory(Word, int, UnsignedWord, boolean, boolean, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):void (19 bytes)   inline method (bytecode parsing)
                                    @ 15  jdk.graal.compiler.replacements.AllocationSnippets.fillMemory(long, Word, int, UnsignedWord, boolean, boolean, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):void (194 bytes)   inline method (bytecode parsing)
                                      @ 17  jdk.graal.compiler.replacements.ReplacementsUtil.dynamicAssert(boolean, String):void (12 bytes)   inline method (bytecode parsing)
                                      @ 56  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                                      @ 89  jdk.graal.compiler.replacements.ReplacementsUtil.dynamicAssert(boolean, String):void (12 bytes)   inline method (bytecode parsing)
                                      @ 153  jdk.graal.compiler.replacements.ReplacementsUtil.staticAssert(boolean, String):void (12 bytes)   inline method (bytecode parsing)
                                      @ 167  jdk.graal.compiler.replacements.AllocationSnippets.fillMemoryAlignedUnrollable(long, Word, UnsignedWord, UnsignedWord, boolean, AllocationSnippets$AllocationSnippetCounters):void (68 bytes)   inline method (bytecode parsing)
                                        @ 5  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                          @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                                        @ 44  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                                      @ 190  jdk.graal.compiler.replacements.AllocationSnippets.fillMemoryAligned(long, Word, UnsignedWord, UnsignedWord, boolean, UnsignedWord, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):void (155 bytes)   inline method (bytecode parsing)
                                        @ 17  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getMinimalBulkZeroingSize():int (7 bytes)   inline method (bytecode parsing)
                                        @ 36  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                          @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                                        @ 53  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                                        @ 105  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                          @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                                        @ 134  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                                @ 44  jdk.graal.compiler.replacements.AllocationSnippets.emitMemoryBarrierIf(boolean):void (14 bytes)   inline method (bytecode parsing)
                                  @ 7  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                              @ 152  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                              @ 158  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.callNewArrayStub(Word, int):Object (35 bytes)   inline method (bytecode parsing)
                                @ 22  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.nonNullOrDeopt(Object):Object (27 bytes)   inline method (bytecode parsing)
                              @ 168  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.profileAllocation(AllocationSnippets$AllocationProfilingData, UnsignedWord):void (51 bytes)   inline method (bytecode parsing)
                              @ 174  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.verifyOop(Object):Object (5 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.verifyOop(Object):Object (19 bytes)   inline method (bytecode parsing)
                            @ 64  jdk.internal.math.MathUtils.pow10(int):long (6 bytes)   inline method (bytecode parsing)
                            @ 119  jdk.internal.math.MathUtils.pow10(int):long (6 bytes)   inline method (bytecode parsing)
                              @ 14  jdk.internal.math.FormattedFPDecimal.round(long):void (149 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=86 <= 300.000000)
                                  @ 29  jdk.internal.math.FormattedFPDecimal.fillWithZeros(int, int):void (20 bytes)   relevance-based (relevance=1.000000, probability=0.737724, bonus=1.000000, nodes=22 <= 300.000000)
                            @ 30  jdk.internal.math.FormattedFPDecimal.toDigit(long):char (6 bytes)   inline method (bytecode parsing)
                              @ 2  jdk.internal.math.FormattedFPDecimal.toDigit(int):char (6 bytes)   inline method (bytecode parsing)
                                  @ 42  jdk.internal.math.FormattedFPDecimal.fillWithDigits(long, int, int):long (42 bytes)   relevance-based (relevance=1.000000, probability=0.737724, bonus=1.000000, nodes=37 <= 300.000000)
                                @ 8  jdk.internal.math.FormattedFPDecimal.plainCharsPureInteger():void (47 bytes)   relevance-based (relevance=1.000000, probability=0.737724, bonus=1.000000, nodes=59 <= 300.000000)
                            @ 30  jdk.internal.math.FormattedFPDecimal.toDigit(long):char (6 bytes)   inline method (bytecode parsing)
                              @ 2  jdk.internal.math.FormattedFPDecimal.toDigit(int):char (6 bytes)   inline method (bytecode parsing)
                                  @ 34  jdk.internal.math.FormattedFPDecimal.fillWithDigits(long, int, int):long (42 bytes)   relevance-based (relevance=0.129538, probability=0.095564, bonus=1.000000, nodes=37 <= 38.861531)
                                @ 27  jdk.internal.math.FormattedFPDecimal.plainCharsMixed():void (71 bytes)   not inlining relevance-based (relevance=0.129538, probability=0.095564, bonus=1.000000, nodes=54 > 38.861531)
                            @ 53  jdk.internal.math.FormattedFPDecimal.fillWithZeros(int, int):void (20 bytes)   inline method (bytecode parsing)
                            @ 30  jdk.internal.math.FormattedFPDecimal.toDigit(long):char (6 bytes)   inline method (bytecode parsing)
                              @ 2  jdk.internal.math.FormattedFPDecimal.toDigit(int):char (6 bytes)   inline method (bytecode parsing)
                                  @ 36  jdk.internal.math.FormattedFPDecimal.fillWithDigits(long, int, int):long (42 bytes)   relevance-based (relevance=0.225983, probability=0.166713, bonus=1.000000, nodes=37 <= 67.794842)
                                @ 34  jdk.internal.math.FormattedFPDecimal.plainCharsPureFraction():void (65 bytes)   not inlining relevance-based (relevance=0.225983, probability=0.166713, bonus=1.000000, nodes=70 > 67.794842)
                              @ 18  jdk.internal.math.FormattedFPDecimal.plainChars():FormattedFPDecimal (39 bytes)   relevance-based (relevance=1.518647, probability=1.000000, bonus=1.000000, nodes=81 <= 300.000000)
                            @ 64  jdk.internal.math.MathUtils.pow10(int):long (6 bytes)   inline method (bytecode parsing)
                            @ 119  jdk.internal.math.MathUtils.pow10(int):long (6 bytes)   inline method (bytecode parsing)
                            @ 275  java.lang.StringBuilder.<init>():void (7 bytes)   inline method (bytecode parsing)
                            @ 280  jdk.internal.math.FormattedFPDecimal.getMantissa():char[] (5 bytes)   inline accessor method (bytecode parsing)
                            @ 283  java.lang.StringBuilder.append(char[]):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 299  java.util.Formatter$Flags.contains(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 4  jdk.internal.math.FormattedFPDecimal.<init>():void (5 bytes)   inline method (bytecode parsing)
                                  @ 5  jdk.internal.math.DoubleToDecimal.<init>(boolean):void (21 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=9)
                            @ 49  jdk.internal.math.DoubleToDecimal.append(int):void (19 bytes)   inline method (bytecode parsing)
                            @ 15  jdk.internal.math.MathUtils.pow10(int):long (6 bytes)   inline method (bytecode parsing)
                            @ 47  jdk.internal.math.MathUtils.pow10(int):long (6 bytes)   inline method (bytecode parsing)
                                      @ 7  jdk.internal.math.MathUtils.flog10pow2(int):int (11 bytes)   relevance-based (relevance=0.616403, probability=0.549743, bonus=1.000000, nodes=10 <= 184.920989)
                                      @ 36  jdk.internal.math.FormattedFPDecimal.set(long, int, int):void (17 bytes)   relevance-based (relevance=0.616403, probability=0.549743, bonus=1.000000, nodes=13 <= 184.920989)
                                    @ 123  jdk.internal.math.DoubleToDecimal.toChars(long, int, FormattedFPDecimal):int (161 bytes)   relevance-based (relevance=0.550372, probability=0.549743, bonus=1.000000, nodes=36 <= 165.111489)
                                    @ 135  jdk.internal.math.DoubleToDecimal.toDecimal(int, long, int, FormattedFPDecimal):int (385 bytes)   not inlining relevance-based (relevance=0.422418, probability=0.421935, bonus=1.000000, nodes=149 > 126.725300)
                                  @ 10  jdk.internal.math.DoubleToDecimal.toDecimal(double, FormattedFPDecimal):int (220 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=118 <= 300.000000)
                                @ 12  jdk.internal.math.DoubleToDecimal.split(double, FormattedFPDecimal):void (15 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=128 <= 300.000000)
                                @ 56  jdk.internal.math.FormattedFPDecimal.plain(int):FormattedFPDecimal (22 bytes)   not inlining too large previous low-level graph (low-level-nodes: 377, relevance=1.001143, probability=1.000000, bonus=1.000000, nodes=17)
                              @ 266  jdk.internal.math.FormattedFPDecimal.valueOf(double, int, char):FormattedFPDecimal (96 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=134 <= 300.000000)
                              @ 3  java.lang.AbstractStringBuilder.<init>(int):void (39 bytes)   relevance-based (relevance=1.001143, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                              @ 2  java.lang.AbstractStringBuilder.append(char[]):AbstractStringBuilder (22 bytes)   not inlining too large previous low-level graph (low-level-nodes: 369, relevance=1.001143, probability=1.000000, bonus=1.000000, nodes=15)
                            @ 1  java.lang.StringBuilder.length():int (5 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.AbstractStringBuilder.length():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 17  java.lang.StringBuilder.charAt(int):char (6 bytes)   inline method (bytecode parsing)
                            @ 98  java.lang.StringBuilder.append(char):StringBuilder (8 bytes)   inline method (bytecode parsing)
                              @ 293  java.util.Formatter$FormatSpecifier.addZeros(StringBuilder, int):void (112 bytes)   not inlining too large previous low-level graph (low-level-nodes: 965, relevance=1.001143, probability=1.000000, bonus=1.000000, nodes=61)
                            @ 13  java.lang.StringBuilder.length():int (5 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.AbstractStringBuilder.length():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 101  java.util.Formatter$Flags.contains(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 261  java.lang.StringBuilder.append(char):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 291  java.lang.StringBuilder.append(char):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 337  java.lang.StringBuilder.length():int (5 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.AbstractStringBuilder.length():int (5 bytes)   inline accessor method (bytecode parsing)
                              @ 358  java.util.Formatter$FormatSpecifier.localizedMagnitude(Formatter, StringBuilder, CharSequence, int, int, int, Locale):StringBuilder (381 bytes)   not inlining too large previous low-level graph (low-level-nodes: 1021, relevance=1.001143, probability=1.000000, bonus=1.000000, nodes=98)
                            @ 4  jdk.internal.math.FormattedFPDecimal.<init>():void (5 bytes)   inline method (bytecode parsing)
                                @ 5  jdk.internal.math.DoubleToDecimal.<init>(boolean):void (21 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=9)
                            @ 49  jdk.internal.math.DoubleToDecimal.append(int):void (19 bytes)   inline method (bytecode parsing)
                            @ 15  jdk.internal.math.MathUtils.pow10(int):long (6 bytes)   inline method (bytecode parsing)
                            @ 47  jdk.internal.math.MathUtils.pow10(int):long (6 bytes)   inline method (bytecode parsing)
                                    @ 7  jdk.internal.math.MathUtils.flog10pow2(int):int (11 bytes)   relevance-based (relevance=0.616265, probability=0.549621, bonus=1.000000, nodes=10 <= 184.879491)
                                    @ 36  jdk.internal.math.FormattedFPDecimal.set(long, int, int):void (17 bytes)   relevance-based (relevance=0.616265, probability=0.549621, bonus=1.000000, nodes=13 <= 184.879491)
                                  @ 123  jdk.internal.math.DoubleToDecimal.toChars(long, int, FormattedFPDecimal):int (161 bytes)   relevance-based (relevance=0.550248, probability=0.549621, bonus=1.000000, nodes=36 <= 165.074436)
                                  @ 135  jdk.internal.math.DoubleToDecimal.toDecimal(int, long, int, FormattedFPDecimal):int (385 bytes)   not inlining relevance-based (relevance=0.422461, probability=0.421980, bonus=1.000000, nodes=149 > 126.738233)
                                @ 10  jdk.internal.math.DoubleToDecimal.toDecimal(double, FormattedFPDecimal):int (220 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=118 <= 300.000000)
                              @ 12  jdk.internal.math.DoubleToDecimal.split(double, FormattedFPDecimal):void (15 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=128 <= 300.000000)
                              @ 56  jdk.internal.math.FormattedFPDecimal.plain(int):FormattedFPDecimal (22 bytes)   not inlining too large previous low-level graph (low-level-nodes: 377, relevance=1.001140, probability=1.000000, bonus=1.000000, nodes=17)
                            @ 4  java.lang.StringBuilder.<init>():void (7 bytes)   inline method (bytecode parsing)
                              @ 3  java.lang.AbstractStringBuilder.<init>(int):void (39 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                              @ 11  java.lang.Double.compare(double, double):int (54 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=23 <= 300.000000)
                              @ 26  java.lang.Double.isNaN(double):boolean (12 bytes)   trivial (relevance=1.029051, probability=1.000000, bonus=1.000000, nodes=8)
                            @ 10  java.util.Formatter$Flags.contains(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 32  java.util.Formatter$Flags.contains(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 55  java.util.Formatter$Flags.contains(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 8  java.util.Arrays$ArrayItr.<init>(Object[]):void (10 bytes)   inline method (bytecode parsing)
                            @ 74  java.lang.StringBuilder.append(char):StringBuilder (8 bytes)   inline method (bytecode parsing)
                                  @ 5  java.util.ArrayList$Itr.<init>(ArrayList):void (26 bytes)   relevance-based (relevance=1.000000, probability=0.992199, bonus=1.000000, nodes=15 <= 300.000000)
                              @ 43  java.util.Formatter$FormatSpecifier.leadingSign(StringBuilder, boolean):StringBuilder (80 bytes)   relevance-based (relevance=1.029051, probability=1.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                @ 17  java.util.ArrayList.iterator():Iterator (9 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=26 <= 300.000000)
                              @ 49  java.lang.Double.isInfinite(double):boolean (17 bytes)   relevance-based (relevance=1.029051, probability=1.000000, bonus=1.000000, nodes=10 <= 300.000000)
                              @ 5  java.util.Collections$UnmodifiableCollection$1.<init>(Collections$UnmodifiableCollection):void (26 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=49 <= 300.000000)
                            @ 275  java.lang.StringBuilder.<init>():void (7 bytes)   inline method (bytecode parsing)
                            @ 280  jdk.internal.math.FormattedFPDecimal.getMantissa():char[] (5 bytes)   inline accessor method (bytecode parsing)
                            @ 283  java.lang.StringBuilder.append(char[]):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 299  java.util.Formatter$Flags.contains(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                              @ 77  java.util.Formatter$FormatSpecifier.print(Formatter, StringBuilder, double, Locale, int, char, int, boolean):void (912 bytes)   not inlining too large previous low-level graph (low-level-nodes: 540, relevance=1.029051, probability=1.000000, bonus=1.000000, nodes=51)
                            @ 11  java.util.Formatter$Flags.contains(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                              @ 114  java.util.Formatter$FormatSpecifier.trailingSign(StringBuilder, boolean):StringBuilder (26 bytes)   trivial (relevance=1.029051, probability=1.000000, bonus=1.000000, nodes=6)
                            @ 22  java.util.Formatter$Flags.contains(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 1  java.lang.AbstractStringBuilder.length():int (5 bytes)   inline accessor method (bytecode parsing)
                                @ 31  java.lang.StringBuilder.length():int (5 bytes)   trivial (relevance=0.001468, probability=0.001466, bonus=1.000000, nodes=5)
                            @ 2  java.lang.StringBuilder.append(CharSequence):StringBuilder (8 bytes)   inline method (bytecode parsing)
                                    @ 37  java.lang.AbstractStringBuilder.append(AbstractStringBuilder):AbstractStringBuilder (70 bytes)   not inlining too large previous low-level graph (low-level-nodes: 359, relevance=0.001468, probability=0.001466, bonus=1.000000, nodes=31)
                                  @ 2  java.lang.AbstractStringBuilder.append(CharSequence):AbstractStringBuilder (54 bytes)   trivial (relevance=0.001468, probability=0.001466, bonus=1.000000, nodes=8)
                                @ 82  java.lang.StringBuilder.append(CharSequence):Appendable (6 bytes)   not inlining relevance-based (relevance=0.001468, probability=0.001466, bonus=1.000000, nodes=10 > 0.440399)
                            @ 2  java.lang.StringBuilder.append(CharSequence):StringBuilder (8 bytes)   inline method (bytecode parsing)
                                    @ 37  java.lang.AbstractStringBuilder.append(AbstractStringBuilder):AbstractStringBuilder (70 bytes)   not inlining too large previous low-level graph (low-level-nodes: 359, relevance=1.000000, probability=0.998534, bonus=1.000000, nodes=31)
                                  @ 2  java.lang.AbstractStringBuilder.append(CharSequence):AbstractStringBuilder (54 bytes)   trivial (relevance=1.000000, probability=0.998534, bonus=1.000000, nodes=8)
                                @ 10  java.lang.StringBuilder.append(CharSequence):Appendable (6 bytes)   relevance-based (relevance=1.000000, probability=0.998534, bonus=1.000000, nodes=10 <= 300.000000)
                              @ 154  java.util.Formatter$FormatSpecifier.appendJustified(Appendable, CharSequence):void (89 bytes)   relevance-based (relevance=1.029051, probability=1.000000, bonus=1.000000, nodes=39 <= 300.000000)
                            @ 14  java.lang.Math.max(int, int):int (11 bytes)   inline method (bytecode parsing)
                            @ 1  org.graalvm.collections.EconomicMapImpl.size():int (10 bytes)   inline method (bytecode parsing)
                            @ 84  org.graalvm.collections.EconomicMapImpl.getKey(int):Object (9 bytes)   inline method (bytecode parsing)
                              @ 87  org.graalvm.collections.EconomicMapImpl.createHash():void (109 bytes)   not inlining too large previous low-level graph (low-level-nodes: 1180, relevance=0.005737, probability=0.005669, bonus=1.000000, nodes=57)
                                @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                              @ 5  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=8)
                              @ 26  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                            @ 2  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                                @ 2  java.lang.AbstractStringBuilder.append(String):AbstractStringBuilder (45 bytes)   not inlining too large previous low-level graph (low-level-nodes: 368, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=23)
                              @ 58  java.lang.StringBuilder.append(String):AbstractStringBuilder (6 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=9)
                            @ 28  java.lang.Integer.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.Number.<init>():void (5 bytes)   inline method (bytecode parsing)
                              @ 46  java.lang.Object.equals(Object):boolean (11 bytes)   trivial (relevance=1.117432, probability=8.038214, bonus=1.000000, nodes=9)
                              @ 7  java.lang.Long.stringSize(long):int (55 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=45 <= 300.000000)
                                    @ 3  java.lang.Math.max(int, int):int (11 bytes)   trivial (relevance=0.133981, probability=0.118151, bonus=1.000000, nodes=7)
                                  @ 29  jdk.internal.util.ArraysSupport.newLength(int, int, int):int (27 bytes)   relevance-based (relevance=0.133981, probability=0.118151, bonus=1.000000, nodes=15 <= 40.194428)
                                @ 24  java.lang.AbstractStringBuilder.newCapacity(int):int (59 bytes)   relevance-based (relevance=0.133981, probability=0.118151, bonus=1.000000, nodes=27 <= 40.194428)
                                  @ 25  java.lang.Math.min(int, int):int (11 bytes)   trivial (relevance=0.133983, probability=0.118151, bonus=1.000000, nodes=7)
                                @ 32  java.util.Arrays.copyOf(byte[], int):byte[] (33 bytes)   relevance-based (relevance=0.133981, probability=0.118151, bonus=1.000000, nodes=28 <= 40.194428)
                              @ 16  java.lang.AbstractStringBuilder.ensureCapacityInternal(int):void (39 bytes)   relevance-based (relevance=1.071382, probability=1.000000, bonus=1.000000, nodes=72 <= 300.000000)
                              @ 20  java.lang.AbstractStringBuilder.isLatin1():boolean (19 bytes)   trivial (relevance=1.071380, probability=0.999999, bonus=1.000000, nodes=9)
                              @ 33  java.lang.Long.getChars(long, int, byte[]):int (195 bytes)   relevance-based (relevance=1.071380, probability=0.999999, bonus=1.000000, nodes=109 <= 300.000000)
                            @ 36  java.lang.Class$3.<init>(Class, Method):void (10 bytes)   inline method (bytecode parsing)
                            @ 39  java.security.AccessController.doPrivileged(PrivilegedAction):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.security.AccessController.executePrivileged(PrivilegedAction, AccessControlContext, Class):Object (65 bytes)   inline method (bytecode parsing)
                                @ 29  java.lang.Class$3.run():Object (5 bytes)   inline method (bytecode parsing)
                                  @ 1  java.lang.Class$3.run():Void (10 bytes)   inline method (bytecode parsing)
                            @ 49  java.lang.reflect.Method.invoke(Object, Object[]):Object (108 bytes)   inline method (bytecode parsing)
                              @ 10  java.lang.Class.isEnum():boolean (27 bytes)   relevance-based (relevance=0.341403, probability=0.254512, bonus=1.000000, nodes=70 <= 102.420848)
                            @ 1  java.util.Objects.requireNonNull(Object):Object (14 bytes)   inline method (bytecode parsing)
                            @ 46  java.lang.NoSuchMethodException.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  java.lang.ReflectiveOperationException.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                                @ 2  java.lang.Exception.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                              @ 26  java.lang.Class.getMethod(String, Class[]):Method (59 bytes)   not inlining relevance-based (relevance=0.018748, probability=0.013976, bonus=1.000000, nodes=56 > 5.624285)
                            @ 11  java.lang.reflect.Method.checkCanSetAccessible(Class):void (10 bytes)   inline method (bytecode parsing)
                              @ 6  java.lang.reflect.AccessibleObject.checkCanSetAccessible(Class, Class):void (9 bytes)   inline method (bytecode parsing)
                            @ 16  java.lang.reflect.AccessibleObject.setAccessible0(boolean):boolean (7 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.reflect.Method.setAccessible(boolean):void (21 bytes)   not inlining relevance-based (relevance=0.018748, probability=0.013976, bonus=1.000000, nodes=23 > 5.624285)
                              @ 1  java.lang.reflect.Method.isCallerSensitive():boolean (38 bytes)   not inlining relevance-based (relevance=0.018748, probability=0.013976, bonus=1.000000, nodes=26 > 5.624285)
                              @ 42  java.lang.reflect.Modifier.isStatic(int):boolean (13 bytes)   trivial (relevance=0.009374, probability=0.006988, bonus=1.000000, nodes=9)
                              @ 60  java.lang.reflect.AccessibleObject.checkAccess(Class, Class, Class, int):void (40 bytes)   not inlining relevance-based (relevance=0.009374, probability=0.006988, bonus=1.000000, nodes=38 > 2.812142)
                            @ 14  java.lang.reflect.Method.getMethodAccessor():MethodAccessor (5 bytes)   inline accessor method (bytecode parsing)
                            @ 42  jdk.internal.misc.VM.isJavaLangInvokeInited():boolean (4 bytes)   inline method (bytecode parsing)
                              @ 75  java.lang.reflect.Method.acquireMethodAccessor():MethodAccessor (55 bytes)   not inlining relevance-based (relevance=0.009374, probability=0.006988, bonus=1.000000, nodes=39 > 2.812142)
                            @ 24  jdk.internal.reflect.DirectMethodHandleAccessor.invokeImpl(Object, Object[], Class):Object (140 bytes)   inline method (bytecode parsing)
                              @ 121  java.lang.invoke.MethodHandleImpl$1.reflectiveInvoker(Class):MethodHandle (10 bytes)   inline method (bytecode parsing)
                                @ 1  java.util.Objects.requireNonNull(Object):Object (14 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.internal.reflect.DirectMethodHandleAccessor.isStatic():boolean (20 bytes)   not inlining relevance-based (relevance=0.018748, probability=0.006988, bonus=1.000000, nodes=10 > 5.624285)
                            @ 20  java.lang.IllegalArgumentException.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  java.lang.RuntimeException.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                                @ 2  java.lang.Exception.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                                @ 9  jdk.internal.reflect.DirectMethodHandleAccessor.checkReceiver(Object):void (25 bytes)   trivial (relevance=0.009374, probability=0.003494, bonus=1.000000, nodes=5)
                            @ 24  java.lang.StringBuilder.<init>():void (7 bytes)   inline method (bytecode parsing)
                            @ 29  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 33  java.lang.StringBuilder.append(int):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 38  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 42  java.lang.StringBuilder.append(int):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 45  java.lang.StringBuilder.toString():String (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.String.<init>(StringBuilder):void (7 bytes)   inline method (bytecode parsing)
                            @ 48  java.lang.IllegalArgumentException.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  java.lang.RuntimeException.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                                @ 2  java.lang.Exception.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                                @ 17  jdk.internal.reflect.DirectMethodHandleAccessor.checkArgumentCount(int, Object[]):void (53 bytes)   not inlining relevance-based (relevance=0.093738, probability=0.006988, bonus=1.000000, nodes=49 > 28.121424)
                                @ 1  jdk.internal.reflect.DirectMethodHandleAccessor.hasCallerParameter():boolean (20 bytes)   relevance-based (relevance=0.093738, probability=0.006988, bonus=1.000000, nodes=10 <= 28.121424)
                              @ 90  jdk.internal.reflect.DirectMethodHandleAccessor.invoke(Object, Object[], Class):Object (102 bytes)   forced inlining
                            @ 23  jdk.internal.reflect.DirectMethodHandleAccessor.invokeImpl(Object, Object[]):Object (108 bytes)   inline method (bytecode parsing)
                              @ 72  java.lang.invoke.LambdaForm$MH/0x00007f45e0003c00.invokeExact_MT(Object, Object, Object, Object, Object):Object (26 bytes)   inline method (bytecode parsing)
                                @ 11  java.lang.invoke.Invokers.checkExactType(MethodHandle, MethodType):void (17 bytes)   inline method (bytecode parsing)
                                  @ 1  java.lang.invoke.MethodHandle.type():MethodType (5 bytes)   inline accessor method (bytecode parsing)
                                @ 15  java.lang.invoke.Invokers.checkCustomized(MethodHandle):void (23 bytes)   inline method (bytecode parsing)
                              @ 41  java.lang.invoke.Invokers$Holder.invokeExact_MT(Object, Object, Object):Object (23 bytes)   inline method (bytecode parsing)
                                @ 10  java.lang.invoke.Invokers.checkExactType(MethodHandle, MethodType):void (17 bytes)   inline method (bytecode parsing)
                                  @ 1  java.lang.invoke.MethodHandle.type():MethodType (5 bytes)   inline accessor method (bytecode parsing)
                                @ 14  java.lang.invoke.Invokers.checkCustomized(MethodHandle):void (23 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.internal.reflect.DirectMethodHandleAccessor.isStatic():boolean (20 bytes)   not inlining relevance-based (relevance=0.018748, probability=0.006988, bonus=1.000000, nodes=10 > 5.624285)
                            @ 20  java.lang.IllegalArgumentException.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  java.lang.RuntimeException.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                                @ 2  java.lang.Exception.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                                @ 9  jdk.internal.reflect.DirectMethodHandleAccessor.checkReceiver(Object):void (25 bytes)   trivial (relevance=0.009374, probability=0.003494, bonus=1.000000, nodes=5)
                            @ 24  java.lang.StringBuilder.<init>():void (7 bytes)   inline method (bytecode parsing)
                            @ 29  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 33  java.lang.StringBuilder.append(int):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 38  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 42  java.lang.StringBuilder.append(int):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 45  java.lang.StringBuilder.toString():String (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.String.<init>(StringBuilder):void (7 bytes)   inline method (bytecode parsing)
                            @ 48  java.lang.IllegalArgumentException.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  java.lang.RuntimeException.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                                @ 2  java.lang.Exception.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                                @ 17  jdk.internal.reflect.DirectMethodHandleAccessor.checkArgumentCount(int, Object[]):void (53 bytes)   not inlining relevance-based (relevance=0.092850, probability=0.006988, bonus=1.000000, nodes=49 > 27.854870)
                              @ 19  java.lang.invoke.Invokers.maybeCustomize(MethodHandle):void (5 bytes)   not inlining it is marked non-inlinable
                              @ 19  java.lang.invoke.Invokers.maybeCustomize(MethodHandle):void (5 bytes)   not inlining it is marked non-inlinable
                              @ 102  jdk.internal.reflect.DirectMethodHandleAccessor.invoke(Object, Object[]):Object (92 bytes)   forced inlining
                            @ 12  jdk.graal.compiler.replacements.gc.G1WriteBarrierSnippets.satbBarrier(AddressNode$Address, Object, Object, boolean, boolean, int, G1WriteBarrierSnippets$Counters):void (417 bytes)   inline method (bytecode parsing)
                              @ 10  jdk.graal.compiler.hotspot.replacements.HotSpotG1WriteBarrierSnippets.getThread():Word (8 bytes)   inline method (bytecode parsing)
                                @ 4  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.registerAsWord(Register):Word (7 bytes)   inline method (bytecode parsing)
                              @ 17  jdk.graal.compiler.replacements.gc.G1WriteBarrierSnippets.verifyOop(Object):void (17 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotG1WriteBarrierSnippets.verifyOops():boolean (7 bytes)   inline method (bytecode parsing)
                              @ 29  jdk.graal.compiler.hotspot.replacements.HotSpotG1WriteBarrierSnippets.satbQueueMarkingActiveOffset():int (7 bytes)   inline method (bytecode parsing)
                              @ 43  jdk.graal.compiler.replacements.gc.G1WriteBarrierSnippets.isTracingActive(int):boolean (30 bytes)   inline method (bytecode parsing)
                              @ 198  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                              @ 288  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                              @ 315  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                              @ 321  jdk.graal.compiler.hotspot.replacements.HotSpotG1WriteBarrierSnippets.satbQueueIndexOffset():int (7 bytes)   inline method (bytecode parsing)
                              @ 353  jdk.graal.compiler.hotspot.replacements.HotSpotG1WriteBarrierSnippets.satbQueueBufferOffset():int (7 bytes)   inline method (bytecode parsing)
                              @ 370  jdk.graal.compiler.hotspot.replacements.HotSpotG1WriteBarrierSnippets.wordSize():int (4 bytes)   inline method (bytecode parsing)
                              @ 396  jdk.graal.compiler.hotspot.replacements.HotSpotG1WriteBarrierSnippets.satbQueueIndexOffset():int (7 bytes)   inline method (bytecode parsing)
                              @ 413  jdk.graal.compiler.replacements.gc.G1WriteBarrierSnippets.g1PreBarrierStub(Object):void (9 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotG1WriteBarrierSnippets.preWriteBarrierCallDescriptor():ForeignCallDescriptor (4 bytes)   inline method (bytecode parsing)
                                  @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=23.527473, bonus=1.000000, nodes=9)
                            @ 3  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                                  @ 12  java.lang.StringLatin1.charAt(byte[], int):char (15 bytes)   relevance-based (relevance=1.000000, probability=23.527473, bonus=1.000000, nodes=11 <= 300.000000)
                                @ 15  java.lang.String.charAt(int):char (25 bytes)   relevance-based (relevance=1.006648, probability=23.527473, bonus=1.000000, nodes=16 <= 300.000000)
                                @ 25  java.net.URI.match(char, long, long):boolean (56 bytes)   relevance-based (relevance=1.006648, probability=23.527473, bonus=1.000000, nodes=28 <= 300.000000)
                                @ 51  java.net.URI$Parser.scanEscape(int, int, char):int (115 bytes)   not inlining relevance-based (relevance=0.007189, probability=0.155388, bonus=1.000000, nodes=39 > 2.156604)
                              @ 6  java.net.URI$Parser.scan(int, int, long, long):int (76 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=75 <= 300.000000)
                                  @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=0.333331, probability=0.249999, bonus=1.000000, nodes=9)
                            @ 3  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                                  @ 12  java.lang.StringLatin1.charAt(byte[], int):char (15 bytes)   relevance-based (relevance=0.333331, probability=0.249999, bonus=1.000000, nodes=11 <= 99.999426)
                                @ 10  java.lang.String.charAt(int):char (25 bytes)   relevance-based (relevance=0.333331, probability=0.249999, bonus=1.000000, nodes=16 <= 99.999426)
                              @ 7  java.net.URI$Parser.at(int, int, char):boolean (23 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=32 <= 300.000000)
                            @ 23  java.lang.String.indexOf(int):int (7 bytes)   inline method (bytecode parsing)
                                  @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=23.857510, bonus=1.000000, nodes=9)
                            @ 3  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                                  @ 12  java.lang.StringLatin1.charAt(byte[], int):char (15 bytes)   relevance-based (relevance=1.000000, probability=23.857510, bonus=1.000000, nodes=11 <= 300.000000)
                                @ 15  java.lang.String.charAt(int):char (25 bytes)   relevance-based (relevance=1.000000, probability=23.857510, bonus=1.000000, nodes=16 <= 300.000000)
                                  @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=23.857510, bonus=1.000000, nodes=5)
                                    @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=23.857510, bonus=1.000000, nodes=5)
                                  @ 14  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000000, probability=23.857510, bonus=1.000000, nodes=5)
                            @ 11  java.lang.Math.max(int, int):int (11 bytes)   inline method (bytecode parsing)
                                    @ 1  java.lang.StringLatin1.canEncode(int):boolean (13 bytes)   trivial (relevance=1.000023, probability=23.857510, bonus=1.000000, nodes=5)
                                    @ 18  java.lang.Math.min(int, int):int (11 bytes)   trivial (relevance=1.000023, probability=23.857510, bonus=1.000000, nodes=4)
                                  @ 17  java.lang.StringLatin1.indexOf(byte[], int, int, int):int (37 bytes)   trivial (relevance=1.000000, probability=23.857510, bonus=1.000000, nodes=9)
                                @ 3  java.lang.String.indexOf(int, int):int (37 bytes)   relevance-based (relevance=1.000000, probability=23.857510, bonus=1.000000, nodes=10 <= 300.000000)
                              @ 77  java.net.URI$Parser.scan(int, int, String):int (41 bytes)   relevance-based (relevance=1.333331, probability=1.000000, bonus=1.000000, nodes=44 <= 300.000000)
                                    @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=23.527473, bonus=1.000000, nodes=9)
                            @ 3  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                                    @ 12  java.lang.StringLatin1.charAt(byte[], int):char (15 bytes)   relevance-based (relevance=1.000000, probability=23.527473, bonus=1.000000, nodes=11 <= 300.000000)
                                  @ 15  java.lang.String.charAt(int):char (25 bytes)   relevance-based (relevance=1.006648, probability=23.527473, bonus=1.000000, nodes=16 <= 300.000000)
                                  @ 25  java.net.URI.match(char, long, long):boolean (56 bytes)   relevance-based (relevance=1.006648, probability=23.527473, bonus=1.000000, nodes=28 <= 300.000000)
                                  @ 51  java.net.URI$Parser.scanEscape(int, int, char):int (115 bytes)   not inlining relevance-based (relevance=0.007189, probability=0.155388, bonus=1.000000, nodes=39 > 2.156604)
                                @ 6  java.net.URI$Parser.scan(int, int, long, long):int (76 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=73 <= 300.000000)
                              @ 94  java.net.URI$Parser.checkChars(int, int, long, long, String):void (44 bytes)   relevance-based (relevance=1.333331, probability=1.000000, bonus=1.000000, nodes=77 <= 300.000000)
                                  @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                                @ 1  java.lang.String.length():int (11 bytes)   trivial (relevance=1.179302, probability=1.000000, bonus=1.000000, nodes=8)
                                  @ 6  jdk.internal.util.Preconditions.checkFromToIndex(int, int, int, BiFunction):int (24 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=14 <= 300.000000)
                                @ 8  java.lang.String.checkBoundsBeginEnd(int, int, int):void (11 bytes)   relevance-based (relevance=1.179302, probability=1.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                @ 28  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.098893, probability=0.931817, bonus=1.000000, nodes=9)
                            @ 20  java.lang.String.<init>(byte[], byte):void (15 bytes)   inline method (bytecode parsing)
                            @ 13  java.util.Arrays.copyOfRangeByte(byte[], int, int):byte[] (33 bytes)   inline method (bytecode parsing)
                              @ 2  java.util.Arrays.checkLength(int, int):void (38 bytes)   inline method (bytecode parsing)
                                    @ 24  java.lang.Math.min(int, int):int (11 bytes)   trivial (relevance=1.557866, probability=0.745524, bonus=1.000000, nodes=7)
                                  @ 16  java.util.Arrays.copyOfRange(byte[], int, int):byte[] (25 bytes)   relevance-based (relevance=1.000000, probability=0.931432, bonus=1.000000, nodes=44 <= 300.000000)
                                @ 41  java.lang.StringLatin1.newString(byte[], int, int):String (24 bytes)   relevance-based (relevance=1.098811, probability=0.931747, bonus=1.000000, nodes=62 <= 300.000000)
                            @ 31  java.lang.String.<init>(byte[], byte):void (15 bytes)   inline method (bytecode parsing)
                            @ 54  java.lang.String.<init>(byte[], byte):void (15 bytes)   inline method (bytecode parsing)
                                @ 54  java.lang.StringUTF16.newString(byte[], int, int):String (58 bytes)   not inlining relevance-based (relevance=0.000082, probability=0.000070, bonus=1.000000, nodes=41 > 0.024677)
                              @ 108  java.lang.String.substring(int, int):String (58 bytes)   relevance-based (relevance=1.333331, probability=1.000000, bonus=1.000000, nodes=98 <= 300.000000)
                                  @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=0.333331, probability=0.249997, bonus=1.000000, nodes=9)
                            @ 3  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                                  @ 12  java.lang.StringLatin1.charAt(byte[], int):char (15 bytes)   relevance-based (relevance=0.333331, probability=0.249997, bonus=1.000000, nodes=11 <= 99.999426)
                                @ 10  java.lang.String.charAt(int):char (25 bytes)   relevance-based (relevance=0.333331, probability=0.249997, bonus=1.000000, nodes=16 <= 99.999426)
                              @ 122  java.net.URI$Parser.at(int, int, char):boolean (23 bytes)   relevance-based (relevance=1.333321, probability=0.999993, bonus=1.000000, nodes=32 <= 300.000000)
                                @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                              @ 9  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=8)
                            @ 23  java.lang.String.indexOf(int):int (7 bytes)   inline method (bytecode parsing)
                            @ 35  java.lang.String.indexOf(int):int (7 bytes)   inline method (bytecode parsing)
                                  @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=23.818860, bonus=1.000000, nodes=9)
                            @ 3  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                                  @ 12  java.lang.StringLatin1.charAt(byte[], int):char (15 bytes)   relevance-based (relevance=1.000000, probability=23.818860, bonus=1.000000, nodes=11 <= 300.000000)
                                @ 15  java.lang.String.charAt(int):char (25 bytes)   relevance-based (relevance=1.000000, probability=23.818860, bonus=1.000000, nodes=16 <= 300.000000)
                                  @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=23.818860, bonus=1.000000, nodes=5)
                                    @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=23.818860, bonus=1.000000, nodes=5)
                                  @ 14  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000000, probability=23.818860, bonus=1.000000, nodes=5)
                            @ 11  java.lang.Math.max(int, int):int (11 bytes)   inline method (bytecode parsing)
                                    @ 1  java.lang.StringLatin1.canEncode(int):boolean (13 bytes)   trivial (relevance=1.000023, probability=23.818860, bonus=1.000000, nodes=5)
                                    @ 18  java.lang.Math.min(int, int):int (11 bytes)   trivial (relevance=1.000023, probability=23.818860, bonus=1.000000, nodes=4)
                                  @ 17  java.lang.StringLatin1.indexOf(byte[], int, int, int):int (37 bytes)   trivial (relevance=1.000000, probability=23.818860, bonus=1.000000, nodes=9)
                                @ 3  java.lang.String.indexOf(int, int):int (37 bytes)   relevance-based (relevance=1.000000, probability=23.818860, bonus=1.000000, nodes=10 <= 300.000000)
                                  @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=23.818860, bonus=1.000000, nodes=5)
                                    @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=23.818860, bonus=1.000000, nodes=5)
                                  @ 14  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000000, probability=23.818860, bonus=1.000000, nodes=5)
                            @ 11  java.lang.Math.max(int, int):int (11 bytes)   inline method (bytecode parsing)
                                    @ 1  java.lang.StringLatin1.canEncode(int):boolean (13 bytes)   trivial (relevance=1.000023, probability=23.818860, bonus=1.000000, nodes=5)
                                    @ 18  java.lang.Math.min(int, int):int (11 bytes)   trivial (relevance=1.000023, probability=23.818860, bonus=1.000000, nodes=4)
                                  @ 17  java.lang.StringLatin1.indexOf(byte[], int, int, int):int (37 bytes)   trivial (relevance=1.000000, probability=23.818860, bonus=1.000000, nodes=9)
                                @ 3  java.lang.String.indexOf(int, int):int (37 bytes)   relevance-based (relevance=1.000000, probability=23.818860, bonus=1.000000, nodes=10 <= 300.000000)
                              @ 20  java.net.URI$Parser.scan(int, int, String, String):int (53 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=51 <= 300.000000)
                                  @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=0.333331, probability=0.249999, bonus=1.000000, nodes=9)
                            @ 3  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                                  @ 12  java.lang.StringLatin1.charAt(byte[], int):char (15 bytes)   relevance-based (relevance=0.333331, probability=0.249999, bonus=1.000000, nodes=11 <= 99.999428)
                                @ 10  java.lang.String.charAt(int):char (25 bytes)   relevance-based (relevance=0.333331, probability=0.249999, bonus=1.000000, nodes=16 <= 99.999428)
                              @ 33  java.net.URI$Parser.at(int, int, char):boolean (23 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=32 <= 300.000000)
                                    @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=0.333331, probability=0.249999, bonus=1.000000, nodes=9)
                            @ 3  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                                    @ 12  java.lang.StringLatin1.charAt(byte[], int):char (15 bytes)   relevance-based (relevance=0.333331, probability=0.249999, bonus=1.000000, nodes=11 <= 99.999428)
                                  @ 10  java.lang.String.charAt(int):char (25 bytes)   relevance-based (relevance=0.333331, probability=0.249999, bonus=1.000000, nodes=15 <= 99.999428)
                                @ 7  java.net.URI$Parser.at(int, int, char):boolean (23 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=31 <= 300.000000)
                            @ 23  java.lang.String.indexOf(int):int (7 bytes)   inline method (bytecode parsing)
                                    @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=23.857510, bonus=1.000000, nodes=9)
                            @ 3  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                                    @ 12  java.lang.StringLatin1.charAt(byte[], int):char (15 bytes)   relevance-based (relevance=1.000000, probability=23.857510, bonus=1.000000, nodes=11 <= 300.000000)
                                  @ 15  java.lang.String.charAt(int):char (25 bytes)   relevance-based (relevance=1.000000, probability=23.857510, bonus=1.000000, nodes=16 <= 300.000000)
                                    @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=23.857510, bonus=1.000000, nodes=5)
                                      @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=23.857510, bonus=1.000000, nodes=5)
                                    @ 14  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000000, probability=23.857510, bonus=1.000000, nodes=5)
                            @ 11  java.lang.Math.max(int, int):int (11 bytes)   inline method (bytecode parsing)
                                      @ 1  java.lang.StringLatin1.canEncode(int):boolean (13 bytes)   trivial (relevance=1.000023, probability=23.857510, bonus=1.000000, nodes=5)
                                      @ 18  java.lang.Math.min(int, int):int (11 bytes)   trivial (relevance=1.000023, probability=23.857510, bonus=1.000000, nodes=4)
                                    @ 17  java.lang.StringLatin1.indexOf(byte[], int, int, int):int (37 bytes)   trivial (relevance=1.000000, probability=23.857510, bonus=1.000000, nodes=9)
                                  @ 3  java.lang.String.indexOf(int, int):int (37 bytes)   relevance-based (relevance=1.000000, probability=23.857510, bonus=1.000000, nodes=10 <= 300.000000)
                                @ 77  java.net.URI$Parser.scan(int, int, String):int (41 bytes)   relevance-based (relevance=1.333331, probability=1.000000, bonus=1.000000, nodes=43 <= 300.000000)
                                      @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=23.527473, bonus=1.000000, nodes=9)
                            @ 3  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                                      @ 12  java.lang.StringLatin1.charAt(byte[], int):char (15 bytes)   relevance-based (relevance=1.000000, probability=23.527473, bonus=1.000000, nodes=11 <= 300.000000)
                                    @ 15  java.lang.String.charAt(int):char (25 bytes)   relevance-based (relevance=1.006648, probability=23.527473, bonus=1.000000, nodes=16 <= 300.000000)
                                    @ 25  java.net.URI.match(char, long, long):boolean (56 bytes)   relevance-based (relevance=1.006648, probability=23.527473, bonus=1.000000, nodes=28 <= 300.000000)
                                    @ 51  java.net.URI$Parser.scanEscape(int, int, char):int (115 bytes)   not inlining relevance-based (relevance=0.007189, probability=0.155388, bonus=1.000000, nodes=39 > 2.156604)
                                  @ 6  java.net.URI$Parser.scan(int, int, long, long):int (76 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=72 <= 300.000000)
                                @ 94  java.net.URI$Parser.checkChars(int, int, long, long, String):void (44 bytes)   relevance-based (relevance=1.333331, probability=1.000000, bonus=1.000000, nodes=76 <= 300.000000)
                                    @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                                  @ 1  java.lang.String.length():int (11 bytes)   trivial (relevance=1.813220, probability=1.000000, bonus=1.000000, nodes=8)
                                    @ 6  jdk.internal.util.Preconditions.checkFromToIndex(int, int, int, BiFunction):int (24 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                                  @ 8  java.lang.String.checkBoundsBeginEnd(int, int, int):void (11 bytes)   relevance-based (relevance=1.813220, probability=1.000000, bonus=1.000000, nodes=10 <= 300.000000)
                                  @ 28  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000075, probability=0.551546, bonus=1.000000, nodes=9)
                            @ 20  java.lang.String.<init>(byte[], byte):void (15 bytes)   inline method (bytecode parsing)
                            @ 13  java.util.Arrays.copyOfRangeByte(byte[], int, int):byte[] (33 bytes)   inline method (bytecode parsing)
                              @ 2  java.util.Arrays.checkLength(int, int):void (38 bytes)   inline method (bytecode parsing)
                                      @ 24  java.lang.Math.min(int, int):int (11 bytes)   trivial (relevance=1.000010, probability=0.397073, bonus=1.000000, nodes=7)
                                    @ 16  java.util.Arrays.copyOfRange(byte[], int, int):byte[] (25 bytes)   relevance-based (relevance=1.000000, probability=0.551319, bonus=1.000000, nodes=33 <= 300.000000)
                                  @ 41  java.lang.StringLatin1.newString(byte[], int, int):String (24 bytes)   relevance-based (relevance=1.000000, probability=0.551505, bonus=1.000000, nodes=51 <= 300.000000)
                            @ 31  java.lang.String.<init>(byte[], byte):void (15 bytes)   inline method (bytecode parsing)
                            @ 54  java.lang.String.<init>(byte[], byte):void (15 bytes)   inline method (bytecode parsing)
                                  @ 54  java.lang.StringUTF16.newString(byte[], int, int):String (58 bytes)   not inlining relevance-based (relevance=0.000104, probability=0.000041, bonus=1.000000, nodes=38 > 0.031192)
                                @ 108  java.lang.String.substring(int, int):String (58 bytes)   relevance-based (relevance=1.333331, probability=1.000000, bonus=1.000000, nodes=78 <= 300.000000)
                                    @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=0.333331, probability=0.249998, bonus=1.000000, nodes=9)
                            @ 3  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                                    @ 12  java.lang.StringLatin1.charAt(byte[], int):char (15 bytes)   relevance-based (relevance=0.333331, probability=0.249998, bonus=1.000000, nodes=11 <= 99.999428)
                                  @ 10  java.lang.String.charAt(int):char (25 bytes)   relevance-based (relevance=0.333331, probability=0.249998, bonus=1.000000, nodes=16 <= 99.999428)
                                @ 122  java.net.URI$Parser.at(int, int, char):boolean (23 bytes)   relevance-based (relevance=1.333326, probability=0.999996, bonus=1.000000, nodes=32 <= 300.000000)
                              @ 179  java.net.URI$Parser.parseHierarchical(int, int):int (178 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=243 <= 300.000000)
                                  @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=0.333330, probability=0.249998, bonus=1.000000, nodes=9)
                            @ 3  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                                  @ 12  java.lang.StringLatin1.charAt(byte[], int):char (15 bytes)   relevance-based (relevance=0.333330, probability=0.249998, bonus=1.000000, nodes=11 <= 99.999031)
                                @ 10  java.lang.String.charAt(int):char (25 bytes)   relevance-based (relevance=0.333330, probability=0.249998, bonus=1.000000, nodes=16 <= 99.999031)
                              @ 188  java.net.URI$Parser.at(int, int, char):boolean (23 bytes)   relevance-based (relevance=0.999996, probability=0.999996, bonus=1.000000, nodes=32 <= 299.998809)
                              @ 1  java.util.regex.Matcher.hasMatch():boolean (13 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=9)
                            @ 4  java.lang.StringBuilder.<init>():void (7 bytes)   inline method (bytecode parsing)
                            @ 56  java.lang.StringBuilder.toString():String (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.String.<init>(StringBuilder):void (7 bytes)   inline method (bytecode parsing)
                                  @ 3  java.lang.AbstractStringBuilder.<init>(int):void (39 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                            @ 125  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                                    @ 105  java.net.URI.appendAuthority(StringBuilder, String, String, String, int):void (232 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=9)
                            @ 68  java.lang.StringBuilder.<init>():void (7 bytes)   inline method (bytecode parsing)
                            @ 79  java.lang.StringBuilder.append(CharSequence, int, int):StringBuilder (10 bytes)   inline method (bytecode parsing)
                            @ 103  java.lang.StringBuilder.append(char):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 210  java.lang.StringBuilder.toString():String (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.String.<init>(StringBuilder):void (7 bytes)   inline method (bytecode parsing)
                                        @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=24.457308, bonus=1.000000, nodes=5)
                                      @ 27  java.lang.String.length():int (11 bytes)   trivial (relevance=1.102118, probability=24.457308, bonus=1.000000, nodes=8)
                            @ 5  java.lang.AbstractStringBuilder.getValue():byte[] (5 bytes)   inline accessor method (bytecode parsing)
                                      @ 3  java.lang.String.<init>(AbstractStringBuilder, Void):void (99 bytes)   not inlining too large previous low-level graph (low-level-nodes: 376, relevance=0.158269, probability=0.158269, bonus=1.000000, nodes=41)
                                        @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=23.457308, bonus=1.000000, nodes=9)
                            @ 3  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                                        @ 12  java.lang.StringLatin1.charAt(byte[], int):char (15 bytes)   relevance-based (relevance=1.000000, probability=23.457308, bonus=1.000000, nodes=11 <= 300.000000)
                                      @ 36  java.lang.String.charAt(int):char (25 bytes)   relevance-based (relevance=1.057055, probability=23.457308, bonus=1.000000, nodes=16 <= 300.000000)
                                      @ 53  java.net.URI.match(char, long, long):boolean (56 bytes)   relevance-based (relevance=1.057055, probability=23.457308, bonus=1.000000, nodes=28 <= 300.000000)
                                      @ 2  java.lang.AbstractStringBuilder.append(char):AbstractStringBuilder (77 bytes)   not inlining relevance-based (relevance=0.051406, probability=1.107866, bonus=1.000000, nodes=50 > 15.421932)
                                      @ 3  java.lang.AbstractStringBuilder.<init>(int):void (39 bytes)   not inlining relevance-based (relevance=0.007343, probability=0.158261, bonus=1.000000, nodes=11 > 2.203049)
                                      @ 4  java.lang.AbstractStringBuilder.append(CharSequence, int, int):AbstractStringBuilder (67 bytes)   not inlining too large previous low-level graph (low-level-nodes: 390, relevance=0.007343, probability=0.158261, bonus=1.000000, nodes=25)
                            @ 3  java.lang.StringBuilder.append(char):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 18  java.lang.StringBuilder.append(char):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 33  java.lang.StringBuilder.append(char):StringBuilder (8 bytes)   inline method (bytecode parsing)
                                      @ 88  java.net.URI.appendEscape(StringBuilder, byte):void (38 bytes)   not inlining relevance-based (relevance=0.007343, probability=0.158261, bonus=1.000000, nodes=26 > 2.203049)
                                    @ 122  java.net.URI.quote(String, long, long):String (214 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=113 <= 300.000000)
                                    @ 2  java.lang.AbstractStringBuilder.append(String):AbstractStringBuilder (45 bytes)   not inlining too large previous low-level graph (low-level-nodes: 368, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=23)
                                  @ 43  java.net.URI.appendSchemeSpecificPart(StringBuilder, String, String, String, String, int, String, String):void (158 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=125 <= 300.000000)
                                  @ 51  java.net.URI.appendFragment(StringBuilder, String):void (27 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=7)
                            @ 5  java.lang.AbstractStringBuilder.getValue():byte[] (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 3  java.lang.String.<init>(AbstractStringBuilder, Void):void (99 bytes)   not inlining too large previous low-level graph (low-level-nodes: 376, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=41)
                                @ 23  java.net.URI.toString(String, String, String, String, String, int, String, String, String):String (60 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=145 <= 300.000000)
                                @ 33  java.net.URI.checkPath(String, String, String):void (38 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=8)
                                @ 43  java.net.URI$Parser.<init>(URI, String):void (30 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=18 <= 300.000000)
                                    @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                                  @ 9  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=8)
                            @ 23  java.lang.String.indexOf(int):int (7 bytes)   inline method (bytecode parsing)
                            @ 35  java.lang.String.indexOf(int):int (7 bytes)   inline method (bytecode parsing)
                                      @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=23.818860, bonus=1.000000, nodes=9)
                            @ 3  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                                      @ 12  java.lang.StringLatin1.charAt(byte[], int):char (15 bytes)   relevance-based (relevance=1.000000, probability=23.818860, bonus=1.000000, nodes=11 <= 300.000000)
                                    @ 15  java.lang.String.charAt(int):char (25 bytes)   relevance-based (relevance=1.000000, probability=23.818860, bonus=1.000000, nodes=16 <= 300.000000)
                                      @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=23.818860, bonus=1.000000, nodes=5)
                                        @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=23.818860, bonus=1.000000, nodes=5)
                                      @ 14  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000000, probability=23.818860, bonus=1.000000, nodes=5)
                            @ 11  java.lang.Math.max(int, int):int (11 bytes)   inline method (bytecode parsing)
                                        @ 1  java.lang.StringLatin1.canEncode(int):boolean (13 bytes)   trivial (relevance=1.000023, probability=23.818860, bonus=1.000000, nodes=5)
                                        @ 18  java.lang.Math.min(int, int):int (11 bytes)   trivial (relevance=1.000023, probability=23.818860, bonus=1.000000, nodes=4)
                                      @ 17  java.lang.StringLatin1.indexOf(byte[], int, int, int):int (37 bytes)   trivial (relevance=1.000000, probability=23.818860, bonus=1.000000, nodes=9)
                                    @ 3  java.lang.String.indexOf(int, int):int (37 bytes)   relevance-based (relevance=1.000000, probability=23.818860, bonus=1.000000, nodes=10 <= 300.000000)
                                      @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=23.818860, bonus=1.000000, nodes=5)
                                        @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=23.818860, bonus=1.000000, nodes=5)
                                      @ 14  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000000, probability=23.818860, bonus=1.000000, nodes=5)
                            @ 11  java.lang.Math.max(int, int):int (11 bytes)   inline method (bytecode parsing)
                                        @ 1  java.lang.StringLatin1.canEncode(int):boolean (13 bytes)   trivial (relevance=1.000023, probability=23.818860, bonus=1.000000, nodes=5)
                                        @ 18  java.lang.Math.min(int, int):int (11 bytes)   trivial (relevance=1.000023, probability=23.818860, bonus=1.000000, nodes=4)
                                      @ 17  java.lang.StringLatin1.indexOf(byte[], int, int, int):int (37 bytes)   trivial (relevance=1.000000, probability=23.818860, bonus=1.000000, nodes=9)
                                    @ 3  java.lang.String.indexOf(int, int):int (37 bytes)   relevance-based (relevance=1.000000, probability=23.818860, bonus=1.000000, nodes=10 <= 300.000000)
                                  @ 20  java.net.URI$Parser.scan(int, int, String, String):int (53 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=51 <= 300.000000)
                                      @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=0.333286, probability=0.249973, bonus=1.000000, nodes=9)
                            @ 3  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                                      @ 12  java.lang.StringLatin1.charAt(byte[], int):char (15 bytes)   relevance-based (relevance=0.333286, probability=0.249973, bonus=1.000000, nodes=11 <= 99.985826)
                                    @ 10  java.lang.String.charAt(int):char (25 bytes)   relevance-based (relevance=0.333286, probability=0.249973, bonus=1.000000, nodes=16 <= 99.985826)
                                  @ 33  java.net.URI$Parser.at(int, int, char):boolean (23 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=32 <= 300.000000)
                                  @ 179  java.net.URI$Parser.parseHierarchical(int, int):int (178 bytes)   not inlining too large previous low-level graph (low-level-nodes: 720, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=35)
                                      @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=0.333286, probability=0.249973, bonus=1.000000, nodes=9)
                            @ 3  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                                      @ 12  java.lang.StringLatin1.charAt(byte[], int):char (15 bytes)   relevance-based (relevance=0.333286, probability=0.249973, bonus=1.000000, nodes=11 <= 99.985826)
                                    @ 10  java.lang.String.charAt(int):char (25 bytes)   relevance-based (relevance=0.333286, probability=0.249973, bonus=1.000000, nodes=16 <= 99.985826)
                                  @ 188  java.net.URI$Parser.at(int, int, char):boolean (23 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=32 <= 300.000000)
                                @ 47  java.net.URI$Parser.parse(boolean):void (243 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=117 <= 300.000000)
                              @ 9  java.net.URI.<init>(String, String, String, int, String, String, String):void (51 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=273 <= 300.000000)
                            @ 4  java.lang.StringBuilder.<init>():void (7 bytes)   inline method (bytecode parsing)
                            @ 56  java.lang.StringBuilder.toString():String (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.String.<init>(StringBuilder):void (7 bytes)   inline method (bytecode parsing)
                                @ 3  java.lang.AbstractStringBuilder.<init>(int):void (39 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                            @ 125  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                                  @ 105  java.net.URI.appendAuthority(StringBuilder, String, String, String, int):void (232 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 68  java.lang.StringBuilder.<init>():void (7 bytes)   inline method (bytecode parsing)
                            @ 79  java.lang.StringBuilder.append(CharSequence, int, int):StringBuilder (10 bytes)   inline method (bytecode parsing)
                            @ 103  java.lang.StringBuilder.append(char):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 210  java.lang.StringBuilder.toString():String (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.String.<init>(StringBuilder):void (7 bytes)   inline method (bytecode parsing)
                                      @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=24.457308, bonus=1.000000, nodes=5)
                                    @ 27  java.lang.String.length():int (11 bytes)   trivial (relevance=1.102118, probability=24.457308, bonus=1.000000, nodes=8)
                            @ 5  java.lang.AbstractStringBuilder.getValue():byte[] (5 bytes)   inline accessor method (bytecode parsing)
                                    @ 3  java.lang.String.<init>(AbstractStringBuilder, Void):void (99 bytes)   not inlining too large previous low-level graph (low-level-nodes: 376, relevance=0.158269, probability=0.158269, bonus=1.000000, nodes=41)
                                      @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=23.457308, bonus=1.000000, nodes=9)
                            @ 3  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                                      @ 12  java.lang.StringLatin1.charAt(byte[], int):char (15 bytes)   relevance-based (relevance=1.000000, probability=23.457308, bonus=1.000000, nodes=11 <= 300.000000)
                                    @ 36  java.lang.String.charAt(int):char (25 bytes)   relevance-based (relevance=1.057055, probability=23.457308, bonus=1.000000, nodes=16 <= 300.000000)
                                    @ 53  java.net.URI.match(char, long, long):boolean (56 bytes)   relevance-based (relevance=1.057055, probability=23.457308, bonus=1.000000, nodes=28 <= 300.000000)
                                    @ 2  java.lang.AbstractStringBuilder.append(char):AbstractStringBuilder (77 bytes)   not inlining relevance-based (relevance=0.051406, probability=1.107866, bonus=1.000000, nodes=50 > 15.421932)
                                    @ 3  java.lang.AbstractStringBuilder.<init>(int):void (39 bytes)   not inlining relevance-based (relevance=0.007343, probability=0.158261, bonus=1.000000, nodes=11 > 2.203049)
                                    @ 4  java.lang.AbstractStringBuilder.append(CharSequence, int, int):AbstractStringBuilder (67 bytes)   not inlining too large previous low-level graph (low-level-nodes: 390, relevance=0.007343, probability=0.158261, bonus=1.000000, nodes=25)
                            @ 3  java.lang.StringBuilder.append(char):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 18  java.lang.StringBuilder.append(char):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 33  java.lang.StringBuilder.append(char):StringBuilder (8 bytes)   inline method (bytecode parsing)
                                    @ 88  java.net.URI.appendEscape(StringBuilder, byte):void (38 bytes)   not inlining relevance-based (relevance=0.007343, probability=0.158261, bonus=1.000000, nodes=26 > 2.203049)
                                  @ 122  java.net.URI.quote(String, long, long):String (214 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=113 <= 300.000000)
                                  @ 2  java.lang.AbstractStringBuilder.append(String):AbstractStringBuilder (45 bytes)   not inlining too large previous low-level graph (low-level-nodes: 368, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=23)
                                @ 43  java.net.URI.appendSchemeSpecificPart(StringBuilder, String, String, String, String, int, String, String):void (158 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=129 <= 300.000000)
                                @ 51  java.net.URI.appendFragment(StringBuilder, String):void (27 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=7)
                            @ 5  java.lang.AbstractStringBuilder.getValue():byte[] (5 bytes)   inline accessor method (bytecode parsing)
                                @ 3  java.lang.String.<init>(AbstractStringBuilder, Void):void (99 bytes)   not inlining too large previous low-level graph (low-level-nodes: 376, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=41)
                              @ 23  java.net.URI.toString(String, String, String, String, String, int, String, String, String):String (60 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=149 <= 300.000000)
                              @ 33  java.net.URI.checkPath(String, String, String):void (38 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=8)
                              @ 43  java.net.URI$Parser.<init>(URI, String):void (30 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=18 <= 300.000000)
                              @ 47  java.net.URI$Parser.parse(boolean):void (243 bytes)   not inlining too large previous low-level graph (low-level-nodes: 842, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=36)
                            @ 4  java.lang.StringBuilder.<init>():void (7 bytes)   inline method (bytecode parsing)
                            @ 56  java.lang.StringBuilder.toString():String (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.String.<init>(StringBuilder):void (7 bytes)   inline method (bytecode parsing)
                              @ 3  java.lang.AbstractStringBuilder.<init>(int):void (39 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                            @ 125  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                                @ 105  java.net.URI.appendAuthority(StringBuilder, String, String, String, int):void (232 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=12 <= 300.000000)
                            @ 68  java.lang.StringBuilder.<init>():void (7 bytes)   inline method (bytecode parsing)
                            @ 79  java.lang.StringBuilder.append(CharSequence, int, int):StringBuilder (10 bytes)   inline method (bytecode parsing)
                            @ 103  java.lang.StringBuilder.append(char):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 210  java.lang.StringBuilder.toString():String (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.String.<init>(StringBuilder):void (7 bytes)   inline method (bytecode parsing)
                                    @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=24.457308, bonus=1.000000, nodes=5)
                                  @ 27  java.lang.String.length():int (11 bytes)   trivial (relevance=1.102118, probability=24.457308, bonus=1.000000, nodes=8)
                            @ 5  java.lang.AbstractStringBuilder.getValue():byte[] (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 3  java.lang.String.<init>(AbstractStringBuilder, Void):void (99 bytes)   not inlining too large previous low-level graph (low-level-nodes: 376, relevance=0.158269, probability=0.158269, bonus=1.000000, nodes=41)
                                    @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=23.457308, bonus=1.000000, nodes=9)
                            @ 3  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                                    @ 12  java.lang.StringLatin1.charAt(byte[], int):char (15 bytes)   relevance-based (relevance=1.000000, probability=23.457308, bonus=1.000000, nodes=11 <= 300.000000)
                                  @ 36  java.lang.String.charAt(int):char (25 bytes)   relevance-based (relevance=1.057055, probability=23.457308, bonus=1.000000, nodes=16 <= 300.000000)
                                  @ 53  java.net.URI.match(char, long, long):boolean (56 bytes)   relevance-based (relevance=1.057055, probability=23.457308, bonus=1.000000, nodes=28 <= 300.000000)
                                  @ 2  java.lang.AbstractStringBuilder.append(char):AbstractStringBuilder (77 bytes)   not inlining relevance-based (relevance=0.051406, probability=1.107866, bonus=1.000000, nodes=50 > 15.421932)
                                  @ 3  java.lang.AbstractStringBuilder.<init>(int):void (39 bytes)   not inlining relevance-based (relevance=0.007343, probability=0.158261, bonus=1.000000, nodes=11 > 2.203049)
                                  @ 4  java.lang.AbstractStringBuilder.append(CharSequence, int, int):AbstractStringBuilder (67 bytes)   not inlining too large previous low-level graph (low-level-nodes: 390, relevance=0.007343, probability=0.158261, bonus=1.000000, nodes=25)
                            @ 3  java.lang.StringBuilder.append(char):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 18  java.lang.StringBuilder.append(char):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 33  java.lang.StringBuilder.append(char):StringBuilder (8 bytes)   inline method (bytecode parsing)
                                  @ 88  java.net.URI.appendEscape(StringBuilder, byte):void (38 bytes)   not inlining relevance-based (relevance=0.007343, probability=0.158261, bonus=1.000000, nodes=26 > 2.203049)
                                @ 122  java.net.URI.quote(String, long, long):String (214 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=113 <= 300.000000)
                                @ 2  java.lang.AbstractStringBuilder.append(String):AbstractStringBuilder (45 bytes)   not inlining too large previous low-level graph (low-level-nodes: 368, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=23)
                              @ 43  java.net.URI.appendSchemeSpecificPart(StringBuilder, String, String, String, String, int, String, String):void (158 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=135 <= 300.000000)
                              @ 51  java.net.URI.appendFragment(StringBuilder, String):void (27 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=7)
                            @ 5  java.lang.AbstractStringBuilder.getValue():byte[] (5 bytes)   inline accessor method (bytecode parsing)
                              @ 3  java.lang.String.<init>(AbstractStringBuilder, Void):void (99 bytes)   not inlining too large previous low-level graph (low-level-nodes: 376, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=41)
                            @ 125  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                              @ 105  java.net.URI.appendAuthority(StringBuilder, String, String, String, int):void (232 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=12 <= 300.000000)
                            @ 68  java.lang.StringBuilder.<init>():void (7 bytes)   inline method (bytecode parsing)
                            @ 79  java.lang.StringBuilder.append(CharSequence, int, int):StringBuilder (10 bytes)   inline method (bytecode parsing)
                            @ 103  java.lang.StringBuilder.append(char):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 210  java.lang.StringBuilder.toString():String (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.String.<init>(StringBuilder):void (7 bytes)   inline method (bytecode parsing)
                                  @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=24.457308, bonus=1.000000, nodes=5)
                                @ 27  java.lang.String.length():int (11 bytes)   trivial (relevance=1.102118, probability=24.457308, bonus=1.000000, nodes=8)
                            @ 5  java.lang.AbstractStringBuilder.getValue():byte[] (5 bytes)   inline accessor method (bytecode parsing)
                                @ 3  java.lang.String.<init>(AbstractStringBuilder, Void):void (99 bytes)   not inlining too large previous low-level graph (low-level-nodes: 376, relevance=0.158269, probability=0.158269, bonus=1.000000, nodes=41)
                                  @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=23.457308, bonus=1.000000, nodes=9)
                            @ 3  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                                  @ 12  java.lang.StringLatin1.charAt(byte[], int):char (15 bytes)   relevance-based (relevance=1.000000, probability=23.457308, bonus=1.000000, nodes=11 <= 300.000000)
                                @ 36  java.lang.String.charAt(int):char (25 bytes)   relevance-based (relevance=1.057055, probability=23.457308, bonus=1.000000, nodes=16 <= 300.000000)
                                @ 53  java.net.URI.match(char, long, long):boolean (56 bytes)   relevance-based (relevance=1.057055, probability=23.457308, bonus=1.000000, nodes=28 <= 300.000000)
                                @ 2  java.lang.AbstractStringBuilder.append(char):AbstractStringBuilder (77 bytes)   not inlining relevance-based (relevance=0.051406, probability=1.107866, bonus=1.000000, nodes=50 > 15.421932)
                                @ 3  java.lang.AbstractStringBuilder.<init>(int):void (39 bytes)   not inlining relevance-based (relevance=0.007343, probability=0.158261, bonus=1.000000, nodes=11 > 2.203049)
                                @ 4  java.lang.AbstractStringBuilder.append(CharSequence, int, int):AbstractStringBuilder (67 bytes)   not inlining too large previous low-level graph (low-level-nodes: 390, relevance=0.007343, probability=0.158261, bonus=1.000000, nodes=25)
                            @ 3  java.lang.StringBuilder.append(char):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 18  java.lang.StringBuilder.append(char):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 33  java.lang.StringBuilder.append(char):StringBuilder (8 bytes)   inline method (bytecode parsing)
                                @ 88  java.net.URI.appendEscape(StringBuilder, byte):void (38 bytes)   not inlining relevance-based (relevance=0.007343, probability=0.158261, bonus=1.000000, nodes=26 > 2.203049)
                              @ 122  java.net.URI.quote(String, long, long):String (214 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=113 <= 300.000000)
                              @ 2  java.lang.AbstractStringBuilder.append(String):AbstractStringBuilder (45 bytes)   not inlining too large previous low-level graph (low-level-nodes: 368, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=23)
                              @ 10  java.lang.Long.compare(long, long):int (22 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=6)
                              @ 31  jdk.internal.util.ArraysSupport.mismatch(byte[], byte[], int):int (73 bytes)   relevance-based (relevance=1.000000, probability=0.815938, bonus=1.000000, nodes=48 <= 300.000000)
                            @ 6  java.util.regex.Matcher.groupCount():int (10 bytes)   inline method (bytecode parsing)
                              @ 18  java.lang.Object.equals(Object):boolean (11 bytes)   not inlining no methods remaining after filtering less frequent methods (1 methods previously)
                              @ 5  java.util.Collections.eq(Object, Object):boolean (22 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=20 <= 300.000000)
                            @ 95  java.util.LinkedList$Node.<init>(LinkedList$Node, Object, LinkedList$Node):void (20 bytes)   inline method (bytecode parsing)
                            @ 15  org.graalvm.collections.EconomicMapImpl.getKey(int):Object (9 bytes)   inline method (bytecode parsing)
                            @ 49  jdk.graal.compiler.graph.Node.valueEquals(Node):boolean (10 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.graph.Node.getNodeClass():NodeClass (5 bytes)   inline accessor method (bytecode parsing)
                                @ 46  jdk.graal.compiler.graph.Graph$1.equals(Object, Object):boolean (53 bytes)   not inlining relevance-based (relevance=0.007448, probability=0.006270, bonus=1.000000, nodes=25 > 2.234271)
                              @ 36  java.lang.Object.equals(Object):boolean (11 bytes)   not inlining no methods remaining after filtering less frequent methods (6 methods previously)
                              @ 24  org.graalvm.collections.EconomicMapImpl.compareKeys(Object, Object):boolean (52 bytes)   relevance-based (relevance=1.037019, probability=1.000000, bonus=1.000000, nodes=40 <= 300.000000)
                              @ 34  org.graalvm.collections.EconomicMapImpl.getRawValue(int):Object (11 bytes)   relevance-based (relevance=1.163431, probability=0.979402, bonus=1.000000, nodes=10 <= 300.000000)
                              @ 49  org.graalvm.collections.EconomicMapImpl.getRawValue(int):Object (11 bytes)   relevance-based (relevance=1.145494, probability=0.964302, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 49  jdk.graal.compiler.graph.Node.valueEquals(Node):boolean (10 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.graph.Node.getNodeClass():NodeClass (5 bytes)   inline accessor method (bytecode parsing)
                                @ 46  jdk.graal.compiler.graph.Graph$1.equals(Object, Object):boolean (53 bytes)   not inlining relevance-based (relevance=0.007448, probability=0.169359, bonus=1.000000, nodes=25 > 2.234271)
                              @ 36  java.lang.Object.equals(Object):boolean (11 bytes)   not inlining no methods remaining after filtering less frequent methods (6 methods previously)
                              @ 24  org.graalvm.collections.EconomicMapImpl.compareKeys(Object, Object):boolean (52 bytes)   relevance-based (relevance=1.037019, probability=27.013007, bonus=1.000000, nodes=40 <= 300.000000)
                              @ 34  org.graalvm.collections.EconomicMapImpl.getRawValue(int):Object (11 bytes)   relevance-based (relevance=1.163431, probability=26.456602, bonus=1.000000, nodes=10 <= 300.000000)
                              @ 49  org.graalvm.collections.EconomicMapImpl.getRawValue(int):Object (11 bytes)   relevance-based (relevance=1.145494, probability=26.048705, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 45  org.graalvm.collections.EconomicMapImpl.getKey(int):Object (9 bytes)   inline method (bytecode parsing)
                            @ 48  org.graalvm.collections.EconomicMapImpl.setKey(int, Object):void (10 bytes)   inline method (bytecode parsing)
                            @ 75  org.graalvm.collections.EconomicMapImpl.setKey(int, Object):void (10 bytes)   inline method (bytecode parsing)
                            @ 81  org.graalvm.collections.EconomicMapImpl.setRawValue(int, Object):void (12 bytes)   inline method (bytecode parsing)
                            @ 112  org.graalvm.collections.EconomicMapImpl.getKey(int):Object (9 bytes)   inline method (bytecode parsing)
                              @ 23  org.graalvm.collections.EconomicMapImpl.hasHashArray():boolean (13 bytes)   trivial (relevance=1.224637, probability=0.834276, bonus=1.000000, nodes=9)
                              @ 57  org.graalvm.collections.EconomicMapImpl.getRawValue(int):Object (11 bytes)   relevance-based (relevance=0.895694, probability=0.610185, bonus=1.000000, nodes=10 <= 268.708268)
                              @ 60  org.graalvm.collections.EconomicMapImpl.setRawValue(int, Object):void (12 bytes)   relevance-based (relevance=0.895694, probability=0.610185, bonus=1.000000, nodes=12 <= 268.708268)
                            @ 23  java.lang.Math.max(int, int):int (11 bytes)   inline method (bytecode parsing)
                            @ 60  org.graalvm.collections.EconomicMapImpl.getKey(int):Object (9 bytes)   inline method (bytecode parsing)
                                @ 32  org.graalvm.collections.EconomicMapImpl.compressLarge(int):int (154 bytes)   not inlining relevance-based (relevance=0.013500, probability=0.008910, bonus=1.000000, nodes=96 > 4.049908)
                              @ 157  org.graalvm.collections.EconomicMapImpl.maybeCompress(int):int (38 bytes)   relevance-based (relevance=0.419001, probability=0.285442, bonus=1.000000, nodes=25 <= 125.700309)
                            @ 34  org.graalvm.collections.EconomicMapImpl.getKey(int):Object (9 bytes)   inline method (bytecode parsing)
                            @ 32  java.util.BitSet.wordIndex(int):int (5 bytes)   inline method (bytecode parsing)
                              @ 62  java.util.BitSet.recalculateWordsInUse():void (39 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=38 <= 300.000000)
                              @ 66  java.util.BitSet.checkInvariants():void (111 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=4)
                            @ 8  jdk.graal.compiler.lir.alloc.lsra.LinearScan.lambda$sortIntervals$0(Interval, Interval):int (10 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.lir.alloc.lsra.Interval.from():int (8 bytes)   inline method (bytecode parsing)
                              @ 5  jdk.graal.compiler.lir.alloc.lsra.Interval.from():int (8 bytes)   inline method (bytecode parsing)
                              @ 6  java.util.Comparator.compare(Object, Object):int (0 bytes)   not inlining no type profile exists
                                @ 8  jdk.graal.compiler.lir.hashing.IntHasher.lambda$static$0(Short, Short):int (46 bytes)   not inlining relevance-based (relevance=0.005187, probability=0.018374, bonus=1.000000, nodes=49 > 1.556037)
                                @ 9  jdk.vm.ci.hotspot.HotSpotResolvedObjectTypeImpl$SortByOffset.compare(ResolvedJavaField, ResolvedJavaField):int (14 bytes)   not inlining relevance-based (relevance=0.006601, probability=0.023385, bonus=1.000000, nodes=18 > 1.980411)
                                @ 9  jdk.graal.compiler.lir.SwitchStrategy$RangesStrategy$1.compare(Integer, Integer):int (54 bytes)   not inlining relevance-based (relevance=0.009038, probability=0.032015, bonus=1.000000, nodes=35 > 2.711276)
                                @ 9  jdk.graal.compiler.lir.SwitchStrategy$SequentialStrategy$1.compare(Integer, Integer):int (54 bytes)   not inlining relevance-based (relevance=0.009038, probability=0.032015, bonus=1.000000, nodes=35 > 2.711276)
                            @ 17  java.lang.Enum.ordinal():int (5 bytes)   inline accessor method (bytecode parsing)
                                        @ 2  java.util.EnumMap.isValidKey(Object):boolean (36 bytes)   relevance-based (relevance=1.000000, probability=0.225468, bonus=1.000000, nodes=13 <= 300.000000)
                                        @ 21  java.util.EnumMap.unmaskNull(Object):Object (13 bytes)   trivial (relevance=1.000008, probability=0.225468, bonus=1.000000, nodes=7)
                                      @ 7  java.util.EnumMap.get(Object):Object (29 bytes)   relevance-based (relevance=1.000000, probability=0.225468, bonus=1.000000, nodes=27 <= 300.000000)
                                    @ 1  jdk.graal.compiler.hotspot.HotSpotCompiledCodeBuilder$SiteComparator.ord(Infopoint):int (19 bytes)   relevance-based (relevance=4.000000, probability=0.225468, bonus=1.000000, nodes=36 <= 300.000000)
                            @ 17  java.lang.Enum.ordinal():int (5 bytes)   inline accessor method (bytecode parsing)
                                        @ 2  java.util.EnumMap.isValidKey(Object):boolean (36 bytes)   relevance-based (relevance=1.000000, probability=0.225468, bonus=1.000000, nodes=13 <= 300.000000)
                                        @ 21  java.util.EnumMap.unmaskNull(Object):Object (13 bytes)   trivial (relevance=1.000008, probability=0.225468, bonus=1.000000, nodes=7)
                                      @ 7  java.util.EnumMap.get(Object):Object (29 bytes)   relevance-based (relevance=1.000000, probability=0.225468, bonus=1.000000, nodes=27 <= 300.000000)
                                    @ 6  jdk.graal.compiler.hotspot.HotSpotCompiledCodeBuilder$SiteComparator.ord(Infopoint):int (19 bytes)   relevance-based (relevance=1.000008, probability=0.225468, bonus=1.000000, nodes=36 <= 300.000000)
                            @ 6  java.lang.Error.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                            @ 89  java.lang.String.format(Locale, String, Object[]):String (17 bytes)   inline method (bytecode parsing)
                              @ 5  java.util.Formatter.<init>(Locale):void (13 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.StringBuilder.<init>():void (7 bytes)   inline method (bytecode parsing)
                                @ 9  java.util.Formatter.<init>(Locale, Appendable):void (15 bytes)   inline method (bytecode parsing)
                                      @ 3  jdk.graal.compiler.debug.GraalError.format(String, Object[]):String (93 bytes)   not inlining relevance-based (relevance=0.250002, probability=0.056367, bonus=1.000000, nodes=81 > 75.000609)
                 n                      @ 16  java.lang.Throwable.fillInStackTrace(int):Throwable (0 bytes)   not inlining it is a non-intrinsic native method
              s                         @ 24  java.lang.Throwable.fillInStackTrace():Throwable (29 bytes)   relevance-based (relevance=0.250002, probability=0.056367, bonus=1.000000, nodes=34 <= 75.000609)
                                      @ 2  java.lang.Throwable.<init>(String):void (34 bytes)   relevance-based (relevance=0.250002, probability=0.056367, bonus=1.000000, nodes=45 <= 75.000609)
                            @ 1  java.util.AbstractList.<init>():void (10 bytes)   inline method (bytecode parsing)
                              @ 1  java.util.AbstractCollection.<init>():void (5 bytes)   inline method (bytecode parsing)
                                      @ 14  java.util.ArrayList.<init>():void (12 bytes)   relevance-based (relevance=1.000008, probability=0.056367, bonus=1.000000, nodes=11 <= 300.000000)
                                    @ 36  jdk.graal.compiler.debug.GraalError.<init>(String, Object[]):void (21 bytes)   relevance-based (relevance=0.250002, probability=0.056367, bonus=1.000000, nodes=62 <= 75.000609)
                                  @ 86  jdk.graal.compiler.hotspot.HotSpotCompiledCodeBuilder$SiteComparator.checkCollision(Infopoint, Infopoint):int (44 bytes)   relevance-based (relevance=1.000000, probability=0.225468, bonus=1.000000, nodes=145 <= 300.000000)
                                @ 9  jdk.graal.compiler.hotspot.HotSpotCompiledCodeBuilder$SiteComparator.compare(Site, Site):int (100 bytes)   relevance-based (relevance=1.000000, probability=3.607490, bonus=1.000000, nodes=191 <= 300.000000)
                              @ 93  jdk.graal.compiler.lir.alloc.lsra.LinearScan$$Lambda/0x00007f45e03010e8.compare(Object, Object):int (12 bytes)   not inlining relevance-based (relevance=1.743744, probability=13.549281, bonus=1.000000, nodes=302 > 300.000000)
                            @ 4  java.nio.Buffer.session():MemorySessionImpl (20 bytes)   inline method (bytecode parsing)
                            @ 18  java.nio.HeapByteBuffer.byteOffset(long):long (7 bytes)   inline method (bytecode parsing)
                            @ 26  jdk.internal.misc.ScopedMemoryAccess.putIntUnaligned(MemorySessionImpl, Object, long, int, boolean):void (23 bytes)   inline method (bytecode parsing)
                              @ 8  jdk.internal.misc.ScopedMemoryAccess.putIntUnalignedInternal(MemorySessionImpl, Object, long, int, boolean):void (37 bytes)   inline method (bytecode parsing)
                                @ 17  jdk.internal.misc.Unsafe.putIntUnaligned(Object, long, int, boolean):void (14 bytes)   inline method (bytecode parsing)
                              @ 14  java.nio.Buffer.nextPutIndex(int):int (32 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=13 <= 300.000000)
                              @ 7  jdk.internal.misc.Unsafe.convEndian(boolean, int):int (16 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=16 <= 300.000000)
                              @ 2  org.graalvm.collections.EconomicMapImpl.checkKeyNonNull(Object):void (15 bytes)   trivial (relevance=1.355395, probability=1.000000, bonus=1.000000, nodes=6)
                              @ 6  org.graalvm.collections.EconomicMapImpl.hasHashArray():boolean (13 bytes)   trivial (relevance=1.355395, probability=1.000000, bonus=1.000000, nodes=9)
                            @ 21  org.graalvm.collections.EconomicMapImpl.getKey(int):Object (9 bytes)   inline method (bytecode parsing)
                            @ 4  jdk.graal.compiler.graph.Node.getNodeClass():NodeClass (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 40  jdk.graal.compiler.graph.Graph$1.hashCode(Object):int (15 bytes)   not inlining relevance-based (relevance=0.010199, probability=0.005296, bonus=1.000000, nodes=14 > 3.059556)
                 n                @ 48  java.lang.Object.hashCode():int (0 bytes)   trivial (relevance=0.494627, probability=0.256873, bonus=1.000000, nodes=5)
                                  @ 61  org.graalvm.collections.EconomicMapImpl.getHashTableSize():int (43 bytes)   relevance-based (relevance=0.504898, probability=0.262208, bonus=1.000000, nodes=21 <= 151.469517)
                                @ 2  org.graalvm.collections.EconomicMapImpl.getHashIndex(Object):int (68 bytes)   relevance-based (relevance=0.421135, probability=0.262208, bonus=1.000000, nodes=81 <= 126.340434)
                              @ 14  org.graalvm.collections.EconomicMapImpl.findAndRemoveHash(Object):int (108 bytes)   not inlining relevance-based (relevance=0.355395, probability=0.262208, bonus=1.000000, nodes=129 > 106.618426)
                            @ 49  jdk.graal.compiler.graph.Node.valueEquals(Node):boolean (10 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.graph.Node.getNodeClass():NodeClass (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 46  jdk.graal.compiler.graph.Graph$1.equals(Object, Object):boolean (53 bytes)   not inlining relevance-based (relevance=0.007448, probability=0.008599, bonus=1.000000, nodes=25 > 2.234271)
                                @ 36  java.lang.Object.equals(Object):boolean (11 bytes)   not inlining no methods remaining after filtering less frequent methods (6 methods previously)
                                @ 26  org.graalvm.collections.EconomicMapImpl.compareKeys(Object, Object):boolean (52 bytes)   relevance-based (relevance=1.183664, probability=1.371562, bonus=1.000000, nodes=40 <= 300.000000)
                              @ 23  org.graalvm.collections.EconomicMapImpl.findLinear(Object):int (42 bytes)   relevance-based (relevance=1.000000, probability=0.737792, bonus=1.000000, nodes=66 <= 300.000000)
                                @ 2  org.graalvm.collections.EconomicMapImpl.getRawValue(int):Object (11 bytes)   relevance-based (relevance=1.048565, probability=0.995377, bonus=1.000000, nodes=10 <= 300.000000)
                              @ 34  org.graalvm.collections.EconomicMapImpl.getValue(int):Object (23 bytes)   relevance-based (relevance=1.349129, probability=0.995377, bonus=1.000000, nodes=19 <= 300.000000)
                            @ 45  org.graalvm.collections.EconomicMapImpl.getKey(int):Object (9 bytes)   inline method (bytecode parsing)
                            @ 48  org.graalvm.collections.EconomicMapImpl.setKey(int, Object):void (10 bytes)   inline method (bytecode parsing)
                            @ 75  org.graalvm.collections.EconomicMapImpl.setKey(int, Object):void (10 bytes)   inline method (bytecode parsing)
                            @ 81  org.graalvm.collections.EconomicMapImpl.setRawValue(int, Object):void (12 bytes)   inline method (bytecode parsing)
                            @ 112  org.graalvm.collections.EconomicMapImpl.getKey(int):Object (9 bytes)   inline method (bytecode parsing)
                              @ 40  org.graalvm.collections.EconomicMapImpl.remove(int):int (165 bytes)   not inlining too large previous low-level graph (low-level-nodes: 926, relevance=1.349129, probability=0.995377, bonus=1.000000, nodes=116)
                                    @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=0.753848, bonus=1.000000, nodes=9)
                            @ 3  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                                    @ 12  java.lang.StringLatin1.charAt(byte[], int):char (15 bytes)   relevance-based (relevance=1.000000, probability=0.753848, bonus=1.000000, nodes=11 <= 300.000000)
                                  @ 14  java.lang.String.charAt(int):char (25 bytes)   relevance-based (relevance=1.257732, probability=0.753848, bonus=1.000000, nodes=16 <= 300.000000)
                            @ 9  java.util.regex.Pattern.lambda$Range$17(int, int, int):boolean (7 bytes)   inline method (bytecode parsing)
                                        @ 3  java.util.regex.Pattern.inRange(int, int, int):boolean (16 bytes)   relevance-based (relevance=0.335239, probability=0.065532, bonus=1.000000, nodes=11 <= 100.571846)
                            @ 9  java.util.regex.Pattern.lambda$Range$17(int, int, int):boolean (7 bytes)   inline method (bytecode parsing)
                                            @ 3  java.util.regex.Pattern.inRange(int, int, int):boolean (16 bytes)   relevance-based (relevance=0.335239, probability=0.032766, bonus=1.000000, nodes=11 <= 100.571846)
                            @ 9  java.util.regex.Pattern.lambda$Range$17(int, int, int):boolean (7 bytes)   inline method (bytecode parsing)
                                                @ 3  java.util.regex.Pattern.inRange(int, int, int):boolean (16 bytes)   relevance-based (relevance=0.335239, probability=0.016383, bonus=1.000000, nodes=11 <= 100.571846)
                            @ 9  java.util.regex.Pattern.lambda$Range$17(int, int, int):boolean (7 bytes)   inline method (bytecode parsing)
                                                    @ 3  java.util.regex.Pattern.inRange(int, int, int):boolean (16 bytes)   relevance-based (relevance=0.335239, probability=0.008192, bonus=1.000000, nodes=11 <= 100.571846)
                            @ 9  java.util.regex.Pattern.lambda$Range$17(int, int, int):boolean (7 bytes)   inline method (bytecode parsing)
                                                        @ 3  java.util.regex.Pattern.inRange(int, int, int):boolean (16 bytes)   relevance-based (relevance=0.335239, probability=0.004096, bonus=1.000000, nodes=11 <= 100.571846)
                                                        @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   not inlining it exceeds the maximum recursive inlining depth
                                                        @ 2  java.util.regex.Pattern$CharPredicate.is(int):boolean (0 bytes)   not inlining it is a polymorphic method call and at least one invoked method cannot be inlined
                                                        @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.335239, probability=0.004096, bonus=1.000000, nodes=13 <= 100.571846)
                                                      @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   relevance-based (relevance=0.335239, probability=0.008192, bonus=1.000000, nodes=27 <= 100.571846)
                                                    @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.335239, probability=0.008192, bonus=1.000000, nodes=39 <= 100.571846)
                                                  @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   relevance-based (relevance=0.335239, probability=0.016383, bonus=1.000000, nodes=52 <= 100.571846)
                                                @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.335239, probability=0.016383, bonus=1.000000, nodes=61 <= 100.571846)
                                              @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   relevance-based (relevance=0.335239, probability=0.032766, bonus=1.000000, nodes=74 <= 100.571846)
                                            @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.335239, probability=0.032766, bonus=1.000000, nodes=83 <= 100.571846)
                                          @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   relevance-based (relevance=0.335239, probability=0.065532, bonus=1.000000, nodes=96 <= 100.571846)
                                        @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   not inlining relevance-based (relevance=0.335239, probability=0.065532, bonus=1.000000, nodes=105 > 100.571846)
                                      @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   relevance-based (relevance=0.335239, probability=0.131064, bonus=1.000000, nodes=22 <= 100.571846)
                                    @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.335239, probability=0.131064, bonus=1.000000, nodes=39 <= 100.571846)
                                    @ 5  java.util.regex.Pattern.lambda$Single$14(int, int):boolean (11 bytes)   trivial (relevance=1.000000, probability=0.491719, bonus=1.000000, nodes=9)
                                  @ 19  java.util.regex.Pattern$$Lambda/0x800000038.is(int):boolean (9 bytes)   relevance-based (relevance=1.257732, probability=0.753848, bonus=1.000000, nodes=57 <= 300.000000)
                                  @ 36  java.util.regex.Pattern$Branch.match(Matcher, int, CharSequence):boolean (66 bytes)   not inlining relevance-based (relevance=0.469723, probability=0.316642, bonus=1.000000, nodes=156 > 140.916870)
                                    @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=2.905608, bonus=1.000000, nodes=9)
                            @ 3  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                                    @ 12  java.lang.StringLatin1.charAt(byte[], int):char (15 bytes)   relevance-based (relevance=1.000000, probability=2.905608, bonus=1.000000, nodes=11 <= 300.000000)
                                  @ 21  java.lang.String.charAt(int):char (25 bytes)   relevance-based (relevance=1.680036, probability=2.905608, bonus=1.000000, nodes=16 <= 300.000000)
                                    @ 5  java.util.regex.Pattern.lambda$Single$14(int, int):boolean (11 bytes)   trivial (relevance=0.964863, probability=0.902334, bonus=1.000000, nodes=9)
                                      @ 8  java.util.regex.ASCII.isDigit(int):boolean (18 bytes)   relevance-based (relevance=1.000000, probability=1.571159, bonus=1.000000, nodes=13 <= 300.000000)
                                    @ 1  java.util.regex.CharPredicates.lambda$ASCII_DIGIT$18(int):boolean (20 bytes)   relevance-based (relevance=1.000000, probability=1.571159, bonus=1.000000, nodes=16 <= 300.000000)
                                  @ 26  java.util.regex.CharPredicates$$Lambda/0x800000034.is(int):boolean (5 bytes)   relevance-based (relevance=1.680036, probability=2.905608, bonus=1.000000, nodes=33 <= 300.000000)
                                      @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=0.473041, bonus=1.000000, nodes=9)
                            @ 3  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                                      @ 12  java.lang.StringLatin1.charAt(byte[], int):char (15 bytes)   relevance-based (relevance=1.000000, probability=0.473041, bonus=1.000000, nodes=11 <= 300.000000)
                                    @ 14  java.lang.String.charAt(int):char (25 bytes)   relevance-based (relevance=1.724242, probability=0.473041, bonus=1.000000, nodes=16 <= 300.000000)
                            @ 9  java.util.regex.Pattern.lambda$Range$17(int, int, int):boolean (7 bytes)   inline method (bytecode parsing)
                                          @ 3  java.util.regex.Pattern.inRange(int, int, int):boolean (16 bytes)   relevance-based (relevance=0.459584, probability=0.041122, bonus=1.000000, nodes=11 <= 137.875320)
                            @ 9  java.util.regex.Pattern.lambda$Range$17(int, int, int):boolean (7 bytes)   inline method (bytecode parsing)
                                              @ 3  java.util.regex.Pattern.inRange(int, int, int):boolean (16 bytes)   relevance-based (relevance=0.459584, probability=0.020561, bonus=1.000000, nodes=11 <= 137.875320)
                            @ 9  java.util.regex.Pattern.lambda$Range$17(int, int, int):boolean (7 bytes)   inline method (bytecode parsing)
                                                  @ 3  java.util.regex.Pattern.inRange(int, int, int):boolean (16 bytes)   relevance-based (relevance=0.459584, probability=0.010280, bonus=1.000000, nodes=11 <= 137.875320)
                            @ 9  java.util.regex.Pattern.lambda$Range$17(int, int, int):boolean (7 bytes)   inline method (bytecode parsing)
                                                      @ 3  java.util.regex.Pattern.inRange(int, int, int):boolean (16 bytes)   relevance-based (relevance=0.459584, probability=0.005140, bonus=1.000000, nodes=11 <= 137.875320)
                            @ 9  java.util.regex.Pattern.lambda$Range$17(int, int, int):boolean (7 bytes)   inline method (bytecode parsing)
                                                          @ 3  java.util.regex.Pattern.inRange(int, int, int):boolean (16 bytes)   relevance-based (relevance=0.459584, probability=0.002570, bonus=1.000000, nodes=11 <= 137.875320)
                                                          @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   not inlining it exceeds the maximum recursive inlining depth
                                                          @ 2  java.util.regex.Pattern$CharPredicate.is(int):boolean (0 bytes)   not inlining it is a polymorphic method call and at least one invoked method cannot be inlined
                                                          @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.459584, probability=0.002570, bonus=1.000000, nodes=13 <= 137.875320)
                                                        @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   relevance-based (relevance=0.459584, probability=0.005140, bonus=1.000000, nodes=27 <= 137.875320)
                                                      @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.459584, probability=0.005140, bonus=1.000000, nodes=39 <= 137.875320)
                                                    @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   relevance-based (relevance=0.459584, probability=0.010280, bonus=1.000000, nodes=52 <= 137.875320)
                                                  @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.459584, probability=0.010280, bonus=1.000000, nodes=61 <= 137.875320)
                                                @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   relevance-based (relevance=0.459584, probability=0.020561, bonus=1.000000, nodes=74 <= 137.875320)
                                              @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.459584, probability=0.020561, bonus=1.000000, nodes=83 <= 137.875320)
                                            @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   relevance-based (relevance=0.459584, probability=0.041122, bonus=1.000000, nodes=96 <= 137.875320)
                                          @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.459584, probability=0.041122, bonus=1.000000, nodes=105 <= 137.875320)
                                        @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   relevance-based (relevance=0.459584, probability=0.082243, bonus=1.000000, nodes=118 <= 137.875320)
                                      @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.459584, probability=0.082243, bonus=1.000000, nodes=127 <= 137.875320)
                                      @ 5  java.util.regex.Pattern.lambda$Single$14(int, int):boolean (11 bytes)   trivial (relevance=1.000000, probability=0.308555, bonus=1.000000, nodes=9)
                                    @ 19  java.util.regex.Pattern$$Lambda/0x800000038.is(int):boolean (9 bytes)   relevance-based (relevance=1.724242, probability=0.473041, bonus=1.000000, nodes=145 <= 300.000000)
                                        @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=0.450073, probability=0.057476, bonus=1.000000, nodes=9)
                            @ 3  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                                        @ 12  java.lang.StringLatin1.charAt(byte[], int):char (15 bytes)   relevance-based (relevance=0.450073, probability=0.057476, bonus=1.000000, nodes=11 <= 135.021815)
                                      @ 21  java.lang.String.charAt(int):char (25 bytes)   relevance-based (relevance=0.450073, probability=0.057476, bonus=1.000000, nodes=16 <= 135.021815)
                                        @ 5  java.util.regex.Pattern.lambda$Single$14(int, int):boolean (11 bytes)   trivial (relevance=0.258482, probability=0.017849, bonus=1.000000, nodes=9)
                                          @ 8  java.util.regex.ASCII.isDigit(int):boolean (18 bytes)   relevance-based (relevance=0.450073, probability=0.031079, bonus=1.000000, nodes=13 <= 135.021815)
                                        @ 1  java.util.regex.CharPredicates.lambda$ASCII_DIGIT$18(int):boolean (20 bytes)   relevance-based (relevance=0.450073, probability=0.031079, bonus=1.000000, nodes=16 <= 135.021815)
                                      @ 26  java.util.regex.CharPredicates$$Lambda/0x800000034.is(int):boolean (5 bytes)   relevance-based (relevance=0.450073, probability=0.057476, bonus=1.000000, nodes=33 <= 135.021815)
                                    @ 36  java.util.regex.Pattern$Branch.match(Matcher, int, CharSequence):boolean (66 bytes)   not inlining relevance-based (relevance=0.643950, probability=0.198694, bonus=1.000000, nodes=202 > 193.184865)
                                              @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=0.183011, bonus=1.000000, nodes=9)
                            @ 3  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                                              @ 12  java.lang.StringLatin1.charAt(byte[], int):char (15 bytes)   relevance-based (relevance=1.000000, probability=0.183011, bonus=1.000000, nodes=11 <= 300.000000)
                                            @ 14  java.lang.String.charAt(int):char (25 bytes)   relevance-based (relevance=1.724242, probability=0.183011, bonus=1.000000, nodes=16 <= 300.000000)
                            @ 9  java.util.regex.Pattern.lambda$Range$17(int, int, int):boolean (7 bytes)   inline method (bytecode parsing)
                                                  @ 3  java.util.regex.Pattern.inRange(int, int, int):boolean (16 bytes)   relevance-based (relevance=0.459584, probability=0.015909, bonus=1.000000, nodes=11 <= 137.875320)
                            @ 9  java.util.regex.Pattern.lambda$Range$17(int, int, int):boolean (7 bytes)   inline method (bytecode parsing)
                                                      @ 3  java.util.regex.Pattern.inRange(int, int, int):boolean (16 bytes)   relevance-based (relevance=0.459584, probability=0.007955, bonus=1.000000, nodes=11 <= 137.875320)
                            @ 9  java.util.regex.Pattern.lambda$Range$17(int, int, int):boolean (7 bytes)   inline method (bytecode parsing)
                                                          @ 3  java.util.regex.Pattern.inRange(int, int, int):boolean (16 bytes)   relevance-based (relevance=0.459584, probability=0.003977, bonus=1.000000, nodes=11 <= 137.875320)
                            @ 9  java.util.regex.Pattern.lambda$Range$17(int, int, int):boolean (7 bytes)   inline method (bytecode parsing)
                                                              @ 3  java.util.regex.Pattern.inRange(int, int, int):boolean (16 bytes)   relevance-based (relevance=0.459584, probability=0.001989, bonus=1.000000, nodes=11 <= 137.875320)
                            @ 9  java.util.regex.Pattern.lambda$Range$17(int, int, int):boolean (7 bytes)   inline method (bytecode parsing)
                                                                  @ 3  java.util.regex.Pattern.inRange(int, int, int):boolean (16 bytes)   relevance-based (relevance=0.459584, probability=0.000994, bonus=1.000000, nodes=11 <= 137.875320)
                                                                  @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   not inlining it exceeds the maximum recursive inlining depth
                                                                  @ 2  java.util.regex.Pattern$CharPredicate.is(int):boolean (0 bytes)   not inlining it is a polymorphic method call and at least one invoked method cannot be inlined
                                                                  @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.459584, probability=0.000994, bonus=1.000000, nodes=13 <= 137.875320)
                                                                @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   relevance-based (relevance=0.459584, probability=0.001989, bonus=1.000000, nodes=27 <= 137.875320)
                                                              @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.459584, probability=0.001989, bonus=1.000000, nodes=39 <= 137.875320)
                                                            @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   relevance-based (relevance=0.459584, probability=0.003977, bonus=1.000000, nodes=52 <= 137.875320)
                                                          @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.459584, probability=0.003977, bonus=1.000000, nodes=61 <= 137.875320)
                                                        @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   relevance-based (relevance=0.459584, probability=0.007955, bonus=1.000000, nodes=74 <= 137.875320)
                                                      @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.459584, probability=0.007955, bonus=1.000000, nodes=83 <= 137.875320)
                                                    @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   relevance-based (relevance=0.459584, probability=0.015909, bonus=1.000000, nodes=96 <= 137.875320)
                                                  @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.459584, probability=0.015909, bonus=1.000000, nodes=105 <= 137.875320)
                                                @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   relevance-based (relevance=0.459584, probability=0.031818, bonus=1.000000, nodes=118 <= 137.875320)
                                              @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.459584, probability=0.031818, bonus=1.000000, nodes=127 <= 137.875320)
                                              @ 5  java.util.regex.Pattern.lambda$Single$14(int, int):boolean (11 bytes)   trivial (relevance=1.000000, probability=0.119374, bonus=1.000000, nodes=9)
                                            @ 19  java.util.regex.Pattern$$Lambda/0x800000038.is(int):boolean (9 bytes)   relevance-based (relevance=1.724242, probability=0.183011, bonus=1.000000, nodes=145 <= 300.000000)
                                                @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=0.450073, probability=0.022236, bonus=1.000000, nodes=9)
                            @ 3  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                                                @ 12  java.lang.StringLatin1.charAt(byte[], int):char (15 bytes)   relevance-based (relevance=0.450073, probability=0.022236, bonus=1.000000, nodes=11 <= 135.021815)
                                              @ 21  java.lang.String.charAt(int):char (25 bytes)   relevance-based (relevance=0.450073, probability=0.022236, bonus=1.000000, nodes=16 <= 135.021815)
                                                @ 5  java.util.regex.Pattern.lambda$Single$14(int, int):boolean (11 bytes)   trivial (relevance=0.258482, probability=0.006906, bonus=1.000000, nodes=9)
                                                  @ 8  java.util.regex.ASCII.isDigit(int):boolean (18 bytes)   relevance-based (relevance=0.450073, probability=0.012024, bonus=1.000000, nodes=13 <= 135.021815)
                                                @ 1  java.util.regex.CharPredicates.lambda$ASCII_DIGIT$18(int):boolean (20 bytes)   relevance-based (relevance=0.450073, probability=0.012024, bonus=1.000000, nodes=16 <= 135.021815)
                                              @ 26  java.util.regex.CharPredicates$$Lambda/0x800000034.is(int):boolean (5 bytes)   relevance-based (relevance=0.450073, probability=0.022236, bonus=1.000000, nodes=33 <= 135.021815)
                                            @ 36  java.util.regex.Pattern$Branch.match(Matcher, int, CharSequence):boolean (66 bytes)   not inlining relevance-based (relevance=0.643950, probability=0.076871, bonus=1.000000, nodes=202 > 193.184865)
                                              @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=0.307445, bonus=1.000000, nodes=9)
                            @ 3  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                                              @ 12  java.lang.StringLatin1.charAt(byte[], int):char (15 bytes)   relevance-based (relevance=1.000000, probability=0.307445, bonus=1.000000, nodes=11 <= 300.000000)
                                            @ 21  java.lang.String.charAt(int):char (25 bytes)   relevance-based (relevance=1.680036, probability=0.307445, bonus=1.000000, nodes=16 <= 300.000000)
                                              @ 5  java.util.regex.Pattern.lambda$Single$14(int, int):boolean (11 bytes)   trivial (relevance=0.964863, probability=0.095477, bonus=1.000000, nodes=9)
                                                @ 8  java.util.regex.ASCII.isDigit(int):boolean (18 bytes)   relevance-based (relevance=1.000000, probability=0.166246, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 1  java.util.regex.CharPredicates.lambda$ASCII_DIGIT$18(int):boolean (20 bytes)   relevance-based (relevance=1.000000, probability=0.166246, bonus=1.000000, nodes=16 <= 300.000000)
                                            @ 26  java.util.regex.CharPredicates$$Lambda/0x800000034.is(int):boolean (5 bytes)   relevance-based (relevance=1.680036, probability=0.307445, bonus=1.000000, nodes=33 <= 300.000000)
                                          @ 28  java.util.regex.Pattern$BmpCharPropertyGreedy.match(Matcher, int, CharSequence):boolean (89 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.366021, bonus=1.000000, nodes=317 > 300.000000)
                                        @ 50  java.util.regex.Pattern$GroupHead.match(Matcher, int, CharSequence):boolean (47 bytes)   relevance-based (relevance=1.666712, probability=0.366021, bonus=1.000000, nodes=20 <= 300.000000)
                                              @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=0.862209, probability=0.036604, bonus=1.000000, nodes=9)
                            @ 3  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                                              @ 12  java.lang.StringLatin1.charAt(byte[], int):char (15 bytes)   relevance-based (relevance=0.862209, probability=0.036604, bonus=1.000000, nodes=11 <= 258.662722)
                                            @ 14  java.lang.String.charAt(int):char (25 bytes)   relevance-based (relevance=0.862209, probability=0.036604, bonus=1.000000, nodes=16 <= 258.662722)
                            @ 9  java.util.regex.Pattern.lambda$Range$17(int, int, int):boolean (7 bytes)   inline method (bytecode parsing)
                                                  @ 3  java.util.regex.Pattern.inRange(int, int, int):boolean (16 bytes)   relevance-based (relevance=0.229816, probability=0.003182, bonus=1.000000, nodes=11 <= 68.944715)
                            @ 9  java.util.regex.Pattern.lambda$Range$17(int, int, int):boolean (7 bytes)   inline method (bytecode parsing)
                                                      @ 3  java.util.regex.Pattern.inRange(int, int, int):boolean (16 bytes)   relevance-based (relevance=0.229816, probability=0.001591, bonus=1.000000, nodes=11 <= 68.944715)
                            @ 9  java.util.regex.Pattern.lambda$Range$17(int, int, int):boolean (7 bytes)   inline method (bytecode parsing)
                                                          @ 3  java.util.regex.Pattern.inRange(int, int, int):boolean (16 bytes)   relevance-based (relevance=0.229816, probability=0.000795, bonus=1.000000, nodes=11 <= 68.944715)
                            @ 9  java.util.regex.Pattern.lambda$Range$17(int, int, int):boolean (7 bytes)   inline method (bytecode parsing)
                                                              @ 3  java.util.regex.Pattern.inRange(int, int, int):boolean (16 bytes)   relevance-based (relevance=0.229816, probability=0.000398, bonus=1.000000, nodes=11 <= 68.944715)
                            @ 9  java.util.regex.Pattern.lambda$Range$17(int, int, int):boolean (7 bytes)   inline method (bytecode parsing)
                                                                  @ 3  java.util.regex.Pattern.inRange(int, int, int):boolean (16 bytes)   relevance-based (relevance=0.229816, probability=0.000199, bonus=1.000000, nodes=11 <= 68.944715)
                                                                  @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   not inlining it exceeds the maximum recursive inlining depth
                                                                  @ 2  java.util.regex.Pattern$CharPredicate.is(int):boolean (0 bytes)   not inlining it is a polymorphic method call and at least one invoked method cannot be inlined
                                                                  @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.229816, probability=0.000199, bonus=1.000000, nodes=13 <= 68.944715)
                                                                @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   relevance-based (relevance=0.229816, probability=0.000398, bonus=1.000000, nodes=27 <= 68.944715)
                                                              @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.229816, probability=0.000398, bonus=1.000000, nodes=39 <= 68.944715)
                                                            @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   relevance-based (relevance=0.229816, probability=0.000795, bonus=1.000000, nodes=52 <= 68.944715)
                                                          @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.229816, probability=0.000795, bonus=1.000000, nodes=61 <= 68.944715)
                                                        @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   not inlining relevance-based (relevance=0.229816, probability=0.001591, bonus=1.000000, nodes=74 > 68.944715)
                                                      @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.229816, probability=0.001591, bonus=1.000000, nodes=13 <= 68.944715)
                                                    @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   relevance-based (relevance=0.229816, probability=0.003182, bonus=1.000000, nodes=27 <= 68.944715)
                                                  @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.229816, probability=0.003182, bonus=1.000000, nodes=39 <= 68.944715)
                                                @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   relevance-based (relevance=0.229816, probability=0.006364, bonus=1.000000, nodes=52 <= 68.944715)
                                              @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.229816, probability=0.006364, bonus=1.000000, nodes=61 <= 68.944715)
                                              @ 5  java.util.regex.Pattern.lambda$Single$14(int, int):boolean (11 bytes)   trivial (relevance=0.862209, probability=0.023876, bonus=1.000000, nodes=9)
                                            @ 19  java.util.regex.Pattern$$Lambda/0x800000038.is(int):boolean (9 bytes)   relevance-based (relevance=0.862209, probability=0.036604, bonus=1.000000, nodes=79 <= 258.662722)
                                          @ 28  java.util.regex.Pattern$BmpCharPropertyGreedy.match(Matcher, int, CharSequence):boolean (89 bytes)   not inlining relevance-based (relevance=0.500051, probability=0.073207, bonus=1.000000, nodes=205 > 150.015352)
                                                @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=0.073200, bonus=1.000000, nodes=9)
                            @ 3  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                                                @ 12  java.lang.StringLatin1.charAt(byte[], int):char (15 bytes)   relevance-based (relevance=1.000000, probability=0.073200, bonus=1.000000, nodes=11 <= 300.000000)
                                              @ 14  java.lang.String.charAt(int):char (25 bytes)   relevance-based (relevance=1.724242, probability=0.073200, bonus=1.000000, nodes=16 <= 300.000000)
                            @ 9  java.util.regex.Pattern.lambda$Range$17(int, int, int):boolean (7 bytes)   inline method (bytecode parsing)
                                                    @ 3  java.util.regex.Pattern.inRange(int, int, int):boolean (16 bytes)   relevance-based (relevance=0.459584, probability=0.006363, bonus=1.000000, nodes=11 <= 137.875320)
                            @ 9  java.util.regex.Pattern.lambda$Range$17(int, int, int):boolean (7 bytes)   inline method (bytecode parsing)
                                                        @ 3  java.util.regex.Pattern.inRange(int, int, int):boolean (16 bytes)   relevance-based (relevance=0.459584, probability=0.003182, bonus=1.000000, nodes=11 <= 137.875320)
                            @ 9  java.util.regex.Pattern.lambda$Range$17(int, int, int):boolean (7 bytes)   inline method (bytecode parsing)
                                                            @ 3  java.util.regex.Pattern.inRange(int, int, int):boolean (16 bytes)   relevance-based (relevance=0.459584, probability=0.001591, bonus=1.000000, nodes=11 <= 137.875320)
                            @ 9  java.util.regex.Pattern.lambda$Range$17(int, int, int):boolean (7 bytes)   inline method (bytecode parsing)
                                                                @ 3  java.util.regex.Pattern.inRange(int, int, int):boolean (16 bytes)   relevance-based (relevance=0.459584, probability=0.000795, bonus=1.000000, nodes=11 <= 137.875320)
                            @ 9  java.util.regex.Pattern.lambda$Range$17(int, int, int):boolean (7 bytes)   inline method (bytecode parsing)
                                                                    @ 3  java.util.regex.Pattern.inRange(int, int, int):boolean (16 bytes)   relevance-based (relevance=0.459584, probability=0.000398, bonus=1.000000, nodes=11 <= 137.875320)
                                                                    @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   not inlining it exceeds the maximum recursive inlining depth
                                                                    @ 2  java.util.regex.Pattern$CharPredicate.is(int):boolean (0 bytes)   not inlining it is a polymorphic method call and at least one invoked method cannot be inlined
                                                                    @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.459584, probability=0.000398, bonus=1.000000, nodes=13 <= 137.875320)
                                                                  @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   relevance-based (relevance=0.459584, probability=0.000795, bonus=1.000000, nodes=27 <= 137.875320)
                                                                @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.459584, probability=0.000795, bonus=1.000000, nodes=39 <= 137.875320)
                                                              @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   relevance-based (relevance=0.459584, probability=0.001591, bonus=1.000000, nodes=52 <= 137.875320)
                                                            @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.459584, probability=0.001591, bonus=1.000000, nodes=61 <= 137.875320)
                                                          @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   relevance-based (relevance=0.459584, probability=0.003182, bonus=1.000000, nodes=74 <= 137.875320)
                                                        @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.459584, probability=0.003182, bonus=1.000000, nodes=83 <= 137.875320)
                                                      @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   relevance-based (relevance=0.459584, probability=0.006363, bonus=1.000000, nodes=96 <= 137.875320)
                                                    @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.459584, probability=0.006363, bonus=1.000000, nodes=105 <= 137.875320)
                                                  @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   relevance-based (relevance=0.459584, probability=0.012727, bonus=1.000000, nodes=118 <= 137.875320)
                                                @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.459584, probability=0.012727, bonus=1.000000, nodes=127 <= 137.875320)
                                                @ 5  java.util.regex.Pattern.lambda$Single$14(int, int):boolean (11 bytes)   trivial (relevance=1.000000, probability=0.047747, bonus=1.000000, nodes=9)
                                              @ 19  java.util.regex.Pattern$$Lambda/0x800000038.is(int):boolean (9 bytes)   relevance-based (relevance=1.724242, probability=0.073200, bonus=1.000000, nodes=145 <= 300.000000)
                                                  @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=0.450073, probability=0.008894, bonus=1.000000, nodes=9)
                            @ 3  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                                                  @ 12  java.lang.StringLatin1.charAt(byte[], int):char (15 bytes)   relevance-based (relevance=0.450073, probability=0.008894, bonus=1.000000, nodes=11 <= 135.021815)
                                                @ 21  java.lang.String.charAt(int):char (25 bytes)   relevance-based (relevance=0.450073, probability=0.008894, bonus=1.000000, nodes=16 <= 135.021815)
                                                  @ 5  java.util.regex.Pattern.lambda$Single$14(int, int):boolean (11 bytes)   trivial (relevance=0.258482, probability=0.002762, bonus=1.000000, nodes=9)
                              @ 22  jdk.internal.util.ArraysSupport.newLength(int, int, int):int (27 bytes)   not inlining relevance-based (relevance=0.032014, probability=0.031021, bonus=1.000000, nodes=16 > 9.604317)
                                                    @ 8  java.util.regex.ASCII.isDigit(int):boolean (18 bytes)   relevance-based (relevance=0.450073, probability=0.004809, bonus=1.000000, nodes=13 <= 135.021815)
                                                  @ 1  java.util.regex.CharPredicates.lambda$ASCII_DIGIT$18(int):boolean (20 bytes)   relevance-based (relevance=0.450073, probability=0.004809, bonus=1.000000, nodes=16 <= 135.021815)
                                                @ 26  java.util.regex.CharPredicates$$Lambda/0x800000034.is(int):boolean (5 bytes)   relevance-based (relevance=0.450073, probability=0.008894, bonus=1.000000, nodes=33 <= 135.021815)
                              @ 25  java.util.Arrays.copyOf(byte[], int):byte[] (33 bytes)   not inlining relevance-based (relevance=0.032014, probability=0.031021, bonus=1.000000, nodes=29 > 9.604317)
                                              @ 36  java.util.regex.Pattern$Branch.match(Matcher, int, CharSequence):boolean (66 bytes)   not inlining relevance-based (relevance=0.643950, probability=0.030746, bonus=1.000000, nodes=202 > 193.184865)
                                                @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=0.122971, bonus=1.000000, nodes=9)
                            @ 3  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                                                @ 12  java.lang.StringLatin1.charAt(byte[], int):char (15 bytes)   relevance-based (relevance=1.000000, probability=0.122971, bonus=1.000000, nodes=11 <= 300.000000)
                                              @ 21  java.lang.String.charAt(int):char (25 bytes)   relevance-based (relevance=1.680036, probability=0.122971, bonus=1.000000, nodes=16 <= 300.000000)
                                                @ 5  java.util.regex.Pattern.lambda$Single$14(int, int):boolean (11 bytes)   trivial (relevance=0.964863, probability=0.038188, bonus=1.000000, nodes=9)
                                                  @ 8  java.util.regex.ASCII.isDigit(int):boolean (18 bytes)   relevance-based (relevance=1.000000, probability=0.066494, bonus=1.000000, nodes=13 <= 300.000000)
                                                @ 1  java.util.regex.CharPredicates.lambda$ASCII_DIGIT$18(int):boolean (20 bytes)   relevance-based (relevance=1.000000, probability=0.066494, bonus=1.000000, nodes=16 <= 300.000000)
                                              @ 26  java.util.regex.CharPredicates$$Lambda/0x800000034.is(int):boolean (5 bytes)   relevance-based (relevance=1.680036, probability=0.122971, bonus=1.000000, nodes=33 <= 300.000000)
                                            @ 28  java.util.regex.Pattern$BmpCharPropertyGreedy.match(Matcher, int, CharSequence):boolean (89 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.146400, bonus=1.000000, nodes=317 > 300.000000)
                                          @ 50  java.util.regex.Pattern$GroupHead.match(Matcher, int, CharSequence):boolean (47 bytes)   relevance-based (relevance=1.666712, probability=0.146400, bonus=1.000000, nodes=20 <= 300.000000)
                                                @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=0.862209, probability=0.014641, bonus=1.000000, nodes=9)
                            @ 3  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                                                @ 12  java.lang.StringLatin1.charAt(byte[], int):char (15 bytes)   relevance-based (relevance=0.862209, probability=0.014641, bonus=1.000000, nodes=11 <= 258.662722)
                                              @ 14  java.lang.String.charAt(int):char (25 bytes)   relevance-based (relevance=0.862209, probability=0.014641, bonus=1.000000, nodes=16 <= 258.662722)
                            @ 9  java.util.regex.Pattern.lambda$Range$17(int, int, int):boolean (7 bytes)   inline method (bytecode parsing)
                                                    @ 3  java.util.regex.Pattern.inRange(int, int, int):boolean (16 bytes)   relevance-based (relevance=0.229816, probability=0.001273, bonus=1.000000, nodes=11 <= 68.944715)
                            @ 9  java.util.regex.Pattern.lambda$Range$17(int, int, int):boolean (7 bytes)   inline method (bytecode parsing)
                                                        @ 3  java.util.regex.Pattern.inRange(int, int, int):boolean (16 bytes)   relevance-based (relevance=0.229816, probability=0.000636, bonus=1.000000, nodes=11 <= 68.944715)
                            @ 9  java.util.regex.Pattern.lambda$Range$17(int, int, int):boolean (7 bytes)   inline method (bytecode parsing)
                                                            @ 3  java.util.regex.Pattern.inRange(int, int, int):boolean (16 bytes)   relevance-based (relevance=0.229816, probability=0.000318, bonus=1.000000, nodes=11 <= 68.944715)
                            @ 9  java.util.regex.Pattern.lambda$Range$17(int, int, int):boolean (7 bytes)   inline method (bytecode parsing)
                                                                @ 3  java.util.regex.Pattern.inRange(int, int, int):boolean (16 bytes)   relevance-based (relevance=0.229816, probability=0.000159, bonus=1.000000, nodes=11 <= 68.944715)
                            @ 9  java.util.regex.Pattern.lambda$Range$17(int, int, int):boolean (7 bytes)   inline method (bytecode parsing)
                                                                    @ 3  java.util.regex.Pattern.inRange(int, int, int):boolean (16 bytes)   relevance-based (relevance=0.229816, probability=0.000080, bonus=1.000000, nodes=11 <= 68.944715)
                                                                    @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   not inlining it exceeds the maximum recursive inlining depth
                                                                    @ 2  java.util.regex.Pattern$CharPredicate.is(int):boolean (0 bytes)   not inlining it is a polymorphic method call and at least one invoked method cannot be inlined
                                                                    @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.229816, probability=0.000080, bonus=1.000000, nodes=13 <= 68.944715)
                                                                  @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   relevance-based (relevance=0.229816, probability=0.000159, bonus=1.000000, nodes=27 <= 68.944715)
                                                                @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.229816, probability=0.000159, bonus=1.000000, nodes=39 <= 68.944715)
                                                              @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   relevance-based (relevance=0.229816, probability=0.000318, bonus=1.000000, nodes=52 <= 68.944715)
                                                            @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.229816, probability=0.000318, bonus=1.000000, nodes=61 <= 68.944715)
                                                          @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   not inlining relevance-based (relevance=0.229816, probability=0.000636, bonus=1.000000, nodes=74 > 68.944715)
                                                        @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.229816, probability=0.000636, bonus=1.000000, nodes=13 <= 68.944715)
                                                      @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   relevance-based (relevance=0.229816, probability=0.001273, bonus=1.000000, nodes=27 <= 68.944715)
                                                    @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.229816, probability=0.001273, bonus=1.000000, nodes=39 <= 68.944715)
                                                  @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   relevance-based (relevance=0.229816, probability=0.002545, bonus=1.000000, nodes=52 <= 68.944715)
                                                @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.229816, probability=0.002545, bonus=1.000000, nodes=61 <= 68.944715)
                                                @ 5  java.util.regex.Pattern.lambda$Single$14(int, int):boolean (11 bytes)   trivial (relevance=0.862209, probability=0.009550, bonus=1.000000, nodes=9)
                                              @ 19  java.util.regex.Pattern$$Lambda/0x800000038.is(int):boolean (9 bytes)   relevance-based (relevance=0.862209, probability=0.014641, bonus=1.000000, nodes=79 <= 258.662722)
                                            @ 28  java.util.regex.Pattern$BmpCharPropertyGreedy.match(Matcher, int, CharSequence):boolean (89 bytes)   not inlining relevance-based (relevance=0.500051, probability=0.029281, bonus=1.000000, nodes=205 > 150.015352)
                                                  @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=0.029278, bonus=1.000000, nodes=9)
                            @ 3  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                                                  @ 12  java.lang.StringLatin1.charAt(byte[], int):char (15 bytes)   relevance-based (relevance=1.000000, probability=0.029278, bonus=1.000000, nodes=11 <= 300.000000)
                                                @ 14  java.lang.String.charAt(int):char (25 bytes)   relevance-based (relevance=1.724242, probability=0.029278, bonus=1.000000, nodes=16 <= 300.000000)
                            @ 9  java.util.regex.Pattern.lambda$Range$17(int, int, int):boolean (7 bytes)   inline method (bytecode parsing)
                                                      @ 3  java.util.regex.Pattern.inRange(int, int, int):boolean (16 bytes)   relevance-based (relevance=0.459584, probability=0.002545, bonus=1.000000, nodes=11 <= 137.875320)
                            @ 9  java.util.regex.Pattern.lambda$Range$17(int, int, int):boolean (7 bytes)   inline method (bytecode parsing)
                                                          @ 3  java.util.regex.Pattern.inRange(int, int, int):boolean (16 bytes)   relevance-based (relevance=0.459584, probability=0.001273, bonus=1.000000, nodes=11 <= 137.875320)
                            @ 9  java.util.regex.Pattern.lambda$Range$17(int, int, int):boolean (7 bytes)   inline method (bytecode parsing)
                                                              @ 3  java.util.regex.Pattern.inRange(int, int, int):boolean (16 bytes)   relevance-based (relevance=0.459584, probability=0.000636, bonus=1.000000, nodes=11 <= 137.875320)
                            @ 9  java.util.regex.Pattern.lambda$Range$17(int, int, int):boolean (7 bytes)   inline method (bytecode parsing)
                                                                  @ 3  java.util.regex.Pattern.inRange(int, int, int):boolean (16 bytes)   relevance-based (relevance=0.459584, probability=0.000318, bonus=1.000000, nodes=11 <= 137.875320)
                            @ 9  java.util.regex.Pattern.lambda$Range$17(int, int, int):boolean (7 bytes)   inline method (bytecode parsing)
                                                                      @ 3  java.util.regex.Pattern.inRange(int, int, int):boolean (16 bytes)   relevance-based (relevance=0.459584, probability=0.000159, bonus=1.000000, nodes=11 <= 137.875320)
                                                                      @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   not inlining it exceeds the maximum recursive inlining depth
                                                                      @ 2  java.util.regex.Pattern$CharPredicate.is(int):boolean (0 bytes)   not inlining it is a polymorphic method call and at least one invoked method cannot be inlined
                                                                      @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.459584, probability=0.000159, bonus=1.000000, nodes=13 <= 137.875320)
                                                                    @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   relevance-based (relevance=0.459584, probability=0.000318, bonus=1.000000, nodes=27 <= 137.875320)
                                                                  @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.459584, probability=0.000318, bonus=1.000000, nodes=39 <= 137.875320)
                                                                @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   relevance-based (relevance=0.459584, probability=0.000636, bonus=1.000000, nodes=52 <= 137.875320)
                                                              @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.459584, probability=0.000636, bonus=1.000000, nodes=61 <= 137.875320)
                                                            @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   relevance-based (relevance=0.459584, probability=0.001273, bonus=1.000000, nodes=74 <= 137.875320)
                                                          @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.459584, probability=0.001273, bonus=1.000000, nodes=83 <= 137.875320)
                                                        @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   relevance-based (relevance=0.459584, probability=0.002545, bonus=1.000000, nodes=96 <= 137.875320)
                                                      @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.459584, probability=0.002545, bonus=1.000000, nodes=105 <= 137.875320)
                                                    @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   relevance-based (relevance=0.459584, probability=0.005090, bonus=1.000000, nodes=118 <= 137.875320)
                                                  @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.459584, probability=0.005090, bonus=1.000000, nodes=127 <= 137.875320)
                                                  @ 5  java.util.regex.Pattern.lambda$Single$14(int, int):boolean (11 bytes)   trivial (relevance=1.000000, probability=0.019097, bonus=1.000000, nodes=9)
                                                @ 19  java.util.regex.Pattern$$Lambda/0x800000038.is(int):boolean (9 bytes)   relevance-based (relevance=1.724242, probability=0.029278, bonus=1.000000, nodes=145 <= 300.000000)
                                                    @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=0.450073, probability=0.003557, bonus=1.000000, nodes=9)
                            @ 3  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                                                    @ 12  java.lang.StringLatin1.charAt(byte[], int):char (15 bytes)   relevance-based (relevance=0.450073, probability=0.003557, bonus=1.000000, nodes=11 <= 135.021815)
                                                  @ 21  java.lang.String.charAt(int):char (25 bytes)   relevance-based (relevance=0.450073, probability=0.003557, bonus=1.000000, nodes=16 <= 135.021815)
                                                    @ 5  java.util.regex.Pattern.lambda$Single$14(int, int):boolean (11 bytes)   trivial (relevance=0.258482, probability=0.001105, bonus=1.000000, nodes=9)
                                                      @ 8  java.util.regex.ASCII.isDigit(int):boolean (18 bytes)   relevance-based (relevance=0.450073, probability=0.001924, bonus=1.000000, nodes=13 <= 135.021815)
                                                    @ 1  java.util.regex.CharPredicates.lambda$ASCII_DIGIT$18(int):boolean (20 bytes)   relevance-based (relevance=0.450073, probability=0.001924, bonus=1.000000, nodes=16 <= 135.021815)
                                                  @ 26  java.util.regex.CharPredicates$$Lambda/0x800000034.is(int):boolean (5 bytes)   relevance-based (relevance=0.450073, probability=0.003557, bonus=1.000000, nodes=33 <= 135.021815)
                                                @ 36  java.util.regex.Pattern$Branch.match(Matcher, int, CharSequence):boolean (66 bytes)   not inlining relevance-based (relevance=0.643950, probability=0.012298, bonus=1.000000, nodes=202 > 193.184865)
                                                  @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=0.049185, bonus=1.000000, nodes=9)
                            @ 3  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                            @ 4  java.util.Objects.checkFromIndexSize(int, int, int):int (8 bytes)   inline method (bytecode parsing)
                                                  @ 12  java.lang.StringLatin1.charAt(byte[], int):char (15 bytes)   relevance-based (relevance=1.000000, probability=0.049185, bonus=1.000000, nodes=11 <= 300.000000)
                                                @ 21  java.lang.String.charAt(int):char (25 bytes)   relevance-based (relevance=1.680036, probability=0.049185, bonus=1.000000, nodes=16 <= 300.000000)
                                                  @ 5  java.util.regex.Pattern.lambda$Single$14(int, int):boolean (11 bytes)   trivial (relevance=0.964863, probability=0.015274, bonus=1.000000, nodes=9)
                                                    @ 8  java.util.regex.ASCII.isDigit(int):boolean (18 bytes)   relevance-based (relevance=1.000000, probability=0.026596, bonus=1.000000, nodes=13 <= 300.000000)
                                                  @ 1  java.util.regex.CharPredicates.lambda$ASCII_DIGIT$18(int):boolean (20 bytes)   relevance-based (relevance=1.000000, probability=0.026596, bonus=1.000000, nodes=16 <= 300.000000)
                                                @ 26  java.util.regex.CharPredicates$$Lambda/0x800000034.is(int):boolean (5 bytes)   relevance-based (relevance=1.680036, probability=0.049185, bonus=1.000000, nodes=33 <= 300.000000)
                                              @ 28  java.util.regex.Pattern$BmpCharPropertyGreedy.match(Matcher, int, CharSequence):boolean (89 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.058556, bonus=1.000000, nodes=317 > 300.000000)
                                            @ 50  java.util.regex.Pattern$GroupHead.match(Matcher, int, CharSequence):boolean (47 bytes)   relevance-based (relevance=1.666712, probability=0.058556, bonus=1.000000, nodes=20 <= 300.000000)
                              @ 4  jdk.internal.util.Preconditions.checkFromIndexSize(int, int, int, BiFunction):int (25 bytes)   relevance-based (relevance=1.000010, probability=1.000000, bonus=1.000000, nodes=15 <= 300.000000)
                                                  @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=0.862209, probability=0.005856, bonus=1.000000, nodes=9)
                                @ 22  jdk.internal.util.ArraysSupport.newLength(int, int, int):int (27 bytes)   not inlining relevance-based (relevance=0.032538, probability=0.031512, bonus=1.000000, nodes=16 > 9.761278)
                            @ 3  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                                                  @ 12  java.lang.StringLatin1.charAt(byte[], int):char (15 bytes)   relevance-based (relevance=0.862209, probability=0.005856, bonus=1.000000, nodes=11 <= 258.662722)
                                @ 25  java.util.Arrays.copyOf(byte[], int):byte[] (33 bytes)   not inlining relevance-based (relevance=0.032538, probability=0.031512, bonus=1.000000, nodes=29 > 9.761278)
                              @ 15  java.io.ByteArrayOutputStream.ensureCapacity(int):void (32 bytes)   relevance-based (relevance=1.000010, probability=1.000000, bonus=1.000000, nodes=25 <= 300.000000)
                                                @ 14  java.lang.String.charAt(int):char (25 bytes)   relevance-based (relevance=0.862209, probability=0.005856, bonus=1.000000, nodes=16 <= 258.662722)
                            @ 9  java.util.regex.Pattern.lambda$Range$17(int, int, int):boolean (7 bytes)   inline method (bytecode parsing)
                                                      @ 3  java.util.regex.Pattern.inRange(int, int, int):boolean (16 bytes)   relevance-based (relevance=0.229816, probability=0.000509, bonus=1.000000, nodes=11 <= 68.944715)
                            @ 9  java.util.regex.Pattern.lambda$Range$17(int, int, int):boolean (7 bytes)   inline method (bytecode parsing)
                                                          @ 3  java.util.regex.Pattern.inRange(int, int, int):boolean (16 bytes)   relevance-based (relevance=0.229816, probability=0.000255, bonus=1.000000, nodes=11 <= 68.944715)
                            @ 9  java.util.regex.Pattern.lambda$Range$17(int, int, int):boolean (7 bytes)   inline method (bytecode parsing)
                                                              @ 3  java.util.regex.Pattern.inRange(int, int, int):boolean (16 bytes)   relevance-based (relevance=0.229816, probability=0.000127, bonus=1.000000, nodes=11 <= 68.944715)
                            @ 9  java.util.regex.Pattern.lambda$Range$17(int, int, int):boolean (7 bytes)   inline method (bytecode parsing)
                                                                  @ 3  java.util.regex.Pattern.inRange(int, int, int):boolean (16 bytes)   relevance-based (relevance=0.229816, probability=0.000064, bonus=1.000000, nodes=11 <= 68.944715)
                            @ 9  java.util.regex.Pattern.lambda$Range$17(int, int, int):boolean (7 bytes)   inline method (bytecode parsing)
                                                                      @ 3  java.util.regex.Pattern.inRange(int, int, int):boolean (16 bytes)   relevance-based (relevance=0.229816, probability=0.000032, bonus=1.000000, nodes=11 <= 68.944715)
                                                                      @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   not inlining it exceeds the maximum recursive inlining depth
                                                                      @ 2  java.util.regex.Pattern$CharPredicate.is(int):boolean (0 bytes)   not inlining it is a polymorphic method call and at least one invoked method cannot be inlined
                                                                      @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.229816, probability=0.000032, bonus=1.000000, nodes=13 <= 68.944715)
                                                                    @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   relevance-based (relevance=0.229816, probability=0.000064, bonus=1.000000, nodes=27 <= 68.944715)
                                                                  @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.229816, probability=0.000064, bonus=1.000000, nodes=39 <= 68.944715)
                                                                @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   relevance-based (relevance=0.229816, probability=0.000127, bonus=1.000000, nodes=52 <= 68.944715)
                                                              @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.229816, probability=0.000127, bonus=1.000000, nodes=61 <= 68.944715)
                                                            @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   not inlining relevance-based (relevance=0.229816, probability=0.000255, bonus=1.000000, nodes=74 > 68.944715)
                                                          @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.229816, probability=0.000255, bonus=1.000000, nodes=13 <= 68.944715)
                                                        @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   relevance-based (relevance=0.229816, probability=0.000509, bonus=1.000000, nodes=27 <= 68.944715)
                                                      @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.229816, probability=0.000509, bonus=1.000000, nodes=39 <= 68.944715)
                                                    @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   relevance-based (relevance=0.229816, probability=0.001018, bonus=1.000000, nodes=52 <= 68.944715)
                                                  @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.229816, probability=0.001018, bonus=1.000000, nodes=61 <= 68.944715)
                                                  @ 5  java.util.regex.Pattern.lambda$Single$14(int, int):boolean (11 bytes)   trivial (relevance=0.862209, probability=0.003820, bonus=1.000000, nodes=9)
                                                @ 19  java.util.regex.Pattern$$Lambda/0x800000038.is(int):boolean (9 bytes)   relevance-based (relevance=0.862209, probability=0.005856, bonus=1.000000, nodes=79 <= 258.662722)
                                              @ 28  java.util.regex.Pattern$BmpCharPropertyGreedy.match(Matcher, int, CharSequence):boolean (89 bytes)   not inlining relevance-based (relevance=0.500051, probability=0.011712, bonus=1.000000, nodes=205 > 150.015352)
                                                    @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=0.011711, bonus=1.000000, nodes=9)
                            @ 3  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                                                    @ 12  java.lang.StringLatin1.charAt(byte[], int):char (15 bytes)   relevance-based (relevance=1.000000, probability=0.011711, bonus=1.000000, nodes=11 <= 300.000000)
                                                  @ 14  java.lang.String.charAt(int):char (25 bytes)   relevance-based (relevance=1.724242, probability=0.011711, bonus=1.000000, nodes=16 <= 300.000000)
                            @ 9  java.util.regex.Pattern.lambda$Range$17(int, int, int):boolean (7 bytes)   inline method (bytecode parsing)
                                                        @ 3  java.util.regex.Pattern.inRange(int, int, int):boolean (16 bytes)   relevance-based (relevance=0.459584, probability=0.001018, bonus=1.000000, nodes=11 <= 137.875320)
                            @ 9  java.util.regex.Pattern.lambda$Range$17(int, int, int):boolean (7 bytes)   inline method (bytecode parsing)
                                                            @ 3  java.util.regex.Pattern.inRange(int, int, int):boolean (16 bytes)   relevance-based (relevance=0.459584, probability=0.000509, bonus=1.000000, nodes=11 <= 137.875320)
                            @ 9  java.util.regex.Pattern.lambda$Range$17(int, int, int):boolean (7 bytes)   inline method (bytecode parsing)
                                                                @ 3  java.util.regex.Pattern.inRange(int, int, int):boolean (16 bytes)   relevance-based (relevance=0.459584, probability=0.000254, bonus=1.000000, nodes=11 <= 137.875320)
                            @ 9  java.util.regex.Pattern.lambda$Range$17(int, int, int):boolean (7 bytes)   inline method (bytecode parsing)
                                                                    @ 3  java.util.regex.Pattern.inRange(int, int, int):boolean (16 bytes)   relevance-based (relevance=0.459584, probability=0.000127, bonus=1.000000, nodes=11 <= 137.875320)
                            @ 9  java.util.regex.Pattern.lambda$Range$17(int, int, int):boolean (7 bytes)   inline method (bytecode parsing)
                                                                        @ 3  java.util.regex.Pattern.inRange(int, int, int):boolean (16 bytes)   relevance-based (relevance=0.459584, probability=0.000064, bonus=1.000000, nodes=11 <= 137.875320)
                                                                        @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   not inlining it exceeds the maximum recursive inlining depth
                                                                        @ 2  java.util.regex.Pattern$CharPredicate.is(int):boolean (0 bytes)   not inlining it is a polymorphic method call and at least one invoked method cannot be inlined
                                                                        @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.459584, probability=0.000064, bonus=1.000000, nodes=13 <= 137.875320)
                                                                      @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   relevance-based (relevance=0.459584, probability=0.000127, bonus=1.000000, nodes=27 <= 137.875320)
                                                                    @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.459584, probability=0.000127, bonus=1.000000, nodes=39 <= 137.875320)
                                                                  @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   relevance-based (relevance=0.459584, probability=0.000254, bonus=1.000000, nodes=52 <= 137.875320)
                                                                @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.459584, probability=0.000254, bonus=1.000000, nodes=61 <= 137.875320)
                                                              @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   relevance-based (relevance=0.459584, probability=0.000509, bonus=1.000000, nodes=74 <= 137.875320)
                                                            @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.459584, probability=0.000509, bonus=1.000000, nodes=83 <= 137.875320)
                                                          @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   relevance-based (relevance=0.459584, probability=0.001018, bonus=1.000000, nodes=96 <= 137.875320)
                                                        @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.459584, probability=0.001018, bonus=1.000000, nodes=105 <= 137.875320)
                                                      @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   relevance-based (relevance=0.459584, probability=0.002036, bonus=1.000000, nodes=118 <= 137.875320)
                                                    @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.459584, probability=0.002036, bonus=1.000000, nodes=127 <= 137.875320)
                                                    @ 5  java.util.regex.Pattern.lambda$Single$14(int, int):boolean (11 bytes)   trivial (relevance=1.000000, probability=0.007639, bonus=1.000000, nodes=9)
                                                  @ 19  java.util.regex.Pattern$$Lambda/0x800000038.is(int):boolean (9 bytes)   relevance-based (relevance=1.724242, probability=0.011711, bonus=1.000000, nodes=145 <= 300.000000)
                                                      @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=0.450073, probability=0.001423, bonus=1.000000, nodes=9)
                            @ 3  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                                                      @ 12  java.lang.StringLatin1.charAt(byte[], int):char (15 bytes)   relevance-based (relevance=0.450073, probability=0.001423, bonus=1.000000, nodes=11 <= 135.021815)
                                                    @ 21  java.lang.String.charAt(int):char (25 bytes)   relevance-based (relevance=0.450073, probability=0.001423, bonus=1.000000, nodes=16 <= 135.021815)
                                                      @ 5  java.util.regex.Pattern.lambda$Single$14(int, int):boolean (11 bytes)   trivial (relevance=0.258482, probability=0.000442, bonus=1.000000, nodes=9)
                                                        @ 8  java.util.regex.ASCII.isDigit(int):boolean (18 bytes)   relevance-based (relevance=0.450073, probability=0.000769, bonus=1.000000, nodes=13 <= 135.021815)
                                                      @ 1  java.util.regex.CharPredicates.lambda$ASCII_DIGIT$18(int):boolean (20 bytes)   relevance-based (relevance=0.450073, probability=0.000769, bonus=1.000000, nodes=16 <= 135.021815)
                                                    @ 26  java.util.regex.CharPredicates$$Lambda/0x800000034.is(int):boolean (5 bytes)   relevance-based (relevance=0.450073, probability=0.001423, bonus=1.000000, nodes=33 <= 135.021815)
                                                  @ 36  java.util.regex.Pattern$Branch.match(Matcher, int, CharSequence):boolean (66 bytes)   not inlining relevance-based (relevance=0.643950, probability=0.004919, bonus=1.000000, nodes=202 > 193.184865)
                                                    @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=0.019673, bonus=1.000000, nodes=9)
                            @ 3  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                                                    @ 12  java.lang.StringLatin1.charAt(byte[], int):char (15 bytes)   relevance-based (relevance=1.000000, probability=0.019673, bonus=1.000000, nodes=11 <= 300.000000)
                                                  @ 21  java.lang.String.charAt(int):char (25 bytes)   relevance-based (relevance=1.680036, probability=0.019673, bonus=1.000000, nodes=16 <= 300.000000)
                                                    @ 5  java.util.regex.Pattern.lambda$Single$14(int, int):boolean (11 bytes)   trivial (relevance=0.964863, probability=0.006109, bonus=1.000000, nodes=9)
                                                      @ 8  java.util.regex.ASCII.isDigit(int):boolean (18 bytes)   relevance-based (relevance=1.000000, probability=0.010638, bonus=1.000000, nodes=13 <= 300.000000)
                                                    @ 1  java.util.regex.CharPredicates.lambda$ASCII_DIGIT$18(int):boolean (20 bytes)   relevance-based (relevance=1.000000, probability=0.010638, bonus=1.000000, nodes=16 <= 300.000000)
                                                  @ 26  java.util.regex.CharPredicates$$Lambda/0x800000034.is(int):boolean (5 bytes)   relevance-based (relevance=1.680036, probability=0.019673, bonus=1.000000, nodes=33 <= 300.000000)
                                                @ 28  java.util.regex.Pattern$BmpCharPropertyGreedy.match(Matcher, int, CharSequence):boolean (89 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.023421, bonus=1.000000, nodes=317 > 300.000000)
                                              @ 50  java.util.regex.Pattern$GroupHead.match(Matcher, int, CharSequence):boolean (47 bytes)   relevance-based (relevance=1.666712, probability=0.023421, bonus=1.000000, nodes=20 <= 300.000000)
                                                    @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=0.862209, probability=0.002342, bonus=1.000000, nodes=9)
                            @ 3  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                                                    @ 12  java.lang.StringLatin1.charAt(byte[], int):char (15 bytes)   relevance-based (relevance=0.862209, probability=0.002342, bonus=1.000000, nodes=11 <= 258.662722)
                                                  @ 14  java.lang.String.charAt(int):char (25 bytes)   relevance-based (relevance=0.862209, probability=0.002342, bonus=1.000000, nodes=16 <= 258.662722)
                            @ 9  java.util.regex.Pattern.lambda$Range$17(int, int, int):boolean (7 bytes)   inline method (bytecode parsing)
                                                        @ 3  java.util.regex.Pattern.inRange(int, int, int):boolean (16 bytes)   relevance-based (relevance=0.229816, probability=0.000204, bonus=1.000000, nodes=11 <= 68.944715)
                            @ 9  java.util.regex.Pattern.lambda$Range$17(int, int, int):boolean (7 bytes)   inline method (bytecode parsing)
                                                            @ 3  java.util.regex.Pattern.inRange(int, int, int):boolean (16 bytes)   relevance-based (relevance=0.229816, probability=0.000102, bonus=1.000000, nodes=11 <= 68.944715)
                            @ 9  java.util.regex.Pattern.lambda$Range$17(int, int, int):boolean (7 bytes)   inline method (bytecode parsing)
                                                                @ 3  java.util.regex.Pattern.inRange(int, int, int):boolean (16 bytes)   relevance-based (relevance=0.229816, probability=0.000051, bonus=1.000000, nodes=11 <= 68.944715)
                            @ 9  java.util.regex.Pattern.lambda$Range$17(int, int, int):boolean (7 bytes)   inline method (bytecode parsing)
                                                                    @ 3  java.util.regex.Pattern.inRange(int, int, int):boolean (16 bytes)   relevance-based (relevance=0.229816, probability=0.000025, bonus=1.000000, nodes=11 <= 68.944715)
                            @ 9  java.util.regex.Pattern.lambda$Range$17(int, int, int):boolean (7 bytes)   inline method (bytecode parsing)
                                                                        @ 3  java.util.regex.Pattern.inRange(int, int, int):boolean (16 bytes)   relevance-based (relevance=0.229816, probability=0.000013, bonus=1.000000, nodes=11 <= 68.944715)
                                                                        @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   not inlining it exceeds the maximum recursive inlining depth
                                                                        @ 2  java.util.regex.Pattern$CharPredicate.is(int):boolean (0 bytes)   not inlining it is a polymorphic method call and at least one invoked method cannot be inlined
                                                                        @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.229816, probability=0.000013, bonus=1.000000, nodes=13 <= 68.944715)
                                                                      @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   relevance-based (relevance=0.229816, probability=0.000025, bonus=1.000000, nodes=27 <= 68.944715)
                                                                    @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.229816, probability=0.000025, bonus=1.000000, nodes=39 <= 68.944715)
                                                                  @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   relevance-based (relevance=0.229816, probability=0.000051, bonus=1.000000, nodes=52 <= 68.944715)
                                                                @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.229816, probability=0.000051, bonus=1.000000, nodes=61 <= 68.944715)
                                                              @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   not inlining relevance-based (relevance=0.229816, probability=0.000102, bonus=1.000000, nodes=74 > 68.944715)
                                                            @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.229816, probability=0.000102, bonus=1.000000, nodes=13 <= 68.944715)
                                                          @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   relevance-based (relevance=0.229816, probability=0.000204, bonus=1.000000, nodes=27 <= 68.944715)
                                                        @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.229816, probability=0.000204, bonus=1.000000, nodes=39 <= 68.944715)
                                                      @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   relevance-based (relevance=0.229816, probability=0.000407, bonus=1.000000, nodes=52 <= 68.944715)
                                                    @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.229816, probability=0.000407, bonus=1.000000, nodes=61 <= 68.944715)
                                                    @ 5  java.util.regex.Pattern.lambda$Single$14(int, int):boolean (11 bytes)   trivial (relevance=0.862209, probability=0.001528, bonus=1.000000, nodes=9)
                                                  @ 19  java.util.regex.Pattern$$Lambda/0x800000038.is(int):boolean (9 bytes)   relevance-based (relevance=0.862209, probability=0.002342, bonus=1.000000, nodes=79 <= 258.662722)
                                                @ 28  java.util.regex.Pattern$BmpCharPropertyGreedy.match(Matcher, int, CharSequence):boolean (89 bytes)   not inlining relevance-based (relevance=0.500051, probability=0.004684, bonus=1.000000, nodes=205 > 150.015352)
                                                      @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=0.004684, bonus=1.000000, nodes=9)
                            @ 3  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                                                      @ 12  java.lang.StringLatin1.charAt(byte[], int):char (15 bytes)   relevance-based (relevance=1.000000, probability=0.004684, bonus=1.000000, nodes=11 <= 300.000000)
                                                    @ 14  java.lang.String.charAt(int):char (25 bytes)   relevance-based (relevance=1.724242, probability=0.004684, bonus=1.000000, nodes=16 <= 300.000000)
                            @ 9  java.util.regex.Pattern.lambda$Range$17(int, int, int):boolean (7 bytes)   inline method (bytecode parsing)
                                                          @ 3  java.util.regex.Pattern.inRange(int, int, int):boolean (16 bytes)   relevance-based (relevance=0.459584, probability=0.000407, bonus=1.000000, nodes=11 <= 137.875320)
                            @ 9  java.util.regex.Pattern.lambda$Range$17(int, int, int):boolean (7 bytes)   inline method (bytecode parsing)
                                                              @ 3  java.util.regex.Pattern.inRange(int, int, int):boolean (16 bytes)   relevance-based (relevance=0.459584, probability=0.000204, bonus=1.000000, nodes=11 <= 137.875320)
                            @ 9  java.util.regex.Pattern.lambda$Range$17(int, int, int):boolean (7 bytes)   inline method (bytecode parsing)
                                                                  @ 3  java.util.regex.Pattern.inRange(int, int, int):boolean (16 bytes)   relevance-based (relevance=0.459584, probability=0.000102, bonus=1.000000, nodes=11 <= 137.875320)
                            @ 9  java.util.regex.Pattern.lambda$Range$17(int, int, int):boolean (7 bytes)   inline method (bytecode parsing)
                                                                      @ 3  java.util.regex.Pattern.inRange(int, int, int):boolean (16 bytes)   relevance-based (relevance=0.459584, probability=0.000051, bonus=1.000000, nodes=11 <= 137.875320)
                            @ 9  java.util.regex.Pattern.lambda$Range$17(int, int, int):boolean (7 bytes)   inline method (bytecode parsing)
                                                                          @ 3  java.util.regex.Pattern.inRange(int, int, int):boolean (16 bytes)   relevance-based (relevance=0.459584, probability=0.000025, bonus=1.000000, nodes=11 <= 137.875320)
                                                                          @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   not inlining it exceeds the maximum recursive inlining depth
                                                                          @ 2  java.util.regex.Pattern$CharPredicate.is(int):boolean (0 bytes)   not inlining it is a polymorphic method call and at least one invoked method cannot be inlined
                                                                          @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.459584, probability=0.000025, bonus=1.000000, nodes=13 <= 137.875320)
                                                                        @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   relevance-based (relevance=0.459584, probability=0.000051, bonus=1.000000, nodes=27 <= 137.875320)
                                                                      @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.459584, probability=0.000051, bonus=1.000000, nodes=39 <= 137.875320)
                                                                    @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   relevance-based (relevance=0.459584, probability=0.000102, bonus=1.000000, nodes=52 <= 137.875320)
                                                                  @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.459584, probability=0.000102, bonus=1.000000, nodes=61 <= 137.875320)
                                                                @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   relevance-based (relevance=0.459584, probability=0.000204, bonus=1.000000, nodes=74 <= 137.875320)
                                                              @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.459584, probability=0.000204, bonus=1.000000, nodes=83 <= 137.875320)
                                                            @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   relevance-based (relevance=0.459584, probability=0.000407, bonus=1.000000, nodes=96 <= 137.875320)
                                                          @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.459584, probability=0.000407, bonus=1.000000, nodes=105 <= 137.875320)
                                                        @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   relevance-based (relevance=0.459584, probability=0.000814, bonus=1.000000, nodes=118 <= 137.875320)
                                                      @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.459584, probability=0.000814, bonus=1.000000, nodes=127 <= 137.875320)
                                                      @ 5  java.util.regex.Pattern.lambda$Single$14(int, int):boolean (11 bytes)   trivial (relevance=1.000000, probability=0.003055, bonus=1.000000, nodes=9)
                                                    @ 19  java.util.regex.Pattern$$Lambda/0x800000038.is(int):boolean (9 bytes)   relevance-based (relevance=1.724242, probability=0.004684, bonus=1.000000, nodes=145 <= 300.000000)
                                                        @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=0.450073, probability=0.000569, bonus=1.000000, nodes=9)
                            @ 3  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                                                        @ 12  java.lang.StringLatin1.charAt(byte[], int):char (15 bytes)   relevance-based (relevance=0.450073, probability=0.000569, bonus=1.000000, nodes=11 <= 135.021815)
                                                      @ 21  java.lang.String.charAt(int):char (25 bytes)   relevance-based (relevance=0.450073, probability=0.000569, bonus=1.000000, nodes=16 <= 135.021815)
                                                        @ 5  java.util.regex.Pattern.lambda$Single$14(int, int):boolean (11 bytes)   trivial (relevance=0.258482, probability=0.000177, bonus=1.000000, nodes=9)
                                                          @ 8  java.util.regex.ASCII.isDigit(int):boolean (18 bytes)   relevance-based (relevance=0.450073, probability=0.000308, bonus=1.000000, nodes=13 <= 135.021815)
                                                        @ 1  java.util.regex.CharPredicates.lambda$ASCII_DIGIT$18(int):boolean (20 bytes)   relevance-based (relevance=0.450073, probability=0.000308, bonus=1.000000, nodes=16 <= 135.021815)
                                                      @ 26  java.util.regex.CharPredicates$$Lambda/0x800000034.is(int):boolean (5 bytes)   relevance-based (relevance=0.450073, probability=0.000569, bonus=1.000000, nodes=33 <= 135.021815)
                                                    @ 36  java.util.regex.Pattern$Branch.match(Matcher, int, CharSequence):boolean (66 bytes)   not inlining relevance-based (relevance=0.643950, probability=0.001967, bonus=1.000000, nodes=202 > 193.184865)
                                                      @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=0.007869, bonus=1.000000, nodes=9)
                            @ 3  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                                                      @ 12  java.lang.StringLatin1.charAt(byte[], int):char (15 bytes)   relevance-based (relevance=1.000000, probability=0.007869, bonus=1.000000, nodes=11 <= 300.000000)
                                                    @ 21  java.lang.String.charAt(int):char (25 bytes)   relevance-based (relevance=1.680036, probability=0.007869, bonus=1.000000, nodes=16 <= 300.000000)
                                                      @ 5  java.util.regex.Pattern.lambda$Single$14(int, int):boolean (11 bytes)   trivial (relevance=0.964863, probability=0.002444, bonus=1.000000, nodes=9)
                                                        @ 8  java.util.regex.ASCII.isDigit(int):boolean (18 bytes)   relevance-based (relevance=1.000000, probability=0.004255, bonus=1.000000, nodes=13 <= 300.000000)
                                                      @ 1  java.util.regex.CharPredicates.lambda$ASCII_DIGIT$18(int):boolean (20 bytes)   relevance-based (relevance=1.000000, probability=0.004255, bonus=1.000000, nodes=16 <= 300.000000)
                                                    @ 26  java.util.regex.CharPredicates$$Lambda/0x800000034.is(int):boolean (5 bytes)   relevance-based (relevance=1.680036, probability=0.007869, bonus=1.000000, nodes=33 <= 300.000000)
                                                  @ 28  java.util.regex.Pattern$BmpCharPropertyGreedy.match(Matcher, int, CharSequence):boolean (89 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.009368, bonus=1.000000, nodes=317 > 300.000000)
                                                @ 50  java.util.regex.Pattern$GroupHead.match(Matcher, int, CharSequence):boolean (47 bytes)   relevance-based (relevance=1.666712, probability=0.009368, bonus=1.000000, nodes=20 <= 300.000000)
                                                      @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=0.862209, probability=0.000937, bonus=1.000000, nodes=9)
                            @ 3  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                                                      @ 12  java.lang.StringLatin1.charAt(byte[], int):char (15 bytes)   relevance-based (relevance=0.862209, probability=0.000937, bonus=1.000000, nodes=11 <= 258.662722)
                                                    @ 14  java.lang.String.charAt(int):char (25 bytes)   relevance-based (relevance=0.862209, probability=0.000937, bonus=1.000000, nodes=16 <= 258.662722)
                            @ 9  java.util.regex.Pattern.lambda$Range$17(int, int, int):boolean (7 bytes)   inline method (bytecode parsing)
                                                          @ 3  java.util.regex.Pattern.inRange(int, int, int):boolean (16 bytes)   relevance-based (relevance=0.229816, probability=0.000081, bonus=1.000000, nodes=11 <= 68.944715)
                            @ 9  java.util.regex.Pattern.lambda$Range$17(int, int, int):boolean (7 bytes)   inline method (bytecode parsing)
                                                              @ 3  java.util.regex.Pattern.inRange(int, int, int):boolean (16 bytes)   relevance-based (relevance=0.229816, probability=0.000041, bonus=1.000000, nodes=11 <= 68.944715)
                            @ 9  java.util.regex.Pattern.lambda$Range$17(int, int, int):boolean (7 bytes)   inline method (bytecode parsing)
                                                                  @ 3  java.util.regex.Pattern.inRange(int, int, int):boolean (16 bytes)   relevance-based (relevance=0.229816, probability=0.000020, bonus=1.000000, nodes=11 <= 68.944715)
                            @ 9  java.util.regex.Pattern.lambda$Range$17(int, int, int):boolean (7 bytes)   inline method (bytecode parsing)
                                                                      @ 3  java.util.regex.Pattern.inRange(int, int, int):boolean (16 bytes)   relevance-based (relevance=0.229816, probability=0.000010, bonus=1.000000, nodes=11 <= 68.944715)
                            @ 9  java.util.regex.Pattern.lambda$Range$17(int, int, int):boolean (7 bytes)   inline method (bytecode parsing)
                                                                          @ 3  java.util.regex.Pattern.inRange(int, int, int):boolean (16 bytes)   relevance-based (relevance=0.229816, probability=0.000005, bonus=1.000000, nodes=11 <= 68.944715)
                                                                          @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   not inlining it exceeds the maximum recursive inlining depth
                                                                          @ 2  java.util.regex.Pattern$CharPredicate.is(int):boolean (0 bytes)   not inlining it is a polymorphic method call and at least one invoked method cannot be inlined
                                                                          @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.229816, probability=0.000005, bonus=1.000000, nodes=13 <= 68.944715)
                                                                        @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   relevance-based (relevance=0.229816, probability=0.000010, bonus=1.000000, nodes=27 <= 68.944715)
                                                                      @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.229816, probability=0.000010, bonus=1.000000, nodes=39 <= 68.944715)
                                                                    @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   relevance-based (relevance=0.229816, probability=0.000020, bonus=1.000000, nodes=52 <= 68.944715)
                                                                  @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.229816, probability=0.000020, bonus=1.000000, nodes=61 <= 68.944715)
                                                                @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   not inlining relevance-based (relevance=0.229816, probability=0.000041, bonus=1.000000, nodes=74 > 68.944715)
                                                              @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.229816, probability=0.000041, bonus=1.000000, nodes=13 <= 68.944715)
                                                            @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   relevance-based (relevance=0.229816, probability=0.000081, bonus=1.000000, nodes=27 <= 68.944715)
                                                          @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.229816, probability=0.000081, bonus=1.000000, nodes=39 <= 68.944715)
                                                        @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   relevance-based (relevance=0.229816, probability=0.000163, bonus=1.000000, nodes=52 <= 68.944715)
                                                      @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.229816, probability=0.000163, bonus=1.000000, nodes=61 <= 68.944715)
                                                      @ 5  java.util.regex.Pattern.lambda$Single$14(int, int):boolean (11 bytes)   trivial (relevance=0.862209, probability=0.000611, bonus=1.000000, nodes=9)
                                                    @ 19  java.util.regex.Pattern$$Lambda/0x800000038.is(int):boolean (9 bytes)   relevance-based (relevance=0.862209, probability=0.000937, bonus=1.000000, nodes=79 <= 258.662722)
                                                  @ 28  java.util.regex.Pattern$BmpCharPropertyGreedy.match(Matcher, int, CharSequence):boolean (89 bytes)   not inlining relevance-based (relevance=0.500051, probability=0.001874, bonus=1.000000, nodes=205 > 150.015352)
                                                        @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=0.001873, bonus=1.000000, nodes=9)
                            @ 3  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                                                        @ 12  java.lang.StringLatin1.charAt(byte[], int):char (15 bytes)   relevance-based (relevance=1.000000, probability=0.001873, bonus=1.000000, nodes=11 <= 300.000000)
                                                      @ 14  java.lang.String.charAt(int):char (25 bytes)   relevance-based (relevance=1.724242, probability=0.001873, bonus=1.000000, nodes=16 <= 300.000000)
                            @ 9  java.util.regex.Pattern.lambda$Range$17(int, int, int):boolean (7 bytes)   inline method (bytecode parsing)
                                                            @ 3  java.util.regex.Pattern.inRange(int, int, int):boolean (16 bytes)   relevance-based (relevance=0.459584, probability=0.000163, bonus=1.000000, nodes=11 <= 137.875320)
                            @ 9  java.util.regex.Pattern.lambda$Range$17(int, int, int):boolean (7 bytes)   inline method (bytecode parsing)
                                                                @ 3  java.util.regex.Pattern.inRange(int, int, int):boolean (16 bytes)   relevance-based (relevance=0.459584, probability=0.000081, bonus=1.000000, nodes=11 <= 137.875320)
                            @ 9  java.util.regex.Pattern.lambda$Range$17(int, int, int):boolean (7 bytes)   inline method (bytecode parsing)
                                                                    @ 3  java.util.regex.Pattern.inRange(int, int, int):boolean (16 bytes)   relevance-based (relevance=0.459584, probability=0.000041, bonus=1.000000, nodes=11 <= 137.875320)
                            @ 9  java.util.regex.Pattern.lambda$Range$17(int, int, int):boolean (7 bytes)   inline method (bytecode parsing)
                                                                        @ 3  java.util.regex.Pattern.inRange(int, int, int):boolean (16 bytes)   relevance-based (relevance=0.459584, probability=0.000020, bonus=1.000000, nodes=11 <= 137.875320)
                            @ 1  java.util.EnumSet.getUniverse(Class):Enum[] (10 bytes)   inline method (bytecode parsing)
                              @ 0  jdk.internal.access.SharedSecrets.getJavaLangAccess():JavaLangAccess (4 bytes)   inline method (bytecode parsing)
                            @ 9  java.util.regex.Pattern.lambda$Range$17(int, int, int):boolean (7 bytes)   inline method (bytecode parsing)
                                                                            @ 3  java.util.regex.Pattern.inRange(int, int, int):boolean (16 bytes)   relevance-based (relevance=0.459584, probability=0.000010, bonus=1.000000, nodes=11 <= 137.875320)
                                                                            @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   not inlining it exceeds the maximum recursive inlining depth
                                                                            @ 2  java.util.regex.Pattern$CharPredicate.is(int):boolean (0 bytes)   not inlining it is a polymorphic method call and at least one invoked method cannot be inlined
                                                                            @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.459584, probability=0.000010, bonus=1.000000, nodes=13 <= 137.875320)
                                                                          @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   relevance-based (relevance=0.459584, probability=0.000020, bonus=1.000000, nodes=27 <= 137.875320)
                                                                        @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.459584, probability=0.000020, bonus=1.000000, nodes=39 <= 137.875320)
                                                                      @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   relevance-based (relevance=0.459584, probability=0.000041, bonus=1.000000, nodes=52 <= 137.875320)
                                                                    @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.459584, probability=0.000041, bonus=1.000000, nodes=61 <= 137.875320)
                                                                  @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   relevance-based (relevance=0.459584, probability=0.000081, bonus=1.000000, nodes=74 <= 137.875320)
                                                                @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.459584, probability=0.000081, bonus=1.000000, nodes=83 <= 137.875320)
                                                              @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   relevance-based (relevance=0.459584, probability=0.000163, bonus=1.000000, nodes=96 <= 137.875320)
                                                            @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.459584, probability=0.000163, bonus=1.000000, nodes=105 <= 137.875320)
                                                          @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   relevance-based (relevance=0.459584, probability=0.000326, bonus=1.000000, nodes=118 <= 137.875320)
                            @ 36  java.lang.Class$3.<init>(Class, Method):void (10 bytes)   inline method (bytecode parsing)
                                                        @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.459584, probability=0.000326, bonus=1.000000, nodes=127 <= 137.875320)
                            @ 39  java.security.AccessController.doPrivileged(PrivilegedAction):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.security.AccessController.executePrivileged(PrivilegedAction, AccessControlContext, Class):Object (65 bytes)   inline method (bytecode parsing)
                                @ 29  java.lang.Class$3.run():Object (5 bytes)   inline method (bytecode parsing)
                                  @ 1  java.lang.Class$3.run():Void (10 bytes)   inline method (bytecode parsing)
                                                        @ 5  java.util.regex.Pattern.lambda$Single$14(int, int):boolean (11 bytes)   trivial (relevance=1.000000, probability=0.001222, bonus=1.000000, nodes=9)
                                                      @ 19  java.util.regex.Pattern$$Lambda/0x800000038.is(int):boolean (9 bytes)   relevance-based (relevance=1.724242, probability=0.001873, bonus=1.000000, nodes=145 <= 300.000000)
                            @ 49  java.lang.reflect.Method.invoke(Object, Object[]):Object (108 bytes)   inline method (bytecode parsing)
                                                    @ 36  java.util.regex.Pattern$Branch.match(Matcher, int, CharSequence):boolean (66 bytes)   not inlining it exceeds the maximum recursive inlining depth
                                                    @ 36  java.util.regex.Pattern$Node.match(Matcher, int, CharSequence):boolean (27 bytes)   not inlining it is a polymorphic method call and at least one invoked method cannot be inlined
                                                        @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=0.003147, bonus=1.000000, nodes=9)
                            @ 3  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.Class.getEnumConstantsShared():Object[] (71 bytes)   not inlining too large previous low-level graph (low-level-nodes: 482, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=135)
                                                        @ 12  java.lang.StringLatin1.charAt(byte[], int):char (15 bytes)   relevance-based (relevance=1.000000, probability=0.003147, bonus=1.000000, nodes=11 <= 300.000000)
                              @ 4  java.lang.System$2.getEnumConstantsShared(Class):Enum[] (8 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                      @ 21  java.lang.String.charAt(int):char (25 bytes)   relevance-based (relevance=1.680036, probability=0.003147, bonus=1.000000, nodes=16 <= 300.000000)
                            @ 1  java.util.AbstractSet.<init>():void (5 bytes)   inline method (bytecode parsing)
                              @ 1  java.util.AbstractCollection.<init>():void (5 bytes)   inline method (bytecode parsing)
                                @ 3  java.util.EnumSet.<init>(Class, Enum[]):void (15 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                                                        @ 5  java.util.regex.Pattern.lambda$Single$14(int, int):boolean (11 bytes)   trivial (relevance=0.964863, probability=0.000977, bonus=1.000000, nodes=9)
                              @ 49  java.util.RegularEnumSet.<init>(Class, Enum[]):void (12 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=15 <= 300.000000)
                                                          @ 8  java.util.regex.ASCII.isDigit(int):boolean (18 bytes)   relevance-based (relevance=1.000000, probability=0.001702, bonus=1.000000, nodes=13 <= 300.000000)
                                                        @ 1  java.util.regex.CharPredicates.lambda$ASCII_DIGIT$18(int):boolean (20 bytes)   relevance-based (relevance=1.000000, probability=0.001702, bonus=1.000000, nodes=16 <= 300.000000)
                                                      @ 26  java.util.regex.CharPredicates$$Lambda/0x800000034.is(int):boolean (5 bytes)   relevance-based (relevance=1.680036, probability=0.003147, bonus=1.000000, nodes=33 <= 300.000000)
                                                    @ 28  java.util.regex.Pattern$BmpCharPropertyGreedy.match(Matcher, int, CharSequence):boolean (89 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.003747, bonus=1.000000, nodes=317 > 300.000000)
                                                  @ 50  java.util.regex.Pattern$GroupHead.match(Matcher, int, CharSequence):boolean (47 bytes)   relevance-based (relevance=1.666712, probability=0.003747, bonus=1.000000, nodes=20 <= 300.000000)
                                                @ 32  java.util.regex.Pattern$Branch.match(Matcher, int, CharSequence):boolean (66 bytes)   not inlining it exceeds the maximum recursive inlining depth
                                                @ 32  java.util.regex.Pattern$Node.match(Matcher, int, CharSequence):boolean (27 bytes)   not inlining it is a polymorphic method call and at least one invoked method cannot be inlined
                                                @ 32  java.util.regex.Pattern$Branch.match(Matcher, int, CharSequence):boolean (66 bytes)   relevance-based (relevance=1.000000, probability=0.005621, bonus=1.000000, nodes=86 <= 300.000000)
                                              @ 32  java.util.regex.Pattern$Branch.match(Matcher, int, CharSequence):boolean (66 bytes)   relevance-based (relevance=1.000000, probability=0.014052, bonus=1.000000, nodes=171 <= 300.000000)
                                            @ 32  java.util.regex.Pattern$Branch.match(Matcher, int, CharSequence):boolean (66 bytes)   relevance-based (relevance=1.000000, probability=0.035133, bonus=1.000000, nodes=255 <= 300.000000)
                                          @ 32  java.util.regex.Pattern$Branch.match(Matcher, int, CharSequence):boolean (66 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.087837, bonus=1.000000, nodes=339 > 300.000000)
                                        @ 32  java.util.regex.Pattern$Branch.match(Matcher, int, CharSequence):boolean (66 bytes)   relevance-based (relevance=1.000000, probability=0.219607, bonus=1.000000, nodes=86 <= 300.000000)
                                      @ 7  java.util.regex.Pattern$Branch.match(Matcher, int, CharSequence):boolean (66 bytes)   relevance-based (relevance=1.000000, probability=0.366021, bonus=1.000000, nodes=151 <= 300.000000)
                                    @ 70  java.util.regex.Pattern$BranchConn.match(Matcher, int, CharSequence):boolean (11 bytes)   relevance-based (relevance=1.000000, probability=0.549032, bonus=1.000000, nodes=191 <= 300.000000)
                                  @ 70  java.util.regex.Pattern$GroupTail.match(Matcher, int, CharSequence):boolean (111 bytes)   not inlining relevance-based (relevance=1.714813, probability=1.134811, bonus=1.000000, nodes=432 > 300.000000)
                                @ 44  java.util.regex.Pattern$BmpCharPropertyGreedy.match(Matcher, int, CharSequence):boolean (89 bytes)   relevance-based (relevance=1.673601, probability=2.483448, bonus=1.000000, nodes=232 <= 300.000000)
                              @ 121  java.util.regex.Pattern$Start.match(Matcher, int, CharSequence):boolean (90 bytes)   relevance-based (relevance=1.387314, probability=1.000000, bonus=1.000000, nodes=272 <= 300.000000)
                              @ 57  jdk.internal.math.MathUtils.flog10pow2(int):int (11 bytes)   relevance-based (relevance=1.000000, probability=0.896569, bonus=1.000000, nodes=10 <= 300.000000)
                              @ 72  jdk.internal.math.MathUtils.flog10threeQuartersPow2(int):int (15 bytes)   relevance-based (relevance=0.115364, probability=0.103431, bonus=1.000000, nodes=12 <= 34.609067)
                              @ 81  jdk.internal.math.MathUtils.flog2pow10(int):int (11 bytes)   relevance-based (relevance=1.115364, probability=1.000000, bonus=1.000000, nodes=10 <= 300.000000)
                              @ 91  jdk.internal.math.MathUtils.g1(int):long (12 bytes)   relevance-based (relevance=1.115364, probability=1.000000, bonus=1.000000, nodes=10 <= 300.000000)
                              @ 98  jdk.internal.math.MathUtils.g0(int):long (14 bytes)   relevance-based (relevance=1.115364, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                              @ 112  jdk.internal.math.DoubleToDecimal.rop(long, long, long):long (58 bytes)   relevance-based (relevance=1.115364, probability=1.000000, bonus=1.000000, nodes=20 <= 300.000000)
                              @ 126  jdk.internal.math.DoubleToDecimal.rop(long, long, long):long (58 bytes)   relevance-based (relevance=1.115364, probability=1.000000, bonus=1.000000, nodes=20 <= 300.000000)
                              @ 140  jdk.internal.math.DoubleToDecimal.rop(long, long, long):long (58 bytes)   relevance-based (relevance=1.115364, probability=1.000000, bonus=1.000000, nodes=20 <= 300.000000)
                            @ 15  jdk.internal.math.MathUtils.pow10(int):long (6 bytes)   inline method (bytecode parsing)
                            @ 47  jdk.internal.math.MathUtils.pow10(int):long (6 bytes)   inline method (bytecode parsing)
                                @ 7  jdk.internal.math.MathUtils.flog10pow2(int):int (11 bytes)   relevance-based (relevance=0.482276, probability=0.386074, bonus=1.000000, nodes=10 <= 144.682734)
                                @ 36  jdk.internal.math.FormattedFPDecimal.set(long, int, int):void (17 bytes)   relevance-based (relevance=0.391952, probability=0.313767, bonus=1.000000, nodes=13 <= 117.585595)
                            @ 8  jdk.internal.math.DoubleToDecimal.append(int):void (19 bytes)   inline method (bytecode parsing)
                                @ 157  jdk.internal.math.DoubleToDecimal.toChars3(int, int, int, int):int (31 bytes)   not inlining relevance-based (relevance=0.072784, probability=0.058266, bonus=1.000000, nodes=33 > 21.835343)
                            @ 8  jdk.internal.math.DoubleToDecimal.append(int):void (19 bytes)   inline method (bytecode parsing)
                                @ 145  jdk.internal.math.DoubleToDecimal.toChars2(int, int, int, int):int (44 bytes)   not inlining relevance-based (relevance=0.003478, probability=0.002784, bonus=1.000000, nodes=45 > 1.043478)
                            @ 54  jdk.internal.math.DoubleToDecimal.append(int):void (19 bytes)   inline method (bytecode parsing)
                                @ 123  jdk.internal.math.DoubleToDecimal.toChars1(int, int, int, int):int (100 bytes)   not inlining relevance-based (relevance=0.014061, probability=0.011256, bonus=1.000000, nodes=55 > 4.218317)
                              @ 248  jdk.internal.math.DoubleToDecimal.toChars(long, int, FormattedFPDecimal):int (161 bytes)   relevance-based (relevance=0.430612, probability=0.386074, bonus=1.000000, nodes=92 <= 129.183721)
                            @ 15  jdk.internal.math.MathUtils.pow10(int):long (6 bytes)   inline method (bytecode parsing)
                            @ 47  jdk.internal.math.MathUtils.pow10(int):long (6 bytes)   inline method (bytecode parsing)
                                @ 7  jdk.internal.math.MathUtils.flog10pow2(int):int (11 bytes)   relevance-based (relevance=0.359320, probability=0.287644, bonus=1.000000, nodes=10 <= 107.795951)
                                @ 36  jdk.internal.math.FormattedFPDecimal.set(long, int, int):void (17 bytes)   relevance-based (relevance=0.292024, probability=0.233772, bonus=1.000000, nodes=13 <= 87.607213)
                            @ 8  jdk.internal.math.DoubleToDecimal.append(int):void (19 bytes)   inline method (bytecode parsing)
                                @ 157  jdk.internal.math.DoubleToDecimal.toChars3(int, int, int, int):int (31 bytes)   not inlining relevance-based (relevance=0.054228, probability=0.043411, bonus=1.000000, nodes=33 > 16.268434)
                            @ 8  jdk.internal.math.DoubleToDecimal.append(int):void (19 bytes)   inline method (bytecode parsing)
                                @ 145  jdk.internal.math.DoubleToDecimal.toChars2(int, int, int, int):int (44 bytes)   not inlining relevance-based (relevance=0.002591, probability=0.002075, bonus=1.000000, nodes=45 > 0.777444)
                            @ 54  jdk.internal.math.DoubleToDecimal.append(int):void (19 bytes)   inline method (bytecode parsing)
                                @ 123  jdk.internal.math.DoubleToDecimal.toChars1(int, int, int, int):int (100 bytes)   not inlining relevance-based (relevance=0.010476, probability=0.008386, bonus=1.000000, nodes=55 > 3.142860)
                              @ 327  jdk.internal.math.DoubleToDecimal.toChars(long, int, FormattedFPDecimal):int (161 bytes)   relevance-based (relevance=0.320828, probability=0.287644, bonus=1.000000, nodes=92 <= 96.248403)
                            @ 15  jdk.internal.math.MathUtils.pow10(int):long (6 bytes)   inline method (bytecode parsing)
                            @ 47  jdk.internal.math.MathUtils.pow10(int):long (6 bytes)   inline method (bytecode parsing)
                                @ 7  jdk.internal.math.MathUtils.flog10pow2(int):int (11 bytes)   relevance-based (relevance=0.407585, probability=0.326282, bonus=1.000000, nodes=10 <= 122.275612)
                                @ 36  jdk.internal.math.FormattedFPDecimal.set(long, int, int):void (17 bytes)   relevance-based (relevance=0.331250, probability=0.265174, bonus=1.000000, nodes=13 <= 99.375027)
                            @ 8  jdk.internal.math.DoubleToDecimal.append(int):void (19 bytes)   inline method (bytecode parsing)
                                @ 157  jdk.internal.math.DoubleToDecimal.toChars3(int, int, int, int):int (31 bytes)   not inlining relevance-based (relevance=0.061512, probability=0.049242, bonus=1.000000, nodes=33 > 18.453687)
                            @ 8  jdk.internal.math.DoubleToDecimal.append(int):void (19 bytes)   inline method (bytecode parsing)
                                @ 145  jdk.internal.math.DoubleToDecimal.toChars2(int, int, int, int):int (44 bytes)   not inlining relevance-based (relevance=0.002940, probability=0.002353, bonus=1.000000, nodes=45 > 0.881874)
                            @ 54  jdk.internal.math.DoubleToDecimal.append(int):void (19 bytes)   inline method (bytecode parsing)
                                @ 123  jdk.internal.math.DoubleToDecimal.toChars1(int, int, int, int):int (100 bytes)   not inlining relevance-based (relevance=0.011883, probability=0.009513, bonus=1.000000, nodes=55 > 3.565023)
                              @ 381  jdk.internal.math.DoubleToDecimal.toChars(long, int, FormattedFPDecimal):int (161 bytes)   relevance-based (relevance=0.363923, probability=0.326282, bonus=1.000000, nodes=92 <= 109.176943)
                                @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                              @ 1  java.lang.String.length():int (11 bytes)   trivial (relevance=1.180560, probability=1.000000, bonus=1.000000, nodes=8)
                              @ 43  jdk.internal.org.objectweb.asm.ByteVector.enlarge(int):void (73 bytes)   relevance-based (relevance=0.180560, probability=0.152944, bonus=1.000000, nodes=28 <= 54.167894)
                                @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=26.596141, bonus=1.000000, nodes=9)
                            @ 3  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                                @ 12  java.lang.StringLatin1.charAt(byte[], int):char (15 bytes)   relevance-based (relevance=1.000000, probability=26.596141, bonus=1.000000, nodes=11 <= 300.000000)
                              @ 85  java.lang.String.charAt(int):char (25 bytes)   relevance-based (relevance=1.000000, probability=26.596141, bonus=1.000000, nodes=16 <= 300.000000)
                              @ 12  java.util.ArrayDeque.circularClear(Object[], int, int):void (43 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=38 <= 300.000000)
                            @ 47  java.lang.Enum.ordinal():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 95  java.util.LinkedList$Node.<init>(LinkedList$Node, Object, LinkedList$Node):void (20 bytes)   inline method (bytecode parsing)
                            @ 15  org.graalvm.collections.EconomicMapImpl.getKey(int):Object (9 bytes)   inline method (bytecode parsing)
                                @ 2  java.util.LinkedList.isPositionIndex(int):boolean (18 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=12 <= 300.000000)
                              @ 2  java.util.LinkedList.checkPositionIndex(int):void (22 bytes)   relevance-based (relevance=1.098394, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                            @ 8  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                            @ 49  jdk.graal.compiler.graph.Node.valueEquals(Node):boolean (10 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.graph.Node.getNodeClass():NodeClass (5 bytes)   inline accessor method (bytecode parsing)
                                @ 46  jdk.graal.compiler.graph.Graph$1.equals(Object, Object):boolean (53 bytes)   not inlining relevance-based (relevance=0.007448, probability=0.176345, bonus=1.000000, nodes=25 > 2.234271)
                              @ 36  java.lang.Object.equals(Object):boolean (11 bytes)   not inlining no methods remaining after filtering less frequent methods (6 methods previously)
                              @ 24  org.graalvm.collections.EconomicMapImpl.compareKeys(Object, Object):boolean (52 bytes)   relevance-based (relevance=1.036863, probability=28.127273, bonus=1.000000, nodes=40 <= 300.000000)
                                  @ 14  java.lang.Class.getComponentType():Class (14 bytes)   trivial (relevance=0.028525, probability=0.027734, bonus=1.000000, nodes=7)
                              @ 34  org.graalvm.collections.EconomicMapImpl.getRawValue(int):Object (11 bytes)   relevance-based (relevance=1.163568, probability=27.551169, bonus=1.000000, nodes=10 <= 300.000000)
                                  @ 32  java.lang.Math.min(int, int):int (11 bytes)   trivial (relevance=1.028525, probability=1.000000, bonus=1.000000, nodes=7)
                              @ 49  org.graalvm.collections.EconomicMapImpl.getRawValue(int):Object (11 bytes)   relevance-based (relevance=1.145666, probability=27.127273, bonus=1.000000, nodes=10 <= 300.000000)
                                @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=40 <= 300.000000)
                              @ 6  java.util.ArrayList.toArray():Object[] (12 bytes)   relevance-based (relevance=1.098394, probability=1.000000, bonus=1.000000, nodes=42 <= 300.000000)
                              @ 45  java.util.LinkedList.node(int):LinkedList$Node (65 bytes)   relevance-based (relevance=0.092135, probability=0.089580, bonus=1.000000, nodes=21 <= 27.640446)
                            @ 1  java.util.Objects.requireNonNull(Object):Object (14 bytes)   inline method (bytecode parsing)
                            @ 1  java.util.AbstractList.listIterator():ListIterator (6 bytes)   inline method (bytecode parsing)
                              @ 2  java.util.LinkedList.listIterator(int):ListIterator (15 bytes)   inline method (bytecode parsing)
                                  @ 2  java.util.LinkedList.isPositionIndex(int):boolean (18 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=9)
                                @ 2  java.util.LinkedList.checkPositionIndex(int):void (22 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=8)
                                  @ 35  java.util.LinkedList.node(int):LinkedList$Node (65 bytes)   relevance-based (relevance=0.663951, probability=0.399021, bonus=1.000000, nodes=19 <= 199.185215)
                                @ 11  java.util.LinkedList$ListItr.<init>(LinkedList, int):void (47 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=42 <= 300.000000)
                              @ 8  java.util.AbstractSequentialList.iterator():Iterator (5 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=48 <= 300.000000)
                              @ 13  java.util.LinkedList$ListItr.hasNext():boolean (20 bytes)   relevance-based (relevance=1.252102, probability=1.252102, bonus=1.000000, nodes=11 <= 300.000000)
                                @ 1  java.util.LinkedList$ListItr.checkForComodification():void (23 bytes)   trivial (relevance=0.252102, probability=0.252102, bonus=1.000000, nodes=9)
                                @ 5  java.util.LinkedList$ListItr.hasNext():boolean (20 bytes)   relevance-based (relevance=0.252102, probability=0.252102, bonus=1.000000, nodes=11 <= 75.630713)
                              @ 23  java.util.LinkedList$ListItr.next():Object (56 bytes)   relevance-based (relevance=0.252102, probability=0.252102, bonus=1.000000, nodes=27 <= 75.630713)
                                    @ 54  java.lang.Object.equals(Object):boolean (11 bytes)   trivial (relevance=0.254006, probability=2.149601, bonus=1.000000, nodes=9)
                                  @ 7  java.util.ArrayList.indexOfRange(Object, int, int):int (71 bytes)   relevance-based (relevance=0.252102, probability=0.252102, bonus=1.000000, nodes=69 <= 75.630713)
                                @ 2  java.util.ArrayList.indexOf(Object):int (11 bytes)   relevance-based (relevance=0.252102, probability=0.252102, bonus=1.000000, nodes=70 <= 75.630713)
                              @ 28  java.util.ArrayList.contains(Object):boolean (14 bytes)   relevance-based (relevance=0.252102, probability=0.252102, bonus=1.000000, nodes=73 <= 75.630713)
                            @ 15  org.graalvm.collections.EconomicMapImpl.getKey(int):Object (9 bytes)   inline method (bytecode parsing)
                              @ 17  som.Vector.lambda$remove$0(Object, boolean[], Object[], int[], Object):void (28 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=18 <= 300.000000)
                                @ 6  deltablue.BinaryConstraint.isSatisfied():boolean (13 bytes)   trivial (relevance=1.000254, probability=0.500000, bonus=1.000000, nodes=9)
                                @ 14  deltablue.Planner$$Lambda/0x00007f45e0083250.apply(Object):void (12 bytes)   not inlining too large previous low-level graph (low-level-nodes: 659, relevance=1.000000, probability=0.499873, bonus=1.000000, nodes=9)
                              @ 12  deltablue.Planner.lambda$constraintsConsuming$3(AbstractConstraint, ForEachInterface, AbstractConstraint):void (20 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=23 <= 300.000000)
                              @ 17  som.Vector.lambda$remove$0(Object, boolean[], Object[], int[], Object):void (28 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=26 <= 300.000000)
                            @ 1  java.util.Objects.requireNonNull(Object):Object (14 bytes)   inline method (bytecode parsing)
                            @ 43  java.util.ArrayList.elementAt(Object[], int):Object (4 bytes)   inline method (bytecode parsing)
                            @ 5  jdk.graal.compiler.lir.constopt.UseEntry.getBlock():BasicBlock (5 bytes)   inline accessor method (bytecode parsing)
                                @ 8  jdk.graal.compiler.lir.constopt.ConstantLoadOptimization$Optimization.lambda$createConstantTree$5(ConstantTree, UseEntry):void (12 bytes)   not inlining relevance-based (relevance=0.026892, probability=0.114563, bonus=1.000000, nodes=13 > 8.067512)
                            @ 2  jdk.graal.compiler.lir.constopt.UseEntry.getBlock():BasicBlock (5 bytes)   inline accessor method (bytecode parsing)
                                @ 8  jdk.graal.compiler.lir.constopt.ConstantTree.lambda$new$0(UseEntry):void (16 bytes)   not inlining relevance-based (relevance=0.026892, probability=0.114563, bonus=1.000000, nodes=15 > 8.067512)
                            @ 1  jdk.graal.compiler.lir.constopt.UseEntry.getBlock():BasicBlock (5 bytes)   inline accessor method (bytecode parsing)
                            @ 10  jdk.graal.compiler.core.common.cfg.BlockMap.get(BasicBlock):Object (10 bytes)   inline method (bytecode parsing)
                              @ 5  jdk.graal.compiler.core.common.cfg.BasicBlock.getId():int (5 bytes)   inline accessor method (bytecode parsing)
                                @ 8  jdk.graal.compiler.lir.constopt.ConstantLoadOptimization$Optimization.addUsageToBlockMap(UseEntry):void (47 bytes)   not inlining relevance-based (relevance=0.026892, probability=0.114563, bonus=1.000000, nodes=42 > 8.067512)
                            @ 2  jdk.graal.compiler.lir.LIRInstruction.visitEachInput(InstructionValueConsumer):void (10 bytes)   inline method (bytecode parsing)
                            @ 7  jdk.graal.compiler.lir.LIRInstruction.visitEachAlive(InstructionValueConsumer):void (10 bytes)   inline method (bytecode parsing)
                            @ 12  jdk.graal.compiler.lir.LIRInstruction.visitEachState(InstructionValueConsumer):void (10 bytes)   inline method (bytecode parsing)
                            @ 17  jdk.graal.compiler.lir.LIRInstruction.visitEachTemp(InstructionValueConsumer):void (10 bytes)   inline method (bytecode parsing)
                            @ 22  jdk.graal.compiler.lir.LIRInstruction.visitEachOutput(InstructionValueConsumer):void (10 bytes)   inline method (bytecode parsing)
                            @ 6  jdk.graal.compiler.core.common.Fields.getCount():int (6 bytes)   inline method (bytecode parsing)
                            @ 51  jdk.graal.compiler.lir.LIRIntrospection$Values.getDirectCount():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 61  jdk.graal.compiler.lir.LIRIntrospection$Values.getValue(Object, int):Value (10 bytes)   inline method (bytecode parsing)
                            @ 100  jdk.graal.compiler.lir.LIRIntrospection$Values.getFlags(int):EnumSet (7 bytes)   inline method (bytecode parsing)
                            @ 115  jdk.graal.compiler.lir.LIRIntrospection$Values.getValueArray(Object, int):Value[] (10 bytes)   inline method (bytecode parsing)
                            @ 172  jdk.graal.compiler.lir.LIRIntrospection$Values.getFlags(int):EnumSet (7 bytes)   inline method (bytecode parsing)
                                      @ 3  jdk.graal.compiler.core.common.Fields.getObject(Object, int):Object (40 bytes)   trivial (relevance=2.000000, probability=2.130081, bonus=1.000000, nodes=9)
                                      @ 3  jdk.graal.compiler.core.common.Fields.getObject(Object, int):Object (40 bytes)   trivial (relevance=2.000000, probability=2.130081, bonus=1.000000, nodes=9)
                                    @ 103  jdk.graal.compiler.lir.InstructionValueConsumer.visitValue(LIRInstruction, Value, LIRInstruction$OperandMode, EnumSet):void (0 bytes)   not inlining no type profile exists
                                      @ 10  jdk.graal.compiler.lir.InstructionValueConsumer.visitValue(LIRInstruction, Value, LIRInstruction$OperandMode, EnumSet):void (0 bytes)   not inlining no type profile exists
                                      @ 25  jdk.graal.compiler.lir.InstructionValueConsumer.visitValue(LIRInstruction, Value, LIRInstruction$OperandMode, EnumSet):void (0 bytes)   not inlining no type profile exists
                                      @ 86  jdk.graal.compiler.lir.amd64.AMD64AddressValue.visitEachComponent(LIRInstruction, LIRInstruction$OperandMode, InstructionValueConsumer):void (31 bytes)   relevance-based (relevance=1.000000, probability=1.065040, bonus=1.000000, nodes=16 <= 300.000000)
                                    @ 175  jdk.graal.compiler.lir.InstructionValueConsumer.visitValue(LIRInstruction, Value, LIRInstruction$OperandMode, EnumSet):void (0 bytes)   not inlining no type profile exists
                                      @ 10  jdk.graal.compiler.lir.InstructionValueConsumer.visitValue(LIRInstruction, Value, LIRInstruction$OperandMode, EnumSet):void (0 bytes)   not inlining no type profile exists
                                      @ 25  jdk.graal.compiler.lir.InstructionValueConsumer.visitValue(LIRInstruction, Value, LIRInstruction$OperandMode, EnumSet):void (0 bytes)   not inlining no type profile exists
                                      @ 158  jdk.graal.compiler.lir.amd64.AMD64AddressValue.visitEachComponent(LIRInstruction, LIRInstruction$OperandMode, InstructionValueConsumer):void (31 bytes)   relevance-based (relevance=1.000000, probability=1.065040, bonus=1.000000, nodes=16 <= 300.000000)
                                    @ 9  jdk.graal.compiler.lir.LIRIntrospection.visitEach(LIRInstruction, LIRIntrospection$Values, LIRInstruction$OperandMode, InstructionValueConsumer):void (193 bytes)   relevance-based (relevance=1.000000, probability=4.260161, bonus=1.000000, nodes=104 <= 300.000000)
                                  @ 6  jdk.graal.compiler.lir.LIRInstructionClass.visitEachUse(LIRInstruction, InstructionValueConsumer):void (13 bytes)   relevance-based (relevance=1.000000, probability=4.260161, bonus=1.000000, nodes=106 <= 300.000000)
                            @ 6  jdk.graal.compiler.core.common.Fields.getCount():int (6 bytes)   inline method (bytecode parsing)
                            @ 51  jdk.graal.compiler.lir.LIRIntrospection$Values.getDirectCount():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 61  jdk.graal.compiler.lir.LIRIntrospection$Values.getValue(Object, int):Value (10 bytes)   inline method (bytecode parsing)
                            @ 100  jdk.graal.compiler.lir.LIRIntrospection$Values.getFlags(int):EnumSet (7 bytes)   inline method (bytecode parsing)
                            @ 115  jdk.graal.compiler.lir.LIRIntrospection$Values.getValueArray(Object, int):Value[] (10 bytes)   inline method (bytecode parsing)
                            @ 172  jdk.graal.compiler.lir.LIRIntrospection$Values.getFlags(int):EnumSet (7 bytes)   inline method (bytecode parsing)
                                      @ 3  jdk.graal.compiler.core.common.Fields.getObject(Object, int):Object (40 bytes)   trivial (relevance=2.000000, probability=2.130081, bonus=1.000000, nodes=9)
                                      @ 3  jdk.graal.compiler.core.common.Fields.getObject(Object, int):Object (40 bytes)   trivial (relevance=2.000000, probability=2.130081, bonus=1.000000, nodes=9)
                                    @ 103  jdk.graal.compiler.lir.InstructionValueConsumer.visitValue(LIRInstruction, Value, LIRInstruction$OperandMode, EnumSet):void (0 bytes)   not inlining no type profile exists
                                      @ 10  jdk.graal.compiler.lir.InstructionValueConsumer.visitValue(LIRInstruction, Value, LIRInstruction$OperandMode, EnumSet):void (0 bytes)   not inlining no type profile exists
                                      @ 25  jdk.graal.compiler.lir.InstructionValueConsumer.visitValue(LIRInstruction, Value, LIRInstruction$OperandMode, EnumSet):void (0 bytes)   not inlining no type profile exists
                                      @ 86  jdk.graal.compiler.lir.amd64.AMD64AddressValue.visitEachComponent(LIRInstruction, LIRInstruction$OperandMode, InstructionValueConsumer):void (31 bytes)   relevance-based (relevance=1.000000, probability=1.065040, bonus=1.000000, nodes=16 <= 300.000000)
                                    @ 175  jdk.graal.compiler.lir.InstructionValueConsumer.visitValue(LIRInstruction, Value, LIRInstruction$OperandMode, EnumSet):void (0 bytes)   not inlining no type profile exists
                                      @ 10  jdk.graal.compiler.lir.InstructionValueConsumer.visitValue(LIRInstruction, Value, LIRInstruction$OperandMode, EnumSet):void (0 bytes)   not inlining no type profile exists
                                      @ 25  jdk.graal.compiler.lir.InstructionValueConsumer.visitValue(LIRInstruction, Value, LIRInstruction$OperandMode, EnumSet):void (0 bytes)   not inlining no type profile exists
                                      @ 158  jdk.graal.compiler.lir.amd64.AMD64AddressValue.visitEachComponent(LIRInstruction, LIRInstruction$OperandMode, InstructionValueConsumer):void (31 bytes)   relevance-based (relevance=1.000000, probability=1.065040, bonus=1.000000, nodes=16 <= 300.000000)
                                    @ 9  jdk.graal.compiler.lir.LIRIntrospection.visitEach(LIRInstruction, LIRIntrospection$Values, LIRInstruction$OperandMode, InstructionValueConsumer):void (193 bytes)   relevance-based (relevance=1.000000, probability=4.260161, bonus=1.000000, nodes=104 <= 300.000000)
                                  @ 6  jdk.graal.compiler.lir.LIRInstructionClass.visitEachAlive(LIRInstruction, InstructionValueConsumer):void (13 bytes)   relevance-based (relevance=1.000000, probability=4.260161, bonus=1.000000, nodes=106 <= 300.000000)
                            @ 7  jdk.graal.compiler.core.common.Fields.getCount():int (6 bytes)   inline method (bytecode parsing)
                                    @ 19  jdk.graal.compiler.core.common.Fields.getObject(Object, int):Object (40 bytes)   trivial (relevance=2.000000, probability=4.260161, bonus=1.000000, nodes=9)
                            @ 20  jdk.vm.ci.code.BytecodeFrame.caller():BytecodeFrame (8 bytes)   inline method (bytecode parsing)
                            @ 63  jdk.vm.ci.code.VirtualObject.getValues():JavaValue[] (5 bytes)   inline accessor method (bytecode parsing)
                            @ 73  jdk.vm.ci.code.StackLockValue.getOwner():JavaValue (5 bytes)   inline accessor method (bytecode parsing)
                            @ 106  jdk.vm.ci.code.StackLockValue.getSlot():AllocatableValue (5 bytes)   inline accessor method (bytecode parsing)
                            @ 22  jdk.vm.ci.meta.Value$IllegalValue.equals(Object):boolean (5 bytes)   inline method (bytecode parsing)
                                        @ 18  jdk.vm.ci.code.ValueUtil.isIllegalJavaValue(JavaValue):boolean (26 bytes)   trivial (relevance=16.000000, probability=2.130081, bonus=1.000000, nodes=8)
                                      @ 99  jdk.graal.compiler.lir.InstructionValueConsumer.visitValue(LIRInstruction, Value, LIRInstruction$OperandMode, EnumSet):void (0 bytes)   not inlining no type profile exists
                                      @ 48  jdk.graal.compiler.lir.InstructionValueConsumer.visitValue(LIRInstruction, Value, LIRInstruction$OperandMode, EnumSet):void (0 bytes)   not inlining no type profile exists
                                        @ 113  jdk.graal.compiler.lir.LIRValueUtil.isVirtualStackSlot(Value):boolean (23 bytes)   trivial (relevance=2.000000, probability=0.266260, bonus=1.000000, nodes=8)
                                      @ 129  jdk.graal.compiler.lir.InstructionValueConsumer.visitValue(LIRInstruction, Value, LIRInstruction$OperandMode, EnumSet):void (0 bytes)   not inlining no type profile exists
                                      @ 16  jdk.graal.compiler.lir.LIRFrameState.visitValues(LIRInstruction, JavaValue[], InstructionValueConsumer):void (167 bytes)   relevance-based (relevance=1.000000, probability=2.130081, bonus=1.000000, nodes=75 <= 300.000000)
                                      @ 1  jdk.vm.ci.code.BytecodePosition.getCaller():BytecodePosition (5 bytes)   trivial (relevance=1.000000, probability=2.130081, bonus=1.000000, nodes=5)
                            @ 73  jdk.vm.ci.code.StackLockValue.getOwner():JavaValue (5 bytes)   inline accessor method (bytecode parsing)
                            @ 106  jdk.vm.ci.code.StackLockValue.getSlot():AllocatableValue (5 bytes)   inline accessor method (bytecode parsing)
                            @ 22  jdk.vm.ci.meta.Value$IllegalValue.equals(Object):boolean (5 bytes)   inline method (bytecode parsing)
                                        @ 18  jdk.vm.ci.code.ValueUtil.isIllegalJavaValue(JavaValue):boolean (26 bytes)   trivial (relevance=8.000000, probability=1.065040, bonus=1.000000, nodes=8)
                                      @ 99  jdk.graal.compiler.lir.InstructionValueConsumer.visitValue(LIRInstruction, Value, LIRInstruction$OperandMode, EnumSet):void (0 bytes)   not inlining no type profile exists
                                      @ 48  jdk.graal.compiler.lir.InstructionValueConsumer.visitValue(LIRInstruction, Value, LIRInstruction$OperandMode, EnumSet):void (0 bytes)   not inlining no type profile exists
                                        @ 113  jdk.graal.compiler.lir.LIRValueUtil.isVirtualStackSlot(Value):boolean (23 bytes)   trivial (relevance=1.000000, probability=0.133130, bonus=1.000000, nodes=8)
                                      @ 129  jdk.graal.compiler.lir.InstructionValueConsumer.visitValue(LIRInstruction, Value, LIRInstruction$OperandMode, EnumSet):void (0 bytes)   not inlining no type profile exists
                                      @ 67  jdk.graal.compiler.lir.LIRFrameState.visitValues(LIRInstruction, JavaValue[], InstructionValueConsumer):void (167 bytes)   relevance-based (relevance=0.500000, probability=1.065040, bonus=1.000000, nodes=75 <= 150.000000)
                                      @ 72  org.graalvm.collections.EconomicMap.getEntries():MapCursor (0 bytes)   not inlining no type profile exists
                                      @ 47  jdk.graal.compiler.lir.InstructionValueConsumer.visitValue(LIRInstruction, Value, LIRInstruction$OperandMode, EnumSet):void (0 bytes)   not inlining no type profile exists
                                      @ 81  org.graalvm.collections.MapCursor.advance():boolean (10 bytes)   not inlining no type profile exists
                                      @ 91  org.graalvm.collections.MapCursor.getValue():Object (10 bytes)   not inlining no type profile exists
                                      @ 113  jdk.graal.compiler.lir.InstructionValueConsumer.visitValue(LIRInstruction, Value, LIRInstruction$OperandMode, EnumSet):void (0 bytes)   not inlining no type profile exists
                                      @ 95  jdk.graal.compiler.lir.util.IndexedValueMap.visitEach(LIRInstruction, LIRInstruction$OperandMode, EnumSet, InstructionValueConsumer):void (122 bytes)   relevance-based (relevance=0.500000, probability=1.065040, bonus=1.000000, nodes=75 <= 150.000000)
                                    @ 36  jdk.graal.compiler.lir.LIRFrameState.visitEachState(LIRInstruction, InstructionValueConsumer):void (99 bytes)   relevance-based (relevance=1.000000, probability=2.130081, bonus=1.000000, nodes=258 <= 300.000000)
                                  @ 6  jdk.graal.compiler.lir.LIRInstructionClass.visitEachState(LIRInstruction, InstructionValueConsumer):void (46 bytes)   relevance-based (relevance=1.000000, probability=4.260161, bonus=1.000000, nodes=290 <= 300.000000)
                                @ 8  jdk.graal.compiler.lir.framemap.FrameMapBuilderImpl.lambda$verifyStackSlotAllocation$1(InstructionValueConsumer, LIRInstruction):void (26 bytes)   not inlining relevance-based (relevance=1.000000, probability=4.260161, bonus=1.000000, nodes=514 > 300.000000)
                              @ 46  jdk.graal.compiler.lir.framemap.FrameMapBuilderImpl$$Lambda/0x00007f45e02478c0.accept(Object):void (12 bytes)   relevance-based (relevance=1.000000, probability=4.603850, bonus=1.000000, nodes=48 <= 300.000000)
                            @ 8  java.util.Arrays$ArrayItr.<init>(Object[]):void (10 bytes)   inline method (bytecode parsing)
                                @ 1  deltablue.BinaryConstraint.isSatisfied():boolean (13 bytes)   trivial (relevance=1.000131, probability=1.000000, bonus=1.000000, nodes=9)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                @ 9  som.Vector.append(Object):void (51 bytes)   not inlining relevance-based (relevance=0.000131, probability=0.000131, bonus=1.000000, nodes=35 > 0.039236)
                              @ 8  deltablue.Planner.lambda$removePropagateFrom$4(Vector, AbstractConstraint):void (13 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=17 <= 300.000000)
                            @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=14 <= 300.000000)
                              @ 1  java.util.Collections$SingletonList.size():int (2 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=9)
                              @ 7  jdk.internal.misc.Unsafe.convEndian(boolean, long):long (16 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=16 <= 300.000000)
                            @ 17  java.lang.Enum.ordinal():int (5 bytes)   inline accessor method (bytecode parsing)
                                @ 2  java.util.EnumSet.typeCheck(Enum):void (59 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=9)
                              @ 5  java.util.RegularEnumSet.add(Enum):boolean (40 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=21 <= 300.000000)
                            @ 10  java.nio.Buffer.session():MemorySessionImpl (20 bytes)   inline method (bytecode parsing)
                            @ 21  jdk.internal.misc.ScopedMemoryAccess.putLongUnaligned(MemorySessionImpl, Object, long, long, boolean):void (23 bytes)   inline method (bytecode parsing)
                              @ 8  jdk.internal.misc.ScopedMemoryAccess.putLongUnalignedInternal(MemorySessionImpl, Object, long, long, boolean):void (37 bytes)   inline method (bytecode parsing)
                                @ 17  jdk.internal.misc.Unsafe.putLongUnaligned(Object, long, long, boolean):void (14 bytes)   inline method (bytecode parsing)
                              @ 7  jdk.internal.misc.Unsafe.convEndian(boolean, long):long (16 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=16 <= 300.000000)
                            @ 8  java.nio.DirectByteBuffer.ix(int):long (10 bytes)   inline method (bytecode parsing)
                              @ 5  java.nio.Buffer.nextPutIndex(int):int (32 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=13 <= 300.000000)
                            @ 10  java.nio.Buffer.session():MemorySessionImpl (20 bytes)   inline method (bytecode parsing)
                            @ 21  jdk.internal.misc.ScopedMemoryAccess.putLongUnaligned(MemorySessionImpl, Object, long, long, boolean):void (23 bytes)   inline method (bytecode parsing)
                              @ 8  jdk.internal.misc.ScopedMemoryAccess.putLongUnalignedInternal(MemorySessionImpl, Object, long, long, boolean):void (37 bytes)   inline method (bytecode parsing)
                                @ 17  jdk.internal.misc.Unsafe.putLongUnaligned(Object, long, long, boolean):void (14 bytes)   inline method (bytecode parsing)
                                @ 7  jdk.internal.misc.Unsafe.convEndian(boolean, long):long (16 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=16 <= 300.000000)
                              @ 12  java.nio.DirectByteBuffer.putDouble(long, double):ByteBuffer (42 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=32 <= 300.000000)
                                @ 12  java.lang.Long.getChars(long, int, byte[]):int (195 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=109 <= 300.000000)
                              @ 3  java.lang.StringConcatHelper.prepend(long, byte[], long):long (30 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=115 <= 300.000000)
                                  @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                                @ 2  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=8)
                                  @ 1  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.006372, probability=1.000000, bonus=1.000000, nodes=5)
                                @ 21  java.lang.String.getBytes(byte[], int, byte):void (44 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=51 <= 300.000000)
                              @ 16  java.lang.StringConcatHelper.prepend(long, byte[], String):long (37 bytes)   relevance-based (relevance=1.065971, probability=1.000000, bonus=1.000000, nodes=64 <= 300.000000)
                              @ 1  java.util.IdentityHashMap.maskNull(Object):Object (12 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=6)
                              @ 17  java.util.IdentityHashMap.hash(Object, int):int (18 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=15 <= 300.000000)
                              @ 47  java.util.IdentityHashMap.nextKeyIndex(int, int):int (15 bytes)   trivial (relevance=0.870607, probability=0.870607, bonus=1.000000, nodes=9)
                                @ 1  java.util.ArrayList$SubList.checkForComodification():void (23 bytes)   trivial (relevance=0.000471, probability=0.000470, bonus=1.000000, nodes=9)
                              @ 1  java.util.Collections$SingletonList.size():int (2 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=19 <= 300.000000)
                            @ 1  java.util.Objects.requireNonNull(Object):Object (14 bytes)   inline method (bytecode parsing)
                              @ 8  jdk.graal.compiler.graph.iterators.NodeIterable.iterator():Iterator (10 bytes)   not inlining no type profile exists
                            @ 1  jdk.graal.compiler.graph.iterators.NodeIterator.<init>():void (5 bytes)   inline method (bytecode parsing)
                                @ 17  jdk.graal.compiler.graph.iterators.PredicatedProxyNodeIterator.<init>(Iterator, NodePredicate):void (15 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                              @ 6  jdk.graal.compiler.graph.iterators.FilteredNodeIterable.iterator():Iterator (21 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=16 <= 300.000000)
                                  @ 11  jdk.graal.compiler.graph.Node.isAlive():boolean (13 bytes)   trivial (relevance=4.000000, probability=1.330480, bonus=1.000000, nodes=9)
                                @ 25  jdk.graal.compiler.graph.iterators.NodePredicate.apply(Node):boolean (0 bytes)   not inlining no type profile exists
                                @ 37  java.util.Iterator.hasNext():boolean (0 bytes)   not inlining no type profile exists
                                @ 50  java.util.Iterator.next():Object (0 bytes)   not inlining no type profile exists
                                  @ 75  jdk.graal.compiler.graph.Node.isAlive():boolean (13 bytes)   trivial (relevance=0.500000, probability=0.748395, bonus=1.000000, nodes=9)
                                @ 89  jdk.graal.compiler.graph.iterators.NodePredicate.apply(Node):boolean (0 bytes)   not inlining no type profile exists
                                @ 1  jdk.graal.compiler.graph.iterators.PredicatedProxyNodeIterator.forward():void (103 bytes)   relevance-based (relevance=1.000000, probability=1.496790, bonus=1.000000, nodes=93 <= 300.000000)
                              @ 13  jdk.graal.compiler.graph.iterators.NodeIterator.hasNext():boolean (17 bytes)   relevance-based (relevance=1.496790, probability=1.496790, bonus=1.000000, nodes=98 <= 300.000000)
                                    @ 11  jdk.graal.compiler.graph.Node.isAlive():boolean (13 bytes)   trivial (relevance=2.655228, probability=0.441591, bonus=1.000000, nodes=9)
                                  @ 25  jdk.graal.compiler.graph.iterators.NodePredicate.apply(Node):boolean (0 bytes)   not inlining no type profile exists
                                  @ 37  java.util.Iterator.hasNext():boolean (0 bytes)   not inlining no type profile exists
                                  @ 50  java.util.Iterator.next():Object (0 bytes)   not inlining no type profile exists
                                    @ 75  jdk.graal.compiler.graph.Node.isAlive():boolean (13 bytes)   trivial (relevance=0.331904, probability=0.248395, bonus=1.000000, nodes=9)
                                  @ 89  jdk.graal.compiler.graph.iterators.NodePredicate.apply(Node):boolean (0 bytes)   not inlining no type profile exists
                                  @ 1  jdk.graal.compiler.graph.iterators.PredicatedProxyNodeIterator.forward():void (103 bytes)   relevance-based (relevance=0.663807, probability=0.496790, bonus=1.000000, nodes=93 <= 199.142133)
                                @ 1  jdk.graal.compiler.graph.iterators.NodeIterator.next():Node (31 bytes)   not inlining relevance-based (relevance=0.331904, probability=0.496790, bonus=1.000000, nodes=105 > 99.571066)
                              @ 22  jdk.graal.compiler.graph.iterators.NodeIterator.next():Object (5 bytes)   trivial (relevance=0.331904, probability=0.496790, bonus=1.000000, nodes=7)
                            @ 8  jdk.graal.compiler.phases.common.inlining.walker.ComputeInliningRelevance$Scope.lambda$process$0(NodeWorkList, LoopExitNode):void (9 bytes)   inline method (bytecode parsing)
                              @ 2  jdk.graal.compiler.nodes.FixedWithNextNode.next():FixedNode (5 bytes)   inline accessor method (bytecode parsing)
                              @ 5  jdk.graal.compiler.graph.NodeWorkList.add(Node):void (0 bytes)   not inlining no type profile exists
                            @ 2  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  jdk.graal.compiler.nodes.loop.LoopFragment$$Lambda/0x00007f45e02f4988.<init>(NodeBitMap):void (10 bytes)   inline method (bytecode parsing)
                            @ 18  jdk.graal.compiler.graph.NodeList.iterator():Iterator (10 bytes)   inline method (bytecode parsing)
                            @ 32  jdk.graal.compiler.graph.NodeList$NodeListIterator.next():Object (5 bytes)   inline method (bytecode parsing)
                            @ 43  jdk.graal.compiler.nodes.virtual.EscapeObjectState.applyToVirtual(VirtualState$VirtualClosure):void (8 bytes)   inline method (bytecode parsing)
                            @ 50  jdk.graal.compiler.nodes.FrameState.outerFrameState():FrameState (5 bytes)   inline accessor method (bytecode parsing)
                            @ 57  jdk.graal.compiler.nodes.FrameState.outerFrameState():FrameState (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  jdk.graal.compiler.nodes.loop.LoopFragment.lambda$computeNodes$0(NodeBitMap, VirtualState):void (6 bytes)   inline method (bytecode parsing)
                            @ 33  jdk.graal.compiler.graph.Node.toString():String (8 bytes)   inline method (bytecode parsing)
                            @ 36  java.lang.InternalError.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  java.lang.VirtualMachineError.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                                @ 2  java.lang.Error.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                            @ 41  jdk.graal.compiler.graph.Node.id():int (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 22  jdk.graal.compiler.graph.Node.isAlive():boolean (13 bytes)   trivial (relevance=1.327614, probability=0.356971, bonus=1.000000, nodes=9)
                            @ 4  java.lang.Enum.ordinal():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 96  java.lang.StringBuilder.<init>():void (7 bytes)   inline method (bytecode parsing)
                            @ 108  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 114  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 161  java.lang.StringBuilder.append(Object):StringBuilder (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 167  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 177  java.lang.StringBuilder.append(Object):StringBuilder (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 183  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 194  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 199  java.lang.StringBuilder.toString():String (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.String.<init>(StringBuilder):void (7 bytes)   inline method (bytecode parsing)
                            @ 78  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object, Object):Object (10 bytes)   inline method (bytecode parsing)
                              @ 6  java.lang.invoke.LambdaForm$MH/0x00007f45e0011800.invoke(Object, Object, Object):Object (110 bytes)   inline method (bytecode parsing)
                                @ 17  java.lang.invoke.DirectMethodHandle$Holder.invokeStatic(Object, Object):Object (14 bytes)   inline method (bytecode parsing)
                                  @ 1  java.lang.invoke.DirectMethodHandle.internalMemberName(Object):Object (8 bytes)   inline method (bytecode parsing)
                                @ 24  java.lang.invoke.DirectMethodHandle$Holder.invokeStatic(Object, Object):Object (14 bytes)   inline method (bytecode parsing)
                                  @ 1  java.lang.invoke.DirectMethodHandle.internalMemberName(Object):Object (8 bytes)   inline method (bytecode parsing)
                                @ 44  java.lang.invoke.LambdaForm$MH/0x00007f45e0011000.invoke(Object, Object, Object):long (46 bytes)   inline method (bytecode parsing)
                                  @ 23  java.lang.invoke.DelegatingMethodHandle$Holder.reinvoke_L(Object, long, Object):long (20 bytes)   inline method (bytecode parsing)
                                    @ 16  java.lang.invoke.DirectMethodHandle$Holder.invokeStatic(Object, long, Object):long (17 bytes)   inline method (bytecode parsing)
                                      @ 1  java.lang.invoke.DirectMethodHandle.internalMemberName(Object):Object (8 bytes)   inline method (bytecode parsing)
                                  @ 42  java.lang.invoke.DirectMethodHandle$Holder.invokeStatic(Object, long, Object):long (17 bytes)   inline method (bytecode parsing)
                                    @ 1  java.lang.invoke.DirectMethodHandle.internalMemberName(Object):Object (8 bytes)   inline method (bytecode parsing)
                                @ 62  java.lang.invoke.DirectMethodHandle$Holder.invokeStatic(Object, long):Object (14 bytes)   inline method (bytecode parsing)
                                  @ 1  java.lang.invoke.DirectMethodHandle.internalMemberName(Object):Object (8 bytes)   inline method (bytecode parsing)
                                  @ 10  java.lang.StringConcatHelper.newArray(long):byte[] (40 bytes)   inline method (bytecode parsing)
                                @ 86  java.lang.invoke.LambdaForm$MH/0x00007f45e000bc00.invoke(Object, long, Object, Object, Object):long (45 bytes)   inline method (bytecode parsing)
                                  @ 20  java.lang.invoke.LambdaForm$MH/0x00007f45e000b400.invoke(Object, long, Object, Object):long (32 bytes)   inline method (bytecode parsing)
                                    @ 28  java.lang.invoke.DirectMethodHandle$Holder.invokeStatic(Object, long, Object, Object, Object):long (21 bytes)   inline method (bytecode parsing)
                                      @ 1  java.lang.invoke.DirectMethodHandle.internalMemberName(Object):Object (8 bytes)   inline method (bytecode parsing)
                                  @ 41  java.lang.invoke.LambdaForm$MH/0x00007f45e000b400.invoke(Object, long, Object, Object):long (32 bytes)   inline method (bytecode parsing)
                                    @ 28  java.lang.invoke.DirectMethodHandle$Holder.invokeStatic(Object, long, Object, Object, Object):long (21 bytes)   inline method (bytecode parsing)
                                      @ 1  java.lang.invoke.DirectMethodHandle.internalMemberName(Object):Object (8 bytes)   inline method (bytecode parsing)
                                @ 106  java.lang.invoke.DirectMethodHandle$Holder.invokeStatic(Object, Object, long):Object (17 bytes)   inline method (bytecode parsing)
                                  @ 1  java.lang.invoke.DirectMethodHandle.internalMemberName(Object):Object (8 bytes)   inline method (bytecode parsing)
                            @ 57  jdk.graal.compiler.graph.Node.getNodeClass():NodeClass (5 bytes)   inline accessor method (bytecode parsing)
                            @ 4  java.lang.Enum.ordinal():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 96  java.lang.StringBuilder.<init>():void (7 bytes)   inline method (bytecode parsing)
                            @ 108  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 114  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 161  java.lang.StringBuilder.append(Object):StringBuilder (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 167  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 177  java.lang.StringBuilder.append(Object):StringBuilder (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 183  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 194  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 199  java.lang.StringBuilder.toString():String (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.String.<init>(StringBuilder):void (7 bytes)   inline method (bytecode parsing)
                            @ 78  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object, Object):Object (10 bytes)   inline method (bytecode parsing)
                              @ 6  java.lang.invoke.LambdaForm$MH/0x00007f45e0011800.invoke(Object, Object, Object):Object (110 bytes)   inline method (bytecode parsing)
                                @ 17  java.lang.invoke.DirectMethodHandle$Holder.invokeStatic(Object, Object):Object (14 bytes)   inline method (bytecode parsing)
                                  @ 1  java.lang.invoke.DirectMethodHandle.internalMemberName(Object):Object (8 bytes)   inline method (bytecode parsing)
                                @ 24  java.lang.invoke.DirectMethodHandle$Holder.invokeStatic(Object, Object):Object (14 bytes)   inline method (bytecode parsing)
                                  @ 1  java.lang.invoke.DirectMethodHandle.internalMemberName(Object):Object (8 bytes)   inline method (bytecode parsing)
                                @ 44  java.lang.invoke.LambdaForm$MH/0x00007f45e0011000.invoke(Object, Object, Object):long (46 bytes)   inline method (bytecode parsing)
                                  @ 23  java.lang.invoke.DelegatingMethodHandle$Holder.reinvoke_L(Object, long, Object):long (20 bytes)   inline method (bytecode parsing)
                                    @ 16  java.lang.invoke.DirectMethodHandle$Holder.invokeStatic(Object, long, Object):long (17 bytes)   inline method (bytecode parsing)
                                      @ 1  java.lang.invoke.DirectMethodHandle.internalMemberName(Object):Object (8 bytes)   inline method (bytecode parsing)
                                  @ 42  java.lang.invoke.DirectMethodHandle$Holder.invokeStatic(Object, long, Object):long (17 bytes)   inline method (bytecode parsing)
                                    @ 1  java.lang.invoke.DirectMethodHandle.internalMemberName(Object):Object (8 bytes)   inline method (bytecode parsing)
                                @ 62  java.lang.invoke.DirectMethodHandle$Holder.invokeStatic(Object, long):Object (14 bytes)   inline method (bytecode parsing)
                                  @ 1  java.lang.invoke.DirectMethodHandle.internalMemberName(Object):Object (8 bytes)   inline method (bytecode parsing)
                                  @ 10  java.lang.StringConcatHelper.newArray(long):byte[] (40 bytes)   inline method (bytecode parsing)
                                @ 86  java.lang.invoke.LambdaForm$MH/0x00007f45e000bc00.invoke(Object, long, Object, Object, Object):long (45 bytes)   inline method (bytecode parsing)
                                  @ 20  java.lang.invoke.LambdaForm$MH/0x00007f45e000b400.invoke(Object, long, Object, Object):long (32 bytes)   inline method (bytecode parsing)
                                    @ 28  java.lang.invoke.DirectMethodHandle$Holder.invokeStatic(Object, long, Object, Object, Object):long (21 bytes)   inline method (bytecode parsing)
                                      @ 1  java.lang.invoke.DirectMethodHandle.internalMemberName(Object):Object (8 bytes)   inline method (bytecode parsing)
                                  @ 41  java.lang.invoke.LambdaForm$MH/0x00007f45e000b400.invoke(Object, long, Object, Object):long (32 bytes)   inline method (bytecode parsing)
                                    @ 28  java.lang.invoke.DirectMethodHandle$Holder.invokeStatic(Object, long, Object, Object, Object):long (21 bytes)   inline method (bytecode parsing)
                                      @ 1  java.lang.invoke.DirectMethodHandle.internalMemberName(Object):Object (8 bytes)   inline method (bytecode parsing)
                                @ 106  java.lang.invoke.DirectMethodHandle$Holder.invokeStatic(Object, Object, long):Object (17 bytes)   inline method (bytecode parsing)
                                  @ 1  java.lang.invoke.DirectMethodHandle.internalMemberName(Object):Object (8 bytes)   inline method (bytecode parsing)
                            @ 57  jdk.graal.compiler.graph.Node.getNodeClass():NodeClass (5 bytes)   inline accessor method (bytecode parsing)
                            @ 28  java.lang.String.<init>(byte[], byte):void (15 bytes)   inline method (bytecode parsing)
                                                  @ 52  java.lang.Integer.toString(int):String (55 bytes)   not inlining too large previous low-level graph (low-level-nodes: 370, relevance=0.663807, probability=0.178486, bonus=1.000000, nodes=19)
                                                @ 64  jdk.graal.compiler.graph.Node.toString(Verbosity):String (220 bytes)   trivial (relevance=0.663807, probability=0.178486, bonus=1.000000, nodes=9)
                                              @ 68  jdk.graal.compiler.nodes.FrameState.toString(Verbosity):String (68 bytes)   relevance-based (relevance=0.663807, probability=0.178486, bonus=1.000000, nodes=10 <= 199.142133)
                            @ 4  java.lang.Enum.ordinal():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 96  java.lang.StringBuilder.<init>():void (7 bytes)   inline method (bytecode parsing)
                            @ 108  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 114  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 161  java.lang.StringBuilder.append(Object):StringBuilder (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 167  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 177  java.lang.StringBuilder.append(Object):StringBuilder (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 183  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 194  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 199  java.lang.StringBuilder.toString():String (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.String.<init>(StringBuilder):void (7 bytes)   inline method (bytecode parsing)
                            @ 78  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object, Object):Object (10 bytes)   inline method (bytecode parsing)
                              @ 6  java.lang.invoke.LambdaForm$MH/0x00007f45e0011800.invoke(Object, Object, Object):Object (110 bytes)   inline method (bytecode parsing)
                                @ 17  java.lang.invoke.DirectMethodHandle$Holder.invokeStatic(Object, Object):Object (14 bytes)   inline method (bytecode parsing)
                                  @ 1  java.lang.invoke.DirectMethodHandle.internalMemberName(Object):Object (8 bytes)   inline method (bytecode parsing)
                                @ 24  java.lang.invoke.DirectMethodHandle$Holder.invokeStatic(Object, Object):Object (14 bytes)   inline method (bytecode parsing)
                                  @ 1  java.lang.invoke.DirectMethodHandle.internalMemberName(Object):Object (8 bytes)   inline method (bytecode parsing)
                                @ 44  java.lang.invoke.LambdaForm$MH/0x00007f45e0011000.invoke(Object, Object, Object):long (46 bytes)   inline method (bytecode parsing)
                                  @ 23  java.lang.invoke.DelegatingMethodHandle$Holder.reinvoke_L(Object, long, Object):long (20 bytes)   inline method (bytecode parsing)
                                    @ 16  java.lang.invoke.DirectMethodHandle$Holder.invokeStatic(Object, long, Object):long (17 bytes)   inline method (bytecode parsing)
                                      @ 1  java.lang.invoke.DirectMethodHandle.internalMemberName(Object):Object (8 bytes)   inline method (bytecode parsing)
                                  @ 42  java.lang.invoke.DirectMethodHandle$Holder.invokeStatic(Object, long, Object):long (17 bytes)   inline method (bytecode parsing)
                                    @ 1  java.lang.invoke.DirectMethodHandle.internalMemberName(Object):Object (8 bytes)   inline method (bytecode parsing)
                                @ 62  java.lang.invoke.DirectMethodHandle$Holder.invokeStatic(Object, long):Object (14 bytes)   inline method (bytecode parsing)
                                  @ 1  java.lang.invoke.DirectMethodHandle.internalMemberName(Object):Object (8 bytes)   inline method (bytecode parsing)
                                  @ 10  java.lang.StringConcatHelper.newArray(long):byte[] (40 bytes)   inline method (bytecode parsing)
                                @ 86  java.lang.invoke.LambdaForm$MH/0x00007f45e000bc00.invoke(Object, long, Object, Object, Object):long (45 bytes)   inline method (bytecode parsing)
                                  @ 20  java.lang.invoke.LambdaForm$MH/0x00007f45e000b400.invoke(Object, long, Object, Object):long (32 bytes)   inline method (bytecode parsing)
                                    @ 28  java.lang.invoke.DirectMethodHandle$Holder.invokeStatic(Object, long, Object, Object, Object):long (21 bytes)   inline method (bytecode parsing)
                                      @ 1  java.lang.invoke.DirectMethodHandle.internalMemberName(Object):Object (8 bytes)   inline method (bytecode parsing)
                                  @ 41  java.lang.invoke.LambdaForm$MH/0x00007f45e000b400.invoke(Object, long, Object, Object):long (32 bytes)   inline method (bytecode parsing)
                                    @ 28  java.lang.invoke.DirectMethodHandle$Holder.invokeStatic(Object, long, Object, Object, Object):long (21 bytes)   inline method (bytecode parsing)
                                      @ 1  java.lang.invoke.DirectMethodHandle.internalMemberName(Object):Object (8 bytes)   inline method (bytecode parsing)
                                @ 106  java.lang.invoke.DirectMethodHandle$Holder.invokeStatic(Object, Object, long):Object (17 bytes)   inline method (bytecode parsing)
                                  @ 1  java.lang.invoke.DirectMethodHandle.internalMemberName(Object):Object (8 bytes)   inline method (bytecode parsing)
                            @ 57  jdk.graal.compiler.graph.Node.getNodeClass():NodeClass (5 bytes)   inline accessor method (bytecode parsing)
                            @ 8  jdk.graal.compiler.core.common.FieldIntrospection.getClazz():Class (5 bytes)   inline accessor method (bytecode parsing)
                            @ 47  jdk.graal.compiler.core.common.FieldIntrospection.getClazz():Class (5 bytes)   inline accessor method (bytecode parsing)
                            @ 58  java.lang.String.endsWith(String):boolean (15 bytes)   inline method (bytecode parsing)
                              @ 7  java.lang.String.length():int (11 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.String.coder():byte (15 bytes)   inline method (bytecode parsing)
                            @ 1  java.util.Objects.requireNonNull(Object):Object (14 bytes)   inline method (bytecode parsing)
                            @ 87  sun.reflect.annotation.AnnotationType.isInherited():boolean (5 bytes)   inline accessor method (bytecode parsing)
                            @ 120  java.lang.Math.min(int, int):int (11 bytes)   inline method (bytecode parsing)
                 n                                      @ 1  java.lang.Class.getRawAnnotations():byte[] (0 bytes)   not inlining it is a non-intrinsic native method
                 n                                      @ 5  java.lang.Class.getConstantPool():ConstantPool (0 bytes)   not inlining it is a non-intrinsic native method
                            @ 4  java.util.Collections.emptyMap():Map (4 bytes)   inline method (bytecode parsing)
                            @ 10  java.nio.ByteBuffer.wrap(byte[]):ByteBuffer (8 bytes)   inline method (bytecode parsing)
                            @ 65  sun.reflect.annotation.AnnotationType.retention():RetentionPolicy (5 bytes)   inline accessor method (bytecode parsing)
                            @ 1  java.util.AbstractMap.<init>():void (5 bytes)   inline method (bytecode parsing)
                                                                @ 1  java.util.HashMap.<init>():void (11 bytes)   trivial (relevance=1.000000, probability=0.070788, bonus=1.000000, nodes=8)
                                                              @ 4  java.util.LinkedHashMap.<init>():void (15 bytes)   relevance-based (relevance=1.000000, probability=0.070788, bonus=1.000000, nodes=15 <= 300.000000)
                            @ 17  java.nio.ByteOrder.nativeOrder():ByteOrder (4 bytes)   inline method (bytecode parsing)
                                                                          @ 2  java.nio.Buffer.limit(int):Buffer (65 bytes)   relevance-based (relevance=1.000000, probability=0.070788, bonus=1.000000, nodes=24 <= 300.000000)
                                                                        @ 2  java.nio.ByteBuffer.limit(int):ByteBuffer (8 bytes)   relevance-based (relevance=1.000000, probability=0.070788, bonus=1.000000, nodes=25 <= 300.000000)
                                                                      @ 39  java.nio.ByteBuffer.limit(int):Buffer (6 bytes)   relevance-based (relevance=1.000000, probability=0.070788, bonus=1.000000, nodes=26 <= 300.000000)
                                                                          @ 2  java.nio.Buffer.position(int):Buffer (52 bytes)   relevance-based (relevance=1.000000, probability=0.070788, bonus=1.000000, nodes=14 <= 300.000000)
                                                                        @ 2  java.nio.ByteBuffer.position(int):ByteBuffer (8 bytes)   relevance-based (relevance=1.000000, probability=0.070788, bonus=1.000000, nodes=15 <= 300.000000)
                                                                      @ 45  java.nio.ByteBuffer.position(int):Buffer (6 bytes)   relevance-based (relevance=1.022803, probability=0.070788, bonus=1.000000, nodes=16 <= 300.000000)
                                                                    @ 8  java.nio.Buffer.<init>(int, int, int, int, MemorySegment):void (105 bytes)   relevance-based (relevance=1.000000, probability=0.070788, bonus=1.000000, nodes=52 <= 300.000000)
                                                                  @ 12  java.nio.ByteBuffer.<init>(int, int, int, int, byte[], int, MemorySegment):void (47 bytes)   relevance-based (relevance=1.000000, probability=0.070788, bonus=1.000000, nodes=63 <= 300.000000)
                                                                @ 8  java.nio.HeapByteBuffer.<init>(byte[], int, int, MemorySegment):void (23 bytes)   relevance-based (relevance=1.000000, probability=0.070788, bonus=1.000000, nodes=67 <= 300.000000)
                                                              @ 4  java.nio.ByteBuffer.wrap(byte[], int, int):ByteBuffer (21 bytes)   relevance-based (relevance=1.000000, probability=0.070788, bonus=1.000000, nodes=68 <= 300.000000)
                            @ 4  java.nio.Buffer.session():MemorySessionImpl (20 bytes)   inline method (bytecode parsing)
                            @ 18  java.nio.HeapByteBuffer.byteOffset(long):long (7 bytes)   inline method (bytecode parsing)
                            @ 25  jdk.internal.misc.ScopedMemoryAccess.getShortUnaligned(MemorySessionImpl, Object, long, boolean):short (18 bytes)   inline method (bytecode parsing)
                              @ 6  jdk.internal.misc.ScopedMemoryAccess.getShortUnalignedInternal(MemorySessionImpl, Object, long, boolean):short (36 bytes)   inline method (bytecode parsing)
                                @ 15  jdk.internal.misc.Unsafe.getShortUnaligned(Object, long, boolean):short (12 bytes)   inline method (bytecode parsing)
                                                                @ 14  java.nio.Buffer.nextGetIndex(int):int (32 bytes)   relevance-based (relevance=1.000000, probability=0.070788, bonus=1.000000, nodes=13 <= 300.000000)
                                                                @ 8  jdk.internal.misc.Unsafe.convEndian(boolean, short):short (16 bytes)   relevance-based (relevance=1.000000, probability=0.070788, bonus=1.000000, nodes=20 <= 300.000000)
                                                              @ 17  java.nio.HeapByteBuffer.getShort():short (29 bytes)   relevance-based (relevance=1.022803, probability=0.070788, bonus=1.000000, nodes=44 <= 300.000000)
                            @ 19  jdk.internal.reflect.ConstantPool.getUTF8At(int):String (10 bytes)   inline method (bytecode parsing)
                            @ 122  sun.reflect.annotation.AnnotationType.memberTypes():Map (5 bytes)   inline accessor method (bytecode parsing)
                            @ 133  sun.reflect.annotation.AnnotationType.memberDefaults():Map (5 bytes)   inline accessor method (bytecode parsing)
                            @ 172  jdk.internal.reflect.ConstantPool.getUTF8At(int):String (10 bytes)   inline method (bytecode parsing)
                            @ 4  java.nio.Buffer.session():MemorySessionImpl (20 bytes)   inline method (bytecode parsing)
                            @ 18  java.nio.HeapByteBuffer.byteOffset(long):long (7 bytes)   inline method (bytecode parsing)
                            @ 25  jdk.internal.misc.ScopedMemoryAccess.getShortUnaligned(MemorySessionImpl, Object, long, boolean):short (18 bytes)   inline method (bytecode parsing)
                              @ 6  jdk.internal.misc.ScopedMemoryAccess.getShortUnalignedInternal(MemorySessionImpl, Object, long, boolean):short (36 bytes)   inline method (bytecode parsing)
                                @ 15  jdk.internal.misc.Unsafe.getShortUnaligned(Object, long, boolean):short (12 bytes)   inline method (bytecode parsing)
                                                                  @ 14  java.nio.Buffer.nextGetIndex(int):int (32 bytes)   relevance-based (relevance=1.000000, probability=0.070788, bonus=1.000000, nodes=13 <= 300.000000)
                                                                  @ 8  jdk.internal.misc.Unsafe.convEndian(boolean, short):short (16 bytes)   relevance-based (relevance=1.000000, probability=0.070788, bonus=1.000000, nodes=20 <= 300.000000)
                                                                @ 1  java.nio.HeapByteBuffer.getShort():short (29 bytes)   relevance-based (relevance=1.000000, probability=0.070788, bonus=1.000000, nodes=44 <= 300.000000)
                 n                                            @ 6  jdk.internal.reflect.ConstantPool.getUTF8At0(Object, int):String (0 bytes)   not inlining it is a non-intrinsic native method
                            @ 14  sun.reflect.generics.parser.SignatureParser.make():SignatureParser (8 bytes)   inline method (bytecode parsing)
                              @ 4  sun.reflect.generics.parser.SignatureParser.<init>():void (5 bytes)   inline method (bytecode parsing)
                            @ 20  sun.reflect.generics.parser.SignatureParser.parseTypeSig(String):TypeSignature (10 bytes)   inline method (bytecode parsing)
                            @ 26  sun.reflect.generics.scope.ClassScope.make(Class):ClassScope (9 bytes)   inline method (bytecode parsing)
                              @ 5  sun.reflect.generics.scope.ClassScope.<init>(Class):void (6 bytes)   inline method (bytecode parsing)
                                @ 2  sun.reflect.generics.scope.AbstractScope.<init>(GenericDeclaration):void (10 bytes)   inline method (bytecode parsing)
                            @ 29  sun.reflect.generics.factory.CoreReflectionFactory.make(GenericDeclaration, Scope):CoreReflectionFactory (10 bytes)   inline method (bytecode parsing)
                            @ 36  sun.reflect.generics.visitor.Reifier.make(GenericsFactory):Reifier (9 bytes)   inline method (bytecode parsing)
                              @ 5  sun.reflect.generics.visitor.Reifier.<init>(GenericsFactory):void (10 bytes)   inline method (bytecode parsing)
                                                                  @ 2  sun.reflect.generics.parser.SignatureParser.init(String):void (16 bytes)   relevance-based (relevance=1.030610, probability=0.070788, bonus=1.000000, nodes=12 <= 300.000000)
                            @ 126  sun.reflect.generics.parser.SignatureParser.parseFieldTypeSignature():FieldTypeSignature (6 bytes)   inline method (bytecode parsing)
                                                                        @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.070788, bonus=1.000000, nodes=5)
                                                                      @ 36  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000000, probability=0.070788, bonus=1.000000, nodes=8)
                                                                        @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=0.070788, bonus=1.000000, nodes=9)
                            @ 3  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                                                                        @ 12  java.lang.StringLatin1.charAt(byte[], int):char (15 bytes)   relevance-based (relevance=1.000000, probability=0.070788, bonus=1.000000, nodes=11 <= 300.000000)
                                                                      @ 50  java.lang.String.charAt(int):char (25 bytes)   relevance-based (relevance=1.000000, probability=0.070788, bonus=1.000000, nodes=16 <= 300.000000)
                                                                    @ 1  sun.reflect.generics.parser.SignatureParser.current():char (59 bytes)   relevance-based (relevance=1.000000, probability=0.070788, bonus=1.000000, nodes=31 <= 300.000000)
                                                                          @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.070788, bonus=1.000000, nodes=5)
                                                                        @ 36  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000000, probability=0.070788, bonus=1.000000, nodes=8)
                                                                          @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=0.070788, bonus=1.000000, nodes=9)
                            @ 3  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                                                                          @ 12  java.lang.StringLatin1.charAt(byte[], int):char (15 bytes)   relevance-based (relevance=1.000000, probability=0.070788, bonus=1.000000, nodes=11 <= 300.000000)
                                                                        @ 50  java.lang.String.charAt(int):char (25 bytes)   relevance-based (relevance=1.000000, probability=0.070788, bonus=1.000000, nodes=16 <= 300.000000)
                                                                      @ 1  sun.reflect.generics.parser.SignatureParser.current():char (59 bytes)   relevance-based (relevance=1.000000, probability=0.070788, bonus=1.000000, nodes=31 <= 300.000000)
                            @ 114  sun.reflect.generics.tree.ClassTypeSignature.make(List):ClassTypeSignature (9 bytes)   inline method (bytecode parsing)
                              @ 5  sun.reflect.generics.tree.ClassTypeSignature.<init>(List):void (10 bytes)   inline method (bytecode parsing)
                                                                            @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.070788, bonus=1.000000, nodes=5)
                                                                          @ 36  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000000, probability=0.070788, bonus=1.000000, nodes=8)
                                                                            @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=0.070788, bonus=1.000000, nodes=9)
                            @ 3  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                                                                            @ 12  java.lang.StringLatin1.charAt(byte[], int):char (15 bytes)   relevance-based (relevance=1.000000, probability=0.070788, bonus=1.000000, nodes=11 <= 300.000000)
                                                                          @ 50  java.lang.String.charAt(int):char (25 bytes)   relevance-based (relevance=1.000000, probability=0.070788, bonus=1.000000, nodes=16 <= 300.000000)
                                                                        @ 24  sun.reflect.generics.parser.SignatureParser.current():char (59 bytes)   relevance-based (relevance=1.000000, probability=0.070788, bonus=1.000000, nodes=31 <= 300.000000)
                                                                            @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.070788, bonus=1.000000, nodes=5)
                                                                          @ 36  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000000, probability=0.070788, bonus=1.000000, nodes=8)
                                                                        @ 40  sun.reflect.generics.parser.SignatureParser.advance():void (53 bytes)   relevance-based (relevance=1.000000, probability=0.070788, bonus=1.000000, nodes=20 <= 300.000000)
                            @ 1  java.util.AbstractList.<init>():void (10 bytes)   inline method (bytecode parsing)
                              @ 1  java.util.AbstractCollection.<init>():void (5 bytes)   inline method (bytecode parsing)
                                                                        @ 48  java.util.ArrayList.<init>(int):void (61 bytes)   relevance-based (relevance=1.000000, probability=0.070788, bonus=1.000000, nodes=12 <= 300.000000)
                                @ 1  java.util.IdentityHashMap.maskNull(Object):Object (12 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=6)
                            @ 1  sun.reflect.generics.parser.SignatureParser.mark():void (9 bytes)   inline method (bytecode parsing)
                                @ 17  java.util.IdentityHashMap.hash(Object, int):int (18 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=15 <= 300.000000)
                            @ 78  sun.reflect.generics.tree.SimpleClassTypeSignature.make(String, boolean, TypeArgument[]):SimpleClassTypeSignature (11 bytes)   inline method (bytecode parsing)
                              @ 7  sun.reflect.generics.tree.SimpleClassTypeSignature.<init>(String, boolean, TypeArgument[]):void (20 bytes)   inline method (bytecode parsing)
                                @ 47  java.util.IdentityHashMap.nextKeyIndex(int, int):int (15 bytes)   trivial (relevance=0.869043, probability=0.869043, bonus=1.000000, nodes=9)
                              @ 5  java.util.IdentityHashMap.containsKey(Object):boolean (55 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=41 <= 300.000000)
                            @ 48  java.lang.Character.isWhitespace(char):boolean (5 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.Character.isWhitespace(int):boolean (9 bytes)   inline method (bytecode parsing)
                                                                                @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.070788, bonus=1.000000, nodes=5)
                                                                              @ 36  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000000, probability=0.070788, bonus=1.000000, nodes=8)
                                                                                @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=0.070788, bonus=1.000000, nodes=9)
                            @ 3  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                                                                                @ 12  java.lang.StringLatin1.charAt(byte[], int):char (15 bytes)   relevance-based (relevance=1.000000, probability=0.070788, bonus=1.000000, nodes=11 <= 300.000000)
                                                                              @ 50  java.lang.String.charAt(int):char (25 bytes)   relevance-based (relevance=1.000000, probability=0.070788, bonus=1.000000, nodes=16 <= 300.000000)
                                                                            @ 1  sun.reflect.generics.parser.SignatureParser.current():char (59 bytes)   relevance-based (relevance=1.000000, probability=0.070788, bonus=1.000000, nodes=31 <= 300.000000)
                                                                            @ 1  java.lang.CharacterData.of(int):CharacterData (136 bytes)   trivial (relevance=1.000000, probability=0.583192, bonus=1.000000, nodes=8)
                                                                              @ 2  java.lang.CharacterDataLatin1.getProperties(int):int (11 bytes)   trivial (relevance=1.000000, probability=0.583192, bonus=1.000000, nodes=8)
                                                                            @ 5  java.lang.CharacterDataLatin1.isWhitespace(int):boolean (23 bytes)   relevance-based (relevance=1.000000, probability=0.583192, bonus=1.000000, nodes=13 <= 300.000000)
                                                                                @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.583192, bonus=1.000000, nodes=5)
                                                                              @ 36  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000000, probability=0.583192, bonus=1.000000, nodes=8)
                                                                            @ 55  sun.reflect.generics.parser.SignatureParser.advance():void (53 bytes)   relevance-based (relevance=1.000000, probability=0.583192, bonus=1.000000, nodes=20 <= 300.000000)
                                                                                @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.583192, bonus=1.000000, nodes=5)
                                                                              @ 36  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000000, probability=0.583192, bonus=1.000000, nodes=8)
                                                                                @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=0.583192, bonus=1.000000, nodes=9)
                            @ 3  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                                                                                @ 12  java.lang.StringLatin1.charAt(byte[], int):char (15 bytes)   relevance-based (relevance=1.000000, probability=0.583192, bonus=1.000000, nodes=11 <= 300.000000)
                                                                              @ 50  java.lang.String.charAt(int):char (25 bytes)   relevance-based (relevance=1.000000, probability=0.583192, bonus=1.000000, nodes=16 <= 300.000000)
                                                                            @ 59  sun.reflect.generics.parser.SignatureParser.current():char (59 bytes)   relevance-based (relevance=1.000000, probability=0.583192, bonus=1.000000, nodes=31 <= 300.000000)
                                                                          @ 5  sun.reflect.generics.parser.SignatureParser.skipIdentifier():void (67 bytes)   relevance-based (relevance=1.000000, probability=0.070788, bonus=1.000000, nodes=105 <= 300.000000)
                                                                              @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.393553, bonus=1.000000, nodes=5)
                                                                            @ 36  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000000, probability=0.393553, bonus=1.000000, nodes=8)
                                                                              @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=0.393553, bonus=1.000000, nodes=9)
                            @ 3  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                                                                              @ 12  java.lang.StringLatin1.charAt(byte[], int):char (15 bytes)   relevance-based (relevance=1.000000, probability=0.393553, bonus=1.000000, nodes=11 <= 300.000000)
                                                                            @ 50  java.lang.String.charAt(int):char (25 bytes)   relevance-based (relevance=1.000000, probability=0.393553, bonus=1.000000, nodes=16 <= 300.000000)
                                                                          @ 9  sun.reflect.generics.parser.SignatureParser.current():char (59 bytes)   relevance-based (relevance=1.219317, probability=0.393553, bonus=1.000000, nodes=31 <= 300.000000)
                                                                                @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.070788, bonus=1.000000, nodes=5)
                                                                              @ 1  java.lang.String.length():int (11 bytes)   trivial (relevance=1.179302, probability=0.070788, bonus=1.000000, nodes=8)
                                                                                @ 6  jdk.internal.util.Preconditions.checkFromToIndex(int, int, int, BiFunction):int (24 bytes)   relevance-based (relevance=1.000000, probability=0.070788, bonus=1.000000, nodes=14 <= 300.000000)
                                                                              @ 8  java.lang.String.checkBoundsBeginEnd(int, int, int):void (11 bytes)   relevance-based (relevance=1.179302, probability=0.070788, bonus=1.000000, nodes=13 <= 300.000000)
                                                                              @ 28  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.098893, probability=0.065961, bonus=1.000000, nodes=9)
                            @ 20  java.lang.String.<init>(byte[], byte):void (15 bytes)   inline method (bytecode parsing)
                            @ 13  java.util.Arrays.copyOfRangeByte(byte[], int, int):byte[] (33 bytes)   inline method (bytecode parsing)
                              @ 2  java.util.Arrays.checkLength(int, int):void (38 bytes)   inline method (bytecode parsing)
                                                                                  @ 24  java.lang.Math.min(int, int):int (11 bytes)   trivial (relevance=1.556665, probability=0.052789, bonus=1.000000, nodes=7)
                                                                                @ 16  java.util.Arrays.copyOfRange(byte[], int, int):byte[] (25 bytes)   relevance-based (relevance=1.000000, probability=0.065934, bonus=1.000000, nodes=44 <= 300.000000)
                                                                              @ 41  java.lang.StringLatin1.newString(byte[], int, int):String (24 bytes)   relevance-based (relevance=1.098811, probability=0.065956, bonus=1.000000, nodes=62 <= 300.000000)
                            @ 31  java.lang.String.<init>(byte[], byte):void (15 bytes)   inline method (bytecode parsing)
                            @ 54  java.lang.String.<init>(byte[], byte):void (15 bytes)   inline method (bytecode parsing)
                                                                              @ 54  java.lang.StringUTF16.newString(byte[], int, int):String (58 bytes)   not inlining relevance-based (relevance=0.000082, probability=0.000005, bonus=1.000000, nodes=41 > 0.024677)
                                                                            @ 12  java.lang.String.substring(int, int):String (58 bytes)   relevance-based (relevance=1.000000, probability=0.070788, bonus=1.000000, nodes=98 <= 300.000000)
                                                                          @ 29  sun.reflect.generics.parser.SignatureParser.markToCurrent():String (16 bytes)   relevance-based (relevance=1.000000, probability=0.070788, bonus=1.000000, nodes=103 <= 300.000000)
                                                                            @ 6  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000139, probability=0.070787, bonus=1.000000, nodes=9)
                            @ 49  java.lang.StringConcatHelper.newArray(long):byte[] (40 bytes)   inline method (bytecode parsing)
                            @ 123  java.lang.String.<init>(byte[], byte):void (15 bytes)   inline method (bytecode parsing)
                                                                            @ 18  java.lang.StringLatin1.replace(byte[], char, char):String (198 bytes)   not inlining too large previous low-level graph (low-level-nodes: 345, relevance=1.000139, probability=0.070787, bonus=1.000000, nodes=96)
                                                                          @ 36  java.lang.String.replace(char, char):String (42 bytes)   relevance-based (relevance=0.999993, probability=0.070787, bonus=1.000000, nodes=19 <= 299.997763)
                                                                              @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=0.999993, probability=0.070787, bonus=1.000000, nodes=5)
                                                                            @ 36  java.lang.String.length():int (11 bytes)   trivial (relevance=0.999993, probability=0.070787, bonus=1.000000, nodes=8)
                                                                              @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=0.999993, probability=0.070787, bonus=1.000000, nodes=9)
                            @ 3  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                                                                              @ 12  java.lang.StringLatin1.charAt(byte[], int):char (15 bytes)   relevance-based (relevance=0.999993, probability=0.070787, bonus=1.000000, nodes=11 <= 299.997763)
                                                                            @ 50  java.lang.String.charAt(int):char (25 bytes)   relevance-based (relevance=0.999993, probability=0.070787, bonus=1.000000, nodes=16 <= 299.997763)
                                                                          @ 41  sun.reflect.generics.parser.SignatureParser.current():char (59 bytes)   relevance-based (relevance=0.999993, probability=0.070787, bonus=1.000000, nodes=31 <= 299.997763)
                                                                        @ 54  sun.reflect.generics.parser.SignatureParser.parsePackageNameAndSimpleClassTypeSignature():SimpleClassTypeSignature (119 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.070788, bonus=1.000000, nodes=311 > 300.000000)
                                                                        @ 57  java.util.ArrayList.add(Object):boolean (25 bytes)   not inlining too large previous low-level graph (low-level-nodes: 472, relevance=1.000000, probability=0.070788, bonus=1.000000, nodes=15)
                                                                              @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.070788, bonus=1.000000, nodes=5)
                                                                            @ 36  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000000, probability=0.070788, bonus=1.000000, nodes=8)
                                                                              @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=0.070788, bonus=1.000000, nodes=9)
                            @ 3  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                                                                              @ 12  java.lang.StringLatin1.charAt(byte[], int):char (15 bytes)   relevance-based (relevance=1.000000, probability=0.070788, bonus=1.000000, nodes=11 <= 300.000000)
                                                                            @ 50  java.lang.String.charAt(int):char (25 bytes)   relevance-based (relevance=1.000000, probability=0.070788, bonus=1.000000, nodes=16 <= 300.000000)
                                                                          @ 1  sun.reflect.generics.parser.SignatureParser.current():char (59 bytes)   relevance-based (relevance=1.000000, probability=0.070788, bonus=1.000000, nodes=31 <= 300.000000)
                                                                        @ 65  sun.reflect.generics.parser.SignatureParser.parseClassTypeSignatureSuffix(List):void (29 bytes)   relevance-based (relevance=1.000000, probability=0.070788, bonus=1.000000, nodes=35 <= 300.000000)
                                                                            @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.070788, bonus=1.000000, nodes=5)
                                                                          @ 36  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000000, probability=0.070788, bonus=1.000000, nodes=8)
                                                                            @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=0.070788, bonus=1.000000, nodes=9)
                            @ 3  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                                                                            @ 12  java.lang.StringLatin1.charAt(byte[], int):char (15 bytes)   relevance-based (relevance=1.000000, probability=0.070788, bonus=1.000000, nodes=11 <= 300.000000)
                                                                          @ 50  java.lang.String.charAt(int):char (25 bytes)   relevance-based (relevance=1.000000, probability=0.070788, bonus=1.000000, nodes=16 <= 300.000000)
                                                                        @ 69  sun.reflect.generics.parser.SignatureParser.current():char (59 bytes)   relevance-based (relevance=1.000000, probability=0.070788, bonus=1.000000, nodes=31 <= 300.000000)
                                                                            @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.070788, bonus=1.000000, nodes=5)
                                                                          @ 36  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000000, probability=0.070788, bonus=1.000000, nodes=8)
                                                                        @ 110  sun.reflect.generics.parser.SignatureParser.advance():void (53 bytes)   relevance-based (relevance=1.000000, probability=0.070788, bonus=1.000000, nodes=20 <= 300.000000)
                                                                      @ 41  sun.reflect.generics.parser.SignatureParser.parseClassTypeSignature():ClassTypeSignature (118 bytes)   relevance-based (relevance=1.000000, probability=0.070788, bonus=1.000000, nodes=144 <= 300.000000)
                                                                    @ 2  sun.reflect.generics.parser.SignatureParser.parseFieldTypeSignature(boolean):FieldTypeSignature (73 bytes)   relevance-based (relevance=1.000000, probability=0.070788, bonus=1.000000, nodes=174 <= 300.000000)
                                                                  @ 6  sun.reflect.generics.parser.SignatureParser.parseTypeSignature():TypeSignature (130 bytes)   relevance-based (relevance=1.030610, probability=0.070788, bonus=1.000000, nodes=205 <= 300.000000)
                                                                  @ 6  sun.reflect.generics.factory.CoreReflectionFactory.<init>(GenericDeclaration, Scope):void (15 bytes)   relevance-based (relevance=1.030610, probability=0.070788, bonus=1.000000, nodes=11 <= 300.000000)
                            @ 1  sun.reflect.generics.tree.ClassTypeSignature.getPath():List (5 bytes)   inline accessor method (bytecode parsing)
                            @ 52  sun.reflect.generics.tree.SimpleClassTypeSignature.getName():String (5 bytes)   inline accessor method (bytecode parsing)
                            @ 55  java.lang.StringBuilder.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                            @ 62  sun.reflect.generics.tree.SimpleClassTypeSignature.getDollar():boolean (5 bytes)   inline accessor method (bytecode parsing)
                            @ 165  sun.reflect.generics.visitor.Reifier.getFactory():GenericsFactory (5 bytes)   inline accessor method (bytecode parsing)
                            @ 170  java.lang.StringBuilder.toString():String (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.String.<init>(StringBuilder):void (7 bytes)   inline method (bytecode parsing)
                            @ 182  sun.reflect.generics.tree.SimpleClassTypeSignature.getTypeArguments():TypeArgument[] (5 bytes)   inline accessor method (bytecode parsing)
                                                                        @ 5  java.util.ArrayList$Itr.<init>(ArrayList):void (26 bytes)   relevance-based (relevance=1.000000, probability=0.070788, bonus=1.000000, nodes=15 <= 300.000000)
                                                                      @ 29  java.util.ArrayList.iterator():Iterator (9 bytes)   relevance-based (relevance=1.000000, probability=0.070788, bonus=1.000000, nodes=16 <= 300.000000)
                                                                        @ 1  java.util.ArrayList$Itr.checkForComodification():void (23 bytes)   trivial (relevance=1.000000, probability=0.070788, bonus=1.000000, nodes=9)
                                                                      @ 36  java.util.ArrayList$Itr.next():Object (66 bytes)   relevance-based (relevance=1.000000, probability=0.070788, bonus=1.000000, nodes=25 <= 300.000000)
                                                                          @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.070788, bonus=1.000000, nodes=5)
                                                                        @ 5  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000000, probability=0.070788, bonus=1.000000, nodes=8)
                                                                        @ 26  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.070788, bonus=1.000000, nodes=5)
                            @ 2  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                                                                          @ 2  java.lang.AbstractStringBuilder.append(String):AbstractStringBuilder (45 bytes)   not inlining too large previous low-level graph (low-level-nodes: 368, relevance=1.000000, probability=0.070788, bonus=1.000000, nodes=23)
                                                                        @ 58  java.lang.StringBuilder.append(String):AbstractStringBuilder (6 bytes)   trivial (relevance=1.000000, probability=0.070788, bonus=1.000000, nodes=9)
                                                                      @ 2  java.lang.AbstractStringBuilder.<init>(String):void (63 bytes)   relevance-based (relevance=1.000000, probability=0.070788, bonus=1.000000, nodes=33 <= 300.000000)
                                                                      @ 68  java.util.ArrayList$Itr.hasNext():boolean (20 bytes)   relevance-based (relevance=1.000000, probability=0.070788, bonus=1.000000, nodes=11 <= 300.000000)
                            @ 5  java.lang.AbstractStringBuilder.getValue():byte[] (5 bytes)   inline accessor method (bytecode parsing)
                                                                      @ 3  java.lang.String.<init>(AbstractStringBuilder, Void):void (99 bytes)   not inlining too large previous low-level graph (low-level-nodes: 376, relevance=1.000000, probability=0.070788, bonus=1.000000, nodes=41)
                            @ 17  java.lang.Class.getClassLoader():ClassLoader (28 bytes)   inline method (bytecode parsing)
                                                                            @ 0  java.lang.System.allowSecurityManager():boolean (13 bytes)   trivial (relevance=1.000769, probability=0.045675, bonus=1.000000, nodes=8)
                                                                          @ 11  java.lang.System.getSecurityManager():SecurityManager (12 bytes)   relevance-based (relevance=1.000000, probability=0.045675, bonus=1.000000, nodes=14 <= 300.000000)
                                                                        @ 3  sun.reflect.generics.factory.CoreReflectionFactory.getDeclsLoader():ClassLoader (85 bytes)   relevance-based (relevance=1.000000, probability=0.070788, bonus=1.000000, nodes=42 <= 300.000000)
                                                                            @ 0  java.lang.System.allowSecurityManager():boolean (13 bytes)   trivial (relevance=1.000769, probability=0.070788, bonus=1.000000, nodes=8)
                                                                          @ 2  java.lang.System.getSecurityManager():SecurityManager (12 bytes)   relevance-based (relevance=1.000000, probability=0.070788, bonus=1.000000, nodes=14 <= 300.000000)
                                                                              @ 0  java.lang.System.allowSecurityManager():boolean (13 bytes)   trivial (relevance=1.000769, probability=0.070788, bonus=1.000000, nodes=8)
                                                                            @ 0  java.lang.System.getSecurityManager():SecurityManager (12 bytes)   relevance-based (relevance=1.000000, probability=0.070788, bonus=1.000000, nodes=14 <= 300.000000)
                 n                                                        @ 37  java.lang.Class.forName0(String, boolean, ClassLoader, Class):Class (0 bytes)   not inlining it is a non-intrinsic native method
                                                                          @ 20  java.lang.Class.forName(String, boolean, ClassLoader, Class):Class (41 bytes)   relevance-based (relevance=1.000769, probability=0.070788, bonus=1.000000, nodes=27 <= 300.000000)
                                                                        @ 6  java.lang.Class.forName(String, boolean, ClassLoader):Class (24 bytes)   relevance-based (relevance=1.551003, probability=0.070788, bonus=1.000000, nodes=44 <= 300.000000)
                                                                      @ 173  sun.reflect.generics.factory.CoreReflectionFactory.makeNamedType(String):Type (21 bytes)   relevance-based (relevance=1.000000, probability=0.070788, bonus=1.000000, nodes=82 <= 300.000000)
                                                                    @ 2  sun.reflect.generics.visitor.Reifier.visitClassTypeSignature(ClassTypeSignature):void (381 bytes)   relevance-based (relevance=1.000000, probability=0.070788, bonus=1.000000, nodes=184 <= 300.000000)
                                                                  @ 44  sun.reflect.generics.tree.ClassTypeSignature.accept(TypeTreeVisitor):void (8 bytes)   relevance-based (relevance=1.030610, probability=0.070788, bonus=1.000000, nodes=185 <= 300.000000)
                                                                @ 27  sun.reflect.annotation.AnnotationParser.parseSig(String, Class):Class (62 bytes)   not inlining relevance-based (relevance=1.000170, probability=0.070788, bonus=1.000000, nodes=456 > 300.000000)
                            @ 0  jdk.internal.access.SharedSecrets.getJavaLangAccess():JavaLangAccess (4 bytes)   inline method (bytecode parsing)
                            @ 1  java.lang.Class.getAnnotationType():AnnotationType (5 bytes)   inline accessor method (bytecode parsing)
                                                                  @ 6  java.lang.System$2.getAnnotationType(Class):AnnotationType (5 bytes)   relevance-based (relevance=1.002802, probability=0.070788, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 17  java.lang.IllegalArgumentException.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  java.lang.RuntimeException.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                                @ 2  java.lang.Exception.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                            @ 27  sun.reflect.annotation.AnnotationType$1.<init>(AnnotationType, Class):void (10 bytes)   inline method (bytecode parsing)
                            @ 30  java.security.AccessController.doPrivileged(PrivilegedAction):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.security.AccessController.executePrivileged(PrivilegedAction, AccessControlContext, Class):Object (65 bytes)   inline method (bytecode parsing)
                                @ 29  sun.reflect.annotation.AnnotationType$1.run():Object (5 bytes)   inline method (bytecode parsing)
                                  @ 1  sun.reflect.annotation.AnnotationType$1.run():Method[] (8 bytes)   inline method (bytecode parsing)
                            @ 59  java.util.HashMap.<init>(int):void (8 bytes)   inline method (bytecode parsing)
                            @ 105  java.lang.reflect.Method.getModifiers():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 116  java.lang.reflect.Method.getModifiers():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 127  java.lang.reflect.Method.isSynthetic():boolean (5 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.reflect.Executable.isSynthetic():boolean (8 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.reflect.Method.getModifiers():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 135  java.lang.reflect.Method.getParameterCount():int (6 bytes)   inline method (bytecode parsing)
                            @ 171  java.lang.reflect.Method.getName():String (5 bytes)   inline accessor method (bytecode parsing)
                            @ 178  java.lang.reflect.Method.getReturnType():Class (5 bytes)   inline accessor method (bytecode parsing)
                            @ 149  java.lang.StringBuilder.<init>():void (7 bytes)   inline method (bytecode parsing)
                            @ 154  java.lang.StringBuilder.append(Object):StringBuilder (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 159  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 162  java.lang.StringBuilder.toString():String (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.String.<init>(StringBuilder):void (7 bytes)   inline method (bytecode parsing)
                            @ 165  java.lang.IllegalArgumentException.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  java.lang.RuntimeException.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                                @ 2  java.lang.Exception.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                            @ 258  jdk.internal.access.SharedSecrets.getJavaLangAccess():JavaLangAccess (4 bytes)   inline method (bytecode parsing)
                                                                  @ 21  sun.reflect.annotation.AnnotationType.<init>(Class):void (361 bytes)   not inlining relevance-based (relevance=0.002802, probability=0.000198, bonus=1.000000, nodes=244 > 0.840650)
                            @ 3  java.lang.Class.casAnnotationType(AnnotationType, AnnotationType):boolean (7 bytes)   inline method (bytecode parsing)
                                                                  @ 29  java.lang.System$2.casAnnotationType(Class, AnnotationType, AnnotationType):boolean (7 bytes)   not inlining relevance-based (relevance=0.002802, probability=0.000198, bonus=1.000000, nodes=13 > 0.840650)
                                                                @ 103  sun.reflect.annotation.AnnotationType.getInstance(Class):AnnotationType (65 bytes)   relevance-based (relevance=1.000170, probability=0.070788, bonus=1.000000, nodes=37 <= 300.000000)
                            @ 1  java.util.AbstractMap.<init>():void (5 bytes)   inline method (bytecode parsing)
                                                                  @ 1  java.util.HashMap.<init>():void (11 bytes)   trivial (relevance=1.000000, probability=0.070788, bonus=1.000000, nodes=8)
                                                                    @ 4  java.util.Map.size():int (0 bytes)   not inlining no type profile exists
                                                                    @ 1  java.util.HashMap.size():int (5 bytes)   relevance-based (relevance=1.637394, probability=0.070788, bonus=1.000000, nodes=13 <= 300.000000)
                                                                    @ 62  java.util.HashMap.tableSizeFor(int):int (32 bytes)   relevance-based (relevance=0.269454, probability=0.015946, bonus=1.000000, nodes=23 <= 80.836093)
                            @ 15  java.util.HashMap$EntrySet.<init>(HashMap):void (10 bytes)   inline method (bytecode parsing)
                              @ 6  java.util.AbstractSet.<init>():void (5 bytes)   inline method (bytecode parsing)
                                @ 1  java.util.AbstractCollection.<init>():void (5 bytes)   inline method (bytecode parsing)
                            @ 21  java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet.<init>(Set):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  java.util.Collections$UnmodifiableSet.<init>(Set):void (6 bytes)   inline method (bytecode parsing)
                                                                    @ 16  java.util.Map.entrySet():Set (0 bytes)   not inlining no type profile exists
                                                                      @ 2  java.util.Collections$UnmodifiableCollection.<init>(Collection):void (22 bytes)   relevance-based (relevance=0.338003, probability=0.005795, bonus=1.000000, nodes=10 <= 101.400946)
                                                                    @ 98  java.util.HashMap.entrySet():Set (27 bytes)   relevance-based (relevance=0.465646, probability=0.027556, bonus=1.000000, nodes=50 <= 139.693709)
                            @ 8  java.util.HashMap$EntryIterator.<init>(HashMap):void (6 bytes)   inline method (bytecode parsing)
                                                                      @ 17  java.util.Collection.iterator():Iterator (0 bytes)   not inlining no type profile exists
                                                                      @ 5  java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1.<init>(Collections$UnmodifiableMap$UnmodifiableEntrySet):void (26 bytes)   relevance-based (relevance=0.338003, probability=0.011590, bonus=1.000000, nodes=15 <= 101.400946)
                                                                      @ 2  java.util.HashMap$HashIterator.<init>(HashMap):void (79 bytes)   not inlining too large previous low-level graph (low-level-nodes: 409, relevance=0.465646, probability=0.015966, bonus=1.000000, nodes=58)
                                                                    @ 103  java.util.HashMap$EntrySet.iterator():Iterator (12 bytes)   relevance-based (relevance=0.465646, probability=0.027556, bonus=1.000000, nodes=26 <= 139.693709)
                                                                      @ 4  java.util.HashMap$HashIterator.hasNext():boolean (13 bytes)   trivial (relevance=0.576359, probability=0.081127, bonus=1.000000, nodes=9)
                                                                    @ 112  java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1.hasNext():boolean (10 bytes)   relevance-based (relevance=0.576359, probability=0.143452, bonus=1.000000, nodes=27 <= 172.907803)
                            @ 1  java.util.HashMap$EntryIterator.next():Map$Entry (5 bytes)   inline method (bytecode parsing)
                                                                      @ 1  java.util.HashMap$HashIterator.nextNode():HashMap$Node (100 bytes)   not inlining too large previous low-level graph (low-level-nodes: 450, relevance=0.443472, probability=0.046358, bonus=1.000000, nodes=53)
                            @ 1  java.util.HashMap$EntryIterator.next():Map$Entry (5 bytes)   inline method (bytecode parsing)
                                                                          @ 1  java.util.HashMap$HashIterator.nextNode():HashMap$Node (100 bytes)   not inlining too large previous low-level graph (low-level-nodes: 450, relevance=0.665208, probability=0.069538, bonus=1.000000, nodes=53)
                                                                        @ 8  java.util.HashMap$EntryIterator.next():Object (5 bytes)   trivial (relevance=0.665208, probability=0.069538, bonus=1.000000, nodes=8)
                            @ 6  java.util.Objects.requireNonNull(Object):Object (14 bytes)   inline method (bytecode parsing)
                                                                        @ 16  java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry.<init>(Map$Entry):void (16 bytes)   trivial (relevance=0.665208, probability=0.069538, bonus=1.000000, nodes=7)
                                                                      @ 1  java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1.next():Map$Entry (20 bytes)   relevance-based (relevance=0.665208, probability=0.069538, bonus=1.000000, nodes=28 <= 199.562441)
                                                                    @ 122  java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1.next():Object (5 bytes)   relevance-based (relevance=0.665208, probability=0.115896, bonus=1.000000, nodes=37 <= 199.562441)
                                                                      @ 4  java.util.HashMap$Node.getKey():Object (5 bytes)   trivial (relevance=0.665208, probability=0.069538, bonus=1.000000, nodes=5)
                                                                    @ 134  java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry.getKey():Object (10 bytes)   relevance-based (relevance=0.665208, probability=0.115896, bonus=1.000000, nodes=19 <= 199.562441)
                                                                      @ 4  java.util.HashMap$Node.getValue():Object (5 bytes)   trivial (relevance=0.665208, probability=0.069538, bonus=1.000000, nodes=5)
                                                                    @ 143  java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry.getValue():Object (10 bytes)   relevance-based (relevance=0.665208, probability=0.115896, bonus=1.000000, nodes=19 <= 199.562441)
                                                                  @ 17  java.util.HashMap.putMapEntries(Map, boolean):void (170 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.070788, bonus=1.000000, nodes=316 > 300.000000)
                                                                @ 136  java.util.LinkedHashMap.<init>(Map):void (21 bytes)   relevance-based (relevance=1.000170, probability=0.070788, bonus=1.000000, nodes=19 <= 300.000000)
                            @ 4  java.nio.Buffer.session():MemorySessionImpl (20 bytes)   inline method (bytecode parsing)
                            @ 18  java.nio.HeapByteBuffer.byteOffset(long):long (7 bytes)   inline method (bytecode parsing)
                            @ 25  jdk.internal.misc.ScopedMemoryAccess.getShortUnaligned(MemorySessionImpl, Object, long, boolean):short (18 bytes)   inline method (bytecode parsing)
                              @ 6  jdk.internal.misc.ScopedMemoryAccess.getShortUnalignedInternal(MemorySessionImpl, Object, long, boolean):short (36 bytes)   inline method (bytecode parsing)
                                @ 15  jdk.internal.misc.Unsafe.getShortUnaligned(Object, long, boolean):short (12 bytes)   inline method (bytecode parsing)
                                                                  @ 14  java.nio.Buffer.nextGetIndex(int):int (32 bytes)   relevance-based (relevance=1.000000, probability=0.070788, bonus=1.000000, nodes=13 <= 300.000000)
                                                                  @ 8  jdk.internal.misc.Unsafe.convEndian(boolean, short):short (16 bytes)   relevance-based (relevance=1.000000, probability=0.070788, bonus=1.000000, nodes=20 <= 300.000000)
                                                                @ 142  java.nio.HeapByteBuffer.getShort():short (29 bytes)   relevance-based (relevance=1.000170, probability=0.070788, bonus=1.000000, nodes=44 <= 300.000000)
                            @ 9  java.security.AccessController.doPrivileged(PrivilegedAction):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.security.AccessController.executePrivileged(PrivilegedAction, AccessControlContext, Class):Object (65 bytes)   inline method (bytecode parsing)
                                @ 29  sun.reflect.annotation.AnnotationParser$1.run():Object (5 bytes)   inline method (bytecode parsing)
                                                                  @ 6  sun.reflect.annotation.AnnotationParser$1.<init>(Class, Map):void (15 bytes)   relevance-based (relevance=1.000000, probability=0.070788, bonus=1.000000, nodes=11 <= 300.000000)
                            @ 4  java.lang.Class.getClassLoader():ClassLoader (28 bytes)   inline method (bytecode parsing)
                                                                      @ 0  java.lang.System.allowSecurityManager():boolean (13 bytes)   trivial (relevance=1.000769, probability=0.045675, bonus=1.000000, nodes=8)
                                                                    @ 11  java.lang.System.getSecurityManager():SecurityManager (12 bytes)   relevance-based (relevance=1.000000, probability=0.045675, bonus=1.000000, nodes=14 <= 300.000000)
                            @ 5  java.lang.Class.getInterfaces():Class[] (6 bytes)   inline method (bytecode parsing)
                            @ 1  java.lang.ref.Reference.get():Object (5 bytes)   inline accessor method (bytecode parsing)
                                                                          @ 15  java.lang.ref.SoftReference.get():Object (29 bytes)   relevance-based (relevance=1.000000, probability=0.070295, bonus=1.000000, nodes=20 <= 300.000000)
                            @ 5  java.lang.Class$ReflectionData.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                                                                          @ 39  java.lang.Class.newReflectionData(SoftReference, int):Class$ReflectionData (66 bytes)   not inlining relevance-based (relevance=0.007162, probability=0.000493, bonus=1.000000, nodes=61 > 2.148563)
                                                                        @ 1  java.lang.Class.reflectionData():Class$ReflectionData (43 bytes)   relevance-based (relevance=1.004912, probability=0.070788, bonus=1.000000, nodes=45 <= 300.000000)
                 n                                                    @ 24  java.lang.Class.getInterfaces0():Class[] (0 bytes)   not inlining it is a non-intrinsic native method
                                                                      @ 2  java.lang.Class.getInterfaces(boolean):Class[] (49 bytes)   relevance-based (relevance=1.000000, probability=0.070788, bonus=1.000000, nodes=75 <= 300.000000)
                                                                      @ 10  java.lang.Class.isAnnotation():boolean (17 bytes)   relevance-based (relevance=1.027724, probability=0.070788, bonus=1.000000, nodes=23 <= 300.000000)
                                                                    @ 30  sun.reflect.annotation.AnnotationInvocationHandler.<init>(Class, Map):void (71 bytes)   relevance-based (relevance=1.551003, probability=0.070788, bonus=1.000000, nodes=116 <= 300.000000)
                            @ 1  java.util.Objects.requireNonNull(Object):Object (14 bytes)   inline method (bytecode parsing)
                                                                        @ 0  java.lang.System.allowSecurityManager():boolean (13 bytes)   trivial (relevance=1.000769, probability=0.070788, bonus=1.000000, nodes=8)
                                                                      @ 5  java.lang.System.getSecurityManager():SecurityManager (12 bytes)   relevance-based (relevance=1.000000, probability=0.070788, bonus=1.000000, nodes=14 <= 300.000000)
                            @ 31  jdk.internal.loader.AbstractClassLoaderValue.sub(Object):AbstractClassLoaderValue$Sub (10 bytes)   inline method (bytecode parsing)
                              @ 6  jdk.internal.loader.AbstractClassLoaderValue$Sub.<init>(AbstractClassLoaderValue, Object):void (15 bytes)   inline method (bytecode parsing)
                                @ 6  jdk.internal.loader.AbstractClassLoaderValue.<init>():void (5 bytes)   inline method (bytecode parsing)
                            @ 35  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object):Object (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.lang.invoke.LambdaForm$MH/0x00007f45e0000800.invoke(Object):Object (8 bytes)   inline method (bytecode parsing)
                            @ 30  java.util.concurrent.ConcurrentHashMap.putIfAbsent(Object, Object):Object (8 bytes)   inline method (bytecode parsing)
                            @ 4  jdk.internal.loader.BootLoader.getClassLoaderValueMap():ConcurrentHashMap (4 bytes)   inline method (bytecode parsing)
                            @ 14  java.lang.System$2.createOrGetClassLoaderValueMap(ClassLoader):ConcurrentHashMap (5 bytes)   inline method (bytecode parsing)
                                                                            @ 1  java.lang.ClassLoader.createOrGetClassLoaderValueMap():ConcurrentHashMap (37 bytes)   trivial (relevance=1.000000, probability=0.070305, bonus=1.000000, nodes=9)
                                                                          @ 1  jdk.internal.loader.AbstractClassLoaderValue.map(ClassLoader):ConcurrentHashMap (20 bytes)   relevance-based (relevance=1.000000, probability=0.070788, bonus=1.000000, nodes=23 <= 300.000000)
                            @ 20  java.util.concurrent.ConcurrentHashMap.spread(int):int (10 bytes)   inline method (bytecode parsing)
                                                                          @ 4  java.util.concurrent.ConcurrentHashMap.putVal(Object, Object, boolean):Object (432 bytes)   not inlining relevance-based (relevance=0.002196, probability=0.000155, bonus=1.000000, nodes=181 > 0.658858)
                            @ 4  java.util.concurrent.ConcurrentHashMap.spread(int):int (10 bytes)   inline method (bytecode parsing)
                            @ 3  jdk.internal.loader.AbstractClassLoaderValue$Sub.parent():AbstractClassLoaderValue (5 bytes)   inline accessor method (bytecode parsing)
                 n                                                            @ 6  java.lang.Object.hashCode():int (0 bytes)   trivial (relevance=1.000000, probability=0.070788, bonus=1.000000, nodes=5)
                            @ 4  java.lang.Long.hashCode(long):int (8 bytes)   inline method (bytecode parsing)
                            @ 17  java.lang.NullPointerException.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  java.lang.RuntimeException.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                                @ 2  java.lang.Exception.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                                                                                  @ 1  jdk.vm.ci.hotspot.HotSpotResolvedJavaMethodImpl.getMethodPointer():long (23 bytes)   not inlining relevance-based (relevance=0.031228, probability=0.002021, bonus=1.000000, nodes=21 > 9.368346)
                                                                                      @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=0.124911, probability=0.000505, bonus=1.000000, nodes=5)
                                                                                    @ 9  java.lang.String.length():int (11 bytes)   trivial (relevance=0.124911, probability=0.000505, bonus=1.000000, nodes=8)
                                                                                  @ 14  java.net.URI.hashIgnoringCase(int, String):int (45 bytes)   not inlining relevance-based (relevance=0.124911, probability=0.001010, bonus=1.000000, nodes=40 > 37.473385)
                            @ 9  java.lang.String.indexOf(int):int (7 bytes)   inline method (bytecode parsing)
                                                                                      @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=0.249823, probability=0.000505, bonus=1.000000, nodes=9)
                                                                                        @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=0.249823, probability=0.000505, bonus=1.000000, nodes=5)
                                                                                      @ 14  java.lang.String.length():int (11 bytes)   trivial (relevance=0.249823, probability=0.000505, bonus=1.000000, nodes=8)
                            @ 11  java.lang.Math.max(int, int):int (11 bytes)   inline method (bytecode parsing)
                                                                                        @ 1  java.lang.StringLatin1.canEncode(int):boolean (13 bytes)   trivial (relevance=0.249828, probability=0.000505, bonus=1.000000, nodes=5)
                                                                                        @ 18  java.lang.Math.min(int, int):int (11 bytes)   trivial (relevance=0.249828, probability=0.000505, bonus=1.000000, nodes=7)
                                                                                      @ 17  java.lang.StringLatin1.indexOf(byte[], int, int, int):int (37 bytes)   relevance-based (relevance=0.249823, probability=0.000505, bonus=1.000000, nodes=18 <= 74.946771)
                                                                                    @ 3  java.lang.String.indexOf(int, int):int (37 bytes)   relevance-based (relevance=0.249823, probability=0.000505, bonus=1.000000, nodes=29 <= 74.946771)
                                                                                  @ 23  java.net.URI.hash(int, String):int (33 bytes)   not inlining relevance-based (relevance=0.124911, probability=0.001010, bonus=1.000000, nodes=58 > 37.473385)
                                                                                  @ 28  java.net.URI.isOpaque():boolean (13 bytes)   trivial (relevance=0.124911, probability=0.001010, bonus=1.000000, nodes=9)
                            @ 9  java.lang.String.indexOf(int):int (7 bytes)   inline method (bytecode parsing)
                                                                                  @ 39  java.net.URI.hash(int, String):int (33 bytes)   not inlining relevance-based (relevance=0.062456, probability=0.000505, bonus=1.000000, nodes=37 > 18.736693)
                            @ 9  java.lang.String.indexOf(int):int (7 bytes)   inline method (bytecode parsing)
                                                                                  @ 51  java.net.URI.hash(int, String):int (33 bytes)   not inlining relevance-based (relevance=0.062456, probability=0.000505, bonus=1.000000, nodes=37 > 18.736693)
                            @ 9  java.lang.String.indexOf(int):int (7 bytes)   inline method (bytecode parsing)
                                                                                  @ 60  java.net.URI.hash(int, String):int (33 bytes)   not inlining relevance-based (relevance=0.062456, probability=0.000505, bonus=1.000000, nodes=37 > 18.736693)
                            @ 9  java.lang.String.indexOf(int):int (7 bytes)   inline method (bytecode parsing)
                                                                                  @ 76  java.net.URI.hash(int, String):int (33 bytes)   not inlining relevance-based (relevance=0.031228, probability=0.000253, bonus=1.000000, nodes=37 > 9.368346)
                                                                                  @ 85  java.net.URI.hashIgnoringCase(int, String):int (45 bytes)   not inlining relevance-based (relevance=0.031228, probability=0.000253, bonus=1.000000, nodes=38 > 9.368346)
                            @ 9  java.lang.String.indexOf(int):int (7 bytes)   inline method (bytecode parsing)
                                                                                  @ 108  java.net.URI.hash(int, String):int (33 bytes)   not inlining relevance-based (relevance=0.031228, probability=0.000253, bonus=1.000000, nodes=37 > 9.368346)
                 n                                                              @ 5  java.lang.Object.hashCode():int (0 bytes)   relevance-based (relevance=1.000000, probability=0.068744, bonus=1.000000, nodes=90 <= 300.000000)
                                                                              @ 14  java.util.Objects.hashCode(Object):int (13 bytes)   relevance-based (relevance=1.000000, probability=0.070788, bonus=1.000000, nodes=105 <= 300.000000)
                                                                            @ 1  jdk.internal.loader.AbstractClassLoaderValue$Sub.hashCode():int (19 bytes)   relevance-based (relevance=3.959160, probability=0.070788, bonus=1.000000, nodes=122 <= 300.000000)
                                                                            @ 34  java.util.concurrent.ConcurrentHashMap.tabAt(ConcurrentHashMap$Node[], int):ConcurrentHashMap$Node (22 bytes)   relevance-based (relevance=1.090921, probability=0.070586, bonus=1.000000, nodes=11 <= 300.000000)
                            @ 22  jdk.internal.loader.AbstractClassLoaderValue$Sub.parent():AbstractClassLoaderValue (5 bytes)   inline accessor method (bytecode parsing)
                            @ 26  jdk.internal.loader.AbstractClassLoaderValue$Sub.parent():AbstractClassLoaderValue (5 bytes)   inline accessor method (bytecode parsing)
                                                                              @ 29  java.lang.Object.equals(Object):boolean (11 bytes)   trivial (relevance=0.276385, probability=0.017883, bonus=1.000000, nodes=9)
                                                                              @ 11  java.lang.Object.equals(Object):boolean (11 bytes)   not inlining no methods remaining after filtering less frequent methods (8 methods previously)
                                                                              @ 43  java.util.Objects.equals(Object, Object):boolean (23 bytes)   relevance-based (relevance=0.276385, probability=0.017883, bonus=1.000000, nodes=24 <= 82.915401)
                                                                            @ 73  jdk.internal.loader.AbstractClassLoaderValue$Sub.equals(Object):boolean (55 bytes)   relevance-based (relevance=0.276385, probability=0.017883, bonus=1.000000, nodes=51 <= 82.915401)
                            @ 22  jdk.internal.loader.AbstractClassLoaderValue$Sub.parent():AbstractClassLoaderValue (5 bytes)   inline accessor method (bytecode parsing)
                            @ 26  jdk.internal.loader.AbstractClassLoaderValue$Sub.parent():AbstractClassLoaderValue (5 bytes)   inline accessor method (bytecode parsing)
                                                                            @ 149  jdk.internal.loader.AbstractClassLoaderValue$Sub.equals(Object):boolean (55 bytes)   not inlining relevance-based (relevance=0.078653, probability=0.003003, bonus=1.000000, nodes=31 > 23.595888)
                                                                          @ 19  java.util.concurrent.ConcurrentHashMap.get(Object):Object (162 bytes)   relevance-based (relevance=1.000000, probability=0.070788, bonus=1.000000, nodes=268 <= 300.000000)
                                                                        @ 40  jdk.internal.loader.AbstractClassLoaderValue.computeIfAbsent(ClassLoader, BiFunction):Object (113 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.070788, bonus=1.000000, nodes=334 > 300.000000)
                                                                      @ 22  java.lang.reflect.Proxy.getProxyConstructor(Class, ClassLoader, Class[]):Constructor (92 bytes)   relevance-based (relevance=1.000769, probability=0.070788, bonus=1.000000, nodes=28 <= 300.000000)
                            @ 21  java.lang.reflect.Constructor.newInstance(Object[]):Object (34 bytes)   inline method (bytecode parsing)
                            @ 35  java.lang.InternalError.<init>(String, Throwable):void (7 bytes)   inline method (bytecode parsing)
                              @ 3  java.lang.VirtualMachineError.<init>(String, Throwable):void (7 bytes)   inline method (bytecode parsing)
                                @ 3  java.lang.Error.<init>(String, Throwable):void (7 bytes)   inline method (bytecode parsing)
                                                                          @ 18  java.lang.reflect.AccessibleObject.checkAccess(Class, Class, Class, int):void (40 bytes)   not inlining relevance-based (relevance=0.066640, probability=0.004423, bonus=1.000000, nodes=38 > 19.991971)
                            @ 14  java.lang.reflect.Constructor.getConstructorAccessor():ConstructorAccessor (5 bytes)   inline accessor method (bytecode parsing)
                            @ 50  java.lang.IllegalArgumentException.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  java.lang.RuntimeException.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                                @ 2  java.lang.Exception.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                            @ 62  jdk.internal.misc.VM.isJavaLangInvokeInited():boolean (4 bytes)   inline method (bytecode parsing)
                                                                          @ 33  java.lang.reflect.Constructor.acquireConstructorAccessor():ConstructorAccessor (75 bytes)   not inlining relevance-based (relevance=0.046166, probability=0.003064, bonus=1.000000, nodes=69 > 13.849859)
                            @ 60  jdk.internal.reflect.DirectConstructorHandleAccessor.invokeImpl(Object[]):Object (103 bytes)   inline method (bytecode parsing)
                              @ 88  java.lang.invoke.LambdaForm$MH/0x00007f45e0003c00.invokeExact_MT(Object, Object, Object, Object, Object):Object (26 bytes)   inline method (bytecode parsing)
                              @ 7  jdk.internal.misc.Unsafe.convEndian(boolean, short):short (16 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=20 <= 300.000000)
                                @ 11  java.lang.invoke.Invokers.checkExactType(MethodHandle, MethodType):void (17 bytes)   inline method (bytecode parsing)
                                  @ 1  java.lang.invoke.MethodHandle.type():MethodType (5 bytes)   inline accessor method (bytecode parsing)
                                @ 15  java.lang.invoke.Invokers.checkCustomized(MethodHandle):void (23 bytes)   inline method (bytecode parsing)
                              @ 69  java.lang.invoke.Invokers$Holder.invokeExact_MT(Object, Object, Object, Object):Object (24 bytes)   inline method (bytecode parsing)
                                @ 10  java.lang.invoke.Invokers.checkExactType(MethodHandle, MethodType):void (17 bytes)   inline method (bytecode parsing)
                                  @ 1  java.lang.invoke.MethodHandle.type():MethodType (5 bytes)   inline accessor method (bytecode parsing)
                                @ 14  java.lang.invoke.Invokers.checkCustomized(MethodHandle):void (23 bytes)   inline method (bytecode parsing)
                              @ 53  java.lang.invoke.Invokers$Holder.invokeExact_MT(Object, Object, Object):Object (23 bytes)   inline method (bytecode parsing)
                                @ 10  java.lang.invoke.Invokers.checkExactType(MethodHandle, MethodType):void (17 bytes)   inline method (bytecode parsing)
                                  @ 1  java.lang.invoke.MethodHandle.type():MethodType (5 bytes)   inline accessor method (bytecode parsing)
                                @ 14  java.lang.invoke.Invokers.checkCustomized(MethodHandle):void (23 bytes)   inline method (bytecode parsing)
                              @ 40  java.lang.invoke.Invokers$Holder.invokeExact_MT(Object, Object):Object (22 bytes)   inline method (bytecode parsing)
                                @ 10  java.lang.invoke.Invokers.checkExactType(MethodHandle, MethodType):void (17 bytes)   inline method (bytecode parsing)
                                  @ 1  java.lang.invoke.MethodHandle.type():MethodType (5 bytes)   inline accessor method (bytecode parsing)
                                @ 14  java.lang.invoke.Invokers.checkCustomized(MethodHandle):void (23 bytes)   inline method (bytecode parsing)
                                                                          @ 19  java.lang.invoke.Invokers.maybeCustomize(MethodHandle):void (5 bytes)   not inlining it is marked non-inlinable
                                                                          @ 19  java.lang.invoke.Invokers.maybeCustomize(MethodHandle):void (5 bytes)   not inlining it is marked non-inlinable
                                                                          @ 19  java.lang.invoke.Invokers.maybeCustomize(MethodHandle):void (5 bytes)   not inlining it is marked non-inlinable
                                                                          @ 19  java.lang.invoke.Invokers.maybeCustomize(MethodHandle):void (5 bytes)   not inlining it is marked non-inlinable
                                                                          @ 41  jdk.internal.reflect.DirectConstructorHandleAccessor.newInstance(Object[]):Object (130 bytes)   relevance-based (relevance=1.066640, probability=0.070788, bonus=1.000000, nodes=140 <= 300.000000)
                                                                        @ 30  java.lang.reflect.Constructor.newInstanceWithCaller(Object[], boolean, Class):Object (51 bytes)   relevance-based (relevance=1.053880, probability=0.070788, bonus=1.000000, nodes=177 <= 300.000000)
                                                                      @ 31  java.lang.reflect.Proxy.newProxyInstance(Class, Constructor, InvocationHandler):Object (75 bytes)   relevance-based (relevance=1.000769, probability=0.070788, bonus=1.000000, nodes=193 <= 300.000000)
                                                                    @ 33  java.lang.reflect.Proxy.newProxyInstance(ClassLoader, Class[], InvocationHandler):Object (35 bytes)   relevance-based (relevance=1.551003, probability=0.070788, bonus=1.000000, nodes=232 <= 300.000000)
                                                                  @ 1  sun.reflect.annotation.AnnotationParser$1.run():Annotation (40 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.070788, bonus=1.000000, nodes=380 > 300.000000)
                                                                @ 271  sun.reflect.annotation.AnnotationParser.annotationForMap(Class, Map):Annotation (16 bytes)   relevance-based (relevance=1.000170, probability=0.070788, bonus=1.000000, nodes=26 <= 300.000000)
                            @ 4  java.nio.Buffer.session():MemorySessionImpl (20 bytes)   inline method (bytecode parsing)
                            @ 18  java.nio.HeapByteBuffer.byteOffset(long):long (7 bytes)   inline method (bytecode parsing)
                            @ 25  jdk.internal.misc.ScopedMemoryAccess.getShortUnaligned(MemorySessionImpl, Object, long, boolean):short (18 bytes)   inline method (bytecode parsing)
                              @ 6  jdk.internal.misc.ScopedMemoryAccess.getShortUnalignedInternal(MemorySessionImpl, Object, long, boolean):short (36 bytes)   inline method (bytecode parsing)
                                @ 15  jdk.internal.misc.Unsafe.getShortUnaligned(Object, long, boolean):short (12 bytes)   inline method (bytecode parsing)
                                                                  @ 14  java.nio.Buffer.nextGetIndex(int):int (32 bytes)   relevance-based (relevance=0.189112, probability=0.013387, bonus=1.000000, nodes=13 <= 56.733524)
                                                                  @ 8  jdk.internal.misc.Unsafe.convEndian(boolean, short):short (16 bytes)   relevance-based (relevance=0.189112, probability=0.013387, bonus=1.000000, nodes=20 <= 56.733524)
                                                                @ 161  java.nio.HeapByteBuffer.getShort():short (29 bytes)   relevance-based (relevance=0.189112, probability=0.013387, bonus=1.000000, nodes=44 <= 56.733524)
                 n                                            @ 6  jdk.internal.reflect.ConstantPool.getUTF8At0(Object, int):String (0 bytes)   not inlining it is a non-intrinsic native method
                                                                  @ 2  java.util.HashMap.getNode(Object):HashMap$Node (150 bytes)   not inlining relevance-based (relevance=0.214294, probability=0.013387, bonus=1.000000, nodes=108 > 64.288217)
                                                                @ 181  java.util.HashMap.get(Object):Object (19 bytes)   relevance-based (relevance=0.189112, probability=0.013387, bonus=1.000000, nodes=19 <= 56.733524)
                            @ 75  sun.reflect.annotation.AnnotationParser.parseAnnotation(ByteBuffer, ConstantPool, Class, boolean):Annotation (9 bytes)   inline method (bytecode parsing)
                            @ 117  java.lang.Class.getInterfaces():Class[] (6 bytes)   inline method (bytecode parsing)
                            @ 190  java.lang.StringBuilder.<init>():void (7 bytes)   inline method (bytecode parsing)
                            @ 201  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 206  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 211  java.lang.StringBuilder.append(Object):StringBuilder (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 216  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 219  java.lang.StringBuilder.toString():String (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.String.<init>(StringBuilder):void (7 bytes)   inline method (bytecode parsing)
                                                                @ 208  sun.reflect.annotation.AnnotationParser.parseMemberValue(Class, ByteBuffer, ConstantPool, Class):Object (230 bytes)   not inlining relevance-based (relevance=0.189112, probability=0.013387, bonus=1.000000, nodes=142 > 56.733524)
                                                                      @ 17  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=0.002894, probability=0.000202, bonus=1.000000, nodes=9)
                                                                      @ 27  java.lang.StringLatin1.hashCode(byte[]):int (52 bytes)   not inlining relevance-based (relevance=0.002892, probability=0.000202, bonus=1.000000, nodes=22 > 0.867706)
                              @ 1  java.nio.Buffer.flip():Buffer (20 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                                      @ 37  java.lang.StringUTF16.hashCode(byte[]):int (52 bytes)   not inlining relevance-based (relevance=0.000001, probability=0.000000, bonus=1.000000, nodes=23 > 0.000438)
                                                                    @ 9  java.lang.String.hashCode():int (60 bytes)   relevance-based (relevance=0.189112, probability=0.013387, bonus=1.000000, nodes=48 <= 56.733524)
                                                                  @ 2  java.util.HashMap.hash(Object):int (20 bytes)   relevance-based (relevance=0.189112, probability=0.013387, bonus=1.000000, nodes=56 <= 56.733524)
                                                                @ 255  java.util.HashMap.put(Object, Object):Object (13 bytes)   not inlining relevance-based (relevance=0.189112, probability=0.013387, bonus=1.000000, nodes=62 > 56.733524)
                                                              @ 41  sun.reflect.annotation.AnnotationParser.parseAnnotation2(ByteBuffer, ConstantPool, Class, boolean, Class[]):Annotation (275 bytes)   relevance-based (relevance=4.000000, probability=0.070788, bonus=1.000000, nodes=256 <= 300.000000)
                                                            @ 12  sun.reflect.annotation.AnnotationParser.parseAnnotations2(byte[], ConstantPool, Class, Class[]):Map (135 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.070788, bonus=1.000000, nodes=405 > 300.000000)
                                                          @ 9  sun.reflect.annotation.AnnotationParser.parseAnnotations(byte[], ConstantPool, Class):Map (37 bytes)   relevance-based (relevance=3.160494, probability=0.107091, bonus=1.000000, nodes=16 <= 300.000000)
                            @ 87  sun.reflect.annotation.AnnotationType.isInherited():boolean (5 bytes)   inline accessor method (bytecode parsing)
                            @ 120  java.lang.Math.min(int, int):int (11 bytes)   inline method (bytecode parsing)
                 n                                          @ 1  java.lang.Class.getRawAnnotations():byte[] (0 bytes)   not inlining it is a non-intrinsic native method
                 n                                          @ 5  java.lang.Class.getConstantPool():ConstantPool (0 bytes)   not inlining it is a non-intrinsic native method
                            @ 4  java.util.Collections.emptyMap():Map (4 bytes)   inline method (bytecode parsing)
                            @ 10  java.nio.ByteBuffer.wrap(byte[]):ByteBuffer (8 bytes)   inline method (bytecode parsing)
                            @ 65  sun.reflect.annotation.AnnotationType.retention():RetentionPolicy (5 bytes)   inline accessor method (bytecode parsing)
                            @ 1  java.util.AbstractMap.<init>():void (5 bytes)   inline method (bytecode parsing)
                                                                    @ 1  java.util.HashMap.<init>():void (11 bytes)   trivial (relevance=1.000000, probability=0.042473, bonus=1.000000, nodes=8)
                                                                  @ 4  java.util.LinkedHashMap.<init>():void (15 bytes)   relevance-based (relevance=1.000000, probability=0.042473, bonus=1.000000, nodes=15 <= 300.000000)
                            @ 17  java.nio.ByteOrder.nativeOrder():ByteOrder (4 bytes)   inline method (bytecode parsing)
                                                                              @ 2  java.nio.Buffer.limit(int):Buffer (65 bytes)   relevance-based (relevance=1.000000, probability=0.042473, bonus=1.000000, nodes=24 <= 300.000000)
                                                                            @ 2  java.nio.ByteBuffer.limit(int):ByteBuffer (8 bytes)   relevance-based (relevance=1.000000, probability=0.042473, bonus=1.000000, nodes=25 <= 300.000000)
                                                                          @ 39  java.nio.ByteBuffer.limit(int):Buffer (6 bytes)   relevance-based (relevance=1.000000, probability=0.042473, bonus=1.000000, nodes=26 <= 300.000000)
                                                                              @ 2  java.nio.Buffer.position(int):Buffer (52 bytes)   relevance-based (relevance=1.000000, probability=0.042473, bonus=1.000000, nodes=14 <= 300.000000)
                                                                            @ 2  java.nio.ByteBuffer.position(int):ByteBuffer (8 bytes)   relevance-based (relevance=1.000000, probability=0.042473, bonus=1.000000, nodes=15 <= 300.000000)
                                                                          @ 45  java.nio.ByteBuffer.position(int):Buffer (6 bytes)   relevance-based (relevance=1.022803, probability=0.042473, bonus=1.000000, nodes=16 <= 300.000000)
                                                                        @ 8  java.nio.Buffer.<init>(int, int, int, int, MemorySegment):void (105 bytes)   relevance-based (relevance=1.000000, probability=0.042473, bonus=1.000000, nodes=52 <= 300.000000)
                            @ 6  java.util.ArrayList$ListItr.<init>(ArrayList, int):void (16 bytes)   inline method (bytecode parsing)
                                                                      @ 12  java.nio.ByteBuffer.<init>(int, int, int, int, byte[], int, MemorySegment):void (47 bytes)   relevance-based (relevance=1.000000, probability=0.042473, bonus=1.000000, nodes=63 <= 300.000000)
                                                                    @ 8  java.nio.HeapByteBuffer.<init>(byte[], int, int, MemorySegment):void (23 bytes)   relevance-based (relevance=1.000000, probability=0.042473, bonus=1.000000, nodes=67 <= 300.000000)
                                                                  @ 4  java.nio.ByteBuffer.wrap(byte[], int, int):ByteBuffer (21 bytes)   relevance-based (relevance=1.000000, probability=0.042473, bonus=1.000000, nodes=68 <= 300.000000)
                            @ 4  java.nio.Buffer.session():MemorySessionImpl (20 bytes)   inline method (bytecode parsing)
                            @ 18  java.nio.HeapByteBuffer.byteOffset(long):long (7 bytes)   inline method (bytecode parsing)
                            @ 25  jdk.internal.misc.ScopedMemoryAccess.getShortUnaligned(MemorySessionImpl, Object, long, boolean):short (18 bytes)   inline method (bytecode parsing)
                              @ 6  jdk.internal.misc.ScopedMemoryAccess.getShortUnalignedInternal(MemorySessionImpl, Object, long, boolean):short (36 bytes)   inline method (bytecode parsing)
                                @ 15  jdk.internal.misc.Unsafe.getShortUnaligned(Object, long, boolean):short (12 bytes)   inline method (bytecode parsing)
                                                                    @ 14  java.nio.Buffer.nextGetIndex(int):int (32 bytes)   relevance-based (relevance=1.000000, probability=0.042473, bonus=1.000000, nodes=13 <= 300.000000)
                              @ 7  java.util.ArrayList$Itr.<init>(ArrayList):void (26 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=15 <= 300.000000)
                                                                    @ 8  jdk.internal.misc.Unsafe.convEndian(boolean, short):short (16 bytes)   relevance-based (relevance=1.000000, probability=0.042473, bonus=1.000000, nodes=20 <= 300.000000)
                                                                  @ 17  java.nio.HeapByteBuffer.getShort():short (29 bytes)   relevance-based (relevance=1.022803, probability=0.042473, bonus=1.000000, nodes=44 <= 300.000000)
                            @ 19  jdk.internal.reflect.ConstantPool.getUTF8At(int):String (10 bytes)   inline method (bytecode parsing)
                            @ 122  sun.reflect.annotation.AnnotationType.memberTypes():Map (5 bytes)   inline accessor method (bytecode parsing)
                            @ 133  sun.reflect.annotation.AnnotationType.memberDefaults():Map (5 bytes)   inline accessor method (bytecode parsing)
                            @ 172  jdk.internal.reflect.ConstantPool.getUTF8At(int):String (10 bytes)   inline method (bytecode parsing)
                            @ 4  java.nio.Buffer.session():MemorySessionImpl (20 bytes)   inline method (bytecode parsing)
                            @ 18  java.nio.HeapByteBuffer.byteOffset(long):long (7 bytes)   inline method (bytecode parsing)
                            @ 25  jdk.internal.misc.ScopedMemoryAccess.getShortUnaligned(MemorySessionImpl, Object, long, boolean):short (18 bytes)   inline method (bytecode parsing)
                              @ 6  jdk.internal.misc.ScopedMemoryAccess.getShortUnalignedInternal(MemorySessionImpl, Object, long, boolean):short (36 bytes)   inline method (bytecode parsing)
                                @ 15  jdk.internal.misc.Unsafe.getShortUnaligned(Object, long, boolean):short (12 bytes)   inline method (bytecode parsing)
                                                                      @ 14  java.nio.Buffer.nextGetIndex(int):int (32 bytes)   relevance-based (relevance=1.000000, probability=0.042473, bonus=1.000000, nodes=13 <= 300.000000)
                                                                      @ 8  jdk.internal.misc.Unsafe.convEndian(boolean, short):short (16 bytes)   relevance-based (relevance=1.000000, probability=0.042473, bonus=1.000000, nodes=20 <= 300.000000)
                                                                    @ 1  java.nio.HeapByteBuffer.getShort():short (29 bytes)   relevance-based (relevance=1.000000, probability=0.042473, bonus=1.000000, nodes=44 <= 300.000000)
                 n                                                @ 6  jdk.internal.reflect.ConstantPool.getUTF8At0(Object, int):String (0 bytes)   not inlining it is a non-intrinsic native method
                            @ 14  sun.reflect.generics.parser.SignatureParser.make():SignatureParser (8 bytes)   inline method (bytecode parsing)
                              @ 4  sun.reflect.generics.parser.SignatureParser.<init>():void (5 bytes)   inline method (bytecode parsing)
                            @ 20  sun.reflect.generics.parser.SignatureParser.parseTypeSig(String):TypeSignature (10 bytes)   inline method (bytecode parsing)
                            @ 26  sun.reflect.generics.scope.ClassScope.make(Class):ClassScope (9 bytes)   inline method (bytecode parsing)
                              @ 5  sun.reflect.generics.scope.ClassScope.<init>(Class):void (6 bytes)   inline method (bytecode parsing)
                                @ 2  sun.reflect.generics.scope.AbstractScope.<init>(GenericDeclaration):void (10 bytes)   inline method (bytecode parsing)
                            @ 29  sun.reflect.generics.factory.CoreReflectionFactory.make(GenericDeclaration, Scope):CoreReflectionFactory (10 bytes)   inline method (bytecode parsing)
                            @ 36  sun.reflect.generics.visitor.Reifier.make(GenericsFactory):Reifier (9 bytes)   inline method (bytecode parsing)
                              @ 5  sun.reflect.generics.visitor.Reifier.<init>(GenericsFactory):void (10 bytes)   inline method (bytecode parsing)
                                                                      @ 2  sun.reflect.generics.parser.SignatureParser.init(String):void (16 bytes)   relevance-based (relevance=1.030610, probability=0.042473, bonus=1.000000, nodes=12 <= 300.000000)
                            @ 126  sun.reflect.generics.parser.SignatureParser.parseFieldTypeSignature():FieldTypeSignature (6 bytes)   inline method (bytecode parsing)
                                                                            @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.042473, bonus=1.000000, nodes=5)
                                                                          @ 36  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000000, probability=0.042473, bonus=1.000000, nodes=8)
                                                                            @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=0.042473, bonus=1.000000, nodes=9)
                            @ 3  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                                                                            @ 12  java.lang.StringLatin1.charAt(byte[], int):char (15 bytes)   relevance-based (relevance=1.000000, probability=0.042473, bonus=1.000000, nodes=11 <= 300.000000)
                                                                          @ 50  java.lang.String.charAt(int):char (25 bytes)   relevance-based (relevance=1.000000, probability=0.042473, bonus=1.000000, nodes=16 <= 300.000000)
                                                                        @ 1  sun.reflect.generics.parser.SignatureParser.current():char (59 bytes)   relevance-based (relevance=1.000000, probability=0.042473, bonus=1.000000, nodes=31 <= 300.000000)
                                                                              @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.042473, bonus=1.000000, nodes=5)
                                                                            @ 36  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000000, probability=0.042473, bonus=1.000000, nodes=8)
                                                                              @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=0.042473, bonus=1.000000, nodes=9)
                            @ 3  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                                                                              @ 12  java.lang.StringLatin1.charAt(byte[], int):char (15 bytes)   relevance-based (relevance=1.000000, probability=0.042473, bonus=1.000000, nodes=11 <= 300.000000)
                                                                            @ 50  java.lang.String.charAt(int):char (25 bytes)   relevance-based (relevance=1.000000, probability=0.042473, bonus=1.000000, nodes=16 <= 300.000000)
                                                                          @ 1  sun.reflect.generics.parser.SignatureParser.current():char (59 bytes)   relevance-based (relevance=1.000000, probability=0.042473, bonus=1.000000, nodes=31 <= 300.000000)
                            @ 114  sun.reflect.generics.tree.ClassTypeSignature.make(List):ClassTypeSignature (9 bytes)   inline method (bytecode parsing)
                              @ 5  sun.reflect.generics.tree.ClassTypeSignature.<init>(List):void (10 bytes)   inline method (bytecode parsing)
                                                                                @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.042473, bonus=1.000000, nodes=5)
                                                                              @ 36  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000000, probability=0.042473, bonus=1.000000, nodes=8)
                                                                                @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=0.042473, bonus=1.000000, nodes=9)
                            @ 3  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                                                                                @ 12  java.lang.StringLatin1.charAt(byte[], int):char (15 bytes)   relevance-based (relevance=1.000000, probability=0.042473, bonus=1.000000, nodes=11 <= 300.000000)
                                                                              @ 50  java.lang.String.charAt(int):char (25 bytes)   relevance-based (relevance=1.000000, probability=0.042473, bonus=1.000000, nodes=16 <= 300.000000)
                                                                            @ 24  sun.reflect.generics.parser.SignatureParser.current():char (59 bytes)   relevance-based (relevance=1.000000, probability=0.042473, bonus=1.000000, nodes=31 <= 300.000000)
                                                                                @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.042473, bonus=1.000000, nodes=5)
                                                                              @ 36  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000000, probability=0.042473, bonus=1.000000, nodes=8)
                                                                            @ 40  sun.reflect.generics.parser.SignatureParser.advance():void (53 bytes)   relevance-based (relevance=1.000000, probability=0.042473, bonus=1.000000, nodes=20 <= 300.000000)
                            @ 1  java.util.AbstractList.<init>():void (10 bytes)   inline method (bytecode parsing)
                              @ 1  java.util.AbstractCollection.<init>():void (5 bytes)   inline method (bytecode parsing)
                                                                            @ 48  java.util.ArrayList.<init>(int):void (61 bytes)   relevance-based (relevance=1.000000, probability=0.042473, bonus=1.000000, nodes=12 <= 300.000000)
                            @ 1  sun.reflect.generics.parser.SignatureParser.mark():void (9 bytes)   inline method (bytecode parsing)
                            @ 78  sun.reflect.generics.tree.SimpleClassTypeSignature.make(String, boolean, TypeArgument[]):SimpleClassTypeSignature (11 bytes)   inline method (bytecode parsing)
                              @ 7  sun.reflect.generics.tree.SimpleClassTypeSignature.<init>(String, boolean, TypeArgument[]):void (20 bytes)   inline method (bytecode parsing)
                            @ 48  java.lang.Character.isWhitespace(char):boolean (5 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.Character.isWhitespace(int):boolean (9 bytes)   inline method (bytecode parsing)
                                                                                    @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.042473, bonus=1.000000, nodes=5)
                                                                                  @ 36  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000000, probability=0.042473, bonus=1.000000, nodes=8)
                                                                                    @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=0.042473, bonus=1.000000, nodes=9)
                            @ 3  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                              @ 8  jdk.internal.misc.Unsafe.convEndian(boolean, int):int (16 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=16 <= 300.000000)
                                                                                    @ 12  java.lang.StringLatin1.charAt(byte[], int):char (15 bytes)   relevance-based (relevance=1.000000, probability=0.042473, bonus=1.000000, nodes=11 <= 300.000000)
                                                                                  @ 50  java.lang.String.charAt(int):char (25 bytes)   relevance-based (relevance=1.000000, probability=0.042473, bonus=1.000000, nodes=16 <= 300.000000)
                                                                                @ 1  sun.reflect.generics.parser.SignatureParser.current():char (59 bytes)   relevance-based (relevance=1.000000, probability=0.042473, bonus=1.000000, nodes=31 <= 300.000000)
                                                                                @ 1  java.lang.CharacterData.of(int):CharacterData (136 bytes)   trivial (relevance=1.000000, probability=0.349915, bonus=1.000000, nodes=8)
                                                                                  @ 2  java.lang.CharacterDataLatin1.getProperties(int):int (11 bytes)   trivial (relevance=1.000000, probability=0.349915, bonus=1.000000, nodes=8)
                                                                                @ 5  java.lang.CharacterDataLatin1.isWhitespace(int):boolean (23 bytes)   relevance-based (relevance=1.000000, probability=0.349915, bonus=1.000000, nodes=13 <= 300.000000)
                                                                                    @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.349915, bonus=1.000000, nodes=5)
                                                                                  @ 36  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000000, probability=0.349915, bonus=1.000000, nodes=8)
                                                                                @ 55  sun.reflect.generics.parser.SignatureParser.advance():void (53 bytes)   relevance-based (relevance=1.000000, probability=0.349915, bonus=1.000000, nodes=20 <= 300.000000)
                                                                                    @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.349915, bonus=1.000000, nodes=5)
                                                                                  @ 36  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000000, probability=0.349915, bonus=1.000000, nodes=8)
                                                                                    @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=0.349915, bonus=1.000000, nodes=9)
                            @ 3  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                                                                                    @ 12  java.lang.StringLatin1.charAt(byte[], int):char (15 bytes)   relevance-based (relevance=1.000000, probability=0.349915, bonus=1.000000, nodes=11 <= 300.000000)
                                                                                  @ 50  java.lang.String.charAt(int):char (25 bytes)   relevance-based (relevance=1.000000, probability=0.349915, bonus=1.000000, nodes=16 <= 300.000000)
                                                                                @ 59  sun.reflect.generics.parser.SignatureParser.current():char (59 bytes)   relevance-based (relevance=1.000000, probability=0.349915, bonus=1.000000, nodes=31 <= 300.000000)
                                                                              @ 5  sun.reflect.generics.parser.SignatureParser.skipIdentifier():void (67 bytes)   relevance-based (relevance=1.000000, probability=0.042473, bonus=1.000000, nodes=105 <= 300.000000)
                                                                                  @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.236132, bonus=1.000000, nodes=5)
                                                                                @ 36  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000000, probability=0.236132, bonus=1.000000, nodes=8)
                                                                                  @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=0.236132, bonus=1.000000, nodes=9)
                            @ 3  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                                                                                  @ 12  java.lang.StringLatin1.charAt(byte[], int):char (15 bytes)   relevance-based (relevance=1.000000, probability=0.236132, bonus=1.000000, nodes=11 <= 300.000000)
                                                                                @ 50  java.lang.String.charAt(int):char (25 bytes)   relevance-based (relevance=1.000000, probability=0.236132, bonus=1.000000, nodes=16 <= 300.000000)
                                                                              @ 9  sun.reflect.generics.parser.SignatureParser.current():char (59 bytes)   relevance-based (relevance=1.219317, probability=0.236132, bonus=1.000000, nodes=31 <= 300.000000)
                                                                                    @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.042473, bonus=1.000000, nodes=5)
                                                                                  @ 1  java.lang.String.length():int (11 bytes)   trivial (relevance=1.179302, probability=0.042473, bonus=1.000000, nodes=8)
                                                                                    @ 6  jdk.internal.util.Preconditions.checkFromToIndex(int, int, int, BiFunction):int (24 bytes)   relevance-based (relevance=1.000000, probability=0.042473, bonus=1.000000, nodes=14 <= 300.000000)
                                                                                  @ 8  java.lang.String.checkBoundsBeginEnd(int, int, int):void (11 bytes)   relevance-based (relevance=1.179302, probability=0.042473, bonus=1.000000, nodes=13 <= 300.000000)
                                                                                  @ 28  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.098893, probability=0.039577, bonus=1.000000, nodes=9)
                            @ 20  java.lang.String.<init>(byte[], byte):void (15 bytes)   inline method (bytecode parsing)
                            @ 13  java.util.Arrays.copyOfRangeByte(byte[], int, int):byte[] (33 bytes)   inline method (bytecode parsing)
                              @ 2  java.util.Arrays.checkLength(int, int):void (38 bytes)   inline method (bytecode parsing)
                                                                                      @ 24  java.lang.Math.min(int, int):int (11 bytes)   trivial (relevance=1.556665, probability=0.031673, bonus=1.000000, nodes=7)
                                                                                    @ 16  java.util.Arrays.copyOfRange(byte[], int, int):byte[] (25 bytes)   relevance-based (relevance=1.000000, probability=0.039560, bonus=1.000000, nodes=44 <= 300.000000)
                                                                                  @ 41  java.lang.StringLatin1.newString(byte[], int, int):String (24 bytes)   relevance-based (relevance=1.098811, probability=0.039574, bonus=1.000000, nodes=62 <= 300.000000)
                            @ 31  java.lang.String.<init>(byte[], byte):void (15 bytes)   inline method (bytecode parsing)
                            @ 54  java.lang.String.<init>(byte[], byte):void (15 bytes)   inline method (bytecode parsing)
                                                                                  @ 54  java.lang.StringUTF16.newString(byte[], int, int):String (58 bytes)   not inlining relevance-based (relevance=0.000082, probability=0.000003, bonus=1.000000, nodes=41 > 0.024677)
                                                                                @ 12  java.lang.String.substring(int, int):String (58 bytes)   relevance-based (relevance=1.000000, probability=0.042473, bonus=1.000000, nodes=98 <= 300.000000)
                                                                              @ 29  sun.reflect.generics.parser.SignatureParser.markToCurrent():String (16 bytes)   relevance-based (relevance=1.000000, probability=0.042473, bonus=1.000000, nodes=103 <= 300.000000)
                                                                                @ 6  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000139, probability=0.042472, bonus=1.000000, nodes=9)
                            @ 49  java.lang.StringConcatHelper.newArray(long):byte[] (40 bytes)   inline method (bytecode parsing)
                            @ 123  java.lang.String.<init>(byte[], byte):void (15 bytes)   inline method (bytecode parsing)
                                @ 12  java.lang.Integer.getChars(int, int, byte[]):int (121 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=80 <= 300.000000)
                                                                                @ 18  java.lang.StringLatin1.replace(byte[], char, char):String (198 bytes)   not inlining too large previous low-level graph (low-level-nodes: 345, relevance=1.000139, probability=0.042472, bonus=1.000000, nodes=96)
                                                                              @ 36  java.lang.String.replace(char, char):String (42 bytes)   relevance-based (relevance=0.999993, probability=0.042472, bonus=1.000000, nodes=19 <= 299.997763)
                              @ 3  java.lang.StringConcatHelper.prepend(long, byte[], int):long (30 bytes)   relevance-based (relevance=1.004954, probability=1.000000, bonus=1.000000, nodes=86 <= 300.000000)
                                                                                  @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=0.999993, probability=0.042472, bonus=1.000000, nodes=5)
                                                                                @ 36  java.lang.String.length():int (11 bytes)   trivial (relevance=0.999993, probability=0.042472, bonus=1.000000, nodes=8)
                                  @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.995071, bonus=1.000000, nodes=5)
                                @ 2  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000000, probability=0.995071, bonus=1.000000, nodes=8)
                                                                                  @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=0.999993, probability=0.042472, bonus=1.000000, nodes=9)
                            @ 3  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                                                                                  @ 12  java.lang.StringLatin1.charAt(byte[], int):char (15 bytes)   relevance-based (relevance=0.999993, probability=0.042472, bonus=1.000000, nodes=11 <= 299.997763)
                                                                                @ 50  java.lang.String.charAt(int):char (25 bytes)   relevance-based (relevance=0.999993, probability=0.042472, bonus=1.000000, nodes=16 <= 299.997763)
                                  @ 1  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.006372, probability=0.995071, bonus=1.000000, nodes=5)
                                                                              @ 41  sun.reflect.generics.parser.SignatureParser.current():char (59 bytes)   relevance-based (relevance=0.999993, probability=0.042472, bonus=1.000000, nodes=31 <= 299.997763)
                                @ 21  java.lang.String.getBytes(byte[], int, byte):void (44 bytes)   relevance-based (relevance=1.000000, probability=0.995071, bonus=1.000000, nodes=51 <= 300.000000)
                                                                            @ 54  sun.reflect.generics.parser.SignatureParser.parsePackageNameAndSimpleClassTypeSignature():SimpleClassTypeSignature (119 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.042473, bonus=1.000000, nodes=311 > 300.000000)
                              @ 16  java.lang.StringConcatHelper.prepend(long, byte[], String):long (37 bytes)   relevance-based (relevance=1.076237, probability=0.995071, bonus=1.000000, nodes=64 <= 300.000000)
                                                                            @ 57  java.util.ArrayList.add(Object):boolean (25 bytes)   not inlining too large previous low-level graph (low-level-nodes: 472, relevance=1.000000, probability=0.042473, bonus=1.000000, nodes=15)
                                                                                  @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.042473, bonus=1.000000, nodes=5)
                                                                                @ 36  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000000, probability=0.042473, bonus=1.000000, nodes=8)
                                                                                  @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=0.042473, bonus=1.000000, nodes=9)
                            @ 3  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                                                                                  @ 12  java.lang.StringLatin1.charAt(byte[], int):char (15 bytes)   relevance-based (relevance=1.000000, probability=0.042473, bonus=1.000000, nodes=11 <= 300.000000)
                                                                                @ 50  java.lang.String.charAt(int):char (25 bytes)   relevance-based (relevance=1.000000, probability=0.042473, bonus=1.000000, nodes=16 <= 300.000000)
                                                                              @ 1  sun.reflect.generics.parser.SignatureParser.current():char (59 bytes)   relevance-based (relevance=1.000000, probability=0.042473, bonus=1.000000, nodes=31 <= 300.000000)
                                                                            @ 65  sun.reflect.generics.parser.SignatureParser.parseClassTypeSignatureSuffix(List):void (29 bytes)   relevance-based (relevance=1.000000, probability=0.042473, bonus=1.000000, nodes=35 <= 300.000000)
                                                                                @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.042473, bonus=1.000000, nodes=5)
                                                                              @ 36  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000000, probability=0.042473, bonus=1.000000, nodes=8)
                                                                                @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=0.042473, bonus=1.000000, nodes=9)
                            @ 3  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                                                                                @ 12  java.lang.StringLatin1.charAt(byte[], int):char (15 bytes)   relevance-based (relevance=1.000000, probability=0.042473, bonus=1.000000, nodes=11 <= 300.000000)
                                                                              @ 50  java.lang.String.charAt(int):char (25 bytes)   relevance-based (relevance=1.000000, probability=0.042473, bonus=1.000000, nodes=16 <= 300.000000)
                                                                            @ 69  sun.reflect.generics.parser.SignatureParser.current():char (59 bytes)   relevance-based (relevance=1.000000, probability=0.042473, bonus=1.000000, nodes=31 <= 300.000000)
                                                                                @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.042473, bonus=1.000000, nodes=5)
                                                                              @ 36  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000000, probability=0.042473, bonus=1.000000, nodes=8)
                                                                            @ 110  sun.reflect.generics.parser.SignatureParser.advance():void (53 bytes)   relevance-based (relevance=1.000000, probability=0.042473, bonus=1.000000, nodes=20 <= 300.000000)
                                                                          @ 41  sun.reflect.generics.parser.SignatureParser.parseClassTypeSignature():ClassTypeSignature (118 bytes)   relevance-based (relevance=1.000000, probability=0.042473, bonus=1.000000, nodes=144 <= 300.000000)
                                                                        @ 2  sun.reflect.generics.parser.SignatureParser.parseFieldTypeSignature(boolean):FieldTypeSignature (73 bytes)   relevance-based (relevance=1.000000, probability=0.042473, bonus=1.000000, nodes=174 <= 300.000000)
                                                                      @ 6  sun.reflect.generics.parser.SignatureParser.parseTypeSignature():TypeSignature (130 bytes)   relevance-based (relevance=1.030610, probability=0.042473, bonus=1.000000, nodes=205 <= 300.000000)
                                                                      @ 6  sun.reflect.generics.factory.CoreReflectionFactory.<init>(GenericDeclaration, Scope):void (15 bytes)   relevance-based (relevance=1.030610, probability=0.042473, bonus=1.000000, nodes=11 <= 300.000000)
                            @ 1  sun.reflect.generics.tree.ClassTypeSignature.getPath():List (5 bytes)   inline accessor method (bytecode parsing)
                            @ 52  sun.reflect.generics.tree.SimpleClassTypeSignature.getName():String (5 bytes)   inline accessor method (bytecode parsing)
                            @ 55  java.lang.StringBuilder.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                            @ 62  sun.reflect.generics.tree.SimpleClassTypeSignature.getDollar():boolean (5 bytes)   inline accessor method (bytecode parsing)
                            @ 165  sun.reflect.generics.visitor.Reifier.getFactory():GenericsFactory (5 bytes)   inline accessor method (bytecode parsing)
                            @ 170  java.lang.StringBuilder.toString():String (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.String.<init>(StringBuilder):void (7 bytes)   inline method (bytecode parsing)
                            @ 182  sun.reflect.generics.tree.SimpleClassTypeSignature.getTypeArguments():TypeArgument[] (5 bytes)   inline accessor method (bytecode parsing)
                                                                            @ 5  java.util.ArrayList$Itr.<init>(ArrayList):void (26 bytes)   relevance-based (relevance=1.000000, probability=0.042473, bonus=1.000000, nodes=15 <= 300.000000)
                                                                          @ 29  java.util.ArrayList.iterator():Iterator (9 bytes)   relevance-based (relevance=1.000000, probability=0.042473, bonus=1.000000, nodes=16 <= 300.000000)
                                                                            @ 1  java.util.ArrayList$Itr.checkForComodification():void (23 bytes)   trivial (relevance=1.000000, probability=0.042473, bonus=1.000000, nodes=9)
                                                                          @ 36  java.util.ArrayList$Itr.next():Object (66 bytes)   relevance-based (relevance=1.000000, probability=0.042473, bonus=1.000000, nodes=25 <= 300.000000)
                                                                              @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.042473, bonus=1.000000, nodes=5)
                                                                            @ 5  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000000, probability=0.042473, bonus=1.000000, nodes=8)
                                                                            @ 26  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.042473, bonus=1.000000, nodes=5)
                            @ 2  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                                                                              @ 2  java.lang.AbstractStringBuilder.append(String):AbstractStringBuilder (45 bytes)   not inlining too large previous low-level graph (low-level-nodes: 368, relevance=1.000000, probability=0.042473, bonus=1.000000, nodes=23)
                                                                            @ 58  java.lang.StringBuilder.append(String):AbstractStringBuilder (6 bytes)   trivial (relevance=1.000000, probability=0.042473, bonus=1.000000, nodes=9)
                                                                          @ 2  java.lang.AbstractStringBuilder.<init>(String):void (63 bytes)   relevance-based (relevance=1.000000, probability=0.042473, bonus=1.000000, nodes=33 <= 300.000000)
                                                                          @ 68  java.util.ArrayList$Itr.hasNext():boolean (20 bytes)   relevance-based (relevance=1.000000, probability=0.042473, bonus=1.000000, nodes=11 <= 300.000000)
                            @ 5  java.lang.AbstractStringBuilder.getValue():byte[] (5 bytes)   inline accessor method (bytecode parsing)
                                                                          @ 3  java.lang.String.<init>(AbstractStringBuilder, Void):void (99 bytes)   not inlining too large previous low-level graph (low-level-nodes: 376, relevance=1.000000, probability=0.042473, bonus=1.000000, nodes=41)
                            @ 17  java.lang.Class.getClassLoader():ClassLoader (28 bytes)   inline method (bytecode parsing)
                                                                                @ 0  java.lang.System.allowSecurityManager():boolean (13 bytes)   trivial (relevance=1.000769, probability=0.027405, bonus=1.000000, nodes=8)
                                                                              @ 11  java.lang.System.getSecurityManager():SecurityManager (12 bytes)   relevance-based (relevance=1.000000, probability=0.027405, bonus=1.000000, nodes=14 <= 300.000000)
                                                                            @ 3  sun.reflect.generics.factory.CoreReflectionFactory.getDeclsLoader():ClassLoader (85 bytes)   relevance-based (relevance=1.000000, probability=0.042473, bonus=1.000000, nodes=42 <= 300.000000)
                                                                                @ 0  java.lang.System.allowSecurityManager():boolean (13 bytes)   trivial (relevance=1.000769, probability=0.042473, bonus=1.000000, nodes=8)
                                                                              @ 2  java.lang.System.getSecurityManager():SecurityManager (12 bytes)   relevance-based (relevance=1.000000, probability=0.042473, bonus=1.000000, nodes=14 <= 300.000000)
                                                                                  @ 0  java.lang.System.allowSecurityManager():boolean (13 bytes)   trivial (relevance=1.000769, probability=0.042473, bonus=1.000000, nodes=8)
                                                                                @ 0  java.lang.System.getSecurityManager():SecurityManager (12 bytes)   relevance-based (relevance=1.000000, probability=0.042473, bonus=1.000000, nodes=14 <= 300.000000)
                 n                                                            @ 37  java.lang.Class.forName0(String, boolean, ClassLoader, Class):Class (0 bytes)   not inlining it is a non-intrinsic native method
                                                                              @ 20  java.lang.Class.forName(String, boolean, ClassLoader, Class):Class (41 bytes)   relevance-based (relevance=1.000769, probability=0.042473, bonus=1.000000, nodes=27 <= 300.000000)
                                                                            @ 6  java.lang.Class.forName(String, boolean, ClassLoader):Class (24 bytes)   relevance-based (relevance=1.551003, probability=0.042473, bonus=1.000000, nodes=44 <= 300.000000)
                                                                          @ 173  sun.reflect.generics.factory.CoreReflectionFactory.makeNamedType(String):Type (21 bytes)   relevance-based (relevance=1.000000, probability=0.042473, bonus=1.000000, nodes=82 <= 300.000000)
                                                                        @ 2  sun.reflect.generics.visitor.Reifier.visitClassTypeSignature(ClassTypeSignature):void (381 bytes)   relevance-based (relevance=1.000000, probability=0.042473, bonus=1.000000, nodes=184 <= 300.000000)
                                                                      @ 44  sun.reflect.generics.tree.ClassTypeSignature.accept(TypeTreeVisitor):void (8 bytes)   relevance-based (relevance=1.030610, probability=0.042473, bonus=1.000000, nodes=185 <= 300.000000)
                                                                    @ 27  sun.reflect.annotation.AnnotationParser.parseSig(String, Class):Class (62 bytes)   not inlining relevance-based (relevance=1.000170, probability=0.042473, bonus=1.000000, nodes=456 > 300.000000)
                            @ 0  jdk.internal.access.SharedSecrets.getJavaLangAccess():JavaLangAccess (4 bytes)   inline method (bytecode parsing)
                            @ 1  java.lang.Class.getAnnotationType():AnnotationType (5 bytes)   inline accessor method (bytecode parsing)
                                                                      @ 6  java.lang.System$2.getAnnotationType(Class):AnnotationType (5 bytes)   relevance-based (relevance=1.002802, probability=0.042473, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 17  java.lang.IllegalArgumentException.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  java.lang.RuntimeException.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                                @ 2  java.lang.Exception.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                            @ 27  sun.reflect.annotation.AnnotationType$1.<init>(AnnotationType, Class):void (10 bytes)   inline method (bytecode parsing)
                            @ 30  java.security.AccessController.doPrivileged(PrivilegedAction):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.security.AccessController.executePrivileged(PrivilegedAction, AccessControlContext, Class):Object (65 bytes)   inline method (bytecode parsing)
                                @ 29  sun.reflect.annotation.AnnotationType$1.run():Object (5 bytes)   inline method (bytecode parsing)
                                  @ 1  sun.reflect.annotation.AnnotationType$1.run():Method[] (8 bytes)   inline method (bytecode parsing)
                            @ 59  java.util.HashMap.<init>(int):void (8 bytes)   inline method (bytecode parsing)
                            @ 105  java.lang.reflect.Method.getModifiers():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 116  java.lang.reflect.Method.getModifiers():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 127  java.lang.reflect.Method.isSynthetic():boolean (5 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.reflect.Executable.isSynthetic():boolean (8 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.reflect.Method.getModifiers():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 135  java.lang.reflect.Method.getParameterCount():int (6 bytes)   inline method (bytecode parsing)
                            @ 171  java.lang.reflect.Method.getName():String (5 bytes)   inline accessor method (bytecode parsing)
                            @ 178  java.lang.reflect.Method.getReturnType():Class (5 bytes)   inline accessor method (bytecode parsing)
                            @ 149  java.lang.StringBuilder.<init>():void (7 bytes)   inline method (bytecode parsing)
                            @ 154  java.lang.StringBuilder.append(Object):StringBuilder (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 159  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 162  java.lang.StringBuilder.toString():String (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.String.<init>(StringBuilder):void (7 bytes)   inline method (bytecode parsing)
                            @ 165  java.lang.IllegalArgumentException.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  java.lang.RuntimeException.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                                @ 2  java.lang.Exception.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                            @ 258  jdk.internal.access.SharedSecrets.getJavaLangAccess():JavaLangAccess (4 bytes)   inline method (bytecode parsing)
                                                                      @ 21  sun.reflect.annotation.AnnotationType.<init>(Class):void (361 bytes)   not inlining relevance-based (relevance=0.002802, probability=0.000119, bonus=1.000000, nodes=244 > 0.840650)
                            @ 3  java.lang.Class.casAnnotationType(AnnotationType, AnnotationType):boolean (7 bytes)   inline method (bytecode parsing)
                                                                      @ 29  java.lang.System$2.casAnnotationType(Class, AnnotationType, AnnotationType):boolean (7 bytes)   not inlining relevance-based (relevance=0.002802, probability=0.000119, bonus=1.000000, nodes=13 > 0.840650)
                                                                    @ 103  sun.reflect.annotation.AnnotationType.getInstance(Class):AnnotationType (65 bytes)   relevance-based (relevance=1.000170, probability=0.042473, bonus=1.000000, nodes=37 <= 300.000000)
                            @ 1  java.util.AbstractMap.<init>():void (5 bytes)   inline method (bytecode parsing)
                                                                      @ 1  java.util.HashMap.<init>():void (11 bytes)   trivial (relevance=1.000000, probability=0.042473, bonus=1.000000, nodes=8)
                                                                        @ 4  java.util.Map.size():int (0 bytes)   not inlining no type profile exists
                                                                        @ 1  java.util.HashMap.size():int (5 bytes)   relevance-based (relevance=1.637394, probability=0.042473, bonus=1.000000, nodes=13 <= 300.000000)
                                                                        @ 62  java.util.HashMap.tableSizeFor(int):int (32 bytes)   relevance-based (relevance=0.269454, probability=0.009567, bonus=1.000000, nodes=23 <= 80.836093)
                            @ 15  java.util.HashMap$EntrySet.<init>(HashMap):void (10 bytes)   inline method (bytecode parsing)
                              @ 6  java.util.AbstractSet.<init>():void (5 bytes)   inline method (bytecode parsing)
                                @ 1  java.util.AbstractCollection.<init>():void (5 bytes)   inline method (bytecode parsing)
                            @ 21  java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet.<init>(Set):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  java.util.Collections$UnmodifiableSet.<init>(Set):void (6 bytes)   inline method (bytecode parsing)
                                                                        @ 16  java.util.Map.entrySet():Set (0 bytes)   not inlining no type profile exists
                                                                          @ 2  java.util.Collections$UnmodifiableCollection.<init>(Collection):void (22 bytes)   relevance-based (relevance=0.338003, probability=0.003477, bonus=1.000000, nodes=10 <= 101.400946)
                                                                        @ 98  java.util.HashMap.entrySet():Set (27 bytes)   relevance-based (relevance=0.465646, probability=0.016533, bonus=1.000000, nodes=50 <= 139.693709)
                            @ 8  java.util.HashMap$EntryIterator.<init>(HashMap):void (6 bytes)   inline method (bytecode parsing)
                                                                          @ 17  java.util.Collection.iterator():Iterator (0 bytes)   not inlining no type profile exists
                                                                          @ 5  java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1.<init>(Collections$UnmodifiableMap$UnmodifiableEntrySet):void (26 bytes)   relevance-based (relevance=0.338003, probability=0.006954, bonus=1.000000, nodes=15 <= 101.400946)
                                                                          @ 2  java.util.HashMap$HashIterator.<init>(HashMap):void (79 bytes)   not inlining too large previous low-level graph (low-level-nodes: 409, relevance=0.465646, probability=0.009580, bonus=1.000000, nodes=58)
                                                                        @ 103  java.util.HashMap$EntrySet.iterator():Iterator (12 bytes)   relevance-based (relevance=0.465646, probability=0.016533, bonus=1.000000, nodes=26 <= 139.693709)
                                                                          @ 4  java.util.HashMap$HashIterator.hasNext():boolean (13 bytes)   trivial (relevance=0.576359, probability=0.048676, bonus=1.000000, nodes=9)
                                                                        @ 112  java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1.hasNext():boolean (10 bytes)   relevance-based (relevance=0.576359, probability=0.086071, bonus=1.000000, nodes=27 <= 172.907803)
                            @ 1  java.util.HashMap$EntryIterator.next():Map$Entry (5 bytes)   inline method (bytecode parsing)
                                                                          @ 1  java.util.HashMap$HashIterator.nextNode():HashMap$Node (100 bytes)   not inlining too large previous low-level graph (low-level-nodes: 450, relevance=0.443472, probability=0.027815, bonus=1.000000, nodes=53)
                            @ 1  java.util.HashMap$EntryIterator.next():Map$Entry (5 bytes)   inline method (bytecode parsing)
                                                                              @ 1  java.util.HashMap$HashIterator.nextNode():HashMap$Node (100 bytes)   not inlining too large previous low-level graph (low-level-nodes: 450, relevance=0.665208, probability=0.041723, bonus=1.000000, nodes=53)
                                                                            @ 8  java.util.HashMap$EntryIterator.next():Object (5 bytes)   trivial (relevance=0.665208, probability=0.041723, bonus=1.000000, nodes=8)
                            @ 6  java.util.Objects.requireNonNull(Object):Object (14 bytes)   inline method (bytecode parsing)
                                                                            @ 16  java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry.<init>(Map$Entry):void (16 bytes)   trivial (relevance=0.665208, probability=0.041723, bonus=1.000000, nodes=7)
                                                                          @ 1  java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1.next():Map$Entry (20 bytes)   relevance-based (relevance=0.665208, probability=0.041723, bonus=1.000000, nodes=28 <= 199.562441)
                                                                        @ 122  java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1.next():Object (5 bytes)   relevance-based (relevance=0.665208, probability=0.069538, bonus=1.000000, nodes=37 <= 199.562441)
                                                                          @ 4  java.util.HashMap$Node.getKey():Object (5 bytes)   trivial (relevance=0.665208, probability=0.041723, bonus=1.000000, nodes=5)
                                                                        @ 134  java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry.getKey():Object (10 bytes)   relevance-based (relevance=0.665208, probability=0.069538, bonus=1.000000, nodes=19 <= 199.562441)
                                                                          @ 4  java.util.HashMap$Node.getValue():Object (5 bytes)   trivial (relevance=0.665208, probability=0.041723, bonus=1.000000, nodes=5)
                                                                        @ 143  java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry.getValue():Object (10 bytes)   relevance-based (relevance=0.665208, probability=0.069538, bonus=1.000000, nodes=19 <= 199.562441)
                                                                      @ 17  java.util.HashMap.putMapEntries(Map, boolean):void (170 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.042473, bonus=1.000000, nodes=316 > 300.000000)
                                                                    @ 136  java.util.LinkedHashMap.<init>(Map):void (21 bytes)   relevance-based (relevance=1.000170, probability=0.042473, bonus=1.000000, nodes=19 <= 300.000000)
                            @ 4  java.nio.Buffer.session():MemorySessionImpl (20 bytes)   inline method (bytecode parsing)
                            @ 18  java.nio.HeapByteBuffer.byteOffset(long):long (7 bytes)   inline method (bytecode parsing)
                            @ 25  jdk.internal.misc.ScopedMemoryAccess.getShortUnaligned(MemorySessionImpl, Object, long, boolean):short (18 bytes)   inline method (bytecode parsing)
                              @ 6  jdk.internal.misc.ScopedMemoryAccess.getShortUnalignedInternal(MemorySessionImpl, Object, long, boolean):short (36 bytes)   inline method (bytecode parsing)
                                @ 15  jdk.internal.misc.Unsafe.getShortUnaligned(Object, long, boolean):short (12 bytes)   inline method (bytecode parsing)
                                                                      @ 14  java.nio.Buffer.nextGetIndex(int):int (32 bytes)   relevance-based (relevance=1.000000, probability=0.042473, bonus=1.000000, nodes=13 <= 300.000000)
                                                                      @ 8  jdk.internal.misc.Unsafe.convEndian(boolean, short):short (16 bytes)   relevance-based (relevance=1.000000, probability=0.042473, bonus=1.000000, nodes=20 <= 300.000000)
                                                                    @ 142  java.nio.HeapByteBuffer.getShort():short (29 bytes)   relevance-based (relevance=1.000170, probability=0.042473, bonus=1.000000, nodes=44 <= 300.000000)
                            @ 9  java.security.AccessController.doPrivileged(PrivilegedAction):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.security.AccessController.executePrivileged(PrivilegedAction, AccessControlContext, Class):Object (65 bytes)   inline method (bytecode parsing)
                                @ 29  sun.reflect.annotation.AnnotationParser$1.run():Object (5 bytes)   inline method (bytecode parsing)
                                                                      @ 6  sun.reflect.annotation.AnnotationParser$1.<init>(Class, Map):void (15 bytes)   relevance-based (relevance=1.000000, probability=0.042473, bonus=1.000000, nodes=11 <= 300.000000)
                            @ 4  java.lang.Class.getClassLoader():ClassLoader (28 bytes)   inline method (bytecode parsing)
                                                                          @ 0  java.lang.System.allowSecurityManager():boolean (13 bytes)   trivial (relevance=1.000769, probability=0.027405, bonus=1.000000, nodes=8)
                                                                        @ 11  java.lang.System.getSecurityManager():SecurityManager (12 bytes)   relevance-based (relevance=1.000000, probability=0.027405, bonus=1.000000, nodes=14 <= 300.000000)
                            @ 5  java.lang.Class.getInterfaces():Class[] (6 bytes)   inline method (bytecode parsing)
                            @ 1  java.lang.ref.Reference.get():Object (5 bytes)   inline accessor method (bytecode parsing)
                                                                              @ 15  java.lang.ref.SoftReference.get():Object (29 bytes)   relevance-based (relevance=1.000000, probability=0.042177, bonus=1.000000, nodes=20 <= 300.000000)
                            @ 5  java.lang.Class$ReflectionData.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                                                                              @ 39  java.lang.Class.newReflectionData(SoftReference, int):Class$ReflectionData (66 bytes)   not inlining relevance-based (relevance=0.007162, probability=0.000296, bonus=1.000000, nodes=61 > 2.148563)
                                                                            @ 1  java.lang.Class.reflectionData():Class$ReflectionData (43 bytes)   relevance-based (relevance=1.004912, probability=0.042473, bonus=1.000000, nodes=45 <= 300.000000)
                 n                                                        @ 24  java.lang.Class.getInterfaces0():Class[] (0 bytes)   not inlining it is a non-intrinsic native method
                                                                          @ 2  java.lang.Class.getInterfaces(boolean):Class[] (49 bytes)   relevance-based (relevance=1.000000, probability=0.042473, bonus=1.000000, nodes=75 <= 300.000000)
                                                                          @ 10  java.lang.Class.isAnnotation():boolean (17 bytes)   relevance-based (relevance=1.027724, probability=0.042473, bonus=1.000000, nodes=23 <= 300.000000)
                                                                        @ 30  sun.reflect.annotation.AnnotationInvocationHandler.<init>(Class, Map):void (71 bytes)   relevance-based (relevance=1.551003, probability=0.042473, bonus=1.000000, nodes=116 <= 300.000000)
                            @ 1  java.util.Objects.requireNonNull(Object):Object (14 bytes)   inline method (bytecode parsing)
                                                                            @ 0  java.lang.System.allowSecurityManager():boolean (13 bytes)   trivial (relevance=1.000769, probability=0.042473, bonus=1.000000, nodes=8)
                                                                          @ 5  java.lang.System.getSecurityManager():SecurityManager (12 bytes)   relevance-based (relevance=1.000000, probability=0.042473, bonus=1.000000, nodes=14 <= 300.000000)
                            @ 31  jdk.internal.loader.AbstractClassLoaderValue.sub(Object):AbstractClassLoaderValue$Sub (10 bytes)   inline method (bytecode parsing)
                              @ 6  jdk.internal.loader.AbstractClassLoaderValue$Sub.<init>(AbstractClassLoaderValue, Object):void (15 bytes)   inline method (bytecode parsing)
                                @ 6  jdk.internal.loader.AbstractClassLoaderValue.<init>():void (5 bytes)   inline method (bytecode parsing)
                            @ 35  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object):Object (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.lang.invoke.LambdaForm$MH/0x00007f45e0000800.invoke(Object):Object (8 bytes)   inline method (bytecode parsing)
                            @ 30  java.util.concurrent.ConcurrentHashMap.putIfAbsent(Object, Object):Object (8 bytes)   inline method (bytecode parsing)
                            @ 4  jdk.internal.loader.BootLoader.getClassLoaderValueMap():ConcurrentHashMap (4 bytes)   inline method (bytecode parsing)
                            @ 14  java.lang.System$2.createOrGetClassLoaderValueMap(ClassLoader):ConcurrentHashMap (5 bytes)   inline method (bytecode parsing)
                                                                                @ 1  java.lang.ClassLoader.createOrGetClassLoaderValueMap():ConcurrentHashMap (37 bytes)   trivial (relevance=1.000000, probability=0.042183, bonus=1.000000, nodes=9)
                                                                              @ 1  jdk.internal.loader.AbstractClassLoaderValue.map(ClassLoader):ConcurrentHashMap (20 bytes)   relevance-based (relevance=1.000000, probability=0.042473, bonus=1.000000, nodes=23 <= 300.000000)
                            @ 20  java.util.concurrent.ConcurrentHashMap.spread(int):int (10 bytes)   inline method (bytecode parsing)
                                                                              @ 4  java.util.concurrent.ConcurrentHashMap.putVal(Object, Object, boolean):Object (432 bytes)   not inlining relevance-based (relevance=0.002196, probability=0.000093, bonus=1.000000, nodes=181 > 0.658858)
                            @ 4  java.util.concurrent.ConcurrentHashMap.spread(int):int (10 bytes)   inline method (bytecode parsing)
                            @ 3  jdk.internal.loader.AbstractClassLoaderValue$Sub.parent():AbstractClassLoaderValue (5 bytes)   inline accessor method (bytecode parsing)
                 n                                                                @ 6  java.lang.Object.hashCode():int (0 bytes)   trivial (relevance=1.000000, probability=0.042473, bonus=1.000000, nodes=5)
                            @ 4  java.lang.Long.hashCode(long):int (8 bytes)   inline method (bytecode parsing)
                            @ 17  java.lang.NullPointerException.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  java.lang.RuntimeException.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                                @ 2  java.lang.Exception.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                                                                                      @ 1  jdk.vm.ci.hotspot.HotSpotResolvedJavaMethodImpl.getMethodPointer():long (23 bytes)   not inlining relevance-based (relevance=0.031228, probability=0.001212, bonus=1.000000, nodes=21 > 9.368346)
                                                                                          @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=0.124911, probability=0.000303, bonus=1.000000, nodes=5)
                                                                                        @ 9  java.lang.String.length():int (11 bytes)   trivial (relevance=0.124911, probability=0.000303, bonus=1.000000, nodes=8)
                                                                                      @ 14  java.net.URI.hashIgnoringCase(int, String):int (45 bytes)   not inlining relevance-based (relevance=0.124911, probability=0.000606, bonus=1.000000, nodes=40 > 37.473385)
                            @ 9  java.lang.String.indexOf(int):int (7 bytes)   inline method (bytecode parsing)
                                                                                          @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=0.249823, probability=0.000303, bonus=1.000000, nodes=9)
                                                                                            @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=0.249823, probability=0.000303, bonus=1.000000, nodes=5)
                                                                                          @ 14  java.lang.String.length():int (11 bytes)   trivial (relevance=0.249823, probability=0.000303, bonus=1.000000, nodes=8)
                            @ 11  java.lang.Math.max(int, int):int (11 bytes)   inline method (bytecode parsing)
                                                                                            @ 1  java.lang.StringLatin1.canEncode(int):boolean (13 bytes)   trivial (relevance=0.249828, probability=0.000303, bonus=1.000000, nodes=5)
                                                                                            @ 18  java.lang.Math.min(int, int):int (11 bytes)   trivial (relevance=0.249828, probability=0.000303, bonus=1.000000, nodes=7)
                                                                                          @ 17  java.lang.StringLatin1.indexOf(byte[], int, int, int):int (37 bytes)   relevance-based (relevance=0.249823, probability=0.000303, bonus=1.000000, nodes=18 <= 74.946771)
                                                                                        @ 3  java.lang.String.indexOf(int, int):int (37 bytes)   relevance-based (relevance=0.249823, probability=0.000303, bonus=1.000000, nodes=29 <= 74.946771)
                                                                                      @ 23  java.net.URI.hash(int, String):int (33 bytes)   not inlining relevance-based (relevance=0.124911, probability=0.000606, bonus=1.000000, nodes=58 > 37.473385)
                                                                                      @ 28  java.net.URI.isOpaque():boolean (13 bytes)   trivial (relevance=0.124911, probability=0.000606, bonus=1.000000, nodes=9)
                            @ 9  java.lang.String.indexOf(int):int (7 bytes)   inline method (bytecode parsing)
                                                                                      @ 39  java.net.URI.hash(int, String):int (33 bytes)   not inlining relevance-based (relevance=0.062456, probability=0.000303, bonus=1.000000, nodes=37 > 18.736693)
                            @ 9  java.lang.String.indexOf(int):int (7 bytes)   inline method (bytecode parsing)
                                                                                      @ 51  java.net.URI.hash(int, String):int (33 bytes)   not inlining relevance-based (relevance=0.062456, probability=0.000303, bonus=1.000000, nodes=37 > 18.736693)
                            @ 9  java.lang.String.indexOf(int):int (7 bytes)   inline method (bytecode parsing)
                                                                                      @ 60  java.net.URI.hash(int, String):int (33 bytes)   not inlining relevance-based (relevance=0.062456, probability=0.000303, bonus=1.000000, nodes=37 > 18.736693)
                            @ 9  java.lang.String.indexOf(int):int (7 bytes)   inline method (bytecode parsing)
                                                                                      @ 76  java.net.URI.hash(int, String):int (33 bytes)   not inlining relevance-based (relevance=0.031228, probability=0.000152, bonus=1.000000, nodes=37 > 9.368346)
                                                                                      @ 85  java.net.URI.hashIgnoringCase(int, String):int (45 bytes)   not inlining relevance-based (relevance=0.031228, probability=0.000152, bonus=1.000000, nodes=38 > 9.368346)
                            @ 9  java.lang.String.indexOf(int):int (7 bytes)   inline method (bytecode parsing)
                                                                                      @ 108  java.net.URI.hash(int, String):int (33 bytes)   not inlining relevance-based (relevance=0.031228, probability=0.000152, bonus=1.000000, nodes=37 > 9.368346)
                 n                                                                  @ 5  java.lang.Object.hashCode():int (0 bytes)   relevance-based (relevance=1.000000, probability=0.041247, bonus=1.000000, nodes=90 <= 300.000000)
                                                                                  @ 14  java.util.Objects.hashCode(Object):int (13 bytes)   relevance-based (relevance=1.000000, probability=0.042473, bonus=1.000000, nodes=105 <= 300.000000)
                                                                                @ 1  jdk.internal.loader.AbstractClassLoaderValue$Sub.hashCode():int (19 bytes)   relevance-based (relevance=3.959160, probability=0.042473, bonus=1.000000, nodes=122 <= 300.000000)
                                                                                @ 34  java.util.concurrent.ConcurrentHashMap.tabAt(ConcurrentHashMap$Node[], int):ConcurrentHashMap$Node (22 bytes)   relevance-based (relevance=1.090921, probability=0.042352, bonus=1.000000, nodes=11 <= 300.000000)
                            @ 22  jdk.internal.loader.AbstractClassLoaderValue$Sub.parent():AbstractClassLoaderValue (5 bytes)   inline accessor method (bytecode parsing)
                            @ 26  jdk.internal.loader.AbstractClassLoaderValue$Sub.parent():AbstractClassLoaderValue (5 bytes)   inline accessor method (bytecode parsing)
                                                                                  @ 29  java.lang.Object.equals(Object):boolean (11 bytes)   trivial (relevance=0.276385, probability=0.010730, bonus=1.000000, nodes=9)
                                                                                  @ 11  java.lang.Object.equals(Object):boolean (11 bytes)   not inlining no methods remaining after filtering less frequent methods (8 methods previously)
                                                                                  @ 43  java.util.Objects.equals(Object, Object):boolean (23 bytes)   relevance-based (relevance=0.276385, probability=0.010730, bonus=1.000000, nodes=24 <= 82.915401)
                                                                                @ 73  jdk.internal.loader.AbstractClassLoaderValue$Sub.equals(Object):boolean (55 bytes)   relevance-based (relevance=0.276385, probability=0.010730, bonus=1.000000, nodes=51 <= 82.915401)
                            @ 22  jdk.internal.loader.AbstractClassLoaderValue$Sub.parent():AbstractClassLoaderValue (5 bytes)   inline accessor method (bytecode parsing)
                            @ 26  jdk.internal.loader.AbstractClassLoaderValue$Sub.parent():AbstractClassLoaderValue (5 bytes)   inline accessor method (bytecode parsing)
                                                                                @ 149  jdk.internal.loader.AbstractClassLoaderValue$Sub.equals(Object):boolean (55 bytes)   not inlining relevance-based (relevance=0.078653, probability=0.001802, bonus=1.000000, nodes=31 > 23.595888)
                                                                              @ 19  java.util.concurrent.ConcurrentHashMap.get(Object):Object (162 bytes)   relevance-based (relevance=1.000000, probability=0.042473, bonus=1.000000, nodes=268 <= 300.000000)
                                                                            @ 40  jdk.internal.loader.AbstractClassLoaderValue.computeIfAbsent(ClassLoader, BiFunction):Object (113 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.042473, bonus=1.000000, nodes=334 > 300.000000)
                                                                          @ 22  java.lang.reflect.Proxy.getProxyConstructor(Class, ClassLoader, Class[]):Constructor (92 bytes)   relevance-based (relevance=1.000769, probability=0.042473, bonus=1.000000, nodes=28 <= 300.000000)
                            @ 21  java.lang.reflect.Constructor.newInstance(Object[]):Object (34 bytes)   inline method (bytecode parsing)
                            @ 35  java.lang.InternalError.<init>(String, Throwable):void (7 bytes)   inline method (bytecode parsing)
                              @ 3  java.lang.VirtualMachineError.<init>(String, Throwable):void (7 bytes)   inline method (bytecode parsing)
                                @ 3  java.lang.Error.<init>(String, Throwable):void (7 bytes)   inline method (bytecode parsing)
                                                                              @ 18  java.lang.reflect.AccessibleObject.checkAccess(Class, Class, Class, int):void (40 bytes)   not inlining relevance-based (relevance=0.066640, probability=0.002654, bonus=1.000000, nodes=38 > 19.991971)
                            @ 14  java.lang.reflect.Constructor.getConstructorAccessor():ConstructorAccessor (5 bytes)   inline accessor method (bytecode parsing)
                            @ 50  java.lang.IllegalArgumentException.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  java.lang.RuntimeException.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                                @ 2  java.lang.Exception.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                            @ 62  jdk.internal.misc.VM.isJavaLangInvokeInited():boolean (4 bytes)   inline method (bytecode parsing)
                                                                              @ 33  java.lang.reflect.Constructor.acquireConstructorAccessor():ConstructorAccessor (75 bytes)   not inlining relevance-based (relevance=0.046166, probability=0.001838, bonus=1.000000, nodes=69 > 13.849859)
                            @ 60  jdk.internal.reflect.DirectConstructorHandleAccessor.invokeImpl(Object[]):Object (103 bytes)   inline method (bytecode parsing)
                              @ 88  java.lang.invoke.LambdaForm$MH/0x00007f45e0003c00.invokeExact_MT(Object, Object, Object, Object, Object):Object (26 bytes)   inline method (bytecode parsing)
                                @ 11  java.lang.invoke.Invokers.checkExactType(MethodHandle, MethodType):void (17 bytes)   inline method (bytecode parsing)
                                  @ 1  java.lang.invoke.MethodHandle.type():MethodType (5 bytes)   inline accessor method (bytecode parsing)
                                @ 15  java.lang.invoke.Invokers.checkCustomized(MethodHandle):void (23 bytes)   inline method (bytecode parsing)
                              @ 69  java.lang.invoke.Invokers$Holder.invokeExact_MT(Object, Object, Object, Object):Object (24 bytes)   inline method (bytecode parsing)
                                @ 10  java.lang.invoke.Invokers.checkExactType(MethodHandle, MethodType):void (17 bytes)   inline method (bytecode parsing)
                                  @ 1  java.lang.invoke.MethodHandle.type():MethodType (5 bytes)   inline accessor method (bytecode parsing)
                                @ 14  java.lang.invoke.Invokers.checkCustomized(MethodHandle):void (23 bytes)   inline method (bytecode parsing)
                              @ 53  java.lang.invoke.Invokers$Holder.invokeExact_MT(Object, Object, Object):Object (23 bytes)   inline method (bytecode parsing)
                                @ 10  java.lang.invoke.Invokers.checkExactType(MethodHandle, MethodType):void (17 bytes)   inline method (bytecode parsing)
                                  @ 1  java.lang.invoke.MethodHandle.type():MethodType (5 bytes)   inline accessor method (bytecode parsing)
                                @ 14  java.lang.invoke.Invokers.checkCustomized(MethodHandle):void (23 bytes)   inline method (bytecode parsing)
                              @ 40  java.lang.invoke.Invokers$Holder.invokeExact_MT(Object, Object):Object (22 bytes)   inline method (bytecode parsing)
                                @ 10  java.lang.invoke.Invokers.checkExactType(MethodHandle, MethodType):void (17 bytes)   inline method (bytecode parsing)
                                  @ 1  java.lang.invoke.MethodHandle.type():MethodType (5 bytes)   inline accessor method (bytecode parsing)
                                @ 14  java.lang.invoke.Invokers.checkCustomized(MethodHandle):void (23 bytes)   inline method (bytecode parsing)
                                                                              @ 19  java.lang.invoke.Invokers.maybeCustomize(MethodHandle):void (5 bytes)   not inlining it is marked non-inlinable
                                                                              @ 19  java.lang.invoke.Invokers.maybeCustomize(MethodHandle):void (5 bytes)   not inlining it is marked non-inlinable
                                                                              @ 19  java.lang.invoke.Invokers.maybeCustomize(MethodHandle):void (5 bytes)   not inlining it is marked non-inlinable
                                                                              @ 19  java.lang.invoke.Invokers.maybeCustomize(MethodHandle):void (5 bytes)   not inlining it is marked non-inlinable
                                                                              @ 41  jdk.internal.reflect.DirectConstructorHandleAccessor.newInstance(Object[]):Object (130 bytes)   relevance-based (relevance=1.066640, probability=0.042473, bonus=1.000000, nodes=140 <= 300.000000)
                                                                            @ 30  java.lang.reflect.Constructor.newInstanceWithCaller(Object[], boolean, Class):Object (51 bytes)   relevance-based (relevance=1.053880, probability=0.042473, bonus=1.000000, nodes=177 <= 300.000000)
                                                                          @ 31  java.lang.reflect.Proxy.newProxyInstance(Class, Constructor, InvocationHandler):Object (75 bytes)   relevance-based (relevance=1.000769, probability=0.042473, bonus=1.000000, nodes=193 <= 300.000000)
                                                                        @ 33  java.lang.reflect.Proxy.newProxyInstance(ClassLoader, Class[], InvocationHandler):Object (35 bytes)   relevance-based (relevance=1.551003, probability=0.042473, bonus=1.000000, nodes=232 <= 300.000000)
                                                                      @ 1  sun.reflect.annotation.AnnotationParser$1.run():Annotation (40 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.042473, bonus=1.000000, nodes=380 > 300.000000)
                                                                    @ 271  sun.reflect.annotation.AnnotationParser.annotationForMap(Class, Map):Annotation (16 bytes)   relevance-based (relevance=1.000170, probability=0.042473, bonus=1.000000, nodes=26 <= 300.000000)
                            @ 4  java.nio.Buffer.session():MemorySessionImpl (20 bytes)   inline method (bytecode parsing)
                            @ 18  java.nio.HeapByteBuffer.byteOffset(long):long (7 bytes)   inline method (bytecode parsing)
                            @ 25  jdk.internal.misc.ScopedMemoryAccess.getShortUnaligned(MemorySessionImpl, Object, long, boolean):short (18 bytes)   inline method (bytecode parsing)
                              @ 6  jdk.internal.misc.ScopedMemoryAccess.getShortUnalignedInternal(MemorySessionImpl, Object, long, boolean):short (36 bytes)   inline method (bytecode parsing)
                                @ 15  jdk.internal.misc.Unsafe.getShortUnaligned(Object, long, boolean):short (12 bytes)   inline method (bytecode parsing)
                                                                      @ 14  java.nio.Buffer.nextGetIndex(int):int (32 bytes)   relevance-based (relevance=0.189112, probability=0.008032, bonus=1.000000, nodes=13 <= 56.733524)
                                                                      @ 8  jdk.internal.misc.Unsafe.convEndian(boolean, short):short (16 bytes)   relevance-based (relevance=0.189112, probability=0.008032, bonus=1.000000, nodes=20 <= 56.733524)
                                                                    @ 161  java.nio.HeapByteBuffer.getShort():short (29 bytes)   relevance-based (relevance=0.189112, probability=0.008032, bonus=1.000000, nodes=44 <= 56.733524)
                 n                                                @ 6  jdk.internal.reflect.ConstantPool.getUTF8At0(Object, int):String (0 bytes)   not inlining it is a non-intrinsic native method
                                                                      @ 2  java.util.HashMap.getNode(Object):HashMap$Node (150 bytes)   not inlining relevance-based (relevance=0.214294, probability=0.008032, bonus=1.000000, nodes=108 > 64.288217)
                                                                    @ 181  java.util.HashMap.get(Object):Object (19 bytes)   relevance-based (relevance=0.189112, probability=0.008032, bonus=1.000000, nodes=19 <= 56.733524)
                            @ 75  sun.reflect.annotation.AnnotationParser.parseAnnotation(ByteBuffer, ConstantPool, Class, boolean):Annotation (9 bytes)   inline method (bytecode parsing)
                            @ 117  java.lang.Class.getInterfaces():Class[] (6 bytes)   inline method (bytecode parsing)
                            @ 190  java.lang.StringBuilder.<init>():void (7 bytes)   inline method (bytecode parsing)
                            @ 201  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 206  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 211  java.lang.StringBuilder.append(Object):StringBuilder (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 216  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 219  java.lang.StringBuilder.toString():String (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.String.<init>(StringBuilder):void (7 bytes)   inline method (bytecode parsing)
                                                                    @ 208  sun.reflect.annotation.AnnotationParser.parseMemberValue(Class, ByteBuffer, ConstantPool, Class):Object (230 bytes)   not inlining relevance-based (relevance=0.189112, probability=0.008032, bonus=1.000000, nodes=142 > 56.733524)
                                                                          @ 17  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=0.002894, probability=0.000121, bonus=1.000000, nodes=9)
                                                                          @ 27  java.lang.StringLatin1.hashCode(byte[]):int (52 bytes)   not inlining relevance-based (relevance=0.002892, probability=0.000121, bonus=1.000000, nodes=22 > 0.867706)
                                                                          @ 37  java.lang.StringUTF16.hashCode(byte[]):int (52 bytes)   not inlining relevance-based (relevance=0.000001, probability=0.000000, bonus=1.000000, nodes=23 > 0.000438)
                                                                        @ 9  java.lang.String.hashCode():int (60 bytes)   relevance-based (relevance=0.189112, probability=0.008032, bonus=1.000000, nodes=48 <= 56.733524)
                                                                      @ 2  java.util.HashMap.hash(Object):int (20 bytes)   relevance-based (relevance=0.189112, probability=0.008032, bonus=1.000000, nodes=56 <= 56.733524)
                                                                    @ 255  java.util.HashMap.put(Object, Object):Object (13 bytes)   not inlining relevance-based (relevance=0.189112, probability=0.008032, bonus=1.000000, nodes=62 > 56.733524)
                                                                  @ 41  sun.reflect.annotation.AnnotationParser.parseAnnotation2(ByteBuffer, ConstantPool, Class, boolean, Class[]):Annotation (275 bytes)   relevance-based (relevance=4.000000, probability=0.042473, bonus=1.000000, nodes=256 <= 300.000000)
                                                                @ 12  sun.reflect.annotation.AnnotationParser.parseAnnotations2(byte[], ConstantPool, Class, Class[]):Map (135 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.042473, bonus=1.000000, nodes=405 > 300.000000)
                                                              @ 9  sun.reflect.annotation.AnnotationParser.parseAnnotations(byte[], ConstantPool, Class):Map (37 bytes)   relevance-based (relevance=3.160494, probability=0.064255, bonus=1.000000, nodes=16 <= 300.000000)
                            @ 87  sun.reflect.annotation.AnnotationType.isInherited():boolean (5 bytes)   inline accessor method (bytecode parsing)
                            @ 120  java.lang.Math.min(int, int):int (11 bytes)   inline method (bytecode parsing)
                 n                                              @ 1  java.lang.Class.getRawAnnotations():byte[] (0 bytes)   not inlining it is a non-intrinsic native method
                 n                                              @ 5  java.lang.Class.getConstantPool():ConstantPool (0 bytes)   not inlining it is a non-intrinsic native method
                            @ 4  java.util.Collections.emptyMap():Map (4 bytes)   inline method (bytecode parsing)
                            @ 10  java.nio.ByteBuffer.wrap(byte[]):ByteBuffer (8 bytes)   inline method (bytecode parsing)
                            @ 65  sun.reflect.annotation.AnnotationType.retention():RetentionPolicy (5 bytes)   inline accessor method (bytecode parsing)
                            @ 1  java.util.AbstractMap.<init>():void (5 bytes)   inline method (bytecode parsing)
                                                                        @ 1  java.util.HashMap.<init>():void (11 bytes)   trivial (relevance=1.000000, probability=0.025484, bonus=1.000000, nodes=8)
                                                                      @ 4  java.util.LinkedHashMap.<init>():void (15 bytes)   relevance-based (relevance=1.000000, probability=0.025484, bonus=1.000000, nodes=15 <= 300.000000)
                            @ 17  java.nio.ByteOrder.nativeOrder():ByteOrder (4 bytes)   inline method (bytecode parsing)
                                                                                  @ 2  java.nio.Buffer.limit(int):Buffer (65 bytes)   relevance-based (relevance=1.000000, probability=0.025484, bonus=1.000000, nodes=24 <= 300.000000)
                                                                                @ 2  java.nio.ByteBuffer.limit(int):ByteBuffer (8 bytes)   relevance-based (relevance=1.000000, probability=0.025484, bonus=1.000000, nodes=25 <= 300.000000)
                                                                              @ 39  java.nio.ByteBuffer.limit(int):Buffer (6 bytes)   relevance-based (relevance=1.000000, probability=0.025484, bonus=1.000000, nodes=26 <= 300.000000)
                                                                                  @ 2  java.nio.Buffer.position(int):Buffer (52 bytes)   relevance-based (relevance=1.000000, probability=0.025484, bonus=1.000000, nodes=14 <= 300.000000)
                                                                                @ 2  java.nio.ByteBuffer.position(int):ByteBuffer (8 bytes)   relevance-based (relevance=1.000000, probability=0.025484, bonus=1.000000, nodes=15 <= 300.000000)
                                                                              @ 45  java.nio.ByteBuffer.position(int):Buffer (6 bytes)   relevance-based (relevance=1.022803, probability=0.025484, bonus=1.000000, nodes=16 <= 300.000000)
                                                                            @ 8  java.nio.Buffer.<init>(int, int, int, int, MemorySegment):void (105 bytes)   relevance-based (relevance=1.000000, probability=0.025484, bonus=1.000000, nodes=52 <= 300.000000)
                                                                          @ 12  java.nio.ByteBuffer.<init>(int, int, int, int, byte[], int, MemorySegment):void (47 bytes)   relevance-based (relevance=1.000000, probability=0.025484, bonus=1.000000, nodes=63 <= 300.000000)
                                                                        @ 8  java.nio.HeapByteBuffer.<init>(byte[], int, int, MemorySegment):void (23 bytes)   relevance-based (relevance=1.000000, probability=0.025484, bonus=1.000000, nodes=67 <= 300.000000)
                                                                      @ 4  java.nio.ByteBuffer.wrap(byte[], int, int):ByteBuffer (21 bytes)   relevance-based (relevance=1.000000, probability=0.025484, bonus=1.000000, nodes=68 <= 300.000000)
                            @ 4  java.nio.Buffer.session():MemorySessionImpl (20 bytes)   inline method (bytecode parsing)
                            @ 18  java.nio.HeapByteBuffer.byteOffset(long):long (7 bytes)   inline method (bytecode parsing)
                            @ 25  jdk.internal.misc.ScopedMemoryAccess.getShortUnaligned(MemorySessionImpl, Object, long, boolean):short (18 bytes)   inline method (bytecode parsing)
                              @ 6  jdk.internal.misc.ScopedMemoryAccess.getShortUnalignedInternal(MemorySessionImpl, Object, long, boolean):short (36 bytes)   inline method (bytecode parsing)
                                @ 15  jdk.internal.misc.Unsafe.getShortUnaligned(Object, long, boolean):short (12 bytes)   inline method (bytecode parsing)
                                                                        @ 14  java.nio.Buffer.nextGetIndex(int):int (32 bytes)   relevance-based (relevance=1.000000, probability=0.025484, bonus=1.000000, nodes=13 <= 300.000000)
                                                                        @ 8  jdk.internal.misc.Unsafe.convEndian(boolean, short):short (16 bytes)   relevance-based (relevance=1.000000, probability=0.025484, bonus=1.000000, nodes=20 <= 300.000000)
                                                                      @ 17  java.nio.HeapByteBuffer.getShort():short (29 bytes)   relevance-based (relevance=1.022803, probability=0.025484, bonus=1.000000, nodes=44 <= 300.000000)
                            @ 19  jdk.internal.reflect.ConstantPool.getUTF8At(int):String (10 bytes)   inline method (bytecode parsing)
                            @ 122  sun.reflect.annotation.AnnotationType.memberTypes():Map (5 bytes)   inline accessor method (bytecode parsing)
                            @ 133  sun.reflect.annotation.AnnotationType.memberDefaults():Map (5 bytes)   inline accessor method (bytecode parsing)
                            @ 172  jdk.internal.reflect.ConstantPool.getUTF8At(int):String (10 bytes)   inline method (bytecode parsing)
                            @ 4  java.nio.Buffer.session():MemorySessionImpl (20 bytes)   inline method (bytecode parsing)
                            @ 18  java.nio.HeapByteBuffer.byteOffset(long):long (7 bytes)   inline method (bytecode parsing)
                            @ 25  jdk.internal.misc.ScopedMemoryAccess.getShortUnaligned(MemorySessionImpl, Object, long, boolean):short (18 bytes)   inline method (bytecode parsing)
                              @ 6  jdk.internal.misc.ScopedMemoryAccess.getShortUnalignedInternal(MemorySessionImpl, Object, long, boolean):short (36 bytes)   inline method (bytecode parsing)
                                @ 15  jdk.internal.misc.Unsafe.getShortUnaligned(Object, long, boolean):short (12 bytes)   inline method (bytecode parsing)
                                                                          @ 14  java.nio.Buffer.nextGetIndex(int):int (32 bytes)   relevance-based (relevance=1.000000, probability=0.025484, bonus=1.000000, nodes=13 <= 300.000000)
                                                                          @ 8  jdk.internal.misc.Unsafe.convEndian(boolean, short):short (16 bytes)   relevance-based (relevance=1.000000, probability=0.025484, bonus=1.000000, nodes=20 <= 300.000000)
                                                                        @ 1  java.nio.HeapByteBuffer.getShort():short (29 bytes)   relevance-based (relevance=1.000000, probability=0.025484, bonus=1.000000, nodes=44 <= 300.000000)
                                @ 1  java.util.AbstractList$SubList.checkForComodification():void (23 bytes)   trivial (relevance=0.000193, probability=0.000193, bonus=1.000000, nodes=9)
                 n                                                    @ 6  jdk.internal.reflect.ConstantPool.getUTF8At0(Object, int):String (0 bytes)   not inlining it is a non-intrinsic native method
                                @ 1  java.util.ArrayList$SubList.checkForComodification():void (23 bytes)   trivial (relevance=0.000699, probability=0.000698, bonus=1.000000, nodes=9)
                              @ 1  java.util.Collections$SingletonList.size():int (2 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=35 <= 300.000000)
                            @ 14  sun.reflect.generics.parser.SignatureParser.make():SignatureParser (8 bytes)   inline method (bytecode parsing)
                              @ 4  sun.reflect.generics.parser.SignatureParser.<init>():void (5 bytes)   inline method (bytecode parsing)
                            @ 20  sun.reflect.generics.parser.SignatureParser.parseTypeSig(String):TypeSignature (10 bytes)   inline method (bytecode parsing)
                            @ 26  sun.reflect.generics.scope.ClassScope.make(Class):ClassScope (9 bytes)   inline method (bytecode parsing)
                              @ 5  sun.reflect.generics.scope.ClassScope.<init>(Class):void (6 bytes)   inline method (bytecode parsing)
                                @ 2  sun.reflect.generics.scope.AbstractScope.<init>(GenericDeclaration):void (10 bytes)   inline method (bytecode parsing)
                            @ 29  sun.reflect.generics.factory.CoreReflectionFactory.make(GenericDeclaration, Scope):CoreReflectionFactory (10 bytes)   inline method (bytecode parsing)
                            @ 36  sun.reflect.generics.visitor.Reifier.make(GenericsFactory):Reifier (9 bytes)   inline method (bytecode parsing)
                              @ 5  sun.reflect.generics.visitor.Reifier.<init>(GenericsFactory):void (10 bytes)   inline method (bytecode parsing)
                                                                          @ 2  sun.reflect.generics.parser.SignatureParser.init(String):void (16 bytes)   relevance-based (relevance=1.030610, probability=0.025484, bonus=1.000000, nodes=12 <= 300.000000)
                            @ 126  sun.reflect.generics.parser.SignatureParser.parseFieldTypeSignature():FieldTypeSignature (6 bytes)   inline method (bytecode parsing)
                                                                                @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.025484, bonus=1.000000, nodes=5)
                                                                              @ 36  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000000, probability=0.025484, bonus=1.000000, nodes=8)
                                                                                @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=0.025484, bonus=1.000000, nodes=9)
                            @ 3  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                                                                                @ 12  java.lang.StringLatin1.charAt(byte[], int):char (15 bytes)   relevance-based (relevance=1.000000, probability=0.025484, bonus=1.000000, nodes=11 <= 300.000000)
                                                                              @ 50  java.lang.String.charAt(int):char (25 bytes)   relevance-based (relevance=1.000000, probability=0.025484, bonus=1.000000, nodes=16 <= 300.000000)
                                                                            @ 1  sun.reflect.generics.parser.SignatureParser.current():char (59 bytes)   relevance-based (relevance=1.000000, probability=0.025484, bonus=1.000000, nodes=31 <= 300.000000)
                                                                                  @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.025484, bonus=1.000000, nodes=5)
                                                                                @ 36  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000000, probability=0.025484, bonus=1.000000, nodes=8)
                                                                                  @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=0.025484, bonus=1.000000, nodes=9)
                            @ 3  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                                                                                  @ 12  java.lang.StringLatin1.charAt(byte[], int):char (15 bytes)   relevance-based (relevance=1.000000, probability=0.025484, bonus=1.000000, nodes=11 <= 300.000000)
                                                                                @ 50  java.lang.String.charAt(int):char (25 bytes)   relevance-based (relevance=1.000000, probability=0.025484, bonus=1.000000, nodes=16 <= 300.000000)
                                                                              @ 1  sun.reflect.generics.parser.SignatureParser.current():char (59 bytes)   relevance-based (relevance=1.000000, probability=0.025484, bonus=1.000000, nodes=31 <= 300.000000)
                            @ 114  sun.reflect.generics.tree.ClassTypeSignature.make(List):ClassTypeSignature (9 bytes)   inline method (bytecode parsing)
                              @ 5  sun.reflect.generics.tree.ClassTypeSignature.<init>(List):void (10 bytes)   inline method (bytecode parsing)
                                                                                    @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.025484, bonus=1.000000, nodes=5)
                                                                                  @ 36  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000000, probability=0.025484, bonus=1.000000, nodes=8)
                                                                                    @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=0.025484, bonus=1.000000, nodes=9)
                            @ 3  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                                                                                    @ 12  java.lang.StringLatin1.charAt(byte[], int):char (15 bytes)   relevance-based (relevance=1.000000, probability=0.025484, bonus=1.000000, nodes=11 <= 300.000000)
                                                                                  @ 50  java.lang.String.charAt(int):char (25 bytes)   relevance-based (relevance=1.000000, probability=0.025484, bonus=1.000000, nodes=16 <= 300.000000)
                                                                                @ 24  sun.reflect.generics.parser.SignatureParser.current():char (59 bytes)   relevance-based (relevance=1.000000, probability=0.025484, bonus=1.000000, nodes=31 <= 300.000000)
                                                                                    @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.025484, bonus=1.000000, nodes=5)
                                                                                  @ 36  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000000, probability=0.025484, bonus=1.000000, nodes=8)
                                                                                @ 40  sun.reflect.generics.parser.SignatureParser.advance():void (53 bytes)   relevance-based (relevance=1.000000, probability=0.025484, bonus=1.000000, nodes=20 <= 300.000000)
                            @ 1  java.util.AbstractList.<init>():void (10 bytes)   inline method (bytecode parsing)
                              @ 1  java.util.AbstractCollection.<init>():void (5 bytes)   inline method (bytecode parsing)
                                                                                @ 48  java.util.ArrayList.<init>(int):void (61 bytes)   relevance-based (relevance=1.000000, probability=0.025484, bonus=1.000000, nodes=12 <= 300.000000)
                            @ 1  sun.reflect.generics.parser.SignatureParser.mark():void (9 bytes)   inline method (bytecode parsing)
                            @ 78  sun.reflect.generics.tree.SimpleClassTypeSignature.make(String, boolean, TypeArgument[]):SimpleClassTypeSignature (11 bytes)   inline method (bytecode parsing)
                              @ 7  sun.reflect.generics.tree.SimpleClassTypeSignature.<init>(String, boolean, TypeArgument[]):void (20 bytes)   inline method (bytecode parsing)
                            @ 48  java.lang.Character.isWhitespace(char):boolean (5 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.Character.isWhitespace(int):boolean (9 bytes)   inline method (bytecode parsing)
                                                                                        @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.025484, bonus=1.000000, nodes=5)
                                                                                      @ 36  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000000, probability=0.025484, bonus=1.000000, nodes=8)
                                                                                        @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=0.025484, bonus=1.000000, nodes=9)
                            @ 3  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                                                                                        @ 12  java.lang.StringLatin1.charAt(byte[], int):char (15 bytes)   relevance-based (relevance=1.000000, probability=0.025484, bonus=1.000000, nodes=11 <= 300.000000)
                                                                                      @ 50  java.lang.String.charAt(int):char (25 bytes)   relevance-based (relevance=1.000000, probability=0.025484, bonus=1.000000, nodes=16 <= 300.000000)
                                                                                    @ 1  sun.reflect.generics.parser.SignatureParser.current():char (59 bytes)   relevance-based (relevance=1.000000, probability=0.025484, bonus=1.000000, nodes=31 <= 300.000000)
                                                                                    @ 1  java.lang.CharacterData.of(int):CharacterData (136 bytes)   trivial (relevance=1.000000, probability=0.209949, bonus=1.000000, nodes=8)
                                                                                      @ 2  java.lang.CharacterDataLatin1.getProperties(int):int (11 bytes)   trivial (relevance=1.000000, probability=0.209949, bonus=1.000000, nodes=8)
                                                                                    @ 5  java.lang.CharacterDataLatin1.isWhitespace(int):boolean (23 bytes)   relevance-based (relevance=1.000000, probability=0.209949, bonus=1.000000, nodes=13 <= 300.000000)
                                                                                        @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.209949, bonus=1.000000, nodes=5)
                                                                                      @ 36  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000000, probability=0.209949, bonus=1.000000, nodes=8)
                                                                                    @ 55  sun.reflect.generics.parser.SignatureParser.advance():void (53 bytes)   relevance-based (relevance=1.000000, probability=0.209949, bonus=1.000000, nodes=20 <= 300.000000)
                                                                                        @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.209949, bonus=1.000000, nodes=5)
                                                                                      @ 36  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000000, probability=0.209949, bonus=1.000000, nodes=8)
                                                                                        @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=0.209949, bonus=1.000000, nodes=9)
                            @ 3  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                                                                                        @ 12  java.lang.StringLatin1.charAt(byte[], int):char (15 bytes)   relevance-based (relevance=1.000000, probability=0.209949, bonus=1.000000, nodes=11 <= 300.000000)
                                                                                      @ 50  java.lang.String.charAt(int):char (25 bytes)   relevance-based (relevance=1.000000, probability=0.209949, bonus=1.000000, nodes=16 <= 300.000000)
                                                                                    @ 59  sun.reflect.generics.parser.SignatureParser.current():char (59 bytes)   relevance-based (relevance=1.000000, probability=0.209949, bonus=1.000000, nodes=31 <= 300.000000)
                                                                                  @ 5  sun.reflect.generics.parser.SignatureParser.skipIdentifier():void (67 bytes)   relevance-based (relevance=1.000000, probability=0.025484, bonus=1.000000, nodes=105 <= 300.000000)
                                                                                      @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.141679, bonus=1.000000, nodes=5)
                                                                                    @ 36  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000000, probability=0.141679, bonus=1.000000, nodes=8)
                                                                                      @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=0.141679, bonus=1.000000, nodes=9)
                            @ 3  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                                                                                      @ 12  java.lang.StringLatin1.charAt(byte[], int):char (15 bytes)   relevance-based (relevance=1.000000, probability=0.141679, bonus=1.000000, nodes=11 <= 300.000000)
                                                                                    @ 50  java.lang.String.charAt(int):char (25 bytes)   relevance-based (relevance=1.000000, probability=0.141679, bonus=1.000000, nodes=16 <= 300.000000)
                                                                                  @ 9  sun.reflect.generics.parser.SignatureParser.current():char (59 bytes)   relevance-based (relevance=1.219317, probability=0.141679, bonus=1.000000, nodes=31 <= 300.000000)
                                                                                        @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.025484, bonus=1.000000, nodes=5)
                                                                                      @ 1  java.lang.String.length():int (11 bytes)   trivial (relevance=1.179302, probability=0.025484, bonus=1.000000, nodes=8)
                                                                                        @ 6  jdk.internal.util.Preconditions.checkFromToIndex(int, int, int, BiFunction):int (24 bytes)   relevance-based (relevance=1.000000, probability=0.025484, bonus=1.000000, nodes=14 <= 300.000000)
                                                                                      @ 8  java.lang.String.checkBoundsBeginEnd(int, int, int):void (11 bytes)   relevance-based (relevance=1.179302, probability=0.025484, bonus=1.000000, nodes=13 <= 300.000000)
                                                                                      @ 28  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.098893, probability=0.023746, bonus=1.000000, nodes=9)
                            @ 20  java.lang.String.<init>(byte[], byte):void (15 bytes)   inline method (bytecode parsing)
                            @ 13  java.util.Arrays.copyOfRangeByte(byte[], int, int):byte[] (33 bytes)   inline method (bytecode parsing)
                              @ 2  java.util.Arrays.checkLength(int, int):void (38 bytes)   inline method (bytecode parsing)
                                                                                          @ 24  java.lang.Math.min(int, int):int (11 bytes)   trivial (relevance=1.556665, probability=0.019004, bonus=1.000000, nodes=7)
                                                                                        @ 16  java.util.Arrays.copyOfRange(byte[], int, int):byte[] (25 bytes)   relevance-based (relevance=1.000000, probability=0.023736, bonus=1.000000, nodes=44 <= 300.000000)
                                                                                      @ 41  java.lang.StringLatin1.newString(byte[], int, int):String (24 bytes)   relevance-based (relevance=1.098811, probability=0.023744, bonus=1.000000, nodes=62 <= 300.000000)
                            @ 31  java.lang.String.<init>(byte[], byte):void (15 bytes)   inline method (bytecode parsing)
                            @ 54  java.lang.String.<init>(byte[], byte):void (15 bytes)   inline method (bytecode parsing)
                                                                                      @ 54  java.lang.StringUTF16.newString(byte[], int, int):String (58 bytes)   not inlining relevance-based (relevance=0.000082, probability=0.000002, bonus=1.000000, nodes=41 > 0.024677)
                                                                                    @ 12  java.lang.String.substring(int, int):String (58 bytes)   relevance-based (relevance=1.000000, probability=0.025484, bonus=1.000000, nodes=98 <= 300.000000)
                                                                                  @ 29  sun.reflect.generics.parser.SignatureParser.markToCurrent():String (16 bytes)   relevance-based (relevance=1.000000, probability=0.025484, bonus=1.000000, nodes=103 <= 300.000000)
                                                                                    @ 6  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000139, probability=0.025483, bonus=1.000000, nodes=9)
                            @ 49  java.lang.StringConcatHelper.newArray(long):byte[] (40 bytes)   inline method (bytecode parsing)
                            @ 123  java.lang.String.<init>(byte[], byte):void (15 bytes)   inline method (bytecode parsing)
                                                                                    @ 18  java.lang.StringLatin1.replace(byte[], char, char):String (198 bytes)   not inlining too large previous low-level graph (low-level-nodes: 345, relevance=1.000139, probability=0.025483, bonus=1.000000, nodes=96)
                                                                                  @ 36  java.lang.String.replace(char, char):String (42 bytes)   relevance-based (relevance=0.999993, probability=0.025483, bonus=1.000000, nodes=19 <= 299.997763)
                                @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=1.698131, bonus=1.000000, nodes=9)
                            @ 3  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                                @ 12  java.lang.StringLatin1.charAt(byte[], int):char (15 bytes)   relevance-based (relevance=1.000000, probability=1.698131, bonus=1.000000, nodes=11 <= 300.000000)
                              @ 21  java.lang.String.charAt(int):char (25 bytes)   relevance-based (relevance=1.698232, probability=1.698131, bonus=1.000000, nodes=16 <= 300.000000)
                                                                                      @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=0.999993, probability=0.025483, bonus=1.000000, nodes=5)
                                                                                    @ 36  java.lang.String.length():int (11 bytes)   trivial (relevance=0.999993, probability=0.025483, bonus=1.000000, nodes=8)
                                @ 5  java.util.regex.Pattern.lambda$Single$14(int, int):boolean (11 bytes)   trivial (relevance=0.894390, probability=0.496417, bonus=1.000000, nodes=9)
                                                                                      @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=0.999993, probability=0.025483, bonus=1.000000, nodes=9)
                            @ 3  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                                  @ 8  java.util.regex.ASCII.isDigit(int):boolean (18 bytes)   relevance-based (relevance=1.000000, probability=0.942576, bonus=1.000000, nodes=13 <= 300.000000)
                                @ 1  java.util.regex.CharPredicates.lambda$ASCII_DIGIT$18(int):boolean (20 bytes)   relevance-based (relevance=1.000000, probability=0.942576, bonus=1.000000, nodes=16 <= 300.000000)
                                                                                      @ 12  java.lang.StringLatin1.charAt(byte[], int):char (15 bytes)   relevance-based (relevance=0.999993, probability=0.025483, bonus=1.000000, nodes=11 <= 299.997763)
                              @ 26  java.util.regex.CharPredicates$$Lambda/0x800000034.is(int):boolean (5 bytes)   relevance-based (relevance=1.698232, probability=1.698131, bonus=1.000000, nodes=33 <= 300.000000)
                                                                                    @ 50  java.lang.String.charAt(int):char (25 bytes)   relevance-based (relevance=0.999993, probability=0.025483, bonus=1.000000, nodes=16 <= 299.997763)
                                                                                  @ 41  sun.reflect.generics.parser.SignatureParser.current():char (59 bytes)   relevance-based (relevance=0.999993, probability=0.025483, bonus=1.000000, nodes=31 <= 299.997763)
                                                                                @ 54  sun.reflect.generics.parser.SignatureParser.parsePackageNameAndSimpleClassTypeSignature():SimpleClassTypeSignature (119 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.025484, bonus=1.000000, nodes=311 > 300.000000)
                                                                                @ 57  java.util.ArrayList.add(Object):boolean (25 bytes)   not inlining too large previous low-level graph (low-level-nodes: 472, relevance=1.000000, probability=0.025484, bonus=1.000000, nodes=15)
                                                                                      @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.025484, bonus=1.000000, nodes=5)
                                                                                    @ 36  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000000, probability=0.025484, bonus=1.000000, nodes=8)
                                  @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=0.282549, bonus=1.000000, nodes=9)
                                                                                      @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=0.025484, bonus=1.000000, nodes=9)
                            @ 3  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                            @ 3  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                                                                                      @ 12  java.lang.StringLatin1.charAt(byte[], int):char (15 bytes)   relevance-based (relevance=1.000000, probability=0.025484, bonus=1.000000, nodes=11 <= 300.000000)
                                  @ 12  java.lang.StringLatin1.charAt(byte[], int):char (15 bytes)   relevance-based (relevance=1.000000, probability=0.282549, bonus=1.000000, nodes=11 <= 300.000000)
                                                                                    @ 50  java.lang.String.charAt(int):char (25 bytes)   relevance-based (relevance=1.000000, probability=0.025484, bonus=1.000000, nodes=16 <= 300.000000)
                                @ 14  java.lang.String.charAt(int):char (25 bytes)   relevance-based (relevance=1.712317, probability=0.282549, bonus=1.000000, nodes=16 <= 300.000000)
                                                                                  @ 1  sun.reflect.generics.parser.SignatureParser.current():char (59 bytes)   relevance-based (relevance=1.000000, probability=0.025484, bonus=1.000000, nodes=31 <= 300.000000)
                                                                                @ 65  sun.reflect.generics.parser.SignatureParser.parseClassTypeSignatureSuffix(List):void (29 bytes)   relevance-based (relevance=1.000000, probability=0.025484, bonus=1.000000, nodes=35 <= 300.000000)
                                                                                    @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.025484, bonus=1.000000, nodes=5)
                                                                                  @ 36  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000000, probability=0.025484, bonus=1.000000, nodes=8)
                            @ 9  java.util.regex.Pattern.lambda$Range$17(int, int, int):boolean (7 bytes)   inline method (bytecode parsing)
                                                                                    @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=0.025484, bonus=1.000000, nodes=9)
                                      @ 3  java.util.regex.Pattern.inRange(int, int, int):boolean (16 bytes)   relevance-based (relevance=0.468008, probability=0.024966, bonus=1.000000, nodes=11 <= 140.402356)
                            @ 3  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                                                                                    @ 12  java.lang.StringLatin1.charAt(byte[], int):char (15 bytes)   relevance-based (relevance=1.000000, probability=0.025484, bonus=1.000000, nodes=11 <= 300.000000)
                                                                                  @ 50  java.lang.String.charAt(int):char (25 bytes)   relevance-based (relevance=1.000000, probability=0.025484, bonus=1.000000, nodes=16 <= 300.000000)
                                                                                @ 69  sun.reflect.generics.parser.SignatureParser.current():char (59 bytes)   relevance-based (relevance=1.000000, probability=0.025484, bonus=1.000000, nodes=31 <= 300.000000)
                                                                                    @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.025484, bonus=1.000000, nodes=5)
                                                                                  @ 36  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000000, probability=0.025484, bonus=1.000000, nodes=8)
                            @ 9  java.util.regex.Pattern.lambda$Range$17(int, int, int):boolean (7 bytes)   inline method (bytecode parsing)
                                                                                @ 110  sun.reflect.generics.parser.SignatureParser.advance():void (53 bytes)   relevance-based (relevance=1.000000, probability=0.025484, bonus=1.000000, nodes=20 <= 300.000000)
                                                                              @ 41  sun.reflect.generics.parser.SignatureParser.parseClassTypeSignature():ClassTypeSignature (118 bytes)   relevance-based (relevance=1.000000, probability=0.025484, bonus=1.000000, nodes=144 <= 300.000000)
                                          @ 3  java.util.regex.Pattern.inRange(int, int, int):boolean (16 bytes)   relevance-based (relevance=0.468008, probability=0.012483, bonus=1.000000, nodes=11 <= 140.402356)
                                                                            @ 2  sun.reflect.generics.parser.SignatureParser.parseFieldTypeSignature(boolean):FieldTypeSignature (73 bytes)   relevance-based (relevance=1.000000, probability=0.025484, bonus=1.000000, nodes=174 <= 300.000000)
                            @ 9  java.util.regex.Pattern.lambda$Range$17(int, int, int):boolean (7 bytes)   inline method (bytecode parsing)
                                              @ 3  java.util.regex.Pattern.inRange(int, int, int):boolean (16 bytes)   relevance-based (relevance=0.468008, probability=0.006241, bonus=1.000000, nodes=11 <= 140.402356)
                                                                          @ 6  sun.reflect.generics.parser.SignatureParser.parseTypeSignature():TypeSignature (130 bytes)   relevance-based (relevance=1.030610, probability=0.025484, bonus=1.000000, nodes=205 <= 300.000000)
                            @ 9  java.util.regex.Pattern.lambda$Range$17(int, int, int):boolean (7 bytes)   inline method (bytecode parsing)
                                                  @ 3  java.util.regex.Pattern.inRange(int, int, int):boolean (16 bytes)   relevance-based (relevance=0.468008, probability=0.003121, bonus=1.000000, nodes=11 <= 140.402356)
                                                                          @ 6  sun.reflect.generics.factory.CoreReflectionFactory.<init>(GenericDeclaration, Scope):void (15 bytes)   relevance-based (relevance=1.030610, probability=0.025484, bonus=1.000000, nodes=11 <= 300.000000)
                            @ 9  java.util.regex.Pattern.lambda$Range$17(int, int, int):boolean (7 bytes)   inline method (bytecode parsing)
                            @ 1  sun.reflect.generics.tree.ClassTypeSignature.getPath():List (5 bytes)   inline accessor method (bytecode parsing)
                                                      @ 3  java.util.regex.Pattern.inRange(int, int, int):boolean (16 bytes)   relevance-based (relevance=0.468008, probability=0.001560, bonus=1.000000, nodes=11 <= 140.402356)
                            @ 52  sun.reflect.generics.tree.SimpleClassTypeSignature.getName():String (5 bytes)   inline accessor method (bytecode parsing)
                            @ 55  java.lang.StringBuilder.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                            @ 62  sun.reflect.generics.tree.SimpleClassTypeSignature.getDollar():boolean (5 bytes)   inline accessor method (bytecode parsing)
                            @ 165  sun.reflect.generics.visitor.Reifier.getFactory():GenericsFactory (5 bytes)   inline accessor method (bytecode parsing)
                            @ 170  java.lang.StringBuilder.toString():String (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.String.<init>(StringBuilder):void (7 bytes)   inline method (bytecode parsing)
                                                      @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   not inlining it exceeds the maximum recursive inlining depth
                            @ 182  sun.reflect.generics.tree.SimpleClassTypeSignature.getTypeArguments():TypeArgument[] (5 bytes)   inline accessor method (bytecode parsing)
                                                      @ 2  java.util.regex.Pattern$CharPredicate.is(int):boolean (0 bytes)   not inlining it is a polymorphic method call and at least one invoked method cannot be inlined
                                                      @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.468008, probability=0.001560, bonus=1.000000, nodes=13 <= 140.402356)
                                                    @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   relevance-based (relevance=0.468008, probability=0.003121, bonus=1.000000, nodes=27 <= 140.402356)
                                                  @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.468008, probability=0.003121, bonus=1.000000, nodes=39 <= 140.402356)
                                                                                @ 5  java.util.ArrayList$Itr.<init>(ArrayList):void (26 bytes)   relevance-based (relevance=1.000000, probability=0.025484, bonus=1.000000, nodes=15 <= 300.000000)
                                                @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   relevance-based (relevance=0.468008, probability=0.006241, bonus=1.000000, nodes=52 <= 140.402356)
                                                                              @ 29  java.util.ArrayList.iterator():Iterator (9 bytes)   relevance-based (relevance=1.000000, probability=0.025484, bonus=1.000000, nodes=16 <= 300.000000)
                                              @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.468008, probability=0.006241, bonus=1.000000, nodes=61 <= 140.402356)
                                                                                @ 1  java.util.ArrayList$Itr.checkForComodification():void (23 bytes)   trivial (relevance=1.000000, probability=0.025484, bonus=1.000000, nodes=9)
                                                                              @ 36  java.util.ArrayList$Itr.next():Object (66 bytes)   relevance-based (relevance=1.000000, probability=0.025484, bonus=1.000000, nodes=25 <= 300.000000)
                                                                                  @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.025484, bonus=1.000000, nodes=5)
                                                                                @ 5  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000000, probability=0.025484, bonus=1.000000, nodes=8)
                                                                                @ 26  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.025484, bonus=1.000000, nodes=5)
                                            @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   relevance-based (relevance=0.468008, probability=0.012483, bonus=1.000000, nodes=74 <= 140.402356)
                            @ 2  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                                          @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.468008, probability=0.012483, bonus=1.000000, nodes=83 <= 140.402356)
                                                                                  @ 2  java.lang.AbstractStringBuilder.append(String):AbstractStringBuilder (45 bytes)   not inlining too large previous low-level graph (low-level-nodes: 368, relevance=1.000000, probability=0.025484, bonus=1.000000, nodes=23)
                                                                                @ 58  java.lang.StringBuilder.append(String):AbstractStringBuilder (6 bytes)   trivial (relevance=1.000000, probability=0.025484, bonus=1.000000, nodes=9)
                                                                              @ 2  java.lang.AbstractStringBuilder.<init>(String):void (63 bytes)   relevance-based (relevance=1.000000, probability=0.025484, bonus=1.000000, nodes=33 <= 300.000000)
                                        @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   relevance-based (relevance=0.468008, probability=0.024966, bonus=1.000000, nodes=96 <= 140.402356)
                                                                              @ 68  java.util.ArrayList$Itr.hasNext():boolean (20 bytes)   relevance-based (relevance=1.000000, probability=0.025484, bonus=1.000000, nodes=11 <= 300.000000)
                            @ 5  java.lang.AbstractStringBuilder.getValue():byte[] (5 bytes)   inline accessor method (bytecode parsing)
                                      @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.468008, probability=0.024966, bonus=1.000000, nodes=105 <= 140.402356)
                                                                              @ 3  java.lang.String.<init>(AbstractStringBuilder, Void):void (99 bytes)   not inlining too large previous low-level graph (low-level-nodes: 376, relevance=1.000000, probability=0.025484, bonus=1.000000, nodes=41)
                                    @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   relevance-based (relevance=0.468008, probability=0.049931, bonus=1.000000, nodes=118 <= 140.402356)
                            @ 17  java.lang.Class.getClassLoader():ClassLoader (28 bytes)   inline method (bytecode parsing)
                                  @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.468008, probability=0.049931, bonus=1.000000, nodes=127 <= 140.402356)
                                                                                    @ 0  java.lang.System.allowSecurityManager():boolean (13 bytes)   trivial (relevance=1.000769, probability=0.016443, bonus=1.000000, nodes=8)
                                                                                  @ 11  java.lang.System.getSecurityManager():SecurityManager (12 bytes)   relevance-based (relevance=1.000000, probability=0.016443, bonus=1.000000, nodes=14 <= 300.000000)
                                                                                @ 3  sun.reflect.generics.factory.CoreReflectionFactory.getDeclsLoader():ClassLoader (85 bytes)   relevance-based (relevance=1.000000, probability=0.025484, bonus=1.000000, nodes=42 <= 300.000000)
                                  @ 5  java.util.regex.Pattern.lambda$Single$14(int, int):boolean (11 bytes)   trivial (relevance=1.000000, probability=0.182686, bonus=1.000000, nodes=9)
                                @ 19  java.util.regex.Pattern$$Lambda/0x800000038.is(int):boolean (9 bytes)   relevance-based (relevance=1.712317, probability=0.282549, bonus=1.000000, nodes=145 <= 300.000000)
                                                                                    @ 0  java.lang.System.allowSecurityManager():boolean (13 bytes)   trivial (relevance=1.000769, probability=0.025484, bonus=1.000000, nodes=8)
                                                                                  @ 2  java.lang.System.getSecurityManager():SecurityManager (12 bytes)   relevance-based (relevance=1.000000, probability=0.025484, bonus=1.000000, nodes=14 <= 300.000000)
                                                                                      @ 0  java.lang.System.allowSecurityManager():boolean (13 bytes)   trivial (relevance=1.000769, probability=0.025484, bonus=1.000000, nodes=8)
                                                                                    @ 0  java.lang.System.getSecurityManager():SecurityManager (12 bytes)   relevance-based (relevance=1.000000, probability=0.025484, bonus=1.000000, nodes=14 <= 300.000000)
                 n                                                                @ 37  java.lang.Class.forName0(String, boolean, ClassLoader, Class):Class (0 bytes)   not inlining it is a non-intrinsic native method
                                                                                  @ 20  java.lang.Class.forName(String, boolean, ClassLoader, Class):Class (41 bytes)   relevance-based (relevance=1.000769, probability=0.025484, bonus=1.000000, nodes=27 <= 300.000000)
                                                                                @ 6  java.lang.Class.forName(String, boolean, ClassLoader):Class (24 bytes)   relevance-based (relevance=1.551003, probability=0.025484, bonus=1.000000, nodes=44 <= 300.000000)
                                                                              @ 173  sun.reflect.generics.factory.CoreReflectionFactory.makeNamedType(String):Type (21 bytes)   relevance-based (relevance=1.000000, probability=0.025484, bonus=1.000000, nodes=82 <= 300.000000)
                                                                            @ 2  sun.reflect.generics.visitor.Reifier.visitClassTypeSignature(ClassTypeSignature):void (381 bytes)   relevance-based (relevance=1.000000, probability=0.025484, bonus=1.000000, nodes=184 <= 300.000000)
                                                                          @ 44  sun.reflect.generics.tree.ClassTypeSignature.accept(TypeTreeVisitor):void (8 bytes)   relevance-based (relevance=1.030610, probability=0.025484, bonus=1.000000, nodes=185 <= 300.000000)
                                                                        @ 27  sun.reflect.annotation.AnnotationParser.parseSig(String, Class):Class (62 bytes)   not inlining relevance-based (relevance=1.000170, probability=0.025484, bonus=1.000000, nodes=456 > 300.000000)
                            @ 0  jdk.internal.access.SharedSecrets.getJavaLangAccess():JavaLangAccess (4 bytes)   inline method (bytecode parsing)
                                    @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=0.463049, probability=0.035932, bonus=1.000000, nodes=9)
                            @ 1  java.lang.Class.getAnnotationType():AnnotationType (5 bytes)   inline accessor method (bytecode parsing)
                                                                          @ 6  java.lang.System$2.getAnnotationType(Class):AnnotationType (5 bytes)   relevance-based (relevance=1.002802, probability=0.025484, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 3  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                            @ 17  java.lang.IllegalArgumentException.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                                    @ 12  java.lang.StringLatin1.charAt(byte[], int):char (15 bytes)   relevance-based (relevance=0.463049, probability=0.035932, bonus=1.000000, nodes=11 <= 138.914776)
                              @ 2  java.lang.RuntimeException.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                                @ 2  java.lang.Exception.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                                  @ 21  java.lang.String.charAt(int):char (25 bytes)   relevance-based (relevance=0.463049, probability=0.035932, bonus=1.000000, nodes=16 <= 138.914776)
                            @ 27  sun.reflect.annotation.AnnotationType$1.<init>(AnnotationType, Class):void (10 bytes)   inline method (bytecode parsing)
                            @ 30  java.security.AccessController.doPrivileged(PrivilegedAction):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.security.AccessController.executePrivileged(PrivilegedAction, AccessControlContext, Class):Object (65 bytes)   inline method (bytecode parsing)
                                @ 29  sun.reflect.annotation.AnnotationType$1.run():Object (5 bytes)   inline method (bytecode parsing)
                                  @ 1  sun.reflect.annotation.AnnotationType$1.run():Method[] (8 bytes)   inline method (bytecode parsing)
                            @ 59  java.util.HashMap.<init>(int):void (8 bytes)   inline method (bytecode parsing)
                            @ 105  java.lang.reflect.Method.getModifiers():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 116  java.lang.reflect.Method.getModifiers():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 127  java.lang.reflect.Method.isSynthetic():boolean (5 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.reflect.Executable.isSynthetic():boolean (8 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.reflect.Method.getModifiers():int (5 bytes)   inline accessor method (bytecode parsing)
                                    @ 5  java.util.regex.Pattern.lambda$Single$14(int, int):boolean (11 bytes)   trivial (relevance=0.243869, probability=0.010504, bonus=1.000000, nodes=9)
                            @ 135  java.lang.reflect.Method.getParameterCount():int (6 bytes)   inline method (bytecode parsing)
                            @ 171  java.lang.reflect.Method.getName():String (5 bytes)   inline accessor method (bytecode parsing)
                            @ 178  java.lang.reflect.Method.getReturnType():Class (5 bytes)   inline accessor method (bytecode parsing)
                            @ 149  java.lang.StringBuilder.<init>():void (7 bytes)   inline method (bytecode parsing)
                            @ 154  java.lang.StringBuilder.append(Object):StringBuilder (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 159  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 162  java.lang.StringBuilder.toString():String (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.String.<init>(StringBuilder):void (7 bytes)   inline method (bytecode parsing)
                                      @ 8  java.util.regex.ASCII.isDigit(int):boolean (18 bytes)   relevance-based (relevance=0.463049, probability=0.019945, bonus=1.000000, nodes=13 <= 138.914776)
                            @ 165  java.lang.IllegalArgumentException.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  java.lang.RuntimeException.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                                @ 2  java.lang.Exception.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                                    @ 1  java.util.regex.CharPredicates.lambda$ASCII_DIGIT$18(int):boolean (20 bytes)   relevance-based (relevance=0.463049, probability=0.019945, bonus=1.000000, nodes=16 <= 138.914776)
                            @ 258  jdk.internal.access.SharedSecrets.getJavaLangAccess():JavaLangAccess (4 bytes)   inline method (bytecode parsing)
                                  @ 26  java.util.regex.CharPredicates$$Lambda/0x800000034.is(int):boolean (5 bytes)   relevance-based (relevance=0.463049, probability=0.035932, bonus=1.000000, nodes=33 <= 138.914776)
                                @ 36  java.util.regex.Pattern$GroupTail.match(Matcher, int, CharSequence):boolean (111 bytes)   not inlining relevance-based (relevance=0.643395, probability=0.117539, bonus=1.000000, nodes=202 > 193.018452)
                                                                          @ 21  sun.reflect.annotation.AnnotationType.<init>(Class):void (361 bytes)   not inlining relevance-based (relevance=0.002802, probability=0.000071, bonus=1.000000, nodes=244 > 0.840650)
                            @ 3  java.lang.Class.casAnnotationType(AnnotationType, AnnotationType):boolean (7 bytes)   inline method (bytecode parsing)
                                                                          @ 29  java.lang.System$2.casAnnotationType(Class, AnnotationType, AnnotationType):boolean (7 bytes)   not inlining relevance-based (relevance=0.002802, probability=0.000071, bonus=1.000000, nodes=13 > 0.840650)
                                                                        @ 103  sun.reflect.annotation.AnnotationType.getInstance(Class):AnnotationType (65 bytes)   relevance-based (relevance=1.000170, probability=0.025484, bonus=1.000000, nodes=37 <= 300.000000)
                            @ 1  java.util.AbstractMap.<init>():void (5 bytes)   inline method (bytecode parsing)
                                                                          @ 1  java.util.HashMap.<init>():void (11 bytes)   trivial (relevance=1.000000, probability=0.025484, bonus=1.000000, nodes=8)
                                          @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=0.110000, bonus=1.000000, nodes=9)
                            @ 3  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                                                                            @ 4  java.util.Map.size():int (0 bytes)   not inlining no type profile exists
                                                                            @ 1  java.util.HashMap.size():int (5 bytes)   relevance-based (relevance=1.637394, probability=0.025484, bonus=1.000000, nodes=13 <= 300.000000)
                                          @ 12  java.lang.StringLatin1.charAt(byte[], int):char (15 bytes)   relevance-based (relevance=1.000000, probability=0.110000, bonus=1.000000, nodes=11 <= 300.000000)
                                        @ 14  java.lang.String.charAt(int):char (25 bytes)   relevance-based (relevance=1.712317, probability=0.110000, bonus=1.000000, nodes=16 <= 300.000000)
                                                                            @ 62  java.util.HashMap.tableSizeFor(int):int (32 bytes)   relevance-based (relevance=0.269454, probability=0.005740, bonus=1.000000, nodes=23 <= 80.836093)
                            @ 15  java.util.HashMap$EntrySet.<init>(HashMap):void (10 bytes)   inline method (bytecode parsing)
                              @ 6  java.util.AbstractSet.<init>():void (5 bytes)   inline method (bytecode parsing)
                                @ 1  java.util.AbstractCollection.<init>():void (5 bytes)   inline method (bytecode parsing)
                            @ 21  java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet.<init>(Set):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  java.util.Collections$UnmodifiableSet.<init>(Set):void (6 bytes)   inline method (bytecode parsing)
                            @ 9  java.util.regex.Pattern.lambda$Range$17(int, int, int):boolean (7 bytes)   inline method (bytecode parsing)
                                                                            @ 16  java.util.Map.entrySet():Set (0 bytes)   not inlining no type profile exists
                                              @ 3  java.util.regex.Pattern.inRange(int, int, int):boolean (16 bytes)   relevance-based (relevance=0.468008, probability=0.009719, bonus=1.000000, nodes=11 <= 140.402356)
                                                                              @ 2  java.util.Collections$UnmodifiableCollection.<init>(Collection):void (22 bytes)   relevance-based (relevance=0.338003, probability=0.002086, bonus=1.000000, nodes=10 <= 101.400946)
                                                                            @ 98  java.util.HashMap.entrySet():Set (27 bytes)   relevance-based (relevance=0.465646, probability=0.009920, bonus=1.000000, nodes=50 <= 139.693709)
                            @ 9  java.util.regex.Pattern.lambda$Range$17(int, int, int):boolean (7 bytes)   inline method (bytecode parsing)
                            @ 8  java.util.HashMap$EntryIterator.<init>(HashMap):void (6 bytes)   inline method (bytecode parsing)
                                                  @ 3  java.util.regex.Pattern.inRange(int, int, int):boolean (16 bytes)   relevance-based (relevance=0.468008, probability=0.004860, bonus=1.000000, nodes=11 <= 140.402356)
                                                                              @ 17  java.util.Collection.iterator():Iterator (0 bytes)   not inlining no type profile exists
                                                                              @ 5  java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1.<init>(Collections$UnmodifiableMap$UnmodifiableEntrySet):void (26 bytes)   relevance-based (relevance=0.338003, probability=0.004172, bonus=1.000000, nodes=15 <= 101.400946)
                            @ 9  java.util.regex.Pattern.lambda$Range$17(int, int, int):boolean (7 bytes)   inline method (bytecode parsing)
                                                      @ 3  java.util.regex.Pattern.inRange(int, int, int):boolean (16 bytes)   relevance-based (relevance=0.468008, probability=0.002430, bonus=1.000000, nodes=11 <= 140.402356)
                                                                              @ 2  java.util.HashMap$HashIterator.<init>(HashMap):void (79 bytes)   not inlining too large previous low-level graph (low-level-nodes: 409, relevance=0.465646, probability=0.005748, bonus=1.000000, nodes=58)
                                                                            @ 103  java.util.HashMap$EntrySet.iterator():Iterator (12 bytes)   relevance-based (relevance=0.465646, probability=0.009920, bonus=1.000000, nodes=26 <= 139.693709)
                            @ 9  java.util.regex.Pattern.lambda$Range$17(int, int, int):boolean (7 bytes)   inline method (bytecode parsing)
                                                          @ 3  java.util.regex.Pattern.inRange(int, int, int):boolean (16 bytes)   relevance-based (relevance=0.468008, probability=0.001215, bonus=1.000000, nodes=11 <= 140.402356)
                            @ 9  java.util.regex.Pattern.lambda$Range$17(int, int, int):boolean (7 bytes)   inline method (bytecode parsing)
                                                              @ 3  java.util.regex.Pattern.inRange(int, int, int):boolean (16 bytes)   relevance-based (relevance=0.468008, probability=0.000607, bonus=1.000000, nodes=11 <= 140.402356)
                                                              @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   not inlining it exceeds the maximum recursive inlining depth
                                                              @ 2  java.util.regex.Pattern$CharPredicate.is(int):boolean (0 bytes)   not inlining it is a polymorphic method call and at least one invoked method cannot be inlined
                                                              @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.468008, probability=0.000607, bonus=1.000000, nodes=13 <= 140.402356)
                                                            @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   relevance-based (relevance=0.468008, probability=0.001215, bonus=1.000000, nodes=27 <= 140.402356)
                                                          @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.468008, probability=0.001215, bonus=1.000000, nodes=39 <= 140.402356)
                                                        @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   relevance-based (relevance=0.468008, probability=0.002430, bonus=1.000000, nodes=52 <= 140.402356)
                                                      @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.468008, probability=0.002430, bonus=1.000000, nodes=61 <= 140.402356)
                                                                              @ 4  java.util.HashMap$HashIterator.hasNext():boolean (13 bytes)   trivial (relevance=0.576359, probability=0.029206, bonus=1.000000, nodes=9)
                                                    @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   relevance-based (relevance=0.468008, probability=0.004860, bonus=1.000000, nodes=74 <= 140.402356)
                                                                            @ 112  java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1.hasNext():boolean (10 bytes)   relevance-based (relevance=0.576359, probability=0.051643, bonus=1.000000, nodes=27 <= 172.907803)
                                                  @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.468008, probability=0.004860, bonus=1.000000, nodes=83 <= 140.402356)
                            @ 1  java.util.HashMap$EntryIterator.next():Map$Entry (5 bytes)   inline method (bytecode parsing)
                                                @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   relevance-based (relevance=0.468008, probability=0.009719, bonus=1.000000, nodes=96 <= 140.402356)
                                              @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.468008, probability=0.009719, bonus=1.000000, nodes=105 <= 140.402356)
                                                                              @ 1  java.util.HashMap$HashIterator.nextNode():HashMap$Node (100 bytes)   not inlining too large previous low-level graph (low-level-nodes: 450, relevance=0.443472, probability=0.016689, bonus=1.000000, nodes=53)
                                            @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   relevance-based (relevance=0.468008, probability=0.019439, bonus=1.000000, nodes=118 <= 140.402356)
                            @ 1  java.util.HashMap$EntryIterator.next():Map$Entry (5 bytes)   inline method (bytecode parsing)
                                          @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.468008, probability=0.019439, bonus=1.000000, nodes=127 <= 140.402356)
                                                                                  @ 1  java.util.HashMap$HashIterator.nextNode():HashMap$Node (100 bytes)   not inlining too large previous low-level graph (low-level-nodes: 450, relevance=0.665208, probability=0.025034, bonus=1.000000, nodes=53)
                                                                                @ 8  java.util.HashMap$EntryIterator.next():Object (5 bytes)   trivial (relevance=0.665208, probability=0.025034, bonus=1.000000, nodes=8)
                            @ 6  java.util.Objects.requireNonNull(Object):Object (14 bytes)   inline method (bytecode parsing)
                                          @ 5  java.util.regex.Pattern.lambda$Single$14(int, int):boolean (11 bytes)   trivial (relevance=1.000000, probability=0.071122, bonus=1.000000, nodes=9)
                                                                                @ 16  java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry.<init>(Map$Entry):void (16 bytes)   trivial (relevance=0.665208, probability=0.025034, bonus=1.000000, nodes=7)
                                        @ 19  java.util.regex.Pattern$$Lambda/0x800000038.is(int):boolean (9 bytes)   relevance-based (relevance=1.712317, probability=0.110000, bonus=1.000000, nodes=145 <= 300.000000)
                                                                              @ 1  java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1.next():Map$Entry (20 bytes)   relevance-based (relevance=0.665208, probability=0.025034, bonus=1.000000, nodes=28 <= 199.562441)
                                                                            @ 122  java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1.next():Object (5 bytes)   relevance-based (relevance=0.665208, probability=0.041723, bonus=1.000000, nodes=37 <= 199.562441)
                                                                              @ 4  java.util.HashMap$Node.getKey():Object (5 bytes)   trivial (relevance=0.665208, probability=0.025034, bonus=1.000000, nodes=5)
                                                                            @ 134  java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry.getKey():Object (10 bytes)   relevance-based (relevance=0.665208, probability=0.041723, bonus=1.000000, nodes=19 <= 199.562441)
                                                                              @ 4  java.util.HashMap$Node.getValue():Object (5 bytes)   trivial (relevance=0.665208, probability=0.025034, bonus=1.000000, nodes=5)
                                                                            @ 143  java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry.getValue():Object (10 bytes)   relevance-based (relevance=0.665208, probability=0.041723, bonus=1.000000, nodes=19 <= 199.562441)
                                                                          @ 17  java.util.HashMap.putMapEntries(Map, boolean):void (170 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.025484, bonus=1.000000, nodes=316 > 300.000000)
                                                                        @ 136  java.util.LinkedHashMap.<init>(Map):void (21 bytes)   relevance-based (relevance=1.000170, probability=0.025484, bonus=1.000000, nodes=19 <= 300.000000)
                            @ 4  java.nio.Buffer.session():MemorySessionImpl (20 bytes)   inline method (bytecode parsing)
                            @ 18  java.nio.HeapByteBuffer.byteOffset(long):long (7 bytes)   inline method (bytecode parsing)
                            @ 25  jdk.internal.misc.ScopedMemoryAccess.getShortUnaligned(MemorySessionImpl, Object, long, boolean):short (18 bytes)   inline method (bytecode parsing)
                              @ 6  jdk.internal.misc.ScopedMemoryAccess.getShortUnalignedInternal(MemorySessionImpl, Object, long, boolean):short (36 bytes)   inline method (bytecode parsing)
                                @ 15  jdk.internal.misc.Unsafe.getShortUnaligned(Object, long, boolean):short (12 bytes)   inline method (bytecode parsing)
                                                                          @ 14  java.nio.Buffer.nextGetIndex(int):int (32 bytes)   relevance-based (relevance=1.000000, probability=0.025484, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=0.463049, probability=0.013989, bonus=1.000000, nodes=9)
                                                                          @ 8  jdk.internal.misc.Unsafe.convEndian(boolean, short):short (16 bytes)   relevance-based (relevance=1.000000, probability=0.025484, bonus=1.000000, nodes=20 <= 300.000000)
                            @ 3  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                                                                        @ 142  java.nio.HeapByteBuffer.getShort():short (29 bytes)   relevance-based (relevance=1.000170, probability=0.025484, bonus=1.000000, nodes=44 <= 300.000000)
                                            @ 12  java.lang.StringLatin1.charAt(byte[], int):char (15 bytes)   relevance-based (relevance=0.463049, probability=0.013989, bonus=1.000000, nodes=11 <= 138.914776)
                            @ 9  java.security.AccessController.doPrivileged(PrivilegedAction):Object (9 bytes)   inline method (bytecode parsing)
                                          @ 21  java.lang.String.charAt(int):char (25 bytes)   relevance-based (relevance=0.463049, probability=0.013989, bonus=1.000000, nodes=16 <= 138.914776)
                              @ 5  java.security.AccessController.executePrivileged(PrivilegedAction, AccessControlContext, Class):Object (65 bytes)   inline method (bytecode parsing)
                                @ 29  sun.reflect.annotation.AnnotationParser$1.run():Object (5 bytes)   inline method (bytecode parsing)
                                                                          @ 6  sun.reflect.annotation.AnnotationParser$1.<init>(Class, Map):void (15 bytes)   relevance-based (relevance=1.000000, probability=0.025484, bonus=1.000000, nodes=11 <= 300.000000)
                            @ 4  java.lang.Class.getClassLoader():ClassLoader (28 bytes)   inline method (bytecode parsing)
                                            @ 5  java.util.regex.Pattern.lambda$Single$14(int, int):boolean (11 bytes)   trivial (relevance=0.243869, probability=0.004089, bonus=1.000000, nodes=9)
                                              @ 8  java.util.regex.ASCII.isDigit(int):boolean (18 bytes)   relevance-based (relevance=0.463049, probability=0.007765, bonus=1.000000, nodes=13 <= 138.914776)
                                                                              @ 0  java.lang.System.allowSecurityManager():boolean (13 bytes)   trivial (relevance=1.000769, probability=0.016443, bonus=1.000000, nodes=8)
                                                                            @ 11  java.lang.System.getSecurityManager():SecurityManager (12 bytes)   relevance-based (relevance=1.000000, probability=0.016443, bonus=1.000000, nodes=14 <= 300.000000)
                                            @ 1  java.util.regex.CharPredicates.lambda$ASCII_DIGIT$18(int):boolean (20 bytes)   relevance-based (relevance=0.463049, probability=0.007765, bonus=1.000000, nodes=16 <= 138.914776)
                                          @ 26  java.util.regex.CharPredicates$$Lambda/0x800000034.is(int):boolean (5 bytes)   relevance-based (relevance=0.463049, probability=0.013989, bonus=1.000000, nodes=33 <= 138.914776)
                            @ 5  java.lang.Class.getInterfaces():Class[] (6 bytes)   inline method (bytecode parsing)
                                        @ 36  java.util.regex.Pattern$GroupTail.match(Matcher, int, CharSequence):boolean (111 bytes)   not inlining relevance-based (relevance=0.643395, probability=0.045759, bonus=1.000000, nodes=202 > 193.018452)
                                          @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=0.186794, bonus=1.000000, nodes=9)
                            @ 3  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                            @ 1  java.lang.ref.Reference.get():Object (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 12  java.lang.StringLatin1.charAt(byte[], int):char (15 bytes)   relevance-based (relevance=1.000000, probability=0.186794, bonus=1.000000, nodes=11 <= 300.000000)
                                                                                  @ 15  java.lang.ref.SoftReference.get():Object (29 bytes)   relevance-based (relevance=1.000000, probability=0.025306, bonus=1.000000, nodes=20 <= 300.000000)
                                        @ 21  java.lang.String.charAt(int):char (25 bytes)   relevance-based (relevance=1.698232, probability=0.186794, bonus=1.000000, nodes=16 <= 300.000000)
                            @ 5  java.lang.Class$ReflectionData.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                                                                                  @ 39  java.lang.Class.newReflectionData(SoftReference, int):Class$ReflectionData (66 bytes)   not inlining relevance-based (relevance=0.007162, probability=0.000178, bonus=1.000000, nodes=61 > 2.148563)
                                                                                @ 1  java.lang.Class.reflectionData():Class$ReflectionData (43 bytes)   relevance-based (relevance=1.004912, probability=0.025484, bonus=1.000000, nodes=45 <= 300.000000)
                                          @ 5  java.util.regex.Pattern.lambda$Single$14(int, int):boolean (11 bytes)   trivial (relevance=0.894390, probability=0.054606, bonus=1.000000, nodes=9)
                 n                                                            @ 24  java.lang.Class.getInterfaces0():Class[] (0 bytes)   not inlining it is a non-intrinsic native method
                                                                              @ 2  java.lang.Class.getInterfaces(boolean):Class[] (49 bytes)   relevance-based (relevance=1.000000, probability=0.025484, bonus=1.000000, nodes=75 <= 300.000000)
                                            @ 8  java.util.regex.ASCII.isDigit(int):boolean (18 bytes)   relevance-based (relevance=1.000000, probability=0.103683, bonus=1.000000, nodes=13 <= 300.000000)
                                          @ 1  java.util.regex.CharPredicates.lambda$ASCII_DIGIT$18(int):boolean (20 bytes)   relevance-based (relevance=1.000000, probability=0.103683, bonus=1.000000, nodes=16 <= 300.000000)
                                                                              @ 10  java.lang.Class.isAnnotation():boolean (17 bytes)   relevance-based (relevance=1.027724, probability=0.025484, bonus=1.000000, nodes=23 <= 300.000000)
                                        @ 26  java.util.regex.CharPredicates$$Lambda/0x800000034.is(int):boolean (5 bytes)   relevance-based (relevance=1.698232, probability=0.186794, bonus=1.000000, nodes=33 <= 300.000000)
                                                                            @ 30  sun.reflect.annotation.AnnotationInvocationHandler.<init>(Class, Map):void (71 bytes)   relevance-based (relevance=1.551003, probability=0.025484, bonus=1.000000, nodes=116 <= 300.000000)
                                      @ 28  java.util.regex.Pattern$BmpCharPropertyGreedy.match(Matcher, int, CharSequence):boolean (89 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.219999, bonus=1.000000, nodes=317 > 300.000000)
                                    @ 50  java.util.regex.Pattern$GroupHead.match(Matcher, int, CharSequence):boolean (47 bytes)   relevance-based (relevance=1.666708, probability=0.219999, bonus=1.000000, nodes=20 <= 300.000000)
                            @ 1  java.util.Objects.requireNonNull(Object):Object (14 bytes)   inline method (bytecode parsing)
                                                                                @ 0  java.lang.System.allowSecurityManager():boolean (13 bytes)   trivial (relevance=1.000769, probability=0.025484, bonus=1.000000, nodes=8)
                                                                              @ 5  java.lang.System.getSecurityManager():SecurityManager (12 bytes)   relevance-based (relevance=1.000000, probability=0.025484, bonus=1.000000, nodes=14 <= 300.000000)
                            @ 31  jdk.internal.loader.AbstractClassLoaderValue.sub(Object):AbstractClassLoaderValue$Sub (10 bytes)   inline method (bytecode parsing)
                              @ 6  jdk.internal.loader.AbstractClassLoaderValue$Sub.<init>(AbstractClassLoaderValue, Object):void (15 bytes)   inline method (bytecode parsing)
                                @ 6  jdk.internal.loader.AbstractClassLoaderValue.<init>():void (5 bytes)   inline method (bytecode parsing)
                            @ 35  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object):Object (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.lang.invoke.LambdaForm$MH/0x00007f45e0000800.invoke(Object):Object (8 bytes)   inline method (bytecode parsing)
                            @ 30  java.util.concurrent.ConcurrentHashMap.putIfAbsent(Object, Object):Object (8 bytes)   inline method (bytecode parsing)
                            @ 4  jdk.internal.loader.BootLoader.getClassLoaderValueMap():ConcurrentHashMap (4 bytes)   inline method (bytecode parsing)
                            @ 14  java.lang.System$2.createOrGetClassLoaderValueMap(ClassLoader):ConcurrentHashMap (5 bytes)   inline method (bytecode parsing)
                                          @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=0.856238, probability=0.022001, bonus=1.000000, nodes=9)
                                                                                    @ 1  java.lang.ClassLoader.createOrGetClassLoaderValueMap():ConcurrentHashMap (37 bytes)   trivial (relevance=1.000000, probability=0.025310, bonus=1.000000, nodes=9)
                                                                                  @ 1  jdk.internal.loader.AbstractClassLoaderValue.map(ClassLoader):ConcurrentHashMap (20 bytes)   relevance-based (relevance=1.000000, probability=0.025484, bonus=1.000000, nodes=23 <= 300.000000)
                            @ 3  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                                          @ 12  java.lang.StringLatin1.charAt(byte[], int):char (15 bytes)   relevance-based (relevance=0.856238, probability=0.022001, bonus=1.000000, nodes=11 <= 256.871437)
                            @ 20  java.util.concurrent.ConcurrentHashMap.spread(int):int (10 bytes)   inline method (bytecode parsing)
                                        @ 14  java.lang.String.charAt(int):char (25 bytes)   relevance-based (relevance=0.856238, probability=0.022001, bonus=1.000000, nodes=16 <= 256.871437)
                            @ 9  java.util.regex.Pattern.lambda$Range$17(int, int, int):boolean (7 bytes)   inline method (bytecode parsing)
                                              @ 3  java.util.regex.Pattern.inRange(int, int, int):boolean (16 bytes)   relevance-based (relevance=0.234026, probability=0.001944, bonus=1.000000, nodes=11 <= 70.207698)
                                                                                  @ 4  java.util.concurrent.ConcurrentHashMap.putVal(Object, Object, boolean):Object (432 bytes)   not inlining relevance-based (relevance=0.002196, probability=0.000056, bonus=1.000000, nodes=181 > 0.658858)
                            @ 4  java.util.concurrent.ConcurrentHashMap.spread(int):int (10 bytes)   inline method (bytecode parsing)
                            @ 9  java.util.regex.Pattern.lambda$Range$17(int, int, int):boolean (7 bytes)   inline method (bytecode parsing)
                                                  @ 3  java.util.regex.Pattern.inRange(int, int, int):boolean (16 bytes)   relevance-based (relevance=0.234026, probability=0.000972, bonus=1.000000, nodes=11 <= 70.207698)
                            @ 3  jdk.internal.loader.AbstractClassLoaderValue$Sub.parent():AbstractClassLoaderValue (5 bytes)   inline accessor method (bytecode parsing)
                            @ 9  java.util.regex.Pattern.lambda$Range$17(int, int, int):boolean (7 bytes)   inline method (bytecode parsing)
                                                      @ 3  java.util.regex.Pattern.inRange(int, int, int):boolean (16 bytes)   relevance-based (relevance=0.234026, probability=0.000486, bonus=1.000000, nodes=11 <= 70.207698)
                 n                                                                    @ 6  java.lang.Object.hashCode():int (0 bytes)   trivial (relevance=1.000000, probability=0.025484, bonus=1.000000, nodes=5)
                            @ 9  java.util.regex.Pattern.lambda$Range$17(int, int, int):boolean (7 bytes)   inline method (bytecode parsing)
                                                          @ 3  java.util.regex.Pattern.inRange(int, int, int):boolean (16 bytes)   relevance-based (relevance=0.234026, probability=0.000243, bonus=1.000000, nodes=11 <= 70.207698)
                            @ 4  java.lang.Long.hashCode(long):int (8 bytes)   inline method (bytecode parsing)
                            @ 9  java.util.regex.Pattern.lambda$Range$17(int, int, int):boolean (7 bytes)   inline method (bytecode parsing)
                            @ 17  java.lang.NullPointerException.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  java.lang.RuntimeException.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                                @ 2  java.lang.Exception.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                                                                                          @ 1  jdk.vm.ci.hotspot.HotSpotResolvedJavaMethodImpl.getMethodPointer():long (23 bytes)   not inlining relevance-based (relevance=0.031228, probability=0.000727, bonus=1.000000, nodes=21 > 9.368346)
                                                              @ 3  java.util.regex.Pattern.inRange(int, int, int):boolean (16 bytes)   relevance-based (relevance=0.234026, probability=0.000121, bonus=1.000000, nodes=11 <= 70.207698)
                                                              @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   not inlining it exceeds the maximum recursive inlining depth
                                                              @ 2  java.util.regex.Pattern$CharPredicate.is(int):boolean (0 bytes)   not inlining it is a polymorphic method call and at least one invoked method cannot be inlined
                                                              @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.234026, probability=0.000121, bonus=1.000000, nodes=13 <= 70.207698)
                                                                                              @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=0.124911, probability=0.000182, bonus=1.000000, nodes=5)
                                                            @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   relevance-based (relevance=0.234026, probability=0.000243, bonus=1.000000, nodes=27 <= 70.207698)
                                                                                            @ 9  java.lang.String.length():int (11 bytes)   trivial (relevance=0.124911, probability=0.000182, bonus=1.000000, nodes=8)
                                                                                          @ 14  java.net.URI.hashIgnoringCase(int, String):int (45 bytes)   not inlining relevance-based (relevance=0.124911, probability=0.000364, bonus=1.000000, nodes=40 > 37.473385)
                            @ 9  java.lang.String.indexOf(int):int (7 bytes)   inline method (bytecode parsing)
                                                          @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.234026, probability=0.000243, bonus=1.000000, nodes=39 <= 70.207698)
                                                        @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   relevance-based (relevance=0.234026, probability=0.000486, bonus=1.000000, nodes=52 <= 70.207698)
                                                                                              @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=0.249823, probability=0.000182, bonus=1.000000, nodes=9)
                                                      @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.234026, probability=0.000486, bonus=1.000000, nodes=61 <= 70.207698)
                                                    @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   not inlining relevance-based (relevance=0.234026, probability=0.000972, bonus=1.000000, nodes=74 > 70.207698)
                                                                                                @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=0.249823, probability=0.000182, bonus=1.000000, nodes=5)
                                                  @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.234026, probability=0.000972, bonus=1.000000, nodes=13 <= 70.207698)
                                                                                              @ 14  java.lang.String.length():int (11 bytes)   trivial (relevance=0.249823, probability=0.000182, bonus=1.000000, nodes=8)
                                                @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   relevance-based (relevance=0.234026, probability=0.001944, bonus=1.000000, nodes=27 <= 70.207698)
                            @ 11  java.lang.Math.max(int, int):int (11 bytes)   inline method (bytecode parsing)
                                              @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.234026, probability=0.001944, bonus=1.000000, nodes=39 <= 70.207698)
                                                                                                @ 1  java.lang.StringLatin1.canEncode(int):boolean (13 bytes)   trivial (relevance=0.249828, probability=0.000182, bonus=1.000000, nodes=5)
                                            @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   relevance-based (relevance=0.234026, probability=0.003888, bonus=1.000000, nodes=52 <= 70.207698)
                                                                                                @ 18  java.lang.Math.min(int, int):int (11 bytes)   trivial (relevance=0.249828, probability=0.000182, bonus=1.000000, nodes=7)
                                                                                              @ 17  java.lang.StringLatin1.indexOf(byte[], int, int, int):int (37 bytes)   relevance-based (relevance=0.249823, probability=0.000182, bonus=1.000000, nodes=18 <= 74.946771)
                                          @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.234026, probability=0.003888, bonus=1.000000, nodes=61 <= 70.207698)
                                                                                            @ 3  java.lang.String.indexOf(int, int):int (37 bytes)   relevance-based (relevance=0.249823, probability=0.000182, bonus=1.000000, nodes=29 <= 74.946771)
                                                                                          @ 23  java.net.URI.hash(int, String):int (33 bytes)   not inlining relevance-based (relevance=0.124911, probability=0.000364, bonus=1.000000, nodes=58 > 37.473385)
                                          @ 5  java.util.regex.Pattern.lambda$Single$14(int, int):boolean (11 bytes)   trivial (relevance=0.856238, probability=0.014225, bonus=1.000000, nodes=9)
                                                                                          @ 28  java.net.URI.isOpaque():boolean (13 bytes)   trivial (relevance=0.124911, probability=0.000364, bonus=1.000000, nodes=9)
                                        @ 19  java.util.regex.Pattern$$Lambda/0x800000038.is(int):boolean (9 bytes)   relevance-based (relevance=0.856238, probability=0.022001, bonus=1.000000, nodes=79 <= 256.871437)
                            @ 9  java.lang.String.indexOf(int):int (7 bytes)   inline method (bytecode parsing)
                                                                                          @ 39  java.net.URI.hash(int, String):int (33 bytes)   not inlining relevance-based (relevance=0.062456, probability=0.000182, bonus=1.000000, nodes=37 > 18.736693)
                                      @ 28  java.util.regex.Pattern$BmpCharPropertyGreedy.match(Matcher, int, CharSequence):boolean (89 bytes)   not inlining relevance-based (relevance=0.500046, probability=0.044001, bonus=1.000000, nodes=205 > 150.013931)
                            @ 9  java.lang.String.indexOf(int):int (7 bytes)   inline method (bytecode parsing)
                                                                                          @ 51  java.net.URI.hash(int, String):int (33 bytes)   not inlining relevance-based (relevance=0.062456, probability=0.000182, bonus=1.000000, nodes=37 > 18.736693)
                            @ 9  java.lang.String.indexOf(int):int (7 bytes)   inline method (bytecode parsing)
                                                                                          @ 60  java.net.URI.hash(int, String):int (33 bytes)   not inlining relevance-based (relevance=0.062456, probability=0.000182, bonus=1.000000, nodes=37 > 18.736693)
                            @ 9  java.lang.String.indexOf(int):int (7 bytes)   inline method (bytecode parsing)
                                                                                          @ 76  java.net.URI.hash(int, String):int (33 bytes)   not inlining relevance-based (relevance=0.031228, probability=0.000091, bonus=1.000000, nodes=37 > 9.368346)
                                                                                          @ 85  java.net.URI.hashIgnoringCase(int, String):int (45 bytes)   not inlining relevance-based (relevance=0.031228, probability=0.000091, bonus=1.000000, nodes=38 > 9.368346)
                            @ 9  java.lang.String.indexOf(int):int (7 bytes)   inline method (bytecode parsing)
                                                                                          @ 108  java.net.URI.hash(int, String):int (33 bytes)   not inlining relevance-based (relevance=0.031228, probability=0.000091, bonus=1.000000, nodes=37 > 9.368346)
                 n                                                                      @ 5  java.lang.Object.hashCode():int (0 bytes)   relevance-based (relevance=1.000000, probability=0.024748, bonus=1.000000, nodes=90 <= 300.000000)
                                            @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=0.043997, bonus=1.000000, nodes=9)
                                                                                      @ 14  java.util.Objects.hashCode(Object):int (13 bytes)   relevance-based (relevance=1.000000, probability=0.025484, bonus=1.000000, nodes=105 <= 300.000000)
                            @ 3  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                                                                                    @ 1  jdk.internal.loader.AbstractClassLoaderValue$Sub.hashCode():int (19 bytes)   relevance-based (relevance=3.959160, probability=0.025484, bonus=1.000000, nodes=122 <= 300.000000)
                                            @ 12  java.lang.StringLatin1.charAt(byte[], int):char (15 bytes)   relevance-based (relevance=1.000000, probability=0.043997, bonus=1.000000, nodes=11 <= 300.000000)
                                          @ 14  java.lang.String.charAt(int):char (25 bytes)   relevance-based (relevance=1.712317, probability=0.043997, bonus=1.000000, nodes=16 <= 300.000000)
                                                                                    @ 34  java.util.concurrent.ConcurrentHashMap.tabAt(ConcurrentHashMap$Node[], int):ConcurrentHashMap$Node (22 bytes)   relevance-based (relevance=1.090921, probability=0.025411, bonus=1.000000, nodes=11 <= 300.000000)
                            @ 9  java.util.regex.Pattern.lambda$Range$17(int, int, int):boolean (7 bytes)   inline method (bytecode parsing)
                            @ 22  jdk.internal.loader.AbstractClassLoaderValue$Sub.parent():AbstractClassLoaderValue (5 bytes)   inline accessor method (bytecode parsing)
                            @ 26  jdk.internal.loader.AbstractClassLoaderValue$Sub.parent():AbstractClassLoaderValue (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 3  java.util.regex.Pattern.inRange(int, int, int):boolean (16 bytes)   relevance-based (relevance=0.468008, probability=0.003888, bonus=1.000000, nodes=11 <= 140.402356)
                                                                                      @ 29  java.lang.Object.equals(Object):boolean (11 bytes)   trivial (relevance=0.276385, probability=0.006438, bonus=1.000000, nodes=9)
                            @ 9  java.util.regex.Pattern.lambda$Range$17(int, int, int):boolean (7 bytes)   inline method (bytecode parsing)
                                                                                      @ 11  java.lang.Object.equals(Object):boolean (11 bytes)   not inlining no methods remaining after filtering less frequent methods (8 methods previously)
                                                                                      @ 43  java.util.Objects.equals(Object, Object):boolean (23 bytes)   relevance-based (relevance=0.276385, probability=0.006438, bonus=1.000000, nodes=24 <= 82.915401)
                                                                                    @ 73  jdk.internal.loader.AbstractClassLoaderValue$Sub.equals(Object):boolean (55 bytes)   relevance-based (relevance=0.276385, probability=0.006438, bonus=1.000000, nodes=51 <= 82.915401)
                                                    @ 3  java.util.regex.Pattern.inRange(int, int, int):boolean (16 bytes)   relevance-based (relevance=0.468008, probability=0.001944, bonus=1.000000, nodes=11 <= 140.402356)
                            @ 22  jdk.internal.loader.AbstractClassLoaderValue$Sub.parent():AbstractClassLoaderValue (5 bytes)   inline accessor method (bytecode parsing)
                            @ 26  jdk.internal.loader.AbstractClassLoaderValue$Sub.parent():AbstractClassLoaderValue (5 bytes)   inline accessor method (bytecode parsing)
                                                                                    @ 149  jdk.internal.loader.AbstractClassLoaderValue$Sub.equals(Object):boolean (55 bytes)   not inlining relevance-based (relevance=0.078653, probability=0.001081, bonus=1.000000, nodes=31 > 23.595888)
                                                                                  @ 19  java.util.concurrent.ConcurrentHashMap.get(Object):Object (162 bytes)   relevance-based (relevance=1.000000, probability=0.025484, bonus=1.000000, nodes=268 <= 300.000000)
                            @ 9  java.util.regex.Pattern.lambda$Range$17(int, int, int):boolean (7 bytes)   inline method (bytecode parsing)
                                                        @ 3  java.util.regex.Pattern.inRange(int, int, int):boolean (16 bytes)   relevance-based (relevance=0.468008, probability=0.000972, bonus=1.000000, nodes=11 <= 140.402356)
                            @ 9  java.util.regex.Pattern.lambda$Range$17(int, int, int):boolean (7 bytes)   inline method (bytecode parsing)
                                                            @ 3  java.util.regex.Pattern.inRange(int, int, int):boolean (16 bytes)   relevance-based (relevance=0.468008, probability=0.000486, bonus=1.000000, nodes=11 <= 140.402356)
                            @ 9  java.util.regex.Pattern.lambda$Range$17(int, int, int):boolean (7 bytes)   inline method (bytecode parsing)
                                                                @ 3  java.util.regex.Pattern.inRange(int, int, int):boolean (16 bytes)   relevance-based (relevance=0.468008, probability=0.000243, bonus=1.000000, nodes=11 <= 140.402356)
                                                                @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   not inlining it exceeds the maximum recursive inlining depth
                                                                @ 2  java.util.regex.Pattern$CharPredicate.is(int):boolean (0 bytes)   not inlining it is a polymorphic method call and at least one invoked method cannot be inlined
                                                                @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.468008, probability=0.000243, bonus=1.000000, nodes=13 <= 140.402356)
                                                              @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   relevance-based (relevance=0.468008, probability=0.000486, bonus=1.000000, nodes=27 <= 140.402356)
                                                            @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.468008, probability=0.000486, bonus=1.000000, nodes=39 <= 140.402356)
                                                          @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   relevance-based (relevance=0.468008, probability=0.000972, bonus=1.000000, nodes=52 <= 140.402356)
                                                        @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.468008, probability=0.000972, bonus=1.000000, nodes=61 <= 140.402356)
                                                                                @ 40  jdk.internal.loader.AbstractClassLoaderValue.computeIfAbsent(ClassLoader, BiFunction):Object (113 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.025484, bonus=1.000000, nodes=334 > 300.000000)
                                                                              @ 22  java.lang.reflect.Proxy.getProxyConstructor(Class, ClassLoader, Class[]):Constructor (92 bytes)   relevance-based (relevance=1.000769, probability=0.025484, bonus=1.000000, nodes=28 <= 300.000000)
                                                      @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   relevance-based (relevance=0.468008, probability=0.001944, bonus=1.000000, nodes=74 <= 140.402356)
                                                    @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.468008, probability=0.001944, bonus=1.000000, nodes=83 <= 140.402356)
                                                  @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   relevance-based (relevance=0.468008, probability=0.003888, bonus=1.000000, nodes=96 <= 140.402356)
                            @ 21  java.lang.reflect.Constructor.newInstance(Object[]):Object (34 bytes)   inline method (bytecode parsing)
                                                @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.468008, probability=0.003888, bonus=1.000000, nodes=105 <= 140.402356)
                            @ 35  java.lang.InternalError.<init>(String, Throwable):void (7 bytes)   inline method (bytecode parsing)
                                              @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   relevance-based (relevance=0.468008, probability=0.007775, bonus=1.000000, nodes=118 <= 140.402356)
                              @ 3  java.lang.VirtualMachineError.<init>(String, Throwable):void (7 bytes)   inline method (bytecode parsing)
                                @ 3  java.lang.Error.<init>(String, Throwable):void (7 bytes)   inline method (bytecode parsing)
                                            @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.468008, probability=0.007775, bonus=1.000000, nodes=127 <= 140.402356)
                                            @ 5  java.util.regex.Pattern.lambda$Single$14(int, int):boolean (11 bytes)   trivial (relevance=1.000000, probability=0.028447, bonus=1.000000, nodes=9)
                                                                                  @ 18  java.lang.reflect.AccessibleObject.checkAccess(Class, Class, Class, int):void (40 bytes)   not inlining relevance-based (relevance=0.066640, probability=0.001592, bonus=1.000000, nodes=38 > 19.991971)
                                          @ 19  java.util.regex.Pattern$$Lambda/0x800000038.is(int):boolean (9 bytes)   relevance-based (relevance=1.712317, probability=0.043997, bonus=1.000000, nodes=145 <= 300.000000)
                            @ 14  java.lang.reflect.Constructor.getConstructorAccessor():ConstructorAccessor (5 bytes)   inline accessor method (bytecode parsing)
                            @ 50  java.lang.IllegalArgumentException.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  java.lang.RuntimeException.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                                @ 2  java.lang.Exception.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                            @ 62  jdk.internal.misc.VM.isJavaLangInvokeInited():boolean (4 bytes)   inline method (bytecode parsing)
                                                                                  @ 33  java.lang.reflect.Constructor.acquireConstructorAccessor():ConstructorAccessor (75 bytes)   not inlining relevance-based (relevance=0.046166, probability=0.001103, bonus=1.000000, nodes=69 > 13.849859)
                            @ 60  jdk.internal.reflect.DirectConstructorHandleAccessor.invokeImpl(Object[]):Object (103 bytes)   inline method (bytecode parsing)
                              @ 88  java.lang.invoke.LambdaForm$MH/0x00007f45e0003c00.invokeExact_MT(Object, Object, Object, Object, Object):Object (26 bytes)   inline method (bytecode parsing)
                                @ 11  java.lang.invoke.Invokers.checkExactType(MethodHandle, MethodType):void (17 bytes)   inline method (bytecode parsing)
                                  @ 1  java.lang.invoke.MethodHandle.type():MethodType (5 bytes)   inline accessor method (bytecode parsing)
                                @ 15  java.lang.invoke.Invokers.checkCustomized(MethodHandle):void (23 bytes)   inline method (bytecode parsing)
                              @ 69  java.lang.invoke.Invokers$Holder.invokeExact_MT(Object, Object, Object, Object):Object (24 bytes)   inline method (bytecode parsing)
                                @ 10  java.lang.invoke.Invokers.checkExactType(MethodHandle, MethodType):void (17 bytes)   inline method (bytecode parsing)
                                  @ 1  java.lang.invoke.MethodHandle.type():MethodType (5 bytes)   inline accessor method (bytecode parsing)
                                @ 14  java.lang.invoke.Invokers.checkCustomized(MethodHandle):void (23 bytes)   inline method (bytecode parsing)
                              @ 53  java.lang.invoke.Invokers$Holder.invokeExact_MT(Object, Object, Object):Object (23 bytes)   inline method (bytecode parsing)
                                @ 10  java.lang.invoke.Invokers.checkExactType(MethodHandle, MethodType):void (17 bytes)   inline method (bytecode parsing)
                                  @ 1  java.lang.invoke.MethodHandle.type():MethodType (5 bytes)   inline accessor method (bytecode parsing)
                                @ 14  java.lang.invoke.Invokers.checkCustomized(MethodHandle):void (23 bytes)   inline method (bytecode parsing)
                              @ 40  java.lang.invoke.Invokers$Holder.invokeExact_MT(Object, Object):Object (22 bytes)   inline method (bytecode parsing)
                                @ 10  java.lang.invoke.Invokers.checkExactType(MethodHandle, MethodType):void (17 bytes)   inline method (bytecode parsing)
                                  @ 1  java.lang.invoke.MethodHandle.type():MethodType (5 bytes)   inline accessor method (bytecode parsing)
                                @ 14  java.lang.invoke.Invokers.checkCustomized(MethodHandle):void (23 bytes)   inline method (bytecode parsing)
                                                                                  @ 19  java.lang.invoke.Invokers.maybeCustomize(MethodHandle):void (5 bytes)   not inlining it is marked non-inlinable
                                                                                  @ 19  java.lang.invoke.Invokers.maybeCustomize(MethodHandle):void (5 bytes)   not inlining it is marked non-inlinable
                                                                                  @ 19  java.lang.invoke.Invokers.maybeCustomize(MethodHandle):void (5 bytes)   not inlining it is marked non-inlinable
                                                                                  @ 19  java.lang.invoke.Invokers.maybeCustomize(MethodHandle):void (5 bytes)   not inlining it is marked non-inlinable
                                                                                  @ 41  jdk.internal.reflect.DirectConstructorHandleAccessor.newInstance(Object[]):Object (130 bytes)   relevance-based (relevance=1.066640, probability=0.025484, bonus=1.000000, nodes=140 <= 300.000000)
                                              @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=0.463049, probability=0.005595, bonus=1.000000, nodes=9)
                            @ 3  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                                              @ 12  java.lang.StringLatin1.charAt(byte[], int):char (15 bytes)   relevance-based (relevance=0.463049, probability=0.005595, bonus=1.000000, nodes=11 <= 138.914776)
                                            @ 21  java.lang.String.charAt(int):char (25 bytes)   relevance-based (relevance=0.463049, probability=0.005595, bonus=1.000000, nodes=16 <= 138.914776)
                                              @ 5  java.util.regex.Pattern.lambda$Single$14(int, int):boolean (11 bytes)   trivial (relevance=0.243869, probability=0.001636, bonus=1.000000, nodes=9)
                                                @ 8  java.util.regex.ASCII.isDigit(int):boolean (18 bytes)   relevance-based (relevance=0.463049, probability=0.003106, bonus=1.000000, nodes=13 <= 138.914776)
                                              @ 1  java.util.regex.CharPredicates.lambda$ASCII_DIGIT$18(int):boolean (20 bytes)   relevance-based (relevance=0.463049, probability=0.003106, bonus=1.000000, nodes=16 <= 138.914776)
                                            @ 26  java.util.regex.CharPredicates$$Lambda/0x800000034.is(int):boolean (5 bytes)   relevance-based (relevance=0.463049, probability=0.005595, bonus=1.000000, nodes=33 <= 138.914776)
                                          @ 36  java.util.regex.Pattern$GroupTail.match(Matcher, int, CharSequence):boolean (111 bytes)   not inlining relevance-based (relevance=0.643395, probability=0.018303, bonus=1.000000, nodes=202 > 193.018452)
                                                                                @ 30  java.lang.reflect.Constructor.newInstanceWithCaller(Object[], boolean, Class):Object (51 bytes)   relevance-based (relevance=1.053880, probability=0.025484, bonus=1.000000, nodes=177 <= 300.000000)
                                            @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=0.074713, bonus=1.000000, nodes=9)
                            @ 3  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                                            @ 12  java.lang.StringLatin1.charAt(byte[], int):char (15 bytes)   relevance-based (relevance=1.000000, probability=0.074713, bonus=1.000000, nodes=11 <= 300.000000)
                                          @ 21  java.lang.String.charAt(int):char (25 bytes)   relevance-based (relevance=1.698232, probability=0.074713, bonus=1.000000, nodes=16 <= 300.000000)
                                                                              @ 31  java.lang.reflect.Proxy.newProxyInstance(Class, Constructor, InvocationHandler):Object (75 bytes)   relevance-based (relevance=1.000769, probability=0.025484, bonus=1.000000, nodes=193 <= 300.000000)
                                            @ 5  java.util.regex.Pattern.lambda$Single$14(int, int):boolean (11 bytes)   trivial (relevance=0.894390, probability=0.021841, bonus=1.000000, nodes=9)
                                                                            @ 33  java.lang.reflect.Proxy.newProxyInstance(ClassLoader, Class[], InvocationHandler):Object (35 bytes)   relevance-based (relevance=1.551003, probability=0.025484, bonus=1.000000, nodes=232 <= 300.000000)
                                              @ 8  java.util.regex.ASCII.isDigit(int):boolean (18 bytes)   relevance-based (relevance=1.000000, probability=0.041471, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 1  java.util.regex.CharPredicates.lambda$ASCII_DIGIT$18(int):boolean (20 bytes)   relevance-based (relevance=1.000000, probability=0.041471, bonus=1.000000, nodes=16 <= 300.000000)
                                          @ 26  java.util.regex.CharPredicates$$Lambda/0x800000034.is(int):boolean (5 bytes)   relevance-based (relevance=1.698232, probability=0.074713, bonus=1.000000, nodes=33 <= 300.000000)
                                        @ 28  java.util.regex.Pattern$BmpCharPropertyGreedy.match(Matcher, int, CharSequence):boolean (89 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.087995, bonus=1.000000, nodes=317 > 300.000000)
                                      @ 50  java.util.regex.Pattern$GroupHead.match(Matcher, int, CharSequence):boolean (47 bytes)   relevance-based (relevance=1.666708, probability=0.087995, bonus=1.000000, nodes=20 <= 300.000000)
                                                                          @ 1  sun.reflect.annotation.AnnotationParser$1.run():Annotation (40 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.025484, bonus=1.000000, nodes=380 > 300.000000)
                                                                        @ 271  sun.reflect.annotation.AnnotationParser.annotationForMap(Class, Map):Annotation (16 bytes)   relevance-based (relevance=1.000170, probability=0.025484, bonus=1.000000, nodes=26 <= 300.000000)
                            @ 4  java.nio.Buffer.session():MemorySessionImpl (20 bytes)   inline method (bytecode parsing)
                            @ 18  java.nio.HeapByteBuffer.byteOffset(long):long (7 bytes)   inline method (bytecode parsing)
                            @ 25  jdk.internal.misc.ScopedMemoryAccess.getShortUnaligned(MemorySessionImpl, Object, long, boolean):short (18 bytes)   inline method (bytecode parsing)
                              @ 6  jdk.internal.misc.ScopedMemoryAccess.getShortUnalignedInternal(MemorySessionImpl, Object, long, boolean):short (36 bytes)   inline method (bytecode parsing)
                                @ 15  jdk.internal.misc.Unsafe.getShortUnaligned(Object, long, boolean):short (12 bytes)   inline method (bytecode parsing)
                                                                          @ 14  java.nio.Buffer.nextGetIndex(int):int (32 bytes)   relevance-based (relevance=0.189112, probability=0.004819, bonus=1.000000, nodes=13 <= 56.733524)
                                            @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=0.856238, probability=0.008800, bonus=1.000000, nodes=9)
                            @ 3  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                                                                          @ 8  jdk.internal.misc.Unsafe.convEndian(boolean, short):short (16 bytes)   relevance-based (relevance=0.189112, probability=0.004819, bonus=1.000000, nodes=20 <= 56.733524)
                                                                        @ 161  java.nio.HeapByteBuffer.getShort():short (29 bytes)   relevance-based (relevance=0.189112, probability=0.004819, bonus=1.000000, nodes=44 <= 56.733524)
                                            @ 12  java.lang.StringLatin1.charAt(byte[], int):char (15 bytes)   relevance-based (relevance=0.856238, probability=0.008800, bonus=1.000000, nodes=11 <= 256.871437)
                                          @ 14  java.lang.String.charAt(int):char (25 bytes)   relevance-based (relevance=0.856238, probability=0.008800, bonus=1.000000, nodes=16 <= 256.871437)
                 n                                                    @ 6  jdk.internal.reflect.ConstantPool.getUTF8At0(Object, int):String (0 bytes)   not inlining it is a non-intrinsic native method
                            @ 9  java.util.regex.Pattern.lambda$Range$17(int, int, int):boolean (7 bytes)   inline method (bytecode parsing)
                                                                          @ 2  java.util.HashMap.getNode(Object):HashMap$Node (150 bytes)   not inlining relevance-based (relevance=0.214294, probability=0.004819, bonus=1.000000, nodes=108 > 64.288217)
                                                                        @ 181  java.util.HashMap.get(Object):Object (19 bytes)   relevance-based (relevance=0.189112, probability=0.004819, bonus=1.000000, nodes=19 <= 56.733524)
                                                @ 3  java.util.regex.Pattern.inRange(int, int, int):boolean (16 bytes)   relevance-based (relevance=0.234026, probability=0.000778, bonus=1.000000, nodes=11 <= 70.207698)
                            @ 75  sun.reflect.annotation.AnnotationParser.parseAnnotation(ByteBuffer, ConstantPool, Class, boolean):Annotation (9 bytes)   inline method (bytecode parsing)
                            @ 9  java.util.regex.Pattern.lambda$Range$17(int, int, int):boolean (7 bytes)   inline method (bytecode parsing)
                            @ 117  java.lang.Class.getInterfaces():Class[] (6 bytes)   inline method (bytecode parsing)
                                                    @ 3  java.util.regex.Pattern.inRange(int, int, int):boolean (16 bytes)   relevance-based (relevance=0.234026, probability=0.000389, bonus=1.000000, nodes=11 <= 70.207698)
                            @ 190  java.lang.StringBuilder.<init>():void (7 bytes)   inline method (bytecode parsing)
                            @ 201  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 9  java.util.regex.Pattern.lambda$Range$17(int, int, int):boolean (7 bytes)   inline method (bytecode parsing)
                            @ 206  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 211  java.lang.StringBuilder.append(Object):StringBuilder (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                                                        @ 3  java.util.regex.Pattern.inRange(int, int, int):boolean (16 bytes)   relevance-based (relevance=0.234026, probability=0.000194, bonus=1.000000, nodes=11 <= 70.207698)
                            @ 216  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 219  java.lang.StringBuilder.toString():String (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.String.<init>(StringBuilder):void (7 bytes)   inline method (bytecode parsing)
                            @ 9  java.util.regex.Pattern.lambda$Range$17(int, int, int):boolean (7 bytes)   inline method (bytecode parsing)
                                                            @ 3  java.util.regex.Pattern.inRange(int, int, int):boolean (16 bytes)   relevance-based (relevance=0.234026, probability=0.000097, bonus=1.000000, nodes=11 <= 70.207698)
                            @ 9  java.util.regex.Pattern.lambda$Range$17(int, int, int):boolean (7 bytes)   inline method (bytecode parsing)
                                                                @ 3  java.util.regex.Pattern.inRange(int, int, int):boolean (16 bytes)   relevance-based (relevance=0.234026, probability=0.000049, bonus=1.000000, nodes=11 <= 70.207698)
                                                                @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   not inlining it exceeds the maximum recursive inlining depth
                                                                @ 2  java.util.regex.Pattern$CharPredicate.is(int):boolean (0 bytes)   not inlining it is a polymorphic method call and at least one invoked method cannot be inlined
                                                                @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.234026, probability=0.000049, bonus=1.000000, nodes=13 <= 70.207698)
                                                              @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   relevance-based (relevance=0.234026, probability=0.000097, bonus=1.000000, nodes=27 <= 70.207698)
                                                            @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.234026, probability=0.000097, bonus=1.000000, nodes=39 <= 70.207698)
                                                          @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   relevance-based (relevance=0.234026, probability=0.000194, bonus=1.000000, nodes=52 <= 70.207698)
                                                        @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.234026, probability=0.000194, bonus=1.000000, nodes=61 <= 70.207698)
                                                      @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   not inlining relevance-based (relevance=0.234026, probability=0.000389, bonus=1.000000, nodes=74 > 70.207698)
                                                    @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.234026, probability=0.000389, bonus=1.000000, nodes=13 <= 70.207698)
                                                                        @ 208  sun.reflect.annotation.AnnotationParser.parseMemberValue(Class, ByteBuffer, ConstantPool, Class):Object (230 bytes)   not inlining relevance-based (relevance=0.189112, probability=0.004819, bonus=1.000000, nodes=142 > 56.733524)
                                                  @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   relevance-based (relevance=0.234026, probability=0.000778, bonus=1.000000, nodes=27 <= 70.207698)
                                                @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.234026, probability=0.000778, bonus=1.000000, nodes=39 <= 70.207698)
                                              @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   relevance-based (relevance=0.234026, probability=0.001555, bonus=1.000000, nodes=52 <= 70.207698)
                                            @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.234026, probability=0.001555, bonus=1.000000, nodes=61 <= 70.207698)
                                                                              @ 17  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=0.002894, probability=0.000073, bonus=1.000000, nodes=9)
                                            @ 5  java.util.regex.Pattern.lambda$Single$14(int, int):boolean (11 bytes)   trivial (relevance=0.856238, probability=0.005690, bonus=1.000000, nodes=9)
                                          @ 19  java.util.regex.Pattern$$Lambda/0x800000038.is(int):boolean (9 bytes)   relevance-based (relevance=0.856238, probability=0.008800, bonus=1.000000, nodes=79 <= 256.871437)
                                                                              @ 27  java.lang.StringLatin1.hashCode(byte[]):int (52 bytes)   not inlining relevance-based (relevance=0.002892, probability=0.000073, bonus=1.000000, nodes=22 > 0.867706)
                                        @ 28  java.util.regex.Pattern$BmpCharPropertyGreedy.match(Matcher, int, CharSequence):boolean (89 bytes)   not inlining relevance-based (relevance=0.500046, probability=0.017600, bonus=1.000000, nodes=205 > 150.013931)
                                                                              @ 37  java.lang.StringUTF16.hashCode(byte[]):int (52 bytes)   not inlining relevance-based (relevance=0.000001, probability=0.000000, bonus=1.000000, nodes=23 > 0.000438)
                                                                            @ 9  java.lang.String.hashCode():int (60 bytes)   relevance-based (relevance=0.189112, probability=0.004819, bonus=1.000000, nodes=48 <= 56.733524)
                                                                          @ 2  java.util.HashMap.hash(Object):int (20 bytes)   relevance-based (relevance=0.189112, probability=0.004819, bonus=1.000000, nodes=56 <= 56.733524)
                                                                        @ 255  java.util.HashMap.put(Object, Object):Object (13 bytes)   not inlining relevance-based (relevance=0.189112, probability=0.004819, bonus=1.000000, nodes=62 > 56.733524)
                                                                      @ 41  sun.reflect.annotation.AnnotationParser.parseAnnotation2(ByteBuffer, ConstantPool, Class, boolean, Class[]):Annotation (275 bytes)   relevance-based (relevance=4.000000, probability=0.025484, bonus=1.000000, nodes=256 <= 300.000000)
                                              @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=0.017598, bonus=1.000000, nodes=9)
                            @ 3  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                                              @ 12  java.lang.StringLatin1.charAt(byte[], int):char (15 bytes)   relevance-based (relevance=1.000000, probability=0.017598, bonus=1.000000, nodes=11 <= 300.000000)
                                            @ 14  java.lang.String.charAt(int):char (25 bytes)   relevance-based (relevance=1.712317, probability=0.017598, bonus=1.000000, nodes=16 <= 300.000000)
                                                                    @ 12  sun.reflect.annotation.AnnotationParser.parseAnnotations2(byte[], ConstantPool, Class, Class[]):Map (135 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.025484, bonus=1.000000, nodes=405 > 300.000000)
                                                                  @ 9  sun.reflect.annotation.AnnotationParser.parseAnnotations(byte[], ConstantPool, Class):Map (37 bytes)   relevance-based (relevance=3.160494, probability=0.038553, bonus=1.000000, nodes=16 <= 300.000000)
                            @ 9  java.util.regex.Pattern.lambda$Range$17(int, int, int):boolean (7 bytes)   inline method (bytecode parsing)
                                                  @ 3  java.util.regex.Pattern.inRange(int, int, int):boolean (16 bytes)   relevance-based (relevance=0.468008, probability=0.001555, bonus=1.000000, nodes=11 <= 140.402356)
                            @ 9  java.util.regex.Pattern.lambda$Range$17(int, int, int):boolean (7 bytes)   inline method (bytecode parsing)
                                                      @ 3  java.util.regex.Pattern.inRange(int, int, int):boolean (16 bytes)   relevance-based (relevance=0.468008, probability=0.000777, bonus=1.000000, nodes=11 <= 140.402356)
                            @ 87  sun.reflect.annotation.AnnotationType.isInherited():boolean (5 bytes)   inline accessor method (bytecode parsing)
                            @ 120  java.lang.Math.min(int, int):int (11 bytes)   inline method (bytecode parsing)
                            @ 9  java.util.regex.Pattern.lambda$Range$17(int, int, int):boolean (7 bytes)   inline method (bytecode parsing)
                                                          @ 3  java.util.regex.Pattern.inRange(int, int, int):boolean (16 bytes)   relevance-based (relevance=0.468008, probability=0.000389, bonus=1.000000, nodes=11 <= 140.402356)
                            @ 9  java.util.regex.Pattern.lambda$Range$17(int, int, int):boolean (7 bytes)   inline method (bytecode parsing)
                 n                                                  @ 1  java.lang.Class.getRawAnnotations():byte[] (0 bytes)   not inlining it is a non-intrinsic native method
                 n                                                  @ 5  java.lang.Class.getConstantPool():ConstantPool (0 bytes)   not inlining it is a non-intrinsic native method
                                                              @ 3  java.util.regex.Pattern.inRange(int, int, int):boolean (16 bytes)   relevance-based (relevance=0.468008, probability=0.000194, bonus=1.000000, nodes=11 <= 140.402356)
                            @ 4  java.util.Collections.emptyMap():Map (4 bytes)   inline method (bytecode parsing)
                            @ 9  java.util.regex.Pattern.lambda$Range$17(int, int, int):boolean (7 bytes)   inline method (bytecode parsing)
                            @ 10  java.nio.ByteBuffer.wrap(byte[]):ByteBuffer (8 bytes)   inline method (bytecode parsing)
                                                                  @ 3  java.util.regex.Pattern.inRange(int, int, int):boolean (16 bytes)   relevance-based (relevance=0.468008, probability=0.000097, bonus=1.000000, nodes=11 <= 140.402356)
                            @ 65  sun.reflect.annotation.AnnotationType.retention():RetentionPolicy (5 bytes)   inline accessor method (bytecode parsing)
                                                                  @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   not inlining it exceeds the maximum recursive inlining depth
                                                                  @ 2  java.util.regex.Pattern$CharPredicate.is(int):boolean (0 bytes)   not inlining it is a polymorphic method call and at least one invoked method cannot be inlined
                                                                  @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.468008, probability=0.000097, bonus=1.000000, nodes=13 <= 140.402356)
                                                                @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   relevance-based (relevance=0.468008, probability=0.000194, bonus=1.000000, nodes=27 <= 140.402356)
                                                              @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.468008, probability=0.000194, bonus=1.000000, nodes=39 <= 140.402356)
                                                            @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   relevance-based (relevance=0.468008, probability=0.000389, bonus=1.000000, nodes=52 <= 140.402356)
                                                          @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.468008, probability=0.000389, bonus=1.000000, nodes=61 <= 140.402356)
                            @ 1  java.util.AbstractMap.<init>():void (5 bytes)   inline method (bytecode parsing)
                                                        @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   relevance-based (relevance=0.468008, probability=0.000777, bonus=1.000000, nodes=74 <= 140.402356)
                                                                            @ 1  java.util.HashMap.<init>():void (11 bytes)   trivial (relevance=1.000000, probability=0.015290, bonus=1.000000, nodes=8)
                                                      @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.468008, probability=0.000777, bonus=1.000000, nodes=83 <= 140.402356)
                                                                          @ 4  java.util.LinkedHashMap.<init>():void (15 bytes)   relevance-based (relevance=1.000000, probability=0.015290, bonus=1.000000, nodes=15 <= 300.000000)
                                                    @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   relevance-based (relevance=0.468008, probability=0.001555, bonus=1.000000, nodes=96 <= 140.402356)
                            @ 17  java.nio.ByteOrder.nativeOrder():ByteOrder (4 bytes)   inline method (bytecode parsing)
                                                  @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.468008, probability=0.001555, bonus=1.000000, nodes=105 <= 140.402356)
                                                @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   relevance-based (relevance=0.468008, probability=0.003110, bonus=1.000000, nodes=118 <= 140.402356)
                                              @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.468008, probability=0.003110, bonus=1.000000, nodes=127 <= 140.402356)
                                                                                      @ 2  java.nio.Buffer.limit(int):Buffer (65 bytes)   relevance-based (relevance=1.000000, probability=0.015290, bonus=1.000000, nodes=24 <= 300.000000)
                                                                                    @ 2  java.nio.ByteBuffer.limit(int):ByteBuffer (8 bytes)   relevance-based (relevance=1.000000, probability=0.015290, bonus=1.000000, nodes=25 <= 300.000000)
                                                                                  @ 39  java.nio.ByteBuffer.limit(int):Buffer (6 bytes)   relevance-based (relevance=1.000000, probability=0.015290, bonus=1.000000, nodes=26 <= 300.000000)
                                              @ 5  java.util.regex.Pattern.lambda$Single$14(int, int):boolean (11 bytes)   trivial (relevance=1.000000, probability=0.011378, bonus=1.000000, nodes=9)
                                            @ 19  java.util.regex.Pattern$$Lambda/0x800000038.is(int):boolean (9 bytes)   relevance-based (relevance=1.712317, probability=0.017598, bonus=1.000000, nodes=145 <= 300.000000)
                                                                                      @ 2  java.nio.Buffer.position(int):Buffer (52 bytes)   relevance-based (relevance=1.000000, probability=0.015290, bonus=1.000000, nodes=14 <= 300.000000)
                                                                                    @ 2  java.nio.ByteBuffer.position(int):ByteBuffer (8 bytes)   relevance-based (relevance=1.000000, probability=0.015290, bonus=1.000000, nodes=15 <= 300.000000)
                                                                                  @ 45  java.nio.ByteBuffer.position(int):Buffer (6 bytes)   relevance-based (relevance=1.022803, probability=0.015290, bonus=1.000000, nodes=16 <= 300.000000)
                                                                                @ 8  java.nio.Buffer.<init>(int, int, int, int, MemorySegment):void (105 bytes)   relevance-based (relevance=1.000000, probability=0.015290, bonus=1.000000, nodes=52 <= 300.000000)
                                                                              @ 12  java.nio.ByteBuffer.<init>(int, int, int, int, byte[], int, MemorySegment):void (47 bytes)   relevance-based (relevance=1.000000, probability=0.015290, bonus=1.000000, nodes=63 <= 300.000000)
                                                                            @ 8  java.nio.HeapByteBuffer.<init>(byte[], int, int, MemorySegment):void (23 bytes)   relevance-based (relevance=1.000000, probability=0.015290, bonus=1.000000, nodes=67 <= 300.000000)
                                                                          @ 4  java.nio.ByteBuffer.wrap(byte[], int, int):ByteBuffer (21 bytes)   relevance-based (relevance=1.000000, probability=0.015290, bonus=1.000000, nodes=68 <= 300.000000)
                            @ 4  java.nio.Buffer.session():MemorySessionImpl (20 bytes)   inline method (bytecode parsing)
                            @ 18  java.nio.HeapByteBuffer.byteOffset(long):long (7 bytes)   inline method (bytecode parsing)
                            @ 25  jdk.internal.misc.ScopedMemoryAccess.getShortUnaligned(MemorySessionImpl, Object, long, boolean):short (18 bytes)   inline method (bytecode parsing)
                              @ 6  jdk.internal.misc.ScopedMemoryAccess.getShortUnalignedInternal(MemorySessionImpl, Object, long, boolean):short (36 bytes)   inline method (bytecode parsing)
                                @ 15  jdk.internal.misc.Unsafe.getShortUnaligned(Object, long, boolean):short (12 bytes)   inline method (bytecode parsing)
                                                @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=0.463049, probability=0.002238, bonus=1.000000, nodes=9)
                            @ 3  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                                                                            @ 14  java.nio.Buffer.nextGetIndex(int):int (32 bytes)   relevance-based (relevance=1.000000, probability=0.015290, bonus=1.000000, nodes=13 <= 300.000000)
                                                @ 12  java.lang.StringLatin1.charAt(byte[], int):char (15 bytes)   relevance-based (relevance=0.463049, probability=0.002238, bonus=1.000000, nodes=11 <= 138.914776)
                                              @ 21  java.lang.String.charAt(int):char (25 bytes)   relevance-based (relevance=0.463049, probability=0.002238, bonus=1.000000, nodes=16 <= 138.914776)
                                                @ 5  java.util.regex.Pattern.lambda$Single$14(int, int):boolean (11 bytes)   trivial (relevance=0.243869, probability=0.000654, bonus=1.000000, nodes=9)
                                                                            @ 8  jdk.internal.misc.Unsafe.convEndian(boolean, short):short (16 bytes)   relevance-based (relevance=1.000000, probability=0.015290, bonus=1.000000, nodes=20 <= 300.000000)
                                                                          @ 17  java.nio.HeapByteBuffer.getShort():short (29 bytes)   relevance-based (relevance=1.022803, probability=0.015290, bonus=1.000000, nodes=44 <= 300.000000)
                                                  @ 8  java.util.regex.ASCII.isDigit(int):boolean (18 bytes)   relevance-based (relevance=0.463049, probability=0.001242, bonus=1.000000, nodes=13 <= 138.914776)
                                                @ 1  java.util.regex.CharPredicates.lambda$ASCII_DIGIT$18(int):boolean (20 bytes)   relevance-based (relevance=0.463049, probability=0.001242, bonus=1.000000, nodes=16 <= 138.914776)
                                              @ 26  java.util.regex.CharPredicates$$Lambda/0x800000034.is(int):boolean (5 bytes)   relevance-based (relevance=0.463049, probability=0.002238, bonus=1.000000, nodes=33 <= 138.914776)
                            @ 19  jdk.internal.reflect.ConstantPool.getUTF8At(int):String (10 bytes)   inline method (bytecode parsing)
                                            @ 36  java.util.regex.Pattern$GroupTail.match(Matcher, int, CharSequence):boolean (111 bytes)   not inlining relevance-based (relevance=0.643395, probability=0.007321, bonus=1.000000, nodes=202 > 193.018452)
                            @ 122  sun.reflect.annotation.AnnotationType.memberTypes():Map (5 bytes)   inline accessor method (bytecode parsing)
                            @ 133  sun.reflect.annotation.AnnotationType.memberDefaults():Map (5 bytes)   inline accessor method (bytecode parsing)
                            @ 172  jdk.internal.reflect.ConstantPool.getUTF8At(int):String (10 bytes)   inline method (bytecode parsing)
                                              @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=0.029884, bonus=1.000000, nodes=9)
                            @ 3  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                                              @ 12  java.lang.StringLatin1.charAt(byte[], int):char (15 bytes)   relevance-based (relevance=1.000000, probability=0.029884, bonus=1.000000, nodes=11 <= 300.000000)
                            @ 4  java.nio.Buffer.session():MemorySessionImpl (20 bytes)   inline method (bytecode parsing)
                                            @ 21  java.lang.String.charAt(int):char (25 bytes)   relevance-based (relevance=1.698232, probability=0.029884, bonus=1.000000, nodes=16 <= 300.000000)
                            @ 18  java.nio.HeapByteBuffer.byteOffset(long):long (7 bytes)   inline method (bytecode parsing)
                            @ 25  jdk.internal.misc.ScopedMemoryAccess.getShortUnaligned(MemorySessionImpl, Object, long, boolean):short (18 bytes)   inline method (bytecode parsing)
                              @ 6  jdk.internal.misc.ScopedMemoryAccess.getShortUnalignedInternal(MemorySessionImpl, Object, long, boolean):short (36 bytes)   inline method (bytecode parsing)
                                @ 15  jdk.internal.misc.Unsafe.getShortUnaligned(Object, long, boolean):short (12 bytes)   inline method (bytecode parsing)
                                                                              @ 14  java.nio.Buffer.nextGetIndex(int):int (32 bytes)   relevance-based (relevance=1.000000, probability=0.015290, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 5  java.util.regex.Pattern.lambda$Single$14(int, int):boolean (11 bytes)   trivial (relevance=0.894390, probability=0.008736, bonus=1.000000, nodes=9)
                                                                              @ 8  jdk.internal.misc.Unsafe.convEndian(boolean, short):short (16 bytes)   relevance-based (relevance=1.000000, probability=0.015290, bonus=1.000000, nodes=20 <= 300.000000)
                                                @ 8  java.util.regex.ASCII.isDigit(int):boolean (18 bytes)   relevance-based (relevance=1.000000, probability=0.016587, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 1  java.util.regex.CharPredicates.lambda$ASCII_DIGIT$18(int):boolean (20 bytes)   relevance-based (relevance=1.000000, probability=0.016587, bonus=1.000000, nodes=16 <= 300.000000)
                                            @ 26  java.util.regex.CharPredicates$$Lambda/0x800000034.is(int):boolean (5 bytes)   relevance-based (relevance=1.698232, probability=0.029884, bonus=1.000000, nodes=33 <= 300.000000)
                                          @ 28  java.util.regex.Pattern$BmpCharPropertyGreedy.match(Matcher, int, CharSequence):boolean (89 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.035196, bonus=1.000000, nodes=317 > 300.000000)
                                        @ 50  java.util.regex.Pattern$GroupHead.match(Matcher, int, CharSequence):boolean (47 bytes)   relevance-based (relevance=1.666708, probability=0.035196, bonus=1.000000, nodes=20 <= 300.000000)
                                                                            @ 1  java.nio.HeapByteBuffer.getShort():short (29 bytes)   relevance-based (relevance=1.000000, probability=0.015290, bonus=1.000000, nodes=44 <= 300.000000)
                 n                                                        @ 6  jdk.internal.reflect.ConstantPool.getUTF8At0(Object, int):String (0 bytes)   not inlining it is a non-intrinsic native method
                                              @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=0.856238, probability=0.003520, bonus=1.000000, nodes=9)
                            @ 3  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                                              @ 12  java.lang.StringLatin1.charAt(byte[], int):char (15 bytes)   relevance-based (relevance=0.856238, probability=0.003520, bonus=1.000000, nodes=11 <= 256.871437)
                            @ 14  sun.reflect.generics.parser.SignatureParser.make():SignatureParser (8 bytes)   inline method (bytecode parsing)
                              @ 4  sun.reflect.generics.parser.SignatureParser.<init>():void (5 bytes)   inline method (bytecode parsing)
                                            @ 14  java.lang.String.charAt(int):char (25 bytes)   relevance-based (relevance=0.856238, probability=0.003520, bonus=1.000000, nodes=16 <= 256.871437)
                            @ 20  sun.reflect.generics.parser.SignatureParser.parseTypeSig(String):TypeSignature (10 bytes)   inline method (bytecode parsing)
                            @ 26  sun.reflect.generics.scope.ClassScope.make(Class):ClassScope (9 bytes)   inline method (bytecode parsing)
                              @ 5  sun.reflect.generics.scope.ClassScope.<init>(Class):void (6 bytes)   inline method (bytecode parsing)
                                @ 2  sun.reflect.generics.scope.AbstractScope.<init>(GenericDeclaration):void (10 bytes)   inline method (bytecode parsing)
                            @ 29  sun.reflect.generics.factory.CoreReflectionFactory.make(GenericDeclaration, Scope):CoreReflectionFactory (10 bytes)   inline method (bytecode parsing)
                            @ 36  sun.reflect.generics.visitor.Reifier.make(GenericsFactory):Reifier (9 bytes)   inline method (bytecode parsing)
                              @ 5  sun.reflect.generics.visitor.Reifier.<init>(GenericsFactory):void (10 bytes)   inline method (bytecode parsing)
                            @ 9  java.util.regex.Pattern.lambda$Range$17(int, int, int):boolean (7 bytes)   inline method (bytecode parsing)
                                                                              @ 2  sun.reflect.generics.parser.SignatureParser.init(String):void (16 bytes)   relevance-based (relevance=1.030610, probability=0.015290, bonus=1.000000, nodes=12 <= 300.000000)
                                                  @ 3  java.util.regex.Pattern.inRange(int, int, int):boolean (16 bytes)   relevance-based (relevance=0.234026, probability=0.000311, bonus=1.000000, nodes=11 <= 70.207698)
                            @ 126  sun.reflect.generics.parser.SignatureParser.parseFieldTypeSignature():FieldTypeSignature (6 bytes)   inline method (bytecode parsing)
                            @ 9  java.util.regex.Pattern.lambda$Range$17(int, int, int):boolean (7 bytes)   inline method (bytecode parsing)
                                                      @ 3  java.util.regex.Pattern.inRange(int, int, int):boolean (16 bytes)   relevance-based (relevance=0.234026, probability=0.000155, bonus=1.000000, nodes=11 <= 70.207698)
                                                                                    @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.015290, bonus=1.000000, nodes=5)
                                                                                  @ 36  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000000, probability=0.015290, bonus=1.000000, nodes=8)
                            @ 9  java.util.regex.Pattern.lambda$Range$17(int, int, int):boolean (7 bytes)   inline method (bytecode parsing)
                                                                                    @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=0.015290, bonus=1.000000, nodes=9)
                            @ 3  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                                                          @ 3  java.util.regex.Pattern.inRange(int, int, int):boolean (16 bytes)   relevance-based (relevance=0.234026, probability=0.000078, bonus=1.000000, nodes=11 <= 70.207698)
                                                                                    @ 12  java.lang.StringLatin1.charAt(byte[], int):char (15 bytes)   relevance-based (relevance=1.000000, probability=0.015290, bonus=1.000000, nodes=11 <= 300.000000)
                                                                                  @ 50  java.lang.String.charAt(int):char (25 bytes)   relevance-based (relevance=1.000000, probability=0.015290, bonus=1.000000, nodes=16 <= 300.000000)
                                                                                @ 1  sun.reflect.generics.parser.SignatureParser.current():char (59 bytes)   relevance-based (relevance=1.000000, probability=0.015290, bonus=1.000000, nodes=31 <= 300.000000)
                            @ 9  java.util.regex.Pattern.lambda$Range$17(int, int, int):boolean (7 bytes)   inline method (bytecode parsing)
                                                              @ 3  java.util.regex.Pattern.inRange(int, int, int):boolean (16 bytes)   relevance-based (relevance=0.234026, probability=0.000039, bonus=1.000000, nodes=11 <= 70.207698)
                                                                                      @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.015290, bonus=1.000000, nodes=5)
                                                                                    @ 36  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000000, probability=0.015290, bonus=1.000000, nodes=8)
                            @ 9  java.util.regex.Pattern.lambda$Range$17(int, int, int):boolean (7 bytes)   inline method (bytecode parsing)
                                                                  @ 3  java.util.regex.Pattern.inRange(int, int, int):boolean (16 bytes)   relevance-based (relevance=0.234026, probability=0.000019, bonus=1.000000, nodes=11 <= 70.207698)
                                                                                      @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=0.015290, bonus=1.000000, nodes=9)
                            @ 3  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                                                                  @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   not inlining it exceeds the maximum recursive inlining depth
                                                                  @ 2  java.util.regex.Pattern$CharPredicate.is(int):boolean (0 bytes)   not inlining it is a polymorphic method call and at least one invoked method cannot be inlined
                                                                  @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.234026, probability=0.000019, bonus=1.000000, nodes=13 <= 70.207698)
                                                                @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   relevance-based (relevance=0.234026, probability=0.000039, bonus=1.000000, nodes=27 <= 70.207698)
                                                              @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.234026, probability=0.000039, bonus=1.000000, nodes=39 <= 70.207698)
                                                                                      @ 12  java.lang.StringLatin1.charAt(byte[], int):char (15 bytes)   relevance-based (relevance=1.000000, probability=0.015290, bonus=1.000000, nodes=11 <= 300.000000)
                                                                                    @ 50  java.lang.String.charAt(int):char (25 bytes)   relevance-based (relevance=1.000000, probability=0.015290, bonus=1.000000, nodes=16 <= 300.000000)
                                                            @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   relevance-based (relevance=0.234026, probability=0.000078, bonus=1.000000, nodes=52 <= 70.207698)
                                                                                  @ 1  sun.reflect.generics.parser.SignatureParser.current():char (59 bytes)   relevance-based (relevance=1.000000, probability=0.015290, bonus=1.000000, nodes=31 <= 300.000000)
                                                          @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.234026, probability=0.000078, bonus=1.000000, nodes=61 <= 70.207698)
                            @ 114  sun.reflect.generics.tree.ClassTypeSignature.make(List):ClassTypeSignature (9 bytes)   inline method (bytecode parsing)
                              @ 5  sun.reflect.generics.tree.ClassTypeSignature.<init>(List):void (10 bytes)   inline method (bytecode parsing)
                                                        @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   not inlining relevance-based (relevance=0.234026, probability=0.000155, bonus=1.000000, nodes=74 > 70.207698)
                                                      @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.234026, probability=0.000155, bonus=1.000000, nodes=13 <= 70.207698)
                                                    @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   relevance-based (relevance=0.234026, probability=0.000311, bonus=1.000000, nodes=27 <= 70.207698)
                                                  @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.234026, probability=0.000311, bonus=1.000000, nodes=39 <= 70.207698)
                                                                                        @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.015290, bonus=1.000000, nodes=5)
                                                                                      @ 36  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000000, probability=0.015290, bonus=1.000000, nodes=8)
                                                @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   relevance-based (relevance=0.234026, probability=0.000622, bonus=1.000000, nodes=52 <= 70.207698)
                                                                                        @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=0.015290, bonus=1.000000, nodes=9)
                                              @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.234026, probability=0.000622, bonus=1.000000, nodes=61 <= 70.207698)
                            @ 3  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                                                                                        @ 12  java.lang.StringLatin1.charAt(byte[], int):char (15 bytes)   relevance-based (relevance=1.000000, probability=0.015290, bonus=1.000000, nodes=11 <= 300.000000)
                                              @ 5  java.util.regex.Pattern.lambda$Single$14(int, int):boolean (11 bytes)   trivial (relevance=0.856238, probability=0.002276, bonus=1.000000, nodes=9)
                                                                                      @ 50  java.lang.String.charAt(int):char (25 bytes)   relevance-based (relevance=1.000000, probability=0.015290, bonus=1.000000, nodes=16 <= 300.000000)
                                            @ 19  java.util.regex.Pattern$$Lambda/0x800000038.is(int):boolean (9 bytes)   relevance-based (relevance=0.856238, probability=0.003520, bonus=1.000000, nodes=79 <= 256.871437)
                                                                                    @ 24  sun.reflect.generics.parser.SignatureParser.current():char (59 bytes)   relevance-based (relevance=1.000000, probability=0.015290, bonus=1.000000, nodes=31 <= 300.000000)
                                          @ 28  java.util.regex.Pattern$BmpCharPropertyGreedy.match(Matcher, int, CharSequence):boolean (89 bytes)   not inlining relevance-based (relevance=0.500046, probability=0.007039, bonus=1.000000, nodes=205 > 150.013931)
                                                                                        @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.015290, bonus=1.000000, nodes=5)
                                                                                      @ 36  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000000, probability=0.015290, bonus=1.000000, nodes=8)
                                                                                    @ 40  sun.reflect.generics.parser.SignatureParser.advance():void (53 bytes)   relevance-based (relevance=1.000000, probability=0.015290, bonus=1.000000, nodes=20 <= 300.000000)
                            @ 1  java.util.AbstractList.<init>():void (10 bytes)   inline method (bytecode parsing)
                              @ 1  java.util.AbstractCollection.<init>():void (5 bytes)   inline method (bytecode parsing)
                                                                                    @ 48  java.util.ArrayList.<init>(int):void (61 bytes)   relevance-based (relevance=1.000000, probability=0.015290, bonus=1.000000, nodes=12 <= 300.000000)
                            @ 1  sun.reflect.generics.parser.SignatureParser.mark():void (9 bytes)   inline method (bytecode parsing)
                            @ 78  sun.reflect.generics.tree.SimpleClassTypeSignature.make(String, boolean, TypeArgument[]):SimpleClassTypeSignature (11 bytes)   inline method (bytecode parsing)
                              @ 7  sun.reflect.generics.tree.SimpleClassTypeSignature.<init>(String, boolean, TypeArgument[]):void (20 bytes)   inline method (bytecode parsing)
                                                @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=0.007039, bonus=1.000000, nodes=9)
                            @ 3  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                            @ 48  java.lang.Character.isWhitespace(char):boolean (5 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.Character.isWhitespace(int):boolean (9 bytes)   inline method (bytecode parsing)
                                                @ 12  java.lang.StringLatin1.charAt(byte[], int):char (15 bytes)   relevance-based (relevance=1.000000, probability=0.007039, bonus=1.000000, nodes=11 <= 300.000000)
                                              @ 14  java.lang.String.charAt(int):char (25 bytes)   relevance-based (relevance=1.712317, probability=0.007039, bonus=1.000000, nodes=16 <= 300.000000)
                                                                                            @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.015290, bonus=1.000000, nodes=5)
                                                                                          @ 36  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000000, probability=0.015290, bonus=1.000000, nodes=8)
                            @ 9  java.util.regex.Pattern.lambda$Range$17(int, int, int):boolean (7 bytes)   inline method (bytecode parsing)
                                                                                            @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=0.015290, bonus=1.000000, nodes=9)
                                                    @ 3  java.util.regex.Pattern.inRange(int, int, int):boolean (16 bytes)   relevance-based (relevance=0.468008, probability=0.000622, bonus=1.000000, nodes=11 <= 140.402356)
                            @ 3  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                            @ 9  java.util.regex.Pattern.lambda$Range$17(int, int, int):boolean (7 bytes)   inline method (bytecode parsing)
                                                        @ 3  java.util.regex.Pattern.inRange(int, int, int):boolean (16 bytes)   relevance-based (relevance=0.468008, probability=0.000311, bonus=1.000000, nodes=11 <= 140.402356)
                            @ 9  java.util.regex.Pattern.lambda$Range$17(int, int, int):boolean (7 bytes)   inline method (bytecode parsing)
                                                                                            @ 12  java.lang.StringLatin1.charAt(byte[], int):char (15 bytes)   relevance-based (relevance=1.000000, probability=0.015290, bonus=1.000000, nodes=11 <= 300.000000)
                                                            @ 3  java.util.regex.Pattern.inRange(int, int, int):boolean (16 bytes)   relevance-based (relevance=0.468008, probability=0.000155, bonus=1.000000, nodes=11 <= 140.402356)
                                                                                          @ 50  java.lang.String.charAt(int):char (25 bytes)   relevance-based (relevance=1.000000, probability=0.015290, bonus=1.000000, nodes=16 <= 300.000000)
                                                                                        @ 1  sun.reflect.generics.parser.SignatureParser.current():char (59 bytes)   relevance-based (relevance=1.000000, probability=0.015290, bonus=1.000000, nodes=31 <= 300.000000)
                            @ 9  java.util.regex.Pattern.lambda$Range$17(int, int, int):boolean (7 bytes)   inline method (bytecode parsing)
                                                                                        @ 1  java.lang.CharacterData.of(int):CharacterData (136 bytes)   trivial (relevance=1.000000, probability=0.125970, bonus=1.000000, nodes=8)
                                                                @ 3  java.util.regex.Pattern.inRange(int, int, int):boolean (16 bytes)   relevance-based (relevance=0.468008, probability=0.000078, bonus=1.000000, nodes=11 <= 140.402356)
                                                                                          @ 2  java.lang.CharacterDataLatin1.getProperties(int):int (11 bytes)   trivial (relevance=1.000000, probability=0.125970, bonus=1.000000, nodes=8)
                                                                                        @ 5  java.lang.CharacterDataLatin1.isWhitespace(int):boolean (23 bytes)   relevance-based (relevance=1.000000, probability=0.125970, bonus=1.000000, nodes=13 <= 300.000000)
                            @ 9  java.util.regex.Pattern.lambda$Range$17(int, int, int):boolean (7 bytes)   inline method (bytecode parsing)
                                                                    @ 3  java.util.regex.Pattern.inRange(int, int, int):boolean (16 bytes)   relevance-based (relevance=0.468008, probability=0.000039, bonus=1.000000, nodes=11 <= 140.402356)
                                                                                            @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.125970, bonus=1.000000, nodes=5)
                                                                                          @ 36  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000000, probability=0.125970, bonus=1.000000, nodes=8)
                                                                                        @ 55  sun.reflect.generics.parser.SignatureParser.advance():void (53 bytes)   relevance-based (relevance=1.000000, probability=0.125970, bonus=1.000000, nodes=20 <= 300.000000)
                                                                    @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   not inlining it exceeds the maximum recursive inlining depth
                                                                    @ 2  java.util.regex.Pattern$CharPredicate.is(int):boolean (0 bytes)   not inlining it is a polymorphic method call and at least one invoked method cannot be inlined
                                                                    @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.468008, probability=0.000039, bonus=1.000000, nodes=13 <= 140.402356)
                                                                  @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   relevance-based (relevance=0.468008, probability=0.000078, bonus=1.000000, nodes=27 <= 140.402356)
                                                                                            @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.125970, bonus=1.000000, nodes=5)
                                                                                          @ 36  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000000, probability=0.125970, bonus=1.000000, nodes=8)
                                                                @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.468008, probability=0.000078, bonus=1.000000, nodes=39 <= 140.402356)
                                                                                            @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=0.125970, bonus=1.000000, nodes=9)
                                                              @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   relevance-based (relevance=0.468008, probability=0.000155, bonus=1.000000, nodes=52 <= 140.402356)
                            @ 3  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                                                            @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.468008, probability=0.000155, bonus=1.000000, nodes=61 <= 140.402356)
                                                          @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   relevance-based (relevance=0.468008, probability=0.000311, bonus=1.000000, nodes=74 <= 140.402356)
                                                        @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.468008, probability=0.000311, bonus=1.000000, nodes=83 <= 140.402356)
                                                      @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   relevance-based (relevance=0.468008, probability=0.000622, bonus=1.000000, nodes=96 <= 140.402356)
                                                    @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.468008, probability=0.000622, bonus=1.000000, nodes=105 <= 140.402356)
                                                  @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   relevance-based (relevance=0.468008, probability=0.001244, bonus=1.000000, nodes=118 <= 140.402356)
                                                @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.468008, probability=0.001244, bonus=1.000000, nodes=127 <= 140.402356)
                                                                                            @ 12  java.lang.StringLatin1.charAt(byte[], int):char (15 bytes)   relevance-based (relevance=1.000000, probability=0.125970, bonus=1.000000, nodes=11 <= 300.000000)
                                                @ 5  java.util.regex.Pattern.lambda$Single$14(int, int):boolean (11 bytes)   trivial (relevance=1.000000, probability=0.004551, bonus=1.000000, nodes=9)
                                                                                          @ 50  java.lang.String.charAt(int):char (25 bytes)   relevance-based (relevance=1.000000, probability=0.125970, bonus=1.000000, nodes=16 <= 300.000000)
                                              @ 19  java.util.regex.Pattern$$Lambda/0x800000038.is(int):boolean (9 bytes)   relevance-based (relevance=1.712317, probability=0.007039, bonus=1.000000, nodes=145 <= 300.000000)
                                                                                        @ 59  sun.reflect.generics.parser.SignatureParser.current():char (59 bytes)   relevance-based (relevance=1.000000, probability=0.125970, bonus=1.000000, nodes=31 <= 300.000000)
                                                                                      @ 5  sun.reflect.generics.parser.SignatureParser.skipIdentifier():void (67 bytes)   relevance-based (relevance=1.000000, probability=0.015290, bonus=1.000000, nodes=105 <= 300.000000)
                                                                                          @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.085007, bonus=1.000000, nodes=5)
                                                                                        @ 36  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000000, probability=0.085007, bonus=1.000000, nodes=8)
                                                                                          @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=0.085007, bonus=1.000000, nodes=9)
                            @ 3  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                                                                                          @ 12  java.lang.StringLatin1.charAt(byte[], int):char (15 bytes)   relevance-based (relevance=1.000000, probability=0.085007, bonus=1.000000, nodes=11 <= 300.000000)
                                                                                        @ 50  java.lang.String.charAt(int):char (25 bytes)   relevance-based (relevance=1.000000, probability=0.085007, bonus=1.000000, nodes=16 <= 300.000000)
                                                                                      @ 9  sun.reflect.generics.parser.SignatureParser.current():char (59 bytes)   relevance-based (relevance=1.219317, probability=0.085007, bonus=1.000000, nodes=31 <= 300.000000)
                                                  @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=0.463049, probability=0.000895, bonus=1.000000, nodes=9)
                                                                                            @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.015290, bonus=1.000000, nodes=5)
                                                                                          @ 1  java.lang.String.length():int (11 bytes)   trivial (relevance=1.179302, probability=0.015290, bonus=1.000000, nodes=8)
                            @ 3  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                                                                                            @ 6  jdk.internal.util.Preconditions.checkFromToIndex(int, int, int, BiFunction):int (24 bytes)   relevance-based (relevance=1.000000, probability=0.015290, bonus=1.000000, nodes=14 <= 300.000000)
                                                                                          @ 8  java.lang.String.checkBoundsBeginEnd(int, int, int):void (11 bytes)   relevance-based (relevance=1.179302, probability=0.015290, bonus=1.000000, nodes=13 <= 300.000000)
                                                  @ 12  java.lang.StringLatin1.charAt(byte[], int):char (15 bytes)   relevance-based (relevance=0.463049, probability=0.000895, bonus=1.000000, nodes=11 <= 138.914776)
                                                                                          @ 28  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.098893, probability=0.014248, bonus=1.000000, nodes=9)
                                                @ 21  java.lang.String.charAt(int):char (25 bytes)   relevance-based (relevance=0.463049, probability=0.000895, bonus=1.000000, nodes=16 <= 138.914776)
                            @ 20  java.lang.String.<init>(byte[], byte):void (15 bytes)   inline method (bytecode parsing)
                            @ 13  java.util.Arrays.copyOfRangeByte(byte[], int, int):byte[] (33 bytes)   inline method (bytecode parsing)
                              @ 2  java.util.Arrays.checkLength(int, int):void (38 bytes)   inline method (bytecode parsing)
                                                                                              @ 24  java.lang.Math.min(int, int):int (11 bytes)   trivial (relevance=1.556665, probability=0.011402, bonus=1.000000, nodes=7)
                                                                                            @ 16  java.util.Arrays.copyOfRange(byte[], int, int):byte[] (25 bytes)   relevance-based (relevance=1.000000, probability=0.014242, bonus=1.000000, nodes=44 <= 300.000000)
                                                  @ 5  java.util.regex.Pattern.lambda$Single$14(int, int):boolean (11 bytes)   trivial (relevance=0.243869, probability=0.000262, bonus=1.000000, nodes=9)
                                                                                          @ 41  java.lang.StringLatin1.newString(byte[], int, int):String (24 bytes)   relevance-based (relevance=1.098811, probability=0.014247, bonus=1.000000, nodes=62 <= 300.000000)
                                                    @ 8  java.util.regex.ASCII.isDigit(int):boolean (18 bytes)   relevance-based (relevance=0.463049, probability=0.000497, bonus=1.000000, nodes=13 <= 138.914776)
                            @ 31  java.lang.String.<init>(byte[], byte):void (15 bytes)   inline method (bytecode parsing)
                                                  @ 1  java.util.regex.CharPredicates.lambda$ASCII_DIGIT$18(int):boolean (20 bytes)   relevance-based (relevance=0.463049, probability=0.000497, bonus=1.000000, nodes=16 <= 138.914776)
                            @ 54  java.lang.String.<init>(byte[], byte):void (15 bytes)   inline method (bytecode parsing)
                                                @ 26  java.util.regex.CharPredicates$$Lambda/0x800000034.is(int):boolean (5 bytes)   relevance-based (relevance=0.463049, probability=0.000895, bonus=1.000000, nodes=33 <= 138.914776)
                                                                                          @ 54  java.lang.StringUTF16.newString(byte[], int, int):String (58 bytes)   not inlining relevance-based (relevance=0.000082, probability=0.000001, bonus=1.000000, nodes=41 > 0.024677)
                                                                                        @ 12  java.lang.String.substring(int, int):String (58 bytes)   relevance-based (relevance=1.000000, probability=0.015290, bonus=1.000000, nodes=98 <= 300.000000)
                                              @ 36  java.util.regex.Pattern$GroupTail.match(Matcher, int, CharSequence):boolean (111 bytes)   not inlining relevance-based (relevance=0.643395, probability=0.002928, bonus=1.000000, nodes=202 > 193.018452)
                                                                                      @ 29  sun.reflect.generics.parser.SignatureParser.markToCurrent():String (16 bytes)   relevance-based (relevance=1.000000, probability=0.015290, bonus=1.000000, nodes=103 <= 300.000000)
                                                @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=0.011953, bonus=1.000000, nodes=9)
                            @ 3  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                                                                                        @ 6  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000139, probability=0.015290, bonus=1.000000, nodes=9)
                                                @ 12  java.lang.StringLatin1.charAt(byte[], int):char (15 bytes)   relevance-based (relevance=1.000000, probability=0.011953, bonus=1.000000, nodes=11 <= 300.000000)
                                              @ 21  java.lang.String.charAt(int):char (25 bytes)   relevance-based (relevance=1.698232, probability=0.011953, bonus=1.000000, nodes=16 <= 300.000000)
                            @ 49  java.lang.StringConcatHelper.newArray(long):byte[] (40 bytes)   inline method (bytecode parsing)
                            @ 123  java.lang.String.<init>(byte[], byte):void (15 bytes)   inline method (bytecode parsing)
                                                @ 5  java.util.regex.Pattern.lambda$Single$14(int, int):boolean (11 bytes)   trivial (relevance=0.894390, probability=0.003494, bonus=1.000000, nodes=9)
                                                                                        @ 18  java.lang.StringLatin1.replace(byte[], char, char):String (198 bytes)   not inlining too large previous low-level graph (low-level-nodes: 345, relevance=1.000139, probability=0.015290, bonus=1.000000, nodes=96)
                                                                                      @ 36  java.lang.String.replace(char, char):String (42 bytes)   relevance-based (relevance=0.999993, probability=0.015290, bonus=1.000000, nodes=19 <= 299.997763)
                                                  @ 8  java.util.regex.ASCII.isDigit(int):boolean (18 bytes)   relevance-based (relevance=1.000000, probability=0.006635, bonus=1.000000, nodes=13 <= 300.000000)
                                                @ 1  java.util.regex.CharPredicates.lambda$ASCII_DIGIT$18(int):boolean (20 bytes)   relevance-based (relevance=1.000000, probability=0.006635, bonus=1.000000, nodes=16 <= 300.000000)
                                                                                          @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=0.999993, probability=0.015290, bonus=1.000000, nodes=5)
                                                                                        @ 36  java.lang.String.length():int (11 bytes)   trivial (relevance=0.999993, probability=0.015290, bonus=1.000000, nodes=8)
                                              @ 26  java.util.regex.CharPredicates$$Lambda/0x800000034.is(int):boolean (5 bytes)   relevance-based (relevance=1.698232, probability=0.011953, bonus=1.000000, nodes=33 <= 300.000000)
                                                                                          @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=0.999993, probability=0.015290, bonus=1.000000, nodes=9)
                                            @ 28  java.util.regex.Pattern$BmpCharPropertyGreedy.match(Matcher, int, CharSequence):boolean (89 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.014078, bonus=1.000000, nodes=317 > 300.000000)
                                          @ 50  java.util.regex.Pattern$GroupHead.match(Matcher, int, CharSequence):boolean (47 bytes)   relevance-based (relevance=1.666708, probability=0.014078, bonus=1.000000, nodes=20 <= 300.000000)
                            @ 3  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                                                                                          @ 12  java.lang.StringLatin1.charAt(byte[], int):char (15 bytes)   relevance-based (relevance=0.999993, probability=0.015290, bonus=1.000000, nodes=11 <= 299.997763)
                                                                                        @ 50  java.lang.String.charAt(int):char (25 bytes)   relevance-based (relevance=0.999993, probability=0.015290, bonus=1.000000, nodes=16 <= 299.997763)
                                                                                      @ 41  sun.reflect.generics.parser.SignatureParser.current():char (59 bytes)   relevance-based (relevance=0.999993, probability=0.015290, bonus=1.000000, nodes=31 <= 299.997763)
                                                                                    @ 54  sun.reflect.generics.parser.SignatureParser.parsePackageNameAndSimpleClassTypeSignature():SimpleClassTypeSignature (119 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.015290, bonus=1.000000, nodes=311 > 300.000000)
                                                                                    @ 57  java.util.ArrayList.add(Object):boolean (25 bytes)   not inlining too large previous low-level graph (low-level-nodes: 472, relevance=1.000000, probability=0.015290, bonus=1.000000, nodes=15)
                                                                                          @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.015290, bonus=1.000000, nodes=5)
                                                                                        @ 36  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000000, probability=0.015290, bonus=1.000000, nodes=8)
                                                                                          @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=0.015290, bonus=1.000000, nodes=9)
                            @ 3  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                                                                                          @ 12  java.lang.StringLatin1.charAt(byte[], int):char (15 bytes)   relevance-based (relevance=1.000000, probability=0.015290, bonus=1.000000, nodes=11 <= 300.000000)
                                                                                        @ 50  java.lang.String.charAt(int):char (25 bytes)   relevance-based (relevance=1.000000, probability=0.015290, bonus=1.000000, nodes=16 <= 300.000000)
                                                                                      @ 1  sun.reflect.generics.parser.SignatureParser.current():char (59 bytes)   relevance-based (relevance=1.000000, probability=0.015290, bonus=1.000000, nodes=31 <= 300.000000)
                                                                                    @ 65  sun.reflect.generics.parser.SignatureParser.parseClassTypeSignatureSuffix(List):void (29 bytes)   relevance-based (relevance=1.000000, probability=0.015290, bonus=1.000000, nodes=35 <= 300.000000)
                                                @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=0.856238, probability=0.001408, bonus=1.000000, nodes=9)
                            @ 3  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                                                                                        @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.015290, bonus=1.000000, nodes=5)
                                                                                      @ 36  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000000, probability=0.015290, bonus=1.000000, nodes=8)
                                                @ 12  java.lang.StringLatin1.charAt(byte[], int):char (15 bytes)   relevance-based (relevance=0.856238, probability=0.001408, bonus=1.000000, nodes=11 <= 256.871437)
                                              @ 14  java.lang.String.charAt(int):char (25 bytes)   relevance-based (relevance=0.856238, probability=0.001408, bonus=1.000000, nodes=16 <= 256.871437)
                                                                                        @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=0.015290, bonus=1.000000, nodes=9)
                            @ 3  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                                                                                        @ 12  java.lang.StringLatin1.charAt(byte[], int):char (15 bytes)   relevance-based (relevance=1.000000, probability=0.015290, bonus=1.000000, nodes=11 <= 300.000000)
                                                                                      @ 50  java.lang.String.charAt(int):char (25 bytes)   relevance-based (relevance=1.000000, probability=0.015290, bonus=1.000000, nodes=16 <= 300.000000)
                                                                                    @ 69  sun.reflect.generics.parser.SignatureParser.current():char (59 bytes)   relevance-based (relevance=1.000000, probability=0.015290, bonus=1.000000, nodes=31 <= 300.000000)
                            @ 9  java.util.regex.Pattern.lambda$Range$17(int, int, int):boolean (7 bytes)   inline method (bytecode parsing)
                                                                                        @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.015290, bonus=1.000000, nodes=5)
                                                                                      @ 36  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000000, probability=0.015290, bonus=1.000000, nodes=8)
                                                                                    @ 110  sun.reflect.generics.parser.SignatureParser.advance():void (53 bytes)   relevance-based (relevance=1.000000, probability=0.015290, bonus=1.000000, nodes=20 <= 300.000000)
                                                                                  @ 41  sun.reflect.generics.parser.SignatureParser.parseClassTypeSignature():ClassTypeSignature (118 bytes)   relevance-based (relevance=1.000000, probability=0.015290, bonus=1.000000, nodes=144 <= 300.000000)
                                                    @ 3  java.util.regex.Pattern.inRange(int, int, int):boolean (16 bytes)   relevance-based (relevance=0.234026, probability=0.000124, bonus=1.000000, nodes=11 <= 70.207698)
                                                                                @ 2  sun.reflect.generics.parser.SignatureParser.parseFieldTypeSignature(boolean):FieldTypeSignature (73 bytes)   relevance-based (relevance=1.000000, probability=0.015290, bonus=1.000000, nodes=174 <= 300.000000)
                            @ 9  java.util.regex.Pattern.lambda$Range$17(int, int, int):boolean (7 bytes)   inline method (bytecode parsing)
                                                        @ 3  java.util.regex.Pattern.inRange(int, int, int):boolean (16 bytes)   relevance-based (relevance=0.234026, probability=0.000062, bonus=1.000000, nodes=11 <= 70.207698)
                                                                              @ 6  sun.reflect.generics.parser.SignatureParser.parseTypeSignature():TypeSignature (130 bytes)   relevance-based (relevance=1.030610, probability=0.015290, bonus=1.000000, nodes=205 <= 300.000000)
                            @ 9  java.util.regex.Pattern.lambda$Range$17(int, int, int):boolean (7 bytes)   inline method (bytecode parsing)
                                                            @ 3  java.util.regex.Pattern.inRange(int, int, int):boolean (16 bytes)   relevance-based (relevance=0.234026, probability=0.000031, bonus=1.000000, nodes=11 <= 70.207698)
                                                                              @ 6  sun.reflect.generics.factory.CoreReflectionFactory.<init>(GenericDeclaration, Scope):void (15 bytes)   relevance-based (relevance=1.030610, probability=0.015290, bonus=1.000000, nodes=11 <= 300.000000)
                            @ 9  java.util.regex.Pattern.lambda$Range$17(int, int, int):boolean (7 bytes)   inline method (bytecode parsing)
                            @ 1  sun.reflect.generics.tree.ClassTypeSignature.getPath():List (5 bytes)   inline accessor method (bytecode parsing)
                            @ 52  sun.reflect.generics.tree.SimpleClassTypeSignature.getName():String (5 bytes)   inline accessor method (bytecode parsing)
                            @ 55  java.lang.StringBuilder.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                            @ 62  sun.reflect.generics.tree.SimpleClassTypeSignature.getDollar():boolean (5 bytes)   inline accessor method (bytecode parsing)
                                                                @ 3  java.util.regex.Pattern.inRange(int, int, int):boolean (16 bytes)   relevance-based (relevance=0.234026, probability=0.000016, bonus=1.000000, nodes=11 <= 70.207698)
                            @ 165  sun.reflect.generics.visitor.Reifier.getFactory():GenericsFactory (5 bytes)   inline accessor method (bytecode parsing)
                            @ 170  java.lang.StringBuilder.toString():String (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.String.<init>(StringBuilder):void (7 bytes)   inline method (bytecode parsing)
                            @ 182  sun.reflect.generics.tree.SimpleClassTypeSignature.getTypeArguments():TypeArgument[] (5 bytes)   inline accessor method (bytecode parsing)
                            @ 9  java.util.regex.Pattern.lambda$Range$17(int, int, int):boolean (7 bytes)   inline method (bytecode parsing)
                                                                                    @ 5  java.util.ArrayList$Itr.<init>(ArrayList):void (26 bytes)   relevance-based (relevance=1.000000, probability=0.015290, bonus=1.000000, nodes=15 <= 300.000000)
                                                                    @ 3  java.util.regex.Pattern.inRange(int, int, int):boolean (16 bytes)   relevance-based (relevance=0.234026, probability=0.000008, bonus=1.000000, nodes=11 <= 70.207698)
                                                                                  @ 29  java.util.ArrayList.iterator():Iterator (9 bytes)   relevance-based (relevance=1.000000, probability=0.015290, bonus=1.000000, nodes=16 <= 300.000000)
                                                                    @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   not inlining it exceeds the maximum recursive inlining depth
                                                                    @ 2  java.util.regex.Pattern$CharPredicate.is(int):boolean (0 bytes)   not inlining it is a polymorphic method call and at least one invoked method cannot be inlined
                                                                    @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.234026, probability=0.000008, bonus=1.000000, nodes=13 <= 70.207698)
                                                                                    @ 1  java.util.ArrayList$Itr.checkForComodification():void (23 bytes)   trivial (relevance=1.000000, probability=0.015290, bonus=1.000000, nodes=9)
                                                                                  @ 36  java.util.ArrayList$Itr.next():Object (66 bytes)   relevance-based (relevance=1.000000, probability=0.015290, bonus=1.000000, nodes=25 <= 300.000000)
                                                                  @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   relevance-based (relevance=0.234026, probability=0.000016, bonus=1.000000, nodes=27 <= 70.207698)
                                                                @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.234026, probability=0.000016, bonus=1.000000, nodes=39 <= 70.207698)
                                                              @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   relevance-based (relevance=0.234026, probability=0.000031, bonus=1.000000, nodes=52 <= 70.207698)
                                                                                      @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.015290, bonus=1.000000, nodes=5)
                                                                                    @ 5  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000000, probability=0.015290, bonus=1.000000, nodes=8)
                                                                                    @ 26  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.015290, bonus=1.000000, nodes=5)
                                                            @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.234026, probability=0.000031, bonus=1.000000, nodes=61 <= 70.207698)
                            @ 2  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                                                          @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   not inlining relevance-based (relevance=0.234026, probability=0.000062, bonus=1.000000, nodes=74 > 70.207698)
                                                                                      @ 2  java.lang.AbstractStringBuilder.append(String):AbstractStringBuilder (45 bytes)   not inlining too large previous low-level graph (low-level-nodes: 368, relevance=1.000000, probability=0.015290, bonus=1.000000, nodes=23)
                                                                                    @ 58  java.lang.StringBuilder.append(String):AbstractStringBuilder (6 bytes)   trivial (relevance=1.000000, probability=0.015290, bonus=1.000000, nodes=9)
                                                        @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.234026, probability=0.000062, bonus=1.000000, nodes=13 <= 70.207698)
                                                                                  @ 2  java.lang.AbstractStringBuilder.<init>(String):void (63 bytes)   relevance-based (relevance=1.000000, probability=0.015290, bonus=1.000000, nodes=33 <= 300.000000)
                                                      @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   relevance-based (relevance=0.234026, probability=0.000124, bonus=1.000000, nodes=27 <= 70.207698)
                                                                                  @ 68  java.util.ArrayList$Itr.hasNext():boolean (20 bytes)   relevance-based (relevance=1.000000, probability=0.015290, bonus=1.000000, nodes=11 <= 300.000000)
                                                    @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.234026, probability=0.000124, bonus=1.000000, nodes=39 <= 70.207698)
                            @ 5  java.lang.AbstractStringBuilder.getValue():byte[] (5 bytes)   inline accessor method (bytecode parsing)
                                                  @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   relevance-based (relevance=0.234026, probability=0.000249, bonus=1.000000, nodes=52 <= 70.207698)
                                                                                  @ 3  java.lang.String.<init>(AbstractStringBuilder, Void):void (99 bytes)   not inlining too large previous low-level graph (low-level-nodes: 376, relevance=1.000000, probability=0.015290, bonus=1.000000, nodes=41)
                                                @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.234026, probability=0.000249, bonus=1.000000, nodes=61 <= 70.207698)
                            @ 17  java.lang.Class.getClassLoader():ClassLoader (28 bytes)   inline method (bytecode parsing)
                                                @ 5  java.util.regex.Pattern.lambda$Single$14(int, int):boolean (11 bytes)   trivial (relevance=0.856238, probability=0.000910, bonus=1.000000, nodes=9)
                                                                                        @ 0  java.lang.System.allowSecurityManager():boolean (13 bytes)   trivial (relevance=1.000769, probability=0.009866, bonus=1.000000, nodes=8)
                                                                                      @ 11  java.lang.System.getSecurityManager():SecurityManager (12 bytes)   relevance-based (relevance=1.000000, probability=0.009866, bonus=1.000000, nodes=14 <= 300.000000)
                                              @ 19  java.util.regex.Pattern$$Lambda/0x800000038.is(int):boolean (9 bytes)   relevance-based (relevance=0.856238, probability=0.001408, bonus=1.000000, nodes=79 <= 256.871437)
                                                                                    @ 3  sun.reflect.generics.factory.CoreReflectionFactory.getDeclsLoader():ClassLoader (85 bytes)   relevance-based (relevance=1.000000, probability=0.015290, bonus=1.000000, nodes=42 <= 300.000000)
                                            @ 28  java.util.regex.Pattern$BmpCharPropertyGreedy.match(Matcher, int, CharSequence):boolean (89 bytes)   not inlining relevance-based (relevance=0.500046, probability=0.002816, bonus=1.000000, nodes=205 > 150.013931)
                                                                                        @ 0  java.lang.System.allowSecurityManager():boolean (13 bytes)   trivial (relevance=1.000769, probability=0.015290, bonus=1.000000, nodes=8)
                                                                                      @ 2  java.lang.System.getSecurityManager():SecurityManager (12 bytes)   relevance-based (relevance=1.000000, probability=0.015290, bonus=1.000000, nodes=14 <= 300.000000)
                                                                                          @ 0  java.lang.System.allowSecurityManager():boolean (13 bytes)   trivial (relevance=1.000769, probability=0.015290, bonus=1.000000, nodes=8)
                                                                                        @ 0  java.lang.System.getSecurityManager():SecurityManager (12 bytes)   relevance-based (relevance=1.000000, probability=0.015290, bonus=1.000000, nodes=14 <= 300.000000)
                 n                                                                    @ 37  java.lang.Class.forName0(String, boolean, ClassLoader, Class):Class (0 bytes)   not inlining it is a non-intrinsic native method
                                                                                      @ 20  java.lang.Class.forName(String, boolean, ClassLoader, Class):Class (41 bytes)   relevance-based (relevance=1.000769, probability=0.015290, bonus=1.000000, nodes=27 <= 300.000000)
                                                                                    @ 6  java.lang.Class.forName(String, boolean, ClassLoader):Class (24 bytes)   relevance-based (relevance=1.551003, probability=0.015290, bonus=1.000000, nodes=44 <= 300.000000)
                                                                                  @ 173  sun.reflect.generics.factory.CoreReflectionFactory.makeNamedType(String):Type (21 bytes)   relevance-based (relevance=1.000000, probability=0.015290, bonus=1.000000, nodes=82 <= 300.000000)
                                                                                @ 2  sun.reflect.generics.visitor.Reifier.visitClassTypeSignature(ClassTypeSignature):void (381 bytes)   relevance-based (relevance=1.000000, probability=0.015290, bonus=1.000000, nodes=184 <= 300.000000)
                                                  @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=0.002815, bonus=1.000000, nodes=9)
                                                                              @ 44  sun.reflect.generics.tree.ClassTypeSignature.accept(TypeTreeVisitor):void (8 bytes)   relevance-based (relevance=1.030610, probability=0.015290, bonus=1.000000, nodes=185 <= 300.000000)
                            @ 3  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                                                  @ 12  java.lang.StringLatin1.charAt(byte[], int):char (15 bytes)   relevance-based (relevance=1.000000, probability=0.002815, bonus=1.000000, nodes=11 <= 300.000000)
                                                                            @ 27  sun.reflect.annotation.AnnotationParser.parseSig(String, Class):Class (62 bytes)   not inlining relevance-based (relevance=1.000170, probability=0.015290, bonus=1.000000, nodes=456 > 300.000000)
                                                @ 14  java.lang.String.charAt(int):char (25 bytes)   relevance-based (relevance=1.712317, probability=0.002815, bonus=1.000000, nodes=16 <= 300.000000)
                            @ 0  jdk.internal.access.SharedSecrets.getJavaLangAccess():JavaLangAccess (4 bytes)   inline method (bytecode parsing)
                            @ 1  java.lang.Class.getAnnotationType():AnnotationType (5 bytes)   inline accessor method (bytecode parsing)
                                                                              @ 6  java.lang.System$2.getAnnotationType(Class):AnnotationType (5 bytes)   relevance-based (relevance=1.002802, probability=0.015290, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 17  java.lang.IllegalArgumentException.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  java.lang.RuntimeException.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                                @ 2  java.lang.Exception.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                            @ 27  sun.reflect.annotation.AnnotationType$1.<init>(AnnotationType, Class):void (10 bytes)   inline method (bytecode parsing)
                            @ 30  java.security.AccessController.doPrivileged(PrivilegedAction):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.security.AccessController.executePrivileged(PrivilegedAction, AccessControlContext, Class):Object (65 bytes)   inline method (bytecode parsing)
                                @ 29  sun.reflect.annotation.AnnotationType$1.run():Object (5 bytes)   inline method (bytecode parsing)
                                  @ 1  sun.reflect.annotation.AnnotationType$1.run():Method[] (8 bytes)   inline method (bytecode parsing)
                            @ 9  java.util.regex.Pattern.lambda$Range$17(int, int, int):boolean (7 bytes)   inline method (bytecode parsing)
                            @ 59  java.util.HashMap.<init>(int):void (8 bytes)   inline method (bytecode parsing)
                            @ 105  java.lang.reflect.Method.getModifiers():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 116  java.lang.reflect.Method.getModifiers():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 127  java.lang.reflect.Method.isSynthetic():boolean (5 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.reflect.Executable.isSynthetic():boolean (8 bytes)   inline method (bytecode parsing)
                                                      @ 3  java.util.regex.Pattern.inRange(int, int, int):boolean (16 bytes)   relevance-based (relevance=0.468008, probability=0.000249, bonus=1.000000, nodes=11 <= 140.402356)
                                @ 1  java.lang.reflect.Method.getModifiers():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 135  java.lang.reflect.Method.getParameterCount():int (6 bytes)   inline method (bytecode parsing)
                            @ 171  java.lang.reflect.Method.getName():String (5 bytes)   inline accessor method (bytecode parsing)
                            @ 178  java.lang.reflect.Method.getReturnType():Class (5 bytes)   inline accessor method (bytecode parsing)
                            @ 149  java.lang.StringBuilder.<init>():void (7 bytes)   inline method (bytecode parsing)
                            @ 154  java.lang.StringBuilder.append(Object):StringBuilder (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 159  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 162  java.lang.StringBuilder.toString():String (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.String.<init>(StringBuilder):void (7 bytes)   inline method (bytecode parsing)
                            @ 165  java.lang.IllegalArgumentException.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  java.lang.RuntimeException.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                                @ 2  java.lang.Exception.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                            @ 9  java.util.regex.Pattern.lambda$Range$17(int, int, int):boolean (7 bytes)   inline method (bytecode parsing)
                            @ 258  jdk.internal.access.SharedSecrets.getJavaLangAccess():JavaLangAccess (4 bytes)   inline method (bytecode parsing)
                                                          @ 3  java.util.regex.Pattern.inRange(int, int, int):boolean (16 bytes)   relevance-based (relevance=0.468008, probability=0.000124, bonus=1.000000, nodes=11 <= 140.402356)
                            @ 9  java.util.regex.Pattern.lambda$Range$17(int, int, int):boolean (7 bytes)   inline method (bytecode parsing)
                                                              @ 3  java.util.regex.Pattern.inRange(int, int, int):boolean (16 bytes)   relevance-based (relevance=0.468008, probability=0.000062, bonus=1.000000, nodes=11 <= 140.402356)
                                                                              @ 21  sun.reflect.annotation.AnnotationType.<init>(Class):void (361 bytes)   not inlining relevance-based (relevance=0.002802, probability=0.000043, bonus=1.000000, nodes=244 > 0.840650)
                            @ 3  java.lang.Class.casAnnotationType(AnnotationType, AnnotationType):boolean (7 bytes)   inline method (bytecode parsing)
                                                                              @ 29  java.lang.System$2.casAnnotationType(Class, AnnotationType, AnnotationType):boolean (7 bytes)   not inlining relevance-based (relevance=0.002802, probability=0.000043, bonus=1.000000, nodes=13 > 0.840650)
                                                                            @ 103  sun.reflect.annotation.AnnotationType.getInstance(Class):AnnotationType (65 bytes)   relevance-based (relevance=1.000170, probability=0.015290, bonus=1.000000, nodes=37 <= 300.000000)
                            @ 9  java.util.regex.Pattern.lambda$Range$17(int, int, int):boolean (7 bytes)   inline method (bytecode parsing)
                            @ 1  java.util.AbstractMap.<init>():void (5 bytes)   inline method (bytecode parsing)
                                                                              @ 1  java.util.HashMap.<init>():void (11 bytes)   trivial (relevance=1.000000, probability=0.015290, bonus=1.000000, nodes=8)
                                                                  @ 3  java.util.regex.Pattern.inRange(int, int, int):boolean (16 bytes)   relevance-based (relevance=0.468008, probability=0.000031, bonus=1.000000, nodes=11 <= 140.402356)
                            @ 9  java.util.regex.Pattern.lambda$Range$17(int, int, int):boolean (7 bytes)   inline method (bytecode parsing)
                                                                      @ 3  java.util.regex.Pattern.inRange(int, int, int):boolean (16 bytes)   relevance-based (relevance=0.468008, probability=0.000016, bonus=1.000000, nodes=11 <= 140.402356)
                                                                                @ 4  java.util.Map.size():int (0 bytes)   not inlining no type profile exists
                                                                                @ 1  java.util.HashMap.size():int (5 bytes)   relevance-based (relevance=1.637394, probability=0.015290, bonus=1.000000, nodes=13 <= 300.000000)
                                                                      @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   not inlining it exceeds the maximum recursive inlining depth
                                                                      @ 2  java.util.regex.Pattern$CharPredicate.is(int):boolean (0 bytes)   not inlining it is a polymorphic method call and at least one invoked method cannot be inlined
                                                                      @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.468008, probability=0.000016, bonus=1.000000, nodes=13 <= 140.402356)
                                                                    @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   relevance-based (relevance=0.468008, probability=0.000031, bonus=1.000000, nodes=27 <= 140.402356)
                                                                                @ 62  java.util.HashMap.tableSizeFor(int):int (32 bytes)   relevance-based (relevance=0.269454, probability=0.003444, bonus=1.000000, nodes=23 <= 80.836093)
                                                                  @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.468008, probability=0.000031, bonus=1.000000, nodes=39 <= 140.402356)
                            @ 15  java.util.HashMap$EntrySet.<init>(HashMap):void (10 bytes)   inline method (bytecode parsing)
                              @ 6  java.util.AbstractSet.<init>():void (5 bytes)   inline method (bytecode parsing)
                                @ 1  java.util.AbstractCollection.<init>():void (5 bytes)   inline method (bytecode parsing)
                                                                @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   relevance-based (relevance=0.468008, probability=0.000062, bonus=1.000000, nodes=52 <= 140.402356)
                            @ 21  java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet.<init>(Set):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  java.util.Collections$UnmodifiableSet.<init>(Set):void (6 bytes)   inline method (bytecode parsing)
                                                                                @ 16  java.util.Map.entrySet():Set (0 bytes)   not inlining no type profile exists
                                                              @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.468008, probability=0.000062, bonus=1.000000, nodes=61 <= 140.402356)
                                                                                  @ 2  java.util.Collections$UnmodifiableCollection.<init>(Collection):void (22 bytes)   relevance-based (relevance=0.338003, probability=0.001252, bonus=1.000000, nodes=10 <= 101.400946)
                                                                                @ 98  java.util.HashMap.entrySet():Set (27 bytes)   relevance-based (relevance=0.465646, probability=0.005952, bonus=1.000000, nodes=50 <= 139.693709)
                                                            @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   relevance-based (relevance=0.468008, probability=0.000124, bonus=1.000000, nodes=74 <= 140.402356)
                            @ 8  java.util.HashMap$EntryIterator.<init>(HashMap):void (6 bytes)   inline method (bytecode parsing)
                                                          @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.468008, probability=0.000124, bonus=1.000000, nodes=83 <= 140.402356)
                                                                                  @ 17  java.util.Collection.iterator():Iterator (0 bytes)   not inlining no type profile exists
                                                                                  @ 5  java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1.<init>(Collections$UnmodifiableMap$UnmodifiableEntrySet):void (26 bytes)   relevance-based (relevance=0.338003, probability=0.002503, bonus=1.000000, nodes=15 <= 101.400946)
                                                        @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   relevance-based (relevance=0.468008, probability=0.000249, bonus=1.000000, nodes=96 <= 140.402356)
                                                                                  @ 2  java.util.HashMap$HashIterator.<init>(HashMap):void (79 bytes)   not inlining too large previous low-level graph (low-level-nodes: 409, relevance=0.465646, probability=0.003449, bonus=1.000000, nodes=58)
                                                                                @ 103  java.util.HashMap$EntrySet.iterator():Iterator (12 bytes)   relevance-based (relevance=0.465646, probability=0.005952, bonus=1.000000, nodes=26 <= 139.693709)
                                                      @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.468008, probability=0.000249, bonus=1.000000, nodes=105 <= 140.402356)
                                                    @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   relevance-based (relevance=0.468008, probability=0.000498, bonus=1.000000, nodes=118 <= 140.402356)
                                                                                  @ 4  java.util.HashMap$HashIterator.hasNext():boolean (13 bytes)   trivial (relevance=0.576359, probability=0.017523, bonus=1.000000, nodes=9)
                                                                                @ 112  java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1.hasNext():boolean (10 bytes)   relevance-based (relevance=0.576359, probability=0.030986, bonus=1.000000, nodes=27 <= 172.907803)
                                                  @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.468008, probability=0.000498, bonus=1.000000, nodes=127 <= 140.402356)
                            @ 1  java.util.HashMap$EntryIterator.next():Map$Entry (5 bytes)   inline method (bytecode parsing)
                                                                                  @ 1  java.util.HashMap$HashIterator.nextNode():HashMap$Node (100 bytes)   not inlining too large previous low-level graph (low-level-nodes: 450, relevance=0.443472, probability=0.010013, bonus=1.000000, nodes=53)
                                                  @ 5  java.util.regex.Pattern.lambda$Single$14(int, int):boolean (11 bytes)   trivial (relevance=1.000000, probability=0.001820, bonus=1.000000, nodes=9)
                            @ 1  java.util.HashMap$EntryIterator.next():Map$Entry (5 bytes)   inline method (bytecode parsing)
                                                @ 19  java.util.regex.Pattern$$Lambda/0x800000038.is(int):boolean (9 bytes)   relevance-based (relevance=1.712317, probability=0.002815, bonus=1.000000, nodes=145 <= 300.000000)
                                                                                      @ 1  java.util.HashMap$HashIterator.nextNode():HashMap$Node (100 bytes)   not inlining too large previous low-level graph (low-level-nodes: 450, relevance=0.665208, probability=0.015020, bonus=1.000000, nodes=53)
                                                                                    @ 8  java.util.HashMap$EntryIterator.next():Object (5 bytes)   trivial (relevance=0.665208, probability=0.015020, bonus=1.000000, nodes=8)
                            @ 6  java.util.Objects.requireNonNull(Object):Object (14 bytes)   inline method (bytecode parsing)
                                                                                    @ 16  java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry.<init>(Map$Entry):void (16 bytes)   trivial (relevance=0.665208, probability=0.015020, bonus=1.000000, nodes=7)
                                                                                  @ 1  java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1.next():Map$Entry (20 bytes)   relevance-based (relevance=0.665208, probability=0.015020, bonus=1.000000, nodes=28 <= 199.562441)
                                                                                @ 122  java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1.next():Object (5 bytes)   relevance-based (relevance=0.665208, probability=0.025034, bonus=1.000000, nodes=37 <= 199.562441)
                                                                                  @ 4  java.util.HashMap$Node.getKey():Object (5 bytes)   trivial (relevance=0.665208, probability=0.015020, bonus=1.000000, nodes=5)
                                                                                @ 134  java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry.getKey():Object (10 bytes)   relevance-based (relevance=0.665208, probability=0.025034, bonus=1.000000, nodes=19 <= 199.562441)
                                                                                  @ 4  java.util.HashMap$Node.getValue():Object (5 bytes)   trivial (relevance=0.665208, probability=0.015020, bonus=1.000000, nodes=5)
                                                                                @ 143  java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry.getValue():Object (10 bytes)   relevance-based (relevance=0.665208, probability=0.025034, bonus=1.000000, nodes=19 <= 199.562441)
                                                                              @ 17  java.util.HashMap.putMapEntries(Map, boolean):void (170 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.015290, bonus=1.000000, nodes=316 > 300.000000)
                                                                            @ 136  java.util.LinkedHashMap.<init>(Map):void (21 bytes)   relevance-based (relevance=1.000170, probability=0.015290, bonus=1.000000, nodes=19 <= 300.000000)
                            @ 4  java.nio.Buffer.session():MemorySessionImpl (20 bytes)   inline method (bytecode parsing)
                            @ 18  java.nio.HeapByteBuffer.byteOffset(long):long (7 bytes)   inline method (bytecode parsing)
                                                    @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=0.463049, probability=0.000358, bonus=1.000000, nodes=9)
                            @ 25  jdk.internal.misc.ScopedMemoryAccess.getShortUnaligned(MemorySessionImpl, Object, long, boolean):short (18 bytes)   inline method (bytecode parsing)
                              @ 6  jdk.internal.misc.ScopedMemoryAccess.getShortUnalignedInternal(MemorySessionImpl, Object, long, boolean):short (36 bytes)   inline method (bytecode parsing)
                                @ 15  jdk.internal.misc.Unsafe.getShortUnaligned(Object, long, boolean):short (12 bytes)   inline method (bytecode parsing)
                            @ 3  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                                                    @ 12  java.lang.StringLatin1.charAt(byte[], int):char (15 bytes)   relevance-based (relevance=0.463049, probability=0.000358, bonus=1.000000, nodes=11 <= 138.914776)
                                                                              @ 14  java.nio.Buffer.nextGetIndex(int):int (32 bytes)   relevance-based (relevance=1.000000, probability=0.015290, bonus=1.000000, nodes=13 <= 300.000000)
                                                  @ 21  java.lang.String.charAt(int):char (25 bytes)   relevance-based (relevance=0.463049, probability=0.000358, bonus=1.000000, nodes=16 <= 138.914776)
                                                                              @ 8  jdk.internal.misc.Unsafe.convEndian(boolean, short):short (16 bytes)   relevance-based (relevance=1.000000, probability=0.015290, bonus=1.000000, nodes=20 <= 300.000000)
                                                                            @ 142  java.nio.HeapByteBuffer.getShort():short (29 bytes)   relevance-based (relevance=1.000170, probability=0.015290, bonus=1.000000, nodes=44 <= 300.000000)
                            @ 9  java.security.AccessController.doPrivileged(PrivilegedAction):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.security.AccessController.executePrivileged(PrivilegedAction, AccessControlContext, Class):Object (65 bytes)   inline method (bytecode parsing)
                                @ 29  sun.reflect.annotation.AnnotationParser$1.run():Object (5 bytes)   inline method (bytecode parsing)
                                                    @ 5  java.util.regex.Pattern.lambda$Single$14(int, int):boolean (11 bytes)   trivial (relevance=0.243869, probability=0.000105, bonus=1.000000, nodes=9)
                                                                              @ 6  sun.reflect.annotation.AnnotationParser$1.<init>(Class, Map):void (15 bytes)   relevance-based (relevance=1.000000, probability=0.015290, bonus=1.000000, nodes=11 <= 300.000000)
                                                      @ 8  java.util.regex.ASCII.isDigit(int):boolean (18 bytes)   relevance-based (relevance=0.463049, probability=0.000199, bonus=1.000000, nodes=13 <= 138.914776)
                            @ 4  java.lang.Class.getClassLoader():ClassLoader (28 bytes)   inline method (bytecode parsing)
                                                    @ 1  java.util.regex.CharPredicates.lambda$ASCII_DIGIT$18(int):boolean (20 bytes)   relevance-based (relevance=0.463049, probability=0.000199, bonus=1.000000, nodes=16 <= 138.914776)
                                                  @ 26  java.util.regex.CharPredicates$$Lambda/0x800000034.is(int):boolean (5 bytes)   relevance-based (relevance=0.463049, probability=0.000358, bonus=1.000000, nodes=33 <= 138.914776)
                                                                                  @ 0  java.lang.System.allowSecurityManager():boolean (13 bytes)   trivial (relevance=1.000769, probability=0.009866, bonus=1.000000, nodes=8)
                                                @ 36  java.util.regex.Pattern$GroupTail.match(Matcher, int, CharSequence):boolean (111 bytes)   not inlining relevance-based (relevance=0.643395, probability=0.001171, bonus=1.000000, nodes=202 > 193.018452)
                                                                                @ 11  java.lang.System.getSecurityManager():SecurityManager (12 bytes)   relevance-based (relevance=1.000000, probability=0.009866, bonus=1.000000, nodes=14 <= 300.000000)
                            @ 5  java.lang.Class.getInterfaces():Class[] (6 bytes)   inline method (bytecode parsing)
                                                  @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=0.004781, bonus=1.000000, nodes=9)
                            @ 3  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                                                  @ 12  java.lang.StringLatin1.charAt(byte[], int):char (15 bytes)   relevance-based (relevance=1.000000, probability=0.004781, bonus=1.000000, nodes=11 <= 300.000000)
                                                @ 21  java.lang.String.charAt(int):char (25 bytes)   relevance-based (relevance=1.698232, probability=0.004781, bonus=1.000000, nodes=16 <= 300.000000)
                            @ 1  java.lang.ref.Reference.get():Object (5 bytes)   inline accessor method (bytecode parsing)
                                                                                      @ 15  java.lang.ref.SoftReference.get():Object (29 bytes)   relevance-based (relevance=1.000000, probability=0.015184, bonus=1.000000, nodes=20 <= 300.000000)
                            @ 5  java.lang.Class$ReflectionData.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                                                  @ 5  java.util.regex.Pattern.lambda$Single$14(int, int):boolean (11 bytes)   trivial (relevance=0.894390, probability=0.001398, bonus=1.000000, nodes=9)
                                                                                      @ 39  java.lang.Class.newReflectionData(SoftReference, int):Class$ReflectionData (66 bytes)   not inlining relevance-based (relevance=0.007162, probability=0.000107, bonus=1.000000, nodes=61 > 2.148563)
                                                                                    @ 1  java.lang.Class.reflectionData():Class$ReflectionData (43 bytes)   relevance-based (relevance=1.004912, probability=0.015290, bonus=1.000000, nodes=45 <= 300.000000)
                 n                                                                @ 24  java.lang.Class.getInterfaces0():Class[] (0 bytes)   not inlining it is a non-intrinsic native method
                                                                                  @ 2  java.lang.Class.getInterfaces(boolean):Class[] (49 bytes)   relevance-based (relevance=1.000000, probability=0.015290, bonus=1.000000, nodes=75 <= 300.000000)
                                                    @ 8  java.util.regex.ASCII.isDigit(int):boolean (18 bytes)   relevance-based (relevance=1.000000, probability=0.002654, bonus=1.000000, nodes=13 <= 300.000000)
                                                  @ 1  java.util.regex.CharPredicates.lambda$ASCII_DIGIT$18(int):boolean (20 bytes)   relevance-based (relevance=1.000000, probability=0.002654, bonus=1.000000, nodes=16 <= 300.000000)
                                                                                  @ 10  java.lang.Class.isAnnotation():boolean (17 bytes)   relevance-based (relevance=1.027724, probability=0.015290, bonus=1.000000, nodes=23 <= 300.000000)
                                                @ 26  java.util.regex.CharPredicates$$Lambda/0x800000034.is(int):boolean (5 bytes)   relevance-based (relevance=1.698232, probability=0.004781, bonus=1.000000, nodes=33 <= 300.000000)
                                                                                @ 30  sun.reflect.annotation.AnnotationInvocationHandler.<init>(Class, Map):void (71 bytes)   relevance-based (relevance=1.551003, probability=0.015290, bonus=1.000000, nodes=116 <= 300.000000)
                                              @ 28  java.util.regex.Pattern$BmpCharPropertyGreedy.match(Matcher, int, CharSequence):boolean (89 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.005631, bonus=1.000000, nodes=317 > 300.000000)
                                            @ 50  java.util.regex.Pattern$GroupHead.match(Matcher, int, CharSequence):boolean (47 bytes)   relevance-based (relevance=1.666708, probability=0.005631, bonus=1.000000, nodes=20 <= 300.000000)
                            @ 1  java.util.Objects.requireNonNull(Object):Object (14 bytes)   inline method (bytecode parsing)
                                                                                    @ 0  java.lang.System.allowSecurityManager():boolean (13 bytes)   trivial (relevance=1.000769, probability=0.015290, bonus=1.000000, nodes=8)
                                                                                  @ 5  java.lang.System.getSecurityManager():SecurityManager (12 bytes)   relevance-based (relevance=1.000000, probability=0.015290, bonus=1.000000, nodes=14 <= 300.000000)
                            @ 31  jdk.internal.loader.AbstractClassLoaderValue.sub(Object):AbstractClassLoaderValue$Sub (10 bytes)   inline method (bytecode parsing)
                              @ 6  jdk.internal.loader.AbstractClassLoaderValue$Sub.<init>(AbstractClassLoaderValue, Object):void (15 bytes)   inline method (bytecode parsing)
                                @ 6  jdk.internal.loader.AbstractClassLoaderValue.<init>():void (5 bytes)   inline method (bytecode parsing)
                            @ 35  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object):Object (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.lang.invoke.LambdaForm$MH/0x00007f45e0000800.invoke(Object):Object (8 bytes)   inline method (bytecode parsing)
                            @ 30  java.util.concurrent.ConcurrentHashMap.putIfAbsent(Object, Object):Object (8 bytes)   inline method (bytecode parsing)
                            @ 4  jdk.internal.loader.BootLoader.getClassLoaderValueMap():ConcurrentHashMap (4 bytes)   inline method (bytecode parsing)
                            @ 14  java.lang.System$2.createOrGetClassLoaderValueMap(ClassLoader):ConcurrentHashMap (5 bytes)   inline method (bytecode parsing)
                                                                                        @ 1  java.lang.ClassLoader.createOrGetClassLoaderValueMap():ConcurrentHashMap (37 bytes)   trivial (relevance=1.000000, probability=0.015186, bonus=1.000000, nodes=9)
                                                                                      @ 1  jdk.internal.loader.AbstractClassLoaderValue.map(ClassLoader):ConcurrentHashMap (20 bytes)   relevance-based (relevance=1.000000, probability=0.015290, bonus=1.000000, nodes=23 <= 300.000000)
                                                  @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=0.856238, probability=0.000563, bonus=1.000000, nodes=9)
                            @ 20  java.util.concurrent.ConcurrentHashMap.spread(int):int (10 bytes)   inline method (bytecode parsing)
                            @ 3  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                                                  @ 12  java.lang.StringLatin1.charAt(byte[], int):char (15 bytes)   relevance-based (relevance=0.856238, probability=0.000563, bonus=1.000000, nodes=11 <= 256.871437)
                                                @ 14  java.lang.String.charAt(int):char (25 bytes)   relevance-based (relevance=0.856238, probability=0.000563, bonus=1.000000, nodes=16 <= 256.871437)
                                                                                      @ 4  java.util.concurrent.ConcurrentHashMap.putVal(Object, Object, boolean):Object (432 bytes)   not inlining relevance-based (relevance=0.002196, probability=0.000034, bonus=1.000000, nodes=181 > 0.658858)
                            @ 9  java.util.regex.Pattern.lambda$Range$17(int, int, int):boolean (7 bytes)   inline method (bytecode parsing)
                            @ 4  java.util.concurrent.ConcurrentHashMap.spread(int):int (10 bytes)   inline method (bytecode parsing)
                                                      @ 3  java.util.regex.Pattern.inRange(int, int, int):boolean (16 bytes)   relevance-based (relevance=0.234026, probability=0.000050, bonus=1.000000, nodes=11 <= 70.207698)
                            @ 9  java.util.regex.Pattern.lambda$Range$17(int, int, int):boolean (7 bytes)   inline method (bytecode parsing)
                            @ 3  jdk.internal.loader.AbstractClassLoaderValue$Sub.parent():AbstractClassLoaderValue (5 bytes)   inline accessor method (bytecode parsing)
                                                          @ 3  java.util.regex.Pattern.inRange(int, int, int):boolean (16 bytes)   relevance-based (relevance=0.234026, probability=0.000025, bonus=1.000000, nodes=11 <= 70.207698)
                 n                                                                        @ 6  java.lang.Object.hashCode():int (0 bytes)   trivial (relevance=1.000000, probability=0.015290, bonus=1.000000, nodes=5)
                            @ 9  java.util.regex.Pattern.lambda$Range$17(int, int, int):boolean (7 bytes)   inline method (bytecode parsing)
                                                              @ 3  java.util.regex.Pattern.inRange(int, int, int):boolean (16 bytes)   relevance-based (relevance=0.234026, probability=0.000012, bonus=1.000000, nodes=11 <= 70.207698)
                            @ 4  java.lang.Long.hashCode(long):int (8 bytes)   inline method (bytecode parsing)
                            @ 9  java.util.regex.Pattern.lambda$Range$17(int, int, int):boolean (7 bytes)   inline method (bytecode parsing)
                            @ 17  java.lang.NullPointerException.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  java.lang.RuntimeException.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                                @ 2  java.lang.Exception.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                                                                                              @ 1  jdk.vm.ci.hotspot.HotSpotResolvedJavaMethodImpl.getMethodPointer():long (23 bytes)   not inlining relevance-based (relevance=0.031228, probability=0.000436, bonus=1.000000, nodes=21 > 9.368346)
                                                                  @ 3  java.util.regex.Pattern.inRange(int, int, int):boolean (16 bytes)   relevance-based (relevance=0.234026, probability=0.000006, bonus=1.000000, nodes=11 <= 70.207698)
                            @ 9  java.util.regex.Pattern.lambda$Range$17(int, int, int):boolean (7 bytes)   inline method (bytecode parsing)
                                                                                                  @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=0.124911, probability=0.000109, bonus=1.000000, nodes=5)
                                                                                                @ 9  java.lang.String.length():int (11 bytes)   trivial (relevance=0.124911, probability=0.000109, bonus=1.000000, nodes=8)
                                                                                              @ 14  java.net.URI.hashIgnoringCase(int, String):int (45 bytes)   not inlining relevance-based (relevance=0.124911, probability=0.000218, bonus=1.000000, nodes=40 > 37.473385)
                            @ 9  java.lang.String.indexOf(int):int (7 bytes)   inline method (bytecode parsing)
                                                                      @ 3  java.util.regex.Pattern.inRange(int, int, int):boolean (16 bytes)   relevance-based (relevance=0.234026, probability=0.000003, bonus=1.000000, nodes=11 <= 70.207698)
                                                                      @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   not inlining it exceeds the maximum recursive inlining depth
                                                                      @ 2  java.util.regex.Pattern$CharPredicate.is(int):boolean (0 bytes)   not inlining it is a polymorphic method call and at least one invoked method cannot be inlined
                                                                      @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.234026, probability=0.000003, bonus=1.000000, nodes=13 <= 70.207698)
                                                                                                  @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=0.249823, probability=0.000109, bonus=1.000000, nodes=9)
                                                                    @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   relevance-based (relevance=0.234026, probability=0.000006, bonus=1.000000, nodes=27 <= 70.207698)
                                                                                                    @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=0.249823, probability=0.000109, bonus=1.000000, nodes=5)
                                                                                                  @ 14  java.lang.String.length():int (11 bytes)   trivial (relevance=0.249823, probability=0.000109, bonus=1.000000, nodes=8)
                                                                  @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.234026, probability=0.000006, bonus=1.000000, nodes=39 <= 70.207698)
                            @ 11  java.lang.Math.max(int, int):int (11 bytes)   inline method (bytecode parsing)
                                                                @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   relevance-based (relevance=0.234026, probability=0.000012, bonus=1.000000, nodes=52 <= 70.207698)
                                                                                                    @ 1  java.lang.StringLatin1.canEncode(int):boolean (13 bytes)   trivial (relevance=0.249828, probability=0.000109, bonus=1.000000, nodes=5)
                                                              @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.234026, probability=0.000012, bonus=1.000000, nodes=61 <= 70.207698)
                                                                                                    @ 18  java.lang.Math.min(int, int):int (11 bytes)   trivial (relevance=0.249828, probability=0.000109, bonus=1.000000, nodes=7)
                                                                                                  @ 17  java.lang.StringLatin1.indexOf(byte[], int, int, int):int (37 bytes)   relevance-based (relevance=0.249823, probability=0.000109, bonus=1.000000, nodes=18 <= 74.946771)
                                                                                                @ 3  java.lang.String.indexOf(int, int):int (37 bytes)   relevance-based (relevance=0.249823, probability=0.000109, bonus=1.000000, nodes=29 <= 74.946771)
                                                            @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   not inlining relevance-based (relevance=0.234026, probability=0.000025, bonus=1.000000, nodes=74 > 70.207698)
                                                                                              @ 23  java.net.URI.hash(int, String):int (33 bytes)   not inlining relevance-based (relevance=0.124911, probability=0.000218, bonus=1.000000, nodes=58 > 37.473385)
                                                          @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.234026, probability=0.000025, bonus=1.000000, nodes=13 <= 70.207698)
                                                                                              @ 28  java.net.URI.isOpaque():boolean (13 bytes)   trivial (relevance=0.124911, probability=0.000218, bonus=1.000000, nodes=9)
                                                        @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   relevance-based (relevance=0.234026, probability=0.000050, bonus=1.000000, nodes=27 <= 70.207698)
                            @ 9  java.lang.String.indexOf(int):int (7 bytes)   inline method (bytecode parsing)
                                                      @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.234026, probability=0.000050, bonus=1.000000, nodes=39 <= 70.207698)
                                                                                              @ 39  java.net.URI.hash(int, String):int (33 bytes)   not inlining relevance-based (relevance=0.062456, probability=0.000109, bonus=1.000000, nodes=37 > 18.736693)
                            @ 9  java.lang.String.indexOf(int):int (7 bytes)   inline method (bytecode parsing)
                                                    @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   relevance-based (relevance=0.234026, probability=0.000100, bonus=1.000000, nodes=52 <= 70.207698)
                                                                                              @ 51  java.net.URI.hash(int, String):int (33 bytes)   not inlining relevance-based (relevance=0.062456, probability=0.000109, bonus=1.000000, nodes=37 > 18.736693)
                            @ 9  java.lang.String.indexOf(int):int (7 bytes)   inline method (bytecode parsing)
                                                  @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.234026, probability=0.000100, bonus=1.000000, nodes=61 <= 70.207698)
                                                                                              @ 60  java.net.URI.hash(int, String):int (33 bytes)   not inlining relevance-based (relevance=0.062456, probability=0.000109, bonus=1.000000, nodes=37 > 18.736693)
                            @ 9  java.lang.String.indexOf(int):int (7 bytes)   inline method (bytecode parsing)
                                                                                              @ 76  java.net.URI.hash(int, String):int (33 bytes)   not inlining relevance-based (relevance=0.031228, probability=0.000055, bonus=1.000000, nodes=37 > 9.368346)
                                                  @ 5  java.util.regex.Pattern.lambda$Single$14(int, int):boolean (11 bytes)   trivial (relevance=0.856238, probability=0.000364, bonus=1.000000, nodes=9)
                                                @ 19  java.util.regex.Pattern$$Lambda/0x800000038.is(int):boolean (9 bytes)   relevance-based (relevance=0.856238, probability=0.000563, bonus=1.000000, nodes=79 <= 256.871437)
                                                                                              @ 85  java.net.URI.hashIgnoringCase(int, String):int (45 bytes)   not inlining relevance-based (relevance=0.031228, probability=0.000055, bonus=1.000000, nodes=38 > 9.368346)
                            @ 9  java.lang.String.indexOf(int):int (7 bytes)   inline method (bytecode parsing)
                                                                                              @ 108  java.net.URI.hash(int, String):int (33 bytes)   not inlining relevance-based (relevance=0.031228, probability=0.000055, bonus=1.000000, nodes=37 > 9.368346)
                 n                                                                          @ 5  java.lang.Object.hashCode():int (0 bytes)   relevance-based (relevance=1.000000, probability=0.014849, bonus=1.000000, nodes=90 <= 300.000000)
                                              @ 28  java.util.regex.Pattern$BmpCharPropertyGreedy.match(Matcher, int, CharSequence):boolean (89 bytes)   not inlining relevance-based (relevance=0.500046, probability=0.001126, bonus=1.000000, nodes=205 > 150.013931)
                                                                                          @ 14  java.util.Objects.hashCode(Object):int (13 bytes)   relevance-based (relevance=1.000000, probability=0.015290, bonus=1.000000, nodes=105 <= 300.000000)
                                                                                        @ 1  jdk.internal.loader.AbstractClassLoaderValue$Sub.hashCode():int (19 bytes)   relevance-based (relevance=3.959160, probability=0.015290, bonus=1.000000, nodes=122 <= 300.000000)
                                                                                        @ 34  java.util.concurrent.ConcurrentHashMap.tabAt(ConcurrentHashMap$Node[], int):ConcurrentHashMap$Node (22 bytes)   relevance-based (relevance=1.090921, probability=0.015247, bonus=1.000000, nodes=11 <= 300.000000)
                                                    @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=0.001126, bonus=1.000000, nodes=9)
                            @ 22  jdk.internal.loader.AbstractClassLoaderValue$Sub.parent():AbstractClassLoaderValue (5 bytes)   inline accessor method (bytecode parsing)
                            @ 26  jdk.internal.loader.AbstractClassLoaderValue$Sub.parent():AbstractClassLoaderValue (5 bytes)   inline accessor method (bytecode parsing)
                            @ 3  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                                                                                          @ 29  java.lang.Object.equals(Object):boolean (11 bytes)   trivial (relevance=0.276385, probability=0.003863, bonus=1.000000, nodes=9)
                                                    @ 12  java.lang.StringLatin1.charAt(byte[], int):char (15 bytes)   relevance-based (relevance=1.000000, probability=0.001126, bonus=1.000000, nodes=11 <= 300.000000)
                                                  @ 14  java.lang.String.charAt(int):char (25 bytes)   relevance-based (relevance=1.712317, probability=0.001126, bonus=1.000000, nodes=16 <= 300.000000)
                                                                                          @ 11  java.lang.Object.equals(Object):boolean (11 bytes)   not inlining no methods remaining after filtering less frequent methods (8 methods previously)
                                                                                          @ 43  java.util.Objects.equals(Object, Object):boolean (23 bytes)   relevance-based (relevance=0.276385, probability=0.003863, bonus=1.000000, nodes=24 <= 82.915401)
                                                                                        @ 73  jdk.internal.loader.AbstractClassLoaderValue$Sub.equals(Object):boolean (55 bytes)   relevance-based (relevance=0.276385, probability=0.003863, bonus=1.000000, nodes=51 <= 82.915401)
                            @ 22  jdk.internal.loader.AbstractClassLoaderValue$Sub.parent():AbstractClassLoaderValue (5 bytes)   inline accessor method (bytecode parsing)
                            @ 26  jdk.internal.loader.AbstractClassLoaderValue$Sub.parent():AbstractClassLoaderValue (5 bytes)   inline accessor method (bytecode parsing)
                                                                                        @ 149  jdk.internal.loader.AbstractClassLoaderValue$Sub.equals(Object):boolean (55 bytes)   not inlining relevance-based (relevance=0.078653, probability=0.000649, bonus=1.000000, nodes=31 > 23.595888)
                                                                                      @ 19  java.util.concurrent.ConcurrentHashMap.get(Object):Object (162 bytes)   relevance-based (relevance=1.000000, probability=0.015290, bonus=1.000000, nodes=268 <= 300.000000)
                            @ 9  java.util.regex.Pattern.lambda$Range$17(int, int, int):boolean (7 bytes)   inline method (bytecode parsing)
                                                        @ 3  java.util.regex.Pattern.inRange(int, int, int):boolean (16 bytes)   relevance-based (relevance=0.468008, probability=0.000099, bonus=1.000000, nodes=11 <= 140.402356)
                            @ 9  java.util.regex.Pattern.lambda$Range$17(int, int, int):boolean (7 bytes)   inline method (bytecode parsing)
                                                                                    @ 40  jdk.internal.loader.AbstractClassLoaderValue.computeIfAbsent(ClassLoader, BiFunction):Object (113 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.015290, bonus=1.000000, nodes=334 > 300.000000)
                                                                                  @ 22  java.lang.reflect.Proxy.getProxyConstructor(Class, ClassLoader, Class[]):Constructor (92 bytes)   relevance-based (relevance=1.000769, probability=0.015290, bonus=1.000000, nodes=28 <= 300.000000)
                                                            @ 3  java.util.regex.Pattern.inRange(int, int, int):boolean (16 bytes)   relevance-based (relevance=0.468008, probability=0.000050, bonus=1.000000, nodes=11 <= 140.402356)
                            @ 21  java.lang.reflect.Constructor.newInstance(Object[]):Object (34 bytes)   inline method (bytecode parsing)
                            @ 9  java.util.regex.Pattern.lambda$Range$17(int, int, int):boolean (7 bytes)   inline method (bytecode parsing)
                            @ 35  java.lang.InternalError.<init>(String, Throwable):void (7 bytes)   inline method (bytecode parsing)
                              @ 3  java.lang.VirtualMachineError.<init>(String, Throwable):void (7 bytes)   inline method (bytecode parsing)
                                @ 3  java.lang.Error.<init>(String, Throwable):void (7 bytes)   inline method (bytecode parsing)
                                                                @ 3  java.util.regex.Pattern.inRange(int, int, int):boolean (16 bytes)   relevance-based (relevance=0.468008, probability=0.000025, bonus=1.000000, nodes=11 <= 140.402356)
                            @ 9  java.util.regex.Pattern.lambda$Range$17(int, int, int):boolean (7 bytes)   inline method (bytecode parsing)
                                                                    @ 3  java.util.regex.Pattern.inRange(int, int, int):boolean (16 bytes)   relevance-based (relevance=0.468008, probability=0.000012, bonus=1.000000, nodes=11 <= 140.402356)
                                                                                      @ 18  java.lang.reflect.AccessibleObject.checkAccess(Class, Class, Class, int):void (40 bytes)   not inlining relevance-based (relevance=0.066640, probability=0.000955, bonus=1.000000, nodes=38 > 19.991971)
                            @ 14  java.lang.reflect.Constructor.getConstructorAccessor():ConstructorAccessor (5 bytes)   inline accessor method (bytecode parsing)
                            @ 50  java.lang.IllegalArgumentException.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  java.lang.RuntimeException.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                                @ 2  java.lang.Exception.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                            @ 62  jdk.internal.misc.VM.isJavaLangInvokeInited():boolean (4 bytes)   inline method (bytecode parsing)
                            @ 9  java.util.regex.Pattern.lambda$Range$17(int, int, int):boolean (7 bytes)   inline method (bytecode parsing)
                                                                                      @ 33  java.lang.reflect.Constructor.acquireConstructorAccessor():ConstructorAccessor (75 bytes)   not inlining relevance-based (relevance=0.046166, probability=0.000662, bonus=1.000000, nodes=69 > 13.849859)
                            @ 60  jdk.internal.reflect.DirectConstructorHandleAccessor.invokeImpl(Object[]):Object (103 bytes)   inline method (bytecode parsing)
                                                                        @ 3  java.util.regex.Pattern.inRange(int, int, int):boolean (16 bytes)   relevance-based (relevance=0.468008, probability=0.000006, bonus=1.000000, nodes=11 <= 140.402356)
                              @ 88  java.lang.invoke.LambdaForm$MH/0x00007f45e0003c00.invokeExact_MT(Object, Object, Object, Object, Object):Object (26 bytes)   inline method (bytecode parsing)
                                @ 11  java.lang.invoke.Invokers.checkExactType(MethodHandle, MethodType):void (17 bytes)   inline method (bytecode parsing)
                                  @ 1  java.lang.invoke.MethodHandle.type():MethodType (5 bytes)   inline accessor method (bytecode parsing)
                                @ 15  java.lang.invoke.Invokers.checkCustomized(MethodHandle):void (23 bytes)   inline method (bytecode parsing)
                                                                        @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   not inlining it exceeds the maximum recursive inlining depth
                              @ 69  java.lang.invoke.Invokers$Holder.invokeExact_MT(Object, Object, Object, Object):Object (24 bytes)   inline method (bytecode parsing)
                                                                        @ 2  java.util.regex.Pattern$CharPredicate.is(int):boolean (0 bytes)   not inlining it is a polymorphic method call and at least one invoked method cannot be inlined
                                @ 10  java.lang.invoke.Invokers.checkExactType(MethodHandle, MethodType):void (17 bytes)   inline method (bytecode parsing)
                                                                        @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.468008, probability=0.000006, bonus=1.000000, nodes=13 <= 140.402356)
                                  @ 1  java.lang.invoke.MethodHandle.type():MethodType (5 bytes)   inline accessor method (bytecode parsing)
                                @ 14  java.lang.invoke.Invokers.checkCustomized(MethodHandle):void (23 bytes)   inline method (bytecode parsing)
                                                                      @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   relevance-based (relevance=0.468008, probability=0.000012, bonus=1.000000, nodes=27 <= 140.402356)
                              @ 53  java.lang.invoke.Invokers$Holder.invokeExact_MT(Object, Object, Object):Object (23 bytes)   inline method (bytecode parsing)
                                @ 10  java.lang.invoke.Invokers.checkExactType(MethodHandle, MethodType):void (17 bytes)   inline method (bytecode parsing)
                                  @ 1  java.lang.invoke.MethodHandle.type():MethodType (5 bytes)   inline accessor method (bytecode parsing)
                                @ 14  java.lang.invoke.Invokers.checkCustomized(MethodHandle):void (23 bytes)   inline method (bytecode parsing)
                              @ 40  java.lang.invoke.Invokers$Holder.invokeExact_MT(Object, Object):Object (22 bytes)   inline method (bytecode parsing)
                                                                    @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.468008, probability=0.000012, bonus=1.000000, nodes=39 <= 140.402356)
                                @ 10  java.lang.invoke.Invokers.checkExactType(MethodHandle, MethodType):void (17 bytes)   inline method (bytecode parsing)
                                  @ 1  java.lang.invoke.MethodHandle.type():MethodType (5 bytes)   inline accessor method (bytecode parsing)
                                @ 14  java.lang.invoke.Invokers.checkCustomized(MethodHandle):void (23 bytes)   inline method (bytecode parsing)
                                                                  @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   relevance-based (relevance=0.468008, probability=0.000025, bonus=1.000000, nodes=52 <= 140.402356)
                                                                @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.468008, probability=0.000025, bonus=1.000000, nodes=61 <= 140.402356)
                                                                                      @ 19  java.lang.invoke.Invokers.maybeCustomize(MethodHandle):void (5 bytes)   not inlining it is marked non-inlinable
                                                                                      @ 19  java.lang.invoke.Invokers.maybeCustomize(MethodHandle):void (5 bytes)   not inlining it is marked non-inlinable
                                                                                      @ 19  java.lang.invoke.Invokers.maybeCustomize(MethodHandle):void (5 bytes)   not inlining it is marked non-inlinable
                                                                                      @ 19  java.lang.invoke.Invokers.maybeCustomize(MethodHandle):void (5 bytes)   not inlining it is marked non-inlinable
                                                                                      @ 41  jdk.internal.reflect.DirectConstructorHandleAccessor.newInstance(Object[]):Object (130 bytes)   relevance-based (relevance=1.066640, probability=0.015290, bonus=1.000000, nodes=140 <= 300.000000)
                                                              @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   relevance-based (relevance=0.468008, probability=0.000050, bonus=1.000000, nodes=74 <= 140.402356)
                                                                                    @ 30  java.lang.reflect.Constructor.newInstanceWithCaller(Object[], boolean, Class):Object (51 bytes)   relevance-based (relevance=1.053880, probability=0.015290, bonus=1.000000, nodes=177 <= 300.000000)
                                                            @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.468008, probability=0.000050, bonus=1.000000, nodes=83 <= 140.402356)
                                                                                  @ 31  java.lang.reflect.Proxy.newProxyInstance(Class, Constructor, InvocationHandler):Object (75 bytes)   relevance-based (relevance=1.000769, probability=0.015290, bonus=1.000000, nodes=193 <= 300.000000)
                                                          @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   relevance-based (relevance=0.468008, probability=0.000099, bonus=1.000000, nodes=96 <= 140.402356)
                                                        @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.468008, probability=0.000099, bonus=1.000000, nodes=105 <= 140.402356)
                                                                                @ 33  java.lang.reflect.Proxy.newProxyInstance(ClassLoader, Class[], InvocationHandler):Object (35 bytes)   relevance-based (relevance=1.551003, probability=0.015290, bonus=1.000000, nodes=232 <= 300.000000)
                                                      @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   relevance-based (relevance=0.468008, probability=0.000199, bonus=1.000000, nodes=118 <= 140.402356)
                                                                              @ 1  sun.reflect.annotation.AnnotationParser$1.run():Annotation (40 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.015290, bonus=1.000000, nodes=380 > 300.000000)
                                                                            @ 271  sun.reflect.annotation.AnnotationParser.annotationForMap(Class, Map):Annotation (16 bytes)   relevance-based (relevance=1.000170, probability=0.015290, bonus=1.000000, nodes=26 <= 300.000000)
                                                    @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.468008, probability=0.000199, bonus=1.000000, nodes=127 <= 140.402356)
                            @ 4  java.nio.Buffer.session():MemorySessionImpl (20 bytes)   inline method (bytecode parsing)
                            @ 18  java.nio.HeapByteBuffer.byteOffset(long):long (7 bytes)   inline method (bytecode parsing)
                            @ 25  jdk.internal.misc.ScopedMemoryAccess.getShortUnaligned(MemorySessionImpl, Object, long, boolean):short (18 bytes)   inline method (bytecode parsing)
                              @ 6  jdk.internal.misc.ScopedMemoryAccess.getShortUnalignedInternal(MemorySessionImpl, Object, long, boolean):short (36 bytes)   inline method (bytecode parsing)
                                @ 15  jdk.internal.misc.Unsafe.getShortUnaligned(Object, long, boolean):short (12 bytes)   inline method (bytecode parsing)
                                                    @ 5  java.util.regex.Pattern.lambda$Single$14(int, int):boolean (11 bytes)   trivial (relevance=1.000000, probability=0.000728, bonus=1.000000, nodes=9)
                                                                              @ 14  java.nio.Buffer.nextGetIndex(int):int (32 bytes)   relevance-based (relevance=0.189112, probability=0.002892, bonus=1.000000, nodes=13 <= 56.733524)
                                                  @ 19  java.util.regex.Pattern$$Lambda/0x800000038.is(int):boolean (9 bytes)   relevance-based (relevance=1.712317, probability=0.001126, bonus=1.000000, nodes=145 <= 300.000000)
                                                                              @ 8  jdk.internal.misc.Unsafe.convEndian(boolean, short):short (16 bytes)   relevance-based (relevance=0.189112, probability=0.002892, bonus=1.000000, nodes=20 <= 56.733524)
                                                                            @ 161  java.nio.HeapByteBuffer.getShort():short (29 bytes)   relevance-based (relevance=0.189112, probability=0.002892, bonus=1.000000, nodes=44 <= 56.733524)
                 n                                                        @ 6  jdk.internal.reflect.ConstantPool.getUTF8At0(Object, int):String (0 bytes)   not inlining it is a non-intrinsic native method
                                                @ 36  java.util.regex.Pattern$Branch.match(Matcher, int, CharSequence):boolean (66 bytes)   not inlining it exceeds the maximum recursive inlining depth
                                                @ 36  java.util.regex.Pattern$Node.match(Matcher, int, CharSequence):boolean (27 bytes)   not inlining it is a polymorphic method call and at least one invoked method cannot be inlined
                                                    @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=0.001912, bonus=1.000000, nodes=9)
                            @ 3  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                                                                              @ 2  java.util.HashMap.getNode(Object):HashMap$Node (150 bytes)   not inlining relevance-based (relevance=0.214294, probability=0.002892, bonus=1.000000, nodes=108 > 64.288217)
                                                                            @ 181  java.util.HashMap.get(Object):Object (19 bytes)   relevance-based (relevance=0.189112, probability=0.002892, bonus=1.000000, nodes=19 <= 56.733524)
                                                    @ 12  java.lang.StringLatin1.charAt(byte[], int):char (15 bytes)   relevance-based (relevance=1.000000, probability=0.001912, bonus=1.000000, nodes=11 <= 300.000000)
                            @ 75  sun.reflect.annotation.AnnotationParser.parseAnnotation(ByteBuffer, ConstantPool, Class, boolean):Annotation (9 bytes)   inline method (bytecode parsing)
                                                  @ 21  java.lang.String.charAt(int):char (25 bytes)   relevance-based (relevance=1.698232, probability=0.001912, bonus=1.000000, nodes=16 <= 300.000000)
                            @ 117  java.lang.Class.getInterfaces():Class[] (6 bytes)   inline method (bytecode parsing)
                            @ 190  java.lang.StringBuilder.<init>():void (7 bytes)   inline method (bytecode parsing)
                            @ 201  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 206  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 211  java.lang.StringBuilder.append(Object):StringBuilder (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 216  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 219  java.lang.StringBuilder.toString():String (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.String.<init>(StringBuilder):void (7 bytes)   inline method (bytecode parsing)
                                                                            @ 208  sun.reflect.annotation.AnnotationParser.parseMemberValue(Class, ByteBuffer, ConstantPool, Class):Object (230 bytes)   not inlining relevance-based (relevance=0.189112, probability=0.002892, bonus=1.000000, nodes=142 > 56.733524)
                                                    @ 5  java.util.regex.Pattern.lambda$Single$14(int, int):boolean (11 bytes)   trivial (relevance=0.894390, probability=0.000559, bonus=1.000000, nodes=9)
                                                      @ 8  java.util.regex.ASCII.isDigit(int):boolean (18 bytes)   relevance-based (relevance=1.000000, probability=0.001061, bonus=1.000000, nodes=13 <= 300.000000)
                                                    @ 1  java.util.regex.CharPredicates.lambda$ASCII_DIGIT$18(int):boolean (20 bytes)   relevance-based (relevance=1.000000, probability=0.001061, bonus=1.000000, nodes=16 <= 300.000000)
                                                                                  @ 17  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=0.002894, probability=0.000044, bonus=1.000000, nodes=9)
                                                  @ 26  java.util.regex.CharPredicates$$Lambda/0x800000034.is(int):boolean (5 bytes)   relevance-based (relevance=1.698232, probability=0.001912, bonus=1.000000, nodes=33 <= 300.000000)
                                                                                  @ 27  java.lang.StringLatin1.hashCode(byte[]):int (52 bytes)   not inlining relevance-based (relevance=0.002892, probability=0.000044, bonus=1.000000, nodes=22 > 0.867706)
                                                @ 28  java.util.regex.Pattern$BmpCharPropertyGreedy.match(Matcher, int, CharSequence):boolean (89 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.002252, bonus=1.000000, nodes=317 > 300.000000)
                                              @ 50  java.util.regex.Pattern$GroupHead.match(Matcher, int, CharSequence):boolean (47 bytes)   relevance-based (relevance=1.666708, probability=0.002252, bonus=1.000000, nodes=20 <= 300.000000)
                                                                                  @ 37  java.lang.StringUTF16.hashCode(byte[]):int (52 bytes)   not inlining relevance-based (relevance=0.000001, probability=0.000000, bonus=1.000000, nodes=23 > 0.000438)
                                                                                @ 9  java.lang.String.hashCode():int (60 bytes)   relevance-based (relevance=0.189112, probability=0.002892, bonus=1.000000, nodes=48 <= 56.733524)
                                                                              @ 2  java.util.HashMap.hash(Object):int (20 bytes)   relevance-based (relevance=0.189112, probability=0.002892, bonus=1.000000, nodes=56 <= 56.733524)
                                            @ 32  java.util.regex.Pattern$Branch.match(Matcher, int, CharSequence):boolean (66 bytes)   not inlining it exceeds the maximum recursive inlining depth
                                            @ 32  java.util.regex.Pattern$Node.match(Matcher, int, CharSequence):boolean (27 bytes)   not inlining it is a polymorphic method call and at least one invoked method cannot be inlined
                                                                            @ 255  java.util.HashMap.put(Object, Object):Object (13 bytes)   not inlining relevance-based (relevance=0.189112, probability=0.002892, bonus=1.000000, nodes=62 > 56.733524)
                                                                          @ 41  sun.reflect.annotation.AnnotationParser.parseAnnotation2(ByteBuffer, ConstantPool, Class, boolean, Class[]):Annotation (275 bytes)   relevance-based (relevance=4.000000, probability=0.015290, bonus=1.000000, nodes=256 <= 300.000000)
                                            @ 32  java.util.regex.Pattern$Branch.match(Matcher, int, CharSequence):boolean (66 bytes)   relevance-based (relevance=1.000000, probability=0.003378, bonus=1.000000, nodes=86 <= 300.000000)
                                          @ 32  java.util.regex.Pattern$Branch.match(Matcher, int, CharSequence):boolean (66 bytes)   relevance-based (relevance=1.000000, probability=0.008446, bonus=1.000000, nodes=171 <= 300.000000)
                                                                        @ 12  sun.reflect.annotation.AnnotationParser.parseAnnotations2(byte[], ConstantPool, Class, Class[]):Map (135 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.015290, bonus=1.000000, nodes=405 > 300.000000)
                                                                      @ 9  sun.reflect.annotation.AnnotationParser.parseAnnotations(byte[], ConstantPool, Class):Map (37 bytes)   relevance-based (relevance=3.160494, probability=0.023132, bonus=1.000000, nodes=16 <= 300.000000)
                                        @ 32  java.util.regex.Pattern$Branch.match(Matcher, int, CharSequence):boolean (66 bytes)   relevance-based (relevance=1.000000, probability=0.021117, bonus=1.000000, nodes=255 <= 300.000000)
                            @ 87  sun.reflect.annotation.AnnotationType.isInherited():boolean (5 bytes)   inline accessor method (bytecode parsing)
                            @ 120  java.lang.Math.min(int, int):int (11 bytes)   inline method (bytecode parsing)
                 n                                                      @ 1  java.lang.Class.getRawAnnotations():byte[] (0 bytes)   not inlining it is a non-intrinsic native method
                 n                                                      @ 5  java.lang.Class.getConstantPool():ConstantPool (0 bytes)   not inlining it is a non-intrinsic native method
                            @ 4  java.util.Collections.emptyMap():Map (4 bytes)   inline method (bytecode parsing)
                            @ 10  java.nio.ByteBuffer.wrap(byte[]):ByteBuffer (8 bytes)   inline method (bytecode parsing)
                                      @ 32  java.util.regex.Pattern$Branch.match(Matcher, int, CharSequence):boolean (66 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.052796, bonus=1.000000, nodes=339 > 300.000000)
                            @ 65  sun.reflect.annotation.AnnotationType.retention():RetentionPolicy (5 bytes)   inline accessor method (bytecode parsing)
                                    @ 32  java.util.regex.Pattern$Branch.match(Matcher, int, CharSequence):boolean (66 bytes)   relevance-based (relevance=1.000000, probability=0.131996, bonus=1.000000, nodes=86 <= 300.000000)
                            @ 1  java.util.AbstractMap.<init>():void (5 bytes)   inline method (bytecode parsing)
                                                                                @ 1  java.util.HashMap.<init>():void (11 bytes)   trivial (relevance=1.000000, probability=0.009174, bonus=1.000000, nodes=8)
                                                                              @ 4  java.util.LinkedHashMap.<init>():void (15 bytes)   relevance-based (relevance=1.000000, probability=0.009174, bonus=1.000000, nodes=15 <= 300.000000)
                                  @ 7  java.util.regex.Pattern$Branch.match(Matcher, int, CharSequence):boolean (66 bytes)   relevance-based (relevance=1.000000, probability=0.219999, bonus=1.000000, nodes=151 <= 300.000000)
                            @ 17  java.nio.ByteOrder.nativeOrder():ByteOrder (4 bytes)   inline method (bytecode parsing)
                                @ 70  java.util.regex.Pattern$BranchConn.match(Matcher, int, CharSequence):boolean (11 bytes)   relevance-based (relevance=1.000000, probability=0.329999, bonus=1.000000, nodes=191 <= 300.000000)
                                                                                          @ 2  java.nio.Buffer.limit(int):Buffer (65 bytes)   relevance-based (relevance=1.000000, probability=0.009174, bonus=1.000000, nodes=24 <= 300.000000)
                                                                                        @ 2  java.nio.ByteBuffer.limit(int):ByteBuffer (8 bytes)   relevance-based (relevance=1.000000, probability=0.009174, bonus=1.000000, nodes=25 <= 300.000000)
                                                                                      @ 39  java.nio.ByteBuffer.limit(int):Buffer (6 bytes)   relevance-based (relevance=1.000000, probability=0.009174, bonus=1.000000, nodes=26 <= 300.000000)
                              @ 70  java.util.regex.Pattern$GroupTail.match(Matcher, int, CharSequence):boolean (111 bytes)   not inlining relevance-based (relevance=1.720750, probability=0.674570, bonus=1.000000, nodes=432 > 300.000000)
                                                                                          @ 2  java.nio.Buffer.position(int):Buffer (52 bytes)   relevance-based (relevance=1.000000, probability=0.009174, bonus=1.000000, nodes=14 <= 300.000000)
                                                                                        @ 2  java.nio.ByteBuffer.position(int):ByteBuffer (8 bytes)   relevance-based (relevance=1.000000, probability=0.009174, bonus=1.000000, nodes=15 <= 300.000000)
                                                                                      @ 45  java.nio.ByteBuffer.position(int):Buffer (6 bytes)   relevance-based (relevance=1.022803, probability=0.009174, bonus=1.000000, nodes=16 <= 300.000000)
                                                                                    @ 8  java.nio.Buffer.<init>(int, int, int, int, MemorySegment):void (105 bytes)   relevance-based (relevance=1.000000, probability=0.009174, bonus=1.000000, nodes=52 <= 300.000000)
                                                                                  @ 12  java.nio.ByteBuffer.<init>(int, int, int, int, byte[], int, MemorySegment):void (47 bytes)   relevance-based (relevance=1.000000, probability=0.009174, bonus=1.000000, nodes=63 <= 300.000000)
                                                                                @ 8  java.nio.HeapByteBuffer.<init>(byte[], int, int, MemorySegment):void (23 bytes)   relevance-based (relevance=1.000000, probability=0.009174, bonus=1.000000, nodes=67 <= 300.000000)
                                                                              @ 4  java.nio.ByteBuffer.wrap(byte[], int, int):ByteBuffer (21 bytes)   relevance-based (relevance=1.000000, probability=0.009174, bonus=1.000000, nodes=68 <= 300.000000)
                            @ 4  java.nio.Buffer.session():MemorySessionImpl (20 bytes)   inline method (bytecode parsing)
                            @ 18  java.nio.HeapByteBuffer.byteOffset(long):long (7 bytes)   inline method (bytecode parsing)
                            @ 25  jdk.internal.misc.ScopedMemoryAccess.getShortUnaligned(MemorySessionImpl, Object, long, boolean):short (18 bytes)   inline method (bytecode parsing)
                              @ 6  jdk.internal.misc.ScopedMemoryAccess.getShortUnalignedInternal(MemorySessionImpl, Object, long, boolean):short (36 bytes)   inline method (bytecode parsing)
                                @ 15  jdk.internal.misc.Unsafe.getShortUnaligned(Object, long, boolean):short (12 bytes)   inline method (bytecode parsing)
                                                                                @ 14  java.nio.Buffer.nextGetIndex(int):int (32 bytes)   relevance-based (relevance=1.000000, probability=0.009174, bonus=1.000000, nodes=13 <= 300.000000)
                                                                                @ 8  jdk.internal.misc.Unsafe.convEndian(boolean, short):short (16 bytes)   relevance-based (relevance=1.000000, probability=0.009174, bonus=1.000000, nodes=20 <= 300.000000)
                                                                              @ 17  java.nio.HeapByteBuffer.getShort():short (29 bytes)   relevance-based (relevance=1.022803, probability=0.009174, bonus=1.000000, nodes=44 <= 300.000000)
                            @ 19  jdk.internal.reflect.ConstantPool.getUTF8At(int):String (10 bytes)   inline method (bytecode parsing)
                            @ 122  sun.reflect.annotation.AnnotationType.memberTypes():Map (5 bytes)   inline accessor method (bytecode parsing)
                            @ 133  sun.reflect.annotation.AnnotationType.memberDefaults():Map (5 bytes)   inline accessor method (bytecode parsing)
                            @ 172  jdk.internal.reflect.ConstantPool.getUTF8At(int):String (10 bytes)   inline method (bytecode parsing)
                            @ 4  java.nio.Buffer.session():MemorySessionImpl (20 bytes)   inline method (bytecode parsing)
                            @ 18  java.nio.HeapByteBuffer.byteOffset(long):long (7 bytes)   inline method (bytecode parsing)
                            @ 25  jdk.internal.misc.ScopedMemoryAccess.getShortUnaligned(MemorySessionImpl, Object, long, boolean):short (18 bytes)   inline method (bytecode parsing)
                              @ 6  jdk.internal.misc.ScopedMemoryAccess.getShortUnalignedInternal(MemorySessionImpl, Object, long, boolean):short (36 bytes)   inline method (bytecode parsing)
                                @ 15  jdk.internal.misc.Unsafe.getShortUnaligned(Object, long, boolean):short (12 bytes)   inline method (bytecode parsing)
                                                                                  @ 14  java.nio.Buffer.nextGetIndex(int):int (32 bytes)   relevance-based (relevance=1.000000, probability=0.009174, bonus=1.000000, nodes=13 <= 300.000000)
                                                                                  @ 8  jdk.internal.misc.Unsafe.convEndian(boolean, short):short (16 bytes)   relevance-based (relevance=1.000000, probability=0.009174, bonus=1.000000, nodes=20 <= 300.000000)
                                                                                @ 1  java.nio.HeapByteBuffer.getShort():short (29 bytes)   relevance-based (relevance=1.000000, probability=0.009174, bonus=1.000000, nodes=44 <= 300.000000)
                 n                                                            @ 6  jdk.internal.reflect.ConstantPool.getUTF8At0(Object, int):String (0 bytes)   not inlining it is a non-intrinsic native method
                            @ 14  sun.reflect.generics.parser.SignatureParser.make():SignatureParser (8 bytes)   inline method (bytecode parsing)
                              @ 4  sun.reflect.generics.parser.SignatureParser.<init>():void (5 bytes)   inline method (bytecode parsing)
                            @ 20  sun.reflect.generics.parser.SignatureParser.parseTypeSig(String):TypeSignature (10 bytes)   inline method (bytecode parsing)
                            @ 26  sun.reflect.generics.scope.ClassScope.make(Class):ClassScope (9 bytes)   inline method (bytecode parsing)
                              @ 5  sun.reflect.generics.scope.ClassScope.<init>(Class):void (6 bytes)   inline method (bytecode parsing)
                                @ 2  sun.reflect.generics.scope.AbstractScope.<init>(GenericDeclaration):void (10 bytes)   inline method (bytecode parsing)
                            @ 29  sun.reflect.generics.factory.CoreReflectionFactory.make(GenericDeclaration, Scope):CoreReflectionFactory (10 bytes)   inline method (bytecode parsing)
                            @ 36  sun.reflect.generics.visitor.Reifier.make(GenericsFactory):Reifier (9 bytes)   inline method (bytecode parsing)
                              @ 5  sun.reflect.generics.visitor.Reifier.<init>(GenericsFactory):void (10 bytes)   inline method (bytecode parsing)
                                                                                  @ 2  sun.reflect.generics.parser.SignatureParser.init(String):void (16 bytes)   relevance-based (relevance=1.030610, probability=0.009174, bonus=1.000000, nodes=12 <= 300.000000)
                            @ 126  sun.reflect.generics.parser.SignatureParser.parseFieldTypeSignature():FieldTypeSignature (6 bytes)   inline method (bytecode parsing)
                                                                                        @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.009174, bonus=1.000000, nodes=5)
                                                                                      @ 36  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000000, probability=0.009174, bonus=1.000000, nodes=8)
                                                                                        @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=0.009174, bonus=1.000000, nodes=9)
                            @ 3  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                                                                                        @ 12  java.lang.StringLatin1.charAt(byte[], int):char (15 bytes)   relevance-based (relevance=1.000000, probability=0.009174, bonus=1.000000, nodes=11 <= 300.000000)
                                                                                      @ 50  java.lang.String.charAt(int):char (25 bytes)   relevance-based (relevance=1.000000, probability=0.009174, bonus=1.000000, nodes=16 <= 300.000000)
                                                                                    @ 1  sun.reflect.generics.parser.SignatureParser.current():char (59 bytes)   relevance-based (relevance=1.000000, probability=0.009174, bonus=1.000000, nodes=31 <= 300.000000)
                                                                                          @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.009174, bonus=1.000000, nodes=5)
                                                                                        @ 36  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000000, probability=0.009174, bonus=1.000000, nodes=8)
                                                                                          @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=0.009174, bonus=1.000000, nodes=9)
                            @ 3  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                                                                                          @ 12  java.lang.StringLatin1.charAt(byte[], int):char (15 bytes)   relevance-based (relevance=1.000000, probability=0.009174, bonus=1.000000, nodes=11 <= 300.000000)
                                                                                        @ 50  java.lang.String.charAt(int):char (25 bytes)   relevance-based (relevance=1.000000, probability=0.009174, bonus=1.000000, nodes=16 <= 300.000000)
                                                                                      @ 1  sun.reflect.generics.parser.SignatureParser.current():char (59 bytes)   relevance-based (relevance=1.000000, probability=0.009174, bonus=1.000000, nodes=31 <= 300.000000)
                            @ 114  sun.reflect.generics.tree.ClassTypeSignature.make(List):ClassTypeSignature (9 bytes)   inline method (bytecode parsing)
                              @ 5  sun.reflect.generics.tree.ClassTypeSignature.<init>(List):void (10 bytes)   inline method (bytecode parsing)
                                                                                            @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.009174, bonus=1.000000, nodes=5)
                                                                                          @ 36  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000000, probability=0.009174, bonus=1.000000, nodes=8)
                                                                                            @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=0.009174, bonus=1.000000, nodes=9)
                            @ 3  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                                                                                            @ 12  java.lang.StringLatin1.charAt(byte[], int):char (15 bytes)   relevance-based (relevance=1.000000, probability=0.009174, bonus=1.000000, nodes=11 <= 300.000000)
                                                                                          @ 50  java.lang.String.charAt(int):char (25 bytes)   relevance-based (relevance=1.000000, probability=0.009174, bonus=1.000000, nodes=16 <= 300.000000)
                                                                                        @ 24  sun.reflect.generics.parser.SignatureParser.current():char (59 bytes)   relevance-based (relevance=1.000000, probability=0.009174, bonus=1.000000, nodes=31 <= 300.000000)
                                                                                            @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.009174, bonus=1.000000, nodes=5)
                                                                                          @ 36  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000000, probability=0.009174, bonus=1.000000, nodes=8)
                                                                                        @ 40  sun.reflect.generics.parser.SignatureParser.advance():void (53 bytes)   relevance-based (relevance=1.000000, probability=0.009174, bonus=1.000000, nodes=20 <= 300.000000)
                            @ 1  java.util.AbstractList.<init>():void (10 bytes)   inline method (bytecode parsing)
                              @ 1  java.util.AbstractCollection.<init>():void (5 bytes)   inline method (bytecode parsing)
                                                                                        @ 48  java.util.ArrayList.<init>(int):void (61 bytes)   relevance-based (relevance=1.000000, probability=0.009174, bonus=1.000000, nodes=12 <= 300.000000)
                            @ 1  sun.reflect.generics.parser.SignatureParser.mark():void (9 bytes)   inline method (bytecode parsing)
                            @ 78  sun.reflect.generics.tree.SimpleClassTypeSignature.make(String, boolean, TypeArgument[]):SimpleClassTypeSignature (11 bytes)   inline method (bytecode parsing)
                              @ 7  sun.reflect.generics.tree.SimpleClassTypeSignature.<init>(String, boolean, TypeArgument[]):void (20 bytes)   inline method (bytecode parsing)
                            @ 48  java.lang.Character.isWhitespace(char):boolean (5 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.Character.isWhitespace(int):boolean (9 bytes)   inline method (bytecode parsing)
                                                                                                @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.009174, bonus=1.000000, nodes=5)
                                                                                              @ 36  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000000, probability=0.009174, bonus=1.000000, nodes=8)
                                                                                                @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=0.009174, bonus=1.000000, nodes=9)
                            @ 3  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                                                                                                @ 12  java.lang.StringLatin1.charAt(byte[], int):char (15 bytes)   relevance-based (relevance=1.000000, probability=0.009174, bonus=1.000000, nodes=11 <= 300.000000)
                                                                                              @ 50  java.lang.String.charAt(int):char (25 bytes)   relevance-based (relevance=1.000000, probability=0.009174, bonus=1.000000, nodes=16 <= 300.000000)
                                                                                            @ 1  sun.reflect.generics.parser.SignatureParser.current():char (59 bytes)   relevance-based (relevance=1.000000, probability=0.009174, bonus=1.000000, nodes=31 <= 300.000000)
                                                                                            @ 1  java.lang.CharacterData.of(int):CharacterData (136 bytes)   trivial (relevance=1.000000, probability=0.075582, bonus=1.000000, nodes=8)
                                                                                              @ 2  java.lang.CharacterDataLatin1.getProperties(int):int (11 bytes)   trivial (relevance=1.000000, probability=0.075582, bonus=1.000000, nodes=8)
                                                                                            @ 5  java.lang.CharacterDataLatin1.isWhitespace(int):boolean (23 bytes)   relevance-based (relevance=1.000000, probability=0.075582, bonus=1.000000, nodes=13 <= 300.000000)
                                                                                                @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.075582, bonus=1.000000, nodes=5)
                                                                                              @ 36  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000000, probability=0.075582, bonus=1.000000, nodes=8)
                                                                                            @ 55  sun.reflect.generics.parser.SignatureParser.advance():void (53 bytes)   relevance-based (relevance=1.000000, probability=0.075582, bonus=1.000000, nodes=20 <= 300.000000)
                                                                                                @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.075582, bonus=1.000000, nodes=5)
                                                                                              @ 36  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000000, probability=0.075582, bonus=1.000000, nodes=8)
                                                                                                @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=0.075582, bonus=1.000000, nodes=9)
                            @ 3  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                                                                                                @ 12  java.lang.StringLatin1.charAt(byte[], int):char (15 bytes)   relevance-based (relevance=1.000000, probability=0.075582, bonus=1.000000, nodes=11 <= 300.000000)
                                                                                              @ 50  java.lang.String.charAt(int):char (25 bytes)   relevance-based (relevance=1.000000, probability=0.075582, bonus=1.000000, nodes=16 <= 300.000000)
                                                                                            @ 59  sun.reflect.generics.parser.SignatureParser.current():char (59 bytes)   relevance-based (relevance=1.000000, probability=0.075582, bonus=1.000000, nodes=31 <= 300.000000)
                                                                                          @ 5  sun.reflect.generics.parser.SignatureParser.skipIdentifier():void (67 bytes)   relevance-based (relevance=1.000000, probability=0.009174, bonus=1.000000, nodes=105 <= 300.000000)
                                                                                              @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.051004, bonus=1.000000, nodes=5)
                                                                                            @ 36  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000000, probability=0.051004, bonus=1.000000, nodes=8)
                                                                                              @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=0.051004, bonus=1.000000, nodes=9)
                            @ 3  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                                                                                              @ 12  java.lang.StringLatin1.charAt(byte[], int):char (15 bytes)   relevance-based (relevance=1.000000, probability=0.051004, bonus=1.000000, nodes=11 <= 300.000000)
                                                                                            @ 50  java.lang.String.charAt(int):char (25 bytes)   relevance-based (relevance=1.000000, probability=0.051004, bonus=1.000000, nodes=16 <= 300.000000)
                                                                                          @ 9  sun.reflect.generics.parser.SignatureParser.current():char (59 bytes)   relevance-based (relevance=1.219317, probability=0.051004, bonus=1.000000, nodes=31 <= 300.000000)
                                                                                                @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.009174, bonus=1.000000, nodes=5)
                                                                                              @ 1  java.lang.String.length():int (11 bytes)   trivial (relevance=1.179302, probability=0.009174, bonus=1.000000, nodes=8)
                                                                                                @ 6  jdk.internal.util.Preconditions.checkFromToIndex(int, int, int, BiFunction):int (24 bytes)   relevance-based (relevance=1.000000, probability=0.009174, bonus=1.000000, nodes=14 <= 300.000000)
                                                                                              @ 8  java.lang.String.checkBoundsBeginEnd(int, int, int):void (11 bytes)   relevance-based (relevance=1.179302, probability=0.009174, bonus=1.000000, nodes=13 <= 300.000000)
                                                                                              @ 28  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.098893, probability=0.008549, bonus=1.000000, nodes=9)
                            @ 20  java.lang.String.<init>(byte[], byte):void (15 bytes)   inline method (bytecode parsing)
                            @ 13  java.util.Arrays.copyOfRangeByte(byte[], int, int):byte[] (33 bytes)   inline method (bytecode parsing)
                              @ 2  java.util.Arrays.checkLength(int, int):void (38 bytes)   inline method (bytecode parsing)
                                                                                                  @ 24  java.lang.Math.min(int, int):int (11 bytes)   trivial (relevance=1.556665, probability=0.006841, bonus=1.000000, nodes=7)
                                                                                                @ 16  java.util.Arrays.copyOfRange(byte[], int, int):byte[] (25 bytes)   relevance-based (relevance=1.000000, probability=0.008545, bonus=1.000000, nodes=44 <= 300.000000)
                                                                                              @ 41  java.lang.StringLatin1.newString(byte[], int, int):String (24 bytes)   relevance-based (relevance=1.098811, probability=0.008548, bonus=1.000000, nodes=62 <= 300.000000)
                            @ 31  java.lang.String.<init>(byte[], byte):void (15 bytes)   inline method (bytecode parsing)
                            @ 54  java.lang.String.<init>(byte[], byte):void (15 bytes)   inline method (bytecode parsing)
                                                                                              @ 54  java.lang.StringUTF16.newString(byte[], int, int):String (58 bytes)   not inlining relevance-based (relevance=0.000082, probability=0.000001, bonus=1.000000, nodes=41 > 0.024677)
                                                                                            @ 12  java.lang.String.substring(int, int):String (58 bytes)   relevance-based (relevance=1.000000, probability=0.009174, bonus=1.000000, nodes=98 <= 300.000000)
                                                                                          @ 29  sun.reflect.generics.parser.SignatureParser.markToCurrent():String (16 bytes)   relevance-based (relevance=1.000000, probability=0.009174, bonus=1.000000, nodes=103 <= 300.000000)
                                                                                            @ 6  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000139, probability=0.009174, bonus=1.000000, nodes=9)
                            @ 49  java.lang.StringConcatHelper.newArray(long):byte[] (40 bytes)   inline method (bytecode parsing)
                            @ 123  java.lang.String.<init>(byte[], byte):void (15 bytes)   inline method (bytecode parsing)
                                                                                            @ 18  java.lang.StringLatin1.replace(byte[], char, char):String (198 bytes)   not inlining too large previous low-level graph (low-level-nodes: 345, relevance=1.000139, probability=0.009174, bonus=1.000000, nodes=96)
                                                                                          @ 36  java.lang.String.replace(char, char):String (42 bytes)   relevance-based (relevance=0.999993, probability=0.009174, bonus=1.000000, nodes=19 <= 299.997763)
                                                                                              @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=0.999993, probability=0.009174, bonus=1.000000, nodes=5)
                                                                                            @ 36  java.lang.String.length():int (11 bytes)   trivial (relevance=0.999993, probability=0.009174, bonus=1.000000, nodes=8)
                                                                                              @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=0.999993, probability=0.009174, bonus=1.000000, nodes=9)
                            @ 3  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                                                                                              @ 12  java.lang.StringLatin1.charAt(byte[], int):char (15 bytes)   relevance-based (relevance=0.999993, probability=0.009174, bonus=1.000000, nodes=11 <= 299.997763)
                                                                                            @ 50  java.lang.String.charAt(int):char (25 bytes)   relevance-based (relevance=0.999993, probability=0.009174, bonus=1.000000, nodes=16 <= 299.997763)
                                                                                          @ 41  sun.reflect.generics.parser.SignatureParser.current():char (59 bytes)   relevance-based (relevance=0.999993, probability=0.009174, bonus=1.000000, nodes=31 <= 299.997763)
                                                                                        @ 54  sun.reflect.generics.parser.SignatureParser.parsePackageNameAndSimpleClassTypeSignature():SimpleClassTypeSignature (119 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.009174, bonus=1.000000, nodes=311 > 300.000000)
                                                                                        @ 57  java.util.ArrayList.add(Object):boolean (25 bytes)   not inlining too large previous low-level graph (low-level-nodes: 472, relevance=1.000000, probability=0.009174, bonus=1.000000, nodes=15)
                                                                                              @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.009174, bonus=1.000000, nodes=5)
                                                                                            @ 36  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000000, probability=0.009174, bonus=1.000000, nodes=8)
                                                                                              @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=0.009174, bonus=1.000000, nodes=9)
                            @ 3  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                                                                                              @ 12  java.lang.StringLatin1.charAt(byte[], int):char (15 bytes)   relevance-based (relevance=1.000000, probability=0.009174, bonus=1.000000, nodes=11 <= 300.000000)
                                                                                            @ 50  java.lang.String.charAt(int):char (25 bytes)   relevance-based (relevance=1.000000, probability=0.009174, bonus=1.000000, nodes=16 <= 300.000000)
                                                                                          @ 1  sun.reflect.generics.parser.SignatureParser.current():char (59 bytes)   relevance-based (relevance=1.000000, probability=0.009174, bonus=1.000000, nodes=31 <= 300.000000)
                                                                                        @ 65  sun.reflect.generics.parser.SignatureParser.parseClassTypeSignatureSuffix(List):void (29 bytes)   relevance-based (relevance=1.000000, probability=0.009174, bonus=1.000000, nodes=35 <= 300.000000)
                                                                                            @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.009174, bonus=1.000000, nodes=5)
                                                                                          @ 36  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000000, probability=0.009174, bonus=1.000000, nodes=8)
                                                                                            @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=0.009174, bonus=1.000000, nodes=9)
                            @ 3  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                                                                                            @ 12  java.lang.StringLatin1.charAt(byte[], int):char (15 bytes)   relevance-based (relevance=1.000000, probability=0.009174, bonus=1.000000, nodes=11 <= 300.000000)
                                                                                          @ 50  java.lang.String.charAt(int):char (25 bytes)   relevance-based (relevance=1.000000, probability=0.009174, bonus=1.000000, nodes=16 <= 300.000000)
                                                                                        @ 69  sun.reflect.generics.parser.SignatureParser.current():char (59 bytes)   relevance-based (relevance=1.000000, probability=0.009174, bonus=1.000000, nodes=31 <= 300.000000)
                                                                                            @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.009174, bonus=1.000000, nodes=5)
                                                                                          @ 36  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000000, probability=0.009174, bonus=1.000000, nodes=8)
                                                                                        @ 110  sun.reflect.generics.parser.SignatureParser.advance():void (53 bytes)   relevance-based (relevance=1.000000, probability=0.009174, bonus=1.000000, nodes=20 <= 300.000000)
                                                                                      @ 41  sun.reflect.generics.parser.SignatureParser.parseClassTypeSignature():ClassTypeSignature (118 bytes)   relevance-based (relevance=1.000000, probability=0.009174, bonus=1.000000, nodes=144 <= 300.000000)
                                                                                    @ 2  sun.reflect.generics.parser.SignatureParser.parseFieldTypeSignature(boolean):FieldTypeSignature (73 bytes)   relevance-based (relevance=1.000000, probability=0.009174, bonus=1.000000, nodes=174 <= 300.000000)
                                                                                  @ 6  sun.reflect.generics.parser.SignatureParser.parseTypeSignature():TypeSignature (130 bytes)   relevance-based (relevance=1.030610, probability=0.009174, bonus=1.000000, nodes=205 <= 300.000000)
                                                                                  @ 6  sun.reflect.generics.factory.CoreReflectionFactory.<init>(GenericDeclaration, Scope):void (15 bytes)   relevance-based (relevance=1.030610, probability=0.009174, bonus=1.000000, nodes=11 <= 300.000000)
                            @ 1  sun.reflect.generics.tree.ClassTypeSignature.getPath():List (5 bytes)   inline accessor method (bytecode parsing)
                            @ 52  sun.reflect.generics.tree.SimpleClassTypeSignature.getName():String (5 bytes)   inline accessor method (bytecode parsing)
                            @ 55  java.lang.StringBuilder.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                            @ 62  sun.reflect.generics.tree.SimpleClassTypeSignature.getDollar():boolean (5 bytes)   inline accessor method (bytecode parsing)
                            @ 165  sun.reflect.generics.visitor.Reifier.getFactory():GenericsFactory (5 bytes)   inline accessor method (bytecode parsing)
                            @ 170  java.lang.StringBuilder.toString():String (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.String.<init>(StringBuilder):void (7 bytes)   inline method (bytecode parsing)
                            @ 182  sun.reflect.generics.tree.SimpleClassTypeSignature.getTypeArguments():TypeArgument[] (5 bytes)   inline accessor method (bytecode parsing)
                                                                                        @ 5  java.util.ArrayList$Itr.<init>(ArrayList):void (26 bytes)   relevance-based (relevance=1.000000, probability=0.009174, bonus=1.000000, nodes=15 <= 300.000000)
                                                                                      @ 29  java.util.ArrayList.iterator():Iterator (9 bytes)   relevance-based (relevance=1.000000, probability=0.009174, bonus=1.000000, nodes=16 <= 300.000000)
                                                                                        @ 1  java.util.ArrayList$Itr.checkForComodification():void (23 bytes)   trivial (relevance=1.000000, probability=0.009174, bonus=1.000000, nodes=9)
                                                                                      @ 36  java.util.ArrayList$Itr.next():Object (66 bytes)   relevance-based (relevance=1.000000, probability=0.009174, bonus=1.000000, nodes=25 <= 300.000000)
                                                                                          @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.009174, bonus=1.000000, nodes=5)
                                                                                        @ 5  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000000, probability=0.009174, bonus=1.000000, nodes=8)
                                                                                        @ 26  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.009174, bonus=1.000000, nodes=5)
                            @ 2  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                                                                                          @ 2  java.lang.AbstractStringBuilder.append(String):AbstractStringBuilder (45 bytes)   not inlining too large previous low-level graph (low-level-nodes: 368, relevance=1.000000, probability=0.009174, bonus=1.000000, nodes=23)
                                                                                        @ 58  java.lang.StringBuilder.append(String):AbstractStringBuilder (6 bytes)   trivial (relevance=1.000000, probability=0.009174, bonus=1.000000, nodes=9)
                                                                                      @ 2  java.lang.AbstractStringBuilder.<init>(String):void (63 bytes)   relevance-based (relevance=1.000000, probability=0.009174, bonus=1.000000, nodes=33 <= 300.000000)
                                                                                      @ 68  java.util.ArrayList$Itr.hasNext():boolean (20 bytes)   relevance-based (relevance=1.000000, probability=0.009174, bonus=1.000000, nodes=11 <= 300.000000)
                            @ 5  java.lang.AbstractStringBuilder.getValue():byte[] (5 bytes)   inline accessor method (bytecode parsing)
                                                                                      @ 3  java.lang.String.<init>(AbstractStringBuilder, Void):void (99 bytes)   not inlining too large previous low-level graph (low-level-nodes: 376, relevance=1.000000, probability=0.009174, bonus=1.000000, nodes=41)
                            @ 17  java.lang.Class.getClassLoader():ClassLoader (28 bytes)   inline method (bytecode parsing)
                                                                                            @ 0  java.lang.System.allowSecurityManager():boolean (13 bytes)   trivial (relevance=1.000769, probability=0.005919, bonus=1.000000, nodes=8)
                                                                                          @ 11  java.lang.System.getSecurityManager():SecurityManager (12 bytes)   relevance-based (relevance=1.000000, probability=0.005919, bonus=1.000000, nodes=14 <= 300.000000)
                                                                                        @ 3  sun.reflect.generics.factory.CoreReflectionFactory.getDeclsLoader():ClassLoader (85 bytes)   relevance-based (relevance=1.000000, probability=0.009174, bonus=1.000000, nodes=42 <= 300.000000)
                                                                                            @ 0  java.lang.System.allowSecurityManager():boolean (13 bytes)   trivial (relevance=1.000769, probability=0.009174, bonus=1.000000, nodes=8)
                                                                                          @ 2  java.lang.System.getSecurityManager():SecurityManager (12 bytes)   relevance-based (relevance=1.000000, probability=0.009174, bonus=1.000000, nodes=14 <= 300.000000)
                                                                                              @ 0  java.lang.System.allowSecurityManager():boolean (13 bytes)   trivial (relevance=1.000769, probability=0.009174, bonus=1.000000, nodes=8)
                                                                                            @ 0  java.lang.System.getSecurityManager():SecurityManager (12 bytes)   relevance-based (relevance=1.000000, probability=0.009174, bonus=1.000000, nodes=14 <= 300.000000)
                 n                                                                        @ 37  java.lang.Class.forName0(String, boolean, ClassLoader, Class):Class (0 bytes)   not inlining it is a non-intrinsic native method
                                                                                          @ 20  java.lang.Class.forName(String, boolean, ClassLoader, Class):Class (41 bytes)   relevance-based (relevance=1.000769, probability=0.009174, bonus=1.000000, nodes=27 <= 300.000000)
                                                                                        @ 6  java.lang.Class.forName(String, boolean, ClassLoader):Class (24 bytes)   relevance-based (relevance=1.551003, probability=0.009174, bonus=1.000000, nodes=44 <= 300.000000)
                                                                                      @ 173  sun.reflect.generics.factory.CoreReflectionFactory.makeNamedType(String):Type (21 bytes)   relevance-based (relevance=1.000000, probability=0.009174, bonus=1.000000, nodes=82 <= 300.000000)
                                                                                    @ 2  sun.reflect.generics.visitor.Reifier.visitClassTypeSignature(ClassTypeSignature):void (381 bytes)   relevance-based (relevance=1.000000, probability=0.009174, bonus=1.000000, nodes=184 <= 300.000000)
                                                                                  @ 44  sun.reflect.generics.tree.ClassTypeSignature.accept(TypeTreeVisitor):void (8 bytes)   relevance-based (relevance=1.030610, probability=0.009174, bonus=1.000000, nodes=185 <= 300.000000)
                                                                                @ 27  sun.reflect.annotation.AnnotationParser.parseSig(String, Class):Class (62 bytes)   not inlining relevance-based (relevance=1.000170, probability=0.009174, bonus=1.000000, nodes=456 > 300.000000)
                            @ 0  jdk.internal.access.SharedSecrets.getJavaLangAccess():JavaLangAccess (4 bytes)   inline method (bytecode parsing)
                            @ 1  java.lang.Class.getAnnotationType():AnnotationType (5 bytes)   inline accessor method (bytecode parsing)
                                                                                  @ 6  java.lang.System$2.getAnnotationType(Class):AnnotationType (5 bytes)   relevance-based (relevance=1.002802, probability=0.009174, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 17  java.lang.IllegalArgumentException.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  java.lang.RuntimeException.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                                @ 2  java.lang.Exception.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                            @ 27  sun.reflect.annotation.AnnotationType$1.<init>(AnnotationType, Class):void (10 bytes)   inline method (bytecode parsing)
                            @ 30  java.security.AccessController.doPrivileged(PrivilegedAction):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.security.AccessController.executePrivileged(PrivilegedAction, AccessControlContext, Class):Object (65 bytes)   inline method (bytecode parsing)
                                @ 29  sun.reflect.annotation.AnnotationType$1.run():Object (5 bytes)   inline method (bytecode parsing)
                                  @ 1  sun.reflect.annotation.AnnotationType$1.run():Method[] (8 bytes)   inline method (bytecode parsing)
                            @ 59  java.util.HashMap.<init>(int):void (8 bytes)   inline method (bytecode parsing)
                            @ 105  java.lang.reflect.Method.getModifiers():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 116  java.lang.reflect.Method.getModifiers():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 127  java.lang.reflect.Method.isSynthetic():boolean (5 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.reflect.Executable.isSynthetic():boolean (8 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.reflect.Method.getModifiers():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 135  java.lang.reflect.Method.getParameterCount():int (6 bytes)   inline method (bytecode parsing)
                            @ 171  java.lang.reflect.Method.getName():String (5 bytes)   inline accessor method (bytecode parsing)
                            @ 178  java.lang.reflect.Method.getReturnType():Class (5 bytes)   inline accessor method (bytecode parsing)
                            @ 149  java.lang.StringBuilder.<init>():void (7 bytes)   inline method (bytecode parsing)
                            @ 154  java.lang.StringBuilder.append(Object):StringBuilder (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 159  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 162  java.lang.StringBuilder.toString():String (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.String.<init>(StringBuilder):void (7 bytes)   inline method (bytecode parsing)
                            @ 165  java.lang.IllegalArgumentException.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  java.lang.RuntimeException.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                                @ 2  java.lang.Exception.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                            @ 258  jdk.internal.access.SharedSecrets.getJavaLangAccess():JavaLangAccess (4 bytes)   inline method (bytecode parsing)
                                                                                  @ 21  sun.reflect.annotation.AnnotationType.<init>(Class):void (361 bytes)   not inlining relevance-based (relevance=0.002802, probability=0.000026, bonus=1.000000, nodes=244 > 0.840650)
                            @ 3  java.lang.Class.casAnnotationType(AnnotationType, AnnotationType):boolean (7 bytes)   inline method (bytecode parsing)
                                                                                  @ 29  java.lang.System$2.casAnnotationType(Class, AnnotationType, AnnotationType):boolean (7 bytes)   not inlining relevance-based (relevance=0.002802, probability=0.000026, bonus=1.000000, nodes=13 > 0.840650)
                                                                                @ 103  sun.reflect.annotation.AnnotationType.getInstance(Class):AnnotationType (65 bytes)   relevance-based (relevance=1.000170, probability=0.009174, bonus=1.000000, nodes=37 <= 300.000000)
                            @ 1  java.util.AbstractMap.<init>():void (5 bytes)   inline method (bytecode parsing)
                                                                                  @ 1  java.util.HashMap.<init>():void (11 bytes)   trivial (relevance=1.000000, probability=0.009174, bonus=1.000000, nodes=8)
                                                                                    @ 4  java.util.Map.size():int (0 bytes)   not inlining no type profile exists
                                                                                    @ 1  java.util.HashMap.size():int (5 bytes)   relevance-based (relevance=1.637394, probability=0.009174, bonus=1.000000, nodes=13 <= 300.000000)
                                                                                    @ 62  java.util.HashMap.tableSizeFor(int):int (32 bytes)   relevance-based (relevance=0.269454, probability=0.002067, bonus=1.000000, nodes=23 <= 80.836093)
                            @ 15  java.util.HashMap$EntrySet.<init>(HashMap):void (10 bytes)   inline method (bytecode parsing)
                              @ 6  java.util.AbstractSet.<init>():void (5 bytes)   inline method (bytecode parsing)
                                @ 1  java.util.AbstractCollection.<init>():void (5 bytes)   inline method (bytecode parsing)
                            @ 21  java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet.<init>(Set):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  java.util.Collections$UnmodifiableSet.<init>(Set):void (6 bytes)   inline method (bytecode parsing)
                                                                                    @ 16  java.util.Map.entrySet():Set (0 bytes)   not inlining no type profile exists
                                                                                      @ 2  java.util.Collections$UnmodifiableCollection.<init>(Collection):void (22 bytes)   relevance-based (relevance=0.338003, probability=0.000751, bonus=1.000000, nodes=10 <= 101.400946)
                                                                                    @ 98  java.util.HashMap.entrySet():Set (27 bytes)   relevance-based (relevance=0.465646, probability=0.003571, bonus=1.000000, nodes=50 <= 139.693709)
                            @ 8  java.util.HashMap$EntryIterator.<init>(HashMap):void (6 bytes)   inline method (bytecode parsing)
                                                                                      @ 17  java.util.Collection.iterator():Iterator (0 bytes)   not inlining no type profile exists
                                                                                      @ 5  java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1.<init>(Collections$UnmodifiableMap$UnmodifiableEntrySet):void (26 bytes)   relevance-based (relevance=0.338003, probability=0.001502, bonus=1.000000, nodes=15 <= 101.400946)
                                                                                      @ 2  java.util.HashMap$HashIterator.<init>(HashMap):void (79 bytes)   not inlining too large previous low-level graph (low-level-nodes: 409, relevance=0.465646, probability=0.002069, bonus=1.000000, nodes=58)
                                                                                    @ 103  java.util.HashMap$EntrySet.iterator():Iterator (12 bytes)   relevance-based (relevance=0.465646, probability=0.003571, bonus=1.000000, nodes=26 <= 139.693709)
                                                                                      @ 4  java.util.HashMap$HashIterator.hasNext():boolean (13 bytes)   trivial (relevance=0.576359, probability=0.010514, bonus=1.000000, nodes=9)
                                                                                    @ 112  java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1.hasNext():boolean (10 bytes)   relevance-based (relevance=0.576359, probability=0.018591, bonus=1.000000, nodes=27 <= 172.907803)
                            @ 1  java.util.HashMap$EntryIterator.next():Map$Entry (5 bytes)   inline method (bytecode parsing)
                                                                                      @ 1  java.util.HashMap$HashIterator.nextNode():HashMap$Node (100 bytes)   not inlining too large previous low-level graph (low-level-nodes: 450, relevance=0.443472, probability=0.006008, bonus=1.000000, nodes=53)
                            @ 1  java.util.HashMap$EntryIterator.next():Map$Entry (5 bytes)   inline method (bytecode parsing)
                                                                                          @ 1  java.util.HashMap$HashIterator.nextNode():HashMap$Node (100 bytes)   not inlining too large previous low-level graph (low-level-nodes: 450, relevance=0.665208, probability=0.009012, bonus=1.000000, nodes=53)
                                                                                        @ 8  java.util.HashMap$EntryIterator.next():Object (5 bytes)   trivial (relevance=0.665208, probability=0.009012, bonus=1.000000, nodes=8)
                            @ 6  java.util.Objects.requireNonNull(Object):Object (14 bytes)   inline method (bytecode parsing)
                                                                                        @ 16  java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry.<init>(Map$Entry):void (16 bytes)   trivial (relevance=0.665208, probability=0.009012, bonus=1.000000, nodes=7)
                                                                                      @ 1  java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1.next():Map$Entry (20 bytes)   relevance-based (relevance=0.665208, probability=0.009012, bonus=1.000000, nodes=28 <= 199.562441)
                                                                                    @ 122  java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1.next():Object (5 bytes)   relevance-based (relevance=0.665208, probability=0.015020, bonus=1.000000, nodes=37 <= 199.562441)
                                                                                      @ 4  java.util.HashMap$Node.getKey():Object (5 bytes)   trivial (relevance=0.665208, probability=0.009012, bonus=1.000000, nodes=5)
                                                                                    @ 134  java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry.getKey():Object (10 bytes)   relevance-based (relevance=0.665208, probability=0.015020, bonus=1.000000, nodes=19 <= 199.562441)
                                                                                      @ 4  java.util.HashMap$Node.getValue():Object (5 bytes)   trivial (relevance=0.665208, probability=0.009012, bonus=1.000000, nodes=5)
                                                                                    @ 143  java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry.getValue():Object (10 bytes)   relevance-based (relevance=0.665208, probability=0.015020, bonus=1.000000, nodes=19 <= 199.562441)
                                                                                  @ 17  java.util.HashMap.putMapEntries(Map, boolean):void (170 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.009174, bonus=1.000000, nodes=316 > 300.000000)
                                                                                @ 136  java.util.LinkedHashMap.<init>(Map):void (21 bytes)   relevance-based (relevance=1.000170, probability=0.009174, bonus=1.000000, nodes=19 <= 300.000000)
                            @ 4  java.nio.Buffer.session():MemorySessionImpl (20 bytes)   inline method (bytecode parsing)
                            @ 18  java.nio.HeapByteBuffer.byteOffset(long):long (7 bytes)   inline method (bytecode parsing)
                            @ 25  jdk.internal.misc.ScopedMemoryAccess.getShortUnaligned(MemorySessionImpl, Object, long, boolean):short (18 bytes)   inline method (bytecode parsing)
                              @ 6  jdk.internal.misc.ScopedMemoryAccess.getShortUnalignedInternal(MemorySessionImpl, Object, long, boolean):short (36 bytes)   inline method (bytecode parsing)
                                @ 15  jdk.internal.misc.Unsafe.getShortUnaligned(Object, long, boolean):short (12 bytes)   inline method (bytecode parsing)
                                                                                  @ 14  java.nio.Buffer.nextGetIndex(int):int (32 bytes)   relevance-based (relevance=1.000000, probability=0.009174, bonus=1.000000, nodes=13 <= 300.000000)
                                                                                  @ 8  jdk.internal.misc.Unsafe.convEndian(boolean, short):short (16 bytes)   relevance-based (relevance=1.000000, probability=0.009174, bonus=1.000000, nodes=20 <= 300.000000)
                                                                                @ 142  java.nio.HeapByteBuffer.getShort():short (29 bytes)   relevance-based (relevance=1.000170, probability=0.009174, bonus=1.000000, nodes=44 <= 300.000000)
                            @ 9  java.security.AccessController.doPrivileged(PrivilegedAction):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.security.AccessController.executePrivileged(PrivilegedAction, AccessControlContext, Class):Object (65 bytes)   inline method (bytecode parsing)
                                @ 29  sun.reflect.annotation.AnnotationParser$1.run():Object (5 bytes)   inline method (bytecode parsing)
                                                                                  @ 6  sun.reflect.annotation.AnnotationParser$1.<init>(Class, Map):void (15 bytes)   relevance-based (relevance=1.000000, probability=0.009174, bonus=1.000000, nodes=11 <= 300.000000)
                            @ 4  java.lang.Class.getClassLoader():ClassLoader (28 bytes)   inline method (bytecode parsing)
                                                                                      @ 0  java.lang.System.allowSecurityManager():boolean (13 bytes)   trivial (relevance=1.000769, probability=0.005919, bonus=1.000000, nodes=8)
                                                                                    @ 11  java.lang.System.getSecurityManager():SecurityManager (12 bytes)   relevance-based (relevance=1.000000, probability=0.005919, bonus=1.000000, nodes=14 <= 300.000000)
                            @ 5  java.lang.Class.getInterfaces():Class[] (6 bytes)   inline method (bytecode parsing)
                            @ 1  java.lang.ref.Reference.get():Object (5 bytes)   inline accessor method (bytecode parsing)
                                                                                          @ 15  java.lang.ref.SoftReference.get():Object (29 bytes)   relevance-based (relevance=1.000000, probability=0.009110, bonus=1.000000, nodes=20 <= 300.000000)
                            @ 5  java.lang.Class$ReflectionData.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                                                                                          @ 39  java.lang.Class.newReflectionData(SoftReference, int):Class$ReflectionData (66 bytes)   not inlining relevance-based (relevance=0.007162, probability=0.000064, bonus=1.000000, nodes=61 > 2.148563)
                                                                                        @ 1  java.lang.Class.reflectionData():Class$ReflectionData (43 bytes)   relevance-based (relevance=1.004912, probability=0.009174, bonus=1.000000, nodes=45 <= 300.000000)
                 n                                                                    @ 24  java.lang.Class.getInterfaces0():Class[] (0 bytes)   not inlining it is a non-intrinsic native method
                                                                                      @ 2  java.lang.Class.getInterfaces(boolean):Class[] (49 bytes)   relevance-based (relevance=1.000000, probability=0.009174, bonus=1.000000, nodes=75 <= 300.000000)
                                                                                      @ 10  java.lang.Class.isAnnotation():boolean (17 bytes)   relevance-based (relevance=1.027724, probability=0.009174, bonus=1.000000, nodes=23 <= 300.000000)
                                                                                    @ 30  sun.reflect.annotation.AnnotationInvocationHandler.<init>(Class, Map):void (71 bytes)   relevance-based (relevance=1.551003, probability=0.009174, bonus=1.000000, nodes=116 <= 300.000000)
                            @ 1  java.util.Objects.requireNonNull(Object):Object (14 bytes)   inline method (bytecode parsing)
                                                                                        @ 0  java.lang.System.allowSecurityManager():boolean (13 bytes)   trivial (relevance=1.000769, probability=0.009174, bonus=1.000000, nodes=8)
                                                                                      @ 5  java.lang.System.getSecurityManager():SecurityManager (12 bytes)   relevance-based (relevance=1.000000, probability=0.009174, bonus=1.000000, nodes=14 <= 300.000000)
                            @ 31  jdk.internal.loader.AbstractClassLoaderValue.sub(Object):AbstractClassLoaderValue$Sub (10 bytes)   inline method (bytecode parsing)
                              @ 6  jdk.internal.loader.AbstractClassLoaderValue$Sub.<init>(AbstractClassLoaderValue, Object):void (15 bytes)   inline method (bytecode parsing)
                                @ 6  jdk.internal.loader.AbstractClassLoaderValue.<init>():void (5 bytes)   inline method (bytecode parsing)
                            @ 35  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object):Object (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.lang.invoke.LambdaForm$MH/0x00007f45e0000800.invoke(Object):Object (8 bytes)   inline method (bytecode parsing)
                            @ 30  java.util.concurrent.ConcurrentHashMap.putIfAbsent(Object, Object):Object (8 bytes)   inline method (bytecode parsing)
                            @ 4  jdk.internal.loader.BootLoader.getClassLoaderValueMap():ConcurrentHashMap (4 bytes)   inline method (bytecode parsing)
                            @ 14  java.lang.System$2.createOrGetClassLoaderValueMap(ClassLoader):ConcurrentHashMap (5 bytes)   inline method (bytecode parsing)
                                                                                            @ 1  java.lang.ClassLoader.createOrGetClassLoaderValueMap():ConcurrentHashMap (37 bytes)   trivial (relevance=1.000000, probability=0.009112, bonus=1.000000, nodes=9)
                                                                                          @ 1  jdk.internal.loader.AbstractClassLoaderValue.map(ClassLoader):ConcurrentHashMap (20 bytes)   relevance-based (relevance=1.000000, probability=0.009174, bonus=1.000000, nodes=23 <= 300.000000)
                            @ 20  java.util.concurrent.ConcurrentHashMap.spread(int):int (10 bytes)   inline method (bytecode parsing)
                                                                                          @ 4  java.util.concurrent.ConcurrentHashMap.putVal(Object, Object, boolean):Object (432 bytes)   not inlining relevance-based (relevance=0.002196, probability=0.000020, bonus=1.000000, nodes=181 > 0.658858)
                            @ 4  java.util.concurrent.ConcurrentHashMap.spread(int):int (10 bytes)   inline method (bytecode parsing)
                            @ 3  jdk.internal.loader.AbstractClassLoaderValue$Sub.parent():AbstractClassLoaderValue (5 bytes)   inline accessor method (bytecode parsing)
                 n                                                                            @ 6  java.lang.Object.hashCode():int (0 bytes)   trivial (relevance=1.000000, probability=0.009174, bonus=1.000000, nodes=5)
                            @ 4  java.lang.Long.hashCode(long):int (8 bytes)   inline method (bytecode parsing)
                            @ 17  java.lang.NullPointerException.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  java.lang.RuntimeException.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                                @ 2  java.lang.Exception.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                                                                                                  @ 1  jdk.vm.ci.hotspot.HotSpotResolvedJavaMethodImpl.getMethodPointer():long (23 bytes)   not inlining relevance-based (relevance=0.031228, probability=0.000262, bonus=1.000000, nodes=21 > 9.368346)
                                                                                                      @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=0.124911, probability=0.000065, bonus=1.000000, nodes=5)
                                                                                                    @ 9  java.lang.String.length():int (11 bytes)   trivial (relevance=0.124911, probability=0.000065, bonus=1.000000, nodes=8)
                                                                                                  @ 14  java.net.URI.hashIgnoringCase(int, String):int (45 bytes)   not inlining relevance-based (relevance=0.124911, probability=0.000131, bonus=1.000000, nodes=40 > 37.473385)
                            @ 9  java.lang.String.indexOf(int):int (7 bytes)   inline method (bytecode parsing)
                                                                                                      @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=0.249823, probability=0.000065, bonus=1.000000, nodes=9)
                                                                                                        @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=0.249823, probability=0.000065, bonus=1.000000, nodes=5)
                                                                                                      @ 14  java.lang.String.length():int (11 bytes)   trivial (relevance=0.249823, probability=0.000065, bonus=1.000000, nodes=8)
                            @ 11  java.lang.Math.max(int, int):int (11 bytes)   inline method (bytecode parsing)
                                                                                                        @ 1  java.lang.StringLatin1.canEncode(int):boolean (13 bytes)   trivial (relevance=0.249828, probability=0.000065, bonus=1.000000, nodes=5)
                                                                                                        @ 18  java.lang.Math.min(int, int):int (11 bytes)   trivial (relevance=0.249828, probability=0.000065, bonus=1.000000, nodes=7)
                                                                                                      @ 17  java.lang.StringLatin1.indexOf(byte[], int, int, int):int (37 bytes)   relevance-based (relevance=0.249823, probability=0.000065, bonus=1.000000, nodes=18 <= 74.946771)
                                                                                                    @ 3  java.lang.String.indexOf(int, int):int (37 bytes)   relevance-based (relevance=0.249823, probability=0.000065, bonus=1.000000, nodes=29 <= 74.946771)
                                                                                                  @ 23  java.net.URI.hash(int, String):int (33 bytes)   not inlining relevance-based (relevance=0.124911, probability=0.000131, bonus=1.000000, nodes=58 > 37.473385)
                                                                                                  @ 28  java.net.URI.isOpaque():boolean (13 bytes)   trivial (relevance=0.124911, probability=0.000131, bonus=1.000000, nodes=9)
                            @ 9  java.lang.String.indexOf(int):int (7 bytes)   inline method (bytecode parsing)
                                                                                                  @ 39  java.net.URI.hash(int, String):int (33 bytes)   not inlining relevance-based (relevance=0.062456, probability=0.000065, bonus=1.000000, nodes=37 > 18.736693)
                            @ 9  java.lang.String.indexOf(int):int (7 bytes)   inline method (bytecode parsing)
                                                                                                  @ 51  java.net.URI.hash(int, String):int (33 bytes)   not inlining relevance-based (relevance=0.062456, probability=0.000065, bonus=1.000000, nodes=37 > 18.736693)
                            @ 9  java.lang.String.indexOf(int):int (7 bytes)   inline method (bytecode parsing)
                                                                                                  @ 60  java.net.URI.hash(int, String):int (33 bytes)   not inlining relevance-based (relevance=0.062456, probability=0.000065, bonus=1.000000, nodes=37 > 18.736693)
                            @ 9  java.lang.String.indexOf(int):int (7 bytes)   inline method (bytecode parsing)
                                                                                                  @ 76  java.net.URI.hash(int, String):int (33 bytes)   not inlining relevance-based (relevance=0.031228, probability=0.000033, bonus=1.000000, nodes=37 > 9.368346)
                                                                                                  @ 85  java.net.URI.hashIgnoringCase(int, String):int (45 bytes)   not inlining relevance-based (relevance=0.031228, probability=0.000033, bonus=1.000000, nodes=38 > 9.368346)
                            @ 9  java.lang.String.indexOf(int):int (7 bytes)   inline method (bytecode parsing)
                                                                                                  @ 108  java.net.URI.hash(int, String):int (33 bytes)   not inlining relevance-based (relevance=0.031228, probability=0.000033, bonus=1.000000, nodes=37 > 9.368346)
                 n                                                                              @ 5  java.lang.Object.hashCode():int (0 bytes)   relevance-based (relevance=1.000000, probability=0.008909, bonus=1.000000, nodes=90 <= 300.000000)
                                                                                              @ 14  java.util.Objects.hashCode(Object):int (13 bytes)   relevance-based (relevance=1.000000, probability=0.009174, bonus=1.000000, nodes=105 <= 300.000000)
                                                                                            @ 1  jdk.internal.loader.AbstractClassLoaderValue$Sub.hashCode():int (19 bytes)   relevance-based (relevance=3.959160, probability=0.009174, bonus=1.000000, nodes=122 <= 300.000000)
                                                                                            @ 34  java.util.concurrent.ConcurrentHashMap.tabAt(ConcurrentHashMap$Node[], int):ConcurrentHashMap$Node (22 bytes)   relevance-based (relevance=1.090921, probability=0.009148, bonus=1.000000, nodes=11 <= 300.000000)
                            @ 22  jdk.internal.loader.AbstractClassLoaderValue$Sub.parent():AbstractClassLoaderValue (5 bytes)   inline accessor method (bytecode parsing)
                            @ 26  jdk.internal.loader.AbstractClassLoaderValue$Sub.parent():AbstractClassLoaderValue (5 bytes)   inline accessor method (bytecode parsing)
                                                                                              @ 29  java.lang.Object.equals(Object):boolean (11 bytes)   trivial (relevance=0.276385, probability=0.002318, bonus=1.000000, nodes=9)
                                                                                              @ 11  java.lang.Object.equals(Object):boolean (11 bytes)   not inlining no methods remaining after filtering less frequent methods (8 methods previously)
                                                                                              @ 43  java.util.Objects.equals(Object, Object):boolean (23 bytes)   relevance-based (relevance=0.276385, probability=0.002318, bonus=1.000000, nodes=24 <= 82.915401)
                                                                                            @ 73  jdk.internal.loader.AbstractClassLoaderValue$Sub.equals(Object):boolean (55 bytes)   relevance-based (relevance=0.276385, probability=0.002318, bonus=1.000000, nodes=51 <= 82.915401)
                            @ 22  jdk.internal.loader.AbstractClassLoaderValue$Sub.parent():AbstractClassLoaderValue (5 bytes)   inline accessor method (bytecode parsing)
                            @ 26  jdk.internal.loader.AbstractClassLoaderValue$Sub.parent():AbstractClassLoaderValue (5 bytes)   inline accessor method (bytecode parsing)
                                                                                            @ 149  jdk.internal.loader.AbstractClassLoaderValue$Sub.equals(Object):boolean (55 bytes)   not inlining relevance-based (relevance=0.078653, probability=0.000389, bonus=1.000000, nodes=31 > 23.595888)
                                                                                          @ 19  java.util.concurrent.ConcurrentHashMap.get(Object):Object (162 bytes)   relevance-based (relevance=1.000000, probability=0.009174, bonus=1.000000, nodes=268 <= 300.000000)
                                                                                        @ 40  jdk.internal.loader.AbstractClassLoaderValue.computeIfAbsent(ClassLoader, BiFunction):Object (113 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.009174, bonus=1.000000, nodes=334 > 300.000000)
                                                                                      @ 22  java.lang.reflect.Proxy.getProxyConstructor(Class, ClassLoader, Class[]):Constructor (92 bytes)   relevance-based (relevance=1.000769, probability=0.009174, bonus=1.000000, nodes=28 <= 300.000000)
                            @ 21  java.lang.reflect.Constructor.newInstance(Object[]):Object (34 bytes)   inline method (bytecode parsing)
                            @ 35  java.lang.InternalError.<init>(String, Throwable):void (7 bytes)   inline method (bytecode parsing)
                              @ 3  java.lang.VirtualMachineError.<init>(String, Throwable):void (7 bytes)   inline method (bytecode parsing)
                                @ 3  java.lang.Error.<init>(String, Throwable):void (7 bytes)   inline method (bytecode parsing)
                                                                                          @ 18  java.lang.reflect.AccessibleObject.checkAccess(Class, Class, Class, int):void (40 bytes)   not inlining relevance-based (relevance=0.066640, probability=0.000573, bonus=1.000000, nodes=38 > 19.991971)
                            @ 14  java.lang.reflect.Constructor.getConstructorAccessor():ConstructorAccessor (5 bytes)   inline accessor method (bytecode parsing)
                            @ 50  java.lang.IllegalArgumentException.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  java.lang.RuntimeException.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                                @ 2  java.lang.Exception.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                            @ 62  jdk.internal.misc.VM.isJavaLangInvokeInited():boolean (4 bytes)   inline method (bytecode parsing)
                                                                                          @ 33  java.lang.reflect.Constructor.acquireConstructorAccessor():ConstructorAccessor (75 bytes)   not inlining relevance-based (relevance=0.046166, probability=0.000397, bonus=1.000000, nodes=69 > 13.849859)
                            @ 60  jdk.internal.reflect.DirectConstructorHandleAccessor.invokeImpl(Object[]):Object (103 bytes)   inline method (bytecode parsing)
                              @ 88  java.lang.invoke.LambdaForm$MH/0x00007f45e0003c00.invokeExact_MT(Object, Object, Object, Object, Object):Object (26 bytes)   inline method (bytecode parsing)
                                @ 11  java.lang.invoke.Invokers.checkExactType(MethodHandle, MethodType):void (17 bytes)   inline method (bytecode parsing)
                                  @ 1  java.lang.invoke.MethodHandle.type():MethodType (5 bytes)   inline accessor method (bytecode parsing)
                                @ 15  java.lang.invoke.Invokers.checkCustomized(MethodHandle):void (23 bytes)   inline method (bytecode parsing)
                              @ 69  java.lang.invoke.Invokers$Holder.invokeExact_MT(Object, Object, Object, Object):Object (24 bytes)   inline method (bytecode parsing)
                                @ 10  java.lang.invoke.Invokers.checkExactType(MethodHandle, MethodType):void (17 bytes)   inline method (bytecode parsing)
                                  @ 1  java.lang.invoke.MethodHandle.type():MethodType (5 bytes)   inline accessor method (bytecode parsing)
                                @ 14  java.lang.invoke.Invokers.checkCustomized(MethodHandle):void (23 bytes)   inline method (bytecode parsing)
                              @ 53  java.lang.invoke.Invokers$Holder.invokeExact_MT(Object, Object, Object):Object (23 bytes)   inline method (bytecode parsing)
                                @ 10  java.lang.invoke.Invokers.checkExactType(MethodHandle, MethodType):void (17 bytes)   inline method (bytecode parsing)
                                  @ 1  java.lang.invoke.MethodHandle.type():MethodType (5 bytes)   inline accessor method (bytecode parsing)
                                @ 14  java.lang.invoke.Invokers.checkCustomized(MethodHandle):void (23 bytes)   inline method (bytecode parsing)
                              @ 40  java.lang.invoke.Invokers$Holder.invokeExact_MT(Object, Object):Object (22 bytes)   inline method (bytecode parsing)
                                @ 10  java.lang.invoke.Invokers.checkExactType(MethodHandle, MethodType):void (17 bytes)   inline method (bytecode parsing)
                                  @ 1  java.lang.invoke.MethodHandle.type():MethodType (5 bytes)   inline accessor method (bytecode parsing)
                                @ 14  java.lang.invoke.Invokers.checkCustomized(MethodHandle):void (23 bytes)   inline method (bytecode parsing)
                                                                                          @ 19  java.lang.invoke.Invokers.maybeCustomize(MethodHandle):void (5 bytes)   not inlining it is marked non-inlinable
                                                                                          @ 19  java.lang.invoke.Invokers.maybeCustomize(MethodHandle):void (5 bytes)   not inlining it is marked non-inlinable
                                                                                          @ 19  java.lang.invoke.Invokers.maybeCustomize(MethodHandle):void (5 bytes)   not inlining it is marked non-inlinable
                                                                                          @ 19  java.lang.invoke.Invokers.maybeCustomize(MethodHandle):void (5 bytes)   not inlining it is marked non-inlinable
                                                                                          @ 41  jdk.internal.reflect.DirectConstructorHandleAccessor.newInstance(Object[]):Object (130 bytes)   relevance-based (relevance=1.066640, probability=0.009174, bonus=1.000000, nodes=140 <= 300.000000)
                                                                                        @ 30  java.lang.reflect.Constructor.newInstanceWithCaller(Object[], boolean, Class):Object (51 bytes)   relevance-based (relevance=1.053880, probability=0.009174, bonus=1.000000, nodes=177 <= 300.000000)
                                                                                      @ 31  java.lang.reflect.Proxy.newProxyInstance(Class, Constructor, InvocationHandler):Object (75 bytes)   relevance-based (relevance=1.000769, probability=0.009174, bonus=1.000000, nodes=193 <= 300.000000)
                                                                                    @ 33  java.lang.reflect.Proxy.newProxyInstance(ClassLoader, Class[], InvocationHandler):Object (35 bytes)   relevance-based (relevance=1.551003, probability=0.009174, bonus=1.000000, nodes=232 <= 300.000000)
                                                                                  @ 1  sun.reflect.annotation.AnnotationParser$1.run():Annotation (40 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.009174, bonus=1.000000, nodes=380 > 300.000000)
                                                                                @ 271  sun.reflect.annotation.AnnotationParser.annotationForMap(Class, Map):Annotation (16 bytes)   relevance-based (relevance=1.000170, probability=0.009174, bonus=1.000000, nodes=26 <= 300.000000)
                            @ 4  java.nio.Buffer.session():MemorySessionImpl (20 bytes)   inline method (bytecode parsing)
                            @ 18  java.nio.HeapByteBuffer.byteOffset(long):long (7 bytes)   inline method (bytecode parsing)
                            @ 25  jdk.internal.misc.ScopedMemoryAccess.getShortUnaligned(MemorySessionImpl, Object, long, boolean):short (18 bytes)   inline method (bytecode parsing)
                              @ 6  jdk.internal.misc.ScopedMemoryAccess.getShortUnalignedInternal(MemorySessionImpl, Object, long, boolean):short (36 bytes)   inline method (bytecode parsing)
                                @ 15  jdk.internal.misc.Unsafe.getShortUnaligned(Object, long, boolean):short (12 bytes)   inline method (bytecode parsing)
                                                                                  @ 14  java.nio.Buffer.nextGetIndex(int):int (32 bytes)   relevance-based (relevance=0.189112, probability=0.001735, bonus=1.000000, nodes=13 <= 56.733524)
                                                                                  @ 8  jdk.internal.misc.Unsafe.convEndian(boolean, short):short (16 bytes)   relevance-based (relevance=0.189112, probability=0.001735, bonus=1.000000, nodes=20 <= 56.733524)
                                                                                @ 161  java.nio.HeapByteBuffer.getShort():short (29 bytes)   relevance-based (relevance=0.189112, probability=0.001735, bonus=1.000000, nodes=44 <= 56.733524)
                 n                                                            @ 6  jdk.internal.reflect.ConstantPool.getUTF8At0(Object, int):String (0 bytes)   not inlining it is a non-intrinsic native method
                                                                                  @ 2  java.util.HashMap.getNode(Object):HashMap$Node (150 bytes)   not inlining relevance-based (relevance=0.214294, probability=0.001735, bonus=1.000000, nodes=108 > 64.288217)
                                                                                @ 181  java.util.HashMap.get(Object):Object (19 bytes)   relevance-based (relevance=0.189112, probability=0.001735, bonus=1.000000, nodes=19 <= 56.733524)
                            @ 75  sun.reflect.annotation.AnnotationParser.parseAnnotation(ByteBuffer, ConstantPool, Class, boolean):Annotation (9 bytes)   inline method (bytecode parsing)
                            @ 117  java.lang.Class.getInterfaces():Class[] (6 bytes)   inline method (bytecode parsing)
                            @ 190  java.lang.StringBuilder.<init>():void (7 bytes)   inline method (bytecode parsing)
                            @ 201  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 206  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 211  java.lang.StringBuilder.append(Object):StringBuilder (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 216  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 219  java.lang.StringBuilder.toString():String (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.String.<init>(StringBuilder):void (7 bytes)   inline method (bytecode parsing)
                                                                                @ 208  sun.reflect.annotation.AnnotationParser.parseMemberValue(Class, ByteBuffer, ConstantPool, Class):Object (230 bytes)   not inlining relevance-based (relevance=0.189112, probability=0.001735, bonus=1.000000, nodes=142 > 56.733524)
                                                                                      @ 17  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=0.002894, probability=0.000026, bonus=1.000000, nodes=9)
                                                                                      @ 27  java.lang.StringLatin1.hashCode(byte[]):int (52 bytes)   not inlining relevance-based (relevance=0.002892, probability=0.000026, bonus=1.000000, nodes=22 > 0.867706)
                                                                                      @ 37  java.lang.StringUTF16.hashCode(byte[]):int (52 bytes)   not inlining relevance-based (relevance=0.000001, probability=0.000000, bonus=1.000000, nodes=23 > 0.000438)
                                                                                    @ 9  java.lang.String.hashCode():int (60 bytes)   relevance-based (relevance=0.189112, probability=0.001735, bonus=1.000000, nodes=48 <= 56.733524)
                                                                                  @ 2  java.util.HashMap.hash(Object):int (20 bytes)   relevance-based (relevance=0.189112, probability=0.001735, bonus=1.000000, nodes=56 <= 56.733524)
                                                                                @ 255  java.util.HashMap.put(Object, Object):Object (13 bytes)   not inlining relevance-based (relevance=0.189112, probability=0.001735, bonus=1.000000, nodes=62 > 56.733524)
                                                                              @ 41  sun.reflect.annotation.AnnotationParser.parseAnnotation2(ByteBuffer, ConstantPool, Class, boolean, Class[]):Annotation (275 bytes)   relevance-based (relevance=4.000000, probability=0.009174, bonus=1.000000, nodes=256 <= 300.000000)
                                                                            @ 12  sun.reflect.annotation.AnnotationParser.parseAnnotations2(byte[], ConstantPool, Class, Class[]):Map (135 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.009174, bonus=1.000000, nodes=405 > 300.000000)
                                                                          @ 9  sun.reflect.annotation.AnnotationParser.parseAnnotations(byte[], ConstantPool, Class):Map (37 bytes)   relevance-based (relevance=3.160494, probability=0.013879, bonus=1.000000, nodes=16 <= 300.000000)
                            @ 87  sun.reflect.annotation.AnnotationType.isInherited():boolean (5 bytes)   inline accessor method (bytecode parsing)
                            @ 120  java.lang.Math.min(int, int):int (11 bytes)   inline method (bytecode parsing)
                 n                                                          @ 1  java.lang.Class.getRawAnnotations():byte[] (0 bytes)   not inlining it is a non-intrinsic native method
                 n                                                          @ 5  java.lang.Class.getConstantPool():ConstantPool (0 bytes)   not inlining it is a non-intrinsic native method
                            @ 4  java.util.Collections.emptyMap():Map (4 bytes)   inline method (bytecode parsing)
                            @ 10  java.nio.ByteBuffer.wrap(byte[]):ByteBuffer (8 bytes)   inline method (bytecode parsing)
                            @ 65  sun.reflect.annotation.AnnotationType.retention():RetentionPolicy (5 bytes)   inline accessor method (bytecode parsing)
                            @ 1  java.util.AbstractMap.<init>():void (5 bytes)   inline method (bytecode parsing)
                                                                                    @ 1  java.util.HashMap.<init>():void (11 bytes)   trivial (relevance=1.000000, probability=0.005504, bonus=1.000000, nodes=8)
                                                                                  @ 4  java.util.LinkedHashMap.<init>():void (15 bytes)   relevance-based (relevance=1.000000, probability=0.005504, bonus=1.000000, nodes=15 <= 300.000000)
                            @ 17  java.nio.ByteOrder.nativeOrder():ByteOrder (4 bytes)   inline method (bytecode parsing)
                                                                                              @ 2  java.nio.Buffer.limit(int):Buffer (65 bytes)   relevance-based (relevance=1.000000, probability=0.005504, bonus=1.000000, nodes=24 <= 300.000000)
                                                                                            @ 2  java.nio.ByteBuffer.limit(int):ByteBuffer (8 bytes)   relevance-based (relevance=1.000000, probability=0.005504, bonus=1.000000, nodes=25 <= 300.000000)
                                                                                          @ 39  java.nio.ByteBuffer.limit(int):Buffer (6 bytes)   relevance-based (relevance=1.000000, probability=0.005504, bonus=1.000000, nodes=26 <= 300.000000)
                                                                                              @ 2  java.nio.Buffer.position(int):Buffer (52 bytes)   relevance-based (relevance=1.000000, probability=0.005504, bonus=1.000000, nodes=14 <= 300.000000)
                                                                                            @ 2  java.nio.ByteBuffer.position(int):ByteBuffer (8 bytes)   relevance-based (relevance=1.000000, probability=0.005504, bonus=1.000000, nodes=15 <= 300.000000)
                                                                                          @ 45  java.nio.ByteBuffer.position(int):Buffer (6 bytes)   relevance-based (relevance=1.022803, probability=0.005504, bonus=1.000000, nodes=16 <= 300.000000)
                                                                                        @ 8  java.nio.Buffer.<init>(int, int, int, int, MemorySegment):void (105 bytes)   relevance-based (relevance=1.000000, probability=0.005504, bonus=1.000000, nodes=52 <= 300.000000)
                                                                                      @ 12  java.nio.ByteBuffer.<init>(int, int, int, int, byte[], int, MemorySegment):void (47 bytes)   relevance-based (relevance=1.000000, probability=0.005504, bonus=1.000000, nodes=63 <= 300.000000)
                                                                                    @ 8  java.nio.HeapByteBuffer.<init>(byte[], int, int, MemorySegment):void (23 bytes)   relevance-based (relevance=1.000000, probability=0.005504, bonus=1.000000, nodes=67 <= 300.000000)
                                                                                  @ 4  java.nio.ByteBuffer.wrap(byte[], int, int):ByteBuffer (21 bytes)   relevance-based (relevance=1.000000, probability=0.005504, bonus=1.000000, nodes=68 <= 300.000000)
                            @ 4  java.nio.Buffer.session():MemorySessionImpl (20 bytes)   inline method (bytecode parsing)
                            @ 18  java.nio.HeapByteBuffer.byteOffset(long):long (7 bytes)   inline method (bytecode parsing)
                            @ 25  jdk.internal.misc.ScopedMemoryAccess.getShortUnaligned(MemorySessionImpl, Object, long, boolean):short (18 bytes)   inline method (bytecode parsing)
                              @ 6  jdk.internal.misc.ScopedMemoryAccess.getShortUnalignedInternal(MemorySessionImpl, Object, long, boolean):short (36 bytes)   inline method (bytecode parsing)
                                @ 15  jdk.internal.misc.Unsafe.getShortUnaligned(Object, long, boolean):short (12 bytes)   inline method (bytecode parsing)
                                                                                    @ 14  java.nio.Buffer.nextGetIndex(int):int (32 bytes)   relevance-based (relevance=1.000000, probability=0.005504, bonus=1.000000, nodes=13 <= 300.000000)
                                                                                    @ 8  jdk.internal.misc.Unsafe.convEndian(boolean, short):short (16 bytes)   relevance-based (relevance=1.000000, probability=0.005504, bonus=1.000000, nodes=20 <= 300.000000)
                                                                                  @ 17  java.nio.HeapByteBuffer.getShort():short (29 bytes)   relevance-based (relevance=1.022803, probability=0.005504, bonus=1.000000, nodes=44 <= 300.000000)
                            @ 19  jdk.internal.reflect.ConstantPool.getUTF8At(int):String (10 bytes)   inline method (bytecode parsing)
                            @ 122  sun.reflect.annotation.AnnotationType.memberTypes():Map (5 bytes)   inline accessor method (bytecode parsing)
                            @ 133  sun.reflect.annotation.AnnotationType.memberDefaults():Map (5 bytes)   inline accessor method (bytecode parsing)
                            @ 172  jdk.internal.reflect.ConstantPool.getUTF8At(int):String (10 bytes)   inline method (bytecode parsing)
                            @ 4  java.nio.Buffer.session():MemorySessionImpl (20 bytes)   inline method (bytecode parsing)
                            @ 18  java.nio.HeapByteBuffer.byteOffset(long):long (7 bytes)   inline method (bytecode parsing)
                            @ 25  jdk.internal.misc.ScopedMemoryAccess.getShortUnaligned(MemorySessionImpl, Object, long, boolean):short (18 bytes)   inline method (bytecode parsing)
                              @ 6  jdk.internal.misc.ScopedMemoryAccess.getShortUnalignedInternal(MemorySessionImpl, Object, long, boolean):short (36 bytes)   inline method (bytecode parsing)
                                @ 15  jdk.internal.misc.Unsafe.getShortUnaligned(Object, long, boolean):short (12 bytes)   inline method (bytecode parsing)
                                                                                      @ 14  java.nio.Buffer.nextGetIndex(int):int (32 bytes)   relevance-based (relevance=1.000000, probability=0.005504, bonus=1.000000, nodes=13 <= 300.000000)
                                                                                      @ 8  jdk.internal.misc.Unsafe.convEndian(boolean, short):short (16 bytes)   relevance-based (relevance=1.000000, probability=0.005504, bonus=1.000000, nodes=20 <= 300.000000)
                                                                                    @ 1  java.nio.HeapByteBuffer.getShort():short (29 bytes)   relevance-based (relevance=1.000000, probability=0.005504, bonus=1.000000, nodes=44 <= 300.000000)
                 n                                                                @ 6  jdk.internal.reflect.ConstantPool.getUTF8At0(Object, int):String (0 bytes)   not inlining it is a non-intrinsic native method
                            @ 14  sun.reflect.generics.parser.SignatureParser.make():SignatureParser (8 bytes)   inline method (bytecode parsing)
                              @ 4  sun.reflect.generics.parser.SignatureParser.<init>():void (5 bytes)   inline method (bytecode parsing)
                            @ 20  sun.reflect.generics.parser.SignatureParser.parseTypeSig(String):TypeSignature (10 bytes)   inline method (bytecode parsing)
                            @ 26  sun.reflect.generics.scope.ClassScope.make(Class):ClassScope (9 bytes)   inline method (bytecode parsing)
                              @ 5  sun.reflect.generics.scope.ClassScope.<init>(Class):void (6 bytes)   inline method (bytecode parsing)
                                @ 2  sun.reflect.generics.scope.AbstractScope.<init>(GenericDeclaration):void (10 bytes)   inline method (bytecode parsing)
                            @ 29  sun.reflect.generics.factory.CoreReflectionFactory.make(GenericDeclaration, Scope):CoreReflectionFactory (10 bytes)   inline method (bytecode parsing)
                            @ 36  sun.reflect.generics.visitor.Reifier.make(GenericsFactory):Reifier (9 bytes)   inline method (bytecode parsing)
                              @ 5  sun.reflect.generics.visitor.Reifier.<init>(GenericsFactory):void (10 bytes)   inline method (bytecode parsing)
                                                                                      @ 2  sun.reflect.generics.parser.SignatureParser.init(String):void (16 bytes)   relevance-based (relevance=1.030610, probability=0.005504, bonus=1.000000, nodes=12 <= 300.000000)
                            @ 126  sun.reflect.generics.parser.SignatureParser.parseFieldTypeSignature():FieldTypeSignature (6 bytes)   inline method (bytecode parsing)
                                                                                            @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.005504, bonus=1.000000, nodes=5)
                                                                                          @ 36  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000000, probability=0.005504, bonus=1.000000, nodes=8)
                                                                                            @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=0.005504, bonus=1.000000, nodes=9)
                            @ 3  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                                                                                            @ 12  java.lang.StringLatin1.charAt(byte[], int):char (15 bytes)   relevance-based (relevance=1.000000, probability=0.005504, bonus=1.000000, nodes=11 <= 300.000000)
                                                                                          @ 50  java.lang.String.charAt(int):char (25 bytes)   relevance-based (relevance=1.000000, probability=0.005504, bonus=1.000000, nodes=16 <= 300.000000)
                                                                                        @ 1  sun.reflect.generics.parser.SignatureParser.current():char (59 bytes)   relevance-based (relevance=1.000000, probability=0.005504, bonus=1.000000, nodes=31 <= 300.000000)
                                                                                              @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.005504, bonus=1.000000, nodes=5)
                                                                                            @ 36  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000000, probability=0.005504, bonus=1.000000, nodes=8)
                                                                                              @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=0.005504, bonus=1.000000, nodes=9)
                            @ 3  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                                                                                              @ 12  java.lang.StringLatin1.charAt(byte[], int):char (15 bytes)   relevance-based (relevance=1.000000, probability=0.005504, bonus=1.000000, nodes=11 <= 300.000000)
                                                                                            @ 50  java.lang.String.charAt(int):char (25 bytes)   relevance-based (relevance=1.000000, probability=0.005504, bonus=1.000000, nodes=16 <= 300.000000)
                                                                                          @ 1  sun.reflect.generics.parser.SignatureParser.current():char (59 bytes)   relevance-based (relevance=1.000000, probability=0.005504, bonus=1.000000, nodes=31 <= 300.000000)
                            @ 114  sun.reflect.generics.tree.ClassTypeSignature.make(List):ClassTypeSignature (9 bytes)   inline method (bytecode parsing)
                              @ 5  sun.reflect.generics.tree.ClassTypeSignature.<init>(List):void (10 bytes)   inline method (bytecode parsing)
                                                                                                @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.005504, bonus=1.000000, nodes=5)
                                                                                              @ 36  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000000, probability=0.005504, bonus=1.000000, nodes=8)
                                                                                                @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=0.005504, bonus=1.000000, nodes=9)
                            @ 3  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                                                                                                @ 12  java.lang.StringLatin1.charAt(byte[], int):char (15 bytes)   relevance-based (relevance=1.000000, probability=0.005504, bonus=1.000000, nodes=11 <= 300.000000)
                                                                                              @ 50  java.lang.String.charAt(int):char (25 bytes)   relevance-based (relevance=1.000000, probability=0.005504, bonus=1.000000, nodes=16 <= 300.000000)
                                                                                            @ 24  sun.reflect.generics.parser.SignatureParser.current():char (59 bytes)   relevance-based (relevance=1.000000, probability=0.005504, bonus=1.000000, nodes=31 <= 300.000000)
                                                                                                @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.005504, bonus=1.000000, nodes=5)
                                                                                              @ 36  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000000, probability=0.005504, bonus=1.000000, nodes=8)
                                                                                            @ 40  sun.reflect.generics.parser.SignatureParser.advance():void (53 bytes)   relevance-based (relevance=1.000000, probability=0.005504, bonus=1.000000, nodes=20 <= 300.000000)
                            @ 1  java.util.AbstractList.<init>():void (10 bytes)   inline method (bytecode parsing)
                              @ 1  java.util.AbstractCollection.<init>():void (5 bytes)   inline method (bytecode parsing)
                                                                                            @ 48  java.util.ArrayList.<init>(int):void (61 bytes)   relevance-based (relevance=1.000000, probability=0.005504, bonus=1.000000, nodes=12 <= 300.000000)
                            @ 1  sun.reflect.generics.parser.SignatureParser.mark():void (9 bytes)   inline method (bytecode parsing)
                            @ 78  sun.reflect.generics.tree.SimpleClassTypeSignature.make(String, boolean, TypeArgument[]):SimpleClassTypeSignature (11 bytes)   inline method (bytecode parsing)
                              @ 7  sun.reflect.generics.tree.SimpleClassTypeSignature.<init>(String, boolean, TypeArgument[]):void (20 bytes)   inline method (bytecode parsing)
                            @ 48  java.lang.Character.isWhitespace(char):boolean (5 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.Character.isWhitespace(int):boolean (9 bytes)   inline method (bytecode parsing)
                                                                                                    @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.005504, bonus=1.000000, nodes=5)
                                                                                                  @ 36  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000000, probability=0.005504, bonus=1.000000, nodes=8)
                                                                                                    @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=0.005504, bonus=1.000000, nodes=9)
                            @ 3  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                                                                                                    @ 12  java.lang.StringLatin1.charAt(byte[], int):char (15 bytes)   relevance-based (relevance=1.000000, probability=0.005504, bonus=1.000000, nodes=11 <= 300.000000)
                                                                                                  @ 50  java.lang.String.charAt(int):char (25 bytes)   relevance-based (relevance=1.000000, probability=0.005504, bonus=1.000000, nodes=16 <= 300.000000)
                                                                                                @ 1  sun.reflect.generics.parser.SignatureParser.current():char (59 bytes)   relevance-based (relevance=1.000000, probability=0.005504, bonus=1.000000, nodes=31 <= 300.000000)
                                                                                                @ 1  java.lang.CharacterData.of(int):CharacterData (136 bytes)   trivial (relevance=1.000000, probability=0.045349, bonus=1.000000, nodes=8)
                                                                                                  @ 2  java.lang.CharacterDataLatin1.getProperties(int):int (11 bytes)   trivial (relevance=1.000000, probability=0.045349, bonus=1.000000, nodes=8)
                                                                                                @ 5  java.lang.CharacterDataLatin1.isWhitespace(int):boolean (23 bytes)   relevance-based (relevance=1.000000, probability=0.045349, bonus=1.000000, nodes=13 <= 300.000000)
                                                                                                    @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.045349, bonus=1.000000, nodes=5)
                                                                                                  @ 36  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000000, probability=0.045349, bonus=1.000000, nodes=8)
                                                                                                @ 55  sun.reflect.generics.parser.SignatureParser.advance():void (53 bytes)   relevance-based (relevance=1.000000, probability=0.045349, bonus=1.000000, nodes=20 <= 300.000000)
                                                                                                    @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.045349, bonus=1.000000, nodes=5)
                                                                                                  @ 36  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000000, probability=0.045349, bonus=1.000000, nodes=8)
                            @ 81  java.lang.Integer.rotateLeft(int, int):int (9 bytes)   inline method (bytecode parsing)
                                                                                                    @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=0.045349, bonus=1.000000, nodes=9)
                            @ 3  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                            @ 142  java.lang.Integer.rotateLeft(int, int):int (9 bytes)   inline method (bytecode parsing)
                            @ 187  java.lang.Integer.rotateLeft(int, int):int (9 bytes)   inline method (bytecode parsing)
                                                                                                    @ 12  java.lang.StringLatin1.charAt(byte[], int):char (15 bytes)   relevance-based (relevance=1.000000, probability=0.045349, bonus=1.000000, nodes=11 <= 300.000000)
                            @ 217  java.lang.Integer.rotateLeft(int, int):int (9 bytes)   inline method (bytecode parsing)
                                                                                                  @ 50  java.lang.String.charAt(int):char (25 bytes)   relevance-based (relevance=1.000000, probability=0.045349, bonus=1.000000, nodes=16 <= 300.000000)
                            @ 257  java.lang.Integer.rotateLeft(int, int):int (9 bytes)   inline method (bytecode parsing)
                                                                                                @ 59  sun.reflect.generics.parser.SignatureParser.current():char (59 bytes)   relevance-based (relevance=1.000000, probability=0.045349, bonus=1.000000, nodes=31 <= 300.000000)
                            @ 287  java.lang.Integer.rotateLeft(int, int):int (9 bytes)   inline method (bytecode parsing)
                            @ 336  java.lang.Integer.rotateLeft(int, int):int (9 bytes)   inline method (bytecode parsing)
                                                                                              @ 5  sun.reflect.generics.parser.SignatureParser.skipIdentifier():void (67 bytes)   relevance-based (relevance=1.000000, probability=0.005504, bonus=1.000000, nodes=105 <= 300.000000)
                            @ 366  java.lang.Integer.rotateLeft(int, int):int (9 bytes)   inline method (bytecode parsing)
                            @ 406  java.lang.Integer.rotateLeft(int, int):int (9 bytes)   inline method (bytecode parsing)
                                                                                                  @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.030603, bonus=1.000000, nodes=5)
                                                                                                @ 36  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000000, probability=0.030603, bonus=1.000000, nodes=8)
                                                                                                  @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=0.030603, bonus=1.000000, nodes=9)
                            @ 3  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                                                                                                  @ 12  java.lang.StringLatin1.charAt(byte[], int):char (15 bytes)   relevance-based (relevance=1.000000, probability=0.030603, bonus=1.000000, nodes=11 <= 300.000000)
                                                                                                @ 50  java.lang.String.charAt(int):char (25 bytes)   relevance-based (relevance=1.000000, probability=0.030603, bonus=1.000000, nodes=16 <= 300.000000)
                                                                                              @ 9  sun.reflect.generics.parser.SignatureParser.current():char (59 bytes)   relevance-based (relevance=1.219317, probability=0.030603, bonus=1.000000, nodes=31 <= 300.000000)
                                                                                                    @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.005504, bonus=1.000000, nodes=5)
                                                                                                  @ 1  java.lang.String.length():int (11 bytes)   trivial (relevance=1.179302, probability=0.005504, bonus=1.000000, nodes=8)
                                                                                                    @ 6  jdk.internal.util.Preconditions.checkFromToIndex(int, int, int, BiFunction):int (24 bytes)   relevance-based (relevance=1.000000, probability=0.005504, bonus=1.000000, nodes=14 <= 300.000000)
                                                                                                  @ 8  java.lang.String.checkBoundsBeginEnd(int, int, int):void (11 bytes)   relevance-based (relevance=1.179302, probability=0.005504, bonus=1.000000, nodes=13 <= 300.000000)
                                                                                                  @ 28  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.098893, probability=0.005129, bonus=1.000000, nodes=9)
                            @ 20  java.lang.String.<init>(byte[], byte):void (15 bytes)   inline method (bytecode parsing)
                            @ 13  java.util.Arrays.copyOfRangeByte(byte[], int, int):byte[] (33 bytes)   inline method (bytecode parsing)
                              @ 2  java.util.Arrays.checkLength(int, int):void (38 bytes)   inline method (bytecode parsing)
                                                                                                      @ 24  java.lang.Math.min(int, int):int (11 bytes)   trivial (relevance=1.556665, probability=0.004105, bonus=1.000000, nodes=7)
                                                                                                    @ 16  java.util.Arrays.copyOfRange(byte[], int, int):byte[] (25 bytes)   relevance-based (relevance=1.000000, probability=0.005127, bonus=1.000000, nodes=44 <= 300.000000)
                                                                                                  @ 41  java.lang.StringLatin1.newString(byte[], int, int):String (24 bytes)   relevance-based (relevance=1.098811, probability=0.005129, bonus=1.000000, nodes=62 <= 300.000000)
                            @ 31  java.lang.String.<init>(byte[], byte):void (15 bytes)   inline method (bytecode parsing)
                            @ 54  java.lang.String.<init>(byte[], byte):void (15 bytes)   inline method (bytecode parsing)
                                                                                                  @ 54  java.lang.StringUTF16.newString(byte[], int, int):String (58 bytes)   not inlining relevance-based (relevance=0.000082, probability=0.000000, bonus=1.000000, nodes=41 > 0.024677)
                                                                                                @ 12  java.lang.String.substring(int, int):String (58 bytes)   relevance-based (relevance=1.000000, probability=0.005504, bonus=1.000000, nodes=98 <= 300.000000)
                                                                                              @ 29  sun.reflect.generics.parser.SignatureParser.markToCurrent():String (16 bytes)   relevance-based (relevance=1.000000, probability=0.005504, bonus=1.000000, nodes=103 <= 300.000000)
                                                                                                @ 6  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000139, probability=0.005504, bonus=1.000000, nodes=9)
                            @ 49  java.lang.StringConcatHelper.newArray(long):byte[] (40 bytes)   inline method (bytecode parsing)
                            @ 123  java.lang.String.<init>(byte[], byte):void (15 bytes)   inline method (bytecode parsing)
                                                                                                @ 18  java.lang.StringLatin1.replace(byte[], char, char):String (198 bytes)   not inlining too large previous low-level graph (low-level-nodes: 345, relevance=1.000139, probability=0.005504, bonus=1.000000, nodes=96)
                                                                                              @ 36  java.lang.String.replace(char, char):String (42 bytes)   relevance-based (relevance=0.999993, probability=0.005504, bonus=1.000000, nodes=19 <= 299.997763)
                                                                                                  @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=0.999993, probability=0.005504, bonus=1.000000, nodes=5)
                                                                                                @ 36  java.lang.String.length():int (11 bytes)   trivial (relevance=0.999993, probability=0.005504, bonus=1.000000, nodes=8)
                                                                                                  @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=0.999993, probability=0.005504, bonus=1.000000, nodes=9)
                            @ 3  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                                                                                                  @ 12  java.lang.StringLatin1.charAt(byte[], int):char (15 bytes)   relevance-based (relevance=0.999993, probability=0.005504, bonus=1.000000, nodes=11 <= 299.997763)
                                                                                                @ 50  java.lang.String.charAt(int):char (25 bytes)   relevance-based (relevance=0.999993, probability=0.005504, bonus=1.000000, nodes=16 <= 299.997763)
                                                                                              @ 41  sun.reflect.generics.parser.SignatureParser.current():char (59 bytes)   relevance-based (relevance=0.999993, probability=0.005504, bonus=1.000000, nodes=31 <= 299.997763)
                                                                                            @ 54  sun.reflect.generics.parser.SignatureParser.parsePackageNameAndSimpleClassTypeSignature():SimpleClassTypeSignature (119 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.005504, bonus=1.000000, nodes=311 > 300.000000)
                                                                                            @ 57  java.util.ArrayList.add(Object):boolean (25 bytes)   not inlining too large previous low-level graph (low-level-nodes: 472, relevance=1.000000, probability=0.005504, bonus=1.000000, nodes=15)
                                                                                                  @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.005504, bonus=1.000000, nodes=5)
                                                                                                @ 36  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000000, probability=0.005504, bonus=1.000000, nodes=8)
                                                                                                  @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=0.005504, bonus=1.000000, nodes=9)
                            @ 3  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                                                                                                  @ 12  java.lang.StringLatin1.charAt(byte[], int):char (15 bytes)   relevance-based (relevance=1.000000, probability=0.005504, bonus=1.000000, nodes=11 <= 300.000000)
                                                                                                @ 50  java.lang.String.charAt(int):char (25 bytes)   relevance-based (relevance=1.000000, probability=0.005504, bonus=1.000000, nodes=16 <= 300.000000)
                                                                                              @ 1  sun.reflect.generics.parser.SignatureParser.current():char (59 bytes)   relevance-based (relevance=1.000000, probability=0.005504, bonus=1.000000, nodes=31 <= 300.000000)
                                                                                            @ 65  sun.reflect.generics.parser.SignatureParser.parseClassTypeSignatureSuffix(List):void (29 bytes)   relevance-based (relevance=1.000000, probability=0.005504, bonus=1.000000, nodes=35 <= 300.000000)
                                                                                                @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.005504, bonus=1.000000, nodes=5)
                                                                                              @ 36  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000000, probability=0.005504, bonus=1.000000, nodes=8)
                                                                                                @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=0.005504, bonus=1.000000, nodes=9)
                            @ 3  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                                                                                                @ 12  java.lang.StringLatin1.charAt(byte[], int):char (15 bytes)   relevance-based (relevance=1.000000, probability=0.005504, bonus=1.000000, nodes=11 <= 300.000000)
                                                                                              @ 50  java.lang.String.charAt(int):char (25 bytes)   relevance-based (relevance=1.000000, probability=0.005504, bonus=1.000000, nodes=16 <= 300.000000)
                                                                                            @ 69  sun.reflect.generics.parser.SignatureParser.current():char (59 bytes)   relevance-based (relevance=1.000000, probability=0.005504, bonus=1.000000, nodes=31 <= 300.000000)
                                                                                                @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.005504, bonus=1.000000, nodes=5)
                                                                                              @ 36  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000000, probability=0.005504, bonus=1.000000, nodes=8)
                                                                                            @ 110  sun.reflect.generics.parser.SignatureParser.advance():void (53 bytes)   relevance-based (relevance=1.000000, probability=0.005504, bonus=1.000000, nodes=20 <= 300.000000)
                                                                                          @ 41  sun.reflect.generics.parser.SignatureParser.parseClassTypeSignature():ClassTypeSignature (118 bytes)   relevance-based (relevance=1.000000, probability=0.005504, bonus=1.000000, nodes=144 <= 300.000000)
                                                                                        @ 2  sun.reflect.generics.parser.SignatureParser.parseFieldTypeSignature(boolean):FieldTypeSignature (73 bytes)   relevance-based (relevance=1.000000, probability=0.005504, bonus=1.000000, nodes=174 <= 300.000000)
                                                                                      @ 6  sun.reflect.generics.parser.SignatureParser.parseTypeSignature():TypeSignature (130 bytes)   relevance-based (relevance=1.030610, probability=0.005504, bonus=1.000000, nodes=205 <= 300.000000)
                                                                                      @ 6  sun.reflect.generics.factory.CoreReflectionFactory.<init>(GenericDeclaration, Scope):void (15 bytes)   relevance-based (relevance=1.030610, probability=0.005504, bonus=1.000000, nodes=11 <= 300.000000)
                            @ 1  sun.reflect.generics.tree.ClassTypeSignature.getPath():List (5 bytes)   inline accessor method (bytecode parsing)
                            @ 52  sun.reflect.generics.tree.SimpleClassTypeSignature.getName():String (5 bytes)   inline accessor method (bytecode parsing)
                            @ 55  java.lang.StringBuilder.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                            @ 62  sun.reflect.generics.tree.SimpleClassTypeSignature.getDollar():boolean (5 bytes)   inline accessor method (bytecode parsing)
                            @ 165  sun.reflect.generics.visitor.Reifier.getFactory():GenericsFactory (5 bytes)   inline accessor method (bytecode parsing)
                            @ 170  java.lang.StringBuilder.toString():String (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.String.<init>(StringBuilder):void (7 bytes)   inline method (bytecode parsing)
                            @ 182  sun.reflect.generics.tree.SimpleClassTypeSignature.getTypeArguments():TypeArgument[] (5 bytes)   inline accessor method (bytecode parsing)
                                                                                            @ 5  java.util.ArrayList$Itr.<init>(ArrayList):void (26 bytes)   relevance-based (relevance=1.000000, probability=0.005504, bonus=1.000000, nodes=15 <= 300.000000)
                                                                                          @ 29  java.util.ArrayList.iterator():Iterator (9 bytes)   relevance-based (relevance=1.000000, probability=0.005504, bonus=1.000000, nodes=16 <= 300.000000)
                                                                                            @ 1  java.util.ArrayList$Itr.checkForComodification():void (23 bytes)   trivial (relevance=1.000000, probability=0.005504, bonus=1.000000, nodes=9)
                                                                                          @ 36  java.util.ArrayList$Itr.next():Object (66 bytes)   relevance-based (relevance=1.000000, probability=0.005504, bonus=1.000000, nodes=25 <= 300.000000)
                                                                                              @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.005504, bonus=1.000000, nodes=5)
                                                                                            @ 5  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000000, probability=0.005504, bonus=1.000000, nodes=8)
                                                                                            @ 26  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.005504, bonus=1.000000, nodes=5)
                            @ 2  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                                                                                              @ 2  java.lang.AbstractStringBuilder.append(String):AbstractStringBuilder (45 bytes)   not inlining too large previous low-level graph (low-level-nodes: 368, relevance=1.000000, probability=0.005504, bonus=1.000000, nodes=23)
                                                                                            @ 58  java.lang.StringBuilder.append(String):AbstractStringBuilder (6 bytes)   trivial (relevance=1.000000, probability=0.005504, bonus=1.000000, nodes=9)
                                                                                          @ 2  java.lang.AbstractStringBuilder.<init>(String):void (63 bytes)   relevance-based (relevance=1.000000, probability=0.005504, bonus=1.000000, nodes=33 <= 300.000000)
                                                                                          @ 68  java.util.ArrayList$Itr.hasNext():boolean (20 bytes)   relevance-based (relevance=1.000000, probability=0.005504, bonus=1.000000, nodes=11 <= 300.000000)
                            @ 5  java.lang.AbstractStringBuilder.getValue():byte[] (5 bytes)   inline accessor method (bytecode parsing)
                                                                                          @ 3  java.lang.String.<init>(AbstractStringBuilder, Void):void (99 bytes)   not inlining too large previous low-level graph (low-level-nodes: 376, relevance=1.000000, probability=0.005504, bonus=1.000000, nodes=41)
                            @ 17  java.lang.Class.getClassLoader():ClassLoader (28 bytes)   inline method (bytecode parsing)
                                                                                                @ 0  java.lang.System.allowSecurityManager():boolean (13 bytes)   trivial (relevance=1.000769, probability=0.003552, bonus=1.000000, nodes=8)
                                                                                              @ 11  java.lang.System.getSecurityManager():SecurityManager (12 bytes)   relevance-based (relevance=1.000000, probability=0.003552, bonus=1.000000, nodes=14 <= 300.000000)
                                                                                            @ 3  sun.reflect.generics.factory.CoreReflectionFactory.getDeclsLoader():ClassLoader (85 bytes)   relevance-based (relevance=1.000000, probability=0.005504, bonus=1.000000, nodes=42 <= 300.000000)
                                                                                                @ 0  java.lang.System.allowSecurityManager():boolean (13 bytes)   trivial (relevance=1.000769, probability=0.005504, bonus=1.000000, nodes=8)
                                                                                              @ 2  java.lang.System.getSecurityManager():SecurityManager (12 bytes)   relevance-based (relevance=1.000000, probability=0.005504, bonus=1.000000, nodes=14 <= 300.000000)
                                                                                                  @ 0  java.lang.System.allowSecurityManager():boolean (13 bytes)   trivial (relevance=1.000769, probability=0.005504, bonus=1.000000, nodes=8)
                                                                                                @ 0  java.lang.System.getSecurityManager():SecurityManager (12 bytes)   relevance-based (relevance=1.000000, probability=0.005504, bonus=1.000000, nodes=14 <= 300.000000)
                 n                                                                            @ 37  java.lang.Class.forName0(String, boolean, ClassLoader, Class):Class (0 bytes)   not inlining it is a non-intrinsic native method
                                                                                              @ 20  java.lang.Class.forName(String, boolean, ClassLoader, Class):Class (41 bytes)   relevance-based (relevance=1.000769, probability=0.005504, bonus=1.000000, nodes=27 <= 300.000000)
                                                                                            @ 6  java.lang.Class.forName(String, boolean, ClassLoader):Class (24 bytes)   relevance-based (relevance=1.551003, probability=0.005504, bonus=1.000000, nodes=44 <= 300.000000)
                                                                                          @ 173  sun.reflect.generics.factory.CoreReflectionFactory.makeNamedType(String):Type (21 bytes)   relevance-based (relevance=1.000000, probability=0.005504, bonus=1.000000, nodes=82 <= 300.000000)
                                                                                        @ 2  sun.reflect.generics.visitor.Reifier.visitClassTypeSignature(ClassTypeSignature):void (381 bytes)   relevance-based (relevance=1.000000, probability=0.005504, bonus=1.000000, nodes=184 <= 300.000000)
                                                                                      @ 44  sun.reflect.generics.tree.ClassTypeSignature.accept(TypeTreeVisitor):void (8 bytes)   relevance-based (relevance=1.030610, probability=0.005504, bonus=1.000000, nodes=185 <= 300.000000)
                                                                                    @ 27  sun.reflect.annotation.AnnotationParser.parseSig(String, Class):Class (62 bytes)   not inlining relevance-based (relevance=1.000170, probability=0.005504, bonus=1.000000, nodes=456 > 300.000000)
                            @ 0  jdk.internal.access.SharedSecrets.getJavaLangAccess():JavaLangAccess (4 bytes)   inline method (bytecode parsing)
                            @ 1  java.lang.Class.getAnnotationType():AnnotationType (5 bytes)   inline accessor method (bytecode parsing)
                                                                                      @ 6  java.lang.System$2.getAnnotationType(Class):AnnotationType (5 bytes)   relevance-based (relevance=1.002802, probability=0.005504, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 17  java.lang.IllegalArgumentException.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  java.lang.RuntimeException.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                                @ 2  java.lang.Exception.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                            @ 27  sun.reflect.annotation.AnnotationType$1.<init>(AnnotationType, Class):void (10 bytes)   inline method (bytecode parsing)
                            @ 30  java.security.AccessController.doPrivileged(PrivilegedAction):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.security.AccessController.executePrivileged(PrivilegedAction, AccessControlContext, Class):Object (65 bytes)   inline method (bytecode parsing)
                                @ 29  sun.reflect.annotation.AnnotationType$1.run():Object (5 bytes)   inline method (bytecode parsing)
                                  @ 1  sun.reflect.annotation.AnnotationType$1.run():Method[] (8 bytes)   inline method (bytecode parsing)
                            @ 59  java.util.HashMap.<init>(int):void (8 bytes)   inline method (bytecode parsing)
                            @ 105  java.lang.reflect.Method.getModifiers():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 116  java.lang.reflect.Method.getModifiers():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 127  java.lang.reflect.Method.isSynthetic():boolean (5 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.reflect.Executable.isSynthetic():boolean (8 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.reflect.Method.getModifiers():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 135  java.lang.reflect.Method.getParameterCount():int (6 bytes)   inline method (bytecode parsing)
                            @ 171  java.lang.reflect.Method.getName():String (5 bytes)   inline accessor method (bytecode parsing)
                            @ 178  java.lang.reflect.Method.getReturnType():Class (5 bytes)   inline accessor method (bytecode parsing)
                            @ 149  java.lang.StringBuilder.<init>():void (7 bytes)   inline method (bytecode parsing)
                            @ 154  java.lang.StringBuilder.append(Object):StringBuilder (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 159  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 162  java.lang.StringBuilder.toString():String (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.String.<init>(StringBuilder):void (7 bytes)   inline method (bytecode parsing)
                            @ 165  java.lang.IllegalArgumentException.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  java.lang.RuntimeException.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                                @ 2  java.lang.Exception.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                            @ 258  jdk.internal.access.SharedSecrets.getJavaLangAccess():JavaLangAccess (4 bytes)   inline method (bytecode parsing)
                                                                                      @ 21  sun.reflect.annotation.AnnotationType.<init>(Class):void (361 bytes)   not inlining relevance-based (relevance=0.002802, probability=0.000015, bonus=1.000000, nodes=244 > 0.840650)
                            @ 3  java.lang.Class.casAnnotationType(AnnotationType, AnnotationType):boolean (7 bytes)   inline method (bytecode parsing)
                                                                                      @ 29  java.lang.System$2.casAnnotationType(Class, AnnotationType, AnnotationType):boolean (7 bytes)   not inlining relevance-based (relevance=0.002802, probability=0.000015, bonus=1.000000, nodes=13 > 0.840650)
                                                                                    @ 103  sun.reflect.annotation.AnnotationType.getInstance(Class):AnnotationType (65 bytes)   relevance-based (relevance=1.000170, probability=0.005504, bonus=1.000000, nodes=37 <= 300.000000)
                            @ 1  java.util.AbstractMap.<init>():void (5 bytes)   inline method (bytecode parsing)
                                                                                      @ 1  java.util.HashMap.<init>():void (11 bytes)   trivial (relevance=1.000000, probability=0.005504, bonus=1.000000, nodes=8)
                                                                                        @ 4  java.util.Map.size():int (0 bytes)   not inlining no type profile exists
                                                                                        @ 1  java.util.HashMap.size():int (5 bytes)   relevance-based (relevance=1.637394, probability=0.005504, bonus=1.000000, nodes=13 <= 300.000000)
                                                                                        @ 62  java.util.HashMap.tableSizeFor(int):int (32 bytes)   relevance-based (relevance=0.269454, probability=0.001240, bonus=1.000000, nodes=23 <= 80.836093)
                            @ 15  java.util.HashMap$EntrySet.<init>(HashMap):void (10 bytes)   inline method (bytecode parsing)
                              @ 6  java.util.AbstractSet.<init>():void (5 bytes)   inline method (bytecode parsing)
                                @ 1  java.util.AbstractCollection.<init>():void (5 bytes)   inline method (bytecode parsing)
                            @ 21  java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet.<init>(Set):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  java.util.Collections$UnmodifiableSet.<init>(Set):void (6 bytes)   inline method (bytecode parsing)
                                                                                        @ 16  java.util.Map.entrySet():Set (0 bytes)   not inlining no type profile exists
                                                                                          @ 2  java.util.Collections$UnmodifiableCollection.<init>(Collection):void (22 bytes)   relevance-based (relevance=0.338003, probability=0.000451, bonus=1.000000, nodes=10 <= 101.400946)
                                                                                        @ 98  java.util.HashMap.entrySet():Set (27 bytes)   relevance-based (relevance=0.465646, probability=0.002143, bonus=1.000000, nodes=50 <= 139.693709)
                            @ 8  java.util.HashMap$EntryIterator.<init>(HashMap):void (6 bytes)   inline method (bytecode parsing)
                                                                                          @ 17  java.util.Collection.iterator():Iterator (0 bytes)   not inlining no type profile exists
                                                                                          @ 5  java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1.<init>(Collections$UnmodifiableMap$UnmodifiableEntrySet):void (26 bytes)   relevance-based (relevance=0.338003, probability=0.000901, bonus=1.000000, nodes=15 <= 101.400946)
                                                                                          @ 2  java.util.HashMap$HashIterator.<init>(HashMap):void (79 bytes)   not inlining too large previous low-level graph (low-level-nodes: 409, relevance=0.465646, probability=0.001242, bonus=1.000000, nodes=58)
                                                                                        @ 103  java.util.HashMap$EntrySet.iterator():Iterator (12 bytes)   relevance-based (relevance=0.465646, probability=0.002143, bonus=1.000000, nodes=26 <= 139.693709)
                                                                                          @ 4  java.util.HashMap$HashIterator.hasNext():boolean (13 bytes)   trivial (relevance=0.576359, probability=0.006308, bonus=1.000000, nodes=9)
                                                                                        @ 112  java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1.hasNext():boolean (10 bytes)   relevance-based (relevance=0.576359, probability=0.011155, bonus=1.000000, nodes=27 <= 172.907803)
                            @ 1  java.util.HashMap$EntryIterator.next():Map$Entry (5 bytes)   inline method (bytecode parsing)
                                                                                          @ 1  java.util.HashMap$HashIterator.nextNode():HashMap$Node (100 bytes)   not inlining too large previous low-level graph (low-level-nodes: 450, relevance=0.443472, probability=0.003605, bonus=1.000000, nodes=53)
                            @ 1  java.util.HashMap$EntryIterator.next():Map$Entry (5 bytes)   inline method (bytecode parsing)
                                                                                              @ 1  java.util.HashMap$HashIterator.nextNode():HashMap$Node (100 bytes)   not inlining too large previous low-level graph (low-level-nodes: 450, relevance=0.665208, probability=0.005407, bonus=1.000000, nodes=53)
                                                                                            @ 8  java.util.HashMap$EntryIterator.next():Object (5 bytes)   trivial (relevance=0.665208, probability=0.005407, bonus=1.000000, nodes=8)
                            @ 6  java.util.Objects.requireNonNull(Object):Object (14 bytes)   inline method (bytecode parsing)
                                                                                            @ 16  java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry.<init>(Map$Entry):void (16 bytes)   trivial (relevance=0.665208, probability=0.005407, bonus=1.000000, nodes=7)
                                                                                          @ 1  java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1.next():Map$Entry (20 bytes)   relevance-based (relevance=0.665208, probability=0.005407, bonus=1.000000, nodes=28 <= 199.562441)
                                                                                        @ 122  java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1.next():Object (5 bytes)   relevance-based (relevance=0.665208, probability=0.009012, bonus=1.000000, nodes=37 <= 199.562441)
                                                                                          @ 4  java.util.HashMap$Node.getKey():Object (5 bytes)   trivial (relevance=0.665208, probability=0.005407, bonus=1.000000, nodes=5)
                                                                                        @ 134  java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry.getKey():Object (10 bytes)   relevance-based (relevance=0.665208, probability=0.009012, bonus=1.000000, nodes=19 <= 199.562441)
                                                                                          @ 4  java.util.HashMap$Node.getValue():Object (5 bytes)   trivial (relevance=0.665208, probability=0.005407, bonus=1.000000, nodes=5)
                                                                                        @ 143  java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry.getValue():Object (10 bytes)   relevance-based (relevance=0.665208, probability=0.009012, bonus=1.000000, nodes=19 <= 199.562441)
                                                                                      @ 17  java.util.HashMap.putMapEntries(Map, boolean):void (170 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.005504, bonus=1.000000, nodes=316 > 300.000000)
                                                                                    @ 136  java.util.LinkedHashMap.<init>(Map):void (21 bytes)   relevance-based (relevance=1.000170, probability=0.005504, bonus=1.000000, nodes=19 <= 300.000000)
                            @ 4  java.nio.Buffer.session():MemorySessionImpl (20 bytes)   inline method (bytecode parsing)
                            @ 18  java.nio.HeapByteBuffer.byteOffset(long):long (7 bytes)   inline method (bytecode parsing)
                            @ 25  jdk.internal.misc.ScopedMemoryAccess.getShortUnaligned(MemorySessionImpl, Object, long, boolean):short (18 bytes)   inline method (bytecode parsing)
                              @ 6  jdk.internal.misc.ScopedMemoryAccess.getShortUnalignedInternal(MemorySessionImpl, Object, long, boolean):short (36 bytes)   inline method (bytecode parsing)
                                @ 15  jdk.internal.misc.Unsafe.getShortUnaligned(Object, long, boolean):short (12 bytes)   inline method (bytecode parsing)
                                                                                      @ 14  java.nio.Buffer.nextGetIndex(int):int (32 bytes)   relevance-based (relevance=1.000000, probability=0.005504, bonus=1.000000, nodes=13 <= 300.000000)
                                                                                      @ 8  jdk.internal.misc.Unsafe.convEndian(boolean, short):short (16 bytes)   relevance-based (relevance=1.000000, probability=0.005504, bonus=1.000000, nodes=20 <= 300.000000)
                                                                                    @ 142  java.nio.HeapByteBuffer.getShort():short (29 bytes)   relevance-based (relevance=1.000170, probability=0.005504, bonus=1.000000, nodes=44 <= 300.000000)
                            @ 9  java.security.AccessController.doPrivileged(PrivilegedAction):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.security.AccessController.executePrivileged(PrivilegedAction, AccessControlContext, Class):Object (65 bytes)   inline method (bytecode parsing)
                                @ 29  sun.reflect.annotation.AnnotationParser$1.run():Object (5 bytes)   inline method (bytecode parsing)
                                                                                      @ 6  sun.reflect.annotation.AnnotationParser$1.<init>(Class, Map):void (15 bytes)   relevance-based (relevance=1.000000, probability=0.005504, bonus=1.000000, nodes=11 <= 300.000000)
                            @ 4  java.lang.Class.getClassLoader():ClassLoader (28 bytes)   inline method (bytecode parsing)
                                                                                          @ 0  java.lang.System.allowSecurityManager():boolean (13 bytes)   trivial (relevance=1.000769, probability=0.003552, bonus=1.000000, nodes=8)
                                                                                        @ 11  java.lang.System.getSecurityManager():SecurityManager (12 bytes)   relevance-based (relevance=1.000000, probability=0.003552, bonus=1.000000, nodes=14 <= 300.000000)
                            @ 5  java.lang.Class.getInterfaces():Class[] (6 bytes)   inline method (bytecode parsing)
                            @ 1  java.lang.ref.Reference.get():Object (5 bytes)   inline accessor method (bytecode parsing)
                                                                                              @ 15  java.lang.ref.SoftReference.get():Object (29 bytes)   relevance-based (relevance=1.000000, probability=0.005466, bonus=1.000000, nodes=20 <= 300.000000)
                            @ 5  java.lang.Class$ReflectionData.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                                                                                              @ 39  java.lang.Class.newReflectionData(SoftReference, int):Class$ReflectionData (66 bytes)   not inlining relevance-based (relevance=0.007162, probability=0.000038, bonus=1.000000, nodes=61 > 2.148563)
                                                                                            @ 1  java.lang.Class.reflectionData():Class$ReflectionData (43 bytes)   relevance-based (relevance=1.004912, probability=0.005504, bonus=1.000000, nodes=45 <= 300.000000)
                 n                                                                        @ 24  java.lang.Class.getInterfaces0():Class[] (0 bytes)   not inlining it is a non-intrinsic native method
                                                                                          @ 2  java.lang.Class.getInterfaces(boolean):Class[] (49 bytes)   relevance-based (relevance=1.000000, probability=0.005504, bonus=1.000000, nodes=75 <= 300.000000)
                                                                                          @ 10  java.lang.Class.isAnnotation():boolean (17 bytes)   relevance-based (relevance=1.027724, probability=0.005504, bonus=1.000000, nodes=23 <= 300.000000)
                                                                                        @ 30  sun.reflect.annotation.AnnotationInvocationHandler.<init>(Class, Map):void (71 bytes)   relevance-based (relevance=1.551003, probability=0.005504, bonus=1.000000, nodes=116 <= 300.000000)
                            @ 1  java.util.Objects.requireNonNull(Object):Object (14 bytes)   inline method (bytecode parsing)
                                                                                            @ 0  java.lang.System.allowSecurityManager():boolean (13 bytes)   trivial (relevance=1.000769, probability=0.005504, bonus=1.000000, nodes=8)
                                                                                          @ 5  java.lang.System.getSecurityManager():SecurityManager (12 bytes)   relevance-based (relevance=1.000000, probability=0.005504, bonus=1.000000, nodes=14 <= 300.000000)
                            @ 31  jdk.internal.loader.AbstractClassLoaderValue.sub(Object):AbstractClassLoaderValue$Sub (10 bytes)   inline method (bytecode parsing)
                              @ 6  jdk.internal.loader.AbstractClassLoaderValue$Sub.<init>(AbstractClassLoaderValue, Object):void (15 bytes)   inline method (bytecode parsing)
                                @ 6  jdk.internal.loader.AbstractClassLoaderValue.<init>():void (5 bytes)   inline method (bytecode parsing)
                            @ 35  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object):Object (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.lang.invoke.LambdaForm$MH/0x00007f45e0000800.invoke(Object):Object (8 bytes)   inline method (bytecode parsing)
                            @ 30  java.util.concurrent.ConcurrentHashMap.putIfAbsent(Object, Object):Object (8 bytes)   inline method (bytecode parsing)
                            @ 4  jdk.internal.loader.BootLoader.getClassLoaderValueMap():ConcurrentHashMap (4 bytes)   inline method (bytecode parsing)
                            @ 14  java.lang.System$2.createOrGetClassLoaderValueMap(ClassLoader):ConcurrentHashMap (5 bytes)   inline method (bytecode parsing)
                                                                                                @ 1  java.lang.ClassLoader.createOrGetClassLoaderValueMap():ConcurrentHashMap (37 bytes)   trivial (relevance=1.000000, probability=0.005467, bonus=1.000000, nodes=9)
                                                                                              @ 1  jdk.internal.loader.AbstractClassLoaderValue.map(ClassLoader):ConcurrentHashMap (20 bytes)   relevance-based (relevance=1.000000, probability=0.005504, bonus=1.000000, nodes=23 <= 300.000000)
                            @ 20  java.util.concurrent.ConcurrentHashMap.spread(int):int (10 bytes)   inline method (bytecode parsing)
                                                                                              @ 4  java.util.concurrent.ConcurrentHashMap.putVal(Object, Object, boolean):Object (432 bytes)   not inlining relevance-based (relevance=0.002196, probability=0.000012, bonus=1.000000, nodes=181 > 0.658858)
                            @ 4  java.util.concurrent.ConcurrentHashMap.spread(int):int (10 bytes)   inline method (bytecode parsing)
                            @ 3  jdk.internal.loader.AbstractClassLoaderValue$Sub.parent():AbstractClassLoaderValue (5 bytes)   inline accessor method (bytecode parsing)
                 n                                                                                @ 6  java.lang.Object.hashCode():int (0 bytes)   trivial (relevance=1.000000, probability=0.005504, bonus=1.000000, nodes=5)
                            @ 4  java.lang.Long.hashCode(long):int (8 bytes)   inline method (bytecode parsing)
                            @ 17  java.lang.NullPointerException.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  java.lang.RuntimeException.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                                @ 2  java.lang.Exception.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                                                                                                      @ 1  jdk.vm.ci.hotspot.HotSpotResolvedJavaMethodImpl.getMethodPointer():long (23 bytes)   not inlining relevance-based (relevance=0.031228, probability=0.000157, bonus=1.000000, nodes=21 > 9.368346)
                                                                                                          @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=0.124911, probability=0.000039, bonus=1.000000, nodes=5)
                                                                                                        @ 9  java.lang.String.length():int (11 bytes)   trivial (relevance=0.124911, probability=0.000039, bonus=1.000000, nodes=8)
                                                                                                      @ 14  java.net.URI.hashIgnoringCase(int, String):int (45 bytes)   not inlining relevance-based (relevance=0.124911, probability=0.000079, bonus=1.000000, nodes=40 > 37.473385)
                            @ 9  java.lang.String.indexOf(int):int (7 bytes)   inline method (bytecode parsing)
                                                                                                          @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=0.249823, probability=0.000039, bonus=1.000000, nodes=9)
                                                                                                            @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=0.249823, probability=0.000039, bonus=1.000000, nodes=5)
                                                                                                          @ 14  java.lang.String.length():int (11 bytes)   trivial (relevance=0.249823, probability=0.000039, bonus=1.000000, nodes=8)
                            @ 11  java.lang.Math.max(int, int):int (11 bytes)   inline method (bytecode parsing)
                                                                                                            @ 1  java.lang.StringLatin1.canEncode(int):boolean (13 bytes)   trivial (relevance=0.249828, probability=0.000039, bonus=1.000000, nodes=5)
                                                                                                            @ 18  java.lang.Math.min(int, int):int (11 bytes)   trivial (relevance=0.249828, probability=0.000039, bonus=1.000000, nodes=7)
                                                                                                          @ 17  java.lang.StringLatin1.indexOf(byte[], int, int, int):int (37 bytes)   relevance-based (relevance=0.249823, probability=0.000039, bonus=1.000000, nodes=18 <= 74.946771)
                                                                                                        @ 3  java.lang.String.indexOf(int, int):int (37 bytes)   relevance-based (relevance=0.249823, probability=0.000039, bonus=1.000000, nodes=29 <= 74.946771)
                                                                                                      @ 23  java.net.URI.hash(int, String):int (33 bytes)   not inlining relevance-based (relevance=0.124911, probability=0.000079, bonus=1.000000, nodes=58 > 37.473385)
                                                                                                      @ 28  java.net.URI.isOpaque():boolean (13 bytes)   trivial (relevance=0.124911, probability=0.000079, bonus=1.000000, nodes=9)
                            @ 9  java.lang.String.indexOf(int):int (7 bytes)   inline method (bytecode parsing)
                                                                                                      @ 39  java.net.URI.hash(int, String):int (33 bytes)   not inlining relevance-based (relevance=0.062456, probability=0.000039, bonus=1.000000, nodes=37 > 18.736693)
                            @ 9  java.lang.String.indexOf(int):int (7 bytes)   inline method (bytecode parsing)
                                                                                                      @ 51  java.net.URI.hash(int, String):int (33 bytes)   not inlining relevance-based (relevance=0.062456, probability=0.000039, bonus=1.000000, nodes=37 > 18.736693)
                            @ 9  java.lang.String.indexOf(int):int (7 bytes)   inline method (bytecode parsing)
                                                                                                      @ 60  java.net.URI.hash(int, String):int (33 bytes)   not inlining relevance-based (relevance=0.062456, probability=0.000039, bonus=1.000000, nodes=37 > 18.736693)
                            @ 9  java.lang.String.indexOf(int):int (7 bytes)   inline method (bytecode parsing)
                                                                                                      @ 76  java.net.URI.hash(int, String):int (33 bytes)   not inlining relevance-based (relevance=0.031228, probability=0.000020, bonus=1.000000, nodes=37 > 9.368346)
                                                                                                      @ 85  java.net.URI.hashIgnoringCase(int, String):int (45 bytes)   not inlining relevance-based (relevance=0.031228, probability=0.000020, bonus=1.000000, nodes=38 > 9.368346)
                            @ 9  java.lang.String.indexOf(int):int (7 bytes)   inline method (bytecode parsing)
                                                                                                      @ 108  java.net.URI.hash(int, String):int (33 bytes)   not inlining relevance-based (relevance=0.031228, probability=0.000020, bonus=1.000000, nodes=37 > 9.368346)
                 n                                                                                  @ 5  java.lang.Object.hashCode():int (0 bytes)   relevance-based (relevance=1.000000, probability=0.005346, bonus=1.000000, nodes=90 <= 300.000000)
                                                                                                  @ 14  java.util.Objects.hashCode(Object):int (13 bytes)   relevance-based (relevance=1.000000, probability=0.005504, bonus=1.000000, nodes=105 <= 300.000000)
                                                                                                @ 1  jdk.internal.loader.AbstractClassLoaderValue$Sub.hashCode():int (19 bytes)   relevance-based (relevance=3.959160, probability=0.005504, bonus=1.000000, nodes=122 <= 300.000000)
                                                                                                @ 34  java.util.concurrent.ConcurrentHashMap.tabAt(ConcurrentHashMap$Node[], int):ConcurrentHashMap$Node (22 bytes)   relevance-based (relevance=1.090921, probability=0.005489, bonus=1.000000, nodes=11 <= 300.000000)
                            @ 22  jdk.internal.loader.AbstractClassLoaderValue$Sub.parent():AbstractClassLoaderValue (5 bytes)   inline accessor method (bytecode parsing)
                            @ 26  jdk.internal.loader.AbstractClassLoaderValue$Sub.parent():AbstractClassLoaderValue (5 bytes)   inline accessor method (bytecode parsing)
                                                                                                  @ 29  java.lang.Object.equals(Object):boolean (11 bytes)   trivial (relevance=0.276385, probability=0.001391, bonus=1.000000, nodes=9)
                                                                                                  @ 11  java.lang.Object.equals(Object):boolean (11 bytes)   not inlining no methods remaining after filtering less frequent methods (8 methods previously)
                                                                                                  @ 43  java.util.Objects.equals(Object, Object):boolean (23 bytes)   relevance-based (relevance=0.276385, probability=0.001391, bonus=1.000000, nodes=24 <= 82.915401)
                                                                                                @ 73  jdk.internal.loader.AbstractClassLoaderValue$Sub.equals(Object):boolean (55 bytes)   relevance-based (relevance=0.276385, probability=0.001391, bonus=1.000000, nodes=51 <= 82.915401)
                            @ 22  jdk.internal.loader.AbstractClassLoaderValue$Sub.parent():AbstractClassLoaderValue (5 bytes)   inline accessor method (bytecode parsing)
                            @ 26  jdk.internal.loader.AbstractClassLoaderValue$Sub.parent():AbstractClassLoaderValue (5 bytes)   inline accessor method (bytecode parsing)
                                                                                                @ 149  jdk.internal.loader.AbstractClassLoaderValue$Sub.equals(Object):boolean (55 bytes)   not inlining relevance-based (relevance=0.078653, probability=0.000233, bonus=1.000000, nodes=31 > 23.595888)
                                                                                              @ 19  java.util.concurrent.ConcurrentHashMap.get(Object):Object (162 bytes)   relevance-based (relevance=1.000000, probability=0.005504, bonus=1.000000, nodes=268 <= 300.000000)
                                                                                            @ 40  jdk.internal.loader.AbstractClassLoaderValue.computeIfAbsent(ClassLoader, BiFunction):Object (113 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.005504, bonus=1.000000, nodes=334 > 300.000000)
                                                                                          @ 22  java.lang.reflect.Proxy.getProxyConstructor(Class, ClassLoader, Class[]):Constructor (92 bytes)   relevance-based (relevance=1.000769, probability=0.005504, bonus=1.000000, nodes=28 <= 300.000000)
                            @ 21  java.lang.reflect.Constructor.newInstance(Object[]):Object (34 bytes)   inline method (bytecode parsing)
                            @ 35  java.lang.InternalError.<init>(String, Throwable):void (7 bytes)   inline method (bytecode parsing)
                              @ 3  java.lang.VirtualMachineError.<init>(String, Throwable):void (7 bytes)   inline method (bytecode parsing)
                                @ 3  java.lang.Error.<init>(String, Throwable):void (7 bytes)   inline method (bytecode parsing)
                                                                                              @ 18  java.lang.reflect.AccessibleObject.checkAccess(Class, Class, Class, int):void (40 bytes)   not inlining relevance-based (relevance=0.066640, probability=0.000344, bonus=1.000000, nodes=38 > 19.991971)
                            @ 14  java.lang.reflect.Constructor.getConstructorAccessor():ConstructorAccessor (5 bytes)   inline accessor method (bytecode parsing)
                            @ 50  java.lang.IllegalArgumentException.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  java.lang.RuntimeException.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                                @ 2  java.lang.Exception.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                            @ 62  jdk.internal.misc.VM.isJavaLangInvokeInited():boolean (4 bytes)   inline method (bytecode parsing)
                                                                                              @ 33  java.lang.reflect.Constructor.acquireConstructorAccessor():ConstructorAccessor (75 bytes)   not inlining relevance-based (relevance=0.046166, probability=0.000238, bonus=1.000000, nodes=69 > 13.849859)
                            @ 60  jdk.internal.reflect.DirectConstructorHandleAccessor.invokeImpl(Object[]):Object (103 bytes)   inline method (bytecode parsing)
                              @ 88  java.lang.invoke.LambdaForm$MH/0x00007f45e0003c00.invokeExact_MT(Object, Object, Object, Object, Object):Object (26 bytes)   inline method (bytecode parsing)
                                @ 11  java.lang.invoke.Invokers.checkExactType(MethodHandle, MethodType):void (17 bytes)   inline method (bytecode parsing)
                                  @ 1  java.lang.invoke.MethodHandle.type():MethodType (5 bytes)   inline accessor method (bytecode parsing)
                                @ 15  java.lang.invoke.Invokers.checkCustomized(MethodHandle):void (23 bytes)   inline method (bytecode parsing)
                              @ 69  java.lang.invoke.Invokers$Holder.invokeExact_MT(Object, Object, Object, Object):Object (24 bytes)   inline method (bytecode parsing)
                                @ 10  java.lang.invoke.Invokers.checkExactType(MethodHandle, MethodType):void (17 bytes)   inline method (bytecode parsing)
                                  @ 1  java.lang.invoke.MethodHandle.type():MethodType (5 bytes)   inline accessor method (bytecode parsing)
                                @ 14  java.lang.invoke.Invokers.checkCustomized(MethodHandle):void (23 bytes)   inline method (bytecode parsing)
                              @ 53  java.lang.invoke.Invokers$Holder.invokeExact_MT(Object, Object, Object):Object (23 bytes)   inline method (bytecode parsing)
                                @ 10  java.lang.invoke.Invokers.checkExactType(MethodHandle, MethodType):void (17 bytes)   inline method (bytecode parsing)
                                  @ 1  java.lang.invoke.MethodHandle.type():MethodType (5 bytes)   inline accessor method (bytecode parsing)
                                @ 14  java.lang.invoke.Invokers.checkCustomized(MethodHandle):void (23 bytes)   inline method (bytecode parsing)
                              @ 40  java.lang.invoke.Invokers$Holder.invokeExact_MT(Object, Object):Object (22 bytes)   inline method (bytecode parsing)
                                @ 10  java.lang.invoke.Invokers.checkExactType(MethodHandle, MethodType):void (17 bytes)   inline method (bytecode parsing)
                                  @ 1  java.lang.invoke.MethodHandle.type():MethodType (5 bytes)   inline accessor method (bytecode parsing)
                                @ 14  java.lang.invoke.Invokers.checkCustomized(MethodHandle):void (23 bytes)   inline method (bytecode parsing)
                                                                                              @ 19  java.lang.invoke.Invokers.maybeCustomize(MethodHandle):void (5 bytes)   not inlining it is marked non-inlinable
                                                                                              @ 19  java.lang.invoke.Invokers.maybeCustomize(MethodHandle):void (5 bytes)   not inlining it is marked non-inlinable
                                                                                              @ 19  java.lang.invoke.Invokers.maybeCustomize(MethodHandle):void (5 bytes)   not inlining it is marked non-inlinable
                                                                                              @ 19  java.lang.invoke.Invokers.maybeCustomize(MethodHandle):void (5 bytes)   not inlining it is marked non-inlinable
                                                                                              @ 41  jdk.internal.reflect.DirectConstructorHandleAccessor.newInstance(Object[]):Object (130 bytes)   relevance-based (relevance=1.066640, probability=0.005504, bonus=1.000000, nodes=140 <= 300.000000)
                                                                                            @ 30  java.lang.reflect.Constructor.newInstanceWithCaller(Object[], boolean, Class):Object (51 bytes)   relevance-based (relevance=1.053880, probability=0.005504, bonus=1.000000, nodes=177 <= 300.000000)
                                                                                          @ 31  java.lang.reflect.Proxy.newProxyInstance(Class, Constructor, InvocationHandler):Object (75 bytes)   relevance-based (relevance=1.000769, probability=0.005504, bonus=1.000000, nodes=193 <= 300.000000)
                                                                                        @ 33  java.lang.reflect.Proxy.newProxyInstance(ClassLoader, Class[], InvocationHandler):Object (35 bytes)   relevance-based (relevance=1.551003, probability=0.005504, bonus=1.000000, nodes=232 <= 300.000000)
                                                                                      @ 1  sun.reflect.annotation.AnnotationParser$1.run():Annotation (40 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.005504, bonus=1.000000, nodes=380 > 300.000000)
                                                                                    @ 271  sun.reflect.annotation.AnnotationParser.annotationForMap(Class, Map):Annotation (16 bytes)   relevance-based (relevance=1.000170, probability=0.005504, bonus=1.000000, nodes=26 <= 300.000000)
                            @ 4  java.nio.Buffer.session():MemorySessionImpl (20 bytes)   inline method (bytecode parsing)
                            @ 18  java.nio.HeapByteBuffer.byteOffset(long):long (7 bytes)   inline method (bytecode parsing)
                            @ 25  jdk.internal.misc.ScopedMemoryAccess.getShortUnaligned(MemorySessionImpl, Object, long, boolean):short (18 bytes)   inline method (bytecode parsing)
                              @ 6  jdk.internal.misc.ScopedMemoryAccess.getShortUnalignedInternal(MemorySessionImpl, Object, long, boolean):short (36 bytes)   inline method (bytecode parsing)
                                @ 15  jdk.internal.misc.Unsafe.getShortUnaligned(Object, long, boolean):short (12 bytes)   inline method (bytecode parsing)
                                                                                      @ 14  java.nio.Buffer.nextGetIndex(int):int (32 bytes)   relevance-based (relevance=0.189112, probability=0.001041, bonus=1.000000, nodes=13 <= 56.733524)
                                                                                      @ 8  jdk.internal.misc.Unsafe.convEndian(boolean, short):short (16 bytes)   relevance-based (relevance=0.189112, probability=0.001041, bonus=1.000000, nodes=20 <= 56.733524)
                                                                                    @ 161  java.nio.HeapByteBuffer.getShort():short (29 bytes)   relevance-based (relevance=0.189112, probability=0.001041, bonus=1.000000, nodes=44 <= 56.733524)
                 n                                                                @ 6  jdk.internal.reflect.ConstantPool.getUTF8At0(Object, int):String (0 bytes)   not inlining it is a non-intrinsic native method
                                                                                      @ 2  java.util.HashMap.getNode(Object):HashMap$Node (150 bytes)   not inlining relevance-based (relevance=0.214294, probability=0.001041, bonus=1.000000, nodes=108 > 64.288217)
                                                                                    @ 181  java.util.HashMap.get(Object):Object (19 bytes)   relevance-based (relevance=0.189112, probability=0.001041, bonus=1.000000, nodes=19 <= 56.733524)
                            @ 75  sun.reflect.annotation.AnnotationParser.parseAnnotation(ByteBuffer, ConstantPool, Class, boolean):Annotation (9 bytes)   inline method (bytecode parsing)
                            @ 117  java.lang.Class.getInterfaces():Class[] (6 bytes)   inline method (bytecode parsing)
                            @ 190  java.lang.StringBuilder.<init>():void (7 bytes)   inline method (bytecode parsing)
                            @ 201  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 206  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 211  java.lang.StringBuilder.append(Object):StringBuilder (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 216  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 219  java.lang.StringBuilder.toString():String (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.String.<init>(StringBuilder):void (7 bytes)   inline method (bytecode parsing)
                                                                                    @ 208  sun.reflect.annotation.AnnotationParser.parseMemberValue(Class, ByteBuffer, ConstantPool, Class):Object (230 bytes)   not inlining relevance-based (relevance=0.189112, probability=0.001041, bonus=1.000000, nodes=142 > 56.733524)
                                                                                          @ 17  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=0.002894, probability=0.000016, bonus=1.000000, nodes=9)
                                                                                          @ 27  java.lang.StringLatin1.hashCode(byte[]):int (52 bytes)   not inlining relevance-based (relevance=0.002892, probability=0.000016, bonus=1.000000, nodes=22 > 0.867706)
                                                                                          @ 37  java.lang.StringUTF16.hashCode(byte[]):int (52 bytes)   not inlining relevance-based (relevance=0.000001, probability=0.000000, bonus=1.000000, nodes=23 > 0.000438)
                                                                                        @ 9  java.lang.String.hashCode():int (60 bytes)   relevance-based (relevance=0.189112, probability=0.001041, bonus=1.000000, nodes=48 <= 56.733524)
                                                                                      @ 2  java.util.HashMap.hash(Object):int (20 bytes)   relevance-based (relevance=0.189112, probability=0.001041, bonus=1.000000, nodes=56 <= 56.733524)
                                                                                    @ 255  java.util.HashMap.put(Object, Object):Object (13 bytes)   not inlining relevance-based (relevance=0.189112, probability=0.001041, bonus=1.000000, nodes=62 > 56.733524)
                                                                                  @ 41  sun.reflect.annotation.AnnotationParser.parseAnnotation2(ByteBuffer, ConstantPool, Class, boolean, Class[]):Annotation (275 bytes)   relevance-based (relevance=4.000000, probability=0.005504, bonus=1.000000, nodes=256 <= 300.000000)
                                                                                @ 12  sun.reflect.annotation.AnnotationParser.parseAnnotations2(byte[], ConstantPool, Class, Class[]):Map (135 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.005504, bonus=1.000000, nodes=405 > 300.000000)
                                                                              @ 9  sun.reflect.annotation.AnnotationParser.parseAnnotations(byte[], ConstantPool, Class):Map (37 bytes)   relevance-based (relevance=3.160494, probability=0.008327, bonus=1.000000, nodes=16 <= 300.000000)
                                                                            @ 26  java.lang.Class.annotationData():Class$AnnotationData (44 bytes)   not inlining it exceeds the maximum recursive inlining depth
                                                                            @ 36  java.util.Map.entrySet():Set (0 bytes)   not inlining no type profile exists
                                                                            @ 41  java.util.Set.iterator():Iterator (0 bytes)   not inlining no type profile exists
                                                                            @ 50  java.util.Iterator.hasNext():boolean (0 bytes)   not inlining no type profile exists
                                                                            @ 60  java.util.Iterator.next():Object (0 bytes)   not inlining no type profile exists
                                                                            @ 72  java.util.Map$Entry.getKey():Object (0 bytes)   not inlining no type profile exists
                            @ 0  jdk.internal.access.SharedSecrets.getJavaLangAccess():JavaLangAccess (4 bytes)   inline method (bytecode parsing)
                            @ 1  java.lang.Class.getAnnotationType():AnnotationType (5 bytes)   inline accessor method (bytecode parsing)
                                                                                @ 6  java.lang.System$2.getAnnotationType(Class):AnnotationType (5 bytes)   relevance-based (relevance=0.758545, probability=0.004164, bonus=1.000000, nodes=10 <= 227.563459)
                            @ 17  java.lang.IllegalArgumentException.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  java.lang.RuntimeException.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                                @ 2  java.lang.Exception.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                            @ 27  sun.reflect.annotation.AnnotationType$1.<init>(AnnotationType, Class):void (10 bytes)   inline method (bytecode parsing)
                            @ 30  java.security.AccessController.doPrivileged(PrivilegedAction):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.security.AccessController.executePrivileged(PrivilegedAction, AccessControlContext, Class):Object (65 bytes)   inline method (bytecode parsing)
                                @ 29  sun.reflect.annotation.AnnotationType$1.run():Object (5 bytes)   inline method (bytecode parsing)
                                  @ 1  sun.reflect.annotation.AnnotationType$1.run():Method[] (8 bytes)   inline method (bytecode parsing)
                            @ 59  java.util.HashMap.<init>(int):void (8 bytes)   inline method (bytecode parsing)
                            @ 105  java.lang.reflect.Method.getModifiers():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 116  java.lang.reflect.Method.getModifiers():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 127  java.lang.reflect.Method.isSynthetic():boolean (5 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.reflect.Executable.isSynthetic():boolean (8 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.reflect.Method.getModifiers():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 135  java.lang.reflect.Method.getParameterCount():int (6 bytes)   inline method (bytecode parsing)
                            @ 171  java.lang.reflect.Method.getName():String (5 bytes)   inline accessor method (bytecode parsing)
                            @ 178  java.lang.reflect.Method.getReturnType():Class (5 bytes)   inline accessor method (bytecode parsing)
                            @ 149  java.lang.StringBuilder.<init>():void (7 bytes)   inline method (bytecode parsing)
                            @ 154  java.lang.StringBuilder.append(Object):StringBuilder (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 159  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 162  java.lang.StringBuilder.toString():String (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.String.<init>(StringBuilder):void (7 bytes)   inline method (bytecode parsing)
                            @ 165  java.lang.IllegalArgumentException.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  java.lang.RuntimeException.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                                @ 2  java.lang.Exception.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                            @ 258  jdk.internal.access.SharedSecrets.getJavaLangAccess():JavaLangAccess (4 bytes)   inline method (bytecode parsing)
                                                                                @ 21  sun.reflect.annotation.AnnotationType.<init>(Class):void (361 bytes)   not inlining relevance-based (relevance=0.002120, probability=0.000012, bonus=1.000000, nodes=244 > 0.635889)
                            @ 3  java.lang.Class.casAnnotationType(AnnotationType, AnnotationType):boolean (7 bytes)   inline method (bytecode parsing)
                                                                                @ 29  java.lang.System$2.casAnnotationType(Class, AnnotationType, AnnotationType):boolean (7 bytes)   not inlining relevance-based (relevance=0.002120, probability=0.000012, bonus=1.000000, nodes=13 > 0.635889)
                                                                              @ 84  sun.reflect.annotation.AnnotationType.getInstance(Class):AnnotationType (65 bytes)   relevance-based (relevance=0.756425, probability=0.004164, bonus=1.000000, nodes=37 <= 226.927570)
                                                                            @ 99  java.util.Map.size():int (0 bytes)   not inlining no type profile exists
                                                                            @ 107  java.util.Map.size():int (0 bytes)   not inlining no type profile exists
                                                                            @ 114  java.util.Map.size():int (0 bytes)   not inlining no type profile exists
                                                                              @ 123  java.lang.Math.max(int, int):int (11 bytes)   trivial (relevance=0.189106, probability=0.001041, bonus=1.000000, nodes=7)
                            @ 12  java.lang.StringBuilder.<init>():void (7 bytes)   inline method (bytecode parsing)
                            @ 17  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 21  java.lang.StringBuilder.append(int):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 24  java.lang.StringBuilder.toString():String (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.String.<init>(StringBuilder):void (7 bytes)   inline method (bytecode parsing)
                            @ 27  java.lang.IllegalArgumentException.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  java.lang.RuntimeException.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                                @ 2  java.lang.Exception.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                                                                                @ 36  java.util.HashMap.calculateHashMapCapacity(int):int (11 bytes)   trivial (relevance=0.189106, probability=0.000520, bonus=1.000000, nodes=9)
                            @ 2  java.util.HashMap.<init>(int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  java.util.AbstractMap.<init>():void (5 bytes)   inline method (bytecode parsing)
                                                                                    @ 51  java.lang.Float.isNaN(float):boolean (12 bytes)   trivial (relevance=0.189106, probability=0.000520, bonus=1.000000, nodes=5)
                                                                                    @ 91  java.util.HashMap.tableSizeFor(int):int (32 bytes)   relevance-based (relevance=0.189106, probability=0.000520, bonus=1.000000, nodes=23 <= 56.731893)
                                                                                  @ 4  java.util.HashMap.<init>(int, float):void (98 bytes)   relevance-based (relevance=0.189106, probability=0.000520, bonus=1.000000, nodes=36 <= 56.731893)
                                                                                @ 39  java.util.LinkedHashMap.<init>(int):void (16 bytes)   relevance-based (relevance=0.189106, probability=0.000520, bonus=1.000000, nodes=43 <= 56.731893)
                                                                              @ 126  java.util.LinkedHashMap.newLinkedHashMap(int):LinkedHashMap (43 bytes)   not inlining relevance-based (relevance=0.189106, probability=0.001041, bonus=1.000000, nodes=83 > 56.731893)
                                                                            @ 137  java.util.Map$Entry.getValue():Object (0 bytes)   not inlining no type profile exists
                 n                                                                @ 9  java.lang.Object.hashCode():int (0 bytes)   trivial (relevance=0.378213, probability=0.002082, bonus=1.000000, nodes=5)
                                                                                @ 2  java.util.HashMap.hash(Object):int (20 bytes)   relevance-based (relevance=0.378213, probability=0.002082, bonus=1.000000, nodes=13 <= 113.463785)
                                                                                @ 9  java.util.HashMap.putVal(int, Object, Object, boolean, boolean):Object (300 bytes)   not inlining too large previous low-level graph (low-level-nodes: 766, relevance=0.378213, probability=0.002082, bonus=1.000000, nodes=166)
                                                                              @ 145  java.util.HashMap.put(Object, Object):Object (13 bytes)   relevance-based (relevance=0.378213, probability=0.002082, bonus=1.000000, nodes=21 <= 113.463785)
                                                                                  @ 4  java.util.Map.size():int (0 bytes)   not inlining no type profile exists
                                                                                  @ 1  java.util.HashMap.size():int (5 bytes)   relevance-based (relevance=1.238566, probability=0.004164, bonus=1.000000, nodes=13 <= 300.000000)
                                                                                  @ 62  java.util.HashMap.tableSizeFor(int):int (32 bytes)   relevance-based (relevance=0.203822, probability=0.000938, bonus=1.000000, nodes=23 <= 61.146460)
                            @ 15  java.util.HashMap$EntrySet.<init>(HashMap):void (10 bytes)   inline method (bytecode parsing)
                              @ 6  java.util.AbstractSet.<init>():void (5 bytes)   inline method (bytecode parsing)
                                @ 1  java.util.AbstractCollection.<init>():void (5 bytes)   inline method (bytecode parsing)
                            @ 21  java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet.<init>(Set):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  java.util.Collections$UnmodifiableSet.<init>(Set):void (6 bytes)   inline method (bytecode parsing)
                                                                                  @ 16  java.util.Map.entrySet():Set (0 bytes)   not inlining no type profile exists
                                                                                    @ 2  java.util.Collections$UnmodifiableCollection.<init>(Collection):void (22 bytes)   relevance-based (relevance=0.255674, probability=0.000341, bonus=1.000000, nodes=10 <= 76.702234)
                                                                                  @ 98  java.util.HashMap.entrySet():Set (27 bytes)   relevance-based (relevance=0.352226, probability=0.001621, bonus=1.000000, nodes=50 <= 105.667846)
                            @ 8  java.util.HashMap$EntryIterator.<init>(HashMap):void (6 bytes)   inline method (bytecode parsing)
                                                                                    @ 17  java.util.Collection.iterator():Iterator (0 bytes)   not inlining no type profile exists
                                                                                    @ 5  java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1.<init>(Collections$UnmodifiableMap$UnmodifiableEntrySet):void (26 bytes)   relevance-based (relevance=0.255674, probability=0.000682, bonus=1.000000, nodes=15 <= 76.702234)
                                                                                    @ 2  java.util.HashMap$HashIterator.<init>(HashMap):void (79 bytes)   not inlining too large previous low-level graph (low-level-nodes: 409, relevance=0.352226, probability=0.000939, bonus=1.000000, nodes=58)
                                                                                  @ 103  java.util.HashMap$EntrySet.iterator():Iterator (12 bytes)   relevance-based (relevance=0.352226, probability=0.001621, bonus=1.000000, nodes=26 <= 105.667846)
                                                                                    @ 4  java.util.HashMap$HashIterator.hasNext():boolean (13 bytes)   trivial (relevance=0.435973, probability=0.004772, bonus=1.000000, nodes=9)
                                                                                  @ 112  java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1.hasNext():boolean (10 bytes)   relevance-based (relevance=0.435973, probability=0.008438, bonus=1.000000, nodes=27 <= 130.791826)
                                                                                @ 3  java.util.HashMap.putMapEntries(Map, boolean):void (170 bytes)   not inlining relevance-based (relevance=0.756425, probability=0.004164, bonus=1.000000, nodes=234 > 226.927570)
                                                                              @ 168  java.util.HashMap.putAll(Map):void (7 bytes)   trivial (relevance=0.756425, probability=0.004164, bonus=1.000000, nodes=9)
                                                                              @ 181  java.lang.Class$AnnotationData.<init>(Map, Map, int):void (20 bytes)   relevance-based (relevance=1.512850, probability=0.008327, bonus=1.000000, nodes=14 <= 300.000000)
                                                                            @ 26  java.lang.Class.createAnnotationData(int):Class$AnnotationData (185 bytes)   not inlining callee invoke probability is too high (invokeP=7.663798, relevance=2.269276, probability=0.008327, bonus=1.000000, nodes=224)
                                                                            @ 33  java.lang.Class$Atomic.casAnnotationData(Class, Class$AnnotationData, Class$AnnotationData):boolean (13 bytes)   trivial (relevance=2.269276, probability=0.008327, bonus=1.000000, nodes=9)
                                                                          @ 26  java.lang.Class.annotationData():Class$AnnotationData (44 bytes)   relevance-based (relevance=0.756425, probability=0.006940, bonus=1.000000, nodes=44 <= 226.927570)
                                                                        @ 36  java.util.Map.entrySet():Set (0 bytes)   not inlining no type profile exists
                                                                        @ 41  java.util.Set.iterator():Iterator (0 bytes)   not inlining no type profile exists
                                                                        @ 50  java.util.Iterator.hasNext():boolean (0 bytes)   not inlining no type profile exists
                                                                        @ 60  java.util.Iterator.next():Object (0 bytes)   not inlining no type profile exists
                                                                        @ 72  java.util.Map$Entry.getKey():Object (0 bytes)   not inlining no type profile exists
                            @ 0  jdk.internal.access.SharedSecrets.getJavaLangAccess():JavaLangAccess (4 bytes)   inline method (bytecode parsing)
                            @ 1  java.lang.Class.getAnnotationType():AnnotationType (5 bytes)   inline accessor method (bytecode parsing)
                                                                            @ 6  java.lang.System$2.getAnnotationType(Class):AnnotationType (5 bytes)   relevance-based (relevance=0.758545, probability=0.006940, bonus=1.000000, nodes=10 <= 227.563459)
                            @ 17  java.lang.IllegalArgumentException.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  java.lang.RuntimeException.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                                @ 2  java.lang.Exception.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                            @ 27  sun.reflect.annotation.AnnotationType$1.<init>(AnnotationType, Class):void (10 bytes)   inline method (bytecode parsing)
                            @ 30  java.security.AccessController.doPrivileged(PrivilegedAction):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.security.AccessController.executePrivileged(PrivilegedAction, AccessControlContext, Class):Object (65 bytes)   inline method (bytecode parsing)
                                @ 29  sun.reflect.annotation.AnnotationType$1.run():Object (5 bytes)   inline method (bytecode parsing)
                                  @ 1  sun.reflect.annotation.AnnotationType$1.run():Method[] (8 bytes)   inline method (bytecode parsing)
                            @ 59  java.util.HashMap.<init>(int):void (8 bytes)   inline method (bytecode parsing)
                            @ 105  java.lang.reflect.Method.getModifiers():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 116  java.lang.reflect.Method.getModifiers():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 127  java.lang.reflect.Method.isSynthetic():boolean (5 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.reflect.Executable.isSynthetic():boolean (8 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.reflect.Method.getModifiers():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 135  java.lang.reflect.Method.getParameterCount():int (6 bytes)   inline method (bytecode parsing)
                            @ 171  java.lang.reflect.Method.getName():String (5 bytes)   inline accessor method (bytecode parsing)
                            @ 178  java.lang.reflect.Method.getReturnType():Class (5 bytes)   inline accessor method (bytecode parsing)
                            @ 149  java.lang.StringBuilder.<init>():void (7 bytes)   inline method (bytecode parsing)
                            @ 154  java.lang.StringBuilder.append(Object):StringBuilder (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 159  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 162  java.lang.StringBuilder.toString():String (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.String.<init>(StringBuilder):void (7 bytes)   inline method (bytecode parsing)
                            @ 165  java.lang.IllegalArgumentException.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  java.lang.RuntimeException.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                                @ 2  java.lang.Exception.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                            @ 258  jdk.internal.access.SharedSecrets.getJavaLangAccess():JavaLangAccess (4 bytes)   inline method (bytecode parsing)
                                                                            @ 21  sun.reflect.annotation.AnnotationType.<init>(Class):void (361 bytes)   not inlining relevance-based (relevance=0.002120, probability=0.000019, bonus=1.000000, nodes=244 > 0.635889)
                            @ 3  java.lang.Class.casAnnotationType(AnnotationType, AnnotationType):boolean (7 bytes)   inline method (bytecode parsing)
                                                                            @ 29  java.lang.System$2.casAnnotationType(Class, AnnotationType, AnnotationType):boolean (7 bytes)   not inlining relevance-based (relevance=0.002120, probability=0.000019, bonus=1.000000, nodes=13 > 0.635889)
                                                                          @ 84  sun.reflect.annotation.AnnotationType.getInstance(Class):AnnotationType (65 bytes)   relevance-based (relevance=0.756425, probability=0.006940, bonus=1.000000, nodes=37 <= 226.927570)
                                                                        @ 99  java.util.Map.size():int (0 bytes)   not inlining no type profile exists
                                                                        @ 107  java.util.Map.size():int (0 bytes)   not inlining no type profile exists
                                                                        @ 114  java.util.Map.size():int (0 bytes)   not inlining no type profile exists
                                                                          @ 123  java.lang.Math.max(int, int):int (11 bytes)   trivial (relevance=0.189106, probability=0.001735, bonus=1.000000, nodes=7)
                            @ 12  java.lang.StringBuilder.<init>():void (7 bytes)   inline method (bytecode parsing)
                            @ 17  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 21  java.lang.StringBuilder.append(int):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 24  java.lang.StringBuilder.toString():String (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.String.<init>(StringBuilder):void (7 bytes)   inline method (bytecode parsing)
                            @ 27  java.lang.IllegalArgumentException.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  java.lang.RuntimeException.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                                @ 2  java.lang.Exception.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                                                                            @ 36  java.util.HashMap.calculateHashMapCapacity(int):int (11 bytes)   trivial (relevance=0.189106, probability=0.000867, bonus=1.000000, nodes=9)
                            @ 2  java.util.HashMap.<init>(int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  java.util.AbstractMap.<init>():void (5 bytes)   inline method (bytecode parsing)
                                                                                @ 51  java.lang.Float.isNaN(float):boolean (12 bytes)   trivial (relevance=0.189106, probability=0.000867, bonus=1.000000, nodes=5)
                                                                                @ 91  java.util.HashMap.tableSizeFor(int):int (32 bytes)   relevance-based (relevance=0.189106, probability=0.000867, bonus=1.000000, nodes=23 <= 56.731893)
                                                                              @ 4  java.util.HashMap.<init>(int, float):void (98 bytes)   relevance-based (relevance=0.189106, probability=0.000867, bonus=1.000000, nodes=36 <= 56.731893)
                                                                            @ 39  java.util.LinkedHashMap.<init>(int):void (16 bytes)   relevance-based (relevance=0.189106, probability=0.000867, bonus=1.000000, nodes=43 <= 56.731893)
                                                                          @ 126  java.util.LinkedHashMap.newLinkedHashMap(int):LinkedHashMap (43 bytes)   not inlining relevance-based (relevance=0.189106, probability=0.001735, bonus=1.000000, nodes=83 > 56.731893)
                                                                        @ 137  java.util.Map$Entry.getValue():Object (0 bytes)   not inlining no type profile exists
                 n                                                            @ 9  java.lang.Object.hashCode():int (0 bytes)   trivial (relevance=0.378213, probability=0.003470, bonus=1.000000, nodes=5)
                                                                            @ 2  java.util.HashMap.hash(Object):int (20 bytes)   relevance-based (relevance=0.378213, probability=0.003470, bonus=1.000000, nodes=13 <= 113.463785)
                                                                            @ 9  java.util.HashMap.putVal(int, Object, Object, boolean, boolean):Object (300 bytes)   not inlining too large previous low-level graph (low-level-nodes: 766, relevance=0.378213, probability=0.003470, bonus=1.000000, nodes=166)
                                                                          @ 145  java.util.HashMap.put(Object, Object):Object (13 bytes)   relevance-based (relevance=0.378213, probability=0.003470, bonus=1.000000, nodes=21 <= 113.463785)
                                                                              @ 4  java.util.Map.size():int (0 bytes)   not inlining no type profile exists
                                                                              @ 1  java.util.HashMap.size():int (5 bytes)   relevance-based (relevance=1.238566, probability=0.006940, bonus=1.000000, nodes=13 <= 300.000000)
                                                                              @ 62  java.util.HashMap.tableSizeFor(int):int (32 bytes)   relevance-based (relevance=0.203822, probability=0.001563, bonus=1.000000, nodes=23 <= 61.146460)
                            @ 15  java.util.HashMap$EntrySet.<init>(HashMap):void (10 bytes)   inline method (bytecode parsing)
                              @ 6  java.util.AbstractSet.<init>():void (5 bytes)   inline method (bytecode parsing)
                                @ 1  java.util.AbstractCollection.<init>():void (5 bytes)   inline method (bytecode parsing)
                            @ 21  java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet.<init>(Set):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  java.util.Collections$UnmodifiableSet.<init>(Set):void (6 bytes)   inline method (bytecode parsing)
                                                                              @ 16  java.util.Map.entrySet():Set (0 bytes)   not inlining no type profile exists
                                                                                @ 2  java.util.Collections$UnmodifiableCollection.<init>(Collection):void (22 bytes)   relevance-based (relevance=0.255674, probability=0.000568, bonus=1.000000, nodes=10 <= 76.702234)
                                                                              @ 98  java.util.HashMap.entrySet():Set (27 bytes)   relevance-based (relevance=0.352226, probability=0.002701, bonus=1.000000, nodes=50 <= 105.667846)
                            @ 8  java.util.HashMap$EntryIterator.<init>(HashMap):void (6 bytes)   inline method (bytecode parsing)
                                                                                @ 17  java.util.Collection.iterator():Iterator (0 bytes)   not inlining no type profile exists
                                                                                @ 5  java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1.<init>(Collections$UnmodifiableMap$UnmodifiableEntrySet):void (26 bytes)   relevance-based (relevance=0.255674, probability=0.001136, bonus=1.000000, nodes=15 <= 76.702234)
                                                                                @ 2  java.util.HashMap$HashIterator.<init>(HashMap):void (79 bytes)   not inlining too large previous low-level graph (low-level-nodes: 409, relevance=0.352226, probability=0.001565, bonus=1.000000, nodes=58)
                                                                              @ 103  java.util.HashMap$EntrySet.iterator():Iterator (12 bytes)   relevance-based (relevance=0.352226, probability=0.002701, bonus=1.000000, nodes=26 <= 105.667846)
                                                                                @ 4  java.util.HashMap$HashIterator.hasNext():boolean (13 bytes)   trivial (relevance=0.435973, probability=0.007953, bonus=1.000000, nodes=9)
                                                                              @ 112  java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1.hasNext():boolean (10 bytes)   relevance-based (relevance=0.435973, probability=0.014063, bonus=1.000000, nodes=27 <= 130.791826)
                                                                            @ 3  java.util.HashMap.putMapEntries(Map, boolean):void (170 bytes)   not inlining relevance-based (relevance=0.756425, probability=0.006940, bonus=1.000000, nodes=234 > 226.927570)
                                                                          @ 168  java.util.HashMap.putAll(Map):void (7 bytes)   trivial (relevance=0.756425, probability=0.006940, bonus=1.000000, nodes=9)
                                                                          @ 181  java.lang.Class$AnnotationData.<init>(Map, Map, int):void (20 bytes)   relevance-based (relevance=1.512850, probability=0.013879, bonus=1.000000, nodes=14 <= 300.000000)
                                                                        @ 26  java.lang.Class.createAnnotationData(int):Class$AnnotationData (185 bytes)   not inlining callee invoke probability is too high (invokeP=7.763798, relevance=2.269276, probability=0.013879, bonus=1.000000, nodes=267)
                                                                        @ 33  java.lang.Class$Atomic.casAnnotationData(Class, Class$AnnotationData, Class$AnnotationData):boolean (13 bytes)   trivial (relevance=2.269276, probability=0.013879, bonus=1.000000, nodes=9)
                                                                      @ 26  java.lang.Class.annotationData():Class$AnnotationData (44 bytes)   relevance-based (relevance=0.756425, probability=0.011566, bonus=1.000000, nodes=44 <= 226.927570)
                                                                    @ 36  java.util.Map.entrySet():Set (0 bytes)   not inlining no type profile exists
                                                                    @ 41  java.util.Set.iterator():Iterator (0 bytes)   not inlining no type profile exists
                                                                    @ 50  java.util.Iterator.hasNext():boolean (0 bytes)   not inlining no type profile exists
                                                                    @ 60  java.util.Iterator.next():Object (0 bytes)   not inlining no type profile exists
                                                                    @ 72  java.util.Map$Entry.getKey():Object (0 bytes)   not inlining no type profile exists
                            @ 0  jdk.internal.access.SharedSecrets.getJavaLangAccess():JavaLangAccess (4 bytes)   inline method (bytecode parsing)
                            @ 1  java.lang.Class.getAnnotationType():AnnotationType (5 bytes)   inline accessor method (bytecode parsing)
                                                                        @ 6  java.lang.System$2.getAnnotationType(Class):AnnotationType (5 bytes)   relevance-based (relevance=0.758545, probability=0.011566, bonus=1.000000, nodes=10 <= 227.563459)
                            @ 17  java.lang.IllegalArgumentException.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  java.lang.RuntimeException.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                                @ 2  java.lang.Exception.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                            @ 27  sun.reflect.annotation.AnnotationType$1.<init>(AnnotationType, Class):void (10 bytes)   inline method (bytecode parsing)
                            @ 30  java.security.AccessController.doPrivileged(PrivilegedAction):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.security.AccessController.executePrivileged(PrivilegedAction, AccessControlContext, Class):Object (65 bytes)   inline method (bytecode parsing)
                                @ 29  sun.reflect.annotation.AnnotationType$1.run():Object (5 bytes)   inline method (bytecode parsing)
                                  @ 1  sun.reflect.annotation.AnnotationType$1.run():Method[] (8 bytes)   inline method (bytecode parsing)
                            @ 59  java.util.HashMap.<init>(int):void (8 bytes)   inline method (bytecode parsing)
                            @ 105  java.lang.reflect.Method.getModifiers():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 116  java.lang.reflect.Method.getModifiers():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 127  java.lang.reflect.Method.isSynthetic():boolean (5 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.reflect.Executable.isSynthetic():boolean (8 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.reflect.Method.getModifiers():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 135  java.lang.reflect.Method.getParameterCount():int (6 bytes)   inline method (bytecode parsing)
                            @ 171  java.lang.reflect.Method.getName():String (5 bytes)   inline accessor method (bytecode parsing)
                            @ 178  java.lang.reflect.Method.getReturnType():Class (5 bytes)   inline accessor method (bytecode parsing)
                            @ 149  java.lang.StringBuilder.<init>():void (7 bytes)   inline method (bytecode parsing)
                            @ 154  java.lang.StringBuilder.append(Object):StringBuilder (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 159  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 162  java.lang.StringBuilder.toString():String (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.String.<init>(StringBuilder):void (7 bytes)   inline method (bytecode parsing)
                            @ 165  java.lang.IllegalArgumentException.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  java.lang.RuntimeException.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                                @ 2  java.lang.Exception.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                            @ 258  jdk.internal.access.SharedSecrets.getJavaLangAccess():JavaLangAccess (4 bytes)   inline method (bytecode parsing)
                                                                        @ 21  sun.reflect.annotation.AnnotationType.<init>(Class):void (361 bytes)   not inlining relevance-based (relevance=0.002120, probability=0.000032, bonus=1.000000, nodes=244 > 0.635889)
                            @ 3  java.lang.Class.casAnnotationType(AnnotationType, AnnotationType):boolean (7 bytes)   inline method (bytecode parsing)
                                                                        @ 29  java.lang.System$2.casAnnotationType(Class, AnnotationType, AnnotationType):boolean (7 bytes)   not inlining relevance-based (relevance=0.002120, probability=0.000032, bonus=1.000000, nodes=13 > 0.635889)
                                                                      @ 84  sun.reflect.annotation.AnnotationType.getInstance(Class):AnnotationType (65 bytes)   relevance-based (relevance=0.756425, probability=0.011566, bonus=1.000000, nodes=37 <= 226.927570)
                                                                    @ 99  java.util.Map.size():int (0 bytes)   not inlining no type profile exists
                                                                    @ 107  java.util.Map.size():int (0 bytes)   not inlining no type profile exists
                                                                    @ 114  java.util.Map.size():int (0 bytes)   not inlining no type profile exists
                                                                      @ 123  java.lang.Math.max(int, int):int (11 bytes)   trivial (relevance=0.189106, probability=0.002891, bonus=1.000000, nodes=7)
                            @ 12  java.lang.StringBuilder.<init>():void (7 bytes)   inline method (bytecode parsing)
                            @ 17  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 21  java.lang.StringBuilder.append(int):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 24  java.lang.StringBuilder.toString():String (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.String.<init>(StringBuilder):void (7 bytes)   inline method (bytecode parsing)
                            @ 27  java.lang.IllegalArgumentException.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  java.lang.RuntimeException.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                                @ 2  java.lang.Exception.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                                                                        @ 36  java.util.HashMap.calculateHashMapCapacity(int):int (11 bytes)   trivial (relevance=0.189106, probability=0.001446, bonus=1.000000, nodes=9)
                            @ 2  java.util.HashMap.<init>(int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  java.util.AbstractMap.<init>():void (5 bytes)   inline method (bytecode parsing)
                                                                            @ 51  java.lang.Float.isNaN(float):boolean (12 bytes)   trivial (relevance=0.189106, probability=0.001446, bonus=1.000000, nodes=5)
                                                                            @ 91  java.util.HashMap.tableSizeFor(int):int (32 bytes)   relevance-based (relevance=0.189106, probability=0.001446, bonus=1.000000, nodes=23 <= 56.731893)
                                                                          @ 4  java.util.HashMap.<init>(int, float):void (98 bytes)   relevance-based (relevance=0.189106, probability=0.001446, bonus=1.000000, nodes=36 <= 56.731893)
                                                                        @ 39  java.util.LinkedHashMap.<init>(int):void (16 bytes)   relevance-based (relevance=0.189106, probability=0.001446, bonus=1.000000, nodes=43 <= 56.731893)
                                                                      @ 126  java.util.LinkedHashMap.newLinkedHashMap(int):LinkedHashMap (43 bytes)   not inlining relevance-based (relevance=0.189106, probability=0.002891, bonus=1.000000, nodes=83 > 56.731893)
                                                                    @ 137  java.util.Map$Entry.getValue():Object (0 bytes)   not inlining no type profile exists
                 n                                                        @ 9  java.lang.Object.hashCode():int (0 bytes)   trivial (relevance=0.378213, probability=0.005783, bonus=1.000000, nodes=5)
                                                                        @ 2  java.util.HashMap.hash(Object):int (20 bytes)   relevance-based (relevance=0.378213, probability=0.005783, bonus=1.000000, nodes=13 <= 113.463785)
                                                                        @ 9  java.util.HashMap.putVal(int, Object, Object, boolean, boolean):Object (300 bytes)   not inlining too large previous low-level graph (low-level-nodes: 766, relevance=0.378213, probability=0.005783, bonus=1.000000, nodes=166)
                                                                      @ 145  java.util.HashMap.put(Object, Object):Object (13 bytes)   relevance-based (relevance=0.378213, probability=0.005783, bonus=1.000000, nodes=21 <= 113.463785)
                                                                          @ 4  java.util.Map.size():int (0 bytes)   not inlining no type profile exists
                                                                          @ 1  java.util.HashMap.size():int (5 bytes)   relevance-based (relevance=1.238566, probability=0.011566, bonus=1.000000, nodes=13 <= 300.000000)
                                                                          @ 62  java.util.HashMap.tableSizeFor(int):int (32 bytes)   relevance-based (relevance=0.203822, probability=0.002605, bonus=1.000000, nodes=23 <= 61.146460)
                            @ 15  java.util.HashMap$EntrySet.<init>(HashMap):void (10 bytes)   inline method (bytecode parsing)
                              @ 6  java.util.AbstractSet.<init>():void (5 bytes)   inline method (bytecode parsing)
                                @ 1  java.util.AbstractCollection.<init>():void (5 bytes)   inline method (bytecode parsing)
                            @ 21  java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet.<init>(Set):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  java.util.Collections$UnmodifiableSet.<init>(Set):void (6 bytes)   inline method (bytecode parsing)
                                                                          @ 16  java.util.Map.entrySet():Set (0 bytes)   not inlining no type profile exists
                                                                            @ 2  java.util.Collections$UnmodifiableCollection.<init>(Collection):void (22 bytes)   relevance-based (relevance=0.255674, probability=0.000947, bonus=1.000000, nodes=10 <= 76.702234)
                                                                          @ 98  java.util.HashMap.entrySet():Set (27 bytes)   relevance-based (relevance=0.352226, probability=0.004502, bonus=1.000000, nodes=50 <= 105.667846)
                            @ 8  java.util.HashMap$EntryIterator.<init>(HashMap):void (6 bytes)   inline method (bytecode parsing)
                                                                            @ 17  java.util.Collection.iterator():Iterator (0 bytes)   not inlining no type profile exists
                                                                            @ 5  java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1.<init>(Collections$UnmodifiableMap$UnmodifiableEntrySet):void (26 bytes)   relevance-based (relevance=0.255674, probability=0.001894, bonus=1.000000, nodes=15 <= 76.702234)
                                                                            @ 2  java.util.HashMap$HashIterator.<init>(HashMap):void (79 bytes)   not inlining too large previous low-level graph (low-level-nodes: 409, relevance=0.352226, probability=0.002609, bonus=1.000000, nodes=58)
                                                                          @ 103  java.util.HashMap$EntrySet.iterator():Iterator (12 bytes)   relevance-based (relevance=0.352226, probability=0.004502, bonus=1.000000, nodes=26 <= 105.667846)
                                                                            @ 4  java.util.HashMap$HashIterator.hasNext():boolean (13 bytes)   trivial (relevance=0.435973, probability=0.013255, bonus=1.000000, nodes=9)
                                                                          @ 112  java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1.hasNext():boolean (10 bytes)   relevance-based (relevance=0.435973, probability=0.023438, bonus=1.000000, nodes=27 <= 130.791826)
                                                                        @ 3  java.util.HashMap.putMapEntries(Map, boolean):void (170 bytes)   not inlining relevance-based (relevance=0.756425, probability=0.011566, bonus=1.000000, nodes=234 > 226.927570)
                                                                      @ 168  java.util.HashMap.putAll(Map):void (7 bytes)   trivial (relevance=0.756425, probability=0.011566, bonus=1.000000, nodes=9)
                                                                      @ 181  java.lang.Class$AnnotationData.<init>(Map, Map, int):void (20 bytes)   relevance-based (relevance=1.512850, probability=0.023132, bonus=1.000000, nodes=14 <= 300.000000)
                                                                    @ 26  java.lang.Class.createAnnotationData(int):Class$AnnotationData (185 bytes)   not inlining callee invoke probability is too high (invokeP=7.763798, relevance=2.269276, probability=0.023132, bonus=1.000000, nodes=267)
                                                                    @ 33  java.lang.Class$Atomic.casAnnotationData(Class, Class$AnnotationData, Class$AnnotationData):boolean (13 bytes)   trivial (relevance=2.269276, probability=0.023132, bonus=1.000000, nodes=9)
                                                                  @ 26  java.lang.Class.annotationData():Class$AnnotationData (44 bytes)   relevance-based (relevance=0.756425, probability=0.019276, bonus=1.000000, nodes=44 <= 226.927570)
                                                                @ 36  java.util.Map.entrySet():Set (0 bytes)   not inlining no type profile exists
                                                                @ 41  java.util.Set.iterator():Iterator (0 bytes)   not inlining no type profile exists
                                                                @ 50  java.util.Iterator.hasNext():boolean (0 bytes)   not inlining no type profile exists
                                                                @ 60  java.util.Iterator.next():Object (0 bytes)   not inlining no type profile exists
                                                                @ 72  java.util.Map$Entry.getKey():Object (0 bytes)   not inlining no type profile exists
                            @ 0  jdk.internal.access.SharedSecrets.getJavaLangAccess():JavaLangAccess (4 bytes)   inline method (bytecode parsing)
                            @ 1  java.lang.Class.getAnnotationType():AnnotationType (5 bytes)   inline accessor method (bytecode parsing)
                                                                    @ 6  java.lang.System$2.getAnnotationType(Class):AnnotationType (5 bytes)   relevance-based (relevance=0.758545, probability=0.019276, bonus=1.000000, nodes=10 <= 227.563459)
                            @ 17  java.lang.IllegalArgumentException.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  java.lang.RuntimeException.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                                @ 2  java.lang.Exception.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                            @ 27  sun.reflect.annotation.AnnotationType$1.<init>(AnnotationType, Class):void (10 bytes)   inline method (bytecode parsing)
                            @ 30  java.security.AccessController.doPrivileged(PrivilegedAction):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.security.AccessController.executePrivileged(PrivilegedAction, AccessControlContext, Class):Object (65 bytes)   inline method (bytecode parsing)
                                @ 29  sun.reflect.annotation.AnnotationType$1.run():Object (5 bytes)   inline method (bytecode parsing)
                                  @ 1  sun.reflect.annotation.AnnotationType$1.run():Method[] (8 bytes)   inline method (bytecode parsing)
                            @ 59  java.util.HashMap.<init>(int):void (8 bytes)   inline method (bytecode parsing)
                            @ 105  java.lang.reflect.Method.getModifiers():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 116  java.lang.reflect.Method.getModifiers():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 127  java.lang.reflect.Method.isSynthetic():boolean (5 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.reflect.Executable.isSynthetic():boolean (8 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.reflect.Method.getModifiers():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 135  java.lang.reflect.Method.getParameterCount():int (6 bytes)   inline method (bytecode parsing)
                            @ 171  java.lang.reflect.Method.getName():String (5 bytes)   inline accessor method (bytecode parsing)
                            @ 178  java.lang.reflect.Method.getReturnType():Class (5 bytes)   inline accessor method (bytecode parsing)
                            @ 149  java.lang.StringBuilder.<init>():void (7 bytes)   inline method (bytecode parsing)
                            @ 154  java.lang.StringBuilder.append(Object):StringBuilder (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 159  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 162  java.lang.StringBuilder.toString():String (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.String.<init>(StringBuilder):void (7 bytes)   inline method (bytecode parsing)
                            @ 165  java.lang.IllegalArgumentException.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  java.lang.RuntimeException.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                                @ 2  java.lang.Exception.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                            @ 258  jdk.internal.access.SharedSecrets.getJavaLangAccess():JavaLangAccess (4 bytes)   inline method (bytecode parsing)
                                                                    @ 21  sun.reflect.annotation.AnnotationType.<init>(Class):void (361 bytes)   not inlining relevance-based (relevance=0.002120, probability=0.000054, bonus=1.000000, nodes=244 > 0.635889)
                            @ 3  java.lang.Class.casAnnotationType(AnnotationType, AnnotationType):boolean (7 bytes)   inline method (bytecode parsing)
                                                                    @ 29  java.lang.System$2.casAnnotationType(Class, AnnotationType, AnnotationType):boolean (7 bytes)   not inlining relevance-based (relevance=0.002120, probability=0.000054, bonus=1.000000, nodes=13 > 0.635889)
                                                                  @ 84  sun.reflect.annotation.AnnotationType.getInstance(Class):AnnotationType (65 bytes)   relevance-based (relevance=0.756425, probability=0.019276, bonus=1.000000, nodes=37 <= 226.927570)
                                                                @ 99  java.util.Map.size():int (0 bytes)   not inlining no type profile exists
                                                                @ 107  java.util.Map.size():int (0 bytes)   not inlining no type profile exists
                                                                @ 114  java.util.Map.size():int (0 bytes)   not inlining no type profile exists
                                                                  @ 123  java.lang.Math.max(int, int):int (11 bytes)   trivial (relevance=0.189106, probability=0.004819, bonus=1.000000, nodes=7)
                            @ 12  java.lang.StringBuilder.<init>():void (7 bytes)   inline method (bytecode parsing)
                            @ 17  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 21  java.lang.StringBuilder.append(int):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 24  java.lang.StringBuilder.toString():String (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.String.<init>(StringBuilder):void (7 bytes)   inline method (bytecode parsing)
                            @ 27  java.lang.IllegalArgumentException.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  java.lang.RuntimeException.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                                @ 2  java.lang.Exception.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                                                                    @ 36  java.util.HashMap.calculateHashMapCapacity(int):int (11 bytes)   trivial (relevance=0.189106, probability=0.002410, bonus=1.000000, nodes=9)
                            @ 2  java.util.HashMap.<init>(int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  java.util.AbstractMap.<init>():void (5 bytes)   inline method (bytecode parsing)
                                                                        @ 51  java.lang.Float.isNaN(float):boolean (12 bytes)   trivial (relevance=0.189106, probability=0.002410, bonus=1.000000, nodes=5)
                                                                        @ 91  java.util.HashMap.tableSizeFor(int):int (32 bytes)   relevance-based (relevance=0.189106, probability=0.002410, bonus=1.000000, nodes=23 <= 56.731893)
                                                                      @ 4  java.util.HashMap.<init>(int, float):void (98 bytes)   relevance-based (relevance=0.189106, probability=0.002410, bonus=1.000000, nodes=36 <= 56.731893)
                                                                    @ 39  java.util.LinkedHashMap.<init>(int):void (16 bytes)   relevance-based (relevance=0.189106, probability=0.002410, bonus=1.000000, nodes=43 <= 56.731893)
                                                                  @ 126  java.util.LinkedHashMap.newLinkedHashMap(int):LinkedHashMap (43 bytes)   not inlining relevance-based (relevance=0.189106, probability=0.004819, bonus=1.000000, nodes=83 > 56.731893)
                                                                @ 137  java.util.Map$Entry.getValue():Object (0 bytes)   not inlining no type profile exists
                 n                                                    @ 9  java.lang.Object.hashCode():int (0 bytes)   trivial (relevance=0.378213, probability=0.009638, bonus=1.000000, nodes=5)
                                                                    @ 2  java.util.HashMap.hash(Object):int (20 bytes)   relevance-based (relevance=0.378213, probability=0.009638, bonus=1.000000, nodes=13 <= 113.463785)
                                                                    @ 9  java.util.HashMap.putVal(int, Object, Object, boolean, boolean):Object (300 bytes)   not inlining too large previous low-level graph (low-level-nodes: 766, relevance=0.378213, probability=0.009638, bonus=1.000000, nodes=166)
                                                                  @ 145  java.util.HashMap.put(Object, Object):Object (13 bytes)   relevance-based (relevance=0.378213, probability=0.009638, bonus=1.000000, nodes=21 <= 113.463785)
                                                                      @ 4  java.util.Map.size():int (0 bytes)   not inlining no type profile exists
                                                                      @ 1  java.util.HashMap.size():int (5 bytes)   relevance-based (relevance=1.238566, probability=0.019276, bonus=1.000000, nodes=13 <= 300.000000)
                                                                      @ 62  java.util.HashMap.tableSizeFor(int):int (32 bytes)   relevance-based (relevance=0.203822, probability=0.004342, bonus=1.000000, nodes=23 <= 61.146460)
                            @ 15  java.util.HashMap$EntrySet.<init>(HashMap):void (10 bytes)   inline method (bytecode parsing)
                              @ 6  java.util.AbstractSet.<init>():void (5 bytes)   inline method (bytecode parsing)
                                @ 1  java.util.AbstractCollection.<init>():void (5 bytes)   inline method (bytecode parsing)
                            @ 21  java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet.<init>(Set):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  java.util.Collections$UnmodifiableSet.<init>(Set):void (6 bytes)   inline method (bytecode parsing)
                                                                      @ 16  java.util.Map.entrySet():Set (0 bytes)   not inlining no type profile exists
                                                                        @ 2  java.util.Collections$UnmodifiableCollection.<init>(Collection):void (22 bytes)   relevance-based (relevance=0.255674, probability=0.001578, bonus=1.000000, nodes=10 <= 76.702234)
                                                                      @ 98  java.util.HashMap.entrySet():Set (27 bytes)   relevance-based (relevance=0.352226, probability=0.007504, bonus=1.000000, nodes=50 <= 105.667846)
                            @ 8  java.util.HashMap$EntryIterator.<init>(HashMap):void (6 bytes)   inline method (bytecode parsing)
                                                                        @ 17  java.util.Collection.iterator():Iterator (0 bytes)   not inlining no type profile exists
                                                                        @ 5  java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1.<init>(Collections$UnmodifiableMap$UnmodifiableEntrySet):void (26 bytes)   relevance-based (relevance=0.255674, probability=0.003156, bonus=1.000000, nodes=15 <= 76.702234)
                                                                        @ 2  java.util.HashMap$HashIterator.<init>(HashMap):void (79 bytes)   not inlining too large previous low-level graph (low-level-nodes: 409, relevance=0.352226, probability=0.004348, bonus=1.000000, nodes=58)
                                                                      @ 103  java.util.HashMap$EntrySet.iterator():Iterator (12 bytes)   relevance-based (relevance=0.352226, probability=0.007504, bonus=1.000000, nodes=26 <= 105.667846)
                                                                        @ 4  java.util.HashMap$HashIterator.hasNext():boolean (13 bytes)   trivial (relevance=0.435973, probability=0.022092, bonus=1.000000, nodes=9)
                                                                      @ 112  java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1.hasNext():boolean (10 bytes)   relevance-based (relevance=0.435973, probability=0.039064, bonus=1.000000, nodes=27 <= 130.791826)
                                                                    @ 3  java.util.HashMap.putMapEntries(Map, boolean):void (170 bytes)   not inlining relevance-based (relevance=0.756425, probability=0.019276, bonus=1.000000, nodes=234 > 226.927570)
                                                                  @ 168  java.util.HashMap.putAll(Map):void (7 bytes)   trivial (relevance=0.756425, probability=0.019276, bonus=1.000000, nodes=9)
                                                                  @ 181  java.lang.Class$AnnotationData.<init>(Map, Map, int):void (20 bytes)   relevance-based (relevance=1.512850, probability=0.038553, bonus=1.000000, nodes=14 <= 300.000000)
                                                                @ 26  java.lang.Class.createAnnotationData(int):Class$AnnotationData (185 bytes)   not inlining callee invoke probability is too high (invokeP=7.763798, relevance=2.269276, probability=0.038553, bonus=1.000000, nodes=267)
                                                                @ 33  java.lang.Class$Atomic.casAnnotationData(Class, Class$AnnotationData, Class$AnnotationData):boolean (13 bytes)   trivial (relevance=2.269276, probability=0.038553, bonus=1.000000, nodes=9)
                                                              @ 26  java.lang.Class.annotationData():Class$AnnotationData (44 bytes)   relevance-based (relevance=0.756425, probability=0.032127, bonus=1.000000, nodes=44 <= 226.927570)
                                                            @ 36  java.util.Map.entrySet():Set (0 bytes)   not inlining no type profile exists
                                                            @ 41  java.util.Set.iterator():Iterator (0 bytes)   not inlining no type profile exists
                                                            @ 50  java.util.Iterator.hasNext():boolean (0 bytes)   not inlining no type profile exists
                                                            @ 60  java.util.Iterator.next():Object (0 bytes)   not inlining no type profile exists
                                                            @ 72  java.util.Map$Entry.getKey():Object (0 bytes)   not inlining no type profile exists
                            @ 0  jdk.internal.access.SharedSecrets.getJavaLangAccess():JavaLangAccess (4 bytes)   inline method (bytecode parsing)
                            @ 1  java.lang.Class.getAnnotationType():AnnotationType (5 bytes)   inline accessor method (bytecode parsing)
                                                                @ 6  java.lang.System$2.getAnnotationType(Class):AnnotationType (5 bytes)   relevance-based (relevance=0.758545, probability=0.032127, bonus=1.000000, nodes=10 <= 227.563459)
                            @ 17  java.lang.IllegalArgumentException.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  java.lang.RuntimeException.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                                @ 2  java.lang.Exception.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                            @ 27  sun.reflect.annotation.AnnotationType$1.<init>(AnnotationType, Class):void (10 bytes)   inline method (bytecode parsing)
                            @ 30  java.security.AccessController.doPrivileged(PrivilegedAction):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.security.AccessController.executePrivileged(PrivilegedAction, AccessControlContext, Class):Object (65 bytes)   inline method (bytecode parsing)
                                @ 29  sun.reflect.annotation.AnnotationType$1.run():Object (5 bytes)   inline method (bytecode parsing)
                                  @ 1  sun.reflect.annotation.AnnotationType$1.run():Method[] (8 bytes)   inline method (bytecode parsing)
                            @ 59  java.util.HashMap.<init>(int):void (8 bytes)   inline method (bytecode parsing)
                            @ 105  java.lang.reflect.Method.getModifiers():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 116  java.lang.reflect.Method.getModifiers():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 127  java.lang.reflect.Method.isSynthetic():boolean (5 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.reflect.Executable.isSynthetic():boolean (8 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.reflect.Method.getModifiers():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 135  java.lang.reflect.Method.getParameterCount():int (6 bytes)   inline method (bytecode parsing)
                            @ 171  java.lang.reflect.Method.getName():String (5 bytes)   inline accessor method (bytecode parsing)
                            @ 178  java.lang.reflect.Method.getReturnType():Class (5 bytes)   inline accessor method (bytecode parsing)
                            @ 149  java.lang.StringBuilder.<init>():void (7 bytes)   inline method (bytecode parsing)
                            @ 154  java.lang.StringBuilder.append(Object):StringBuilder (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 159  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 162  java.lang.StringBuilder.toString():String (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.String.<init>(StringBuilder):void (7 bytes)   inline method (bytecode parsing)
                            @ 165  java.lang.IllegalArgumentException.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  java.lang.RuntimeException.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                                @ 2  java.lang.Exception.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                            @ 258  jdk.internal.access.SharedSecrets.getJavaLangAccess():JavaLangAccess (4 bytes)   inline method (bytecode parsing)
                                                                @ 21  sun.reflect.annotation.AnnotationType.<init>(Class):void (361 bytes)   not inlining relevance-based (relevance=0.002120, probability=0.000090, bonus=1.000000, nodes=244 > 0.635889)
                            @ 3  java.lang.Class.casAnnotationType(AnnotationType, AnnotationType):boolean (7 bytes)   inline method (bytecode parsing)
                                                                @ 29  java.lang.System$2.casAnnotationType(Class, AnnotationType, AnnotationType):boolean (7 bytes)   not inlining relevance-based (relevance=0.002120, probability=0.000090, bonus=1.000000, nodes=13 > 0.635889)
                                                              @ 84  sun.reflect.annotation.AnnotationType.getInstance(Class):AnnotationType (65 bytes)   relevance-based (relevance=0.756425, probability=0.032127, bonus=1.000000, nodes=37 <= 226.927570)
                                                            @ 99  java.util.Map.size():int (0 bytes)   not inlining no type profile exists
                                                            @ 107  java.util.Map.size():int (0 bytes)   not inlining no type profile exists
                                                            @ 114  java.util.Map.size():int (0 bytes)   not inlining no type profile exists
                                                              @ 123  java.lang.Math.max(int, int):int (11 bytes)   trivial (relevance=0.189106, probability=0.008032, bonus=1.000000, nodes=7)
                            @ 12  java.lang.StringBuilder.<init>():void (7 bytes)   inline method (bytecode parsing)
                            @ 17  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 21  java.lang.StringBuilder.append(int):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 24  java.lang.StringBuilder.toString():String (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.String.<init>(StringBuilder):void (7 bytes)   inline method (bytecode parsing)
                            @ 27  java.lang.IllegalArgumentException.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  java.lang.RuntimeException.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                                @ 2  java.lang.Exception.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                                                                @ 36  java.util.HashMap.calculateHashMapCapacity(int):int (11 bytes)   trivial (relevance=0.189106, probability=0.004016, bonus=1.000000, nodes=9)
                            @ 2  java.util.HashMap.<init>(int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  java.util.AbstractMap.<init>():void (5 bytes)   inline method (bytecode parsing)
                                                                    @ 51  java.lang.Float.isNaN(float):boolean (12 bytes)   trivial (relevance=0.189106, probability=0.004016, bonus=1.000000, nodes=5)
                                                                    @ 91  java.util.HashMap.tableSizeFor(int):int (32 bytes)   relevance-based (relevance=0.189106, probability=0.004016, bonus=1.000000, nodes=23 <= 56.731893)
                                                                  @ 4  java.util.HashMap.<init>(int, float):void (98 bytes)   relevance-based (relevance=0.189106, probability=0.004016, bonus=1.000000, nodes=36 <= 56.731893)
                                                                @ 39  java.util.LinkedHashMap.<init>(int):void (16 bytes)   relevance-based (relevance=0.189106, probability=0.004016, bonus=1.000000, nodes=43 <= 56.731893)
                                                              @ 126  java.util.LinkedHashMap.newLinkedHashMap(int):LinkedHashMap (43 bytes)   not inlining relevance-based (relevance=0.189106, probability=0.008032, bonus=1.000000, nodes=83 > 56.731893)
                                                            @ 137  java.util.Map$Entry.getValue():Object (0 bytes)   not inlining no type profile exists
                 n                                                @ 9  java.lang.Object.hashCode():int (0 bytes)   trivial (relevance=0.378213, probability=0.016064, bonus=1.000000, nodes=5)
                                                                @ 2  java.util.HashMap.hash(Object):int (20 bytes)   relevance-based (relevance=0.378213, probability=0.016064, bonus=1.000000, nodes=13 <= 113.463785)
                                                                @ 9  java.util.HashMap.putVal(int, Object, Object, boolean, boolean):Object (300 bytes)   not inlining too large previous low-level graph (low-level-nodes: 766, relevance=0.378213, probability=0.016064, bonus=1.000000, nodes=166)
                                                              @ 145  java.util.HashMap.put(Object, Object):Object (13 bytes)   relevance-based (relevance=0.378213, probability=0.016064, bonus=1.000000, nodes=21 <= 113.463785)
                                                                  @ 4  java.util.Map.size():int (0 bytes)   not inlining no type profile exists
                                                                  @ 1  java.util.HashMap.size():int (5 bytes)   relevance-based (relevance=1.238566, probability=0.032127, bonus=1.000000, nodes=13 <= 300.000000)
                                                                  @ 62  java.util.HashMap.tableSizeFor(int):int (32 bytes)   relevance-based (relevance=0.203822, probability=0.007237, bonus=1.000000, nodes=23 <= 61.146460)
                            @ 15  java.util.HashMap$EntrySet.<init>(HashMap):void (10 bytes)   inline method (bytecode parsing)
                              @ 6  java.util.AbstractSet.<init>():void (5 bytes)   inline method (bytecode parsing)
                                @ 1  java.util.AbstractCollection.<init>():void (5 bytes)   inline method (bytecode parsing)
                            @ 21  java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet.<init>(Set):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  java.util.Collections$UnmodifiableSet.<init>(Set):void (6 bytes)   inline method (bytecode parsing)
                                                                  @ 16  java.util.Map.entrySet():Set (0 bytes)   not inlining no type profile exists
                                                                    @ 2  java.util.Collections$UnmodifiableCollection.<init>(Collection):void (22 bytes)   relevance-based (relevance=0.255674, probability=0.002630, bonus=1.000000, nodes=10 <= 76.702234)
                                                                  @ 98  java.util.HashMap.entrySet():Set (27 bytes)   relevance-based (relevance=0.352226, probability=0.012506, bonus=1.000000, nodes=50 <= 105.667846)
                            @ 8  java.util.HashMap$EntryIterator.<init>(HashMap):void (6 bytes)   inline method (bytecode parsing)
                                                                    @ 17  java.util.Collection.iterator():Iterator (0 bytes)   not inlining no type profile exists
                                                                    @ 5  java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1.<init>(Collections$UnmodifiableMap$UnmodifiableEntrySet):void (26 bytes)   relevance-based (relevance=0.255674, probability=0.005260, bonus=1.000000, nodes=15 <= 76.702234)
                                                                    @ 2  java.util.HashMap$HashIterator.<init>(HashMap):void (79 bytes)   not inlining too large previous low-level graph (low-level-nodes: 409, relevance=0.352226, probability=0.007246, bonus=1.000000, nodes=58)
                                                                  @ 103  java.util.HashMap$EntrySet.iterator():Iterator (12 bytes)   relevance-based (relevance=0.352226, probability=0.012506, bonus=1.000000, nodes=26 <= 105.667846)
                                                                    @ 4  java.util.HashMap$HashIterator.hasNext():boolean (13 bytes)   trivial (relevance=0.435973, probability=0.036820, bonus=1.000000, nodes=9)
                                                                  @ 112  java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1.hasNext():boolean (10 bytes)   relevance-based (relevance=0.435973, probability=0.065106, bonus=1.000000, nodes=27 <= 130.791826)
                                                                @ 3  java.util.HashMap.putMapEntries(Map, boolean):void (170 bytes)   not inlining relevance-based (relevance=0.756425, probability=0.032127, bonus=1.000000, nodes=234 > 226.927570)
                                                              @ 168  java.util.HashMap.putAll(Map):void (7 bytes)   trivial (relevance=0.756425, probability=0.032127, bonus=1.000000, nodes=9)
                                                              @ 181  java.lang.Class$AnnotationData.<init>(Map, Map, int):void (20 bytes)   relevance-based (relevance=1.512850, probability=0.064255, bonus=1.000000, nodes=14 <= 300.000000)
                                                            @ 26  java.lang.Class.createAnnotationData(int):Class$AnnotationData (185 bytes)   not inlining callee invoke probability is too high (invokeP=7.763798, relevance=2.269276, probability=0.064255, bonus=1.000000, nodes=267)
                                                            @ 33  java.lang.Class$Atomic.casAnnotationData(Class, Class$AnnotationData, Class$AnnotationData):boolean (13 bytes)   trivial (relevance=2.269276, probability=0.064255, bonus=1.000000, nodes=9)
                                                          @ 26  java.lang.Class.annotationData():Class$AnnotationData (44 bytes)   relevance-based (relevance=0.756425, probability=0.053546, bonus=1.000000, nodes=44 <= 226.927570)
                                                        @ 36  java.util.Map.entrySet():Set (0 bytes)   not inlining no type profile exists
                                                        @ 41  java.util.Set.iterator():Iterator (0 bytes)   not inlining no type profile exists
                                                        @ 50  java.util.Iterator.hasNext():boolean (0 bytes)   not inlining no type profile exists
                                                        @ 60  java.util.Iterator.next():Object (0 bytes)   not inlining no type profile exists
                                                        @ 72  java.util.Map$Entry.getKey():Object (0 bytes)   not inlining no type profile exists
                            @ 0  jdk.internal.access.SharedSecrets.getJavaLangAccess():JavaLangAccess (4 bytes)   inline method (bytecode parsing)
                            @ 1  java.lang.Class.getAnnotationType():AnnotationType (5 bytes)   inline accessor method (bytecode parsing)
                                                            @ 6  java.lang.System$2.getAnnotationType(Class):AnnotationType (5 bytes)   relevance-based (relevance=0.758545, probability=0.053546, bonus=1.000000, nodes=10 <= 227.563459)
                            @ 17  java.lang.IllegalArgumentException.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  java.lang.RuntimeException.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                                @ 2  java.lang.Exception.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                            @ 27  sun.reflect.annotation.AnnotationType$1.<init>(AnnotationType, Class):void (10 bytes)   inline method (bytecode parsing)
                            @ 30  java.security.AccessController.doPrivileged(PrivilegedAction):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.security.AccessController.executePrivileged(PrivilegedAction, AccessControlContext, Class):Object (65 bytes)   inline method (bytecode parsing)
                                @ 29  sun.reflect.annotation.AnnotationType$1.run():Object (5 bytes)   inline method (bytecode parsing)
                                  @ 1  sun.reflect.annotation.AnnotationType$1.run():Method[] (8 bytes)   inline method (bytecode parsing)
                            @ 59  java.util.HashMap.<init>(int):void (8 bytes)   inline method (bytecode parsing)
                            @ 105  java.lang.reflect.Method.getModifiers():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 116  java.lang.reflect.Method.getModifiers():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 127  java.lang.reflect.Method.isSynthetic():boolean (5 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.reflect.Executable.isSynthetic():boolean (8 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.reflect.Method.getModifiers():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 135  java.lang.reflect.Method.getParameterCount():int (6 bytes)   inline method (bytecode parsing)
                            @ 171  java.lang.reflect.Method.getName():String (5 bytes)   inline accessor method (bytecode parsing)
                            @ 178  java.lang.reflect.Method.getReturnType():Class (5 bytes)   inline accessor method (bytecode parsing)
                            @ 149  java.lang.StringBuilder.<init>():void (7 bytes)   inline method (bytecode parsing)
                            @ 154  java.lang.StringBuilder.append(Object):StringBuilder (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 159  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 162  java.lang.StringBuilder.toString():String (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.String.<init>(StringBuilder):void (7 bytes)   inline method (bytecode parsing)
                            @ 165  java.lang.IllegalArgumentException.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  java.lang.RuntimeException.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                                @ 2  java.lang.Exception.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                            @ 258  jdk.internal.access.SharedSecrets.getJavaLangAccess():JavaLangAccess (4 bytes)   inline method (bytecode parsing)
                                                            @ 21  sun.reflect.annotation.AnnotationType.<init>(Class):void (361 bytes)   not inlining relevance-based (relevance=0.002120, probability=0.000150, bonus=1.000000, nodes=244 > 0.635889)
                            @ 3  java.lang.Class.casAnnotationType(AnnotationType, AnnotationType):boolean (7 bytes)   inline method (bytecode parsing)
                                                            @ 29  java.lang.System$2.casAnnotationType(Class, AnnotationType, AnnotationType):boolean (7 bytes)   not inlining relevance-based (relevance=0.002120, probability=0.000150, bonus=1.000000, nodes=13 > 0.635889)
                                                          @ 84  sun.reflect.annotation.AnnotationType.getInstance(Class):AnnotationType (65 bytes)   relevance-based (relevance=0.756425, probability=0.053546, bonus=1.000000, nodes=37 <= 226.927570)
                                                        @ 99  java.util.Map.size():int (0 bytes)   not inlining no type profile exists
                                                        @ 107  java.util.Map.size():int (0 bytes)   not inlining no type profile exists
                                                        @ 114  java.util.Map.size():int (0 bytes)   not inlining no type profile exists
                                                          @ 123  java.lang.Math.max(int, int):int (11 bytes)   trivial (relevance=0.189106, probability=0.013386, bonus=1.000000, nodes=7)
                            @ 12  java.lang.StringBuilder.<init>():void (7 bytes)   inline method (bytecode parsing)
                            @ 17  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 21  java.lang.StringBuilder.append(int):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 24  java.lang.StringBuilder.toString():String (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.String.<init>(StringBuilder):void (7 bytes)   inline method (bytecode parsing)
                            @ 27  java.lang.IllegalArgumentException.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  java.lang.RuntimeException.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                                @ 2  java.lang.Exception.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                                                            @ 36  java.util.HashMap.calculateHashMapCapacity(int):int (11 bytes)   trivial (relevance=0.189106, probability=0.006693, bonus=1.000000, nodes=9)
                            @ 2  java.util.HashMap.<init>(int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  java.util.AbstractMap.<init>():void (5 bytes)   inline method (bytecode parsing)
                                                                @ 51  java.lang.Float.isNaN(float):boolean (12 bytes)   trivial (relevance=0.189106, probability=0.006693, bonus=1.000000, nodes=5)
                                                                @ 91  java.util.HashMap.tableSizeFor(int):int (32 bytes)   relevance-based (relevance=0.189106, probability=0.006693, bonus=1.000000, nodes=23 <= 56.731893)
                                                              @ 4  java.util.HashMap.<init>(int, float):void (98 bytes)   relevance-based (relevance=0.189106, probability=0.006693, bonus=1.000000, nodes=36 <= 56.731893)
                                                            @ 39  java.util.LinkedHashMap.<init>(int):void (16 bytes)   relevance-based (relevance=0.189106, probability=0.006693, bonus=1.000000, nodes=43 <= 56.731893)
                                                          @ 126  java.util.LinkedHashMap.newLinkedHashMap(int):LinkedHashMap (43 bytes)   not inlining relevance-based (relevance=0.189106, probability=0.013386, bonus=1.000000, nodes=83 > 56.731893)
                                                        @ 137  java.util.Map$Entry.getValue():Object (0 bytes)   not inlining no type profile exists
                 n                                            @ 9  java.lang.Object.hashCode():int (0 bytes)   trivial (relevance=0.378213, probability=0.026773, bonus=1.000000, nodes=5)
                                                            @ 2  java.util.HashMap.hash(Object):int (20 bytes)   relevance-based (relevance=0.378213, probability=0.026773, bonus=1.000000, nodes=13 <= 113.463785)
                                                            @ 9  java.util.HashMap.putVal(int, Object, Object, boolean, boolean):Object (300 bytes)   not inlining too large previous low-level graph (low-level-nodes: 766, relevance=0.378213, probability=0.026773, bonus=1.000000, nodes=166)
                                                          @ 145  java.util.HashMap.put(Object, Object):Object (13 bytes)   relevance-based (relevance=0.378213, probability=0.026773, bonus=1.000000, nodes=21 <= 113.463785)
                                                              @ 4  java.util.Map.size():int (0 bytes)   not inlining no type profile exists
                                                              @ 1  java.util.HashMap.size():int (5 bytes)   relevance-based (relevance=1.238566, probability=0.053546, bonus=1.000000, nodes=13 <= 300.000000)
                                                              @ 62  java.util.HashMap.tableSizeFor(int):int (32 bytes)   relevance-based (relevance=0.203822, probability=0.012062, bonus=1.000000, nodes=23 <= 61.146460)
                            @ 15  java.util.HashMap$EntrySet.<init>(HashMap):void (10 bytes)   inline method (bytecode parsing)
                              @ 6  java.util.AbstractSet.<init>():void (5 bytes)   inline method (bytecode parsing)
                                @ 1  java.util.AbstractCollection.<init>():void (5 bytes)   inline method (bytecode parsing)
                            @ 21  java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet.<init>(Set):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  java.util.Collections$UnmodifiableSet.<init>(Set):void (6 bytes)   inline method (bytecode parsing)
                                                              @ 16  java.util.Map.entrySet():Set (0 bytes)   not inlining no type profile exists
                                                                @ 2  java.util.Collections$UnmodifiableCollection.<init>(Collection):void (22 bytes)   relevance-based (relevance=0.255674, probability=0.004383, bonus=1.000000, nodes=10 <= 76.702234)
                                                              @ 98  java.util.HashMap.entrySet():Set (27 bytes)   relevance-based (relevance=0.352226, probability=0.020844, bonus=1.000000, nodes=50 <= 105.667846)
                            @ 8  java.util.HashMap$EntryIterator.<init>(HashMap):void (6 bytes)   inline method (bytecode parsing)
                                                                @ 17  java.util.Collection.iterator():Iterator (0 bytes)   not inlining no type profile exists
                                                                @ 5  java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1.<init>(Collections$UnmodifiableMap$UnmodifiableEntrySet):void (26 bytes)   relevance-based (relevance=0.255674, probability=0.008767, bonus=1.000000, nodes=15 <= 76.702234)
                                                                @ 2  java.util.HashMap$HashIterator.<init>(HashMap):void (79 bytes)   not inlining too large previous low-level graph (low-level-nodes: 409, relevance=0.352226, probability=0.012077, bonus=1.000000, nodes=58)
                                                              @ 103  java.util.HashMap$EntrySet.iterator():Iterator (12 bytes)   relevance-based (relevance=0.352226, probability=0.020844, bonus=1.000000, nodes=26 <= 105.667846)
                                                                @ 4  java.util.HashMap$HashIterator.hasNext():boolean (13 bytes)   trivial (relevance=0.435973, probability=0.061367, bonus=1.000000, nodes=9)
                                                              @ 112  java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1.hasNext():boolean (10 bytes)   relevance-based (relevance=0.435973, probability=0.108510, bonus=1.000000, nodes=27 <= 130.791826)
                                                            @ 3  java.util.HashMap.putMapEntries(Map, boolean):void (170 bytes)   not inlining relevance-based (relevance=0.756425, probability=0.053546, bonus=1.000000, nodes=234 > 226.927570)
                                                          @ 168  java.util.HashMap.putAll(Map):void (7 bytes)   trivial (relevance=0.756425, probability=0.053546, bonus=1.000000, nodes=9)
                                                          @ 181  java.lang.Class$AnnotationData.<init>(Map, Map, int):void (20 bytes)   relevance-based (relevance=1.512850, probability=0.107091, bonus=1.000000, nodes=14 <= 300.000000)
                                                        @ 26  java.lang.Class.createAnnotationData(int):Class$AnnotationData (185 bytes)   not inlining callee invoke probability is too high (invokeP=7.763798, relevance=3.000000, probability=0.107091, bonus=1.000000, nodes=267)
                                                        @ 33  java.lang.Class$Atomic.casAnnotationData(Class, Class$AnnotationData, Class$AnnotationData):boolean (13 bytes)   trivial (relevance=3.000000, probability=0.107091, bonus=1.000000, nodes=9)
                                                      @ 6  java.lang.Class.annotationData():Class$AnnotationData (44 bytes)   relevance-based (relevance=1.000000, probability=0.089243, bonus=1.000000, nodes=44 <= 300.000000)
                                                    @ 13  java.util.Map.get(Object):Object (0 bytes)   not inlining no type profile exists
                                                    @ 14  java.lang.Class.getAnnotation(Class):Annotation (22 bytes)   relevance-based (relevance=2.736505, probability=0.089243, bonus=1.000000, nodes=57 <= 300.000000)
                            @ 1  java.lang.reflect.Method.getName():String (5 bytes)   inline accessor method (bytecode parsing)
                            @ 7  java.lang.reflect.Method.getParameterCount():int (6 bytes)   inline method (bytecode parsing)
                                                              @ 9  java.lang.String.hashCode():int (60 bytes)   trivial (relevance=1.000000, probability=0.083429, bonus=1.000000, nodes=5)
                                                            @ 23  java.util.HashMap.hash(Object):int (20 bytes)   trivial (relevance=1.539847, probability=0.083429, bonus=1.000000, nodes=5)
                                                            @ 95  java.util.HashMap$TreeNode.getTreeNode(int, Object):HashMap$TreeNode (22 bytes)   not inlining relevance-based (relevance=0.001076, probability=0.000058, bonus=1.000000, nodes=23 > 0.322854)
                                                            @ 63  java.lang.String.equals(Object):boolean (56 bytes)   relevance-based (relevance=1.000000, probability=0.054180, bonus=1.000000, nodes=46 <= 300.000000)
                                                            @ 128  java.lang.String.equals(Object):boolean (56 bytes)   relevance-based (relevance=0.391167, probability=0.018798, bonus=1.000000, nodes=46 <= 117.349981)
                                                          @ 2  java.util.HashMap.getNode(Object):HashMap$Node (150 bytes)   relevance-based (relevance=1.403955, probability=0.089243, bonus=1.000000, nodes=173 <= 300.000000)
                                                          @ 21  java.util.LinkedHashMap.afterNodeAccess(HashMap$Node):void (266 bytes)   not inlining relevance-based (relevance=0.208760, probability=0.013964, bonus=1.000000, nodes=72 > 62.628082)
                                                        @ 105  java.util.LinkedHashMap.get(Object):Object (29 bytes)   relevance-based (relevance=0.770312, probability=0.089243, bonus=1.000000, nodes=186 <= 231.093556)
                                                      @ 9  sun.reflect.annotation.AnnotationInvocationHandler.invoke(Object, Method, Object[]):Object (182 bytes)   not inlining relevance-based (relevance=0.663807, probability=0.089243, bonus=1.000000, nodes=228 > 199.142133)
                                                    @ 22  com.sun.proxy.jdk.proxy2.$Proxy1.shortName():String (29 bytes)   relevance-based (relevance=0.663807, probability=0.089243, bonus=1.000000, nodes=16 <= 199.142133)
                                                  @ 60  jdk.graal.compiler.graph.NodeClass.shortName():String (112 bytes)   not inlining relevance-based (relevance=0.663807, probability=0.178486, bonus=1.000000, nodes=210 > 199.142133)
                                                @ 23  jdk.graal.compiler.graph.Node.toString(Verbosity):String (220 bytes)   trivial (relevance=0.663807, probability=0.178486, bonus=1.000000, nodes=9)
                                              @ 75  jdk.graal.compiler.nodes.FrameState.toString(Verbosity):String (68 bytes)   relevance-based (relevance=0.663807, probability=0.178486, bonus=1.000000, nodes=10 <= 199.142133)
                                            @ 64  jdk.graal.compiler.graph.Node.toString(Verbosity):String (220 bytes)   relevance-based (relevance=0.663807, probability=0.178486, bonus=1.000000, nodes=17 <= 199.142133)
                                          @ 4  jdk.graal.compiler.nodes.FrameState.toString(Verbosity):String (68 bytes)   relevance-based (relevance=0.663807, probability=0.178486, bonus=1.000000, nodes=18 <= 199.142133)
                                        @ 25  jdk.graal.compiler.graph.NodeIdAccessor.getNodeId(Node):int (45 bytes)   relevance-based (relevance=0.663807, probability=0.356971, bonus=1.000000, nodes=29 <= 199.142133)
                                      @ 2  jdk.graal.compiler.graph.NodeBitMap.mark(Node):void (45 bytes)   relevance-based (relevance=0.663807, probability=0.356971, bonus=1.000000, nodes=39 <= 199.142133)
                                    @ 2  jdk.graal.compiler.nodes.loop.LoopFragment$$Lambda/0x00007f45e02f4988.apply(VirtualState):void (9 bytes)   relevance-based (relevance=0.663807, probability=0.356971, bonus=1.000000, nodes=45 <= 199.142133)
                                  @ 7  jdk.graal.compiler.nodes.FrameState.applyToVirtual(VirtualState$VirtualClosure):void (65 bytes)   not inlining relevance-based (relevance=0.331904, probability=0.356971, bonus=1.000000, nodes=100 > 99.571066)
                                @ 8  jdk.graal.compiler.nodes.loop.LoopFragment.lambda$computeNodes$1(NodeBitMap, FrameState):void (11 bytes)   relevance-based (relevance=0.331904, probability=0.356971, bonus=1.000000, nodes=17 <= 99.571066)
                              @ 30  jdk.graal.compiler.nodes.loop.LoopFragment$$Lambda/0x00007f45e02f4560.accept(Object):void (12 bytes)   relevance-based (relevance=0.331904, probability=0.496790, bonus=1.000000, nodes=39 <= 99.571066)
                              @ 5  java.util.regex.Pattern.lambda$Single$14(int, int):boolean (11 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=9)
                              @ 4  java.lang.String.valueOf(boolean):String (14 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=16 <= 300.000000)
                              @ 1  java.util.IdentityHashMap.maskNull(Object):Object (12 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=6)
                              @ 19  java.util.IdentityHashMap.hash(Object, int):int (18 bytes)   relevance-based (relevance=1.000000, probability=1.010754, bonus=1.000000, nodes=15 <= 300.000000)
                              @ 65  java.util.IdentityHashMap.nextKeyIndex(int, int):int (15 bytes)   trivial (relevance=0.912329, probability=0.922140, bonus=1.000000, nodes=9)
                                @ 1  java.util.IdentityHashMap.maskNull(Object):Object (12 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=6)
                              @ 96  java.util.IdentityHashMap.resize(int):boolean (153 bytes)   not inlining relevance-based (relevance=0.010639, probability=0.010754, bonus=1.000000, nodes=66 > 3.191822)
                                @ 19  java.util.IdentityHashMap.hash(Object, int):int (18 bytes)   relevance-based (relevance=1.000000, probability=1.010752, bonus=1.000000, nodes=15 <= 300.000000)
                                @ 65  java.util.IdentityHashMap.nextKeyIndex(int, int):int (15 bytes)   trivial (relevance=0.912186, probability=0.921994, bonus=1.000000, nodes=9)
                                @ 96  java.util.IdentityHashMap.resize(int):boolean (153 bytes)   not inlining relevance-based (relevance=0.010638, probability=0.010752, bonus=1.000000, nodes=66 > 3.191323)
                              @ 8  java.util.IdentityHashMap.put(Object, Object):Object (137 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=79 <= 300.000000)
                            @ 2  java.lang.ThreadLocal.getMap(Thread):ThreadLocal$ThreadLocalMap (5 bytes)   inline method (bytecode parsing)
                            @ 26  java.lang.ref.Reference.refersTo(Object):boolean (6 bytes)   inline method (bytecode parsing)
                              @ 2  java.lang.ref.Reference.refersToImpl(Object):boolean (6 bytes)   inline method (bytecode parsing)
                            @ 26  java.lang.ref.Reference.refersTo(Object):boolean (6 bytes)   inline method (bytecode parsing)
                              @ 2  java.lang.ref.Reference.refersToImpl(Object):boolean (6 bytes)   inline method (bytecode parsing)
                              @ 12  java.lang.ThreadLocal$ThreadLocalMap.getEntry(ThreadLocal):ThreadLocal$ThreadLocalMap$Entry (42 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=21 <= 300.000000)
                                  @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=9)
                            @ 3  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                                  @ 12  java.lang.StringLatin1.charAt(byte[], int):char (15 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=11 <= 300.000000)
                                @ 14  java.lang.String.charAt(int):char (25 bytes)   relevance-based (relevance=1.703638, probability=0.500000, bonus=1.000000, nodes=16 <= 300.000000)
                            @ 9  java.util.regex.Pattern.lambda$Range$17(int, int, int):boolean (7 bytes)   inline method (bytecode parsing)
                                      @ 3  java.util.regex.Pattern.inRange(int, int, int):boolean (16 bytes)   relevance-based (relevance=0.466017, probability=0.044203, bonus=1.000000, nodes=11 <= 139.804957)
                            @ 9  java.util.regex.Pattern.lambda$Range$17(int, int, int):boolean (7 bytes)   inline method (bytecode parsing)
                                          @ 3  java.util.regex.Pattern.inRange(int, int, int):boolean (16 bytes)   relevance-based (relevance=0.466017, probability=0.022101, bonus=1.000000, nodes=11 <= 139.804957)
                                @ 8  java.util.regex.ASCII.isDigit(int):boolean (18 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=13 <= 300.000000)
                              @ 1  java.util.regex.CharPredicates.lambda$ASCII_DIGIT$18(int):boolean (20 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=16 <= 300.000000)
                            @ 9  java.util.regex.Pattern.lambda$Range$17(int, int, int):boolean (7 bytes)   inline method (bytecode parsing)
                                              @ 3  java.util.regex.Pattern.inRange(int, int, int):boolean (16 bytes)   relevance-based (relevance=0.466017, probability=0.011051, bonus=1.000000, nodes=11 <= 139.804957)
                            @ 9  java.util.regex.Pattern.lambda$Range$17(int, int, int):boolean (7 bytes)   inline method (bytecode parsing)
                                                  @ 3  java.util.regex.Pattern.inRange(int, int, int):boolean (16 bytes)   relevance-based (relevance=0.466017, probability=0.005525, bonus=1.000000, nodes=11 <= 139.804957)
                            @ 9  java.util.regex.Pattern.lambda$Range$17(int, int, int):boolean (7 bytes)   inline method (bytecode parsing)
                                                      @ 3  java.util.regex.Pattern.inRange(int, int, int):boolean (16 bytes)   relevance-based (relevance=0.466017, probability=0.002763, bonus=1.000000, nodes=11 <= 139.804957)
                                                      @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   not inlining it exceeds the maximum recursive inlining depth
                                                      @ 2  java.util.regex.Pattern$CharPredicate.is(int):boolean (0 bytes)   not inlining it is a polymorphic method call and at least one invoked method cannot be inlined
                                                      @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.466017, probability=0.002763, bonus=1.000000, nodes=13 <= 139.804957)
                                                    @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   relevance-based (relevance=0.466017, probability=0.005525, bonus=1.000000, nodes=27 <= 139.804957)
                                                  @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.466017, probability=0.005525, bonus=1.000000, nodes=39 <= 139.804957)
                                                @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   relevance-based (relevance=0.466017, probability=0.011051, bonus=1.000000, nodes=52 <= 139.804957)
                                              @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.466017, probability=0.011051, bonus=1.000000, nodes=61 <= 139.804957)
                                            @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   relevance-based (relevance=0.466017, probability=0.022101, bonus=1.000000, nodes=74 <= 139.804957)
                                          @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.466017, probability=0.022101, bonus=1.000000, nodes=83 <= 139.804957)
                                        @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   relevance-based (relevance=0.466017, probability=0.044203, bonus=1.000000, nodes=96 <= 139.804957)
                                      @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.466017, probability=0.044203, bonus=1.000000, nodes=105 <= 139.804957)
                                    @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   relevance-based (relevance=0.466017, probability=0.088406, bonus=1.000000, nodes=118 <= 139.804957)
                                  @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.466017, probability=0.088406, bonus=1.000000, nodes=127 <= 139.804957)
                                  @ 5  java.util.regex.Pattern.lambda$Single$14(int, int):boolean (11 bytes)   trivial (relevance=1.000000, probability=0.323189, bonus=1.000000, nodes=9)
                                @ 19  java.util.regex.Pattern$$Lambda/0x800000038.is(int):boolean (9 bytes)   relevance-based (relevance=1.703638, probability=0.500000, bonus=1.000000, nodes=145 <= 300.000000)
                                    @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=0.455724, probability=0.063046, bonus=1.000000, nodes=9)
                            @ 3  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                                    @ 12  java.lang.StringLatin1.charAt(byte[], int):char (15 bytes)   relevance-based (relevance=0.455724, probability=0.063046, bonus=1.000000, nodes=11 <= 136.717345)
                                  @ 21  java.lang.String.charAt(int):char (25 bytes)   relevance-based (relevance=0.455724, probability=0.063046, bonus=1.000000, nodes=16 <= 136.717345)
                                    @ 5  java.util.regex.Pattern.lambda$Single$14(int, int):boolean (11 bytes)   trivial (relevance=0.238470, probability=0.018347, bonus=1.000000, nodes=9)
                                      @ 8  java.util.regex.ASCII.isDigit(int):boolean (18 bytes)   relevance-based (relevance=0.455724, probability=0.035062, bonus=1.000000, nodes=13 <= 136.717345)
                                    @ 1  java.util.regex.CharPredicates.lambda$ASCII_DIGIT$18(int):boolean (20 bytes)   relevance-based (relevance=0.455724, probability=0.035062, bonus=1.000000, nodes=16 <= 136.717345)
                                  @ 26  java.util.regex.CharPredicates$$Lambda/0x800000034.is(int):boolean (5 bytes)   relevance-based (relevance=0.455724, probability=0.063046, bonus=1.000000, nodes=33 <= 136.717345)
                                @ 36  java.util.regex.Pattern$GroupTail.match(Matcher, int, CharSequence):boolean (111 bytes)   not inlining relevance-based (relevance=0.638978, probability=0.206510, bonus=1.000000, nodes=202 > 191.693421)
                                  @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=0.848963, bonus=1.000000, nodes=9)
                            @ 3  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                                  @ 12  java.lang.StringLatin1.charAt(byte[], int):char (15 bytes)   relevance-based (relevance=1.000000, probability=0.848963, bonus=1.000000, nodes=11 <= 300.000000)
                                @ 21  java.lang.String.charAt(int):char (25 bytes)   relevance-based (relevance=1.698026, probability=0.848963, bonus=1.000000, nodes=16 <= 300.000000)
                                  @ 5  java.util.regex.Pattern.lambda$Single$14(int, int):boolean (11 bytes)   trivial (relevance=0.888539, probability=0.247057, bonus=1.000000, nodes=9)
                                    @ 8  java.util.regex.ASCII.isDigit(int):boolean (18 bytes)   relevance-based (relevance=1.000000, probability=0.472135, bonus=1.000000, nodes=13 <= 300.000000)
                                  @ 1  java.util.regex.CharPredicates.lambda$ASCII_DIGIT$18(int):boolean (20 bytes)   relevance-based (relevance=1.000000, probability=0.472135, bonus=1.000000, nodes=16 <= 300.000000)
                                @ 26  java.util.regex.CharPredicates$$Lambda/0x800000034.is(int):boolean (5 bytes)   relevance-based (relevance=1.698026, probability=0.848963, bonus=1.000000, nodes=33 <= 300.000000)
                              @ 28  java.util.regex.Pattern$BmpCharPropertyGreedy.match(Matcher, int, CharSequence):boolean (89 bytes)   not inlining relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=317 > 300.000000)
                            @ 81  java.lang.Integer.rotateLeft(int, int):int (9 bytes)   inline method (bytecode parsing)
                            @ 142  java.lang.Integer.rotateLeft(int, int):int (9 bytes)   inline method (bytecode parsing)
                            @ 187  java.lang.Integer.rotateLeft(int, int):int (9 bytes)   inline method (bytecode parsing)
                            @ 217  java.lang.Integer.rotateLeft(int, int):int (9 bytes)   inline method (bytecode parsing)
                            @ 257  java.lang.Integer.rotateLeft(int, int):int (9 bytes)   inline method (bytecode parsing)
                            @ 287  java.lang.Integer.rotateLeft(int, int):int (9 bytes)   inline method (bytecode parsing)
                            @ 336  java.lang.Integer.rotateLeft(int, int):int (9 bytes)   inline method (bytecode parsing)
                            @ 366  java.lang.Integer.rotateLeft(int, int):int (9 bytes)   inline method (bytecode parsing)
                            @ 406  java.lang.Integer.rotateLeft(int, int):int (9 bytes)   inline method (bytecode parsing)
                            @ 8  java.util.ArrayDeque.elementAt(Object[], int):Object (4 bytes)   inline method (bytecode parsing)
                              @ 1  java.util.ArrayDeque.peekFirst():Object (12 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=7)
                            @ 44  java.lang.Thread.isVirtual():boolean (5 bytes)   inline method (bytecode parsing)
                              @ 35  java.util.ArrayList.equalsArrayList(ArrayList):boolean (108 bytes)   not inlining relevance-based (relevance=0.020044, probability=0.019651, bonus=1.000000, nodes=65 > 6.013337)
                              @ 57  java.util.ArrayList.checkForComodification(int):void (17 bytes)   trivial (relevance=0.020044, probability=0.019651, bonus=1.000000, nodes=8)
                              @ 35  java.util.ArrayDeque.inc(int, int):int (12 bytes)   relevance-based (relevance=1.007751, probability=1.000000, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 55  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                              @ 47  java.util.ArrayDeque.grow(int):void (165 bytes)   not inlining too large previous low-level graph (low-level-nodes: 1244, relevance=0.007751, probability=0.007692, bonus=1.000000, nodes=75)
                              @ 28  java.util.ArrayDeque.nonNullElementAt(Object[], int):Object (18 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=8)
                              @ 44  java.util.ArrayDeque.inc(int, int):int (12 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 12  java.util.ArrayDeque.elementAt(Object[], int):Object (4 bytes)   inline method (bytecode parsing)
                                  @ 28  java.util.ArrayDeque.inc(int, int):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.999291, bonus=1.000000, nodes=10 <= 300.000000)
                                @ 1  java.util.ArrayDeque.pollFirst():Object (36 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=26 <= 300.000000)
                              @ 1  java.util.ArrayDeque.removeFirst():Object (19 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=28 <= 300.000000)
                            @ 7  org.graalvm.collections.EconomicMapImpl$SparseMapIterator.<init>(EconomicMapImpl):void (10 bytes)   inline method (bytecode parsing)
                              @ 5  org.graalvm.collections.EconomicMapImpl$3.<init>(EconomicMapImpl):void (11 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=12 <= 300.000000)
                            @ 1  java.util.AbstractList.listIterator():ListIterator (6 bytes)   inline method (bytecode parsing)
                              @ 2  java.util.LinkedList.listIterator(int):ListIterator (15 bytes)   inline method (bytecode parsing)
                                @ 2  java.util.LinkedList.isPositionIndex(int):boolean (18 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=9)
                              @ 35  java.util.LinkedList.node(int):LinkedList$Node (65 bytes)   relevance-based (relevance=0.663951, probability=0.399021, bonus=1.000000, nodes=21 <= 199.185215)
                              @ 2  java.util.LinkedList.checkPositionIndex(int):void (22 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=8)
                                @ 35  java.util.LinkedList.node(int):LinkedList$Node (65 bytes)   relevance-based (relevance=0.663951, probability=0.399021, bonus=1.000000, nodes=19 <= 199.185215)
                              @ 11  java.util.LinkedList$ListItr.<init>(LinkedList, int):void (47 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=42 <= 300.000000)
                                    @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=9)
                            @ 3  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                                    @ 12  java.lang.StringLatin1.charAt(byte[], int):char (15 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=11 <= 300.000000)
                                  @ 14  java.lang.String.charAt(int):char (25 bytes)   relevance-based (relevance=1.696122, probability=0.500000, bonus=1.000000, nodes=16 <= 300.000000)
                            @ 9  java.util.regex.Pattern.lambda$Range$17(int, int, int):boolean (7 bytes)   inline method (bytecode parsing)
                                        @ 3  java.util.regex.Pattern.inRange(int, int, int):boolean (16 bytes)   relevance-based (relevance=0.464717, probability=0.044249, bonus=1.000000, nodes=11 <= 139.415237)
                            @ 9  java.util.regex.Pattern.lambda$Range$17(int, int, int):boolean (7 bytes)   inline method (bytecode parsing)
                                            @ 3  java.util.regex.Pattern.inRange(int, int, int):boolean (16 bytes)   relevance-based (relevance=0.464717, probability=0.022125, bonus=1.000000, nodes=11 <= 139.415237)
                            @ 9  java.util.regex.Pattern.lambda$Range$17(int, int, int):boolean (7 bytes)   inline method (bytecode parsing)
                                                @ 3  java.util.regex.Pattern.inRange(int, int, int):boolean (16 bytes)   relevance-based (relevance=0.464717, probability=0.011062, bonus=1.000000, nodes=11 <= 139.415237)
                            @ 9  java.util.regex.Pattern.lambda$Range$17(int, int, int):boolean (7 bytes)   inline method (bytecode parsing)
                                                    @ 3  java.util.regex.Pattern.inRange(int, int, int):boolean (16 bytes)   relevance-based (relevance=0.464717, probability=0.005531, bonus=1.000000, nodes=11 <= 139.415237)
                            @ 9  java.util.regex.Pattern.lambda$Range$17(int, int, int):boolean (7 bytes)   inline method (bytecode parsing)
                                                        @ 3  java.util.regex.Pattern.inRange(int, int, int):boolean (16 bytes)   relevance-based (relevance=0.464717, probability=0.002766, bonus=1.000000, nodes=11 <= 139.415237)
                                                        @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   not inlining it exceeds the maximum recursive inlining depth
                                                        @ 2  java.util.regex.Pattern$CharPredicate.is(int):boolean (0 bytes)   not inlining it is a polymorphic method call and at least one invoked method cannot be inlined
                                                        @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.464717, probability=0.002766, bonus=1.000000, nodes=13 <= 139.415237)
                                                      @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   relevance-based (relevance=0.464717, probability=0.005531, bonus=1.000000, nodes=27 <= 139.415237)
                                                    @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.464717, probability=0.005531, bonus=1.000000, nodes=39 <= 139.415237)
                                                  @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   relevance-based (relevance=0.464717, probability=0.011062, bonus=1.000000, nodes=52 <= 139.415237)
                                                @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.464717, probability=0.011062, bonus=1.000000, nodes=61 <= 139.415237)
                                              @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   relevance-based (relevance=0.464717, probability=0.022125, bonus=1.000000, nodes=74 <= 139.415237)
                                            @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.464717, probability=0.022125, bonus=1.000000, nodes=83 <= 139.415237)
                                          @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   relevance-based (relevance=0.464717, probability=0.044249, bonus=1.000000, nodes=96 <= 139.415237)
                                        @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.464717, probability=0.044249, bonus=1.000000, nodes=105 <= 139.415237)
                                      @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   relevance-based (relevance=0.464717, probability=0.088499, bonus=1.000000, nodes=118 <= 139.415237)
                                    @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.464717, probability=0.088499, bonus=1.000000, nodes=127 <= 139.415237)
                                    @ 5  java.util.regex.Pattern.lambda$Single$14(int, int):boolean (11 bytes)   trivial (relevance=1.000000, probability=0.323002, bonus=1.000000, nodes=9)
                                  @ 19  java.util.regex.Pattern$$Lambda/0x800000038.is(int):boolean (9 bytes)   relevance-based (relevance=1.696122, probability=0.500000, bonus=1.000000, nodes=145 <= 300.000000)
                            @ 1  java.nio.MappedByteBuffer.flip():MappedByteBuffer (7 bytes)   inline method (bytecode parsing)
                              @ 1  java.nio.ByteBuffer.flip():ByteBuffer (7 bytes)   inline method (bytecode parsing)
                                      @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=0.450095, probability=0.062692, bonus=1.000000, nodes=9)
                            @ 3  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                                      @ 12  java.lang.StringLatin1.charAt(byte[], int):char (15 bytes)   relevance-based (relevance=0.450095, probability=0.062692, bonus=1.000000, nodes=11 <= 135.028590)
                                    @ 21  java.lang.String.charAt(int):char (25 bytes)   relevance-based (relevance=0.450095, probability=0.062692, bonus=1.000000, nodes=16 <= 135.028590)
                                      @ 5  java.util.regex.Pattern.lambda$Single$14(int, int):boolean (11 bytes)   trivial (relevance=0.235525, probability=0.018244, bonus=1.000000, nodes=9)
                                        @ 8  java.util.regex.ASCII.isDigit(int):boolean (18 bytes)   relevance-based (relevance=0.450095, probability=0.034865, bonus=1.000000, nodes=13 <= 135.028590)
                              @ 1  java.nio.Buffer.flip():Buffer (20 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                      @ 1  java.util.regex.CharPredicates.lambda$ASCII_DIGIT$18(int):boolean (20 bytes)   relevance-based (relevance=0.450095, probability=0.034865, bonus=1.000000, nodes=16 <= 135.028590)
                                    @ 26  java.util.regex.CharPredicates$$Lambda/0x800000034.is(int):boolean (5 bytes)   relevance-based (relevance=0.450095, probability=0.062692, bonus=1.000000, nodes=33 <= 135.028590)
                                  @ 36  java.util.regex.Pattern$GroupTail.match(Matcher, int, CharSequence):boolean (111 bytes)   not inlining relevance-based (relevance=0.635320, probability=0.205210, bonus=1.000000, nodes=202 > 190.596094)
                                    @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=0.848963, bonus=1.000000, nodes=9)
                            @ 3  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                                    @ 12  java.lang.StringLatin1.charAt(byte[], int):char (15 bytes)   relevance-based (relevance=1.000000, probability=0.848963, bonus=1.000000, nodes=11 <= 300.000000)
                                  @ 21  java.lang.String.charAt(int):char (25 bytes)   relevance-based (relevance=1.698026, probability=0.848963, bonus=1.000000, nodes=16 <= 300.000000)
                                    @ 5  java.util.regex.Pattern.lambda$Single$14(int, int):boolean (11 bytes)   trivial (relevance=0.888539, probability=0.247057, bonus=1.000000, nodes=9)
                                      @ 8  java.util.regex.ASCII.isDigit(int):boolean (18 bytes)   relevance-based (relevance=1.000000, probability=0.472135, bonus=1.000000, nodes=13 <= 300.000000)
                                    @ 1  java.util.regex.CharPredicates.lambda$ASCII_DIGIT$18(int):boolean (20 bytes)   relevance-based (relevance=1.000000, probability=0.472135, bonus=1.000000, nodes=16 <= 300.000000)
                                  @ 26  java.util.regex.CharPredicates$$Lambda/0x800000034.is(int):boolean (5 bytes)   relevance-based (relevance=1.698026, probability=0.848963, bonus=1.000000, nodes=33 <= 300.000000)
                                @ 28  java.util.regex.Pattern$BmpCharPropertyGreedy.match(Matcher, int, CharSequence):boolean (89 bytes)   not inlining relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=317 > 300.000000)
                              @ 50  java.util.regex.Pattern$GroupHead.match(Matcher, int, CharSequence):boolean (47 bytes)   relevance-based (relevance=1.666707, probability=1.000000, bonus=1.000000, nodes=20 <= 300.000000)
                                    @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=0.848138, probability=0.100004, bonus=1.000000, nodes=9)
                            @ 3  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                                    @ 12  java.lang.StringLatin1.charAt(byte[], int):char (15 bytes)   relevance-based (relevance=0.848138, probability=0.100004, bonus=1.000000, nodes=11 <= 254.441355)
                                  @ 14  java.lang.String.charAt(int):char (25 bytes)   relevance-based (relevance=0.848138, probability=0.100004, bonus=1.000000, nodes=16 <= 254.441355)
                            @ 9  java.util.regex.Pattern.lambda$Range$17(int, int, int):boolean (7 bytes)   inline method (bytecode parsing)
                                        @ 3  java.util.regex.Pattern.inRange(int, int, int):boolean (16 bytes)   relevance-based (relevance=0.232380, probability=0.008850, bonus=1.000000, nodes=11 <= 69.713917)
                            @ 9  java.util.regex.Pattern.lambda$Range$17(int, int, int):boolean (7 bytes)   inline method (bytecode parsing)
                                            @ 3  java.util.regex.Pattern.inRange(int, int, int):boolean (16 bytes)   relevance-based (relevance=0.232380, probability=0.004425, bonus=1.000000, nodes=11 <= 69.713917)
                            @ 9  java.util.regex.Pattern.lambda$Range$17(int, int, int):boolean (7 bytes)   inline method (bytecode parsing)
                                                @ 3  java.util.regex.Pattern.inRange(int, int, int):boolean (16 bytes)   relevance-based (relevance=0.232380, probability=0.002213, bonus=1.000000, nodes=11 <= 69.713917)
                            @ 9  java.util.regex.Pattern.lambda$Range$17(int, int, int):boolean (7 bytes)   inline method (bytecode parsing)
                                                    @ 3  java.util.regex.Pattern.inRange(int, int, int):boolean (16 bytes)   relevance-based (relevance=0.232380, probability=0.001106, bonus=1.000000, nodes=11 <= 69.713917)
                            @ 9  java.util.regex.Pattern.lambda$Range$17(int, int, int):boolean (7 bytes)   inline method (bytecode parsing)
                                                        @ 3  java.util.regex.Pattern.inRange(int, int, int):boolean (16 bytes)   relevance-based (relevance=0.232380, probability=0.000553, bonus=1.000000, nodes=11 <= 69.713917)
                                                        @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   not inlining it exceeds the maximum recursive inlining depth
                                                        @ 2  java.util.regex.Pattern$CharPredicate.is(int):boolean (0 bytes)   not inlining it is a polymorphic method call and at least one invoked method cannot be inlined
                                                        @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.232380, probability=0.000553, bonus=1.000000, nodes=13 <= 69.713917)
                                                      @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   relevance-based (relevance=0.232380, probability=0.001106, bonus=1.000000, nodes=27 <= 69.713917)
                                                    @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.232380, probability=0.001106, bonus=1.000000, nodes=39 <= 69.713917)
                                                  @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   relevance-based (relevance=0.232380, probability=0.002213, bonus=1.000000, nodes=52 <= 69.713917)
                                                @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.232380, probability=0.002213, bonus=1.000000, nodes=61 <= 69.713917)
                            @ 81  java.lang.Integer.rotateLeft(int, int):int (9 bytes)   inline method (bytecode parsing)
                                              @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   not inlining relevance-based (relevance=0.232380, probability=0.004425, bonus=1.000000, nodes=74 > 69.713917)
                                            @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.232380, probability=0.004425, bonus=1.000000, nodes=13 <= 69.713917)
                                          @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   relevance-based (relevance=0.232380, probability=0.008850, bonus=1.000000, nodes=27 <= 69.713917)
                            @ 142  java.lang.Integer.rotateLeft(int, int):int (9 bytes)   inline method (bytecode parsing)
                            @ 187  java.lang.Integer.rotateLeft(int, int):int (9 bytes)   inline method (bytecode parsing)
                                        @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.232380, probability=0.008850, bonus=1.000000, nodes=39 <= 69.713917)
                            @ 217  java.lang.Integer.rotateLeft(int, int):int (9 bytes)   inline method (bytecode parsing)
                                      @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   relevance-based (relevance=0.232380, probability=0.017700, bonus=1.000000, nodes=52 <= 69.713917)
                            @ 257  java.lang.Integer.rotateLeft(int, int):int (9 bytes)   inline method (bytecode parsing)
                            @ 287  java.lang.Integer.rotateLeft(int, int):int (9 bytes)   inline method (bytecode parsing)
                                    @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.232380, probability=0.017700, bonus=1.000000, nodes=61 <= 69.713917)
                                    @ 5  java.util.regex.Pattern.lambda$Single$14(int, int):boolean (11 bytes)   trivial (relevance=0.848138, probability=0.064603, bonus=1.000000, nodes=9)
                                  @ 19  java.util.regex.Pattern$$Lambda/0x800000038.is(int):boolean (9 bytes)   relevance-based (relevance=0.848138, probability=0.100004, bonus=1.000000, nodes=79 <= 254.441355)
                            @ 336  java.lang.Integer.rotateLeft(int, int):int (9 bytes)   inline method (bytecode parsing)
                                @ 28  java.util.regex.Pattern$BmpCharPropertyGreedy.match(Matcher, int, CharSequence):boolean (89 bytes)   not inlining relevance-based (relevance=0.500045, probability=0.200007, bonus=1.000000, nodes=205 > 150.013554)
                            @ 366  java.lang.Integer.rotateLeft(int, int):int (9 bytes)   inline method (bytecode parsing)
                            @ 406  java.lang.Integer.rotateLeft(int, int):int (9 bytes)   inline method (bytecode parsing)
                                      @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=0.199989, bonus=1.000000, nodes=9)
                            @ 3  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                                      @ 12  java.lang.StringLatin1.charAt(byte[], int):char (15 bytes)   relevance-based (relevance=1.000000, probability=0.199989, bonus=1.000000, nodes=11 <= 300.000000)
                                    @ 14  java.lang.String.charAt(int):char (25 bytes)   relevance-based (relevance=1.696122, probability=0.199989, bonus=1.000000, nodes=16 <= 300.000000)
                            @ 9  java.util.regex.Pattern.lambda$Range$17(int, int, int):boolean (7 bytes)   inline method (bytecode parsing)
                                          @ 3  java.util.regex.Pattern.inRange(int, int, int):boolean (16 bytes)   relevance-based (relevance=0.464717, probability=0.017699, bonus=1.000000, nodes=11 <= 139.415237)
                            @ 9  java.util.regex.Pattern.lambda$Range$17(int, int, int):boolean (7 bytes)   inline method (bytecode parsing)
                                              @ 3  java.util.regex.Pattern.inRange(int, int, int):boolean (16 bytes)   relevance-based (relevance=0.464717, probability=0.008849, bonus=1.000000, nodes=11 <= 139.415237)
                            @ 9  java.util.regex.Pattern.lambda$Range$17(int, int, int):boolean (7 bytes)   inline method (bytecode parsing)
                                                  @ 3  java.util.regex.Pattern.inRange(int, int, int):boolean (16 bytes)   relevance-based (relevance=0.464717, probability=0.004425, bonus=1.000000, nodes=11 <= 139.415237)
                            @ 9  java.util.regex.Pattern.lambda$Range$17(int, int, int):boolean (7 bytes)   inline method (bytecode parsing)
                                                      @ 3  java.util.regex.Pattern.inRange(int, int, int):boolean (16 bytes)   relevance-based (relevance=0.464717, probability=0.002212, bonus=1.000000, nodes=11 <= 139.415237)
                            @ 9  java.util.regex.Pattern.lambda$Range$17(int, int, int):boolean (7 bytes)   inline method (bytecode parsing)
                                                          @ 3  java.util.regex.Pattern.inRange(int, int, int):boolean (16 bytes)   relevance-based (relevance=0.464717, probability=0.001106, bonus=1.000000, nodes=11 <= 139.415237)
                                                          @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   not inlining it exceeds the maximum recursive inlining depth
                                                          @ 2  java.util.regex.Pattern$CharPredicate.is(int):boolean (0 bytes)   not inlining it is a polymorphic method call and at least one invoked method cannot be inlined
                                                          @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.464717, probability=0.001106, bonus=1.000000, nodes=13 <= 139.415237)
                                                        @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   relevance-based (relevance=0.464717, probability=0.002212, bonus=1.000000, nodes=27 <= 139.415237)
                                                      @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.464717, probability=0.002212, bonus=1.000000, nodes=39 <= 139.415237)
                                                    @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   relevance-based (relevance=0.464717, probability=0.004425, bonus=1.000000, nodes=52 <= 139.415237)
                                                  @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.464717, probability=0.004425, bonus=1.000000, nodes=61 <= 139.415237)
                                                @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   relevance-based (relevance=0.464717, probability=0.008849, bonus=1.000000, nodes=74 <= 139.415237)
                                              @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.464717, probability=0.008849, bonus=1.000000, nodes=83 <= 139.415237)
                                            @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   relevance-based (relevance=0.464717, probability=0.017699, bonus=1.000000, nodes=96 <= 139.415237)
                                          @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.464717, probability=0.017699, bonus=1.000000, nodes=105 <= 139.415237)
                                        @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   relevance-based (relevance=0.464717, probability=0.035398, bonus=1.000000, nodes=118 <= 139.415237)
                                      @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.464717, probability=0.035398, bonus=1.000000, nodes=127 <= 139.415237)
                                      @ 5  java.util.regex.Pattern.lambda$Single$14(int, int):boolean (11 bytes)   trivial (relevance=1.000000, probability=0.129194, bonus=1.000000, nodes=9)
                                    @ 19  java.util.regex.Pattern$$Lambda/0x800000038.is(int):boolean (9 bytes)   relevance-based (relevance=1.696122, probability=0.199989, bonus=1.000000, nodes=145 <= 300.000000)
                                        @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=0.450095, probability=0.025075, bonus=1.000000, nodes=9)
                            @ 3  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                                        @ 12  java.lang.StringLatin1.charAt(byte[], int):char (15 bytes)   relevance-based (relevance=0.450095, probability=0.025075, bonus=1.000000, nodes=11 <= 135.028590)
                                      @ 21  java.lang.String.charAt(int):char (25 bytes)   relevance-based (relevance=0.450095, probability=0.025075, bonus=1.000000, nodes=16 <= 135.028590)
                                        @ 5  java.util.regex.Pattern.lambda$Single$14(int, int):boolean (11 bytes)   trivial (relevance=0.235525, probability=0.007297, bonus=1.000000, nodes=9)
                                          @ 8  java.util.regex.ASCII.isDigit(int):boolean (18 bytes)   relevance-based (relevance=0.450095, probability=0.013945, bonus=1.000000, nodes=13 <= 135.028590)
                                        @ 1  java.util.regex.CharPredicates.lambda$ASCII_DIGIT$18(int):boolean (20 bytes)   relevance-based (relevance=0.450095, probability=0.013945, bonus=1.000000, nodes=16 <= 135.028590)
                                      @ 26  java.util.regex.CharPredicates$$Lambda/0x800000034.is(int):boolean (5 bytes)   relevance-based (relevance=0.450095, probability=0.025075, bonus=1.000000, nodes=33 <= 135.028590)
                                    @ 36  java.util.regex.Pattern$GroupTail.match(Matcher, int, CharSequence):boolean (111 bytes)   not inlining relevance-based (relevance=0.635320, probability=0.082080, bonus=1.000000, nodes=202 > 190.596094)
                                      @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=0.339567, bonus=1.000000, nodes=9)
                            @ 3  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                                      @ 12  java.lang.StringLatin1.charAt(byte[], int):char (15 bytes)   relevance-based (relevance=1.000000, probability=0.339567, bonus=1.000000, nodes=11 <= 300.000000)
                                    @ 21  java.lang.String.charAt(int):char (25 bytes)   relevance-based (relevance=1.698026, probability=0.339567, bonus=1.000000, nodes=16 <= 300.000000)
                                      @ 5  java.util.regex.Pattern.lambda$Single$14(int, int):boolean (11 bytes)   trivial (relevance=0.888539, probability=0.098818, bonus=1.000000, nodes=9)
                                        @ 8  java.util.regex.ASCII.isDigit(int):boolean (18 bytes)   relevance-based (relevance=1.000000, probability=0.188844, bonus=1.000000, nodes=13 <= 300.000000)
                                      @ 1  java.util.regex.CharPredicates.lambda$ASCII_DIGIT$18(int):boolean (20 bytes)   relevance-based (relevance=1.000000, probability=0.188844, bonus=1.000000, nodes=16 <= 300.000000)
                                    @ 26  java.util.regex.CharPredicates$$Lambda/0x800000034.is(int):boolean (5 bytes)   relevance-based (relevance=1.698026, probability=0.339567, bonus=1.000000, nodes=33 <= 300.000000)
                                  @ 28  java.util.regex.Pattern$BmpCharPropertyGreedy.match(Matcher, int, CharSequence):boolean (89 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.399978, bonus=1.000000, nodes=317 > 300.000000)
                                @ 50  java.util.regex.Pattern$GroupHead.match(Matcher, int, CharSequence):boolean (47 bytes)   relevance-based (relevance=1.666707, probability=0.399978, bonus=1.000000, nodes=20 <= 300.000000)
                                      @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=0.848138, probability=0.039999, bonus=1.000000, nodes=9)
                            @ 3  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                                      @ 12  java.lang.StringLatin1.charAt(byte[], int):char (15 bytes)   relevance-based (relevance=0.848138, probability=0.039999, bonus=1.000000, nodes=11 <= 254.441355)
                                    @ 14  java.lang.String.charAt(int):char (25 bytes)   relevance-based (relevance=0.848138, probability=0.039999, bonus=1.000000, nodes=16 <= 254.441355)
                            @ 9  java.util.regex.Pattern.lambda$Range$17(int, int, int):boolean (7 bytes)   inline method (bytecode parsing)
                                          @ 3  java.util.regex.Pattern.inRange(int, int, int):boolean (16 bytes)   relevance-based (relevance=0.232380, probability=0.003540, bonus=1.000000, nodes=11 <= 69.713917)
                            @ 9  java.util.regex.Pattern.lambda$Range$17(int, int, int):boolean (7 bytes)   inline method (bytecode parsing)
                                              @ 3  java.util.regex.Pattern.inRange(int, int, int):boolean (16 bytes)   relevance-based (relevance=0.232380, probability=0.001770, bonus=1.000000, nodes=11 <= 69.713917)
                            @ 9  java.util.regex.Pattern.lambda$Range$17(int, int, int):boolean (7 bytes)   inline method (bytecode parsing)
                                                  @ 3  java.util.regex.Pattern.inRange(int, int, int):boolean (16 bytes)   relevance-based (relevance=0.232380, probability=0.000885, bonus=1.000000, nodes=11 <= 69.713917)
                            @ 9  java.util.regex.Pattern.lambda$Range$17(int, int, int):boolean (7 bytes)   inline method (bytecode parsing)
                                                      @ 3  java.util.regex.Pattern.inRange(int, int, int):boolean (16 bytes)   relevance-based (relevance=0.232380, probability=0.000442, bonus=1.000000, nodes=11 <= 69.713917)
                            @ 9  java.util.regex.Pattern.lambda$Range$17(int, int, int):boolean (7 bytes)   inline method (bytecode parsing)
                                                          @ 3  java.util.regex.Pattern.inRange(int, int, int):boolean (16 bytes)   relevance-based (relevance=0.232380, probability=0.000221, bonus=1.000000, nodes=11 <= 69.713917)
                                                          @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   not inlining it exceeds the maximum recursive inlining depth
                                                          @ 2  java.util.regex.Pattern$CharPredicate.is(int):boolean (0 bytes)   not inlining it is a polymorphic method call and at least one invoked method cannot be inlined
                                                          @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.232380, probability=0.000221, bonus=1.000000, nodes=13 <= 69.713917)
                                                        @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   relevance-based (relevance=0.232380, probability=0.000442, bonus=1.000000, nodes=27 <= 69.713917)
                                                      @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.232380, probability=0.000442, bonus=1.000000, nodes=39 <= 69.713917)
                                                    @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   relevance-based (relevance=0.232380, probability=0.000885, bonus=1.000000, nodes=52 <= 69.713917)
                                                  @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.232380, probability=0.000885, bonus=1.000000, nodes=61 <= 69.713917)
                                                @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   not inlining relevance-based (relevance=0.232380, probability=0.001770, bonus=1.000000, nodes=74 > 69.713917)
                                              @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.232380, probability=0.001770, bonus=1.000000, nodes=13 <= 69.713917)
                                            @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   relevance-based (relevance=0.232380, probability=0.003540, bonus=1.000000, nodes=27 <= 69.713917)
                                          @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.232380, probability=0.003540, bonus=1.000000, nodes=39 <= 69.713917)
                                        @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   relevance-based (relevance=0.232380, probability=0.007080, bonus=1.000000, nodes=52 <= 69.713917)
                                      @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.232380, probability=0.007080, bonus=1.000000, nodes=61 <= 69.713917)
                                      @ 5  java.util.regex.Pattern.lambda$Single$14(int, int):boolean (11 bytes)   trivial (relevance=0.848138, probability=0.025840, bonus=1.000000, nodes=9)
                                    @ 19  java.util.regex.Pattern$$Lambda/0x800000038.is(int):boolean (9 bytes)   relevance-based (relevance=0.848138, probability=0.039999, bonus=1.000000, nodes=79 <= 254.441355)
                                  @ 28  java.util.regex.Pattern$BmpCharPropertyGreedy.match(Matcher, int, CharSequence):boolean (89 bytes)   not inlining relevance-based (relevance=0.500045, probability=0.079999, bonus=1.000000, nodes=205 > 150.013554)
                                        @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=0.079991, bonus=1.000000, nodes=9)
                            @ 3  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                                        @ 12  java.lang.StringLatin1.charAt(byte[], int):char (15 bytes)   relevance-based (relevance=1.000000, probability=0.079991, bonus=1.000000, nodes=11 <= 300.000000)
                                      @ 14  java.lang.String.charAt(int):char (25 bytes)   relevance-based (relevance=1.696122, probability=0.079991, bonus=1.000000, nodes=16 <= 300.000000)
                            @ 9  java.util.regex.Pattern.lambda$Range$17(int, int, int):boolean (7 bytes)   inline method (bytecode parsing)
                                            @ 3  java.util.regex.Pattern.inRange(int, int, int):boolean (16 bytes)   relevance-based (relevance=0.464717, probability=0.007079, bonus=1.000000, nodes=11 <= 139.415237)
                            @ 9  java.util.regex.Pattern.lambda$Range$17(int, int, int):boolean (7 bytes)   inline method (bytecode parsing)
                                                @ 3  java.util.regex.Pattern.inRange(int, int, int):boolean (16 bytes)   relevance-based (relevance=0.464717, probability=0.003540, bonus=1.000000, nodes=11 <= 139.415237)
                            @ 9  java.util.regex.Pattern.lambda$Range$17(int, int, int):boolean (7 bytes)   inline method (bytecode parsing)
                                                    @ 3  java.util.regex.Pattern.inRange(int, int, int):boolean (16 bytes)   relevance-based (relevance=0.464717, probability=0.001770, bonus=1.000000, nodes=11 <= 139.415237)
                            @ 9  java.util.regex.Pattern.lambda$Range$17(int, int, int):boolean (7 bytes)   inline method (bytecode parsing)
                                                        @ 3  java.util.regex.Pattern.inRange(int, int, int):boolean (16 bytes)   relevance-based (relevance=0.464717, probability=0.000885, bonus=1.000000, nodes=11 <= 139.415237)
                            @ 9  java.util.regex.Pattern.lambda$Range$17(int, int, int):boolean (7 bytes)   inline method (bytecode parsing)
                                                            @ 3  java.util.regex.Pattern.inRange(int, int, int):boolean (16 bytes)   relevance-based (relevance=0.464717, probability=0.000442, bonus=1.000000, nodes=11 <= 139.415237)
                                                            @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   not inlining it exceeds the maximum recursive inlining depth
                                                            @ 2  java.util.regex.Pattern$CharPredicate.is(int):boolean (0 bytes)   not inlining it is a polymorphic method call and at least one invoked method cannot be inlined
                                                            @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.464717, probability=0.000442, bonus=1.000000, nodes=13 <= 139.415237)
                                                          @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   relevance-based (relevance=0.464717, probability=0.000885, bonus=1.000000, nodes=27 <= 139.415237)
                                                        @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.464717, probability=0.000885, bonus=1.000000, nodes=39 <= 139.415237)
                                                      @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   relevance-based (relevance=0.464717, probability=0.001770, bonus=1.000000, nodes=52 <= 139.415237)
                                                    @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.464717, probability=0.001770, bonus=1.000000, nodes=61 <= 139.415237)
                                                  @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   relevance-based (relevance=0.464717, probability=0.003540, bonus=1.000000, nodes=74 <= 139.415237)
                                                @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.464717, probability=0.003540, bonus=1.000000, nodes=83 <= 139.415237)
                                              @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   relevance-based (relevance=0.464717, probability=0.007079, bonus=1.000000, nodes=96 <= 139.415237)
                                            @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.464717, probability=0.007079, bonus=1.000000, nodes=105 <= 139.415237)
                                          @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   relevance-based (relevance=0.464717, probability=0.014158, bonus=1.000000, nodes=118 <= 139.415237)
                                        @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.464717, probability=0.014158, bonus=1.000000, nodes=127 <= 139.415237)
                                        @ 5  java.util.regex.Pattern.lambda$Single$14(int, int):boolean (11 bytes)   trivial (relevance=1.000000, probability=0.051675, bonus=1.000000, nodes=9)
                                      @ 19  java.util.regex.Pattern$$Lambda/0x800000038.is(int):boolean (9 bytes)   relevance-based (relevance=1.696122, probability=0.079991, bonus=1.000000, nodes=145 <= 300.000000)
                                          @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=0.450095, probability=0.010030, bonus=1.000000, nodes=9)
                            @ 3  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                                          @ 12  java.lang.StringLatin1.charAt(byte[], int):char (15 bytes)   relevance-based (relevance=0.450095, probability=0.010030, bonus=1.000000, nodes=11 <= 135.028590)
                                        @ 21  java.lang.String.charAt(int):char (25 bytes)   relevance-based (relevance=0.450095, probability=0.010030, bonus=1.000000, nodes=16 <= 135.028590)
                                          @ 5  java.util.regex.Pattern.lambda$Single$14(int, int):boolean (11 bytes)   trivial (relevance=0.235525, probability=0.002919, bonus=1.000000, nodes=9)
                                            @ 8  java.util.regex.ASCII.isDigit(int):boolean (18 bytes)   relevance-based (relevance=0.450095, probability=0.005578, bonus=1.000000, nodes=13 <= 135.028590)
                                          @ 1  java.util.regex.CharPredicates.lambda$ASCII_DIGIT$18(int):boolean (20 bytes)   relevance-based (relevance=0.450095, probability=0.005578, bonus=1.000000, nodes=16 <= 135.028590)
                                        @ 26  java.util.regex.CharPredicates$$Lambda/0x800000034.is(int):boolean (5 bytes)   relevance-based (relevance=0.450095, probability=0.010030, bonus=1.000000, nodes=33 <= 135.028590)
                                      @ 36  java.util.regex.Pattern$GroupTail.match(Matcher, int, CharSequence):boolean (111 bytes)   not inlining relevance-based (relevance=0.635320, probability=0.032830, bonus=1.000000, nodes=202 > 190.596094)
                                        @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=0.135819, bonus=1.000000, nodes=9)
                            @ 3  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                                        @ 12  java.lang.StringLatin1.charAt(byte[], int):char (15 bytes)   relevance-based (relevance=1.000000, probability=0.135819, bonus=1.000000, nodes=11 <= 300.000000)
                                      @ 21  java.lang.String.charAt(int):char (25 bytes)   relevance-based (relevance=1.698026, probability=0.135819, bonus=1.000000, nodes=16 <= 300.000000)
                                        @ 5  java.util.regex.Pattern.lambda$Single$14(int, int):boolean (11 bytes)   trivial (relevance=0.888539, probability=0.039525, bonus=1.000000, nodes=9)
                                          @ 8  java.util.regex.ASCII.isDigit(int):boolean (18 bytes)   relevance-based (relevance=1.000000, probability=0.075533, bonus=1.000000, nodes=13 <= 300.000000)
                                        @ 1  java.util.regex.CharPredicates.lambda$ASCII_DIGIT$18(int):boolean (20 bytes)   relevance-based (relevance=1.000000, probability=0.075533, bonus=1.000000, nodes=16 <= 300.000000)
                                      @ 26  java.util.regex.CharPredicates$$Lambda/0x800000034.is(int):boolean (5 bytes)   relevance-based (relevance=1.698026, probability=0.135819, bonus=1.000000, nodes=33 <= 300.000000)
                                    @ 28  java.util.regex.Pattern$BmpCharPropertyGreedy.match(Matcher, int, CharSequence):boolean (89 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.159983, bonus=1.000000, nodes=317 > 300.000000)
                                  @ 50  java.util.regex.Pattern$GroupHead.match(Matcher, int, CharSequence):boolean (47 bytes)   relevance-based (relevance=1.666707, probability=0.159983, bonus=1.000000, nodes=20 <= 300.000000)
                                        @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=0.848138, probability=0.015999, bonus=1.000000, nodes=9)
                            @ 3  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                                        @ 12  java.lang.StringLatin1.charAt(byte[], int):char (15 bytes)   relevance-based (relevance=0.848138, probability=0.015999, bonus=1.000000, nodes=11 <= 254.441355)
                                      @ 14  java.lang.String.charAt(int):char (25 bytes)   relevance-based (relevance=0.848138, probability=0.015999, bonus=1.000000, nodes=16 <= 254.441355)
                            @ 9  java.util.regex.Pattern.lambda$Range$17(int, int, int):boolean (7 bytes)   inline method (bytecode parsing)
                                            @ 3  java.util.regex.Pattern.inRange(int, int, int):boolean (16 bytes)   relevance-based (relevance=0.232380, probability=0.001416, bonus=1.000000, nodes=11 <= 69.713917)
                            @ 9  java.util.regex.Pattern.lambda$Range$17(int, int, int):boolean (7 bytes)   inline method (bytecode parsing)
                                                @ 3  java.util.regex.Pattern.inRange(int, int, int):boolean (16 bytes)   relevance-based (relevance=0.232380, probability=0.000708, bonus=1.000000, nodes=11 <= 69.713917)
                            @ 9  java.util.regex.Pattern.lambda$Range$17(int, int, int):boolean (7 bytes)   inline method (bytecode parsing)
                                                    @ 3  java.util.regex.Pattern.inRange(int, int, int):boolean (16 bytes)   relevance-based (relevance=0.232380, probability=0.000354, bonus=1.000000, nodes=11 <= 69.713917)
                            @ 9  java.util.regex.Pattern.lambda$Range$17(int, int, int):boolean (7 bytes)   inline method (bytecode parsing)
                                                        @ 3  java.util.regex.Pattern.inRange(int, int, int):boolean (16 bytes)   relevance-based (relevance=0.232380, probability=0.000177, bonus=1.000000, nodes=11 <= 69.713917)
                            @ 9  java.util.regex.Pattern.lambda$Range$17(int, int, int):boolean (7 bytes)   inline method (bytecode parsing)
                                                            @ 3  java.util.regex.Pattern.inRange(int, int, int):boolean (16 bytes)   relevance-based (relevance=0.232380, probability=0.000088, bonus=1.000000, nodes=11 <= 69.713917)
                                                            @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   not inlining it exceeds the maximum recursive inlining depth
                                                            @ 2  java.util.regex.Pattern$CharPredicate.is(int):boolean (0 bytes)   not inlining it is a polymorphic method call and at least one invoked method cannot be inlined
                                                            @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.232380, probability=0.000088, bonus=1.000000, nodes=13 <= 69.713917)
                                                          @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   relevance-based (relevance=0.232380, probability=0.000177, bonus=1.000000, nodes=27 <= 69.713917)
                                                        @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.232380, probability=0.000177, bonus=1.000000, nodes=39 <= 69.713917)
                                                      @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   relevance-based (relevance=0.232380, probability=0.000354, bonus=1.000000, nodes=52 <= 69.713917)
                                                    @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.232380, probability=0.000354, bonus=1.000000, nodes=61 <= 69.713917)
                                                  @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   not inlining relevance-based (relevance=0.232380, probability=0.000708, bonus=1.000000, nodes=74 > 69.713917)
                                                @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.232380, probability=0.000708, bonus=1.000000, nodes=13 <= 69.713917)
                                              @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   relevance-based (relevance=0.232380, probability=0.001416, bonus=1.000000, nodes=27 <= 69.713917)
                                            @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.232380, probability=0.001416, bonus=1.000000, nodes=39 <= 69.713917)
                                          @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   relevance-based (relevance=0.232380, probability=0.002832, bonus=1.000000, nodes=52 <= 69.713917)
                                        @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.232380, probability=0.002832, bonus=1.000000, nodes=61 <= 69.713917)
                                        @ 5  java.util.regex.Pattern.lambda$Single$14(int, int):boolean (11 bytes)   trivial (relevance=0.848138, probability=0.010335, bonus=1.000000, nodes=9)
                                      @ 19  java.util.regex.Pattern$$Lambda/0x800000038.is(int):boolean (9 bytes)   relevance-based (relevance=0.848138, probability=0.015999, bonus=1.000000, nodes=79 <= 254.441355)
                                    @ 28  java.util.regex.Pattern$BmpCharPropertyGreedy.match(Matcher, int, CharSequence):boolean (89 bytes)   not inlining relevance-based (relevance=0.500045, probability=0.031998, bonus=1.000000, nodes=205 > 150.013554)
                                          @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=0.031995, bonus=1.000000, nodes=9)
                            @ 3  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                                          @ 12  java.lang.StringLatin1.charAt(byte[], int):char (15 bytes)   relevance-based (relevance=1.000000, probability=0.031995, bonus=1.000000, nodes=11 <= 300.000000)
                                        @ 14  java.lang.String.charAt(int):char (25 bytes)   relevance-based (relevance=1.696122, probability=0.031995, bonus=1.000000, nodes=16 <= 300.000000)
                            @ 9  java.util.regex.Pattern.lambda$Range$17(int, int, int):boolean (7 bytes)   inline method (bytecode parsing)
                                              @ 3  java.util.regex.Pattern.inRange(int, int, int):boolean (16 bytes)   relevance-based (relevance=0.464717, probability=0.002832, bonus=1.000000, nodes=11 <= 139.415237)
                            @ 9  java.util.regex.Pattern.lambda$Range$17(int, int, int):boolean (7 bytes)   inline method (bytecode parsing)
                                                  @ 3  java.util.regex.Pattern.inRange(int, int, int):boolean (16 bytes)   relevance-based (relevance=0.464717, probability=0.001416, bonus=1.000000, nodes=11 <= 139.415237)
                            @ 9  java.util.regex.Pattern.lambda$Range$17(int, int, int):boolean (7 bytes)   inline method (bytecode parsing)
                                                      @ 3  java.util.regex.Pattern.inRange(int, int, int):boolean (16 bytes)   relevance-based (relevance=0.464717, probability=0.000708, bonus=1.000000, nodes=11 <= 139.415237)
                            @ 9  java.util.regex.Pattern.lambda$Range$17(int, int, int):boolean (7 bytes)   inline method (bytecode parsing)
                                                          @ 3  java.util.regex.Pattern.inRange(int, int, int):boolean (16 bytes)   relevance-based (relevance=0.464717, probability=0.000354, bonus=1.000000, nodes=11 <= 139.415237)
                            @ 9  java.util.regex.Pattern.lambda$Range$17(int, int, int):boolean (7 bytes)   inline method (bytecode parsing)
                                                              @ 3  java.util.regex.Pattern.inRange(int, int, int):boolean (16 bytes)   relevance-based (relevance=0.464717, probability=0.000177, bonus=1.000000, nodes=11 <= 139.415237)
                                                              @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   not inlining it exceeds the maximum recursive inlining depth
                                                              @ 2  java.util.regex.Pattern$CharPredicate.is(int):boolean (0 bytes)   not inlining it is a polymorphic method call and at least one invoked method cannot be inlined
                                                              @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.464717, probability=0.000177, bonus=1.000000, nodes=13 <= 139.415237)
                                                            @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   relevance-based (relevance=0.464717, probability=0.000354, bonus=1.000000, nodes=27 <= 139.415237)
                                                          @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.464717, probability=0.000354, bonus=1.000000, nodes=39 <= 139.415237)
                                                        @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   relevance-based (relevance=0.464717, probability=0.000708, bonus=1.000000, nodes=52 <= 139.415237)
                                                      @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.464717, probability=0.000708, bonus=1.000000, nodes=61 <= 139.415237)
                                                    @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   relevance-based (relevance=0.464717, probability=0.001416, bonus=1.000000, nodes=74 <= 139.415237)
                                                  @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.464717, probability=0.001416, bonus=1.000000, nodes=83 <= 139.415237)
                                                @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   relevance-based (relevance=0.464717, probability=0.002832, bonus=1.000000, nodes=96 <= 139.415237)
                                              @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.464717, probability=0.002832, bonus=1.000000, nodes=105 <= 139.415237)
                                            @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   relevance-based (relevance=0.464717, probability=0.005663, bonus=1.000000, nodes=118 <= 139.415237)
                                          @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.464717, probability=0.005663, bonus=1.000000, nodes=127 <= 139.415237)
                                          @ 5  java.util.regex.Pattern.lambda$Single$14(int, int):boolean (11 bytes)   trivial (relevance=1.000000, probability=0.020669, bonus=1.000000, nodes=9)
                                        @ 19  java.util.regex.Pattern$$Lambda/0x800000038.is(int):boolean (9 bytes)   relevance-based (relevance=1.696122, probability=0.031995, bonus=1.000000, nodes=145 <= 300.000000)
                                            @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=0.450095, probability=0.004012, bonus=1.000000, nodes=9)
                            @ 3  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                                            @ 12  java.lang.StringLatin1.charAt(byte[], int):char (15 bytes)   relevance-based (relevance=0.450095, probability=0.004012, bonus=1.000000, nodes=11 <= 135.028590)
                                          @ 21  java.lang.String.charAt(int):char (25 bytes)   relevance-based (relevance=0.450095, probability=0.004012, bonus=1.000000, nodes=16 <= 135.028590)
                                            @ 5  java.util.regex.Pattern.lambda$Single$14(int, int):boolean (11 bytes)   trivial (relevance=0.235525, probability=0.001167, bonus=1.000000, nodes=9)
                                              @ 8  java.util.regex.ASCII.isDigit(int):boolean (18 bytes)   relevance-based (relevance=0.450095, probability=0.002231, bonus=1.000000, nodes=13 <= 135.028590)
                                            @ 1  java.util.regex.CharPredicates.lambda$ASCII_DIGIT$18(int):boolean (20 bytes)   relevance-based (relevance=0.450095, probability=0.002231, bonus=1.000000, nodes=16 <= 135.028590)
                                          @ 26  java.util.regex.CharPredicates$$Lambda/0x800000034.is(int):boolean (5 bytes)   relevance-based (relevance=0.450095, probability=0.004012, bonus=1.000000, nodes=33 <= 135.028590)
                                        @ 36  java.util.regex.Pattern$GroupTail.match(Matcher, int, CharSequence):boolean (111 bytes)   not inlining relevance-based (relevance=0.635320, probability=0.013131, bonus=1.000000, nodes=202 > 190.596094)
                                          @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=0.054325, bonus=1.000000, nodes=9)
                            @ 3  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                                          @ 12  java.lang.StringLatin1.charAt(byte[], int):char (15 bytes)   relevance-based (relevance=1.000000, probability=0.054325, bonus=1.000000, nodes=11 <= 300.000000)
                                        @ 21  java.lang.String.charAt(int):char (25 bytes)   relevance-based (relevance=1.698026, probability=0.054325, bonus=1.000000, nodes=16 <= 300.000000)
                                          @ 5  java.util.regex.Pattern.lambda$Single$14(int, int):boolean (11 bytes)   trivial (relevance=0.888539, probability=0.015809, bonus=1.000000, nodes=9)
                                            @ 8  java.util.regex.ASCII.isDigit(int):boolean (18 bytes)   relevance-based (relevance=1.000000, probability=0.030212, bonus=1.000000, nodes=13 <= 300.000000)
                                          @ 1  java.util.regex.CharPredicates.lambda$ASCII_DIGIT$18(int):boolean (20 bytes)   relevance-based (relevance=1.000000, probability=0.030212, bonus=1.000000, nodes=16 <= 300.000000)
                                        @ 26  java.util.regex.CharPredicates$$Lambda/0x800000034.is(int):boolean (5 bytes)   relevance-based (relevance=1.698026, probability=0.054325, bonus=1.000000, nodes=33 <= 300.000000)
                                      @ 28  java.util.regex.Pattern$BmpCharPropertyGreedy.match(Matcher, int, CharSequence):boolean (89 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.063990, bonus=1.000000, nodes=317 > 300.000000)
                                    @ 50  java.util.regex.Pattern$GroupHead.match(Matcher, int, CharSequence):boolean (47 bytes)   relevance-based (relevance=1.666707, probability=0.063990, bonus=1.000000, nodes=20 <= 300.000000)
                                          @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=0.848138, probability=0.006399, bonus=1.000000, nodes=9)
                            @ 3  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                                          @ 12  java.lang.StringLatin1.charAt(byte[], int):char (15 bytes)   relevance-based (relevance=0.848138, probability=0.006399, bonus=1.000000, nodes=11 <= 254.441355)
                                        @ 14  java.lang.String.charAt(int):char (25 bytes)   relevance-based (relevance=0.848138, probability=0.006399, bonus=1.000000, nodes=16 <= 254.441355)
                            @ 9  java.util.regex.Pattern.lambda$Range$17(int, int, int):boolean (7 bytes)   inline method (bytecode parsing)
                                              @ 3  java.util.regex.Pattern.inRange(int, int, int):boolean (16 bytes)   relevance-based (relevance=0.232380, probability=0.000566, bonus=1.000000, nodes=11 <= 69.713917)
                            @ 9  java.util.regex.Pattern.lambda$Range$17(int, int, int):boolean (7 bytes)   inline method (bytecode parsing)
                                                  @ 3  java.util.regex.Pattern.inRange(int, int, int):boolean (16 bytes)   relevance-based (relevance=0.232380, probability=0.000283, bonus=1.000000, nodes=11 <= 69.713917)
                            @ 9  java.util.regex.Pattern.lambda$Range$17(int, int, int):boolean (7 bytes)   inline method (bytecode parsing)
                                                      @ 3  java.util.regex.Pattern.inRange(int, int, int):boolean (16 bytes)   relevance-based (relevance=0.232380, probability=0.000142, bonus=1.000000, nodes=11 <= 69.713917)
                            @ 9  java.util.regex.Pattern.lambda$Range$17(int, int, int):boolean (7 bytes)   inline method (bytecode parsing)
                                                          @ 3  java.util.regex.Pattern.inRange(int, int, int):boolean (16 bytes)   relevance-based (relevance=0.232380, probability=0.000071, bonus=1.000000, nodes=11 <= 69.713917)
                            @ 9  java.util.regex.Pattern.lambda$Range$17(int, int, int):boolean (7 bytes)   inline method (bytecode parsing)
                                                              @ 3  java.util.regex.Pattern.inRange(int, int, int):boolean (16 bytes)   relevance-based (relevance=0.232380, probability=0.000035, bonus=1.000000, nodes=11 <= 69.713917)
                                                              @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   not inlining it exceeds the maximum recursive inlining depth
                                                              @ 2  java.util.regex.Pattern$CharPredicate.is(int):boolean (0 bytes)   not inlining it is a polymorphic method call and at least one invoked method cannot be inlined
                                                              @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.232380, probability=0.000035, bonus=1.000000, nodes=13 <= 69.713917)
                                                            @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   relevance-based (relevance=0.232380, probability=0.000071, bonus=1.000000, nodes=27 <= 69.713917)
                                                          @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.232380, probability=0.000071, bonus=1.000000, nodes=39 <= 69.713917)
                                                        @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   relevance-based (relevance=0.232380, probability=0.000142, bonus=1.000000, nodes=52 <= 69.713917)
                                                      @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.232380, probability=0.000142, bonus=1.000000, nodes=61 <= 69.713917)
                                                    @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   not inlining relevance-based (relevance=0.232380, probability=0.000283, bonus=1.000000, nodes=74 > 69.713917)
                                                  @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.232380, probability=0.000283, bonus=1.000000, nodes=13 <= 69.713917)
                                                @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   relevance-based (relevance=0.232380, probability=0.000566, bonus=1.000000, nodes=27 <= 69.713917)
                                              @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.232380, probability=0.000566, bonus=1.000000, nodes=39 <= 69.713917)
                                            @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   relevance-based (relevance=0.232380, probability=0.001133, bonus=1.000000, nodes=52 <= 69.713917)
                                          @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.232380, probability=0.001133, bonus=1.000000, nodes=61 <= 69.713917)
                                          @ 5  java.util.regex.Pattern.lambda$Single$14(int, int):boolean (11 bytes)   trivial (relevance=0.848138, probability=0.004134, bonus=1.000000, nodes=9)
                                        @ 19  java.util.regex.Pattern$$Lambda/0x800000038.is(int):boolean (9 bytes)   relevance-based (relevance=0.848138, probability=0.006399, bonus=1.000000, nodes=79 <= 254.441355)
                                      @ 28  java.util.regex.Pattern$BmpCharPropertyGreedy.match(Matcher, int, CharSequence):boolean (89 bytes)   not inlining relevance-based (relevance=0.500045, probability=0.012798, bonus=1.000000, nodes=205 > 150.013554)
                                            @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=0.012797, bonus=1.000000, nodes=9)
                            @ 3  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                                            @ 12  java.lang.StringLatin1.charAt(byte[], int):char (15 bytes)   relevance-based (relevance=1.000000, probability=0.012797, bonus=1.000000, nodes=11 <= 300.000000)
                                          @ 14  java.lang.String.charAt(int):char (25 bytes)   relevance-based (relevance=1.696122, probability=0.012797, bonus=1.000000, nodes=16 <= 300.000000)
                            @ 9  java.util.regex.Pattern.lambda$Range$17(int, int, int):boolean (7 bytes)   inline method (bytecode parsing)
                                                @ 3  java.util.regex.Pattern.inRange(int, int, int):boolean (16 bytes)   relevance-based (relevance=0.464717, probability=0.001133, bonus=1.000000, nodes=11 <= 139.415237)
                            @ 9  java.util.regex.Pattern.lambda$Range$17(int, int, int):boolean (7 bytes)   inline method (bytecode parsing)
                                                    @ 3  java.util.regex.Pattern.inRange(int, int, int):boolean (16 bytes)   relevance-based (relevance=0.464717, probability=0.000566, bonus=1.000000, nodes=11 <= 139.415237)
                            @ 9  java.util.regex.Pattern.lambda$Range$17(int, int, int):boolean (7 bytes)   inline method (bytecode parsing)
                                                        @ 3  java.util.regex.Pattern.inRange(int, int, int):boolean (16 bytes)   relevance-based (relevance=0.464717, probability=0.000283, bonus=1.000000, nodes=11 <= 139.415237)
                            @ 9  java.util.regex.Pattern.lambda$Range$17(int, int, int):boolean (7 bytes)   inline method (bytecode parsing)
                                                            @ 3  java.util.regex.Pattern.inRange(int, int, int):boolean (16 bytes)   relevance-based (relevance=0.464717, probability=0.000142, bonus=1.000000, nodes=11 <= 139.415237)
                            @ 9  java.util.regex.Pattern.lambda$Range$17(int, int, int):boolean (7 bytes)   inline method (bytecode parsing)
                                                                @ 3  java.util.regex.Pattern.inRange(int, int, int):boolean (16 bytes)   relevance-based (relevance=0.464717, probability=0.000071, bonus=1.000000, nodes=11 <= 139.415237)
                                                                @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   not inlining it exceeds the maximum recursive inlining depth
                                                                @ 2  java.util.regex.Pattern$CharPredicate.is(int):boolean (0 bytes)   not inlining it is a polymorphic method call and at least one invoked method cannot be inlined
                                                                @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.464717, probability=0.000071, bonus=1.000000, nodes=13 <= 139.415237)
                                                              @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   relevance-based (relevance=0.464717, probability=0.000142, bonus=1.000000, nodes=27 <= 139.415237)
                                                            @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.464717, probability=0.000142, bonus=1.000000, nodes=39 <= 139.415237)
                                                          @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   relevance-based (relevance=0.464717, probability=0.000283, bonus=1.000000, nodes=52 <= 139.415237)
                                                        @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.464717, probability=0.000283, bonus=1.000000, nodes=61 <= 139.415237)
                                                      @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   relevance-based (relevance=0.464717, probability=0.000566, bonus=1.000000, nodes=74 <= 139.415237)
                                                    @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.464717, probability=0.000566, bonus=1.000000, nodes=83 <= 139.415237)
                                                  @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   relevance-based (relevance=0.464717, probability=0.001133, bonus=1.000000, nodes=96 <= 139.415237)
                                                @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.464717, probability=0.001133, bonus=1.000000, nodes=105 <= 139.415237)
                                              @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   relevance-based (relevance=0.464717, probability=0.002265, bonus=1.000000, nodes=118 <= 139.415237)
                                            @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.464717, probability=0.002265, bonus=1.000000, nodes=127 <= 139.415237)
                                            @ 5  java.util.regex.Pattern.lambda$Single$14(int, int):boolean (11 bytes)   trivial (relevance=1.000000, probability=0.008267, bonus=1.000000, nodes=9)
                                          @ 19  java.util.regex.Pattern$$Lambda/0x800000038.is(int):boolean (9 bytes)   relevance-based (relevance=1.696122, probability=0.012797, bonus=1.000000, nodes=145 <= 300.000000)
                                              @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=0.450095, probability=0.001605, bonus=1.000000, nodes=9)
                            @ 3  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                                              @ 12  java.lang.StringLatin1.charAt(byte[], int):char (15 bytes)   relevance-based (relevance=0.450095, probability=0.001605, bonus=1.000000, nodes=11 <= 135.028590)
                                            @ 21  java.lang.String.charAt(int):char (25 bytes)   relevance-based (relevance=0.450095, probability=0.001605, bonus=1.000000, nodes=16 <= 135.028590)
                                              @ 5  java.util.regex.Pattern.lambda$Single$14(int, int):boolean (11 bytes)   trivial (relevance=0.235525, probability=0.000467, bonus=1.000000, nodes=9)
                                                @ 8  java.util.regex.ASCII.isDigit(int):boolean (18 bytes)   relevance-based (relevance=0.450095, probability=0.000892, bonus=1.000000, nodes=13 <= 135.028590)
                                              @ 1  java.util.regex.CharPredicates.lambda$ASCII_DIGIT$18(int):boolean (20 bytes)   relevance-based (relevance=0.450095, probability=0.000892, bonus=1.000000, nodes=16 <= 135.028590)
                                            @ 26  java.util.regex.CharPredicates$$Lambda/0x800000034.is(int):boolean (5 bytes)   relevance-based (relevance=0.450095, probability=0.001605, bonus=1.000000, nodes=33 <= 135.028590)
                                          @ 36  java.util.regex.Pattern$GroupTail.match(Matcher, int, CharSequence):boolean (111 bytes)   not inlining relevance-based (relevance=0.635320, probability=0.005252, bonus=1.000000, nodes=202 > 190.596094)
                                            @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=0.021729, bonus=1.000000, nodes=9)
                            @ 3  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                                            @ 12  java.lang.StringLatin1.charAt(byte[], int):char (15 bytes)   relevance-based (relevance=1.000000, probability=0.021729, bonus=1.000000, nodes=11 <= 300.000000)
                                          @ 21  java.lang.String.charAt(int):char (25 bytes)   relevance-based (relevance=1.698026, probability=0.021729, bonus=1.000000, nodes=16 <= 300.000000)
                                            @ 5  java.util.regex.Pattern.lambda$Single$14(int, int):boolean (11 bytes)   trivial (relevance=0.888539, probability=0.006323, bonus=1.000000, nodes=9)
                                              @ 8  java.util.regex.ASCII.isDigit(int):boolean (18 bytes)   relevance-based (relevance=1.000000, probability=0.012084, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 1  java.util.regex.CharPredicates.lambda$ASCII_DIGIT$18(int):boolean (20 bytes)   relevance-based (relevance=1.000000, probability=0.012084, bonus=1.000000, nodes=16 <= 300.000000)
                                          @ 26  java.util.regex.CharPredicates$$Lambda/0x800000034.is(int):boolean (5 bytes)   relevance-based (relevance=1.698026, probability=0.021729, bonus=1.000000, nodes=33 <= 300.000000)
                                        @ 28  java.util.regex.Pattern$BmpCharPropertyGreedy.match(Matcher, int, CharSequence):boolean (89 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.025594, bonus=1.000000, nodes=317 > 300.000000)
                                      @ 50  java.util.regex.Pattern$GroupHead.match(Matcher, int, CharSequence):boolean (47 bytes)   relevance-based (relevance=1.666707, probability=0.025594, bonus=1.000000, nodes=20 <= 300.000000)
                                            @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=0.848138, probability=0.002560, bonus=1.000000, nodes=9)
                            @ 3  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                                            @ 12  java.lang.StringLatin1.charAt(byte[], int):char (15 bytes)   relevance-based (relevance=0.848138, probability=0.002560, bonus=1.000000, nodes=11 <= 254.441355)
                                          @ 14  java.lang.String.charAt(int):char (25 bytes)   relevance-based (relevance=0.848138, probability=0.002560, bonus=1.000000, nodes=16 <= 254.441355)
                            @ 9  java.util.regex.Pattern.lambda$Range$17(int, int, int):boolean (7 bytes)   inline method (bytecode parsing)
                                                @ 3  java.util.regex.Pattern.inRange(int, int, int):boolean (16 bytes)   relevance-based (relevance=0.232380, probability=0.000227, bonus=1.000000, nodes=11 <= 69.713917)
                            @ 9  java.util.regex.Pattern.lambda$Range$17(int, int, int):boolean (7 bytes)   inline method (bytecode parsing)
                                                    @ 3  java.util.regex.Pattern.inRange(int, int, int):boolean (16 bytes)   relevance-based (relevance=0.232380, probability=0.000113, bonus=1.000000, nodes=11 <= 69.713917)
                            @ 9  java.util.regex.Pattern.lambda$Range$17(int, int, int):boolean (7 bytes)   inline method (bytecode parsing)
                                                        @ 3  java.util.regex.Pattern.inRange(int, int, int):boolean (16 bytes)   relevance-based (relevance=0.232380, probability=0.000057, bonus=1.000000, nodes=11 <= 69.713917)
                            @ 9  java.util.regex.Pattern.lambda$Range$17(int, int, int):boolean (7 bytes)   inline method (bytecode parsing)
                                                            @ 3  java.util.regex.Pattern.inRange(int, int, int):boolean (16 bytes)   relevance-based (relevance=0.232380, probability=0.000028, bonus=1.000000, nodes=11 <= 69.713917)
                            @ 9  java.util.regex.Pattern.lambda$Range$17(int, int, int):boolean (7 bytes)   inline method (bytecode parsing)
                                                                @ 3  java.util.regex.Pattern.inRange(int, int, int):boolean (16 bytes)   relevance-based (relevance=0.232380, probability=0.000014, bonus=1.000000, nodes=11 <= 69.713917)
                                                                @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   not inlining it exceeds the maximum recursive inlining depth
                                                                @ 2  java.util.regex.Pattern$CharPredicate.is(int):boolean (0 bytes)   not inlining it is a polymorphic method call and at least one invoked method cannot be inlined
                                                                @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.232380, probability=0.000014, bonus=1.000000, nodes=13 <= 69.713917)
                                                              @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   relevance-based (relevance=0.232380, probability=0.000028, bonus=1.000000, nodes=27 <= 69.713917)
                                                            @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.232380, probability=0.000028, bonus=1.000000, nodes=39 <= 69.713917)
                                                          @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   relevance-based (relevance=0.232380, probability=0.000057, bonus=1.000000, nodes=52 <= 69.713917)
                                                        @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.232380, probability=0.000057, bonus=1.000000, nodes=61 <= 69.713917)
                                                      @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   not inlining relevance-based (relevance=0.232380, probability=0.000113, bonus=1.000000, nodes=74 > 69.713917)
                                                    @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.232380, probability=0.000113, bonus=1.000000, nodes=13 <= 69.713917)
                                                  @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   relevance-based (relevance=0.232380, probability=0.000227, bonus=1.000000, nodes=27 <= 69.713917)
                                                @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.232380, probability=0.000227, bonus=1.000000, nodes=39 <= 69.713917)
                                              @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   relevance-based (relevance=0.232380, probability=0.000453, bonus=1.000000, nodes=52 <= 69.713917)
                                            @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.232380, probability=0.000453, bonus=1.000000, nodes=61 <= 69.713917)
                                            @ 5  java.util.regex.Pattern.lambda$Single$14(int, int):boolean (11 bytes)   trivial (relevance=0.848138, probability=0.001653, bonus=1.000000, nodes=9)
                                          @ 19  java.util.regex.Pattern$$Lambda/0x800000038.is(int):boolean (9 bytes)   relevance-based (relevance=0.848138, probability=0.002560, bonus=1.000000, nodes=79 <= 254.441355)
                                        @ 28  java.util.regex.Pattern$BmpCharPropertyGreedy.match(Matcher, int, CharSequence):boolean (89 bytes)   not inlining relevance-based (relevance=0.500045, probability=0.005119, bonus=1.000000, nodes=205 > 150.013554)
                                              @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=0.005119, bonus=1.000000, nodes=9)
                            @ 3  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                                              @ 12  java.lang.StringLatin1.charAt(byte[], int):char (15 bytes)   relevance-based (relevance=1.000000, probability=0.005119, bonus=1.000000, nodes=11 <= 300.000000)
                                            @ 14  java.lang.String.charAt(int):char (25 bytes)   relevance-based (relevance=1.696122, probability=0.005119, bonus=1.000000, nodes=16 <= 300.000000)
                            @ 9  java.util.regex.Pattern.lambda$Range$17(int, int, int):boolean (7 bytes)   inline method (bytecode parsing)
                                                  @ 3  java.util.regex.Pattern.inRange(int, int, int):boolean (16 bytes)   relevance-based (relevance=0.464717, probability=0.000453, bonus=1.000000, nodes=11 <= 139.415237)
                            @ 9  java.util.regex.Pattern.lambda$Range$17(int, int, int):boolean (7 bytes)   inline method (bytecode parsing)
                                                      @ 3  java.util.regex.Pattern.inRange(int, int, int):boolean (16 bytes)   relevance-based (relevance=0.464717, probability=0.000226, bonus=1.000000, nodes=11 <= 139.415237)
                            @ 9  java.util.regex.Pattern.lambda$Range$17(int, int, int):boolean (7 bytes)   inline method (bytecode parsing)
                                                          @ 3  java.util.regex.Pattern.inRange(int, int, int):boolean (16 bytes)   relevance-based (relevance=0.464717, probability=0.000113, bonus=1.000000, nodes=11 <= 139.415237)
                            @ 9  java.util.regex.Pattern.lambda$Range$17(int, int, int):boolean (7 bytes)   inline method (bytecode parsing)
                                                              @ 3  java.util.regex.Pattern.inRange(int, int, int):boolean (16 bytes)   relevance-based (relevance=0.464717, probability=0.000057, bonus=1.000000, nodes=11 <= 139.415237)
                            @ 9  java.util.regex.Pattern.lambda$Range$17(int, int, int):boolean (7 bytes)   inline method (bytecode parsing)
                                                                  @ 3  java.util.regex.Pattern.inRange(int, int, int):boolean (16 bytes)   relevance-based (relevance=0.464717, probability=0.000028, bonus=1.000000, nodes=11 <= 139.415237)
                                                                  @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   not inlining it exceeds the maximum recursive inlining depth
                                                                  @ 2  java.util.regex.Pattern$CharPredicate.is(int):boolean (0 bytes)   not inlining it is a polymorphic method call and at least one invoked method cannot be inlined
                                                                  @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.464717, probability=0.000028, bonus=1.000000, nodes=13 <= 139.415237)
                                                                @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   relevance-based (relevance=0.464717, probability=0.000057, bonus=1.000000, nodes=27 <= 139.415237)
                                                              @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.464717, probability=0.000057, bonus=1.000000, nodes=39 <= 139.415237)
                                                            @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   relevance-based (relevance=0.464717, probability=0.000113, bonus=1.000000, nodes=52 <= 139.415237)
                                                          @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.464717, probability=0.000113, bonus=1.000000, nodes=61 <= 139.415237)
                                                        @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   relevance-based (relevance=0.464717, probability=0.000226, bonus=1.000000, nodes=74 <= 139.415237)
                                                      @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.464717, probability=0.000226, bonus=1.000000, nodes=83 <= 139.415237)
                                                    @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   relevance-based (relevance=0.464717, probability=0.000453, bonus=1.000000, nodes=96 <= 139.415237)
                                                  @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.464717, probability=0.000453, bonus=1.000000, nodes=105 <= 139.415237)
                                                @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   relevance-based (relevance=0.464717, probability=0.000906, bonus=1.000000, nodes=118 <= 139.415237)
                                              @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.464717, probability=0.000906, bonus=1.000000, nodes=127 <= 139.415237)
                                              @ 5  java.util.regex.Pattern.lambda$Single$14(int, int):boolean (11 bytes)   trivial (relevance=1.000000, probability=0.003307, bonus=1.000000, nodes=9)
                                            @ 19  java.util.regex.Pattern$$Lambda/0x800000038.is(int):boolean (9 bytes)   relevance-based (relevance=1.696122, probability=0.005119, bonus=1.000000, nodes=145 <= 300.000000)
                                          @ 36  java.util.regex.Pattern$Branch.match(Matcher, int, CharSequence):boolean (66 bytes)   not inlining it exceeds the maximum recursive inlining depth
                                          @ 36  java.util.regex.Pattern$Node.match(Matcher, int, CharSequence):boolean (27 bytes)   not inlining it is a polymorphic method call and at least one invoked method cannot be inlined
                                              @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=0.008691, bonus=1.000000, nodes=9)
                            @ 3  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                                              @ 12  java.lang.StringLatin1.charAt(byte[], int):char (15 bytes)   relevance-based (relevance=1.000000, probability=0.008691, bonus=1.000000, nodes=11 <= 300.000000)
                                            @ 21  java.lang.String.charAt(int):char (25 bytes)   relevance-based (relevance=1.698026, probability=0.008691, bonus=1.000000, nodes=16 <= 300.000000)
                                              @ 5  java.util.regex.Pattern.lambda$Single$14(int, int):boolean (11 bytes)   trivial (relevance=0.888539, probability=0.002529, bonus=1.000000, nodes=9)
                                                @ 8  java.util.regex.ASCII.isDigit(int):boolean (18 bytes)   relevance-based (relevance=1.000000, probability=0.004833, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 1  java.util.regex.CharPredicates.lambda$ASCII_DIGIT$18(int):boolean (20 bytes)   relevance-based (relevance=1.000000, probability=0.004833, bonus=1.000000, nodes=16 <= 300.000000)
                                            @ 26  java.util.regex.CharPredicates$$Lambda/0x800000034.is(int):boolean (5 bytes)   relevance-based (relevance=1.698026, probability=0.008691, bonus=1.000000, nodes=33 <= 300.000000)
                                          @ 28  java.util.regex.Pattern$BmpCharPropertyGreedy.match(Matcher, int, CharSequence):boolean (89 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.010237, bonus=1.000000, nodes=317 > 300.000000)
                                        @ 50  java.util.regex.Pattern$GroupHead.match(Matcher, int, CharSequence):boolean (47 bytes)   relevance-based (relevance=1.666707, probability=0.010237, bonus=1.000000, nodes=20 <= 300.000000)
                                      @ 32  java.util.regex.Pattern$Branch.match(Matcher, int, CharSequence):boolean (66 bytes)   not inlining it exceeds the maximum recursive inlining depth
                                      @ 32  java.util.regex.Pattern$Node.match(Matcher, int, CharSequence):boolean (27 bytes)   not inlining it is a polymorphic method call and at least one invoked method cannot be inlined
                                      @ 32  java.util.regex.Pattern$Branch.match(Matcher, int, CharSequence):boolean (66 bytes)   relevance-based (relevance=1.000000, probability=0.015356, bonus=1.000000, nodes=86 <= 300.000000)
                                    @ 32  java.util.regex.Pattern$Branch.match(Matcher, int, CharSequence):boolean (66 bytes)   relevance-based (relevance=1.000000, probability=0.038393, bonus=1.000000, nodes=171 <= 300.000000)
                                  @ 32  java.util.regex.Pattern$Branch.match(Matcher, int, CharSequence):boolean (66 bytes)   relevance-based (relevance=1.000000, probability=0.095987, bonus=1.000000, nodes=255 <= 300.000000)
                                @ 32  java.util.regex.Pattern$Branch.match(Matcher, int, CharSequence):boolean (66 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.239981, bonus=1.000000, nodes=339 > 300.000000)
                              @ 32  java.util.regex.Pattern$Branch.match(Matcher, int, CharSequence):boolean (66 bytes)   relevance-based (relevance=1.000000, probability=0.599986, bonus=1.000000, nodes=86 <= 300.000000)
                            @ 2  java.nio.CharBuffer.limit(int):CharBuffer (8 bytes)   inline method (bytecode parsing)
                            @ 2  java.nio.IntBuffer.limit(int):IntBuffer (8 bytes)   inline method (bytecode parsing)
                            @ 2  java.nio.MappedByteBuffer.limit(int):MappedByteBuffer (8 bytes)   inline method (bytecode parsing)
                              @ 2  java.nio.ByteBuffer.limit(int):ByteBuffer (8 bytes)   inline method (bytecode parsing)
                                @ 2  java.nio.Buffer.limit(int):Buffer (65 bytes)   relevance-based (relevance=0.201232, probability=0.106967, bonus=1.000000, nodes=27 <= 60.369610)
                                  @ 2  java.nio.Buffer.limit(int):Buffer (65 bytes)   relevance-based (relevance=0.175829, probability=0.093463, bonus=1.000000, nodes=27 <= 52.748607)
                                @ 2  java.nio.ByteBuffer.limit(int):ByteBuffer (8 bytes)   relevance-based (relevance=0.175829, probability=0.093463, bonus=1.000000, nodes=28 <= 52.748607)
                                @ 2  java.nio.Buffer.limit(int):Buffer (65 bytes)   relevance-based (relevance=0.504195, probability=0.268010, bonus=1.000000, nodes=27 <= 151.258434)
                                @ 2  java.nio.Buffer.limit(int):Buffer (65 bytes)   relevance-based (relevance=1.000000, probability=0.531560, bonus=1.000000, nodes=27 <= 300.000000)
                              @ 39  java.nio.CharBuffer.limit(int):Buffer (6 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=122 <= 300.000000)
                            @ 2  java.nio.CharBuffer.position(int):CharBuffer (8 bytes)   inline method (bytecode parsing)
                            @ 2  java.nio.IntBuffer.position(int):IntBuffer (8 bytes)   inline method (bytecode parsing)
                            @ 2  java.nio.MappedByteBuffer.position(int):MappedByteBuffer (8 bytes)   inline method (bytecode parsing)
                              @ 2  java.nio.ByteBuffer.position(int):ByteBuffer (8 bytes)   inline method (bytecode parsing)
                                @ 2  java.nio.Buffer.position(int):Buffer (52 bytes)   relevance-based (relevance=0.387201, probability=0.106967, bonus=1.000000, nodes=16 <= 116.160396)
                                  @ 2  java.nio.Buffer.position(int):Buffer (52 bytes)   relevance-based (relevance=0.338321, probability=0.093463, bonus=1.000000, nodes=16 <= 101.496416)
                                @ 2  java.nio.ByteBuffer.position(int):ByteBuffer (8 bytes)   relevance-based (relevance=0.338321, probability=0.093463, bonus=1.000000, nodes=17 <= 101.496416)
                                @ 2  java.nio.Buffer.position(int):Buffer (52 bytes)   relevance-based (relevance=0.970148, probability=0.268010, bonus=1.000000, nodes=16 <= 291.044445)
                                @ 2  java.nio.Buffer.position(int):Buffer (52 bytes)   relevance-based (relevance=1.000000, probability=0.531560, bonus=1.000000, nodes=16 <= 300.000000)
                              @ 45  java.nio.CharBuffer.position(int):Buffer (6 bytes)   relevance-based (relevance=1.924154, probability=1.000000, bonus=1.000000, nodes=78 <= 300.000000)
                            @ 81  java.lang.Integer.rotateLeft(int, int):int (9 bytes)   inline method (bytecode parsing)
                            @ 142  java.lang.Integer.rotateLeft(int, int):int (9 bytes)   inline method (bytecode parsing)
                            @ 187  java.lang.Integer.rotateLeft(int, int):int (9 bytes)   inline method (bytecode parsing)
                            @ 217  java.lang.Integer.rotateLeft(int, int):int (9 bytes)   inline method (bytecode parsing)
                            @ 257  java.lang.Integer.rotateLeft(int, int):int (9 bytes)   inline method (bytecode parsing)
                            @ 287  java.lang.Integer.rotateLeft(int, int):int (9 bytes)   inline method (bytecode parsing)
                            @ 336  java.lang.Integer.rotateLeft(int, int):int (9 bytes)   inline method (bytecode parsing)
                            @ 366  java.lang.Integer.rotateLeft(int, int):int (9 bytes)   inline method (bytecode parsing)
                            @ 406  java.lang.Integer.rotateLeft(int, int):int (9 bytes)   inline method (bytecode parsing)
                            @ 7  java.lang.invoke.VarHandleGuards.guard_LI_I(VarHandle, Object, int, VarHandle$AccessDescriptor):int (78 bytes)   inline method (bytecode parsing)
                              @ 2  java.lang.invoke.VarHandle.checkAccessModeThenIsDirect(VarHandle$AccessDescriptor):boolean (29 bytes)   inline method (bytecode parsing)
                                @ 12  java.lang.invoke.VarHandle.accessModeType(int):MethodType (41 bytes)   inline method (bytecode parsing)
                              @ 42  java.lang.invoke.VarForm.getMemberName(int):MemberName (31 bytes)   inline method (bytecode parsing)
                              @ 45  java.lang.invoke.VarHandleByteArrayAsInts$ArrayHandle.get(VarHandle, Object, int):int (36 bytes)   inline method (bytecode parsing)
                                @ 19  java.lang.invoke.VarHandleByteArrayAsInts$ArrayHandle.index(byte[], int):int (12 bytes)   inline method (bytecode parsing)
                                @ 32  jdk.internal.misc.Unsafe.getIntUnaligned(Object, long, boolean):int (12 bytes)   inline method (bytecode parsing)
                                  @ 8  jdk.internal.misc.Unsafe.convEndian(boolean, int):int (16 bytes)   inline method (bytecode parsing)
                            @ 20  java.lang.invoke.VarHandleGuards.guard_LI_I(VarHandle, Object, int, VarHandle$AccessDescriptor):int (78 bytes)   inline method (bytecode parsing)
                              @ 2  java.lang.invoke.VarHandle.checkAccessModeThenIsDirect(VarHandle$AccessDescriptor):boolean (29 bytes)   inline method (bytecode parsing)
                                @ 12  java.lang.invoke.VarHandle.accessModeType(int):MethodType (41 bytes)   inline method (bytecode parsing)
                              @ 42  java.lang.invoke.VarForm.getMemberName(int):MemberName (31 bytes)   inline method (bytecode parsing)
                              @ 45  java.lang.invoke.VarHandleByteArrayAsInts$ArrayHandle.get(VarHandle, Object, int):int (36 bytes)   inline method (bytecode parsing)
                                @ 19  java.lang.invoke.VarHandleByteArrayAsInts$ArrayHandle.index(byte[], int):int (12 bytes)   inline method (bytecode parsing)
                                @ 32  jdk.internal.misc.Unsafe.getIntUnaligned(Object, long, boolean):int (12 bytes)   inline method (bytecode parsing)
                                  @ 8  jdk.internal.misc.Unsafe.convEndian(boolean, int):int (16 bytes)   inline method (bytecode parsing)
                            @ 34  java.lang.invoke.VarHandleGuards.guard_LI_I(VarHandle, Object, int, VarHandle$AccessDescriptor):int (78 bytes)   inline method (bytecode parsing)
                              @ 2  java.lang.invoke.VarHandle.checkAccessModeThenIsDirect(VarHandle$AccessDescriptor):boolean (29 bytes)   inline method (bytecode parsing)
                                @ 12  java.lang.invoke.VarHandle.accessModeType(int):MethodType (41 bytes)   inline method (bytecode parsing)
                              @ 42  java.lang.invoke.VarForm.getMemberName(int):MemberName (31 bytes)   inline method (bytecode parsing)
                              @ 45  java.lang.invoke.VarHandleByteArrayAsInts$ArrayHandle.get(VarHandle, Object, int):int (36 bytes)   inline method (bytecode parsing)
                                @ 19  java.lang.invoke.VarHandleByteArrayAsInts$ArrayHandle.index(byte[], int):int (12 bytes)   inline method (bytecode parsing)
                                @ 32  jdk.internal.misc.Unsafe.getIntUnaligned(Object, long, boolean):int (12 bytes)   inline method (bytecode parsing)
                                  @ 8  jdk.internal.misc.Unsafe.convEndian(boolean, int):int (16 bytes)   inline method (bytecode parsing)
                            @ 48  java.lang.invoke.VarHandleGuards.guard_LI_I(VarHandle, Object, int, VarHandle$AccessDescriptor):int (78 bytes)   inline method (bytecode parsing)
                              @ 2  java.lang.invoke.VarHandle.checkAccessModeThenIsDirect(VarHandle$AccessDescriptor):boolean (29 bytes)   inline method (bytecode parsing)
                                @ 12  java.lang.invoke.VarHandle.accessModeType(int):MethodType (41 bytes)   inline method (bytecode parsing)
                              @ 42  java.lang.invoke.VarForm.getMemberName(int):MemberName (31 bytes)   inline method (bytecode parsing)
                              @ 45  java.lang.invoke.VarHandleByteArrayAsInts$ArrayHandle.get(VarHandle, Object, int):int (36 bytes)   inline method (bytecode parsing)
                                @ 19  java.lang.invoke.VarHandleByteArrayAsInts$ArrayHandle.index(byte[], int):int (12 bytes)   inline method (bytecode parsing)
                                @ 32  jdk.internal.misc.Unsafe.getIntUnaligned(Object, long, boolean):int (12 bytes)   inline method (bytecode parsing)
                                  @ 8  jdk.internal.misc.Unsafe.convEndian(boolean, int):int (16 bytes)   inline method (bytecode parsing)
                            @ 62  java.lang.invoke.VarHandleGuards.guard_LI_I(VarHandle, Object, int, VarHandle$AccessDescriptor):int (78 bytes)   inline method (bytecode parsing)
                              @ 2  java.lang.invoke.VarHandle.checkAccessModeThenIsDirect(VarHandle$AccessDescriptor):boolean (29 bytes)   inline method (bytecode parsing)
                                @ 12  java.lang.invoke.VarHandle.accessModeType(int):MethodType (41 bytes)   inline method (bytecode parsing)
                              @ 42  java.lang.invoke.VarForm.getMemberName(int):MemberName (31 bytes)   inline method (bytecode parsing)
                              @ 45  java.lang.invoke.VarHandleByteArrayAsInts$ArrayHandle.get(VarHandle, Object, int):int (36 bytes)   inline method (bytecode parsing)
                                @ 19  java.lang.invoke.VarHandleByteArrayAsInts$ArrayHandle.index(byte[], int):int (12 bytes)   inline method (bytecode parsing)
                                @ 32  jdk.internal.misc.Unsafe.getIntUnaligned(Object, long, boolean):int (12 bytes)   inline method (bytecode parsing)
                                  @ 8  jdk.internal.misc.Unsafe.convEndian(boolean, int):int (16 bytes)   inline method (bytecode parsing)
                            @ 76  java.lang.invoke.VarHandleGuards.guard_LI_I(VarHandle, Object, int, VarHandle$AccessDescriptor):int (78 bytes)   inline method (bytecode parsing)
                              @ 2  java.lang.invoke.VarHandle.checkAccessModeThenIsDirect(VarHandle$AccessDescriptor):boolean (29 bytes)   inline method (bytecode parsing)
                                @ 12  java.lang.invoke.VarHandle.accessModeType(int):MethodType (41 bytes)   inline method (bytecode parsing)
                              @ 42  java.lang.invoke.VarForm.getMemberName(int):MemberName (31 bytes)   inline method (bytecode parsing)
                              @ 45  java.lang.invoke.VarHandleByteArrayAsInts$ArrayHandle.get(VarHandle, Object, int):int (36 bytes)   inline method (bytecode parsing)
                                @ 19  java.lang.invoke.VarHandleByteArrayAsInts$ArrayHandle.index(byte[], int):int (12 bytes)   inline method (bytecode parsing)
                                @ 32  jdk.internal.misc.Unsafe.getIntUnaligned(Object, long, boolean):int (12 bytes)   inline method (bytecode parsing)
                                  @ 8  jdk.internal.misc.Unsafe.convEndian(boolean, int):int (16 bytes)   inline method (bytecode parsing)
                            @ 91  java.lang.invoke.VarHandleGuards.guard_LI_I(VarHandle, Object, int, VarHandle$AccessDescriptor):int (78 bytes)   inline method (bytecode parsing)
                              @ 2  java.lang.invoke.VarHandle.checkAccessModeThenIsDirect(VarHandle$AccessDescriptor):boolean (29 bytes)   inline method (bytecode parsing)
                                @ 12  java.lang.invoke.VarHandle.accessModeType(int):MethodType (41 bytes)   inline method (bytecode parsing)
                              @ 42  java.lang.invoke.VarForm.getMemberName(int):MemberName (31 bytes)   inline method (bytecode parsing)
                              @ 45  java.lang.invoke.VarHandleByteArrayAsInts$ArrayHandle.get(VarHandle, Object, int):int (36 bytes)   inline method (bytecode parsing)
                                @ 19  java.lang.invoke.VarHandleByteArrayAsInts$ArrayHandle.index(byte[], int):int (12 bytes)   inline method (bytecode parsing)
                                @ 32  jdk.internal.misc.Unsafe.getIntUnaligned(Object, long, boolean):int (12 bytes)   inline method (bytecode parsing)
                                  @ 8  jdk.internal.misc.Unsafe.convEndian(boolean, int):int (16 bytes)   inline method (bytecode parsing)
                            @ 106  java.lang.invoke.VarHandleGuards.guard_LI_I(VarHandle, Object, int, VarHandle$AccessDescriptor):int (78 bytes)   inline method (bytecode parsing)
                              @ 2  java.lang.invoke.VarHandle.checkAccessModeThenIsDirect(VarHandle$AccessDescriptor):boolean (29 bytes)   inline method (bytecode parsing)
                                @ 12  java.lang.invoke.VarHandle.accessModeType(int):MethodType (41 bytes)   inline method (bytecode parsing)
                              @ 42  java.lang.invoke.VarForm.getMemberName(int):MemberName (31 bytes)   inline method (bytecode parsing)
                              @ 45  java.lang.invoke.VarHandleByteArrayAsInts$ArrayHandle.get(VarHandle, Object, int):int (36 bytes)   inline method (bytecode parsing)
                                @ 19  java.lang.invoke.VarHandleByteArrayAsInts$ArrayHandle.index(byte[], int):int (12 bytes)   inline method (bytecode parsing)
                                @ 32  jdk.internal.misc.Unsafe.getIntUnaligned(Object, long, boolean):int (12 bytes)   inline method (bytecode parsing)
                                  @ 8  jdk.internal.misc.Unsafe.convEndian(boolean, int):int (16 bytes)   inline method (bytecode parsing)
                            @ 121  java.lang.invoke.VarHandleGuards.guard_LI_I(VarHandle, Object, int, VarHandle$AccessDescriptor):int (78 bytes)   inline method (bytecode parsing)
                              @ 2  java.lang.invoke.VarHandle.checkAccessModeThenIsDirect(VarHandle$AccessDescriptor):boolean (29 bytes)   inline method (bytecode parsing)
                                @ 12  java.lang.invoke.VarHandle.accessModeType(int):MethodType (41 bytes)   inline method (bytecode parsing)
                              @ 42  java.lang.invoke.VarForm.getMemberName(int):MemberName (31 bytes)   inline method (bytecode parsing)
                              @ 45  java.lang.invoke.VarHandleByteArrayAsInts$ArrayHandle.get(VarHandle, Object, int):int (36 bytes)   inline method (bytecode parsing)
                                @ 19  java.lang.invoke.VarHandleByteArrayAsInts$ArrayHandle.index(byte[], int):int (12 bytes)   inline method (bytecode parsing)
                                @ 32  jdk.internal.misc.Unsafe.getIntUnaligned(Object, long, boolean):int (12 bytes)   inline method (bytecode parsing)
                                  @ 8  jdk.internal.misc.Unsafe.convEndian(boolean, int):int (16 bytes)   inline method (bytecode parsing)
                            @ 136  java.lang.invoke.VarHandleGuards.guard_LI_I(VarHandle, Object, int, VarHandle$AccessDescriptor):int (78 bytes)   inline method (bytecode parsing)
                              @ 2  java.lang.invoke.VarHandle.checkAccessModeThenIsDirect(VarHandle$AccessDescriptor):boolean (29 bytes)   inline method (bytecode parsing)
                                @ 12  java.lang.invoke.VarHandle.accessModeType(int):MethodType (41 bytes)   inline method (bytecode parsing)
                              @ 42  java.lang.invoke.VarForm.getMemberName(int):MemberName (31 bytes)   inline method (bytecode parsing)
                              @ 45  java.lang.invoke.VarHandleByteArrayAsInts$ArrayHandle.get(VarHandle, Object, int):int (36 bytes)   inline method (bytecode parsing)
                                @ 19  java.lang.invoke.VarHandleByteArrayAsInts$ArrayHandle.index(byte[], int):int (12 bytes)   inline method (bytecode parsing)
                                @ 32  jdk.internal.misc.Unsafe.getIntUnaligned(Object, long, boolean):int (12 bytes)   inline method (bytecode parsing)
                                  @ 8  jdk.internal.misc.Unsafe.convEndian(boolean, int):int (16 bytes)   inline method (bytecode parsing)
                            @ 151  java.lang.invoke.VarHandleGuards.guard_LI_I(VarHandle, Object, int, VarHandle$AccessDescriptor):int (78 bytes)   inline method (bytecode parsing)
                              @ 2  java.lang.invoke.VarHandle.checkAccessModeThenIsDirect(VarHandle$AccessDescriptor):boolean (29 bytes)   inline method (bytecode parsing)
                                @ 12  java.lang.invoke.VarHandle.accessModeType(int):MethodType (41 bytes)   inline method (bytecode parsing)
                              @ 42  java.lang.invoke.VarForm.getMemberName(int):MemberName (31 bytes)   inline method (bytecode parsing)
                              @ 45  java.lang.invoke.VarHandleByteArrayAsInts$ArrayHandle.get(VarHandle, Object, int):int (36 bytes)   inline method (bytecode parsing)
                                @ 19  java.lang.invoke.VarHandleByteArrayAsInts$ArrayHandle.index(byte[], int):int (12 bytes)   inline method (bytecode parsing)
                                @ 32  jdk.internal.misc.Unsafe.getIntUnaligned(Object, long, boolean):int (12 bytes)   inline method (bytecode parsing)
                                  @ 8  jdk.internal.misc.Unsafe.convEndian(boolean, int):int (16 bytes)   inline method (bytecode parsing)
                            @ 166  java.lang.invoke.VarHandleGuards.guard_LI_I(VarHandle, Object, int, VarHandle$AccessDescriptor):int (78 bytes)   inline method (bytecode parsing)
                              @ 2  java.lang.invoke.VarHandle.checkAccessModeThenIsDirect(VarHandle$AccessDescriptor):boolean (29 bytes)   inline method (bytecode parsing)
                                @ 12  java.lang.invoke.VarHandle.accessModeType(int):MethodType (41 bytes)   inline method (bytecode parsing)
                              @ 42  java.lang.invoke.VarForm.getMemberName(int):MemberName (31 bytes)   inline method (bytecode parsing)
                              @ 45  java.lang.invoke.VarHandleByteArrayAsInts$ArrayHandle.get(VarHandle, Object, int):int (36 bytes)   inline method (bytecode parsing)
                                @ 19  java.lang.invoke.VarHandleByteArrayAsInts$ArrayHandle.index(byte[], int):int (12 bytes)   inline method (bytecode parsing)
                                @ 32  jdk.internal.misc.Unsafe.getIntUnaligned(Object, long, boolean):int (12 bytes)   inline method (bytecode parsing)
                                  @ 8  jdk.internal.misc.Unsafe.convEndian(boolean, int):int (16 bytes)   inline method (bytecode parsing)
                              @ 8  org.graalvm.word.LocationIdentity$AnyLocationIdentity.isImmutable():boolean (2 bytes)   relevance-based (relevance=2.424964, probability=0.970434, bonus=1.000000, nodes=14 <= 300.000000)
                            @ 181  java.lang.invoke.VarHandleGuards.guard_LI_I(VarHandle, Object, int, VarHandle$AccessDescriptor):int (78 bytes)   inline method (bytecode parsing)
                              @ 2  java.lang.invoke.VarHandle.checkAccessModeThenIsDirect(VarHandle$AccessDescriptor):boolean (29 bytes)   inline method (bytecode parsing)
                                @ 12  java.lang.invoke.VarHandle.accessModeType(int):MethodType (41 bytes)   inline method (bytecode parsing)
                              @ 15  jdk.graal.compiler.nodes.FieldLocationIdentity.isImmutable():boolean (5 bytes)   relevance-based (relevance=1.729143, probability=0.963838, bonus=1.000000, nodes=10 <= 300.000000)
                              @ 42  java.lang.invoke.VarForm.getMemberName(int):MemberName (31 bytes)   inline method (bytecode parsing)
                              @ 45  java.lang.invoke.VarHandleByteArrayAsInts$ArrayHandle.get(VarHandle, Object, int):int (36 bytes)   inline method (bytecode parsing)
                              @ 24  org.graalvm.word.LocationIdentity.isAny():boolean (13 bytes)   trivial (relevance=1.235773, probability=0.688830, bonus=1.000000, nodes=9)
                                @ 19  java.lang.invoke.VarHandleByteArrayAsInts$ArrayHandle.index(byte[], int):int (12 bytes)   inline method (bytecode parsing)
                              @ 31  org.graalvm.word.LocationIdentity.isAny():boolean (13 bytes)   trivial (relevance=1.235773, probability=0.688830, bonus=1.000000, nodes=9)
                                @ 32  jdk.internal.misc.Unsafe.getIntUnaligned(Object, long, boolean):int (12 bytes)   inline method (bytecode parsing)
                                  @ 8  jdk.internal.misc.Unsafe.convEndian(boolean, int):int (16 bytes)   inline method (bytecode parsing)
                            @ 196  java.lang.invoke.VarHandleGuards.guard_LI_I(VarHandle, Object, int, VarHandle$AccessDescriptor):int (78 bytes)   inline method (bytecode parsing)
                              @ 2  java.lang.invoke.VarHandle.checkAccessModeThenIsDirect(VarHandle$AccessDescriptor):boolean (29 bytes)   inline method (bytecode parsing)
                                @ 12  java.lang.invoke.VarHandle.accessModeType(int):MethodType (41 bytes)   inline method (bytecode parsing)
                              @ 42  java.lang.invoke.VarForm.getMemberName(int):MemberName (31 bytes)   inline method (bytecode parsing)
                              @ 45  java.lang.invoke.VarHandleByteArrayAsInts$ArrayHandle.get(VarHandle, Object, int):int (36 bytes)   inline method (bytecode parsing)
                                @ 19  java.lang.invoke.VarHandleByteArrayAsInts$ArrayHandle.index(byte[], int):int (12 bytes)   inline method (bytecode parsing)
                            @ 31  jdk.vm.ci.meta.ModifiersProvider.isStatic():boolean (10 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.vm.ci.hotspot.HotSpotResolvedJavaFieldImpl.getModifiers():int (9 bytes)   inline method (bytecode parsing)
                                @ 32  jdk.internal.misc.Unsafe.getIntUnaligned(Object, long, boolean):int (12 bytes)   inline method (bytecode parsing)
                            @ 35  jdk.vm.ci.meta.ModifiersProvider.isStatic():boolean (10 bytes)   inline method (bytecode parsing)
                                  @ 8  jdk.internal.misc.Unsafe.convEndian(boolean, int):int (16 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.vm.ci.hotspot.HotSpotResolvedJavaFieldImpl.getModifiers():int (9 bytes)   inline method (bytecode parsing)
                            @ 211  java.lang.invoke.VarHandleGuards.guard_LI_I(VarHandle, Object, int, VarHandle$AccessDescriptor):int (78 bytes)   inline method (bytecode parsing)
                              @ 2  java.lang.invoke.VarHandle.checkAccessModeThenIsDirect(VarHandle$AccessDescriptor):boolean (29 bytes)   inline method (bytecode parsing)
                                @ 12  java.lang.invoke.VarHandle.accessModeType(int):MethodType (41 bytes)   inline method (bytecode parsing)
                              @ 42  java.lang.invoke.VarForm.getMemberName(int):MemberName (31 bytes)   inline method (bytecode parsing)
                                  @ 4  jdk.vm.ci.hotspot.HotSpotModifiers.jvmFieldModifiers():int (12 bytes)   trivial (relevance=2.000000, probability=0.008284, bonus=1.000000, nodes=4)
                              @ 45  java.lang.invoke.VarHandleByteArrayAsInts$ArrayHandle.get(VarHandle, Object, int):int (36 bytes)   inline method (bytecode parsing)
                                @ 19  java.lang.invoke.VarHandleByteArrayAsInts$ArrayHandle.index(byte[], int):int (12 bytes)   inline method (bytecode parsing)
                                  @ 6  java.lang.reflect.Modifier.isStatic(int):boolean (13 bytes)   trivial (relevance=2.000000, probability=0.008284, bonus=1.000000, nodes=9)
                                @ 32  jdk.internal.misc.Unsafe.getIntUnaligned(Object, long, boolean):int (12 bytes)   inline method (bytecode parsing)
                                  @ 8  jdk.internal.misc.Unsafe.convEndian(boolean, int):int (16 bytes)   inline method (bytecode parsing)
                                  @ 4  jdk.vm.ci.hotspot.HotSpotModifiers.jvmFieldModifiers():int (12 bytes)   trivial (relevance=2.000000, probability=0.008284, bonus=1.000000, nodes=4)
                            @ 226  java.lang.invoke.VarHandleGuards.guard_LI_I(VarHandle, Object, int, VarHandle$AccessDescriptor):int (78 bytes)   inline method (bytecode parsing)
                              @ 2  java.lang.invoke.VarHandle.checkAccessModeThenIsDirect(VarHandle$AccessDescriptor):boolean (29 bytes)   inline method (bytecode parsing)
                                  @ 6  java.lang.reflect.Modifier.isStatic(int):boolean (13 bytes)   trivial (relevance=2.000000, probability=0.008284, bonus=1.000000, nodes=9)
                                @ 12  java.lang.invoke.VarHandle.accessModeType(int):MethodType (41 bytes)   inline method (bytecode parsing)
                              @ 42  java.lang.invoke.VarForm.getMemberName(int):MemberName (31 bytes)   inline method (bytecode parsing)
                              @ 45  java.lang.invoke.VarHandleByteArrayAsInts$ArrayHandle.get(VarHandle, Object, int):int (36 bytes)   inline method (bytecode parsing)
                                @ 19  java.lang.invoke.VarHandleByteArrayAsInts$ArrayHandle.index(byte[], int):int (12 bytes)   inline method (bytecode parsing)
                            @ 1  jdk.vm.ci.hotspot.HotSpotResolvedObjectTypeImpl.getMetaspacePointer():long (5 bytes)   inline accessor method (bytecode parsing)
                            @ 17  java.lang.NullPointerException.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                                @ 32  jdk.internal.misc.Unsafe.getIntUnaligned(Object, long, boolean):int (12 bytes)   inline method (bytecode parsing)
                              @ 2  java.lang.RuntimeException.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                                @ 2  java.lang.Exception.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                                  @ 8  jdk.internal.misc.Unsafe.convEndian(boolean, int):int (16 bytes)   inline method (bytecode parsing)
                 n                      @ 25  java.lang.NullPointerException.getExtendedNPEMessage():String (0 bytes)   not inlining it is a non-intrinsic native method
                 n                        @ 16  java.lang.Throwable.fillInStackTrace(int):Throwable (0 bytes)   not inlining it is a non-intrinsic native method
              s                           @ 37  java.lang.Throwable.fillInStackTrace():Throwable (29 bytes)   relevance-based (relevance=4.000000, probability=0.000518, bonus=1.000000, nodes=34 <= 300.000000)
                              @ 21  sun.security.provider.ByteArrayAccess.b2iBig64(byte[], int, int[]):void (231 bytes)   relevance-based (relevance=1.339608, probability=1.000000, bonus=1.000000, nodes=230 <= 300.000000)
              s                         @ 24  java.lang.NullPointerException.fillInStackTrace():Throwable (41 bytes)   relevance-based (relevance=1.000000, probability=0.000518, bonus=1.000000, nodes=65 <= 300.000000)
                                      @ 2  java.lang.Throwable.<init>(String):void (34 bytes)   relevance-based (relevance=1.000000, probability=0.000518, bonus=1.000000, nodes=76 <= 300.000000)
                                    @ 22  jdk.vm.ci.hotspot.HotSpotResolvedObjectTypeImpl.getKlassPointer():long (23 bytes)   relevance-based (relevance=1.000000, probability=0.001035, bonus=1.000000, nodes=88 <= 300.000000)
                            @ 1  jdk.vm.ci.hotspot.HotSpotResolvedObjectTypeImpl.getMetaspacePointer():long (5 bytes)   inline accessor method (bytecode parsing)
                            @ 17  java.lang.NullPointerException.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  java.lang.RuntimeException.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                                @ 2  java.lang.Exception.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                 n                      @ 25  java.lang.NullPointerException.getExtendedNPEMessage():String (0 bytes)   not inlining it is a non-intrinsic native method
                 n                        @ 16  java.lang.Throwable.fillInStackTrace(int):Throwable (0 bytes)   not inlining it is a non-intrinsic native method
              s                           @ 37  java.lang.Throwable.fillInStackTrace():Throwable (29 bytes)   relevance-based (relevance=4.000000, probability=0.000259, bonus=1.000000, nodes=34 <= 300.000000)
              s                         @ 24  java.lang.NullPointerException.fillInStackTrace():Throwable (41 bytes)   relevance-based (relevance=1.000000, probability=0.000259, bonus=1.000000, nodes=65 <= 300.000000)
                                      @ 2  java.lang.Throwable.<init>(String):void (34 bytes)   relevance-based (relevance=1.000000, probability=0.000259, bonus=1.000000, nodes=76 <= 300.000000)
                                    @ 26  jdk.vm.ci.hotspot.HotSpotResolvedObjectTypeImpl.getKlassPointer():long (23 bytes)   relevance-based (relevance=4.000000, probability=0.000518, bonus=1.000000, nodes=88 <= 300.000000)
                                  @ 51  jdk.vm.ci.hotspot.HotSpotResolvedObjectTypeImpl.equals(Object):boolean (39 bytes)   relevance-based (relevance=1.000000, probability=0.004142, bonus=1.000000, nodes=182 <= 300.000000)
                                @ 27  jdk.vm.ci.hotspot.HotSpotResolvedJavaFieldImpl.equals(Object):boolean (61 bytes)   relevance-based (relevance=1.035669, probability=0.066269, bonus=1.000000, nodes=233 <= 300.000000)
                              @ 39  jdk.graal.compiler.nodes.FieldLocationIdentity.equals(Object):boolean (54 bytes)   not inlining relevance-based (relevance=0.517834, probability=0.288645, bonus=1.000000, nodes=271 > 155.350283)
                            @ 4  java.util.concurrent.ConcurrentHashMap.spread(int):int (10 bytes)   inline method (bytecode parsing)
                            @ 8  java.lang.WeakPairMap$Pair.hashCode(Object, Object):int (10 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.WeakPairMap$Pair$Lookup.hashCode():int (12 bytes)   relevance-based (relevance=3.983278, probability=1.000000, bonus=1.000000, nodes=12 <= 300.000000)
                              @ 34  java.util.concurrent.ConcurrentHashMap.tabAt(ConcurrentHashMap$Node[], int):ConcurrentHashMap$Node (22 bytes)   relevance-based (relevance=1.746239, probability=0.997169, bonus=1.000000, nodes=11 <= 300.000000)
                            @ 73  java.lang.Object.equals(Object):boolean (11 bytes)   not inlining no methods remaining after filtering less frequent methods (8 methods previously)
                            @ 34  java.lang.ref.Reference.get():Object (5 bytes)   inline accessor method (bytecode parsing)
                            @ 22  jdk.internal.loader.AbstractClassLoaderValue$Sub.parent():AbstractClassLoaderValue (5 bytes)   inline accessor method (bytecode parsing)
                            @ 26  jdk.internal.loader.AbstractClassLoaderValue$Sub.parent():AbstractClassLoaderValue (5 bytes)   inline accessor method (bytecode parsing)
                            @ 50  sun.util.locale.BaseLocale.getLanguage():String (5 bytes)   inline accessor method (bytecode parsing)
                            @ 54  sun.util.locale.BaseLocale.getLanguage():String (5 bytes)   inline accessor method (bytecode parsing)
                            @ 64  sun.util.locale.BaseLocale.getScript():String (5 bytes)   inline accessor method (bytecode parsing)
                            @ 68  sun.util.locale.BaseLocale.getScript():String (5 bytes)   inline accessor method (bytecode parsing)
                            @ 78  sun.util.locale.BaseLocale.getRegion():String (5 bytes)   inline accessor method (bytecode parsing)
                            @ 82  sun.util.locale.BaseLocale.getRegion():String (5 bytes)   inline accessor method (bytecode parsing)
                            @ 92  sun.util.locale.BaseLocale.getVariant():String (5 bytes)   inline accessor method (bytecode parsing)
                            @ 96  sun.util.locale.BaseLocale.getVariant():String (5 bytes)   inline accessor method (bytecode parsing)
                              @ 149  java.lang.invoke.MethodType.equals(Object):boolean (56 bytes)   not inlining relevance-based (relevance=0.125424, probability=0.042224, bonus=1.000000, nodes=381 > 37.627204)
                                @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=9)
                            @ 3  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                                @ 12  java.lang.StringLatin1.charAt(byte[], int):char (15 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                              @ 14  java.lang.String.charAt(int):char (25 bytes)   relevance-based (relevance=1.697577, probability=1.000000, bonus=1.000000, nodes=16 <= 300.000000)
                            @ 9  java.util.regex.Pattern.lambda$Range$17(int, int, int):boolean (7 bytes)   inline method (bytecode parsing)
                                    @ 3  java.util.regex.Pattern.inRange(int, int, int):boolean (16 bytes)   relevance-based (relevance=0.473033, probability=0.089466, bonus=1.000000, nodes=11 <= 141.910012)
                            @ 9  java.util.regex.Pattern.lambda$Range$17(int, int, int):boolean (7 bytes)   inline method (bytecode parsing)
                                        @ 3  java.util.regex.Pattern.inRange(int, int, int):boolean (16 bytes)   relevance-based (relevance=0.473033, probability=0.044733, bonus=1.000000, nodes=11 <= 141.910012)
                            @ 9  java.util.regex.Pattern.lambda$Range$17(int, int, int):boolean (7 bytes)   inline method (bytecode parsing)
                                            @ 3  java.util.regex.Pattern.inRange(int, int, int):boolean (16 bytes)   relevance-based (relevance=0.473033, probability=0.022367, bonus=1.000000, nodes=11 <= 141.910012)
                            @ 9  java.util.regex.Pattern.lambda$Range$17(int, int, int):boolean (7 bytes)   inline method (bytecode parsing)
                                                @ 3  java.util.regex.Pattern.inRange(int, int, int):boolean (16 bytes)   relevance-based (relevance=0.473033, probability=0.011183, bonus=1.000000, nodes=11 <= 141.910012)
                            @ 9  java.util.regex.Pattern.lambda$Range$17(int, int, int):boolean (7 bytes)   inline method (bytecode parsing)
                                                    @ 3  java.util.regex.Pattern.inRange(int, int, int):boolean (16 bytes)   relevance-based (relevance=0.473033, probability=0.005592, bonus=1.000000, nodes=11 <= 141.910012)
                                                    @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   not inlining it exceeds the maximum recursive inlining depth
                                                    @ 2  java.util.regex.Pattern$CharPredicate.is(int):boolean (0 bytes)   not inlining it is a polymorphic method call and at least one invoked method cannot be inlined
                                                    @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.473033, probability=0.005592, bonus=1.000000, nodes=13 <= 141.910012)
                                                  @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   relevance-based (relevance=0.473033, probability=0.011183, bonus=1.000000, nodes=27 <= 141.910012)
                                                @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.473033, probability=0.011183, bonus=1.000000, nodes=39 <= 141.910012)
                                              @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   relevance-based (relevance=0.473033, probability=0.022367, bonus=1.000000, nodes=52 <= 141.910012)
                                            @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.473033, probability=0.022367, bonus=1.000000, nodes=61 <= 141.910012)
                                          @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   relevance-based (relevance=0.473033, probability=0.044733, bonus=1.000000, nodes=74 <= 141.910012)
                                        @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.473033, probability=0.044733, bonus=1.000000, nodes=83 <= 141.910012)
                                      @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   relevance-based (relevance=0.473033, probability=0.089466, bonus=1.000000, nodes=96 <= 141.910012)
                                    @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.473033, probability=0.089466, bonus=1.000000, nodes=105 <= 141.910012)
                                  @ 2  java.util.regex.Pattern$$Lambda/0x800000041.is(int):boolean (13 bytes)   relevance-based (relevance=0.473033, probability=0.178932, bonus=1.000000, nodes=118 <= 141.910012)
                                @ 9  java.util.regex.Pattern.lambda$union$3(Pattern$CharPredicate, Pattern$CharPredicate, int):boolean (26 bytes)   relevance-based (relevance=0.473033, probability=0.178932, bonus=1.000000, nodes=127 <= 141.910012)
                                @ 5  java.util.regex.Pattern.lambda$Single$14(int, int):boolean (11 bytes)   trivial (relevance=1.000000, probability=0.642135, bonus=1.000000, nodes=9)
                              @ 19  java.util.regex.Pattern$$Lambda/0x800000038.is(int):boolean (9 bytes)   relevance-based (relevance=1.697577, probability=1.000000, bonus=1.000000, nodes=145 <= 300.000000)
                              @ 36  java.util.regex.Pattern$GroupTail.match(Matcher, int, CharSequence):boolean (111 bytes)   not inlining too large previous low-level graph (low-level-nodes: 635, relevance=0.639936, probability=0.410925, bonus=1.000000, nodes=156)
                            @ 8  org.graalvm.collections.EconomicMapImpl.getKey(int):Object (9 bytes)   inline method (bytecode parsing)
                            @ 53  jdk.internal.math.FormattedFPDecimal.fillWithZeros(int, int):void (20 bytes)   inline method (bytecode parsing)
                            @ 30  jdk.internal.math.FormattedFPDecimal.toDigit(long):char (6 bytes)   inline method (bytecode parsing)
                              @ 2  jdk.internal.math.FormattedFPDecimal.toDigit(int):char (6 bytes)   inline method (bytecode parsing)
                              @ 36  jdk.internal.math.FormattedFPDecimal.fillWithDigits(long, int, int):long (42 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=37 <= 300.000000)
                            @ 1  java.nio.channels.spi.AbstractInterruptibleChannel.blockedOn(Interruptible):void (10 bytes)   inline method (bytecode parsing)
                              @ 0  jdk.internal.access.SharedSecrets.getJavaLangAccess():JavaLangAccess (4 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.Thread.blockedOn(Interruptible):void (27 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=19 <= 300.000000)
                              @ 4  java.lang.System$2.blockedOn(Interruptible):void (5 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=20 <= 300.000000)
                            @ 13  java.nio.channels.spi.AbstractInterruptibleChannel$1.<init>(AbstractInterruptibleChannel):void (10 bytes)   inline method (bytecode parsing)
                            @ 23  java.nio.channels.spi.AbstractInterruptibleChannel.blockedOn(Interruptible):void (10 bytes)   inline method (bytecode parsing)
                              @ 0  jdk.internal.access.SharedSecrets.getJavaLangAccess():JavaLangAccess (4 bytes)   inline method (bytecode parsing)
                                  @ 1  java.lang.Thread.blockedOn(Interruptible):void (27 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=19 <= 300.000000)
                                @ 4  java.lang.System$2.blockedOn(Interruptible):void (5 bytes)   relevance-based (relevance=1.018574, probability=1.000000, bonus=1.000000, nodes=20 <= 300.000000)
                                @ 31  java.lang.Thread.isInterrupted():boolean (5 bytes)   trivial (relevance=1.018574, probability=1.000000, bonus=1.000000, nodes=7)
                              @ 5  java.nio.channels.spi.AbstractInterruptibleChannel.begin():void (48 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=57 <= 300.000000)
                                @ 1  java.nio.channels.spi.AbstractInterruptibleChannel.isOpen():boolean (13 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                              @ 16  sun.nio.ch.SocketChannelImpl.ensureOpen():void (16 bytes)   relevance-based (relevance=1.018574, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                            @ 3  java.lang.Thread.isVirtual():boolean (5 bytes)   inline method (bytecode parsing)
                 n            @ 13  sun.nio.ch.NativeThread.current0():long (0 bytes)   not inlining it is a non-intrinsic native method
                              @ 35  sun.nio.ch.NativeThread.current():long (17 bytes)   relevance-based (relevance=1.018574, probability=1.000000, bonus=1.000000, nodes=15 <= 300.000000)
                            @ 1  java.nio.channels.spi.AbstractInterruptibleChannel.blockedOn(Interruptible):void (10 bytes)   inline method (bytecode parsing)
                              @ 0  jdk.internal.access.SharedSecrets.getJavaLangAccess():JavaLangAccess (4 bytes)   inline method (bytecode parsing)
                                  @ 1  java.lang.Thread.blockedOn(Interruptible):void (27 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=19 <= 300.000000)
                                @ 4  java.lang.System$2.blockedOn(Interruptible):void (5 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=20 <= 300.000000)
                              @ 42  java.nio.channels.spi.AbstractInterruptibleChannel.end(boolean):void (53 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=35 <= 300.000000)
                            @ 1  java.util.Objects.requireNonNull(Object):Object (14 bytes)   inline method (bytecode parsing)
                            @ 9  java.util.concurrent.locks.ReentrantLock.lock():void (8 bytes)   inline method (bytecode parsing)
                            @ 43  sun.nio.ch.IOUtil.write(FileDescriptor, ByteBuffer, long, NativeDispatcher):int (12 bytes)   inline method (bytecode parsing)
                            @ 163  sun.nio.ch.IOStatus.normalize(int):int (10 bytes)   inline method (bytecode parsing)
                            @ 172  java.util.concurrent.locks.ReentrantLock.unlock():void (10 bytes)   inline method (bytecode parsing)
                              @ 5  java.util.concurrent.locks.AbstractQueuedSynchronizer.release(int):boolean (19 bytes)   inline method (bytecode parsing)
                            @ 9  java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(int):void (20 bytes)   inline method (bytecode parsing)
                            @ 7  java.util.concurrent.locks.AbstractQueuedSynchronizer.compareAndSetState(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 15  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                            @ 21  java.util.concurrent.locks.AbstractOwnableSynchronizer.getExclusiveOwnerThread():Thread (5 bytes)   inline accessor method (bytecode parsing)
                            @ 29  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 51  java.util.concurrent.locks.AbstractQueuedSynchronizer.setState(int):void (6 bytes)   inline method (bytecode parsing)
                                @ 1  java.util.concurrent.locks.ReentrantLock$NonfairSync.initialTryLock():boolean (58 bytes)   relevance-based (relevance=1.021219, probability=1.000000, bonus=1.000000, nodes=40 <= 300.000000)
                            @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 10  java.util.concurrent.locks.AbstractQueuedSynchronizer.compareAndSetState(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 20  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                                @ 2  java.util.concurrent.locks.ReentrantLock$NonfairSync.tryAcquire(int):boolean (27 bytes)   not inlining relevance-based (relevance=0.043772, probability=0.038475, bonus=1.000000, nodes=36 > 13.131676)
                            @ 245  java.util.concurrent.locks.AbstractQueuedSynchronizer$ExclusiveNode.<init>():void (5 bytes)   inline method (bytecode parsing)
                              @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer$Node.<init>():void (5 bytes)   inline method (bytecode parsing)
                            @ 393  java.lang.Thread.interrupted():boolean (7 bytes)   inline method (bytecode parsing)
                                @ 15  java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer$Node, int, boolean, boolean, boolean, long):int (424 bytes)   not inlining relevance-based (relevance=0.033935, probability=0.029828, bonus=1.000000, nodes=197 > 10.180569)
                              @ 4  java.util.concurrent.locks.ReentrantLock$Sync.lock():void (13 bytes)   relevance-based (relevance=1.106735, probability=1.000000, bonus=1.000000, nodes=57 <= 300.000000)
                              @ 13  sun.nio.ch.SocketChannelImpl.ensureOpenAndConnected():void (32 bytes)   relevance-based (relevance=1.137693, probability=1.000000, bonus=1.000000, nodes=13 <= 300.000000)
                              @ 17  java.nio.channels.spi.AbstractSelectableChannel.isBlocking():boolean (13 bytes)   relevance-based (relevance=1.137693, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                              @ 25  sun.nio.ch.SocketChannelImpl.beginWrite(boolean):void (52 bytes)   not inlining too large previous low-level graph (low-level-nodes: 630, relevance=1.137693, probability=1.000000, bonus=1.000000, nodes=28)
                            @ 44  java.lang.Thread.isVirtual():boolean (5 bytes)   inline method (bytecode parsing)
                              @ 29  sun.nio.ch.SocketChannelImpl.configureSocketNonBlockingIfVirtualThread():void (85 bytes)   relevance-based (relevance=1.137693, probability=1.000000, bonus=1.000000, nodes=19 <= 300.000000)
                            @ 1  java.nio.Buffer.position():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 7  java.nio.Buffer.limit():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 121  sun.nio.ch.IOUtil.bufferAddress(ByteBuffer):long (10 bytes)   inline method (bytecode parsing)
                              @ 4  java.nio.Buffer$2.getBufferAddress(Buffer):long (5 bytes)   inline method (bytecode parsing)
                            @ 130  sun.nio.ch.SocketDispatcher.write(FileDescriptor, long, int):int (8 bytes)   inline method (bytecode parsing)
                            @ 30  java.nio.Buffer$2.acquireSession(Buffer):void (14 bytes)   inline method (bytecode parsing)
                              @ 1  java.nio.Buffer.session():MemorySessionImpl (20 bytes)   inline method (bytecode parsing)
                                  @ 84  sun.nio.ch.IOUtil.acquireScope(ByteBuffer, boolean):void (36 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                 n              @ 4  sun.nio.ch.SocketDispatcher.write0(FileDescriptor, long, int):int (0 bytes)   not inlining it is a non-intrinsic native method
                            @ 1  java.nio.Buffer.session():MemorySessionImpl (20 bytes)   inline method (bytecode parsing)
                                    @ 4  java.nio.Buffer$2.releaseSession(Buffer):void (28 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=10 <= 300.000000)
                                  @ 136  sun.nio.ch.IOUtil.releaseScope(ByteBuffer):void (23 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 2  java.nio.MappedByteBuffer.position(int):MappedByteBuffer (8 bytes)   inline method (bytecode parsing)
                              @ 2  java.nio.ByteBuffer.position(int):ByteBuffer (8 bytes)   inline method (bytecode parsing)
                                    @ 2  java.nio.Buffer.position(int):Buffer (52 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=16 <= 300.000000)
                                  @ 162  java.nio.MappedByteBuffer.position(int):ByteBuffer (6 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=19 <= 300.000000)
                                @ 18  sun.nio.ch.IOUtil.writeFromNativeBuffer(FileDescriptor, ByteBuffer, long, boolean, boolean, int, NativeDispatcher):int (169 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=61 <= 300.000000)
                              @ 8  sun.nio.ch.IOUtil.write(FileDescriptor, ByteBuffer, long, boolean, boolean, int, NativeDispatcher):int (178 bytes)   relevance-based (relevance=1.137693, probability=1.000000, bonus=1.000000, nodes=66 <= 300.000000)
                              @ 53  sun.nio.ch.IOStatus.okayToRetry(long):boolean (22 bytes)   relevance-based (relevance=1.137693, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                            @ 1  java.nio.channels.spi.AbstractInterruptibleChannel.blockedOn(Interruptible):void (10 bytes)   inline method (bytecode parsing)
                              @ 0  jdk.internal.access.SharedSecrets.getJavaLangAccess():JavaLangAccess (4 bytes)   inline method (bytecode parsing)
                                    @ 1  java.lang.Thread.blockedOn(Interruptible):void (27 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=19 <= 300.000000)
                                  @ 4  java.lang.System$2.blockedOn(Interruptible):void (5 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=20 <= 300.000000)
                                @ 42  java.nio.channels.spi.AbstractInterruptibleChannel.end(boolean):void (53 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=32 <= 300.000000)
                              @ 102  sun.nio.ch.SocketChannelImpl.endWrite(boolean, boolean):void (46 bytes)   relevance-based (relevance=1.137693, probability=1.000000, bonus=1.000000, nodes=47 <= 300.000000)
                            @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 8  java.util.concurrent.locks.AbstractOwnableSynchronizer.getExclusiveOwnerThread():Thread (5 bytes)   inline accessor method (bytecode parsing)
                            @ 41  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                            @ 46  java.util.concurrent.locks.AbstractQueuedSynchronizer.setState(int):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  java.util.concurrent.locks.ReentrantLock$Sync.tryRelease(int):boolean (51 bytes)   relevance-based (relevance=1.137693, probability=1.000000, bonus=1.000000, nodes=37 <= 300.000000)
                            @ 22  java.util.concurrent.locks.AbstractQueuedSynchronizer$Node.getAndUnsetStatus(int):int (14 bytes)   inline method (bytecode parsing)
                              @ 10  jdk.internal.misc.Unsafe.getAndBitwiseAndInt(Object, long, int):int (27 bytes)   inline method (bytecode parsing)
                            @ 5  java.lang.Thread.isVirtual():boolean (5 bytes)   inline method (bytecode parsing)
                                @ 30  java.util.concurrent.locks.LockSupport.unpark(Thread):void (26 bytes)   not inlining relevance-based (relevance=0.011708, probability=0.006677, bonus=1.000000, nodes=20 > 3.512350)
                              @ 12  java.util.concurrent.locks.AbstractQueuedSynchronizer.signalNext(AbstractQueuedSynchronizer$Node):void (34 bytes)   relevance-based (relevance=1.027972, probability=0.903559, bonus=1.000000, nodes=56 <= 300.000000)
                            @ 1  java.nio.Buffer.position():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 7  java.nio.Buffer.limit():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 121  sun.nio.ch.IOUtil.bufferAddress(ByteBuffer):long (10 bytes)   inline method (bytecode parsing)
                              @ 4  java.nio.Buffer$2.getBufferAddress(Buffer):long (5 bytes)   inline method (bytecode parsing)
                            @ 130  sun.nio.ch.SocketDispatcher.write(FileDescriptor, long, int):int (8 bytes)   inline method (bytecode parsing)
                            @ 30  java.nio.Buffer$2.acquireSession(Buffer):void (14 bytes)   inline method (bytecode parsing)
                              @ 1  java.nio.Buffer.session():MemorySessionImpl (20 bytes)   inline method (bytecode parsing)
                                  @ 84  sun.nio.ch.IOUtil.acquireScope(ByteBuffer, boolean):void (36 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                 n              @ 4  sun.nio.ch.SocketDispatcher.write0(FileDescriptor, long, int):int (0 bytes)   not inlining it is a non-intrinsic native method
                            @ 1  java.nio.Buffer.session():MemorySessionImpl (20 bytes)   inline method (bytecode parsing)
                                    @ 4  java.nio.Buffer$2.releaseSession(Buffer):void (28 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=10 <= 300.000000)
                                  @ 136  sun.nio.ch.IOUtil.releaseScope(ByteBuffer):void (23 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 2  java.nio.MappedByteBuffer.position(int):MappedByteBuffer (8 bytes)   inline method (bytecode parsing)
                              @ 2  java.nio.ByteBuffer.position(int):ByteBuffer (8 bytes)   inline method (bytecode parsing)
                                    @ 2  java.nio.Buffer.position(int):Buffer (52 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=16 <= 300.000000)
                                  @ 162  java.nio.MappedByteBuffer.position(int):ByteBuffer (6 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=19 <= 300.000000)
                                @ 18  sun.nio.ch.IOUtil.writeFromNativeBuffer(FileDescriptor, ByteBuffer, long, boolean, boolean, int, NativeDispatcher):int (169 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=66 <= 300.000000)
                              @ 8  sun.nio.ch.IOUtil.write(FileDescriptor, ByteBuffer, long, boolean, boolean, int, NativeDispatcher):int (178 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=71 <= 300.000000)
                            @ 1  java.nio.Buffer.position():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 7  java.nio.Buffer.limit():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 121  sun.nio.ch.IOUtil.bufferAddress(ByteBuffer):long (10 bytes)   inline method (bytecode parsing)
                              @ 4  java.nio.Buffer$2.getBufferAddress(Buffer):long (5 bytes)   inline method (bytecode parsing)
                            @ 130  sun.nio.ch.SocketDispatcher.write(FileDescriptor, long, int):int (8 bytes)   inline method (bytecode parsing)
                            @ 30  java.nio.Buffer$2.acquireSession(Buffer):void (14 bytes)   inline method (bytecode parsing)
                              @ 1  java.nio.Buffer.session():MemorySessionImpl (20 bytes)   inline method (bytecode parsing)
                                @ 84  sun.nio.ch.IOUtil.acquireScope(ByteBuffer, boolean):void (36 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=14 <= 300.000000)
                 n            @ 4  sun.nio.ch.SocketDispatcher.write0(FileDescriptor, long, int):int (0 bytes)   not inlining it is a non-intrinsic native method
                            @ 1  java.nio.Buffer.session():MemorySessionImpl (20 bytes)   inline method (bytecode parsing)
                                  @ 4  java.nio.Buffer$2.releaseSession(Buffer):void (28 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=10 <= 300.000000)
                                @ 136  sun.nio.ch.IOUtil.releaseScope(ByteBuffer):void (23 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 2  java.nio.MappedByteBuffer.position(int):MappedByteBuffer (8 bytes)   inline method (bytecode parsing)
                              @ 2  java.nio.ByteBuffer.position(int):ByteBuffer (8 bytes)   inline method (bytecode parsing)
                                  @ 2  java.nio.Buffer.position(int):Buffer (52 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=16 <= 300.000000)
                                @ 162  java.nio.MappedByteBuffer.position(int):ByteBuffer (6 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=19 <= 300.000000)
                              @ 18  sun.nio.ch.IOUtil.writeFromNativeBuffer(FileDescriptor, ByteBuffer, long, boolean, boolean, int, NativeDispatcher):int (169 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=72 <= 300.000000)
                            @ 1  java.nio.Buffer.position():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 7  java.nio.Buffer.limit():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 121  sun.nio.ch.IOUtil.bufferAddress(ByteBuffer):long (10 bytes)   inline method (bytecode parsing)
                              @ 4  java.nio.Buffer$2.getBufferAddress(Buffer):long (5 bytes)   inline method (bytecode parsing)
                            @ 130  sun.nio.ch.SocketDispatcher.write(FileDescriptor, long, int):int (8 bytes)   inline method (bytecode parsing)
                            @ 30  java.nio.Buffer$2.acquireSession(Buffer):void (14 bytes)   inline method (bytecode parsing)
                              @ 1  java.nio.Buffer.session():MemorySessionImpl (20 bytes)   inline method (bytecode parsing)
                              @ 84  sun.nio.ch.IOUtil.acquireScope(ByteBuffer, boolean):void (36 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=14 <= 300.000000)
                 n          @ 4  sun.nio.ch.SocketDispatcher.write0(FileDescriptor, long, int):int (0 bytes)   not inlining it is a non-intrinsic native method
                            @ 1  java.nio.Buffer.session():MemorySessionImpl (20 bytes)   inline method (bytecode parsing)
                                @ 4  java.nio.Buffer$2.releaseSession(Buffer):void (28 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=10 <= 300.000000)
                              @ 136  sun.nio.ch.IOUtil.releaseScope(ByteBuffer):void (23 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 2  java.nio.MappedByteBuffer.position(int):MappedByteBuffer (8 bytes)   inline method (bytecode parsing)
                              @ 2  java.nio.ByteBuffer.position(int):ByteBuffer (8 bytes)   inline method (bytecode parsing)
                                @ 2  java.nio.Buffer.position(int):Buffer (52 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=16 <= 300.000000)
                              @ 162  java.nio.MappedByteBuffer.position(int):ByteBuffer (6 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=19 <= 300.000000)
                            @ 30  java.nio.Buffer$2.acquireSession(Buffer):void (14 bytes)   inline method (bytecode parsing)
                              @ 1  java.nio.Buffer.session():MemorySessionImpl (20 bytes)   inline method (bytecode parsing)
                            @ 1  java.nio.Buffer.position():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 6  java.nio.Buffer.limit():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  java.nio.Buffer.session():MemorySessionImpl (20 bytes)   inline method (bytecode parsing)
                            @ 53  java.nio.DirectByteBuffer.ix(int):long (10 bytes)   inline method (bytecode parsing)
                            @ 59  java.nio.DirectByteBuffer.ix(int):long (10 bytes)   inline method (bytecode parsing)
                            @ 66  jdk.internal.misc.ScopedMemoryAccess.copyMemory(MemorySessionImpl, MemorySessionImpl, Object, long, Object, long, long):void (27 bytes)   inline method (bytecode parsing)
                              @ 12  jdk.internal.misc.ScopedMemoryAccess.copyMemoryInternal(MemorySessionImpl, MemorySessionImpl, Object, long, Object, long, long):void (56 bytes)   inline method (bytecode parsing)
                                @ 28  jdk.internal.misc.Unsafe.copyMemory(Object, long, Object, long, long):void (33 bytes)   inline method (bytecode parsing)
                                  @ 9  jdk.internal.misc.Unsafe.copyMemoryChecks(Object, long, Object, long, long):void (21 bytes)   inline method (bytecode parsing)
                                    @ 9  jdk.internal.misc.Unsafe.checkPrimitivePointer(Object, long):void (19 bytes)   inline method (bytecode parsing)
                                      @ 3  jdk.internal.misc.Unsafe.checkPointer(Object, long):void (19 bytes)   inline method (bytecode parsing)
                                    @ 17  jdk.internal.misc.Unsafe.checkPrimitivePointer(Object, long):void (19 bytes)   inline method (bytecode parsing)
                                      @ 3  jdk.internal.misc.Unsafe.checkPointer(Object, long):void (19 bytes)   inline method (bytecode parsing)
                            @ 8  jdk.graal.compiler.lir.stackslotalloc.LSStackSlotAllocator$Allocator.lambda$new$1(StackInterval, StackInterval):int (10 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.lir.stackslotalloc.StackInterval.to():int (5 bytes)   inline accessor method (bytecode parsing)
                              @ 5  jdk.graal.compiler.lir.stackslotalloc.StackInterval.to():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 87  java.nio.MappedByteBuffer.position(int):MappedByteBuffer (8 bytes)   inline method (bytecode parsing)
                              @ 2  java.nio.ByteBuffer.position(int):ByteBuffer (8 bytes)   inline method (bytecode parsing)
                            @ 93  java.nio.Buffer.capacity():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 8  jdk.graal.compiler.lir.stackslotalloc.LSStackSlotAllocator$Allocator.lambda$new$0(StackInterval, StackInterval):int (10 bytes)   inline method (bytecode parsing)
                            @ 96  java.nio.MappedByteBuffer.limit(int):MappedByteBuffer (8 bytes)   inline method (bytecode parsing)
                              @ 2  java.nio.ByteBuffer.limit(int):ByteBuffer (8 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.lir.stackslotalloc.StackInterval.from():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 101  java.nio.Buffer.discardMark():void (6 bytes)   inline method (bytecode parsing)
                              @ 5  jdk.graal.compiler.lir.stackslotalloc.StackInterval.from():int (5 bytes)   inline accessor method (bytecode parsing)
                                @ 3  jdk.internal.misc.Unsafe.checkSize(long):void (32 bytes)   trivial (relevance=1.181012, probability=1.000000, bonus=1.000000, nodes=8)
                                @ 1  jdk.graal.compiler.core.common.cfg.BasicBlock.getRelativeFrequency():double (0 bytes)   not inlining no type profile exists
                                @ 6  jdk.internal.misc.Unsafe.checkNativeAddress(long):void (28 bytes)   trivial (relevance=1.181012, probability=1.000000, bonus=1.000000, nodes=5)
                                @ 12  jdk.graal.compiler.core.common.cfg.BasicBlock.getRelativeFrequency():double (0 bytes)   not inlining no type profile exists
                                @ 23  jdk.graal.compiler.core.common.cfg.BasicBlock.getLoopDepth():int (0 bytes)   not inlining no type profile exists
                                @ 27  jdk.graal.compiler.core.common.cfg.BasicBlock.getLoopDepth():int (0 bytes)   not inlining no type profile exists
                                @ 6  jdk.internal.misc.Unsafe.checkNativeAddress(long):void (28 bytes)   trivial (relevance=1.181012, probability=1.000000, bonus=1.000000, nodes=5)
                                @ 39  jdk.graal.compiler.core.common.cfg.BasicBlock.getRelativeFrequency():double (0 bytes)   not inlining no type profile exists
                                @ 43  jdk.graal.compiler.core.common.cfg.BasicBlock.getRelativeFrequency():double (0 bytes)   not inlining no type profile exists
                                @ 9  jdk.graal.compiler.core.common.alloc.BasicBlockOrderUtils$BlockOrderComparator.compare(BasicBlock, BasicBlock):int (54 bytes)   relevance-based (relevance=1.000000, probability=1.535539, bonus=1.000000, nodes=47 <= 300.000000)
                                @ 2  java.nio.Buffer.position(int):Buffer (52 bytes)   relevance-based (relevance=1.181012, probability=1.000000, bonus=1.000000, nodes=16 <= 300.000000)
                              @ 21  jdk.graal.compiler.core.common.alloc.BasicBlockOrderUtils$BlockOrderComparator.compare(Object, Object):int (13 bytes)   relevance-based (relevance=1.582936, probability=1.748395, bonus=1.000000, nodes=99 <= 300.000000)
                                @ 2  java.nio.Buffer.limit(int):Buffer (65 bytes)   relevance-based (relevance=1.181012, probability=1.000000, bonus=1.000000, nodes=27 <= 300.000000)
                              @ 1  java.nio.DirectByteBuffer.compact():MappedByteBuffer (106 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=76 <= 300.000000)
                            @ 1  java.nio.Buffer.position():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 6  java.nio.Buffer.limit():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  java.nio.Buffer.session():MemorySessionImpl (20 bytes)   inline method (bytecode parsing)
                            @ 53  java.nio.DirectByteBuffer.ix(int):long (10 bytes)   inline method (bytecode parsing)
                            @ 59  java.nio.DirectByteBuffer.ix(int):long (10 bytes)   inline method (bytecode parsing)
                            @ 66  jdk.internal.misc.ScopedMemoryAccess.copyMemory(MemorySessionImpl, MemorySessionImpl, Object, long, Object, long, long):void (27 bytes)   inline method (bytecode parsing)
                              @ 12  jdk.internal.misc.ScopedMemoryAccess.copyMemoryInternal(MemorySessionImpl, MemorySessionImpl, Object, long, Object, long, long):void (56 bytes)   inline method (bytecode parsing)
                                @ 28  jdk.internal.misc.Unsafe.copyMemory(Object, long, Object, long, long):void (33 bytes)   inline method (bytecode parsing)
                                  @ 9  jdk.internal.misc.Unsafe.copyMemoryChecks(Object, long, Object, long, long):void (21 bytes)   inline method (bytecode parsing)
                                    @ 9  jdk.internal.misc.Unsafe.checkPrimitivePointer(Object, long):void (19 bytes)   inline method (bytecode parsing)
                                      @ 3  jdk.internal.misc.Unsafe.checkPointer(Object, long):void (19 bytes)   inline method (bytecode parsing)
                                    @ 17  jdk.internal.misc.Unsafe.checkPrimitivePointer(Object, long):void (19 bytes)   inline method (bytecode parsing)
                                      @ 3  jdk.internal.misc.Unsafe.checkPointer(Object, long):void (19 bytes)   inline method (bytecode parsing)
                            @ 87  java.nio.MappedByteBuffer.position(int):MappedByteBuffer (8 bytes)   inline method (bytecode parsing)
                              @ 2  java.nio.ByteBuffer.position(int):ByteBuffer (8 bytes)   inline method (bytecode parsing)
                            @ 93  java.nio.Buffer.capacity():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 96  java.nio.MappedByteBuffer.limit(int):MappedByteBuffer (8 bytes)   inline method (bytecode parsing)
                              @ 2  java.nio.ByteBuffer.limit(int):ByteBuffer (8 bytes)   inline method (bytecode parsing)
                            @ 101  java.nio.Buffer.discardMark():void (6 bytes)   inline method (bytecode parsing)
                              @ 3  jdk.internal.misc.Unsafe.checkSize(long):void (32 bytes)   trivial (relevance=1.181012, probability=1.000000, bonus=1.000000, nodes=8)
                              @ 6  jdk.internal.misc.Unsafe.checkNativeAddress(long):void (28 bytes)   trivial (relevance=1.181012, probability=1.000000, bonus=1.000000, nodes=5)
                              @ 6  jdk.internal.misc.Unsafe.checkNativeAddress(long):void (28 bytes)   trivial (relevance=1.181012, probability=1.000000, bonus=1.000000, nodes=5)
                              @ 2  java.nio.Buffer.position(int):Buffer (52 bytes)   relevance-based (relevance=1.181012, probability=1.000000, bonus=1.000000, nodes=16 <= 300.000000)
                              @ 2  java.nio.Buffer.limit(int):Buffer (65 bytes)   relevance-based (relevance=1.181012, probability=1.000000, bonus=1.000000, nodes=27 <= 300.000000)
                            @ 1  java.util.AbstractMap.<init>():void (5 bytes)   inline method (bytecode parsing)
                              @ 51  java.lang.Float.isNaN(float):boolean (12 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=7)
                              @ 91  java.util.HashMap.tableSizeFor(int):int (32 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=23 <= 300.000000)
                            @ 35  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                              @ 40  java.util.PriorityQueue.grow(int):void (42 bytes)   not inlining relevance-based (relevance=0.019721, probability=0.019340, bonus=1.000000, nodes=36 > 5.916368)
                            @ 8  jdk.graal.compiler.lir.stackslotalloc.LSStackSlotAllocator$Allocator.lambda$new$1(StackInterval, StackInterval):int (10 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.lir.stackslotalloc.StackInterval.to():int (5 bytes)   inline accessor method (bytecode parsing)
                              @ 5  jdk.graal.compiler.lir.stackslotalloc.StackInterval.to():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 8  jdk.graal.compiler.lir.stackslotalloc.LSStackSlotAllocator$Allocator.lambda$new$0(StackInterval, StackInterval):int (10 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.lir.stackslotalloc.StackInterval.from():int (5 bytes)   inline accessor method (bytecode parsing)
                              @ 5  jdk.graal.compiler.lir.stackslotalloc.StackInterval.from():int (5 bytes)   inline accessor method (bytecode parsing)
                                    @ 1  jdk.graal.compiler.core.common.cfg.BasicBlock.getRelativeFrequency():double (0 bytes)   not inlining no type profile exists
                                    @ 12  jdk.graal.compiler.core.common.cfg.BasicBlock.getRelativeFrequency():double (0 bytes)   not inlining no type profile exists
                                    @ 23  jdk.graal.compiler.core.common.cfg.BasicBlock.getLoopDepth():int (0 bytes)   not inlining no type profile exists
                                    @ 27  jdk.graal.compiler.core.common.cfg.BasicBlock.getLoopDepth():int (0 bytes)   not inlining no type profile exists
                                    @ 39  jdk.graal.compiler.core.common.cfg.BasicBlock.getRelativeFrequency():double (0 bytes)   not inlining no type profile exists
                                    @ 43  jdk.graal.compiler.core.common.cfg.BasicBlock.getRelativeFrequency():double (0 bytes)   not inlining no type profile exists
                                    @ 9  jdk.graal.compiler.core.common.alloc.BasicBlockOrderUtils$BlockOrderComparator.compare(BasicBlock, BasicBlock):int (54 bytes)   relevance-based (relevance=1.000000, probability=1.533058, bonus=1.000000, nodes=47 <= 300.000000)
                                  @ 21  jdk.graal.compiler.core.common.alloc.BasicBlockOrderUtils$BlockOrderComparator.compare(Object, Object):int (13 bytes)   relevance-based (relevance=1.583900, probability=1.745924, bonus=1.000000, nodes=99 <= 300.000000)
                                @ 17  java.util.PriorityQueue.siftUpUsingComparator(int, Object, Object[], Comparator):void (48 bytes)   not inlining callee invoke probability is too high (invokeP=5.748968, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=132)
                              @ 46  java.util.PriorityQueue.siftUp(int, Object):void (33 bytes)   relevance-based (relevance=1.019721, probability=1.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                @ 17  java.util.Arrays.rangeCheck(int, int, int):void (74 bytes)   relevance-based (relevance=1.000000, probability=0.967865, bonus=1.000000, nodes=10 <= 300.000000)
                                  @ 89  java.util.TimSort.<init>(Object[], Comparator, Object[], int, int):void (181 bytes)   not inlining relevance-based (relevance=0.024204, probability=0.014506, bonus=1.000000, nodes=81 > 7.261202)
                                  @ 96  java.util.TimSort.minRunLength(int):int (43 bytes)   not inlining relevance-based (relevance=0.024204, probability=0.014506, bonus=1.000000, nodes=24 > 7.261202)
                            @ 1  jdk.graal.compiler.core.common.cfg.BasicBlock.getId():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  jdk.graal.compiler.core.common.cfg.BasicBlock.getId():int (5 bytes)   inline accessor method (bytecode parsing)
                                        @ 8  java.lang.Integer.compare(int, int):int (20 bytes)   trivial (relevance=0.969832, probability=0.271220, bonus=1.000000, nodes=6)
                                      @ 9  jdk.graal.compiler.core.common.cfg.BasicBlock$BlockIdComparator.compare(BasicBlock, BasicBlock):int (12 bytes)   relevance-based (relevance=0.969832, probability=0.271220, bonus=1.000000, nodes=14 <= 290.949463)
                                    @ 43  jdk.graal.compiler.core.common.cfg.BasicBlock$BlockIdComparator.compare(Object, Object):int (13 bytes)   relevance-based (relevance=0.969832, probability=0.353901, bonus=1.000000, nodes=21 <= 290.949463)
                            @ 8  jdk.graal.compiler.lir.alloc.lsra.LinearScan.lambda$sortIntervals$0(Interval, Interval):int (10 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.lir.alloc.lsra.Interval.from():int (8 bytes)   inline method (bytecode parsing)
                              @ 5  jdk.graal.compiler.lir.alloc.lsra.Interval.from():int (8 bytes)   inline method (bytecode parsing)
                            @ 17  java.lang.Enum.ordinal():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 2  java.util.EnumMap.isValidKey(Object):boolean (36 bytes)   relevance-based (relevance=0.868671, probability=0.016233, bonus=1.000000, nodes=13 <= 260.601287)
                                              @ 21  java.util.EnumMap.unmaskNull(Object):Object (13 bytes)   trivial (relevance=0.868678, probability=0.016233, bonus=1.000000, nodes=7)
                                            @ 7  java.util.EnumMap.get(Object):Object (29 bytes)   relevance-based (relevance=0.868671, probability=0.016233, bonus=1.000000, nodes=27 <= 260.601287)
                                          @ 1  jdk.graal.compiler.hotspot.HotSpotCompiledCodeBuilder$SiteComparator.ord(Infopoint):int (19 bytes)   relevance-based (relevance=0.868671, probability=0.016233, bonus=1.000000, nodes=36 <= 260.601287)
                                        @ 86  jdk.graal.compiler.hotspot.HotSpotCompiledCodeBuilder$SiteComparator.checkCollision(Infopoint, Infopoint):int (44 bytes)   not inlining relevance-based (relevance=0.217168, probability=0.016233, bonus=1.000000, nodes=66 > 65.150322)
                                      @ 9  jdk.graal.compiler.hotspot.HotSpotCompiledCodeBuilder$SiteComparator.compare(Site, Site):int (100 bytes)   relevance-based (relevance=0.217168, probability=0.259724, bonus=1.000000, nodes=55 <= 65.150322)
                                    @ 109  jdk.graal.compiler.lir.alloc.lsra.LinearScan$$Lambda/0x00007f45e03010e8.compare(Object, Object):int (12 bytes)   relevance-based (relevance=0.336741, probability=0.785838, bonus=1.000000, nodes=85 <= 101.022450)
                                  @ 60  java.util.TimSort.countRunAndMakeAscending(Object[], int, int, Comparator):int (128 bytes)   not inlining relevance-based (relevance=0.590765, probability=0.354050, bonus=1.000000, nodes=197 > 177.229506)
                                  @ 73  java.util.TimSort.binarySort(Object[], int, int, int, Comparator):void (223 bytes)   not inlining too large previous low-level graph (low-level-nodes: 656, relevance=0.590765, probability=0.354050, bonus=1.000000, nodes=84)
                                  @ 105  java.util.TimSort.countRunAndMakeAscending(Object[], int, int, Comparator):int (128 bytes)   not inlining relevance-based (relevance=0.028036, probability=0.064757, bonus=1.000000, nodes=90 > 8.410658)
                                  @ 144  java.util.TimSort.binarySort(Object[], int, int, int, Comparator):void (223 bytes)   not inlining too large previous low-level graph (low-level-nodes: 656, relevance=0.024204, probability=0.055907, bonus=1.000000, nodes=85)
                                  @ 156  java.util.TimSort.pushRun(int, int):void (31 bytes)   not inlining relevance-based (relevance=0.028036, probability=0.064757, bonus=1.000000, nodes=17 > 8.410658)
                                  @ 161  java.util.TimSort.mergeCollapse():void (134 bytes)   not inlining relevance-based (relevance=0.028036, probability=0.064757, bonus=1.000000, nodes=97 > 8.410658)
                                  @ 202  java.util.TimSort.mergeForceCollapse():void (50 bytes)   not inlining relevance-based (relevance=0.024204, probability=0.014506, bonus=1.000000, nodes=44 > 7.261202)
                                @ 43  java.util.TimSort.sort(Object[], int, int, Comparator, Object[], int, int):void (229 bytes)   relevance-based (relevance=1.000000, probability=0.967865, bonus=1.000000, nodes=75 <= 300.000000)
                                  @ 4  java.util.Arrays.rangeCheck(int, int, int):void (74 bytes)   relevance-based (relevance=0.053621, probability=0.032135, bonus=1.000000, nodes=10 <= 16.086260)
                                  @ 28  java.util.ComparableTimSort.sort(Object[], int, int, Object[], int, int):void (219 bytes)   not inlining relevance-based (relevance=0.053621, probability=0.032135, bonus=1.000000, nodes=22 > 16.086260)
                                @ 7  java.util.Arrays.sort(Object[], int, int):void (32 bytes)   relevance-based (relevance=0.053621, probability=0.032135, bonus=1.000000, nodes=15 <= 16.086260)
                              @ 15  java.util.Arrays.sort(Object[], int, int, Comparator):void (47 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=95 <= 300.000000)
                            @ 1  java.util.concurrent.locks.AbstractOwnableSynchronizer.getExclusiveOwnerThread():Thread (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 9  java.util.concurrent.locks.ReentrantLock$Sync.isHeldExclusively():boolean (16 bytes)   relevance-based (relevance=1.000808, probability=0.971958, bonus=1.000000, nodes=15 <= 300.000000)
                            @ 25  java.util.concurrent.locks.AbstractQueuedSynchronizer$Node.getAndUnsetStatus(int):int (14 bytes)   inline method (bytecode parsing)
                              @ 10  jdk.internal.misc.Unsafe.getAndBitwiseAndInt(Object, long, int):int (27 bytes)   inline method (bytecode parsing)
                                  @ 30  java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.doSignal(AbstractQueuedSynchronizer$ConditionNode, boolean):void (54 bytes)   not inlining relevance-based (relevance=0.000808, probability=0.000785, bonus=1.000000, nodes=63 > 0.242510)
                                @ 4  java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.signalAll():void (34 bytes)   relevance-based (relevance=1.000000, probability=0.971958, bonus=1.000000, nodes=31 <= 300.000000)
                              @ 93  java.lang.ref.ReferenceQueue.signal():void (10 bytes)   relevance-based (relevance=1.053692, probability=1.000000, bonus=1.000000, nodes=46 <= 300.000000)
                            @ 18  jdk.graal.compiler.replacements.AllocationSnippets.allocateInstanceImpl(Word, UnsignedWord, boolean, AllocationSnippets$FillContent, boolean, boolean, AllocationSnippets$AllocationProfilingData):Object (143 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getTLABInfo():Word (5 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getThread():Word (8 bytes)   inline method (bytecode parsing)
                                  @ 4  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.registerAsWord(Register):Word (7 bytes)   inline method (bytecode parsing)
                              @ 9  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.readTlabTop(Word):Word (5 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.readTlabTop(Word):Word (17 bytes)   inline method (bytecode parsing)
                              @ 17  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.readTlabEnd(Word):Word (5 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.readTlabEnd(Word):Word (17 bytes)   inline method (bytecode parsing)
                              @ 35  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.useTLAB():boolean (7 bytes)   inline method (bytecode parsing)
                              @ 47  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.shouldAllocateInTLAB(UnsignedWord, boolean):boolean (33 bytes)   inline method (bytecode parsing)
                              @ 77  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.writeTlabTop(Word, Word):void (6 bytes)   inline method (bytecode parsing)
                                @ 2  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.writeTlabTop(Word, Word):void (15 bytes)   inline method (bytecode parsing)
                              @ 84  jdk.graal.compiler.replacements.AllocationSnippets.emitPrefetchAllocate(Word, boolean):void (61 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getPrefetchStyle():int (7 bytes)   inline method (bytecode parsing)
                                @ 9  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getPrefetchLines(boolean):int (18 bytes)   inline method (bytecode parsing)
                                @ 14  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getPrefetchStepSize():int (7 bytes)   inline method (bytecode parsing)
                                @ 20  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getPrefetchDistance():int (7 bytes)   inline method (bytecode parsing)
                              @ 103  jdk.graal.compiler.replacements.AllocationSnippets.formatObject(Word, UnsignedWord, Word, AllocationSnippets$FillContent, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):Object (41 bytes)   inline method (bytecode parsing)
                                @ 4  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.initializeObjectHeader(Word, Word, boolean):void (29 bytes)   inline method (bytecode parsing)
                                  @ 25  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.initializeObjectHeader(Word, Word, KlassPointer):void (20 bytes)   inline method (bytecode parsing)
                                @ 8  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.instanceHeaderSize():int (7 bytes)   inline method (bytecode parsing)
                                @ 27  jdk.graal.compiler.replacements.AllocationSnippets.fillContents(Word, AllocationSnippets$FillContent, int, UnsignedWord, boolean, boolean, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):void (58 bytes)   inline method (bytecode parsing)
                                  @ 22  jdk.graal.compiler.replacements.AllocationSnippets.zeroMemory(Word, int, UnsignedWord, boolean, boolean, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):void (19 bytes)   inline method (bytecode parsing)
                                    @ 15  jdk.graal.compiler.replacements.AllocationSnippets.fillMemory(long, Word, int, UnsignedWord, boolean, boolean, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):void (194 bytes)   inline method (bytecode parsing)
                                      @ 17  jdk.graal.compiler.replacements.ReplacementsUtil.dynamicAssert(boolean, String):void (12 bytes)   inline method (bytecode parsing)
                                      @ 56  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                                      @ 89  jdk.graal.compiler.replacements.ReplacementsUtil.dynamicAssert(boolean, String):void (12 bytes)   inline method (bytecode parsing)
                                      @ 153  jdk.graal.compiler.replacements.ReplacementsUtil.staticAssert(boolean, String):void (12 bytes)   inline method (bytecode parsing)
                                      @ 167  jdk.graal.compiler.replacements.AllocationSnippets.fillMemoryAlignedUnrollable(long, Word, UnsignedWord, UnsignedWord, boolean, AllocationSnippets$AllocationSnippetCounters):void (68 bytes)   inline method (bytecode parsing)
                                        @ 5  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                          @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                                        @ 44  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                                      @ 190  jdk.graal.compiler.replacements.AllocationSnippets.fillMemoryAligned(long, Word, UnsignedWord, UnsignedWord, boolean, UnsignedWord, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):void (155 bytes)   inline method (bytecode parsing)
                                        @ 91  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                          @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                                        @ 105  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                          @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                                        @ 134  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                                @ 33  jdk.graal.compiler.replacements.AllocationSnippets.emitMemoryBarrierIf(boolean):void (14 bytes)   inline method (bytecode parsing)
                              @ 119  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                              @ 124  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.callNewInstanceStub(Word):Object (33 bytes)   inline method (bytecode parsing)
                                @ 21  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.nonNullOrDeopt(Object):Object (27 bytes)   inline method (bytecode parsing)
                              @ 133  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.profileAllocation(AllocationSnippets$AllocationProfilingData, UnsignedWord):void (51 bytes)   inline method (bytecode parsing)
                              @ 139  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.verifyOop(Object):Object (5 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.verifyOop(Object):Object (19 bytes)   inline method (bytecode parsing)
                            @ 7  jdk.graal.compiler.hotspot.replacements.ObjectSnippets.fastNotifyStub(ForeignCallDescriptor, Object):boolean (21 bytes)   inline method (bytecode parsing)
                            @ 21  jdk.graal.compiler.nodes.PiNode.piCastNonNull(Object, GuardingNode):Object (9 bytes)   inline method (bytecode parsing)
                 n          @ 24  java.lang.Object.notifyAll():void (0 bytes)   not inlining native method (bytecode parsing)
                              @ 89  java.util.TimSort.<init>(Object[], Comparator, Object[], int, int):void (181 bytes)   not inlining relevance-based (relevance=0.024312, probability=0.015076, bonus=1.000000, nodes=112 > 7.293529)
                              @ 96  java.util.TimSort.minRunLength(int):int (43 bytes)   not inlining relevance-based (relevance=0.024312, probability=0.015076, bonus=1.000000, nodes=24 > 7.293529)
                            @ 1  jdk.graal.compiler.core.common.cfg.BasicBlock.getId():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  jdk.graal.compiler.core.common.cfg.BasicBlock.getId():int (5 bytes)   inline accessor method (bytecode parsing)
                                    @ 8  java.lang.Integer.compare(int, int):int (20 bytes)   trivial (relevance=0.967039, probability=0.279091, bonus=1.000000, nodes=6)
                                  @ 9  jdk.graal.compiler.core.common.cfg.BasicBlock$BlockIdComparator.compare(BasicBlock, BasicBlock):int (12 bytes)   relevance-based (relevance=0.967039, probability=0.279091, bonus=1.000000, nodes=14 <= 290.111620)
                                @ 43  jdk.graal.compiler.core.common.cfg.BasicBlock$BlockIdComparator.compare(Object, Object):int (13 bytes)   relevance-based (relevance=0.967039, probability=0.364676, bonus=1.000000, nodes=21 <= 290.111620)
                            @ 8  jdk.graal.compiler.lir.alloc.lsra.LinearScan.lambda$sortIntervals$0(Interval, Interval):int (10 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.lir.alloc.lsra.Interval.from():int (8 bytes)   inline method (bytecode parsing)
                              @ 5  jdk.graal.compiler.lir.alloc.lsra.Interval.from():int (8 bytes)   inline method (bytecode parsing)
                            @ 17  java.lang.Enum.ordinal():int (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 2  java.util.EnumMap.isValidKey(Object):boolean (36 bytes)   relevance-based (relevance=0.877297, probability=0.016846, bonus=1.000000, nodes=13 <= 263.189176)
                                          @ 21  java.util.EnumMap.unmaskNull(Object):Object (13 bytes)   trivial (relevance=0.877304, probability=0.016846, bonus=1.000000, nodes=7)
                                        @ 7  java.util.EnumMap.get(Object):Object (29 bytes)   relevance-based (relevance=0.877297, probability=0.016846, bonus=1.000000, nodes=27 <= 263.189176)
                                      @ 1  jdk.graal.compiler.hotspot.HotSpotCompiledCodeBuilder$SiteComparator.ord(Infopoint):int (19 bytes)   relevance-based (relevance=0.877297, probability=0.016846, bonus=1.000000, nodes=36 <= 263.189176)
                                    @ 86  jdk.graal.compiler.hotspot.HotSpotCompiledCodeBuilder$SiteComparator.checkCollision(Infopoint, Infopoint):int (44 bytes)   not inlining relevance-based (relevance=0.219324, probability=0.016846, bonus=1.000000, nodes=66 > 65.797294)
                                  @ 9  jdk.graal.compiler.hotspot.HotSpotCompiledCodeBuilder$SiteComparator.compare(Site, Site):int (100 bytes)   relevance-based (relevance=0.219324, probability=0.269535, bonus=1.000000, nodes=55 <= 65.797294)
                                @ 109  jdk.graal.compiler.lir.alloc.lsra.LinearScan$$Lambda/0x00007f45e03010e8.compare(Object, Object):int (12 bytes)   relevance-based (relevance=0.336466, probability=0.809794, bonus=1.000000, nodes=85 <= 100.939776)
                              @ 60  java.util.TimSort.countRunAndMakeAscending(Object[], int, int, Comparator):int (128 bytes)   not inlining relevance-based (relevance=0.588345, probability=0.364830, bonus=1.000000, nodes=201 > 176.503396)
                              @ 73  java.util.TimSort.binarySort(Object[], int, int, int, Comparator):void (223 bytes)   not inlining too large previous low-level graph (low-level-nodes: 656, relevance=0.588345, probability=0.364830, bonus=1.000000, nodes=85)
                              @ 105  java.util.TimSort.countRunAndMakeAscending(Object[], int, int, Comparator):int (128 bytes)   not inlining relevance-based (relevance=0.028147, probability=0.067042, bonus=1.000000, nodes=90 > 8.443963)
                              @ 144  java.util.TimSort.binarySort(Object[], int, int, int, Comparator):void (223 bytes)   not inlining too large previous low-level graph (low-level-nodes: 656, relevance=0.024312, probability=0.057908, bonus=1.000000, nodes=85)
                              @ 156  java.util.TimSort.pushRun(int, int):void (31 bytes)   not inlining relevance-based (relevance=0.028147, probability=0.067042, bonus=1.000000, nodes=17 > 8.443963)
                              @ 161  java.util.TimSort.mergeCollapse():void (134 bytes)   not inlining relevance-based (relevance=0.028147, probability=0.067042, bonus=1.000000, nodes=97 > 8.443963)
                              @ 202  java.util.TimSort.mergeForceCollapse():void (50 bytes)   not inlining relevance-based (relevance=0.024312, probability=0.015076, bonus=1.000000, nodes=44 > 7.293529)
                              @ 21  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.089572, probability=0.082207, bonus=1.000000, nodes=41 > 26.871519)
                              @ 1  java.util.ArrayList$SubList$1.checkForComodification():void (26 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 8  jdk.graal.compiler.lir.stackslotalloc.LSStackSlotAllocator$Allocator.lambda$new$0(StackInterval, StackInterval):int (10 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.lir.stackslotalloc.StackInterval.from():int (5 bytes)   inline accessor method (bytecode parsing)
                              @ 5  jdk.graal.compiler.lir.stackslotalloc.StackInterval.from():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 8  jdk.graal.compiler.lir.stackslotalloc.LSStackSlotAllocator$Allocator.lambda$new$1(StackInterval, StackInterval):int (10 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.lir.stackslotalloc.StackInterval.to():int (5 bytes)   inline accessor method (bytecode parsing)
                              @ 5  jdk.graal.compiler.lir.stackslotalloc.StackInterval.to():int (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 1  jdk.graal.compiler.core.common.cfg.BasicBlock.getRelativeFrequency():double (0 bytes)   not inlining no type profile exists
                                  @ 12  jdk.graal.compiler.core.common.cfg.BasicBlock.getRelativeFrequency():double (0 bytes)   not inlining no type profile exists
                                  @ 23  jdk.graal.compiler.core.common.cfg.BasicBlock.getLoopDepth():int (0 bytes)   not inlining no type profile exists
                                  @ 27  jdk.graal.compiler.core.common.cfg.BasicBlock.getLoopDepth():int (0 bytes)   not inlining no type profile exists
                                  @ 39  jdk.graal.compiler.core.common.cfg.BasicBlock.getRelativeFrequency():double (0 bytes)   not inlining no type profile exists
                                  @ 43  jdk.graal.compiler.core.common.cfg.BasicBlock.getRelativeFrequency():double (0 bytes)   not inlining no type profile exists
                                  @ 9  jdk.graal.compiler.core.common.alloc.BasicBlockOrderUtils$BlockOrderComparator.compare(BasicBlock, BasicBlock):int (54 bytes)   relevance-based (relevance=1.000000, probability=1.848876, bonus=1.000000, nodes=47 <= 300.000000)
                                @ 44  jdk.graal.compiler.core.common.alloc.BasicBlockOrderUtils$BlockOrderComparator.compare(Object, Object):int (13 bytes)   relevance-based (relevance=1.616990, probability=2.015019, bonus=1.000000, nodes=99 <= 300.000000)
                            @ 8  jdk.graal.compiler.lir.stackslotalloc.LSStackSlotAllocator$Allocator.lambda$new$0(StackInterval, StackInterval):int (10 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.lir.stackslotalloc.StackInterval.from():int (5 bytes)   inline accessor method (bytecode parsing)
                              @ 5  jdk.graal.compiler.lir.stackslotalloc.StackInterval.from():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 8  jdk.graal.compiler.lir.stackslotalloc.LSStackSlotAllocator$Allocator.lambda$new$1(StackInterval, StackInterval):int (10 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.lir.stackslotalloc.StackInterval.to():int (5 bytes)   inline accessor method (bytecode parsing)
                              @ 5  jdk.graal.compiler.lir.stackslotalloc.StackInterval.to():int (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 1  jdk.graal.compiler.core.common.cfg.BasicBlock.getRelativeFrequency():double (0 bytes)   not inlining no type profile exists
                                  @ 12  jdk.graal.compiler.core.common.cfg.BasicBlock.getRelativeFrequency():double (0 bytes)   not inlining no type profile exists
                                  @ 23  jdk.graal.compiler.core.common.cfg.BasicBlock.getLoopDepth():int (0 bytes)   not inlining no type profile exists
                                  @ 27  jdk.graal.compiler.core.common.cfg.BasicBlock.getLoopDepth():int (0 bytes)   not inlining no type profile exists
                                  @ 39  jdk.graal.compiler.core.common.cfg.BasicBlock.getRelativeFrequency():double (0 bytes)   not inlining no type profile exists
                                  @ 43  jdk.graal.compiler.core.common.cfg.BasicBlock.getRelativeFrequency():double (0 bytes)   not inlining no type profile exists
                                  @ 9  jdk.graal.compiler.core.common.alloc.BasicBlockOrderUtils$BlockOrderComparator.compare(BasicBlock, BasicBlock):int (54 bytes)   relevance-based (relevance=1.000000, probability=2.017141, bonus=1.000000, nodes=47 <= 300.000000)
                                @ 66  jdk.graal.compiler.core.common.alloc.BasicBlockOrderUtils$BlockOrderComparator.compare(Object, Object):int (13 bytes)   relevance-based (relevance=9.569432, probability=2.211587, bonus=1.000000, nodes=99 <= 300.000000)
                              @ 76  java.util.PriorityQueue.siftDownUsingComparator(int, Object, Object[], int, Comparator):void (93 bytes)   not inlining callee invoke probability is too high (invokeP=16.490909, relevance=1.000000, probability=0.879125, bonus=1.000000, nodes=243)
                                @ 35  java.util.ArrayDeque.inc(int, int):int (12 bytes)   relevance-based (relevance=1.007751, probability=1.000000, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 55  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                @ 47  java.util.ArrayDeque.grow(int):void (165 bytes)   not inlining too large previous low-level graph (low-level-nodes: 1244, relevance=0.007751, probability=0.007692, bonus=1.000000, nodes=75)
                              @ 2  java.util.ArrayDeque.addLast(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=31 <= 300.000000)
                            @ 8  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                @ 14  java.lang.Class.getComponentType():Class (14 bytes)   trivial (relevance=0.028525, probability=0.027734, bonus=1.000000, nodes=7)
                                @ 32  java.lang.Math.min(int, int):int (11 bytes)   trivial (relevance=1.028525, probability=1.000000, bonus=1.000000, nodes=7)
                              @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=40 <= 300.000000)
                              @ 5  org.graalvm.collections.EconomicMapImpl$2.<init>(EconomicMapImpl):void (15 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                            @ 17  java.util.ArrayDeque.elementAt(Object[], int):Object (4 bytes)   inline method (bytecode parsing)
                              @ 12  java.util.ArrayDeque.dec(int, int):int (13 bytes)   relevance-based (relevance=1.017192, probability=1.000000, bonus=1.000000, nodes=18 <= 300.000000)
                            @ 49  java.lang.Math.max(int, int):int (11 bytes)   inline method (bytecode parsing)
                            @ 37  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                  @ 3  java.lang.Math.max(int, int):int (11 bytes)   trivial (relevance=0.081381, probability=0.075257, bonus=1.000000, nodes=7)
                                @ 27  jdk.internal.util.ArraysSupport.newLength(int, int, int):int (27 bytes)   relevance-based (relevance=0.081381, probability=0.075257, bonus=1.000000, nodes=15 <= 24.414321)
                                @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.081381, probability=0.075257, bonus=1.000000, nodes=41 > 24.414321)
                              @ 7  java.util.ArrayList.grow(int):Object[] (60 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=51 <= 300.000000)
                 n            @ 1  java.lang.Class.getEnclosingMethod0():Object[] (0 bytes)   not inlining it is a non-intrinsic native method
                              @ 1  java.lang.Class.getEnclosingMethodInfo():Class$EnclosingMethodInfo (20 bytes)   relevance-based (relevance=1.208050, probability=1.000000, bonus=1.000000, nodes=10 <= 300.000000)
                 n          @ 10  java.lang.Class.getDeclaringClass0():Class (0 bytes)   not inlining it is a non-intrinsic native method
                                @ 0  java.lang.System.allowSecurityManager():boolean (13 bytes)   trivial (relevance=0.208207, probability=0.172220, bonus=1.000000, nodes=8)
                              @ 48  java.lang.System.getSecurityManager():SecurityManager (12 bytes)   relevance-based (relevance=0.208050, probability=0.172220, bonus=1.000000, nodes=14 <= 62.415090)
                              @ 4  java.lang.Boolean.hashCode(boolean):int (14 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=9)
                            @ 5  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                                @ 9  java.lang.AbstractStringBuilder.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=9)
                              @ 2  java.lang.AbstractStringBuilder.charAt(int):char (36 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=19 <= 300.000000)
                            @ 5  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                              @ 9  java.lang.AbstractStringBuilder.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=9)
                              @ 5  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                                @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                              @ 9  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=8)
                                @ 7  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                                  @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                                @ 13  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=8)
                                @ 68  java.lang.StringLatin1.lastIndexOf(byte[], int, byte[], int, int):int (125 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=61 <= 300.000000)
                              @ 14  java.lang.String.lastIndexOf(byte[], byte, int, String, int):int (104 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=86 <= 300.000000)
                            @ 36  java.util.Collections$UnmodifiableRandomAccessList.<init>(List):void (6 bytes)   inline method (bytecode parsing)
                                @ 2  java.util.Collections$UnmodifiableCollection.<init>(Collection):void (22 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=10 <= 300.000000)
                              @ 2  java.util.Collections$UnmodifiableList.<init>(List):void (11 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=14 <= 300.000000)
                              @ 7  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                                @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                              @ 13  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=8)
                              @ 68  java.lang.StringLatin1.lastIndexOf(byte[], int, byte[], int, int):int (125 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=61 <= 300.000000)
                            @ 10  org.graalvm.collections.EconomicMapImpl.intercept(EconomicMapImpl):EconomicMapImpl (2 bytes)   inline method (bytecode parsing)
                                @ 3  org.graalvm.collections.EconomicMapImpl.<init>(Equivalence, boolean):void (30 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=25 <= 300.000000)
                                @ 8  org.graalvm.collections.EconomicMapImpl.init(int):void (16 bytes)   relevance-based (relevance=1.637305, probability=1.000000, bonus=1.000000, nodes=19 <= 300.000000)
                              @ 7  org.graalvm.collections.EconomicMapImpl.<init>(Equivalence, int, boolean):void (12 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=42 <= 300.000000)
                            @ 7  java.nio.Buffer.session():MemorySessionImpl (20 bytes)   inline method (bytecode parsing)
                            @ 18  jdk.internal.misc.ScopedMemoryAccess.putLongUnaligned(MemorySessionImpl, Object, long, long, boolean):void (23 bytes)   inline method (bytecode parsing)
                              @ 8  jdk.internal.misc.ScopedMemoryAccess.putLongUnalignedInternal(MemorySessionImpl, Object, long, long, boolean):void (37 bytes)   inline method (bytecode parsing)
                                @ 17  jdk.internal.misc.Unsafe.putLongUnaligned(Object, long, long, boolean):void (14 bytes)   inline method (bytecode parsing)
                              @ 7  jdk.internal.misc.Unsafe.convEndian(boolean, long):long (16 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=16 <= 300.000000)
                                @ 2  java.nio.Buffer.position(int):Buffer (52 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=16 <= 300.000000)
                              @ 2  java.nio.ByteBuffer.position(int):ByteBuffer (8 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=17 <= 300.000000)
                            @ 8  java.nio.DirectByteBuffer.ix(int):long (10 bytes)   inline method (bytecode parsing)
                              @ 5  java.nio.Buffer.nextPutIndex(int):int (32 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=13 <= 300.000000)
                            @ 7  java.nio.Buffer.session():MemorySessionImpl (20 bytes)   inline method (bytecode parsing)
                            @ 18  jdk.internal.misc.ScopedMemoryAccess.putLongUnaligned(MemorySessionImpl, Object, long, long, boolean):void (23 bytes)   inline method (bytecode parsing)
                              @ 8  jdk.internal.misc.ScopedMemoryAccess.putLongUnalignedInternal(MemorySessionImpl, Object, long, long, boolean):void (37 bytes)   inline method (bytecode parsing)
                                @ 17  jdk.internal.misc.Unsafe.putLongUnaligned(Object, long, long, boolean):void (14 bytes)   inline method (bytecode parsing)
                                @ 7  jdk.internal.misc.Unsafe.convEndian(boolean, long):long (16 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=16 <= 300.000000)
                              @ 12  java.nio.DirectByteBuffer.putLong(long, long):ByteBuffer (39 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=31 <= 300.000000)
                            @ 4  java.util.concurrent.locks.ReentrantLock.lock():void (8 bytes)   inline method (bytecode parsing)
                            @ 17  java.util.concurrent.locks.ReentrantLock.unlock():void (10 bytes)   inline method (bytecode parsing)
                              @ 5  java.util.concurrent.locks.AbstractQueuedSynchronizer.release(int):boolean (19 bytes)   inline method (bytecode parsing)
                                @ 9  java.lang.ref.ReferenceQueue.enqueue0(Reference):boolean (98 bytes)   not inlining too large previous low-level graph (low-level-nodes: 401, relevance=0.028604, probability=0.025565, bonus=1.000000, nodes=46)
                            @ 9  java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(int):void (20 bytes)   inline method (bytecode parsing)
                            @ 7  java.util.concurrent.locks.AbstractQueuedSynchronizer.compareAndSetState(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 15  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                            @ 21  java.util.concurrent.locks.AbstractOwnableSynchronizer.getExclusiveOwnerThread():Thread (5 bytes)   inline accessor method (bytecode parsing)
                            @ 29  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 51  java.util.concurrent.locks.AbstractQueuedSynchronizer.setState(int):void (6 bytes)   inline method (bytecode parsing)
                                  @ 1  java.util.concurrent.locks.ReentrantLock$NonfairSync.initialTryLock():boolean (58 bytes)   relevance-based (relevance=1.021044, probability=0.893779, bonus=1.000000, nodes=40 <= 300.000000)
                            @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 10  java.util.concurrent.locks.AbstractQueuedSynchronizer.compareAndSetState(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 20  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                                  @ 2  java.util.concurrent.locks.ReentrantLock$NonfairSync.tryAcquire(int):boolean (27 bytes)   not inlining relevance-based (relevance=0.043772, probability=0.034388, bonus=1.000000, nodes=36 > 13.131676)
                            @ 245  java.util.concurrent.locks.AbstractQueuedSynchronizer$ExclusiveNode.<init>():void (5 bytes)   inline method (bytecode parsing)
                              @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer$Node.<init>():void (5 bytes)   inline method (bytecode parsing)
                            @ 9  java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(int):void (20 bytes)   inline method (bytecode parsing)
                            @ 393  java.lang.Thread.interrupted():boolean (7 bytes)   inline method (bytecode parsing)
                                  @ 15  java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer$Node, int, boolean, boolean, boolean, long):int (424 bytes)   not inlining relevance-based (relevance=0.033954, probability=0.026674, bonus=1.000000, nodes=197 > 10.186063)
                                @ 4  java.util.concurrent.locks.ReentrantLock$Sync.lock():void (13 bytes)   relevance-based (relevance=1.106965, probability=0.893779, bonus=1.000000, nodes=57 <= 300.000000)
                                @ 9  java.lang.ref.ReferenceQueue.enqueue0(Reference):boolean (98 bytes)   not inlining too large previous low-level graph (low-level-nodes: 401, relevance=1.137693, probability=0.893779, bonus=1.000000, nodes=46)
                            @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 8  java.util.concurrent.locks.AbstractOwnableSynchronizer.getExclusiveOwnerThread():Thread (5 bytes)   inline accessor method (bytecode parsing)
                            @ 41  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                            @ 46  java.util.concurrent.locks.AbstractQueuedSynchronizer.setState(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 7  java.util.concurrent.locks.AbstractQueuedSynchronizer.compareAndSetState(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                                @ 2  java.util.concurrent.locks.ReentrantLock$Sync.tryRelease(int):boolean (51 bytes)   relevance-based (relevance=1.137693, probability=0.893779, bonus=1.000000, nodes=37 <= 300.000000)
                            @ 15  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                            @ 21  java.util.concurrent.locks.AbstractOwnableSynchronizer.getExclusiveOwnerThread():Thread (5 bytes)   inline accessor method (bytecode parsing)
                            @ 29  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 51  java.util.concurrent.locks.AbstractQueuedSynchronizer.setState(int):void (6 bytes)   inline method (bytecode parsing)
                              @ 1  java.util.concurrent.locks.ReentrantLock$NonfairSync.initialTryLock():boolean (58 bytes)   relevance-based (relevance=1.021034, probability=1.000000, bonus=1.000000, nodes=40 <= 300.000000)
                            @ 22  java.util.concurrent.locks.AbstractQueuedSynchronizer$Node.getAndUnsetStatus(int):int (14 bytes)   inline method (bytecode parsing)
                              @ 10  jdk.internal.misc.Unsafe.getAndBitwiseAndInt(Object, long, int):int (27 bytes)   inline method (bytecode parsing)
                            @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 10  java.util.concurrent.locks.AbstractQueuedSynchronizer.compareAndSetState(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 20  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  java.util.concurrent.locks.ReentrantLock$NonfairSync.tryAcquire(int):boolean (27 bytes)   not inlining relevance-based (relevance=0.043772, probability=0.038475, bonus=1.000000, nodes=36 > 13.131676)
                            @ 5  java.lang.Thread.isVirtual():boolean (5 bytes)   inline method (bytecode parsing)
                                  @ 30  java.util.concurrent.locks.LockSupport.unpark(Thread):void (26 bytes)   not inlining relevance-based (relevance=0.011708, probability=0.005966, bonus=1.000000, nodes=20 > 3.512350)
                                @ 12  java.util.concurrent.locks.AbstractQueuedSynchronizer.signalNext(AbstractQueuedSynchronizer$Node):void (34 bytes)   relevance-based (relevance=1.027758, probability=0.807414, bonus=1.000000, nodes=56 <= 300.000000)
                            @ 245  java.util.concurrent.locks.AbstractQueuedSynchronizer$ExclusiveNode.<init>():void (5 bytes)   inline method (bytecode parsing)
                              @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer$Node.<init>():void (5 bytes)   inline method (bytecode parsing)
                            @ 393  java.lang.Thread.interrupted():boolean (7 bytes)   inline method (bytecode parsing)
                              @ 14  java.lang.ref.ReferenceQueue.enqueue(Reference):boolean (32 bytes)   relevance-based (relevance=1.000000, probability=0.919345, bonus=1.000000, nodes=182 <= 300.000000)
                              @ 15  java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer$Node, int, boolean, boolean, boolean, long):int (424 bytes)   not inlining relevance-based (relevance=0.033954, probability=0.029844, bonus=1.000000, nodes=197 > 10.186063)
                            @ 14  java.util.HashMap$KeySet.<init>(HashMap):void (10 bytes)   inline method (bytecode parsing)
                              @ 6  java.util.AbstractSet.<init>():void (5 bytes)   inline method (bytecode parsing)
                                @ 1  java.util.AbstractCollection.<init>():void (5 bytes)   inline method (bytecode parsing)
                                @ 2  org.graalvm.collections.EconomicMapImpl.getRawValue(int):Object (11 bytes)   relevance-based (relevance=1.048340, probability=1.000000, bonus=1.000000, nodes=10 <= 300.000000)
                              @ 8  org.graalvm.collections.EconomicMapImpl.getValue(int):Object (23 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=19 <= 300.000000)
                            @ 12  java.nio.Buffer.limit():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 20  java.nio.Buffer.position():int (5 bytes)   inline accessor method (bytecode parsing)
                                @ 1  java.nio.Buffer.flip():Buffer (20 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=13 <= 300.000000)
                              @ 4  java.nio.ByteBuffer.flip():ByteBuffer (7 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=14 <= 300.000000)
                              @ 114  java.nio.ByteBuffer.array():byte[] (35 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                              @ 121  java.nio.ByteBuffer.arrayOffset():int (35 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=12 <= 300.000000)
                            @ 11  jdk.internal.misc.InternalLock.lock():void (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.util.concurrent.locks.ReentrantLock.lock():void (8 bytes)   inline method (bytecode parsing)
                            @ 25  jdk.internal.misc.InternalLock.unlock():void (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.util.concurrent.locks.ReentrantLock.unlock():void (10 bytes)   inline method (bytecode parsing)
                                @ 5  java.util.concurrent.locks.AbstractQueuedSynchronizer.release(int):boolean (19 bytes)   inline method (bytecode parsing)
                            @ 9  java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(int):void (20 bytes)   inline method (bytecode parsing)
                            @ 7  java.util.concurrent.locks.AbstractQueuedSynchronizer.compareAndSetState(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 15  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                            @ 21  java.util.concurrent.locks.AbstractOwnableSynchronizer.getExclusiveOwnerThread():Thread (5 bytes)   inline accessor method (bytecode parsing)
                            @ 29  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 51  java.util.concurrent.locks.AbstractQueuedSynchronizer.setState(int):void (6 bytes)   inline method (bytecode parsing)
                                  @ 1  java.util.concurrent.locks.ReentrantLock$NonfairSync.initialTryLock():boolean (58 bytes)   relevance-based (relevance=1.020999, probability=1.000000, bonus=1.000000, nodes=40 <= 300.000000)
                            @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 10  java.util.concurrent.locks.AbstractQueuedSynchronizer.compareAndSetState(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 20  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                                  @ 2  java.util.concurrent.locks.ReentrantLock$NonfairSync.tryAcquire(int):boolean (27 bytes)   not inlining relevance-based (relevance=0.043772, probability=0.038475, bonus=1.000000, nodes=36 > 13.131676)
                            @ 245  java.util.concurrent.locks.AbstractQueuedSynchronizer$ExclusiveNode.<init>():void (5 bytes)   inline method (bytecode parsing)
                              @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer$Node.<init>():void (5 bytes)   inline method (bytecode parsing)
                            @ 393  java.lang.Thread.interrupted():boolean (7 bytes)   inline method (bytecode parsing)
                                  @ 15  java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer$Node, int, boolean, boolean, boolean, long):int (424 bytes)   not inlining relevance-based (relevance=0.033955, probability=0.029845, bonus=1.000000, nodes=197 > 10.186479)
                                @ 4  java.util.concurrent.locks.ReentrantLock$Sync.lock():void (13 bytes)   relevance-based (relevance=1.107088, probability=1.000000, bonus=1.000000, nodes=57 <= 300.000000)
                                  @ 1  java.io.PrintStream.ensureOpen():void (18 bytes)   trivial (relevance=1.009930, probability=1.000000, bonus=1.000000, nodes=7)
                            @ 11  jdk.internal.misc.InternalLock.lock():void (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.util.concurrent.locks.ReentrantLock.lock():void (8 bytes)   inline method (bytecode parsing)
                            @ 25  jdk.internal.misc.InternalLock.unlock():void (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.util.concurrent.locks.ReentrantLock.unlock():void (10 bytes)   inline method (bytecode parsing)
                                @ 5  java.util.concurrent.locks.AbstractQueuedSynchronizer.release(int):boolean (19 bytes)   inline method (bytecode parsing)
                            @ 9  java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(int):void (20 bytes)   inline method (bytecode parsing)
                                    @ 4  java.util.concurrent.locks.ReentrantLock$Sync.lock():void (13 bytes)   not inlining relevance-based (relevance=0.011102, probability=0.004916, bonus=1.000000, nodes=31 > 3.330734)
                                    @ 18  java.io.BufferedOutputStream.implWrite(byte[], int, int):void (71 bytes)   not inlining relevance-based (relevance=0.011102, probability=0.004916, bonus=1.000000, nodes=55 > 3.330734)
                            @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 8  java.util.concurrent.locks.AbstractOwnableSynchronizer.getExclusiveOwnerThread():Thread (5 bytes)   inline accessor method (bytecode parsing)
                            @ 41  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                            @ 46  java.util.concurrent.locks.AbstractQueuedSynchronizer.setState(int):void (6 bytes)   inline method (bytecode parsing)
                                    @ 2  java.util.concurrent.locks.ReentrantLock$Sync.tryRelease(int):boolean (51 bytes)   not inlining relevance-based (relevance=0.011102, probability=0.004916, bonus=1.000000, nodes=37 > 3.330734)
                            @ 22  java.util.concurrent.locks.AbstractQueuedSynchronizer$Node.getAndUnsetStatus(int):int (14 bytes)   inline method (bytecode parsing)
                              @ 10  jdk.internal.misc.Unsafe.getAndBitwiseAndInt(Object, long, int):int (27 bytes)   inline method (bytecode parsing)
                                    @ 12  java.util.concurrent.locks.AbstractQueuedSynchronizer.signalNext(AbstractQueuedSynchronizer$Node):void (34 bytes)   not inlining relevance-based (relevance=0.010029, probability=0.004441, bonus=1.000000, nodes=56 > 3.008553)
                                    @ 55  java.io.BufferedOutputStream.implWrite(byte[], int, int):void (71 bytes)   not inlining relevance-based (relevance=0.011102, probability=0.004916, bonus=1.000000, nodes=55 > 3.330734)
                            @ 157  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  jdk.graal.compiler.hotspot.HotSpotTTYStreamProvider$LogStreamOptionKey$DelayedOutputStream$$Lambda/0x00007f45e01dd6d0.<init>(String):void (10 bytes)   inline method (bytecode parsing)
                            @ 210  jdk.vm.ci.hotspot.HotSpotJVMCIRuntime.getLogStream():OutputStream (9 bytes)   inline method (bytecode parsing)
                            @ 0  jdk.graal.compiler.options.OptionValues.newOptionMap():EconomicMap (7 bytes)   inline method (bytecode parsing)
                              @ 3  org.graalvm.collections.EconomicMap.create(Equivalence):EconomicMap (6 bytes)   inline method (bytecode parsing)
                                @ 2  org.graalvm.collections.EconomicMapImpl.create(Equivalence, boolean):EconomicMapImpl (13 bytes)   inline method (bytecode parsing)
                                  @ 6  org.graalvm.collections.EconomicMapImpl.<init>(Equivalence, boolean):void (30 bytes)   inline method (bytecode parsing)
                                  @ 9  org.graalvm.collections.EconomicMapImpl.intercept(EconomicMapImpl):EconomicMapImpl (2 bytes)   inline method (bytecode parsing)
                            @ 6  jdk.vm.ci.common.InitTimer.timer(String):InitTimer (19 bytes)   inline method (bytecode parsing)
                            @ 239  org.graalvm.collections.EconomicMap.create():EconomicMap (7 bytes)   inline method (bytecode parsing)
                              @ 3  org.graalvm.collections.EconomicMap.create(Equivalence):EconomicMap (6 bytes)   inline method (bytecode parsing)
                                @ 2  org.graalvm.collections.EconomicMapImpl.create(Equivalence, boolean):EconomicMapImpl (13 bytes)   inline method (bytecode parsing)
                                  @ 6  org.graalvm.collections.EconomicMapImpl.<init>(Equivalence, boolean):void (30 bytes)   inline method (bytecode parsing)
                                  @ 9  org.graalvm.collections.EconomicMapImpl.intercept(EconomicMapImpl):EconomicMapImpl (2 bytes)   inline method (bytecode parsing)
                            @ 295  java.lang.String.startsWith(String):boolean (7 bytes)   inline method (bytecode parsing)
                            @ 305  java.lang.String.length():int (11 bytes)   inline method (bytecode parsing)
                              @ 6  java.lang.String.coder():byte (15 bytes)   inline method (bytecode parsing)
                            @ 308  java.lang.String.substring(int):String (10 bytes)   inline method (bytecode parsing)
                            @ 311  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.LambdaForm$MH/0x00007f45e0002400.invoke(Object, Object):Object (25 bytes)   inline method (bytecode parsing)
                                @ 21  java.lang.invoke.DirectMethodHandle$Holder.invokeStatic(Object, Object, Object):Object (15 bytes)   inline method (bytecode parsing)
                                  @ 1  java.lang.invoke.DirectMethodHandle.internalMemberName(Object):Object (8 bytes)   inline method (bytecode parsing)
                                  @ 11  java.lang.StringConcatHelper.simpleConcat(Object, Object):String (94 bytes)   inline method (bytecode parsing)
                                    @ 1  java.lang.StringConcatHelper.stringOf(Object):String (20 bytes)   inline method (bytecode parsing)
                                      @ 5  java.lang.String.toString():String (2 bytes)   inline method (bytecode parsing)
                                    @ 11  java.lang.String.isEmpty():boolean (14 bytes)   inline method (bytecode parsing)
                                    @ 61  java.lang.StringConcatHelper.newArray(long):byte[] (40 bytes)   inline method (bytecode parsing)
                            @ 322  java.lang.String.startsWith(String):boolean (7 bytes)   inline method (bytecode parsing)
                            @ 359  java.lang.String.length():int (11 bytes)   inline method (bytecode parsing)
                              @ 6  java.lang.String.coder():byte (15 bytes)   inline method (bytecode parsing)
                            @ 362  java.lang.String.substring(int):String (10 bytes)   inline method (bytecode parsing)
                            @ 8  jdk.vm.ci.services.Services.getSavedProperty(String):String (13 bytes)   inline method (bytecode parsing)
                            @ 11  java.lang.Boolean.parseBoolean(String):boolean (7 bytes)   inline method (bytecode parsing)
                            @ 24  java.util.concurrent.atomic.AtomicInteger.<init>():void (5 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.Number.<init>():void (5 bytes)   inline method (bytecode parsing)
                                                @ 0  jdk.vm.ci.services.Services.checkJVMCIEnabled():void (17 bytes)   trivial (relevance=4.000000, probability=0.030943, bonus=1.000000, nodes=3)
                                                  @ 0  java.lang.System.allowSecurityManager():boolean (13 bytes)   trivial (relevance=1.000752, probability=0.007736, bonus=1.000000, nodes=8)
                                                @ 42  java.lang.System.getSecurityManager():SecurityManager (12 bytes)   relevance-based (relevance=1.000000, probability=0.007736, bonus=1.000000, nodes=14 <= 300.000000)
                            @ 12  java.lang.IllegalStateException.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  java.lang.RuntimeException.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                                @ 2  java.lang.Exception.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                            @ 12  java.lang.NullPointerException.<init>():void (5 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.RuntimeException.<init>():void (5 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.Exception.<init>():void (5 bytes)   inline method (bytecode parsing)
                            @ 14  java.util.HashMap$KeySet.<init>(HashMap):void (10 bytes)   inline method (bytecode parsing)
                              @ 6  java.util.AbstractSet.<init>():void (5 bytes)   inline method (bytecode parsing)
                                @ 1  java.util.AbstractCollection.<init>():void (5 bytes)   inline method (bytecode parsing)
                 n                                      @ 25  java.lang.NullPointerException.getExtendedNPEMessage():String (0 bytes)   not inlining it is a non-intrinsic native method
                            @ 15  java.util.LinkedHashMap$LinkedKeySet.<init>(LinkedHashMap, boolean):void (15 bytes)   inline method (bytecode parsing)
                              @ 6  java.util.AbstractSet.<init>():void (5 bytes)   inline method (bytecode parsing)
                                @ 1  java.util.AbstractCollection.<init>():void (5 bytes)   inline method (bytecode parsing)
                 n                                        @ 16  java.lang.Throwable.fillInStackTrace(int):Throwable (0 bytes)   not inlining it is a non-intrinsic native method
              s                                           @ 37  java.lang.Throwable.fillInStackTrace():Throwable (29 bytes)   relevance-based (relevance=4.000000, probability=0.000967, bonus=1.000000, nodes=34 <= 300.000000)
                                @ 1  java.util.LinkedHashMap.sequencedKeySet():SequencedSet (31 bytes)   not inlining relevance-based (relevance=0.000117, probability=0.000117, bonus=1.000000, nodes=23 > 0.035154)
                              @ 4  java.util.HashMap.keySet():Set (25 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=28 <= 300.000000)
              s                                         @ 24  java.lang.NullPointerException.fillInStackTrace():Throwable (41 bytes)   relevance-based (relevance=1.000000, probability=0.000967, bonus=1.000000, nodes=65 <= 300.000000)
                            @ 8  java.util.HashMap$KeyIterator.<init>(HashMap):void (6 bytes)   inline method (bytecode parsing)
                                                      @ 1  java.lang.Throwable.<init>():void (29 bytes)   relevance-based (relevance=1.000000, probability=0.000967, bonus=1.000000, nodes=73 <= 300.000000)
                            @ 12  java.util.LinkedHashMap$LinkedKeyIterator.<init>(LinkedHashMap, boolean):void (7 bytes)   inline method (bytecode parsing)
                                                    @ 18  java.util.Collections$UnmodifiableMap.<init>(Map):void (22 bytes)   relevance-based (relevance=1.000000, probability=0.001934, bonus=1.000000, nodes=87 <= 300.000000)
                                                  @ 19  java.util.Collections.unmodifiableMap(Map):Map (22 bytes)   relevance-based (relevance=1.000000, probability=0.003868, bonus=1.000000, nodes=95 <= 300.000000)
                                @ 3  java.util.LinkedHashMap$LinkedHashIterator.<init>(LinkedHashMap, boolean):void (47 bytes)   not inlining relevance-based (relevance=0.000168, probability=0.000117, bonus=1.000000, nodes=33 > 0.050384)
                                @ 2  java.util.HashMap$HashIterator.<init>(HashMap):void (79 bytes)   not inlining too large previous low-level graph (low-level-nodes: 409, relevance=1.000000, probability=0.999883, bonus=1.000000, nodes=58)
                              @ 7  java.util.HashMap$KeySet.iterator():Iterator (12 bytes)   relevance-based (relevance=1.433249, probability=1.000000, bonus=1.000000, nodes=21 <= 300.000000)
                 n                                  @ 16  java.lang.Throwable.fillInStackTrace(int):Throwable (0 bytes)   not inlining it is a non-intrinsic native method
              s                                     @ 24  java.lang.Throwable.fillInStackTrace():Throwable (29 bytes)   relevance-based (relevance=1.000000, probability=0.003868, bonus=1.000000, nodes=34 <= 300.000000)
                                                  @ 2  java.lang.Throwable.<init>(String):void (34 bytes)   relevance-based (relevance=16.000000, probability=0.003868, bonus=1.000000, nodes=45 <= 300.000000)
                                                @ 61  jdk.internal.misc.VM.getSavedProperties():Map (23 bytes)   relevance-based (relevance=1.000752, probability=0.007736, bonus=1.000000, nodes=147 <= 300.000000)
                                              @ 0  jdk.vm.ci.services.Services.getSavedProperties():Map (81 bytes)   relevance-based (relevance=1.000000, probability=0.030943, bonus=1.000000, nodes=201 <= 300.000000)
                                            @ 4  java.util.Map.get(Object):Object (0 bytes)   not inlining no type profile exists
                                                  @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.006527, bonus=1.000000, nodes=5)
                                                @ 14  java.lang.String.length():int (11 bytes)   trivial (relevance=2.000000, probability=0.006527, bonus=1.000000, nodes=8)
                                                  @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.006527, bonus=1.000000, nodes=5)
                                                @ 18  java.lang.String.length():int (11 bytes)   trivial (relevance=2.000000, probability=0.006527, bonus=1.000000, nodes=5)
                                                  @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.003263, bonus=1.000000, nodes=5)
                                                @ 30  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000000, probability=0.003263, bonus=1.000000, nodes=5)
                            @ 146  java.lang.StringUTF16.regionMatchesCI_Latin1(byte[], int, byte[], int, int):boolean (10 bytes)   inline method (bytecode parsing)
                                                    @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.003263, bonus=1.000000, nodes=5)
                                                  @ 27  java.lang.String.length():int (11 bytes)   trivial (relevance=16.000000, probability=0.003263, bonus=1.000000, nodes=5)
                                                    @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.003263, bonus=1.000000, nodes=5)
                                                  @ 43  java.lang.String.length():int (11 bytes)   trivial (relevance=16.000000, probability=0.003263, bonus=1.000000, nodes=8)
                                                  @ 70  java.lang.String.coder():byte (15 bytes)   trivial (relevance=4.000000, probability=0.000816, bonus=1.000000, nodes=5)
                                                  @ 78  java.lang.String.coder():byte (15 bytes)   trivial (relevance=2.000000, probability=0.000816, bonus=1.000000, nodes=5)
                            @ 58  java.lang.Character.toUpperCase(char):char (6 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.Character.toUpperCase(int):int (9 bytes)   inline method (bytecode parsing)
                            @ 75  java.lang.Character.toLowerCase(char):char (6 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.Character.toLowerCase(int):int (9 bytes)   inline method (bytecode parsing)
                            @ 80  java.lang.Character.toLowerCase(char):char (6 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.Character.toLowerCase(int):int (9 bytes)   inline method (bytecode parsing)
                                                    @ 50  java.lang.CharacterDataLatin1.toUpperCase(int):int (67 bytes)   relevance-based (relevance=4.000000, probability=0.000181, bonus=1.000000, nodes=52 <= 300.000000)
                                                    @ 1  java.lang.CharacterData.of(int):CharacterData (136 bytes)   trivial (relevance=32.000000, probability=0.000181, bonus=1.000000, nodes=8)
                                                    @ 5  java.lang.CharacterDataLatin1.toUpperCase(int):int (67 bytes)   relevance-based (relevance=32.000000, probability=0.000181, bonus=1.000000, nodes=52 <= 300.000000)
                                                    @ 1  java.lang.CharacterData.of(int):CharacterData (136 bytes)   trivial (relevance=16.000000, probability=0.000091, bonus=1.000000, nodes=8)
                                                    @ 5  java.lang.CharacterDataLatin1.toLowerCase(int):int (44 bytes)   relevance-based (relevance=16.000000, probability=0.000091, bonus=1.000000, nodes=15 <= 300.000000)
                                                    @ 1  java.lang.CharacterData.of(int):CharacterData (136 bytes)   trivial (relevance=16.000000, probability=0.000091, bonus=1.000000, nodes=8)
                                                    @ 5  java.lang.CharacterDataLatin1.toLowerCase(int):int (44 bytes)   relevance-based (relevance=16.000000, probability=0.000091, bonus=1.000000, nodes=15 <= 300.000000)
                                                  @ 131  java.lang.StringLatin1.regionMatchesCI_UTF16(byte[], int, byte[], int, int):boolean (93 bytes)   relevance-based (relevance=1.000000, probability=0.000408, bonus=1.000000, nodes=175 <= 300.000000)
                                                    @ 32  java.lang.CharacterDataLatin1.equalsIgnoreCase(byte, byte):boolean (63 bytes)   relevance-based (relevance=2.000000, probability=0.000272, bonus=1.000000, nodes=42 <= 300.000000)
                                                  @ 98  java.lang.StringLatin1.regionMatchesCI(byte[], int, byte[], int, int):boolean (45 bytes)   relevance-based (relevance=1.000000, probability=0.000408, bonus=1.000000, nodes=64 <= 300.000000)
                                                @ 33  java.lang.String.regionMatches(boolean, int, String, int, int):boolean (150 bytes)   relevance-based (relevance=1.000000, probability=0.003263, bonus=1.000000, nodes=254 <= 300.000000)
                                              @ 3  java.lang.String.equalsIgnoreCase(String):boolean (45 bytes)   relevance-based (relevance=3.377539, probability=0.026108, bonus=1.000000, nodes=271 <= 300.000000)
                                            @ 0  jdk.vm.ci.common.InitTimer.isEnabled():boolean (37 bytes)   not inlining relevance-based (relevance=2.000000, probability=0.061885, bonus=1.000000, nodes=499 > 300.000000)
                            @ 28  java.lang.StringBuilder.<init>():void (7 bytes)   inline method (bytecode parsing)
                            @ 33  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 39  java.lang.StringBuilder.append(Object):StringBuilder (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 42  java.lang.StringBuilder.toString():String (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.String.<init>(StringBuilder):void (7 bytes)   inline method (bytecode parsing)
                            @ 120  java.lang.StringBuilder.<init>():void (7 bytes)   inline method (bytecode parsing)
                            @ 125  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 137  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 141  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 144  java.lang.StringBuilder.toString():String (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.String.<init>(StringBuilder):void (7 bytes)   inline method (bytecode parsing)
                                              @ 7  java.util.concurrent.atomic.AtomicInteger.getAndIncrement():int (12 bytes)   trivial (relevance=2.000000, probability=0.030943, bonus=1.000000, nodes=8)
                                              @ 3  java.lang.AbstractStringBuilder.<init>(int):void (39 bytes)   relevance-based (relevance=1.000000, probability=0.015471, bonus=1.000000, nodes=11 <= 300.000000)
                                              @ 2  java.lang.AbstractStringBuilder.append(String):AbstractStringBuilder (45 bytes)   not inlining too large previous low-level graph (low-level-nodes: 368, relevance=1.000000, probability=0.015471, bonus=1.000000, nodes=21)
                                                @ 11  java.lang.Enum.toString():String (5 bytes)   trivial (relevance=1.000000, probability=0.015471, bonus=1.000000, nodes=5)
                                              @ 2  java.lang.String.valueOf(Object):String (15 bytes)   relevance-based (relevance=1.000000, probability=0.015471, bonus=1.000000, nodes=20 <= 300.000000)
                                              @ 2  java.lang.AbstractStringBuilder.append(String):AbstractStringBuilder (45 bytes)   not inlining too large previous low-level graph (low-level-nodes: 368, relevance=1.000028, probability=0.015471, bonus=1.000000, nodes=23)
                            @ 5  java.lang.AbstractStringBuilder.getValue():byte[] (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 3  java.lang.String.<init>(AbstractStringBuilder, Void):void (99 bytes)   not inlining too large previous low-level graph (low-level-nodes: 376, relevance=1.000028, probability=0.015471, bonus=1.000000, nodes=41)
                                                  @ 11  java.lang.String.toString():String (2 bytes)   trivial (relevance=1.000000, probability=0.015471, bonus=1.000000, nodes=4)
                                                @ 11  java.lang.String.valueOf(Object):String (15 bytes)   trivial (relevance=1.000000, probability=0.015471, bonus=1.000000, nodes=4)
                            @ 11  jdk.internal.misc.InternalLock.lock():void (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.util.concurrent.locks.ReentrantLock.lock():void (8 bytes)   inline method (bytecode parsing)
                            @ 23  jdk.internal.misc.InternalLock.unlock():void (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.util.concurrent.locks.ReentrantLock.unlock():void (10 bytes)   inline method (bytecode parsing)
                                @ 5  java.util.concurrent.locks.AbstractQueuedSynchronizer.release(int):boolean (19 bytes)   inline method (bytecode parsing)
                            @ 9  java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(int):void (20 bytes)   inline method (bytecode parsing)
                            @ 7  java.util.concurrent.locks.AbstractQueuedSynchronizer.compareAndSetState(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 15  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                            @ 21  java.util.concurrent.locks.AbstractOwnableSynchronizer.getExclusiveOwnerThread():Thread (5 bytes)   inline accessor method (bytecode parsing)
                            @ 29  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 51  java.util.concurrent.locks.AbstractQueuedSynchronizer.setState(int):void (6 bytes)   inline method (bytecode parsing)
                                                    @ 1  java.util.concurrent.locks.ReentrantLock$NonfairSync.initialTryLock():boolean (58 bytes)   relevance-based (relevance=1.020999, probability=0.007736, bonus=1.000000, nodes=40 <= 300.000000)
                            @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 10  java.util.concurrent.locks.AbstractQueuedSynchronizer.compareAndSetState(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 20  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                                                    @ 2  java.util.concurrent.locks.ReentrantLock$NonfairSync.tryAcquire(int):boolean (27 bytes)   not inlining relevance-based (relevance=0.043772, probability=0.000298, bonus=1.000000, nodes=36 > 13.131676)
                            @ 245  java.util.concurrent.locks.AbstractQueuedSynchronizer$ExclusiveNode.<init>():void (5 bytes)   inline method (bytecode parsing)
                              @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer$Node.<init>():void (5 bytes)   inline method (bytecode parsing)
                            @ 393  java.lang.Thread.interrupted():boolean (7 bytes)   inline method (bytecode parsing)
                                                    @ 15  java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer$Node, int, boolean, boolean, boolean, long):int (424 bytes)   not inlining relevance-based (relevance=0.033955, probability=0.000231, bonus=1.000000, nodes=197 > 10.186479)
                                                  @ 4  java.util.concurrent.locks.ReentrantLock$Sync.lock():void (13 bytes)   relevance-based (relevance=1.107088, probability=0.007736, bonus=1.000000, nodes=57 <= 300.000000)
                            @ 16  java.io.BufferedWriter.newLine():void (8 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.System.lineSeparator():String (4 bytes)   inline method (bytecode parsing)
                            @ 30  java.io.OutputStreamWriter.flushBuffer():void (8 bytes)   inline method (bytecode parsing)
                                                    @ 1  java.io.PrintStream.ensureOpen():void (18 bytes)   trivial (relevance=2.000000, probability=0.007736, bonus=1.000000, nodes=7)
                                                        @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.007736, bonus=1.000000, nodes=5)
                                                      @ 4  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000000, probability=0.007736, bonus=1.000000, nodes=8)
                            @ 23  jdk.internal.misc.InternalLock.lock():void (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.util.concurrent.locks.ReentrantLock.lock():void (8 bytes)   inline method (bytecode parsing)
                            @ 35  jdk.internal.misc.InternalLock.unlock():void (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.util.concurrent.locks.ReentrantLock.unlock():void (10 bytes)   inline method (bytecode parsing)
                                @ 5  java.util.concurrent.locks.AbstractQueuedSynchronizer.release(int):boolean (19 bytes)   inline method (bytecode parsing)
                            @ 9  java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(int):void (20 bytes)   inline method (bytecode parsing)
                            @ 7  java.util.concurrent.locks.AbstractQueuedSynchronizer.compareAndSetState(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 15  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                            @ 21  java.util.concurrent.locks.AbstractOwnableSynchronizer.getExclusiveOwnerThread():Thread (5 bytes)   inline accessor method (bytecode parsing)
                            @ 29  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 51  java.util.concurrent.locks.AbstractQueuedSynchronizer.setState(int):void (6 bytes)   inline method (bytecode parsing)
                                                          @ 1  java.util.concurrent.locks.ReentrantLock$NonfairSync.initialTryLock():boolean (58 bytes)   relevance-based (relevance=1.020999, probability=0.007736, bonus=1.000000, nodes=40 <= 300.000000)
                            @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 10  java.util.concurrent.locks.AbstractQueuedSynchronizer.compareAndSetState(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 20  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                                                          @ 2  java.util.concurrent.locks.ReentrantLock$NonfairSync.tryAcquire(int):boolean (27 bytes)   not inlining relevance-based (relevance=0.043772, probability=0.000298, bonus=1.000000, nodes=36 > 13.131676)
                            @ 245  java.util.concurrent.locks.AbstractQueuedSynchronizer$ExclusiveNode.<init>():void (5 bytes)   inline method (bytecode parsing)
                              @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer$Node.<init>():void (5 bytes)   inline method (bytecode parsing)
                            @ 393  java.lang.Thread.interrupted():boolean (7 bytes)   inline method (bytecode parsing)
                                                          @ 15  java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer$Node, int, boolean, boolean, boolean, long):int (424 bytes)   not inlining relevance-based (relevance=0.033955, probability=0.000231, bonus=1.000000, nodes=197 > 10.186479)
                                                        @ 4  java.util.concurrent.locks.ReentrantLock$Sync.lock():void (13 bytes)   relevance-based (relevance=1.107088, probability=0.007736, bonus=1.000000, nodes=57 <= 300.000000)
                            @ 39  java.io.BufferedWriter.min(int, int):int (9 bytes)   inline method (bytecode parsing)
                                                          @ 1  java.io.BufferedWriter.ensureOpen():void (18 bytes)   trivial (relevance=1.000000, probability=0.007736, bonus=1.000000, nodes=7)
                                                          @ 6  java.io.BufferedWriter.growIfNeeded(int):void (63 bytes)   relevance-based (relevance=1.000000, probability=0.007736, bonus=1.000000, nodes=15 <= 300.000000)
                            @ 16  java.lang.String.checkBoundsOffCount(int, int, int):int (10 bytes)   inline method (bytecode parsing)
                                                              @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.007736, bonus=1.000000, nodes=5)
                                                            @ 3  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000000, probability=0.007736, bonus=1.000000, nodes=8)
                                                              @ 6  jdk.internal.util.Preconditions.checkFromToIndex(int, int, int, BiFunction):int (24 bytes)   relevance-based (relevance=1.000000, probability=0.007736, bonus=1.000000, nodes=11 <= 300.000000)
                                                            @ 6  java.lang.String.checkBoundsBeginEnd(int, int, int):void (11 bytes)   relevance-based (relevance=1.000000, probability=0.007736, bonus=1.000000, nodes=10 <= 300.000000)
                                                            @ 6  jdk.internal.util.Preconditions.checkFromIndexSize(int, int, int, BiFunction):int (25 bytes)   relevance-based (relevance=1.000000, probability=0.007736, bonus=1.000000, nodes=15 <= 300.000000)
                                                            @ 21  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=0.007736, bonus=1.000000, nodes=9)
                                                            @ 36  java.lang.StringLatin1.getChars(byte[], int, int, char[], int):void (12 bytes)   relevance-based (relevance=1.000000, probability=0.007736, bonus=1.000000, nodes=38 <= 300.000000)
                                                          @ 60  java.lang.String.getChars(int, int, char[], int):void (55 bytes)   relevance-based (relevance=1.000000, probability=0.007736, bonus=1.000000, nodes=58 <= 300.000000)
                                                        @ 30  java.io.BufferedWriter.implWrite(String, int, int):void (100 bytes)   relevance-based (relevance=1.137693, probability=0.007736, bonus=1.000000, nodes=93 <= 300.000000)
                            @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 8  java.util.concurrent.locks.AbstractOwnableSynchronizer.getExclusiveOwnerThread():Thread (5 bytes)   inline accessor method (bytecode parsing)
                            @ 41  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                            @ 46  java.util.concurrent.locks.AbstractQueuedSynchronizer.setState(int):void (6 bytes)   inline method (bytecode parsing)
                                                        @ 2  java.util.concurrent.locks.ReentrantLock$Sync.tryRelease(int):boolean (51 bytes)   relevance-based (relevance=1.137693, probability=0.007736, bonus=1.000000, nodes=37 <= 300.000000)
                            @ 22  java.util.concurrent.locks.AbstractQueuedSynchronizer$Node.getAndUnsetStatus(int):int (14 bytes)   inline method (bytecode parsing)
                              @ 10  jdk.internal.misc.Unsafe.getAndBitwiseAndInt(Object, long, int):int (27 bytes)   inline method (bytecode parsing)
                            @ 5  java.lang.Thread.isVirtual():boolean (5 bytes)   inline method (bytecode parsing)
                                                          @ 30  java.util.concurrent.locks.LockSupport.unpark(Thread):void (26 bytes)   not inlining relevance-based (relevance=0.011708, probability=0.000052, bonus=1.000000, nodes=20 > 3.512350)
                                                        @ 12  java.util.concurrent.locks.AbstractQueuedSynchronizer.signalNext(AbstractQueuedSynchronizer$Node):void (34 bytes)   relevance-based (relevance=1.027644, probability=0.006987, bonus=1.000000, nodes=56 <= 300.000000)
                                                      @ 7  java.io.BufferedWriter.write(String, int, int):void (82 bytes)   relevance-based (relevance=1.000000, probability=0.007736, bonus=1.000000, nodes=262 <= 300.000000)
                                                    @ 9  java.io.Writer.write(String):void (11 bytes)   relevance-based (relevance=2.000000, probability=0.007736, bonus=1.000000, nodes=266 <= 300.000000)
                                                  @ 16  java.io.PrintStream.implWriteln(String):void (48 bytes)   not inlining relevance-based (relevance=1.137693, probability=0.007736, bonus=1.000000, nodes=309 > 300.000000)
                            @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 8  java.util.concurrent.locks.AbstractOwnableSynchronizer.getExclusiveOwnerThread():Thread (5 bytes)   inline accessor method (bytecode parsing)
                            @ 41  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                            @ 46  java.util.concurrent.locks.AbstractQueuedSynchronizer.setState(int):void (6 bytes)   inline method (bytecode parsing)
                                                  @ 2  java.util.concurrent.locks.ReentrantLock$Sync.tryRelease(int):boolean (51 bytes)   relevance-based (relevance=1.137693, probability=0.007736, bonus=1.000000, nodes=37 <= 300.000000)
                            @ 22  java.util.concurrent.locks.AbstractQueuedSynchronizer$Node.getAndUnsetStatus(int):int (14 bytes)   inline method (bytecode parsing)
                              @ 10  jdk.internal.misc.Unsafe.getAndBitwiseAndInt(Object, long, int):int (27 bytes)   inline method (bytecode parsing)
                            @ 5  java.lang.Thread.isVirtual():boolean (5 bytes)   inline method (bytecode parsing)
                                                    @ 30  java.util.concurrent.locks.LockSupport.unpark(Thread):void (26 bytes)   not inlining relevance-based (relevance=0.011708, probability=0.000052, bonus=1.000000, nodes=20 > 3.512350)
                                                  @ 12  java.util.concurrent.locks.AbstractQueuedSynchronizer.signalNext(AbstractQueuedSynchronizer$Node):void (34 bytes)   relevance-based (relevance=1.027644, probability=0.006987, bonus=1.000000, nodes=56 <= 300.000000)
                            @ 16  java.io.BufferedWriter.newLine():void (8 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.System.lineSeparator():String (4 bytes)   inline method (bytecode parsing)
                            @ 30  java.io.OutputStreamWriter.flushBuffer():void (8 bytes)   inline method (bytecode parsing)
                                                    @ 1  java.io.PrintStream.ensureOpen():void (18 bytes)   trivial (relevance=2.000000, probability=0.007736, bonus=1.000000, nodes=7)
                                                        @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.007736, bonus=1.000000, nodes=5)
                                                      @ 4  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000000, probability=0.007736, bonus=1.000000, nodes=8)
                            @ 23  jdk.internal.misc.InternalLock.lock():void (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.util.concurrent.locks.ReentrantLock.lock():void (8 bytes)   inline method (bytecode parsing)
                            @ 35  jdk.internal.misc.InternalLock.unlock():void (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.util.concurrent.locks.ReentrantLock.unlock():void (10 bytes)   inline method (bytecode parsing)
                                @ 5  java.util.concurrent.locks.AbstractQueuedSynchronizer.release(int):boolean (19 bytes)   inline method (bytecode parsing)
                            @ 9  java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(int):void (20 bytes)   inline method (bytecode parsing)
                            @ 7  java.util.concurrent.locks.AbstractQueuedSynchronizer.compareAndSetState(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 15  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                            @ 21  java.util.concurrent.locks.AbstractOwnableSynchronizer.getExclusiveOwnerThread():Thread (5 bytes)   inline accessor method (bytecode parsing)
                            @ 29  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 51  java.util.concurrent.locks.AbstractQueuedSynchronizer.setState(int):void (6 bytes)   inline method (bytecode parsing)
                                                          @ 1  java.util.concurrent.locks.ReentrantLock$NonfairSync.initialTryLock():boolean (58 bytes)   relevance-based (relevance=1.020999, probability=0.007736, bonus=1.000000, nodes=40 <= 300.000000)
                            @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 10  java.util.concurrent.locks.AbstractQueuedSynchronizer.compareAndSetState(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 20  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                                                          @ 2  java.util.concurrent.locks.ReentrantLock$NonfairSync.tryAcquire(int):boolean (27 bytes)   not inlining relevance-based (relevance=0.043772, probability=0.000298, bonus=1.000000, nodes=36 > 13.131676)
                            @ 245  java.util.concurrent.locks.AbstractQueuedSynchronizer$ExclusiveNode.<init>():void (5 bytes)   inline method (bytecode parsing)
                              @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer$Node.<init>():void (5 bytes)   inline method (bytecode parsing)
                            @ 8  java.util.HashMap$KeyIterator.<init>(HashMap):void (6 bytes)   inline method (bytecode parsing)
                            @ 393  java.lang.Thread.interrupted():boolean (7 bytes)   inline method (bytecode parsing)
                                                          @ 15  java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer$Node, int, boolean, boolean, boolean, long):int (424 bytes)   not inlining relevance-based (relevance=0.033955, probability=0.000231, bonus=1.000000, nodes=197 > 10.186479)
                                                        @ 4  java.util.concurrent.locks.ReentrantLock$Sync.lock():void (13 bytes)   relevance-based (relevance=1.107088, probability=0.007736, bonus=1.000000, nodes=57 <= 300.000000)
                              @ 2  java.util.HashMap$HashIterator.<init>(HashMap):void (79 bytes)   not inlining too large previous low-level graph (low-level-nodes: 409, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=58)
                            @ 39  java.io.BufferedWriter.min(int, int):int (9 bytes)   inline method (bytecode parsing)
                                                          @ 1  java.io.BufferedWriter.ensureOpen():void (18 bytes)   trivial (relevance=1.000000, probability=0.007736, bonus=1.000000, nodes=7)
                                                          @ 6  java.io.BufferedWriter.growIfNeeded(int):void (63 bytes)   relevance-based (relevance=1.000000, probability=0.007736, bonus=1.000000, nodes=15 <= 300.000000)
                            @ 16  java.lang.String.checkBoundsOffCount(int, int, int):int (10 bytes)   inline method (bytecode parsing)
                                                              @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.007736, bonus=1.000000, nodes=5)
                                                            @ 3  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000000, probability=0.007736, bonus=1.000000, nodes=8)
                                                              @ 6  jdk.internal.util.Preconditions.checkFromToIndex(int, int, int, BiFunction):int (24 bytes)   relevance-based (relevance=1.000000, probability=0.007736, bonus=1.000000, nodes=11 <= 300.000000)
                                                            @ 6  java.lang.String.checkBoundsBeginEnd(int, int, int):void (11 bytes)   relevance-based (relevance=1.000000, probability=0.007736, bonus=1.000000, nodes=10 <= 300.000000)
                                                            @ 6  jdk.internal.util.Preconditions.checkFromIndexSize(int, int, int, BiFunction):int (25 bytes)   relevance-based (relevance=1.000000, probability=0.007736, bonus=1.000000, nodes=15 <= 300.000000)
                                                            @ 21  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=0.007736, bonus=1.000000, nodes=9)
                                                            @ 36  java.lang.StringLatin1.getChars(byte[], int, int, char[], int):void (12 bytes)   relevance-based (relevance=1.000000, probability=0.007736, bonus=1.000000, nodes=38 <= 300.000000)
                                                          @ 60  java.lang.String.getChars(int, int, char[], int):void (55 bytes)   relevance-based (relevance=1.000000, probability=0.007736, bonus=1.000000, nodes=58 <= 300.000000)
                                                        @ 30  java.io.BufferedWriter.implWrite(String, int, int):void (100 bytes)   relevance-based (relevance=1.137693, probability=0.007736, bonus=1.000000, nodes=93 <= 300.000000)
                            @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 8  java.util.concurrent.locks.AbstractOwnableSynchronizer.getExclusiveOwnerThread():Thread (5 bytes)   inline accessor method (bytecode parsing)
                            @ 41  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                            @ 46  java.util.concurrent.locks.AbstractQueuedSynchronizer.setState(int):void (6 bytes)   inline method (bytecode parsing)
                                                        @ 2  java.util.concurrent.locks.ReentrantLock$Sync.tryRelease(int):boolean (51 bytes)   relevance-based (relevance=1.137693, probability=0.007736, bonus=1.000000, nodes=37 <= 300.000000)
                            @ 22  java.util.concurrent.locks.AbstractQueuedSynchronizer$Node.getAndUnsetStatus(int):int (14 bytes)   inline method (bytecode parsing)
                              @ 10  jdk.internal.misc.Unsafe.getAndBitwiseAndInt(Object, long, int):int (27 bytes)   inline method (bytecode parsing)
                            @ 5  java.lang.Thread.isVirtual():boolean (5 bytes)   inline method (bytecode parsing)
                                                          @ 30  java.util.concurrent.locks.LockSupport.unpark(Thread):void (26 bytes)   not inlining relevance-based (relevance=0.011708, probability=0.000052, bonus=1.000000, nodes=20 > 3.512350)
                                                        @ 12  java.util.concurrent.locks.AbstractQueuedSynchronizer.signalNext(AbstractQueuedSynchronizer$Node):void (34 bytes)   relevance-based (relevance=1.027644, probability=0.006987, bonus=1.000000, nodes=56 <= 300.000000)
                                                      @ 7  java.io.BufferedWriter.write(String, int, int):void (82 bytes)   relevance-based (relevance=1.000000, probability=0.007736, bonus=1.000000, nodes=262 <= 300.000000)
                                                    @ 9  java.io.Writer.write(String):void (11 bytes)   relevance-based (relevance=2.000000, probability=0.007736, bonus=1.000000, nodes=266 <= 300.000000)
                                                  @ 48  java.io.PrintStream.implWriteln(String):void (48 bytes)   not inlining relevance-based (relevance=1.137693, probability=0.007736, bonus=1.000000, nodes=309 > 300.000000)
                                                @ 14  java.io.PrintStream.writeln(String):void (81 bytes)   relevance-based (relevance=1.000000, probability=0.015471, bonus=1.000000, nodes=189 <= 300.000000)
                                              @ 45  java.io.PrintStream.println(String):void (44 bytes)   relevance-based (relevance=1.000028, probability=0.015471, bonus=1.000000, nodes=190 <= 300.000000)
                                              @ 3  java.lang.AbstractStringBuilder.<init>(int):void (39 bytes)   relevance-based (relevance=2.000056, probability=0.030943, bonus=1.000000, nodes=11 <= 300.000000)
                                              @ 2  java.lang.AbstractStringBuilder.append(String):AbstractStringBuilder (45 bytes)   not inlining too large previous low-level graph (low-level-nodes: 368, relevance=2.000056, probability=0.030943, bonus=1.000000, nodes=21)
                                                  @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.030943, bonus=1.000000, nodes=5)
                                                @ 1  java.lang.String.length():int (11 bytes)   trivial (relevance=1.813220, probability=0.030943, bonus=1.000000, nodes=5)
                                                  @ 6  jdk.internal.util.Preconditions.checkFromToIndex(int, int, int, BiFunction):int (24 bytes)   relevance-based (relevance=1.000000, probability=0.030943, bonus=1.000000, nodes=12 <= 300.000000)
                                                @ 8  java.lang.String.checkBoundsBeginEnd(int, int, int):void (11 bytes)   relevance-based (relevance=1.813220, probability=0.030943, bonus=1.000000, nodes=11 <= 300.000000)
                                                @ 28  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000075, probability=0.017066, bonus=1.000000, nodes=5)
                            @ 20  java.lang.String.<init>(byte[], byte):void (15 bytes)   inline method (bytecode parsing)
                            @ 13  java.util.Arrays.copyOfRangeByte(byte[], int, int):byte[] (33 bytes)   inline method (bytecode parsing)
                              @ 2  java.util.Arrays.checkLength(int, int):void (38 bytes)   inline method (bytecode parsing)
                                                    @ 24  java.lang.Math.min(int, int):int (11 bytes)   trivial (relevance=1.000010, probability=0.012302, bonus=1.000000, nodes=7)
                                                  @ 16  java.util.Arrays.copyOfRange(byte[], int, int):byte[] (25 bytes)   relevance-based (relevance=1.000000, probability=0.017061, bonus=1.000000, nodes=27 <= 300.000000)
                                                @ 41  java.lang.StringLatin1.newString(byte[], int, int):String (24 bytes)   relevance-based (relevance=1.000000, probability=0.017066, bonus=1.000000, nodes=45 <= 300.000000)
                                              @ 134  java.lang.String.substring(int, int):String (58 bytes)   relevance-based (relevance=2.000056, probability=0.030943, bonus=1.000000, nodes=59 <= 300.000000)
                                            @ 11  jdk.vm.ci.common.InitTimer.<init>(String):void (151 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.030943, bonus=1.000000, nodes=347 > 300.000000)
                            @ 49  jdk.internal.math.DoubleToDecimal.append(int):void (19 bytes)   inline method (bytecode parsing)
                            @ 21  java.util.ServiceLoader.load(Class, ClassLoader):ServiceLoader (13 bytes)   inline method (bytecode parsing)
                            @ 0  jdk.internal.misc.VM.initLevel():int (4 bytes)   inline method (bytecode parsing)
                            @ 45  java.lang.IllegalStateException.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  java.lang.RuntimeException.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                                @ 2  java.lang.Exception.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                            @ 32  java.lang.ClassLoader.getBuiltinAppClassLoader():ClassLoader (4 bytes)   inline method (bytecode parsing)
                              @ 0  jdk.internal.loader.ClassLoaders.appClassLoader():ClassLoader (4 bytes)   inline method (bytecode parsing)
                            @ 15  jdk.internal.math.MathUtils.pow10(int):long (6 bytes)   inline method (bytecode parsing)
                            @ 47  jdk.internal.math.MathUtils.pow10(int):long (6 bytes)   inline method (bytecode parsing)
                                                  @ 0  java.lang.System.allowSecurityManager():boolean (13 bytes)   trivial (relevance=0.333584, probability=0.006189, bonus=1.000000, nodes=8)
                                                @ 75  java.lang.System.getSecurityManager():SecurityManager (12 bytes)   relevance-based (relevance=0.333333, probability=0.006189, bonus=1.000000, nodes=14 <= 100.000000)
                                  @ 7  jdk.internal.math.MathUtils.flog10pow2(int):int (11 bytes)   relevance-based (relevance=0.583432, probability=0.520172, bonus=1.000000, nodes=10 <= 175.029643)
                                                    @ 0  java.lang.System.allowSecurityManager():boolean (13 bytes)   trivial (relevance=0.333581, probability=0.003094, bonus=1.000000, nodes=8)
                                                  @ 0  java.lang.System.getSecurityManager():SecurityManager (12 bytes)   relevance-based (relevance=0.333330, probability=0.003094, bonus=1.000000, nodes=14 <= 99.999000)
                            @ 8  jdk.internal.math.DoubleToDecimal.append(int):void (19 bytes)   inline method (bytecode parsing)
                            @ 7  java.lang.Class.getClassLoader0():ClassLoader (5 bytes)   inline accessor method (bytecode parsing)
                                                  @ 9  java.lang.ClassLoader.getClassLoader(Class):ClassLoader (11 bytes)   relevance-based (relevance=0.083395, probability=0.001547, bonus=1.000000, nodes=13 <= 25.018554)
                                                @ 89  java.lang.ClassLoader.checkClassLoaderPermission(ClassLoader, Class):void (29 bytes)   not inlining relevance-based (relevance=0.166665, probability=0.003094, bonus=1.000000, nodes=50 > 49.999500)
                                    @ 2  jdk.internal.math.DoubleToDecimal.appendDigit(int):void (22 bytes)   relevance-based (relevance=0.470140, probability=0.419163, bonus=1.000000, nodes=17 <= 141.041913)
                 n                                @ 16  java.lang.Throwable.fillInStackTrace(int):Throwable (0 bytes)   not inlining it is a non-intrinsic native method
              s                                   @ 24  java.lang.Throwable.fillInStackTrace():Throwable (29 bytes)   relevance-based (relevance=0.333333, probability=0.006189, bonus=1.000000, nodes=34 <= 100.000000)
                                                @ 2  java.lang.Throwable.<init>(String):void (34 bytes)   relevance-based (relevance=0.333333, probability=0.006189, bonus=1.000000, nodes=45 <= 100.000000)
                                      @ 2  jdk.internal.math.DoubleToDecimal.y(int):int (20 bytes)   relevance-based (relevance=0.470140, probability=0.419163, bonus=1.000000, nodes=16 <= 141.041913)
                                              @ 18  java.lang.ClassLoader.getSystemClassLoader():ClassLoader (96 bytes)   relevance-based (relevance=1.000000, probability=0.030943, bonus=1.000000, nodes=103 <= 300.000000)
                                      @ 26  jdk.internal.math.DoubleToDecimal.appendDigit(int):void (22 bytes)   relevance-based (relevance=0.470140, probability=3.353306, bonus=1.000000, nodes=15 <= 141.041913)
                                    @ 13  jdk.internal.math.DoubleToDecimal.append8Digits(int):void (42 bytes)   relevance-based (relevance=0.470140, probability=0.419163, bonus=1.000000, nodes=48 <= 141.041913)
                            @ 27  java.util.Objects.requireNonNull(Object):Object (14 bytes)   inline method (bytecode parsing)
                            @ 54  java.lang.Class.getModule():Module (5 bytes)   inline accessor method (bytecode parsing)
                            @ 61  java.lang.Class.getModule():Module (5 bytes)   inline accessor method (bytecode parsing)
                            @ 67  java.lang.Class.getModule():Module (5 bytes)   inline accessor method (bytecode parsing)
                            @ 91  java.lang.StringBuilder.<init>():void (7 bytes)   inline method (bytecode parsing)
                            @ 96  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 101  java.lang.StringBuilder.append(Object):StringBuilder (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 106  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 109  java.lang.StringBuilder.toString():String (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.String.<init>(StringBuilder):void (7 bytes)   inline method (bytecode parsing)
                                        @ 2  jdk.internal.math.DoubleToDecimal.y(int):int (20 bytes)   relevance-based (relevance=0.470140, probability=0.248339, bonus=1.000000, nodes=16 <= 141.041913)
                            @ 1  java.util.AbstractList.<init>():void (10 bytes)   inline method (bytecode parsing)
                              @ 1  java.util.AbstractCollection.<init>():void (5 bytes)   inline method (bytecode parsing)
                                                @ 9  java.util.ArrayList.<init>():void (12 bytes)   relevance-based (relevance=8.000000, probability=0.024754, bonus=1.000000, nodes=11 <= 300.000000)
                                        @ 26  jdk.internal.math.DoubleToDecimal.appendDigit(int):void (22 bytes)   relevance-based (relevance=0.470140, probability=1.986715, bonus=1.000000, nodes=15 <= 141.041913)
                            @ 1  java.util.AbstractList.<init>():void (10 bytes)   inline method (bytecode parsing)
                              @ 1  java.util.AbstractCollection.<init>():void (5 bytes)   inline method (bytecode parsing)
                                      @ 6  jdk.internal.math.DoubleToDecimal.append8Digits(int):void (42 bytes)   relevance-based (relevance=0.470140, probability=0.248339, bonus=1.000000, nodes=48 <= 141.041913)
                                                @ 20  java.util.ArrayList.<init>():void (12 bytes)   relevance-based (relevance=8.000000, probability=0.024754, bonus=1.000000, nodes=11 <= 300.000000)
                                                @ 31  jdk.internal.misc.VM.isBooted():boolean (13 bytes)   relevance-based (relevance=8.000000, probability=0.024754, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 11  java.lang.Class.getModule():Module (5 bytes)   inline accessor method (bytecode parsing)
                                      @ 10  jdk.internal.math.DoubleToDecimal.removeTrailingZeroes():void (52 bytes)   relevance-based (relevance=0.793532, probability=0.419163, bonus=1.000000, nodes=38 <= 238.059719)
                            @ 35  java.lang.StringBuilder.<init>():void (7 bytes)   inline method (bytecode parsing)
                            @ 40  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 44  java.lang.StringBuilder.append(Object):StringBuilder (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 47  java.lang.StringBuilder.toString():String (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.String.<init>(StringBuilder):void (7 bytes)   inline method (bytecode parsing)
                                    @ 18  jdk.internal.math.DoubleToDecimal.lowDigits(int):void (14 bytes)   relevance-based (relevance=0.470140, probability=0.419163, bonus=1.000000, nodes=89 <= 141.041913)
                            @ 66  java.lang.StringBuilder.<init>():void (7 bytes)   inline method (bytecode parsing)
                            @ 70  java.lang.StringBuilder.append(Object):StringBuilder (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 75  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 78  java.lang.StringBuilder.toString():String (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.String.<init>(StringBuilder):void (7 bytes)   inline method (bytecode parsing)
                                  @ 157  jdk.internal.math.DoubleToDecimal.toChars3(int, int, int, int):int (31 bytes)   not inlining relevance-based (relevance=0.470140, probability=0.419163, bonus=1.000000, nodes=150 > 141.041913)
                            @ 8  jdk.internal.math.DoubleToDecimal.append(int):void (19 bytes)   inline method (bytecode parsing)
                            @ 1  java.util.Objects.requireNonNull(Object):Object (14 bytes)   inline method (bytecode parsing)
                            @ 6  java.util.Objects.requireNonNull(Object):Object (14 bytes)   inline method (bytecode parsing)
                            @ 18  java.lang.Class.getModule():Module (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 145  jdk.internal.math.DoubleToDecimal.toChars2(int, int, int, int):int (44 bytes)   not inlining relevance-based (relevance=0.022467, probability=0.020031, bonus=1.000000, nodes=45 > 6.740183)
                            @ 54  jdk.internal.math.DoubleToDecimal.append(int):void (19 bytes)   inline method (bytecode parsing)
                                  @ 123  jdk.internal.math.DoubleToDecimal.toChars1(int, int, int, int):int (100 bytes)   not inlining relevance-based (relevance=0.090825, probability=0.080977, bonus=1.000000, nodes=55 > 27.247548)
                                @ 123  jdk.internal.math.DoubleToDecimal.toChars(long, int, FormattedFPDecimal):int (161 bytes)   relevance-based (relevance=0.520932, probability=0.520172, bonus=1.000000, nodes=73 <= 156.279745)
                            @ 1  java.lang.Class.getModule():Module (5 bytes)   inline accessor method (bytecode parsing)
                            @ 47  java.lang.String.lastIndexOf(int):int (12 bytes)   inline method (bytecode parsing)
                 n                                      @ 14  java.lang.Class.initClassName():String (0 bytes)   not inlining it is a non-intrinsic native method
                                                        @ 40  java.lang.Class.getName():String (18 bytes)   relevance-based (relevance=1.005559, probability=0.007087, bonus=1.000000, nodes=17 <= 300.000000)
                                                          @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.007087, bonus=1.000000, nodes=5)
                                                        @ 3  java.lang.String.length():int (11 bytes)   trivial (relevance=1.194078, probability=0.007087, bonus=1.000000, nodes=8)
                                @ 135  jdk.internal.math.DoubleToDecimal.toDecimal(int, long, int, FormattedFPDecimal):int (385 bytes)   not inlining too large previous low-level graph (low-level-nodes: 456, relevance=0.442317, probability=0.441671, bonus=1.000000, nodes=149)
                              @ 3  jdk.internal.math.DoubleToDecimal.toDecimal(double, FormattedFPDecimal):int (220 bytes)   relevance-based (relevance=1.125411, probability=1.000000, bonus=1.000000, nodes=158 <= 300.000000)
                                                          @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=0.007087, bonus=1.000000, nodes=9)
                                                            @ 1  java.lang.StringLatin1.canEncode(int):boolean (13 bytes)   trivial (relevance=1.000000, probability=0.007087, bonus=1.000000, nodes=5)
                            @ 9  java.lang.String.checkBoundsOffCount(int, int, int):int (10 bytes)   inline method (bytecode parsing)
                                                            @ 14  java.lang.Math.min(int, int):int (11 bytes)   trivial (relevance=1.000000, probability=0.007087, bonus=1.000000, nodes=7)
                                                          @ 13  java.lang.StringLatin1.lastIndexOf(byte[], int, int):int (40 bytes)   relevance-based (relevance=1.000000, probability=0.007087, bonus=1.000000, nodes=31 <= 300.000000)
                                                        @ 8  java.lang.String.lastIndexOf(int, int):int (29 bytes)   relevance-based (relevance=1.194078, probability=0.007087, bonus=1.000000, nodes=40 <= 300.000000)
                                  @ 6  jdk.internal.util.Preconditions.checkFromIndexSize(int, int, int, BiFunction):int (25 bytes)   relevance-based (relevance=0.889864, probability=0.888564, bonus=1.000000, nodes=12 <= 266.959130)
                            @ 13  java.util.Arrays.copyOfRangeByte(byte[], int, int):byte[] (33 bytes)   inline method (bytecode parsing)
                              @ 2  java.util.Arrays.checkLength(int, int):void (38 bytes)   inline method (bytecode parsing)
                                                            @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.007048, bonus=1.000000, nodes=5)
                                                          @ 1  java.lang.String.length():int (11 bytes)   trivial (relevance=1.813220, probability=0.007048, bonus=1.000000, nodes=8)
                                    @ 24  java.lang.Math.min(int, int):int (11 bytes)   trivial (relevance=0.889873, probability=0.640704, bonus=1.000000, nodes=7)
                                  @ 55  java.util.Arrays.copyOfRange(byte[], int, int):byte[] (25 bytes)   relevance-based (relevance=0.889864, probability=0.888564, bonus=1.000000, nodes=33 <= 266.959130)
                                @ 16  java.lang.String.<init>(byte[], int, int, int):void (128 bytes)   relevance-based (relevance=0.889864, probability=0.888564, bonus=1.000000, nodes=52 <= 266.959130)
                                                            @ 6  jdk.internal.util.Preconditions.checkFromToIndex(int, int, int, BiFunction):int (24 bytes)   relevance-based (relevance=1.000000, probability=0.007048, bonus=1.000000, nodes=11 <= 300.000000)
                                                          @ 8  java.lang.String.checkBoundsBeginEnd(int, int, int):void (11 bytes)   relevance-based (relevance=1.813220, probability=0.007048, bonus=1.000000, nodes=10 <= 300.000000)
                              @ 41  jdk.internal.math.DoubleToDecimal.charsToString():String (20 bytes)   relevance-based (relevance=0.889864, probability=0.888564, bonus=1.000000, nodes=57 <= 266.959130)
                                                          @ 28  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000075, probability=0.003887, bonus=1.000000, nodes=9)
                            @ 20  java.lang.String.<init>(byte[], byte):void (15 bytes)   inline method (bytecode parsing)
                            @ 13  java.util.Arrays.copyOfRangeByte(byte[], int, int):byte[] (33 bytes)   inline method (bytecode parsing)
                              @ 2  java.util.Arrays.checkLength(int, int):void (38 bytes)   inline method (bytecode parsing)
                                                              @ 24  java.lang.Math.min(int, int):int (11 bytes)   trivial (relevance=1.000010, probability=0.002802, bonus=1.000000, nodes=7)
                                                            @ 16  java.util.Arrays.copyOfRange(byte[], int, int):byte[] (25 bytes)   relevance-based (relevance=1.000000, probability=0.003886, bonus=1.000000, nodes=33 <= 300.000000)
                                                          @ 41  java.lang.StringLatin1.newString(byte[], int, int):String (24 bytes)   relevance-based (relevance=1.000000, probability=0.003887, bonus=1.000000, nodes=51 <= 300.000000)
                            @ 31  java.lang.String.<init>(byte[], byte):void (15 bytes)   inline method (bytecode parsing)
                            @ 54  java.lang.String.<init>(byte[], byte):void (15 bytes)   inline method (bytecode parsing)
                                                          @ 54  java.lang.StringUTF16.newString(byte[], int, int):String (58 bytes)   not inlining relevance-based (relevance=0.000104, probability=0.000000, bonus=1.000000, nodes=38 > 0.031156)
                                                        @ 62  java.lang.String.substring(int, int):String (58 bytes)   relevance-based (relevance=1.187477, probability=0.007048, bonus=1.000000, nodes=78 <= 300.000000)
                 n                                    @ 65  java.lang.String.intern():String (0 bytes)   not inlining it is a non-intrinsic native method
                                                      @ 13  java.lang.Class.getPackageName():String (81 bytes)   relevance-based (relevance=1.000000, probability=0.012377, bonus=1.000000, nodes=162 <= 300.000000)
                            @ 1  java.util.Objects.requireNonNull(Object):Object (14 bytes)   inline method (bytecode parsing)
                            @ 6  java.util.Objects.requireNonNull(Object):Object (14 bytes)   inline method (bytecode parsing)
                            @ 36  java.lang.module.ModuleDescriptor.isOpen():boolean (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  java.lang.module.ModuleDescriptor.isAutomatic():boolean (5 bytes)   inline accessor method (bytecode parsing)
                                                          @ 1  java.lang.Module.isNamed():boolean (13 bytes)   trivial (relevance=1.070311, probability=0.012377, bonus=1.000000, nodes=9)
                                                                    @ 17  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=0.015302, probability=0.000174, bonus=1.000000, nodes=9)
                                                                    @ 27  java.lang.StringLatin1.hashCode(byte[]):int (52 bytes)   not inlining relevance-based (relevance=0.015294, probability=0.000173, bonus=1.000000, nodes=22 > 4.588326)
                                                                    @ 37  java.lang.StringUTF16.hashCode(byte[]):int (52 bytes)   not inlining relevance-based (relevance=0.000008, probability=0.000000, bonus=1.000000, nodes=23 > 0.002314)
                                                                  @ 9  java.lang.String.hashCode():int (60 bytes)   relevance-based (relevance=1.000000, probability=0.011516, bonus=1.000000, nodes=48 <= 300.000000)
                                                                @ 23  java.util.HashMap.hash(Object):int (20 bytes)   relevance-based (relevance=1.539847, probability=0.011516, bonus=1.000000, nodes=56 <= 300.000000)
                                                                @ 95  java.util.HashMap$TreeNode.getTreeNode(int, Object):HashMap$TreeNode (22 bytes)   not inlining relevance-based (relevance=0.000710, probability=0.000008, bonus=1.000000, nodes=23 > 0.212883)
                                                                @ 63  java.lang.String.equals(Object):boolean (56 bytes)   relevance-based (relevance=0.659378, probability=0.007479, bonus=1.000000, nodes=50 <= 197.813476)
                                                                @ 128  java.lang.String.equals(Object):boolean (56 bytes)   relevance-based (relevance=0.245286, probability=0.002595, bonus=1.000000, nodes=50 <= 73.585732)
                                                              @ 2  java.util.HashMap.getNode(Object):HashMap$Node (150 bytes)   relevance-based (relevance=1.133161, probability=0.012318, bonus=1.000000, nodes=241 <= 300.000000)
                                                            @ 51  java.util.HashMap.get(Object):Object (19 bytes)   relevance-based (relevance=1.000000, probability=0.012318, bonus=1.000000, nodes=246 <= 300.000000)
                                                            @ 8  java.util.Set.contains(Object):boolean (0 bytes)   not inlining no type profile exists
                                                            @ 27  java.util.Set.contains(Object):boolean (0 bytes)   not inlining no type profile exists
                                                              @ 38  java.lang.Module.isNamed():boolean (13 bytes)   trivial (relevance=2.000000, probability=0.000770, bonus=1.000000, nodes=9)
                                                            @ 48  java.util.Set.contains(Object):boolean (0 bytes)   not inlining no type profile exists
                                                            @ 60  java.lang.Module.allows(Set, Module):boolean (60 bytes)   relevance-based (relevance=1.086093, probability=0.012318, bonus=1.000000, nodes=47 <= 300.000000)
                                                          @ 70  java.lang.Module.isStaticallyExportedOrOpen(String, Module, boolean):boolean (70 bytes)   not inlining relevance-based (relevance=1.070311, probability=0.012377, bonus=1.000000, nodes=316 > 300.000000)
                            @ 7  java.lang.WeakPairMap.get(Object, Object):Object (17 bytes)   inline method (bytecode parsing)
                              @ 10  java.lang.WeakPairMap$Pair.lookup(Object, Object):WeakPairMap$Pair (10 bytes)   inline method (bytecode parsing)
                            @ 68  java.lang.WeakPairMap.get(Object, Object):Object (17 bytes)   inline method (bytecode parsing)
                              @ 10  java.lang.WeakPairMap$Pair.lookup(Object, Object):WeakPairMap$Pair (10 bytes)   inline method (bytecode parsing)
                            @ 131  java.lang.WeakPairMap.get(Object, Object):Object (17 bytes)   inline method (bytecode parsing)
                              @ 10  java.lang.WeakPairMap$Pair.lookup(Object, Object):WeakPairMap$Pair (10 bytes)   inline method (bytecode parsing)
                            @ 13  java.util.concurrent.locks.ReentrantLock.lock():void (8 bytes)   inline method (bytecode parsing)
                            @ 25  java.util.concurrent.locks.ReentrantLock.unlock():void (10 bytes)   inline method (bytecode parsing)
                              @ 5  java.util.concurrent.locks.AbstractQueuedSynchronizer.release(int):boolean (19 bytes)   inline method (bytecode parsing)
                                                                @ 1  java.lang.ref.ReferenceQueue.headIsNull():boolean (13 bytes)   relevance-based (relevance=1.000600, probability=0.011564, bonus=1.000000, nodes=11 <= 300.000000)
                            @ 9  java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(int):void (20 bytes)   inline method (bytecode parsing)
                                                                @ 4  java.util.concurrent.locks.ReentrantLock$Sync.lock():void (13 bytes)   not inlining relevance-based (relevance=0.000600, probability=0.000007, bonus=1.000000, nodes=31 > 0.179933)
                                                                @ 17  java.lang.ref.ReferenceQueue.poll0():Reference (65 bytes)   not inlining relevance-based (relevance=0.000600, probability=0.000007, bonus=1.000000, nodes=41 > 0.179933)
                            @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 8  java.util.concurrent.locks.AbstractOwnableSynchronizer.getExclusiveOwnerThread():Thread (5 bytes)   inline accessor method (bytecode parsing)
                            @ 41  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                            @ 46  java.util.concurrent.locks.AbstractQueuedSynchronizer.setState(int):void (6 bytes)   inline method (bytecode parsing)
                                                                @ 2  java.util.concurrent.locks.ReentrantLock$Sync.tryRelease(int):boolean (51 bytes)   not inlining relevance-based (relevance=0.000600, probability=0.000007, bonus=1.000000, nodes=37 > 0.179933)
                            @ 22  java.util.concurrent.locks.AbstractQueuedSynchronizer$Node.getAndUnsetStatus(int):int (14 bytes)   inline method (bytecode parsing)
                              @ 10  jdk.internal.misc.Unsafe.getAndBitwiseAndInt(Object, long, int):int (27 bytes)   inline method (bytecode parsing)
                                                                @ 12  java.util.concurrent.locks.AbstractQueuedSynchronizer.signalNext(AbstractQueuedSynchronizer$Node):void (34 bytes)   not inlining relevance-based (relevance=0.000542, probability=0.000006, bonus=1.000000, nodes=56 > 0.162528)
                                                              @ 4  java.lang.ref.ReferenceQueue.poll():Reference (40 bytes)   relevance-based (relevance=1.000000, probability=0.011564, bonus=1.000000, nodes=46 <= 300.000000)
                                                            @ 1  java.lang.WeakPairMap.expungeStaleAssociations():void (31 bytes)   relevance-based (relevance=1.003240, probability=0.011564, bonus=1.000000, nodes=53 <= 300.000000)
                            @ 6  java.util.Objects.requireNonNull(Object):Object (14 bytes)   inline method (bytecode parsing)
                            @ 14  java.util.Objects.requireNonNull(Object):Object (14 bytes)   inline method (bytecode parsing)
                                                            @ 6  java.lang.WeakPairMap$Pair$Lookup.<init>(Object, Object):void (21 bytes)   relevance-based (relevance=1.000600, probability=0.011564, bonus=1.000000, nodes=11 <= 300.000000)
                            @ 4  java.util.concurrent.ConcurrentHashMap.spread(int):int (10 bytes)   inline method (bytecode parsing)
                            @ 8  java.lang.WeakPairMap$Pair.hashCode(Object, Object):int (10 bytes)   inline method (bytecode parsing)
                                                              @ 1  java.lang.WeakPairMap$Pair$Lookup.hashCode():int (12 bytes)   relevance-based (relevance=3.983570, probability=0.011564, bonus=1.000000, nodes=12 <= 300.000000)
                                                              @ 34  java.util.concurrent.ConcurrentHashMap.tabAt(ConcurrentHashMap$Node[], int):ConcurrentHashMap$Node (22 bytes)   relevance-based (relevance=3.972292, probability=0.011531, bonus=1.000000, nodes=11 <= 300.000000)
                            @ 1  java.lang.ref.Reference.get():Object (5 bytes)   inline accessor method (bytecode parsing)
                                                                  @ 10  java.lang.WeakPairMap$Pair$Weak.first():Object (5 bytes)   trivial (relevance=1.002495, probability=0.002903, bonus=1.000000, nodes=6)
                            @ 4  java.lang.ref.Reference.get():Object (5 bytes)   inline accessor method (bytecode parsing)
                                                                  @ 20  java.lang.WeakPairMap$Pair$Weak.second():Object (8 bytes)   relevance-based (relevance=1.000000, probability=0.002896, bonus=1.000000, nodes=10 <= 300.000000)
                                                                @ 19  java.lang.WeakPairMap$Pair.equals(Object, Object, WeakPairMap$Pair):boolean (34 bytes)   relevance-based (relevance=1.000000, probability=0.002903, bonus=1.000000, nodes=31 <= 300.000000)
                                                              @ 73  java.lang.WeakPairMap$Pair$Lookup.equals(Object):boolean (31 bytes)   relevance-based (relevance=1.000194, probability=0.002903, bonus=1.000000, nodes=40 <= 300.000000)
                            @ 1  java.lang.ref.Reference.get():Object (5 bytes)   inline accessor method (bytecode parsing)
                                                                  @ 10  java.lang.WeakPairMap$Pair$Weak.first():Object (5 bytes)   trivial (relevance=0.286660, probability=0.000488, bonus=1.000000, nodes=6)
                            @ 4  java.lang.ref.Reference.get():Object (5 bytes)   inline accessor method (bytecode parsing)
                                                                  @ 20  java.lang.WeakPairMap$Pair$Weak.second():Object (8 bytes)   relevance-based (relevance=0.285946, probability=0.000487, bonus=1.000000, nodes=10 <= 85.783856)
                                                                @ 19  java.lang.WeakPairMap$Pair.equals(Object, Object, WeakPairMap$Pair):boolean (34 bytes)   relevance-based (relevance=0.285946, probability=0.000488, bonus=1.000000, nodes=31 <= 85.783856)
                                                              @ 149  java.lang.WeakPairMap$Pair$Lookup.equals(Object):boolean (31 bytes)   relevance-based (relevance=0.285946, probability=0.000488, bonus=1.000000, nodes=40 <= 85.783856)
                                                            @ 13  java.util.concurrent.ConcurrentHashMap.get(Object):Object (162 bytes)   relevance-based (relevance=1.000600, probability=0.011564, bonus=1.000000, nodes=176 <= 300.000000)
                                                          @ 82  java.lang.Module.isReflectivelyExportedOrOpen(String, Module, boolean):boolean (182 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.011564, bonus=1.000000, nodes=330 > 300.000000)
                                                        @ 14  java.lang.Module.implIsExportedOrOpen(String, Module, boolean):boolean (92 bytes)   relevance-based (relevance=1.000000, probability=0.012377, bonus=1.000000, nodes=36 <= 300.000000)
                                                      @ 20  java.lang.Module.isExported(String, Module):boolean (18 bytes)   relevance-based (relevance=2.085291, probability=0.012377, bonus=1.000000, nodes=45 <= 300.000000)
                                                    @ 22  jdk.internal.reflect.Reflection.verifyModuleAccess(Module, Class):boolean (24 bytes)   relevance-based (relevance=8.000000, probability=0.024754, bonus=1.000000, nodes=212 <= 300.000000)
                                                  @ 24  jdk.internal.reflect.Reflection.verifyMemberAccess(Class, Class, Class, int):boolean (200 bytes)   not inlining relevance-based (relevance=2.000000, probability=0.024754, bonus=1.000000, nodes=321 > 300.000000)
                                                  @ 3  java.lang.AbstractStringBuilder.<init>(int):void (39 bytes)   relevance-based (relevance=1.000000, probability=0.012377, bonus=1.000000, nodes=11 <= 300.000000)
                                                  @ 2  java.lang.AbstractStringBuilder.append(String):AbstractStringBuilder (45 bytes)   not inlining too large previous low-level graph (low-level-nodes: 368, relevance=1.000000, probability=0.012377, bonus=1.000000, nodes=21)
                            @ 11  java.lang.StringBuilder.<init>():void (7 bytes)   inline method (bytecode parsing)
                            @ 16  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 23  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 26  java.lang.StringBuilder.toString():String (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.String.<init>(StringBuilder):void (7 bytes)   inline method (bytecode parsing)
                            @ 34  java.lang.Integer.toHexString(int):String (6 bytes)   inline method (bytecode parsing)
                            @ 42  java.lang.StringBuilder.<init>():void (7 bytes)   inline method (bytecode parsing)
                            @ 48  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 52  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 55  java.lang.StringBuilder.toString():String (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.String.<init>(StringBuilder):void (7 bytes)   inline method (bytecode parsing)
                                                      @ 1  java.lang.Module.isNamed():boolean (13 bytes)   trivial (relevance=2.000000, probability=0.012377, bonus=1.000000, nodes=9)
                                                      @ 3  java.lang.AbstractStringBuilder.<init>(int):void (39 bytes)   relevance-based (relevance=1.000000, probability=0.006188, bonus=1.000000, nodes=11 <= 300.000000)
                                                      @ 2  java.lang.AbstractStringBuilder.append(String):AbstractStringBuilder (45 bytes)   not inlining too large previous low-level graph (low-level-nodes: 368, relevance=1.000000, probability=0.006188, bonus=1.000000, nodes=21)
                                                      @ 2  java.lang.AbstractStringBuilder.append(String):AbstractStringBuilder (45 bytes)   not inlining too large previous low-level graph (low-level-nodes: 368, relevance=1.000000, probability=0.006188, bonus=1.000000, nodes=23)
                            @ 5  java.lang.AbstractStringBuilder.getValue():byte[] (5 bytes)   inline accessor method (bytecode parsing)
                                                      @ 3  java.lang.String.<init>(AbstractStringBuilder, Void):void (99 bytes)   not inlining too large previous low-level graph (low-level-nodes: 376, relevance=1.000000, probability=0.006188, bonus=1.000000, nodes=41)
                            @ 16  java.lang.Math.max(int, int):int (11 bytes)   inline method (bytecode parsing)
                            @ 46  java.lang.String.<init>(byte[], byte):void (15 bytes)   inline method (bytecode parsing)
                                                        @ 36  java.lang.Integer.formatUnsignedInt(int, int, byte[], int):void (40 bytes)   relevance-based (relevance=1.000000, probability=0.006188, bonus=1.000000, nodes=30 <= 300.000000)
                                                      @ 2  java.lang.Integer.toUnsignedString0(int, int):String (76 bytes)   relevance-based (relevance=1.000000, probability=0.006188, bonus=1.000000, nodes=46 <= 300.000000)
                                                      @ 3  java.lang.AbstractStringBuilder.<init>(int):void (39 bytes)   relevance-based (relevance=1.000000, probability=0.006188, bonus=1.000000, nodes=11 <= 300.000000)
                                                      @ 2  java.lang.AbstractStringBuilder.append(String):AbstractStringBuilder (45 bytes)   not inlining too large previous low-level graph (low-level-nodes: 368, relevance=1.000000, probability=0.006188, bonus=1.000000, nodes=21)
                                                      @ 2  java.lang.AbstractStringBuilder.append(String):AbstractStringBuilder (45 bytes)   not inlining too large previous low-level graph (low-level-nodes: 368, relevance=1.000000, probability=0.006188, bonus=1.000000, nodes=21)
                            @ 5  java.lang.AbstractStringBuilder.getValue():byte[] (5 bytes)   inline accessor method (bytecode parsing)
                                                      @ 3  java.lang.String.<init>(AbstractStringBuilder, Void):void (99 bytes)   not inlining too large previous low-level graph (low-level-nodes: 376, relevance=1.000000, probability=0.006188, bonus=1.000000, nodes=41)
                                                    @ 11  java.lang.Module.toString():String (59 bytes)   relevance-based (relevance=1.000000, probability=0.012377, bonus=1.000000, nodes=105 <= 300.000000)
                                                  @ 2  java.lang.String.valueOf(Object):String (15 bytes)   relevance-based (relevance=1.000000, probability=0.012377, bonus=1.000000, nodes=118 <= 300.000000)
                                                  @ 2  java.lang.AbstractStringBuilder.append(String):AbstractStringBuilder (45 bytes)   not inlining too large previous low-level graph (low-level-nodes: 368, relevance=2.000056, probability=0.012377, bonus=1.000000, nodes=21)
                            @ 5  java.lang.AbstractStringBuilder.getValue():byte[] (5 bytes)   inline accessor method (bytecode parsing)
                                                  @ 3  java.lang.String.<init>(AbstractStringBuilder, Void):void (99 bytes)   not inlining too large previous low-level graph (low-level-nodes: 376, relevance=2.000056, probability=0.012377, bonus=1.000000, nodes=41)
                            @ 8  java.lang.StringBuilder.<init>():void (7 bytes)   inline method (bytecode parsing)
                            @ 15  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 20  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 24  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 27  java.lang.StringBuilder.toString():String (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.String.<init>(StringBuilder):void (7 bytes)   inline method (bytecode parsing)
                                                    @ 3  java.lang.AbstractStringBuilder.<init>(int):void (39 bytes)   relevance-based (relevance=1.000000, probability=0.012377, bonus=1.000000, nodes=11 <= 300.000000)
                 n                                  @ 14  java.lang.Class.initClassName():String (0 bytes)   not inlining it is a non-intrinsic native method
                                                    @ 12  java.lang.Class.getName():String (18 bytes)   relevance-based (relevance=1.000000, probability=0.012377, bonus=1.000000, nodes=17 <= 300.000000)
                                                    @ 2  java.lang.AbstractStringBuilder.append(String):AbstractStringBuilder (45 bytes)   not inlining too large previous low-level graph (low-level-nodes: 368, relevance=1.194078, probability=0.012377, bonus=1.000000, nodes=23)
                                                    @ 2  java.lang.AbstractStringBuilder.append(String):AbstractStringBuilder (45 bytes)   not inlining too large previous low-level graph (low-level-nodes: 368, relevance=1.194078, probability=0.012377, bonus=1.000000, nodes=21)
                                                    @ 2  java.lang.AbstractStringBuilder.append(String):AbstractStringBuilder (45 bytes)   not inlining too large previous low-level graph (low-level-nodes: 368, relevance=1.194078, probability=0.012377, bonus=1.000000, nodes=21)
                            @ 5  java.lang.AbstractStringBuilder.getValue():byte[] (5 bytes)   inline accessor method (bytecode parsing)
                                                    @ 3  java.lang.String.<init>(AbstractStringBuilder, Void):void (99 bytes)   not inlining too large previous low-level graph (low-level-nodes: 376, relevance=1.194078, probability=0.012377, bonus=1.000000, nodes=41)
                                                  @ 50  java.util.ServiceLoader.fail(Class, String):void (34 bytes)   relevance-based (relevance=2.000056, probability=0.012377, bonus=1.000000, nodes=52 <= 300.000000)
                            @ 1  java.util.Objects.requireNonNull(Object):Object (14 bytes)   inline method (bytecode parsing)
                            @ 18  java.lang.module.ModuleDescriptor.isAutomatic():boolean (5 bytes)   inline accessor method (bytecode parsing)
                            @ 30  java.lang.module.ModuleDescriptor.uses():Set (5 bytes)   inline accessor method (bytecode parsing)
                            @ 52  java.lang.WeakPairMap.containsKeyPair(Object, Object):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 10  java.lang.WeakPairMap$Pair.lookup(Object, Object):WeakPairMap$Pair (10 bytes)   inline method (bytecode parsing)
                              @ 13  java.util.concurrent.ConcurrentHashMap.containsKey(Object):boolean (14 bytes)   inline method (bytecode parsing)
                                                    @ 6  java.lang.Module.isNamed():boolean (13 bytes)   trivial (relevance=8.000000, probability=0.012377, bonus=1.000000, nodes=9)
                 n                                  @ 14  java.lang.Class.initClassName():String (0 bytes)   not inlining it is a non-intrinsic native method
                                                    @ 34  java.lang.Class.getName():String (18 bytes)   relevance-based (relevance=2.000000, probability=0.003094, bonus=1.000000, nodes=17 <= 300.000000)
                                                  @ 37  java.util.Set.contains(Object):boolean (0 bytes)   not inlining no type profile exists
                            @ 13  java.util.concurrent.locks.ReentrantLock.lock():void (8 bytes)   inline method (bytecode parsing)
                            @ 25  java.util.concurrent.locks.ReentrantLock.unlock():void (10 bytes)   inline method (bytecode parsing)
                              @ 5  java.util.concurrent.locks.AbstractQueuedSynchronizer.release(int):boolean (19 bytes)   inline method (bytecode parsing)
                                                        @ 1  java.lang.ref.ReferenceQueue.headIsNull():boolean (13 bytes)   relevance-based (relevance=0.597397, probability=0.001547, bonus=1.000000, nodes=11 <= 179.219161)
                            @ 9  java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(int):void (20 bytes)   inline method (bytecode parsing)
                                                        @ 4  java.util.concurrent.locks.ReentrantLock$Sync.lock():void (13 bytes)   not inlining relevance-based (relevance=0.000358, probability=0.000001, bonus=1.000000, nodes=31 > 0.107427)
                                                        @ 17  java.lang.ref.ReferenceQueue.poll0():Reference (65 bytes)   not inlining relevance-based (relevance=0.000358, probability=0.000001, bonus=1.000000, nodes=41 > 0.107427)
                            @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 8  java.util.concurrent.locks.AbstractOwnableSynchronizer.getExclusiveOwnerThread():Thread (5 bytes)   inline accessor method (bytecode parsing)
                            @ 41  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                            @ 46  java.util.concurrent.locks.AbstractQueuedSynchronizer.setState(int):void (6 bytes)   inline method (bytecode parsing)
                                                        @ 2  java.util.concurrent.locks.ReentrantLock$Sync.tryRelease(int):boolean (51 bytes)   not inlining relevance-based (relevance=0.000358, probability=0.000001, bonus=1.000000, nodes=37 > 0.107427)
                            @ 22  java.util.concurrent.locks.AbstractQueuedSynchronizer$Node.getAndUnsetStatus(int):int (14 bytes)   inline method (bytecode parsing)
                              @ 10  jdk.internal.misc.Unsafe.getAndBitwiseAndInt(Object, long, int):int (27 bytes)   inline method (bytecode parsing)
                                                        @ 12  java.util.concurrent.locks.AbstractQueuedSynchronizer.signalNext(AbstractQueuedSynchronizer$Node):void (34 bytes)   not inlining relevance-based (relevance=0.000323, probability=0.000001, bonus=1.000000, nodes=56 > 0.097036)
                                                      @ 4  java.lang.ref.ReferenceQueue.poll():Reference (40 bytes)   relevance-based (relevance=0.597039, probability=0.001547, bonus=1.000000, nodes=46 <= 179.111734)
                                                    @ 1  java.lang.WeakPairMap.expungeStaleAssociations():void (31 bytes)   relevance-based (relevance=0.597039, probability=0.001547, bonus=1.000000, nodes=53 <= 179.111734)
                            @ 6  java.util.Objects.requireNonNull(Object):Object (14 bytes)   inline method (bytecode parsing)
                            @ 14  java.util.Objects.requireNonNull(Object):Object (14 bytes)   inline method (bytecode parsing)
                                                    @ 6  java.lang.WeakPairMap$Pair$Lookup.<init>(Object, Object):void (21 bytes)   relevance-based (relevance=0.597039, probability=0.001547, bonus=1.000000, nodes=11 <= 179.111734)
                            @ 4  java.util.concurrent.ConcurrentHashMap.spread(int):int (10 bytes)   inline method (bytecode parsing)
                            @ 8  java.lang.WeakPairMap$Pair.hashCode(Object, Object):int (10 bytes)   inline method (bytecode parsing)
                                                      @ 1  java.lang.WeakPairMap$Pair$Lookup.hashCode():int (12 bytes)   relevance-based (relevance=2.378347, probability=0.001547, bonus=1.000000, nodes=12 <= 300.000000)
                                                      @ 34  java.util.concurrent.ConcurrentHashMap.tabAt(ConcurrentHashMap$Node[], int):ConcurrentHashMap$Node (22 bytes)   relevance-based (relevance=2.371614, probability=0.001543, bonus=1.000000, nodes=11 <= 300.000000)
                            @ 1  java.lang.ref.Reference.get():Object (5 bytes)   inline accessor method (bytecode parsing)
                                                          @ 10  java.lang.WeakPairMap$Pair$Weak.first():Object (5 bytes)   trivial (relevance=0.598645, probability=0.000388, bonus=1.000000, nodes=6)
                            @ 4  java.lang.ref.Reference.get():Object (5 bytes)   inline accessor method (bytecode parsing)
                                                          @ 20  java.lang.WeakPairMap$Pair$Weak.second():Object (8 bytes)   relevance-based (relevance=0.597155, probability=0.000387, bonus=1.000000, nodes=10 <= 179.146560)
                                                        @ 19  java.lang.WeakPairMap$Pair.equals(Object, Object, WeakPairMap$Pair):boolean (34 bytes)   relevance-based (relevance=0.597155, probability=0.000388, bonus=1.000000, nodes=31 <= 179.146560)
                                                      @ 73  java.lang.WeakPairMap$Pair$Lookup.equals(Object):boolean (31 bytes)   relevance-based (relevance=0.597155, probability=0.000388, bonus=1.000000, nodes=40 <= 179.146560)
                            @ 1  java.lang.ref.Reference.get():Object (5 bytes)   inline accessor method (bytecode parsing)
                                                          @ 10  java.lang.WeakPairMap$Pair$Weak.first():Object (5 bytes)   trivial (relevance=0.171147, probability=0.000065, bonus=1.000000, nodes=6)
                            @ 4  java.lang.ref.Reference.get():Object (5 bytes)   inline accessor method (bytecode parsing)
                                                          @ 20  java.lang.WeakPairMap$Pair$Weak.second():Object (8 bytes)   relevance-based (relevance=0.170721, probability=0.000065, bonus=1.000000, nodes=10 <= 51.216317)
                                                        @ 19  java.lang.WeakPairMap$Pair.equals(Object, Object, WeakPairMap$Pair):boolean (34 bytes)   relevance-based (relevance=0.170721, probability=0.000065, bonus=1.000000, nodes=31 <= 51.216317)
                                                      @ 149  java.lang.WeakPairMap$Pair$Lookup.equals(Object):boolean (31 bytes)   relevance-based (relevance=0.170721, probability=0.000065, bonus=1.000000, nodes=40 <= 51.216317)
                                                    @ 2  java.util.concurrent.ConcurrentHashMap.get(Object):Object (162 bytes)   relevance-based (relevance=0.597039, probability=0.001547, bonus=1.000000, nodes=176 <= 179.111734)
                                                  @ 55  java.lang.Module.canUse(Class):boolean (56 bytes)   relevance-based (relevance=2.000056, probability=0.012377, bonus=1.000000, nodes=280 <= 300.000000)
                                                @ 39  java.util.ServiceLoader.checkCaller(Class, Class):void (85 bytes)   not inlining relevance-based (relevance=4.000000, probability=0.024754, bonus=1.000000, nodes=510 > 300.000000)
                            @ 0  jdk.internal.misc.VM.initLevel():int (4 bytes)   inline method (bytecode parsing)
                            @ 45  java.lang.IllegalStateException.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  java.lang.RuntimeException.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                                @ 2  java.lang.Exception.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                            @ 32  java.lang.ClassLoader.getBuiltinAppClassLoader():ClassLoader (4 bytes)   inline method (bytecode parsing)
                              @ 0  jdk.internal.loader.ClassLoaders.appClassLoader():ClassLoader (4 bytes)   inline method (bytecode parsing)
                                                    @ 0  java.lang.System.allowSecurityManager():boolean (13 bytes)   trivial (relevance=0.333584, probability=0.001238, bonus=1.000000, nodes=8)
                                                  @ 75  java.lang.System.getSecurityManager():SecurityManager (12 bytes)   relevance-based (relevance=0.333333, probability=0.001238, bonus=1.000000, nodes=14 <= 100.000000)
                                                      @ 0  java.lang.System.allowSecurityManager():boolean (13 bytes)   trivial (relevance=0.333581, probability=0.000619, bonus=1.000000, nodes=8)
                                                    @ 0  java.lang.System.getSecurityManager():SecurityManager (12 bytes)   relevance-based (relevance=0.333330, probability=0.000619, bonus=1.000000, nodes=14 <= 99.999000)
                            @ 7  java.lang.Class.getClassLoader0():ClassLoader (5 bytes)   inline accessor method (bytecode parsing)
                                                    @ 9  java.lang.ClassLoader.getClassLoader(Class):ClassLoader (11 bytes)   relevance-based (relevance=0.083395, probability=0.000309, bonus=1.000000, nodes=13 <= 25.018554)
                                                  @ 89  java.lang.ClassLoader.checkClassLoaderPermission(ClassLoader, Class):void (29 bytes)   not inlining relevance-based (relevance=0.166665, probability=0.000619, bonus=1.000000, nodes=50 > 49.999500)
                 n                                  @ 16  java.lang.Throwable.fillInStackTrace(int):Throwable (0 bytes)   not inlining it is a non-intrinsic native method
              s                                     @ 24  java.lang.Throwable.fillInStackTrace():Throwable (29 bytes)   relevance-based (relevance=0.333333, probability=0.001238, bonus=1.000000, nodes=34 <= 100.000000)
                                                  @ 2  java.lang.Throwable.<init>(String):void (34 bytes)   relevance-based (relevance=0.333333, probability=0.001238, bonus=1.000000, nodes=45 <= 100.000000)
                                                @ 46  java.lang.ClassLoader.getSystemClassLoader():ClassLoader (96 bytes)   relevance-based (relevance=1.000000, probability=0.006189, bonus=1.000000, nodes=103 <= 300.000000)
                 n                              @ 14  java.lang.Class.initClassName():String (0 bytes)   not inlining it is a non-intrinsic native method
                                                @ 124  java.lang.Class.getName():String (18 bytes)   relevance-based (relevance=4.666667, probability=0.017328, bonus=1.000000, nodes=17 <= 300.000000)
                                                  @ 0  java.lang.System.allowSecurityManager():boolean (13 bytes)   trivial (relevance=1.000752, probability=0.017328, bonus=1.000000, nodes=8)
                                                @ 141  java.lang.System.getSecurityManager():SecurityManager (12 bytes)   relevance-based (relevance=4.666667, probability=0.017328, bonus=1.000000, nodes=14 <= 300.000000)
                            @ 14  java.security.AccessControlContext.<init>(ProtectionDomain[], boolean):void (30 bytes)   inline method (bytecode parsing)
                 n                              @ 0  java.security.AccessController.getStackAccessControlContext():AccessControlContext (0 bytes)   not inlining it is a non-intrinsic native method
                 n                                @ 44  java.security.AccessController.getInheritedAccessControlContext():AccessControlContext (0 bytes)   not inlining it is a non-intrinsic native method
                                                    @ 141  java.security.AccessControlContext.getDebug():Debug (32 bytes)   relevance-based (relevance=2.000000, probability=0.001083, bonus=1.000000, nodes=11 <= 300.000000)
                            @ 7  java.lang.StringBuilder.<init>():void (7 bytes)   inline method (bytecode parsing)
                            @ 14  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 19  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 23  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 26  java.lang.StringBuilder.toString():String (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.String.<init>(StringBuilder):void (7 bytes)   inline method (bytecode parsing)
                                                      @ 3  java.lang.AbstractStringBuilder.<init>(int):void (39 bytes)   relevance-based (relevance=1.000000, probability=0.000541, bonus=1.000000, nodes=11 <= 300.000000)
                                                      @ 2  java.lang.AbstractStringBuilder.append(String):AbstractStringBuilder (45 bytes)   not inlining too large previous low-level graph (low-level-nodes: 368, relevance=1.000000, probability=0.000541, bonus=1.000000, nodes=23)
                                                      @ 2  java.lang.AbstractStringBuilder.append(String):AbstractStringBuilder (45 bytes)   not inlining too large previous low-level graph (low-level-nodes: 368, relevance=1.000000, probability=0.000541, bonus=1.000000, nodes=21)
                                                      @ 2  java.lang.AbstractStringBuilder.append(String):AbstractStringBuilder (45 bytes)   not inlining too large previous low-level graph (low-level-nodes: 368, relevance=1.000000, probability=0.000541, bonus=1.000000, nodes=21)
                            @ 5  java.lang.AbstractStringBuilder.getValue():byte[] (5 bytes)   inline accessor method (bytecode parsing)
                                                      @ 3  java.lang.String.<init>(AbstractStringBuilder, Void):void (99 bytes)   not inlining too large previous low-level graph (low-level-nodes: 376, relevance=1.000000, probability=0.000541, bonus=1.000000, nodes=41)
                                                          @ 11  java.lang.String.toString():String (2 bytes)   trivial (relevance=1.000000, probability=0.000541, bonus=1.000000, nodes=4)
                                                        @ 11  java.lang.String.valueOf(Object):String (15 bytes)   trivial (relevance=1.000000, probability=0.000541, bonus=1.000000, nodes=4)
                            @ 11  jdk.internal.misc.InternalLock.lock():void (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.util.concurrent.locks.ReentrantLock.lock():void (8 bytes)   inline method (bytecode parsing)
                            @ 23  jdk.internal.misc.InternalLock.unlock():void (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.util.concurrent.locks.ReentrantLock.unlock():void (10 bytes)   inline method (bytecode parsing)
                                @ 5  java.util.concurrent.locks.AbstractQueuedSynchronizer.release(int):boolean (19 bytes)   inline method (bytecode parsing)
                            @ 9  java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(int):void (20 bytes)   inline method (bytecode parsing)
                            @ 7  java.util.concurrent.locks.AbstractQueuedSynchronizer.compareAndSetState(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 15  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                            @ 21  java.util.concurrent.locks.AbstractOwnableSynchronizer.getExclusiveOwnerThread():Thread (5 bytes)   inline accessor method (bytecode parsing)
                            @ 29  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 51  java.util.concurrent.locks.AbstractQueuedSynchronizer.setState(int):void (6 bytes)   inline method (bytecode parsing)
                                                            @ 1  java.util.concurrent.locks.ReentrantLock$NonfairSync.initialTryLock():boolean (58 bytes)   relevance-based (relevance=1.020999, probability=0.000271, bonus=1.000000, nodes=40 <= 300.000000)
                            @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 10  java.util.concurrent.locks.AbstractQueuedSynchronizer.compareAndSetState(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 20  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                                                            @ 2  java.util.concurrent.locks.ReentrantLock$NonfairSync.tryAcquire(int):boolean (27 bytes)   not inlining relevance-based (relevance=0.043772, probability=0.000010, bonus=1.000000, nodes=36 > 13.131676)
                            @ 245  java.util.concurrent.locks.AbstractQueuedSynchronizer$ExclusiveNode.<init>():void (5 bytes)   inline method (bytecode parsing)
                              @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer$Node.<init>():void (5 bytes)   inline method (bytecode parsing)
                            @ 393  java.lang.Thread.interrupted():boolean (7 bytes)   inline method (bytecode parsing)
                                                            @ 15  java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer$Node, int, boolean, boolean, boolean, long):int (424 bytes)   not inlining relevance-based (relevance=0.033955, probability=0.000008, bonus=1.000000, nodes=197 > 10.186479)
                                                          @ 4  java.util.concurrent.locks.ReentrantLock$Sync.lock():void (13 bytes)   relevance-based (relevance=1.107088, probability=0.000271, bonus=1.000000, nodes=57 <= 300.000000)
                            @ 16  java.io.BufferedWriter.newLine():void (8 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.System.lineSeparator():String (4 bytes)   inline method (bytecode parsing)
                            @ 30  java.io.OutputStreamWriter.flushBuffer():void (8 bytes)   inline method (bytecode parsing)
                                                            @ 1  java.io.PrintStream.ensureOpen():void (18 bytes)   trivial (relevance=2.000000, probability=0.000271, bonus=1.000000, nodes=7)
                                                                @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.000271, bonus=1.000000, nodes=5)
                                                              @ 4  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000000, probability=0.000271, bonus=1.000000, nodes=8)
                            @ 23  jdk.internal.misc.InternalLock.lock():void (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.util.concurrent.locks.ReentrantLock.lock():void (8 bytes)   inline method (bytecode parsing)
                            @ 35  jdk.internal.misc.InternalLock.unlock():void (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.util.concurrent.locks.ReentrantLock.unlock():void (10 bytes)   inline method (bytecode parsing)
                                @ 5  java.util.concurrent.locks.AbstractQueuedSynchronizer.release(int):boolean (19 bytes)   inline method (bytecode parsing)
                            @ 9  java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(int):void (20 bytes)   inline method (bytecode parsing)
                            @ 7  java.util.concurrent.locks.AbstractQueuedSynchronizer.compareAndSetState(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 15  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                            @ 21  java.util.concurrent.locks.AbstractOwnableSynchronizer.getExclusiveOwnerThread():Thread (5 bytes)   inline accessor method (bytecode parsing)
                            @ 29  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 51  java.util.concurrent.locks.AbstractQueuedSynchronizer.setState(int):void (6 bytes)   inline method (bytecode parsing)
                                                                  @ 1  java.util.concurrent.locks.ReentrantLock$NonfairSync.initialTryLock():boolean (58 bytes)   relevance-based (relevance=1.020999, probability=0.000271, bonus=1.000000, nodes=40 <= 300.000000)
                            @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 10  java.util.concurrent.locks.AbstractQueuedSynchronizer.compareAndSetState(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 20  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                                                                  @ 2  java.util.concurrent.locks.ReentrantLock$NonfairSync.tryAcquire(int):boolean (27 bytes)   not inlining relevance-based (relevance=0.043772, probability=0.000010, bonus=1.000000, nodes=36 > 13.131676)
                            @ 245  java.util.concurrent.locks.AbstractQueuedSynchronizer$ExclusiveNode.<init>():void (5 bytes)   inline method (bytecode parsing)
                              @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer$Node.<init>():void (5 bytes)   inline method (bytecode parsing)
                            @ 393  java.lang.Thread.interrupted():boolean (7 bytes)   inline method (bytecode parsing)
                                                                  @ 15  java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer$Node, int, boolean, boolean, boolean, long):int (424 bytes)   not inlining relevance-based (relevance=0.033955, probability=0.000008, bonus=1.000000, nodes=197 > 10.186479)
                                                                @ 4  java.util.concurrent.locks.ReentrantLock$Sync.lock():void (13 bytes)   relevance-based (relevance=1.107088, probability=0.000271, bonus=1.000000, nodes=57 <= 300.000000)
                            @ 39  java.io.BufferedWriter.min(int, int):int (9 bytes)   inline method (bytecode parsing)
                                                                  @ 1  java.io.BufferedWriter.ensureOpen():void (18 bytes)   trivial (relevance=1.000000, probability=0.000271, bonus=1.000000, nodes=7)
                                                                  @ 6  java.io.BufferedWriter.growIfNeeded(int):void (63 bytes)   relevance-based (relevance=1.000000, probability=0.000271, bonus=1.000000, nodes=15 <= 300.000000)
                            @ 16  java.lang.String.checkBoundsOffCount(int, int, int):int (10 bytes)   inline method (bytecode parsing)
                                                                      @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.000271, bonus=1.000000, nodes=5)
                                                                    @ 3  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000000, probability=0.000271, bonus=1.000000, nodes=8)
                                                                      @ 6  jdk.internal.util.Preconditions.checkFromToIndex(int, int, int, BiFunction):int (24 bytes)   relevance-based (relevance=1.000000, probability=0.000271, bonus=1.000000, nodes=11 <= 300.000000)
                                                                    @ 6  java.lang.String.checkBoundsBeginEnd(int, int, int):void (11 bytes)   relevance-based (relevance=1.000000, probability=0.000271, bonus=1.000000, nodes=10 <= 300.000000)
                                                                    @ 6  jdk.internal.util.Preconditions.checkFromIndexSize(int, int, int, BiFunction):int (25 bytes)   relevance-based (relevance=1.000000, probability=0.000271, bonus=1.000000, nodes=15 <= 300.000000)
                                                                    @ 21  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=0.000271, bonus=1.000000, nodes=9)
                                                                    @ 36  java.lang.StringLatin1.getChars(byte[], int, int, char[], int):void (12 bytes)   relevance-based (relevance=1.000000, probability=0.000271, bonus=1.000000, nodes=38 <= 300.000000)
                                                                  @ 60  java.lang.String.getChars(int, int, char[], int):void (55 bytes)   relevance-based (relevance=1.000000, probability=0.000271, bonus=1.000000, nodes=58 <= 300.000000)
                                                                @ 30  java.io.BufferedWriter.implWrite(String, int, int):void (100 bytes)   relevance-based (relevance=1.137693, probability=0.000271, bonus=1.000000, nodes=93 <= 300.000000)
                            @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 8  java.util.concurrent.locks.AbstractOwnableSynchronizer.getExclusiveOwnerThread():Thread (5 bytes)   inline accessor method (bytecode parsing)
                            @ 41  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                            @ 46  java.util.concurrent.locks.AbstractQueuedSynchronizer.setState(int):void (6 bytes)   inline method (bytecode parsing)
                                                                @ 2  java.util.concurrent.locks.ReentrantLock$Sync.tryRelease(int):boolean (51 bytes)   relevance-based (relevance=1.137693, probability=0.000271, bonus=1.000000, nodes=37 <= 300.000000)
                            @ 22  java.util.concurrent.locks.AbstractQueuedSynchronizer$Node.getAndUnsetStatus(int):int (14 bytes)   inline method (bytecode parsing)
                              @ 10  jdk.internal.misc.Unsafe.getAndBitwiseAndInt(Object, long, int):int (27 bytes)   inline method (bytecode parsing)
                            @ 5  java.lang.Thread.isVirtual():boolean (5 bytes)   inline method (bytecode parsing)
                                                                  @ 30  java.util.concurrent.locks.LockSupport.unpark(Thread):void (26 bytes)   not inlining relevance-based (relevance=0.011708, probability=0.000002, bonus=1.000000, nodes=20 > 3.512350)
                                                                @ 12  java.util.concurrent.locks.AbstractQueuedSynchronizer.signalNext(AbstractQueuedSynchronizer$Node):void (34 bytes)   relevance-based (relevance=1.027644, probability=0.000245, bonus=1.000000, nodes=56 <= 300.000000)
                                                              @ 7  java.io.BufferedWriter.write(String, int, int):void (82 bytes)   relevance-based (relevance=1.000000, probability=0.000271, bonus=1.000000, nodes=262 <= 300.000000)
                                                            @ 9  java.io.Writer.write(String):void (11 bytes)   relevance-based (relevance=2.000000, probability=0.000271, bonus=1.000000, nodes=266 <= 300.000000)
                                                          @ 16  java.io.PrintStream.implWriteln(String):void (48 bytes)   not inlining relevance-based (relevance=1.137693, probability=0.000271, bonus=1.000000, nodes=309 > 300.000000)
                            @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 8  java.util.concurrent.locks.AbstractOwnableSynchronizer.getExclusiveOwnerThread():Thread (5 bytes)   inline accessor method (bytecode parsing)
                            @ 41  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                            @ 46  java.util.concurrent.locks.AbstractQueuedSynchronizer.setState(int):void (6 bytes)   inline method (bytecode parsing)
                                                          @ 2  java.util.concurrent.locks.ReentrantLock$Sync.tryRelease(int):boolean (51 bytes)   relevance-based (relevance=1.137693, probability=0.000271, bonus=1.000000, nodes=37 <= 300.000000)
                            @ 22  java.util.concurrent.locks.AbstractQueuedSynchronizer$Node.getAndUnsetStatus(int):int (14 bytes)   inline method (bytecode parsing)
                              @ 10  jdk.internal.misc.Unsafe.getAndBitwiseAndInt(Object, long, int):int (27 bytes)   inline method (bytecode parsing)
                            @ 5  java.lang.Thread.isVirtual():boolean (5 bytes)   inline method (bytecode parsing)
                                                            @ 30  java.util.concurrent.locks.LockSupport.unpark(Thread):void (26 bytes)   not inlining relevance-based (relevance=0.011708, probability=0.000002, bonus=1.000000, nodes=20 > 3.512350)
                                                          @ 12  java.util.concurrent.locks.AbstractQueuedSynchronizer.signalNext(AbstractQueuedSynchronizer$Node):void (34 bytes)   relevance-based (relevance=1.027644, probability=0.000245, bonus=1.000000, nodes=56 <= 300.000000)
                            @ 16  java.io.BufferedWriter.newLine():void (8 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.System.lineSeparator():String (4 bytes)   inline method (bytecode parsing)
                            @ 30  java.io.OutputStreamWriter.flushBuffer():void (8 bytes)   inline method (bytecode parsing)
                                                            @ 1  java.io.PrintStream.ensureOpen():void (18 bytes)   trivial (relevance=2.000000, probability=0.000271, bonus=1.000000, nodes=7)
                                                                @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.000271, bonus=1.000000, nodes=5)
                                                              @ 4  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000000, probability=0.000271, bonus=1.000000, nodes=8)
                            @ 23  jdk.internal.misc.InternalLock.lock():void (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.util.concurrent.locks.ReentrantLock.lock():void (8 bytes)   inline method (bytecode parsing)
                            @ 35  jdk.internal.misc.InternalLock.unlock():void (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.util.concurrent.locks.ReentrantLock.unlock():void (10 bytes)   inline method (bytecode parsing)
                                @ 5  java.util.concurrent.locks.AbstractQueuedSynchronizer.release(int):boolean (19 bytes)   inline method (bytecode parsing)
                            @ 9  java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(int):void (20 bytes)   inline method (bytecode parsing)
                            @ 7  java.util.concurrent.locks.AbstractQueuedSynchronizer.compareAndSetState(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 15  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                            @ 21  java.util.concurrent.locks.AbstractOwnableSynchronizer.getExclusiveOwnerThread():Thread (5 bytes)   inline accessor method (bytecode parsing)
                            @ 29  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 51  java.util.concurrent.locks.AbstractQueuedSynchronizer.setState(int):void (6 bytes)   inline method (bytecode parsing)
                                                                  @ 1  java.util.concurrent.locks.ReentrantLock$NonfairSync.initialTryLock():boolean (58 bytes)   relevance-based (relevance=1.020999, probability=0.000271, bonus=1.000000, nodes=40 <= 300.000000)
                            @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 10  java.util.concurrent.locks.AbstractQueuedSynchronizer.compareAndSetState(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 20  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                                                                  @ 2  java.util.concurrent.locks.ReentrantLock$NonfairSync.tryAcquire(int):boolean (27 bytes)   not inlining relevance-based (relevance=0.043772, probability=0.000010, bonus=1.000000, nodes=36 > 13.131676)
                            @ 245  java.util.concurrent.locks.AbstractQueuedSynchronizer$ExclusiveNode.<init>():void (5 bytes)   inline method (bytecode parsing)
                              @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer$Node.<init>():void (5 bytes)   inline method (bytecode parsing)
                            @ 393  java.lang.Thread.interrupted():boolean (7 bytes)   inline method (bytecode parsing)
                                                                  @ 15  java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer$Node, int, boolean, boolean, boolean, long):int (424 bytes)   not inlining relevance-based (relevance=0.033955, probability=0.000008, bonus=1.000000, nodes=197 > 10.186479)
                                                                @ 4  java.util.concurrent.locks.ReentrantLock$Sync.lock():void (13 bytes)   relevance-based (relevance=1.107088, probability=0.000271, bonus=1.000000, nodes=57 <= 300.000000)
                            @ 39  java.io.BufferedWriter.min(int, int):int (9 bytes)   inline method (bytecode parsing)
                                                                  @ 1  java.io.BufferedWriter.ensureOpen():void (18 bytes)   trivial (relevance=1.000000, probability=0.000271, bonus=1.000000, nodes=7)
                                                                  @ 6  java.io.BufferedWriter.growIfNeeded(int):void (63 bytes)   relevance-based (relevance=1.000000, probability=0.000271, bonus=1.000000, nodes=15 <= 300.000000)
                            @ 16  java.lang.String.checkBoundsOffCount(int, int, int):int (10 bytes)   inline method (bytecode parsing)
                                                                      @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.000271, bonus=1.000000, nodes=5)
                                                                    @ 3  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000000, probability=0.000271, bonus=1.000000, nodes=8)
                                                                      @ 6  jdk.internal.util.Preconditions.checkFromToIndex(int, int, int, BiFunction):int (24 bytes)   relevance-based (relevance=1.000000, probability=0.000271, bonus=1.000000, nodes=11 <= 300.000000)
                                                                    @ 6  java.lang.String.checkBoundsBeginEnd(int, int, int):void (11 bytes)   relevance-based (relevance=1.000000, probability=0.000271, bonus=1.000000, nodes=10 <= 300.000000)
                                                                    @ 6  jdk.internal.util.Preconditions.checkFromIndexSize(int, int, int, BiFunction):int (25 bytes)   relevance-based (relevance=1.000000, probability=0.000271, bonus=1.000000, nodes=15 <= 300.000000)
                                                                    @ 21  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=0.000271, bonus=1.000000, nodes=9)
                                                                    @ 36  java.lang.StringLatin1.getChars(byte[], int, int, char[], int):void (12 bytes)   relevance-based (relevance=1.000000, probability=0.000271, bonus=1.000000, nodes=38 <= 300.000000)
                                                                  @ 60  java.lang.String.getChars(int, int, char[], int):void (55 bytes)   relevance-based (relevance=1.000000, probability=0.000271, bonus=1.000000, nodes=58 <= 300.000000)
                                                                @ 30  java.io.BufferedWriter.implWrite(String, int, int):void (100 bytes)   relevance-based (relevance=1.137693, probability=0.000271, bonus=1.000000, nodes=93 <= 300.000000)
                            @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 8  java.util.concurrent.locks.AbstractOwnableSynchronizer.getExclusiveOwnerThread():Thread (5 bytes)   inline accessor method (bytecode parsing)
                            @ 41  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                            @ 46  java.util.concurrent.locks.AbstractQueuedSynchronizer.setState(int):void (6 bytes)   inline method (bytecode parsing)
                                                                @ 2  java.util.concurrent.locks.ReentrantLock$Sync.tryRelease(int):boolean (51 bytes)   relevance-based (relevance=1.137693, probability=0.000271, bonus=1.000000, nodes=37 <= 300.000000)
                            @ 22  java.util.concurrent.locks.AbstractQueuedSynchronizer$Node.getAndUnsetStatus(int):int (14 bytes)   inline method (bytecode parsing)
                              @ 10  jdk.internal.misc.Unsafe.getAndBitwiseAndInt(Object, long, int):int (27 bytes)   inline method (bytecode parsing)
                            @ 5  java.lang.Thread.isVirtual():boolean (5 bytes)   inline method (bytecode parsing)
                                                                  @ 30  java.util.concurrent.locks.LockSupport.unpark(Thread):void (26 bytes)   not inlining relevance-based (relevance=0.011708, probability=0.000002, bonus=1.000000, nodes=20 > 3.512350)
                                                                @ 12  java.util.concurrent.locks.AbstractQueuedSynchronizer.signalNext(AbstractQueuedSynchronizer$Node):void (34 bytes)   relevance-based (relevance=1.027644, probability=0.000245, bonus=1.000000, nodes=56 <= 300.000000)
                                                              @ 7  java.io.BufferedWriter.write(String, int, int):void (82 bytes)   relevance-based (relevance=1.000000, probability=0.000271, bonus=1.000000, nodes=262 <= 300.000000)
                                                            @ 9  java.io.Writer.write(String):void (11 bytes)   relevance-based (relevance=2.000000, probability=0.000271, bonus=1.000000, nodes=266 <= 300.000000)
                                                          @ 48  java.io.PrintStream.implWriteln(String):void (48 bytes)   not inlining relevance-based (relevance=1.137693, probability=0.000271, bonus=1.000000, nodes=309 > 300.000000)
                                                        @ 14  java.io.PrintStream.writeln(String):void (81 bytes)   relevance-based (relevance=1.000000, probability=0.000541, bonus=1.000000, nodes=189 <= 300.000000)
                                                      @ 29  java.io.PrintStream.println(String):void (44 bytes)   relevance-based (relevance=1.000000, probability=0.000541, bonus=1.000000, nodes=190 <= 300.000000)
                                                    @ 153  sun.security.util.Debug.println(String):void (33 bytes)   not inlining callee invoke probability is too high (invokeP=5.037497, relevance=1.000000, probability=0.000541, bonus=1.000000, nodes=224)
                                @ 4  java.util.AbstractList$ListItr.nextIndex():int (5 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                                                      @ 38  java.security.AccessControlContext.combine(ProtectionDomain[], ProtectionDomain[]):ProtectionDomain[] (205 bytes)   relevance-based (relevance=2.000000, probability=0.000812, bonus=1.000000, nodes=143 <= 300.000000)
                              @ 1  java.util.AbstractList$SubList$1.nextIndex():int (18 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=17 <= 300.000000)
                                                        @ 103  java.lang.Object.equals(Object):boolean (11 bytes)   trivial (relevance=0.499997, probability=0.000011, bonus=1.000000, nodes=9)
                                                      @ 61  java.security.AccessControlContext.containsAllPDs(ProtectionDomain[], ProtectionDomain[]):boolean (135 bytes)   relevance-based (relevance=0.499997, probability=0.000203, bonus=1.000000, nodes=97 <= 149.999121)
                                                    @ 193  java.security.AccessControlContext.calculateFields(AccessControlContext, AccessControlContext, Permission[]):void (89 bytes)   relevance-based (relevance=1.500000, probability=0.000812, bonus=1.000000, nodes=286 <= 300.000000)
                                                  @ 19  java.security.AccessControlContext.optimize():AccessControlContext (319 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.004332, bonus=1.000000, nodes=479 > 300.000000)
                                                @ 147  java.security.AccessController.getContext():AccessControlContext (23 bytes)   relevance-based (relevance=2.333333, probability=0.008664, bonus=1.000000, nodes=29 <= 300.000000)
                                              @ 9  java.util.ServiceLoader.<init>(Class, Class, ClassLoader):void (158 bytes)   relevance-based (relevance=1.333333, probability=0.024754, bonus=1.000000, nodes=209 <= 300.000000)
                                            @ 10  jdk.graal.compiler.options.OptionsParser.getOptionsLoader():Iterable (25 bytes)   not inlining relevance-based (relevance=2.000000, probability=0.061885, bonus=1.000000, nodes=309 > 300.000000)
                                              @ 0  jdk.vm.ci.services.Services.checkJVMCIEnabled():void (17 bytes)   trivial (relevance=4.000000, probability=0.061885, bonus=1.000000, nodes=3)
                                                @ 0  java.lang.System.allowSecurityManager():boolean (13 bytes)   trivial (relevance=1.000752, probability=0.015471, bonus=1.000000, nodes=8)
                                              @ 42  java.lang.System.getSecurityManager():SecurityManager (12 bytes)   relevance-based (relevance=1.000000, probability=0.015471, bonus=1.000000, nodes=14 <= 300.000000)
                            @ 12  java.lang.IllegalStateException.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  java.lang.RuntimeException.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                                @ 2  java.lang.Exception.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                            @ 12  java.lang.NullPointerException.<init>():void (5 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.RuntimeException.<init>():void (5 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.Exception.<init>():void (5 bytes)   inline method (bytecode parsing)
                 n                                    @ 25  java.lang.NullPointerException.getExtendedNPEMessage():String (0 bytes)   not inlining it is a non-intrinsic native method
                 n                                      @ 16  java.lang.Throwable.fillInStackTrace(int):Throwable (0 bytes)   not inlining it is a non-intrinsic native method
              s                                         @ 37  java.lang.Throwable.fillInStackTrace():Throwable (29 bytes)   relevance-based (relevance=4.000000, probability=0.001934, bonus=1.000000, nodes=34 <= 300.000000)
              s                                       @ 24  java.lang.NullPointerException.fillInStackTrace():Throwable (41 bytes)   relevance-based (relevance=1.000000, probability=0.001934, bonus=1.000000, nodes=65 <= 300.000000)
                                                    @ 1  java.lang.Throwable.<init>():void (29 bytes)   relevance-based (relevance=1.000000, probability=0.001934, bonus=1.000000, nodes=73 <= 300.000000)
                                                  @ 18  java.util.Collections$UnmodifiableMap.<init>(Map):void (22 bytes)   relevance-based (relevance=1.000000, probability=0.003868, bonus=1.000000, nodes=87 <= 300.000000)
                                                @ 19  java.util.Collections.unmodifiableMap(Map):Map (22 bytes)   relevance-based (relevance=1.000000, probability=0.007736, bonus=1.000000, nodes=95 <= 300.000000)
                 n                                @ 16  java.lang.Throwable.fillInStackTrace(int):Throwable (0 bytes)   not inlining it is a non-intrinsic native method
              s                                   @ 24  java.lang.Throwable.fillInStackTrace():Throwable (29 bytes)   relevance-based (relevance=1.000000, probability=0.007736, bonus=1.000000, nodes=34 <= 300.000000)
                                                @ 2  java.lang.Throwable.<init>(String):void (34 bytes)   relevance-based (relevance=16.000000, probability=0.007736, bonus=1.000000, nodes=45 <= 300.000000)
                                              @ 61  jdk.internal.misc.VM.getSavedProperties():Map (23 bytes)   relevance-based (relevance=1.000752, probability=0.015471, bonus=1.000000, nodes=147 <= 300.000000)
                                            @ 14  jdk.vm.ci.services.Services.getSavedProperties():Map (81 bytes)   relevance-based (relevance=2.000000, probability=0.061885, bonus=1.000000, nodes=201 <= 300.000000)
                                          @ 4  jdk.graal.compiler.hotspot.HotSpotGraalOptionValues.parseOptions():EconomicMap (417 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.061885, bonus=1.000000, nodes=468 > 300.000000)
                            @ 4  jdk.graal.compiler.options.OptionValues.newOptionMap():EconomicMap (7 bytes)   inline method (bytecode parsing)
                              @ 3  org.graalvm.collections.EconomicMap.create(Equivalence):EconomicMap (6 bytes)   inline method (bytecode parsing)
                                @ 2  org.graalvm.collections.EconomicMapImpl.create(Equivalence, boolean):EconomicMapImpl (13 bytes)   inline method (bytecode parsing)
                                  @ 6  org.graalvm.collections.EconomicMapImpl.<init>(Equivalence, boolean):void (30 bytes)   inline method (bytecode parsing)
                                  @ 9  org.graalvm.collections.EconomicMapImpl.intercept(EconomicMapImpl):EconomicMapImpl (2 bytes)   inline method (bytecode parsing)
                                            @ 1  org.graalvm.collections.UnmodifiableEconomicMap.getEntries():UnmodifiableMapCursor (0 bytes)   not inlining no type profile exists
                                            @ 8  org.graalvm.collections.UnmodifiableMapCursor.advance():boolean (0 bytes)   not inlining no type profile exists
                                            @ 18  org.graalvm.collections.UnmodifiableMapCursor.getKey():Object (0 bytes)   not inlining no type profile exists
                                            @ 27  org.graalvm.collections.UnmodifiableMapCursor.getValue():Object (0 bytes)   not inlining no type profile exists
                                              @ 32  jdk.graal.compiler.options.OptionValues.encodeNull(Object):Object (12 bytes)   relevance-based (relevance=1.000000, probability=0.061885, bonus=1.000000, nodes=14 <= 300.000000)
                            @ 111  org.graalvm.collections.EconomicMapImpl.setKey(int, Object):void (10 bytes)   inline method (bytecode parsing)
                            @ 143  org.graalvm.collections.EconomicMapImpl.size():int (10 bytes)   inline method (bytecode parsing)
                            @ 147  org.graalvm.collections.EconomicMapImpl.size():int (10 bytes)   inline method (bytecode parsing)
                                              @ 35  org.graalvm.collections.EconomicMapImpl.put(Object, Object):Object (192 bytes)   not inlining too large previous low-level graph (low-level-nodes: 1167, relevance=1.000000, probability=0.061885, bonus=1.000000, nodes=101)
                                            @ 10  jdk.graal.compiler.options.OptionValues.initMap(EconomicMap, UnmodifiableEconomicMap):void (45 bytes)   not inlining callee invoke probability is too high (invokeP=6.000000, relevance=1.000000, probability=0.061885, bonus=1.000000, nodes=44)
                                          @ 7  jdk.graal.compiler.options.OptionValues.<init>(UnmodifiableEconomicMap):void (19 bytes)   relevance-based (relevance=1.000000, probability=0.061885, bonus=1.000000, nodes=24 <= 300.000000)
                                        @ 21  jdk.graal.compiler.hotspot.HotSpotGraalOptionValues.initializeOptions():OptionValues (11 bytes)   relevance-based (relevance=1.000000, probability=0.061885, bonus=1.000000, nodes=27 <= 300.000000)
                                      @ 22  jdk.graal.compiler.hotspot.HotSpotGraalOptionValues.defaultOptions():OptionValues (41 bytes)   relevance-based (relevance=6.183661, probability=0.247542, bonus=1.000000, nodes=60 <= 300.000000)
                            @ 21  org.graalvm.collections.EconomicMapImpl.getKey(int):Object (9 bytes)   inline method (bytecode parsing)
                            @ 23  jdk.graal.compiler.options.OptionValues.get(OptionKey):Object (9 bytes)   inline method (bytecode parsing)
                            @ 13  jdk.graal.compiler.options.OptionKey.getDefaultValue():Object (5 bytes)   inline accessor method (bytecode parsing)
                                        @ 2  org.graalvm.collections.UnmodifiableEconomicMap.get(Object):Object (0 bytes)   not inlining no type profile exists
                                          @ 18  jdk.graal.compiler.options.OptionValues.decodeNull(Object):Object (13 bytes)   relevance-based (relevance=1.000000, probability=0.123771, bonus=1.000000, nodes=15 <= 300.000000)
                                        @ 5  jdk.graal.compiler.options.OptionValues.get(UnmodifiableEconomicMap, OptionKey):Object (22 bytes)   relevance-based (relevance=1.000000, probability=0.247542, bonus=1.000000, nodes=26 <= 300.000000)
                                      @ 25  jdk.graal.compiler.options.OptionKey.getValue(OptionValues):Object (27 bytes)   relevance-based (relevance=4.000000, probability=0.247542, bonus=1.000000, nodes=31 <= 300.000000)
                            @ 5  java.lang.String.contains(CharSequence):boolean (19 bytes)   inline method (bytecode parsing)
                              @ 2  java.lang.String.toString():String (2 bytes)   inline method (bytecode parsing)
                            @ 24  java.lang.String.contains(CharSequence):boolean (19 bytes)   inline method (bytecode parsing)
                              @ 2  java.lang.String.toString():String (2 bytes)   inline method (bytecode parsing)
                            @ 44  java.lang.String.contains(CharSequence):boolean (19 bytes)   inline method (bytecode parsing)
                              @ 2  java.lang.String.toString():String (2 bytes)   inline method (bytecode parsing)
                            @ 64  java.lang.String.contains(CharSequence):boolean (19 bytes)   inline method (bytecode parsing)
                              @ 2  java.lang.String.toString():String (2 bytes)   inline method (bytecode parsing)
                            @ 76  java.lang.String.valueOf(long):String (5 bytes)   inline method (bytecode parsing)
                            @ 4  jdk.graal.compiler.graph.Node.getNodeClass():NodeClass (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 1  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.123771, bonus=1.000000, nodes=5)
                                @ 40  jdk.graal.compiler.graph.Graph$1.hashCode(Object):int (15 bytes)   not inlining relevance-based (relevance=0.024217, probability=0.020199, bonus=1.000000, nodes=14 > 7.265028)
                                          @ 7  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.123771, bonus=1.000000, nodes=5)
                 n              @ 48  java.lang.Object.hashCode():int (0 bytes)   trivial (relevance=1.174510, probability=0.979657, bonus=1.000000, nodes=5)
                                          @ 14  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=0.123771, bonus=1.000000, nodes=9)
                                @ 61  org.graalvm.collections.EconomicMapImpl.getHashTableSize():int (43 bytes)   relevance-based (relevance=1.198900, probability=1.000000, bonus=1.000000, nodes=21 <= 300.000000)
                              @ 2  org.graalvm.collections.EconomicMapImpl.getHashIndex(Object):int (68 bytes)   relevance-based (relevance=1.184724, probability=1.000000, bonus=1.000000, nodes=81 <= 300.000000)
                                          @ 28  java.lang.StringLatin1.indexOf(byte[], byte[]):int (25 bytes)   relevance-based (relevance=1.000000, probability=0.123771, bonus=1.000000, nodes=16 <= 300.000000)
                                        @ 7  java.lang.String.indexOf(String):int (64 bytes)   relevance-based (relevance=2.000000, probability=0.123771, bonus=1.000000, nodes=25 <= 300.000000)
                            @ 0  java.lang.ProcessHandle.current():ProcessHandle (4 bytes)   inline method (bytecode parsing)
                              @ 8  org.graalvm.collections.EconomicMapImpl.getHashArray(int):int (126 bytes)   relevance-based (relevance=1.198900, probability=1.000000, bonus=1.000000, nodes=31 <= 300.000000)
                            @ 3  java.lang.ProcessHandleImpl.pid():long (5 bytes)   inline accessor method (bytecode parsing)
                            @ 15  java.lang.RuntimePermission.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  java.security.BasicPermission.<init>(String):void (11 bytes)   inline method (bytecode parsing)
                                @ 2  java.security.Permission.<init>(String):void (10 bytes)   inline method (bytecode parsing)
                            @ 49  jdk.graal.compiler.graph.Node.valueEquals(Node):boolean (10 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.graph.Node.getNodeClass():NodeClass (5 bytes)   inline accessor method (bytecode parsing)
                                @ 46  jdk.graal.compiler.graph.Graph$1.equals(Object, Object):boolean (53 bytes)   not inlining relevance-based (relevance=0.007448, probability=0.006268, bonus=1.000000, nodes=25 > 2.234271)
                                              @ 0  java.lang.System.allowSecurityManager():boolean (13 bytes)   trivial (relevance=1.000752, probability=0.061885, bonus=1.000000, nodes=8)
                              @ 36  java.lang.Object.equals(Object):boolean (11 bytes)   not inlining no methods remaining after filtering less frequent methods (6 methods previously)
                              @ 30  org.graalvm.collections.EconomicMapImpl.compareKeys(Object, Object):boolean (52 bytes)   relevance-based (relevance=1.198679, probability=0.999816, bonus=1.000000, nodes=40 <= 300.000000)
                                            @ 0  java.lang.System.getSecurityManager():SecurityManager (12 bytes)   relevance-based (relevance=2.000000, probability=0.061885, bonus=1.000000, nodes=14 <= 300.000000)
                            @ 10  java.lang.NullPointerException.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                              @ 38  org.graalvm.collections.EconomicMapImpl.getRawValue(int):Object (11 bytes)   relevance-based (relevance=1.105018, probability=0.921693, bonus=1.000000, nodes=10 <= 300.000000)
                              @ 2  java.lang.RuntimeException.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                                @ 2  java.lang.Exception.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                              @ 81  org.graalvm.collections.EconomicMapImpl.getRawValue(int):Object (11 bytes)   relevance-based (relevance=0.093661, probability=0.078122, bonus=1.000000, nodes=10 <= 28.098177)
                            @ 29  java.lang.IllegalArgumentException.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  java.lang.RuntimeException.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                            @ 20  org.graalvm.collections.EconomicMapImpl.getKey(int):Object (9 bytes)   inline method (bytecode parsing)
                                @ 2  java.lang.Exception.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                              @ 102  org.graalvm.collections.EconomicMapImpl.findAndRemoveWithCollision(Object, EconomicMapImpl$CollisionLink, int):int (137 bytes)   not inlining relevance-based (relevance=0.093661, probability=0.078122, bonus=1.000000, nodes=68 > 28.098177)
                              @ 74  org.graalvm.collections.EconomicMapImpl.setHashArray(int, int):void (112 bytes)   relevance-based (relevance=1.105018, probability=0.921693, bonus=1.000000, nodes=37 <= 300.000000)
                                                @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.030943, bonus=1.000000, nodes=5)
                                              @ 15  java.lang.String.length():int (11 bytes)   trivial (relevance=8.006017, probability=0.030943, bonus=1.000000, nodes=5)
                                                @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=0.030943, bonus=1.000000, nodes=5)
                            @ 3  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                                                @ 12  java.lang.StringLatin1.charAt(byte[], int):char (15 bytes)   trivial (relevance=1.000000, probability=0.030943, bonus=1.000000, nodes=6)
                                              @ 37  java.lang.String.charAt(int):char (25 bytes)   trivial (relevance=8.006017, probability=0.030943, bonus=1.000000, nodes=6)
                                            @ 7  java.security.BasicPermission.init(String):void (132 bytes)   trivial (relevance=0.500376, probability=0.030943, bonus=1.000000, nodes=7)
                                          @ 0  java.lang.ProcessHandleImpl.current():ProcessHandleImpl (25 bytes)   relevance-based (relevance=1.000000, probability=0.061885, bonus=1.000000, nodes=36 <= 300.000000)
                            @ 28  java.lang.String.<init>(byte[], byte):void (15 bytes)   inline method (bytecode parsing)
                                          @ 8  java.lang.Long.toString(long):String (55 bytes)   not inlining too large previous low-level graph (low-level-nodes: 544, relevance=0.500376, probability=0.030943, bonus=1.000000, nodes=19)
                                        @ 14  jdk.graal.compiler.serviceprovider.GraalServices.getExecutionID():String (12 bytes)   relevance-based (relevance=1.000000, probability=0.061885, bonus=1.000000, nodes=41 <= 300.000000)
                            @ 206  java.lang.StringBuilder.<init>(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 215  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 237  java.lang.StringBuilder.append(char):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 242  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 254  java.lang.StringBuilder.toString():String (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.String.<init>(StringBuilder):void (7 bytes)   inline method (bytecode parsing)
                                          @ 1  java.lang.String.toString():String (2 bytes)   trivial (relevance=4.003009, probability=0.030943, bonus=1.000000, nodes=4)
                                          @ 8  java.lang.String.toString():String (2 bytes)   trivial (relevance=4.003009, probability=0.030943, bonus=1.000000, nodes=4)
                                            @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.030943, bonus=1.000000, nodes=5)
                                          @ 16  java.lang.String.length():int (11 bytes)   trivial (relevance=4.003009, probability=0.030943, bonus=1.000000, nodes=8)
                                            @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.030943, bonus=1.000000, nodes=5)
                                          @ 22  java.lang.String.length():int (11 bytes)   trivial (relevance=4.003009, probability=0.030943, bonus=1.000000, nodes=5)
                                            @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.030943, bonus=1.000000, nodes=5)
                                          @ 29  java.lang.String.length():int (11 bytes)   trivial (relevance=10.674690, probability=0.030943, bonus=1.000000, nodes=8)
                                          @ 68  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=10.674690, probability=0.030943, bonus=1.000000, nodes=9)
                                          @ 74  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=10.674690, probability=0.030943, bonus=1.000000, nodes=5)
                                          @ 81  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=10.674690, probability=0.030943, bonus=1.000000, nodes=9)
                            @ 162  java.lang.StringConcatHelper.newArray(long):byte[] (40 bytes)   inline method (bytecode parsing)
                            @ 287  java.lang.String.<init>(byte[], byte):void (15 bytes)   inline method (bytecode parsing)
                                          @ 120  java.lang.StringLatin1.replace(byte[], int, byte[], int, byte[], int):String (291 bytes)   not inlining relevance-based (relevance=0.500376, probability=0.001450, bonus=1.000000, nodes=190 > 150.112828)
                            @ 588  java.lang.StringUTF16.compress(byte[], int, int):byte[] (20 bytes)   inline method (bytecode parsing)
                            @ 605  java.lang.String.<init>(byte[], byte):void (15 bytes)   inline method (bytecode parsing)
                            @ 616  java.lang.String.<init>(byte[], byte):void (15 bytes)   inline method (bytecode parsing)
                                            @ 76  java.lang.StringLatin1.indexOf(byte[], byte[]):int (25 bytes)   relevance-based (relevance=1.000000, probability=0.005077, bonus=1.000000, nodes=16 <= 300.000000)
                            @ 8  java.lang.StringUTF16.length(byte[]):int (5 bytes)   inline method (bytecode parsing)
                            @ 20  java.lang.StringUTF16.length(byte[]):int (5 bytes)   inline method (bytecode parsing)
                                            @ 95  java.lang.StringUTF16.indexOfLatin1(byte[], byte[]):int (31 bytes)   relevance-based (relevance=1.000010, probability=0.005077, bonus=1.000000, nodes=22 <= 300.000000)
                            @ 4  java.lang.StringUTF16.checkBoundsBeginEnd(int, int, byte[]):void (10 bytes)   inline method (bytecode parsing)
                              @ 3  java.lang.StringUTF16.length(byte[]):int (5 bytes)   inline method (bytecode parsing)
                            @ 11  java.lang.String.checkBoundsBeginEnd(int, int, int):void (11 bytes)   inline method (bytecode parsing)
                              @ 6  jdk.internal.util.Preconditions.checkFromToIndex(int, int, int, BiFunction):int (24 bytes)   inline method (bytecode parsing)
                                                @ 6  jdk.internal.util.Preconditions.checkFromToIndex(int, int, int, BiFunction):int (24 bytes)   relevance-based (relevance=1.000000, probability=0.005077, bonus=1.000000, nodes=14 <= 300.000000)
                                              @ 6  java.lang.String.checkBoundsBeginEnd(int, int, int):void (11 bytes)   relevance-based (relevance=1.000010, probability=0.005077, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 178  java.lang.StringUTF16.indexOfLatin1(byte[], int, byte[], int, int):int (24 bytes)   relevance-based (relevance=1.000010, probability=0.005077, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 151  java.lang.StringUTF16.replace(byte[], int, boolean, byte[], int, boolean, byte[], int, boolean):String (620 bytes)   not inlining relevance-based (relevance=3.502633, probability=0.010153, bonus=1.000000, nodes=311 > 300.000000)
                                        @ 17  java.lang.String.replace(CharSequence, CharSequence):String (258 bytes)   relevance-based (relevance=0.500376, probability=0.030943, bonus=1.000000, nodes=57 <= 150.112828)
                                          @ 1  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.123771, bonus=1.000000, nodes=5)
                                          @ 7  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.123771, bonus=1.000000, nodes=5)
                                          @ 14  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=0.123771, bonus=1.000000, nodes=9)
                                          @ 28  java.lang.StringLatin1.indexOf(byte[], byte[]):int (25 bytes)   relevance-based (relevance=1.000000, probability=0.123771, bonus=1.000000, nodes=16 <= 300.000000)
                                        @ 7  java.lang.String.indexOf(String):int (64 bytes)   relevance-based (relevance=2.001504, probability=0.123771, bonus=1.000000, nodes=25 <= 300.000000)
                                          @ 1  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.123771, bonus=1.000000, nodes=5)
                                          @ 7  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.123771, bonus=1.000000, nodes=5)
                                          @ 14  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=0.123771, bonus=1.000000, nodes=9)
                                          @ 28  java.lang.StringLatin1.indexOf(byte[], byte[]):int (25 bytes)   relevance-based (relevance=1.000000, probability=0.123771, bonus=1.000000, nodes=16 <= 300.000000)
                                        @ 7  java.lang.String.indexOf(String):int (64 bytes)   relevance-based (relevance=2.001504, probability=0.123771, bonus=1.000000, nodes=25 <= 300.000000)
                                          @ 1  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.123771, bonus=1.000000, nodes=5)
                                          @ 7  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.123771, bonus=1.000000, nodes=5)
                                          @ 14  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=0.123771, bonus=1.000000, nodes=9)
                                          @ 28  java.lang.StringLatin1.indexOf(byte[], byte[]):int (25 bytes)   relevance-based (relevance=1.000000, probability=0.123771, bonus=1.000000, nodes=16 <= 300.000000)
                                        @ 7  java.lang.String.indexOf(String):int (64 bytes)   relevance-based (relevance=2.001504, probability=0.123771, bonus=1.000000, nodes=25 <= 300.000000)
                                      @ 37  jdk.graal.compiler.hotspot.HotSpotTTYStreamProvider$LogStreamOptionKey.makeFilename(String):String (157 bytes)   not inlining relevance-based (relevance=2.000000, probability=0.123771, bonus=1.000000, nodes=301 > 300.000000)
                                        @ 17  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=0.015302, probability=0.001865, bonus=1.000000, nodes=9)
                                        @ 27  java.lang.StringLatin1.hashCode(byte[]):int (52 bytes)   not inlining relevance-based (relevance=0.015294, probability=0.001864, bonus=1.000000, nodes=22 > 4.588326)
                                        @ 37  java.lang.StringUTF16.hashCode(byte[]):int (52 bytes)   not inlining relevance-based (relevance=0.000008, probability=0.000001, bonus=1.000000, nodes=23 > 0.002314)
                                      @ 49  java.lang.String.hashCode():int (60 bytes)   relevance-based (relevance=2.000000, probability=0.123771, bonus=1.000000, nodes=48 <= 300.000000)
                                    @ 1  jdk.graal.compiler.hotspot.HotSpotTTYStreamProvider$LogStreamOptionKey$DelayedOutputStream.lazy():OutputStream (266 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.990168, bonus=1.000000, nodes=308 > 300.000000)
                                  @ 7  java.io.OutputStream.write(byte[], int, int):void (34 bytes)   not inlining no type profile exists
                                  @ 11  jdk.graal.compiler.hotspot.HotSpotTTYStreamProvider$LogStreamOptionKey$DelayedOutputStream.write(byte[], int, int):void (11 bytes)   relevance-based (relevance=1.009930, probability=1.000000, bonus=1.000000, nodes=84 <= 300.000000)
                            @ 11  jdk.internal.misc.InternalLock.lock():void (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.util.concurrent.locks.ReentrantLock.lock():void (8 bytes)   inline method (bytecode parsing)
                            @ 22  jdk.internal.misc.InternalLock.unlock():void (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.util.concurrent.locks.ReentrantLock.unlock():void (10 bytes)   inline method (bytecode parsing)
                                @ 5  java.util.concurrent.locks.AbstractQueuedSynchronizer.release(int):boolean (19 bytes)   inline method (bytecode parsing)
                                  @ 25  java.io.BufferedOutputStream.flush():void (60 bytes)   not inlining relevance-based (relevance=0.009930, probability=0.009832, bonus=1.000000, nodes=68 > 2.978972)
                                @ 18  java.io.PrintStream.implWrite(byte[], int, int):void (29 bytes)   relevance-based (relevance=1.137693, probability=1.000000, bonus=1.000000, nodes=109 <= 300.000000)
                            @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 8  java.util.concurrent.locks.AbstractOwnableSynchronizer.getExclusiveOwnerThread():Thread (5 bytes)   inline accessor method (bytecode parsing)
                            @ 41  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                            @ 46  java.util.concurrent.locks.AbstractQueuedSynchronizer.setState(int):void (6 bytes)   inline method (bytecode parsing)
                                @ 2  java.util.concurrent.locks.ReentrantLock$Sync.tryRelease(int):boolean (51 bytes)   relevance-based (relevance=1.137693, probability=1.000000, bonus=1.000000, nodes=37 <= 300.000000)
                            @ 22  java.util.concurrent.locks.AbstractQueuedSynchronizer$Node.getAndUnsetStatus(int):int (14 bytes)   inline method (bytecode parsing)
                              @ 10  jdk.internal.misc.Unsafe.getAndBitwiseAndInt(Object, long, int):int (27 bytes)   inline method (bytecode parsing)
                            @ 5  java.lang.Thread.isVirtual():boolean (5 bytes)   inline method (bytecode parsing)
                                  @ 30  java.util.concurrent.locks.LockSupport.unpark(Thread):void (26 bytes)   not inlining relevance-based (relevance=0.011708, probability=0.006675, bonus=1.000000, nodes=20 > 3.512350)
                                @ 12  java.util.concurrent.locks.AbstractQueuedSynchronizer.signalNext(AbstractQueuedSynchronizer$Node):void (34 bytes)   relevance-based (relevance=1.027644, probability=0.903270, bonus=1.000000, nodes=56 <= 300.000000)
                              @ 127  java.io.PrintStream.write(byte[], int, int):void (94 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=278 <= 300.000000)
                                @ 1  java.nio.Buffer.clear():Buffer (20 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=13 <= 300.000000)
                              @ 134  java.nio.ByteBuffer.clear():ByteBuffer (7 bytes)   relevance-based (relevance=1.137693, probability=1.000000, bonus=1.000000, nodes=14 <= 300.000000)
                            @ 8  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                            @ 9  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000740, probability=0.000291, bonus=1.000000, nodes=41 > 0.221862)
                                @ 11  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.007395, probability=0.002910, bonus=1.000000, nodes=21 > 2.218619)
                            @ 8  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                    @ 14  java.lang.Class.getComponentType():Class (14 bytes)   trivial (relevance=0.008301, probability=0.003176, bonus=1.000000, nodes=7)
                                    @ 32  java.lang.Math.min(int, int):int (11 bytes)   trivial (relevance=0.299310, probability=0.114523, bonus=1.000000, nodes=7)
                                  @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   relevance-based (relevance=0.291009, probability=0.114523, bonus=1.000000, nodes=40 <= 87.302652)
                                @ 4  java.util.ArrayList.toArray():Object[] (12 bytes)   relevance-based (relevance=0.291009, probability=0.114523, bonus=1.000000, nodes=42 <= 87.302652)
                                  @ 1  java.util.AbstractList$SubList.checkForComodification():void (23 bytes)   trivial (relevance=0.325274, probability=0.128007, bonus=1.000000, nodes=9)
                                @ 1  java.util.AbstractList$SubList.size():int (9 bytes)   relevance-based (relevance=0.325274, probability=0.128007, bonus=1.000000, nodes=10 <= 97.582253)
                            @ 1  java.util.AbstractList.listIterator():ListIterator (6 bytes)   inline method (bytecode parsing)
                              @ 2  java.util.AbstractList$SubList.listIterator(int):ListIterator (19 bytes)   inline method (bytecode parsing)
                                  @ 1  java.util.AbstractList$SubList.checkForComodification():void (23 bytes)   trivial (relevance=0.325274, probability=0.128007, bonus=1.000000, nodes=9)
                                  @ 6  java.util.AbstractList$SubList.rangeCheckForAdd(int):void (26 bytes)   trivial (relevance=0.325274, probability=0.128007, bonus=1.000000, nodes=8)
                                        @ 6  jdk.graal.compiler.graph.NodeList.size():int (5 bytes)   trivial (relevance=0.325274, probability=0.128007, bonus=1.000000, nodes=5)
                                      @ 2  java.util.AbstractList.rangeCheckForAdd(int):void (26 bytes)   relevance-based (relevance=0.325274, probability=0.128007, bonus=1.000000, nodes=16 <= 97.582253)
                                        @ 7  java.util.AbstractList$Itr.<init>(AbstractList):void (31 bytes)   relevance-based (relevance=0.325274, probability=0.128007, bonus=1.000000, nodes=18 <= 97.582253)
                                      @ 11  java.util.AbstractList$ListItr.<init>(AbstractList, int):void (16 bytes)   relevance-based (relevance=0.325274, probability=0.128007, bonus=1.000000, nodes=25 <= 97.582253)
                                    @ 34  java.util.AbstractList.listIterator(int):ListIterator (15 bytes)   relevance-based (relevance=0.325274, probability=0.128007, bonus=1.000000, nodes=36 <= 97.582253)
                                  @ 15  java.util.AbstractList$SubList$1.<init>(AbstractList$SubList, int):void (41 bytes)   relevance-based (relevance=0.325274, probability=0.128007, bonus=1.000000, nodes=52 <= 97.582253)
                                @ 9  java.util.AbstractList$SubList.iterator():Iterator (5 bytes)   relevance-based (relevance=0.325274, probability=0.128007, bonus=1.000000, nodes=63 <= 97.582253)
                                    @ 4  java.util.AbstractList$ListItr.nextIndex():int (5 bytes)   trivial (relevance=0.325274, probability=0.128007, bonus=1.000000, nodes=5)
                                  @ 1  java.util.AbstractList$SubList$1.nextIndex():int (18 bytes)   relevance-based (relevance=0.325274, probability=0.128007, bonus=1.000000, nodes=17 <= 97.582253)
                                @ 52  java.util.AbstractList$SubList$1.hasNext():boolean (20 bytes)   relevance-based (relevance=0.325274, probability=0.128007, bonus=1.000000, nodes=23 <= 97.582253)
                                    @ 4  java.util.AbstractList$ListItr.nextIndex():int (5 bytes)   trivial (relevance=0.325274, probability=0.414331, bonus=1.000000, nodes=5)
                                  @ 1  java.util.AbstractList$SubList$1.nextIndex():int (18 bytes)   relevance-based (relevance=0.325274, probability=0.414331, bonus=1.000000, nodes=17 <= 97.582253)
                                @ 22  java.util.AbstractList$SubList$1.hasNext():boolean (20 bytes)   relevance-based (relevance=0.325274, probability=0.414331, bonus=1.000000, nodes=23 <= 97.582253)
                                      @ 4  java.util.AbstractList$ListItr.nextIndex():int (5 bytes)   trivial (relevance=0.325274, probability=0.414331, bonus=1.000000, nodes=5)
                                    @ 1  java.util.AbstractList$SubList$1.nextIndex():int (18 bytes)   relevance-based (relevance=0.325274, probability=0.414331, bonus=1.000000, nodes=17 <= 97.582253)
                                  @ 1  java.util.AbstractList$SubList$1.hasNext():boolean (20 bytes)   relevance-based (relevance=0.325274, probability=0.414331, bonus=1.000000, nodes=23 <= 97.582253)
                                    @ 1  java.util.AbstractList$Itr.checkForComodification():void (23 bytes)   trivial (relevance=0.325274, probability=0.414331, bonus=1.000000, nodes=9)
                                      @ 2  jdk.graal.compiler.graph.NodeList.get(int):Node (29 bytes)   trivial (relevance=0.325274, probability=0.414331, bonus=1.000000, nodes=7)
                                    @ 14  jdk.graal.compiler.graph.NodeList.get(int):Object (6 bytes)   trivial (relevance=0.325274, probability=0.414331, bonus=1.000000, nodes=7)
                                  @ 11  java.util.AbstractList$Itr.next():Object (46 bytes)   relevance-based (relevance=0.325274, probability=0.414331, bonus=1.000000, nodes=27 <= 97.582253)
                                @ 39  java.util.AbstractList$SubList$1.next():Object (25 bytes)   relevance-based (relevance=0.325274, probability=0.414331, bonus=1.000000, nodes=53 <= 97.582253)
                                  @ 14  java.lang.Class.getComponentType():Class (14 bytes)   trivial (relevance=0.028525, probability=0.018728, bonus=1.000000, nodes=7)
                                  @ 32  java.lang.Math.min(int, int):int (11 bytes)   trivial (relevance=1.028525, probability=0.675252, bonus=1.000000, nodes=7)
                                @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   relevance-based (relevance=1.000000, probability=0.675252, bonus=1.000000, nodes=40 <= 300.000000)
                              @ 1  java.util.ArrayList.toArray():Object[] (12 bytes)   not inlining relevance-based (relevance=1.715855, probability=1.000000, bonus=1.000000, nodes=322 > 300.000000)
                            @ 49  java.lang.Math.max(int, int):int (11 bytes)   inline method (bytecode parsing)
                            @ 37  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                  @ 3  java.lang.Math.max(int, int):int (11 bytes)   trivial (relevance=0.081381, probability=0.043860, bonus=1.000000, nodes=7)
                                @ 27  jdk.internal.util.ArraysSupport.newLength(int, int, int):int (27 bytes)   relevance-based (relevance=0.081381, probability=0.043860, bonus=1.000000, nodes=15 <= 24.414321)
                                @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.081381, probability=0.043860, bonus=1.000000, nodes=41 > 24.414321)
                              @ 51  java.util.ArrayList.grow(int):Object[] (60 bytes)   relevance-based (relevance=1.000000, probability=0.582800, bonus=1.000000, nodes=51 <= 300.000000)
                                @ 7  java.util.regex.Pattern$Branch.match(Matcher, int, CharSequence):boolean (66 bytes)   not inlining too large previous low-level graph (low-level-nodes: 379, relevance=1.000000, probability=0.666667, bonus=1.000000, nodes=47)
                              @ 70  java.util.regex.Pattern$BranchConn.match(Matcher, int, CharSequence):boolean (11 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=39 <= 300.000000)
                            @ 8  jdk.graal.compiler.lir.stackslotalloc.LSStackSlotAllocator$Allocator.lambda$new$0(StackInterval, StackInterval):int (10 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.lir.stackslotalloc.StackInterval.from():int (5 bytes)   inline accessor method (bytecode parsing)
                              @ 5  jdk.graal.compiler.lir.stackslotalloc.StackInterval.from():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 8  jdk.graal.compiler.lir.stackslotalloc.LSStackSlotAllocator$Allocator.lambda$new$1(StackInterval, StackInterval):int (10 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.lir.stackslotalloc.StackInterval.to():int (5 bytes)   inline accessor method (bytecode parsing)
                              @ 5  jdk.graal.compiler.lir.stackslotalloc.StackInterval.to():int (5 bytes)   inline accessor method (bytecode parsing)
                                @ 1  jdk.graal.compiler.core.common.cfg.BasicBlock.getRelativeFrequency():double (0 bytes)   not inlining no type profile exists
                                @ 12  jdk.graal.compiler.core.common.cfg.BasicBlock.getRelativeFrequency():double (0 bytes)   not inlining no type profile exists
                                @ 23  jdk.graal.compiler.core.common.cfg.BasicBlock.getLoopDepth():int (0 bytes)   not inlining no type profile exists
                                @ 27  jdk.graal.compiler.core.common.cfg.BasicBlock.getLoopDepth():int (0 bytes)   not inlining no type profile exists
                                @ 39  jdk.graal.compiler.core.common.cfg.BasicBlock.getRelativeFrequency():double (0 bytes)   not inlining no type profile exists
                                @ 43  jdk.graal.compiler.core.common.cfg.BasicBlock.getRelativeFrequency():double (0 bytes)   not inlining no type profile exists
                                @ 9  jdk.graal.compiler.core.common.alloc.BasicBlockOrderUtils$BlockOrderComparator.compare(BasicBlock, BasicBlock):int (54 bytes)   relevance-based (relevance=1.000000, probability=2.075700, bonus=1.000000, nodes=47 <= 300.000000)
                              @ 44  jdk.graal.compiler.core.common.alloc.BasicBlockOrderUtils$BlockOrderComparator.compare(Object, Object):int (13 bytes)   relevance-based (relevance=1.616965, probability=2.261088, bonus=1.000000, nodes=99 <= 300.000000)
                            @ 8  jdk.graal.compiler.lir.stackslotalloc.LSStackSlotAllocator$Allocator.lambda$new$0(StackInterval, StackInterval):int (10 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.lir.stackslotalloc.StackInterval.from():int (5 bytes)   inline accessor method (bytecode parsing)
                              @ 5  jdk.graal.compiler.lir.stackslotalloc.StackInterval.from():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 8  jdk.graal.compiler.lir.stackslotalloc.LSStackSlotAllocator$Allocator.lambda$new$1(StackInterval, StackInterval):int (10 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.lir.stackslotalloc.StackInterval.to():int (5 bytes)   inline accessor method (bytecode parsing)
                              @ 5  jdk.graal.compiler.lir.stackslotalloc.StackInterval.to():int (5 bytes)   inline accessor method (bytecode parsing)
                                @ 1  jdk.graal.compiler.core.common.cfg.BasicBlock.getRelativeFrequency():double (0 bytes)   not inlining no type profile exists
                                @ 12  jdk.graal.compiler.core.common.cfg.BasicBlock.getRelativeFrequency():double (0 bytes)   not inlining no type profile exists
                                @ 23  jdk.graal.compiler.core.common.cfg.BasicBlock.getLoopDepth():int (0 bytes)   not inlining no type profile exists
                                @ 27  jdk.graal.compiler.core.common.cfg.BasicBlock.getLoopDepth():int (0 bytes)   not inlining no type profile exists
                                @ 39  jdk.graal.compiler.core.common.cfg.BasicBlock.getRelativeFrequency():double (0 bytes)   not inlining no type profile exists
                                @ 43  jdk.graal.compiler.core.common.cfg.BasicBlock.getRelativeFrequency():double (0 bytes)   not inlining no type profile exists
                                @ 9  jdk.graal.compiler.core.common.alloc.BasicBlockOrderUtils$BlockOrderComparator.compare(BasicBlock, BasicBlock):int (54 bytes)   relevance-based (relevance=1.000000, probability=2.268449, bonus=1.000000, nodes=47 <= 300.000000)
                              @ 66  jdk.graal.compiler.core.common.alloc.BasicBlockOrderUtils$BlockOrderComparator.compare(Object, Object):int (13 bytes)   relevance-based (relevance=9.581071, probability=2.485929, bonus=1.000000, nodes=99 <= 300.000000)
                              @ 1  java.util.HashMap$HashIterator.nextNode():HashMap$Node (100 bytes)   not inlining too large previous low-level graph (low-level-nodes: 450, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=53)
                            @ 16  java.lang.String.checkBoundsOffCount(int, int, int):int (10 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                              @ 3  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=8)
                                @ 6  jdk.internal.util.Preconditions.checkFromToIndex(int, int, int, BiFunction):int (24 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=14 <= 300.000000)
                              @ 6  java.lang.String.checkBoundsBeginEnd(int, int, int):void (11 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=13 <= 300.000000)
                              @ 6  jdk.internal.util.Preconditions.checkFromIndexSize(int, int, int, BiFunction):int (25 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=15 <= 300.000000)
                              @ 21  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=9)
                              @ 36  java.lang.StringLatin1.getChars(byte[], int, int, char[], int):void (12 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=40 <= 300.000000)
                            @ 12  java.nio.CharBuffer.<init>(int, int, int, int, char[], int, MemorySegment):void (24 bytes)   inline method (bytecode parsing)
                            @ 2  java.nio.CharBuffer.limit(int):CharBuffer (8 bytes)   inline method (bytecode parsing)
                                    @ 2  java.nio.Buffer.limit(int):Buffer (65 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=27 <= 300.000000)
                                  @ 39  java.nio.CharBuffer.limit(int):Buffer (6 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=29 <= 300.000000)
                            @ 2  java.nio.CharBuffer.position(int):CharBuffer (8 bytes)   inline method (bytecode parsing)
                                    @ 2  java.nio.Buffer.position(int):Buffer (52 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=16 <= 300.000000)
                                  @ 45  java.nio.CharBuffer.position(int):Buffer (6 bytes)   relevance-based (relevance=1.022803, probability=1.000000, bonus=1.000000, nodes=18 <= 300.000000)
                                @ 8  java.nio.Buffer.<init>(int, int, int, int, MemorySegment):void (105 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=56 <= 300.000000)
                              @ 8  java.nio.HeapCharBuffer.<init>(char[], int, int, MemorySegment):void (23 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=68 <= 300.000000)
                            @ 18  jdk.graal.compiler.replacements.AllocationSnippets.allocateInstanceImpl(Word, UnsignedWord, boolean, AllocationSnippets$FillContent, boolean, boolean, AllocationSnippets$AllocationProfilingData):Object (143 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getTLABInfo():Word (5 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getThread():Word (8 bytes)   inline method (bytecode parsing)
                                  @ 4  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.registerAsWord(Register):Word (7 bytes)   inline method (bytecode parsing)
                              @ 9  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.readTlabTop(Word):Word (5 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.readTlabTop(Word):Word (17 bytes)   inline method (bytecode parsing)
                              @ 17  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.readTlabEnd(Word):Word (5 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.readTlabEnd(Word):Word (17 bytes)   inline method (bytecode parsing)
                              @ 35  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.useTLAB():boolean (7 bytes)   inline method (bytecode parsing)
                              @ 47  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.shouldAllocateInTLAB(UnsignedWord, boolean):boolean (33 bytes)   inline method (bytecode parsing)
                              @ 77  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.writeTlabTop(Word, Word):void (6 bytes)   inline method (bytecode parsing)
                                @ 2  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.writeTlabTop(Word, Word):void (15 bytes)   inline method (bytecode parsing)
                              @ 84  jdk.graal.compiler.replacements.AllocationSnippets.emitPrefetchAllocate(Word, boolean):void (61 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getPrefetchStyle():int (7 bytes)   inline method (bytecode parsing)
                                @ 9  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getPrefetchLines(boolean):int (18 bytes)   inline method (bytecode parsing)
                                @ 14  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getPrefetchStepSize():int (7 bytes)   inline method (bytecode parsing)
                                @ 20  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getPrefetchDistance():int (7 bytes)   inline method (bytecode parsing)
                              @ 103  jdk.graal.compiler.replacements.AllocationSnippets.formatObject(Word, UnsignedWord, Word, AllocationSnippets$FillContent, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):Object (41 bytes)   inline method (bytecode parsing)
                                @ 4  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.initializeObjectHeader(Word, Word, boolean):void (29 bytes)   inline method (bytecode parsing)
                                  @ 25  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.initializeObjectHeader(Word, Word, KlassPointer):void (20 bytes)   inline method (bytecode parsing)
                                @ 8  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.instanceHeaderSize():int (7 bytes)   inline method (bytecode parsing)
                                @ 27  jdk.graal.compiler.replacements.AllocationSnippets.fillContents(Word, AllocationSnippets$FillContent, int, UnsignedWord, boolean, boolean, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):void (58 bytes)   inline method (bytecode parsing)
                                  @ 22  jdk.graal.compiler.replacements.AllocationSnippets.zeroMemory(Word, int, UnsignedWord, boolean, boolean, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):void (19 bytes)   inline method (bytecode parsing)
                                    @ 15  jdk.graal.compiler.replacements.AllocationSnippets.fillMemory(long, Word, int, UnsignedWord, boolean, boolean, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):void (194 bytes)   inline method (bytecode parsing)
                                      @ 17  jdk.graal.compiler.replacements.ReplacementsUtil.dynamicAssert(boolean, String):void (12 bytes)   inline method (bytecode parsing)
                                      @ 56  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                                      @ 89  jdk.graal.compiler.replacements.ReplacementsUtil.dynamicAssert(boolean, String):void (12 bytes)   inline method (bytecode parsing)
                                      @ 153  jdk.graal.compiler.replacements.ReplacementsUtil.staticAssert(boolean, String):void (12 bytes)   inline method (bytecode parsing)
                                      @ 167  jdk.graal.compiler.replacements.AllocationSnippets.fillMemoryAlignedUnrollable(long, Word, UnsignedWord, UnsignedWord, boolean, AllocationSnippets$AllocationSnippetCounters):void (68 bytes)   inline method (bytecode parsing)
                                        @ 5  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                          @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                                        @ 44  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                                      @ 190  jdk.graal.compiler.replacements.AllocationSnippets.fillMemoryAligned(long, Word, UnsignedWord, UnsignedWord, boolean, UnsignedWord, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):void (155 bytes)   inline method (bytecode parsing)
                                        @ 91  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                          @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                                        @ 105  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                          @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                                        @ 134  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                                @ 33  jdk.graal.compiler.replacements.AllocationSnippets.emitMemoryBarrierIf(boolean):void (14 bytes)   inline method (bytecode parsing)
                              @ 119  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                              @ 124  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.callNewInstanceStub(Word):Object (33 bytes)   inline method (bytecode parsing)
                                @ 21  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.nonNullOrDeopt(Object):Object (27 bytes)   inline method (bytecode parsing)
                              @ 133  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.profileAllocation(AllocationSnippets$AllocationProfilingData, UnsignedWord):void (51 bytes)   inline method (bytecode parsing)
                              @ 139  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.verifyOop(Object):Object (5 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.verifyOop(Object):Object (19 bytes)   inline method (bytecode parsing)
                            @ 12  java.nio.CharBuffer.<init>(int, int, int, int, char[], int, MemorySegment):void (24 bytes)   inline method (bytecode parsing)
                            @ 2  java.nio.CharBuffer.limit(int):CharBuffer (8 bytes)   inline method (bytecode parsing)
                                  @ 2  java.nio.Buffer.limit(int):Buffer (65 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=27 <= 300.000000)
                                @ 39  java.nio.CharBuffer.limit(int):Buffer (6 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=29 <= 300.000000)
                            @ 2  java.nio.CharBuffer.position(int):CharBuffer (8 bytes)   inline method (bytecode parsing)
                                  @ 2  java.nio.Buffer.position(int):Buffer (52 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=16 <= 300.000000)
                                @ 45  java.nio.CharBuffer.position(int):Buffer (6 bytes)   relevance-based (relevance=1.022803, probability=1.000000, bonus=1.000000, nodes=18 <= 300.000000)
                              @ 8  java.nio.Buffer.<init>(int, int, int, int, MemorySegment):void (105 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=56 <= 300.000000)
                              @ 11  java.lang.Object.equals(Object):boolean (11 bytes)   not inlining no methods remaining after filtering less frequent methods (8 methods previously)
                              @ 41  java.util.Objects.equals(Object, Object):boolean (23 bytes)   relevance-based (relevance=1.112954, probability=1.994508, bonus=1.000000, nodes=24 <= 300.000000)
                            @ 23  jdk.internal.misc.InternalLock.lock():void (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.util.concurrent.locks.ReentrantLock.lock():void (8 bytes)   inline method (bytecode parsing)
                            @ 35  jdk.internal.misc.InternalLock.unlock():void (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.util.concurrent.locks.ReentrantLock.unlock():void (10 bytes)   inline method (bytecode parsing)
                                @ 5  java.util.concurrent.locks.AbstractQueuedSynchronizer.release(int):boolean (19 bytes)   inline method (bytecode parsing)
                            @ 9  java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(int):void (20 bytes)   inline method (bytecode parsing)
                            @ 7  java.util.concurrent.locks.AbstractQueuedSynchronizer.compareAndSetState(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 15  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                            @ 21  java.util.concurrent.locks.AbstractOwnableSynchronizer.getExclusiveOwnerThread():Thread (5 bytes)   inline accessor method (bytecode parsing)
                            @ 29  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 51  java.util.concurrent.locks.AbstractQueuedSynchronizer.setState(int):void (6 bytes)   inline method (bytecode parsing)
                                @ 1  java.util.concurrent.locks.ReentrantLock$NonfairSync.initialTryLock():boolean (58 bytes)   relevance-based (relevance=1.020215, probability=1.000000, bonus=1.000000, nodes=40 <= 300.000000)
                            @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 10  java.util.concurrent.locks.AbstractQueuedSynchronizer.compareAndSetState(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 20  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                                @ 2  java.util.concurrent.locks.ReentrantLock$NonfairSync.tryAcquire(int):boolean (27 bytes)   not inlining relevance-based (relevance=0.043772, probability=0.038475, bonus=1.000000, nodes=36 > 13.131676)
                            @ 245  java.util.concurrent.locks.AbstractQueuedSynchronizer$ExclusiveNode.<init>():void (5 bytes)   inline method (bytecode parsing)
                              @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer$Node.<init>():void (5 bytes)   inline method (bytecode parsing)
                            @ 393  java.lang.Thread.interrupted():boolean (7 bytes)   inline method (bytecode parsing)
                                @ 15  java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer$Node, int, boolean, boolean, boolean, long):int (424 bytes)   not inlining relevance-based (relevance=0.033977, probability=0.029865, bonus=1.000000, nodes=197 > 10.193132)
                              @ 4  java.util.concurrent.locks.ReentrantLock$Sync.lock():void (13 bytes)   relevance-based (relevance=1.108745, probability=1.000000, bonus=1.000000, nodes=57 <= 300.000000)
                                @ 1  sun.nio.cs.StreamEncoder.ensureOpen():void (18 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 12  java.nio.CharBuffer.<init>(int, int, int, int, char[], int, MemorySegment):void (24 bytes)   inline method (bytecode parsing)
                            @ 2  java.nio.CharBuffer.limit(int):CharBuffer (8 bytes)   inline method (bytecode parsing)
                                          @ 2  java.nio.Buffer.limit(int):Buffer (65 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=27 <= 300.000000)
                                        @ 39  java.nio.CharBuffer.limit(int):Buffer (6 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=29 <= 300.000000)
                            @ 2  java.nio.CharBuffer.position(int):CharBuffer (8 bytes)   inline method (bytecode parsing)
                                          @ 2  java.nio.Buffer.position(int):Buffer (52 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=16 <= 300.000000)
                                        @ 45  java.nio.CharBuffer.position(int):Buffer (6 bytes)   relevance-based (relevance=1.022803, probability=1.000000, bonus=1.000000, nodes=18 <= 300.000000)
                                      @ 8  java.nio.Buffer.<init>(int, int, int, int, MemorySegment):void (105 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=56 <= 300.000000)
                                    @ 8  java.nio.HeapCharBuffer.<init>(char[], int, int, MemorySegment):void (23 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=68 <= 300.000000)
                                  @ 3  java.nio.CharBuffer.wrap(char[], int, int):CharBuffer (21 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=69 <= 300.000000)
                                    @ 15  java.nio.Buffer.remaining():int (20 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                            @ 4  java.nio.Buffer.capacity():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 21  java.nio.charset.CharsetEncoder.maxBytesPerChar():float (5 bytes)   inline accessor method (bytecode parsing)
                                      @ 34  java.lang.Math.min(int, int):int (11 bytes)   trivial (relevance=1.000216, probability=1.000000, bonus=1.000000, nodes=7)
                            @ 4  java.nio.Buffer.position():int (5 bytes)   inline accessor method (bytecode parsing)
                                      @ 46  sun.nio.cs.StreamEncoder.implFlushBuffer():void (15 bytes)   not inlining relevance-based (relevance=0.000216, probability=0.000216, bonus=1.000000, nodes=21 > 0.064666)
                                      @ 52  java.nio.ByteBuffer.allocate(int):ByteBuffer (20 bytes)   not inlining relevance-based (relevance=0.000216, probability=0.000216, bonus=1.000000, nodes=21 > 0.064666)
                                    @ 18  sun.nio.cs.StreamEncoder.growByteBufferIfNeeded(int):void (59 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=38 <= 300.000000)
                                    @ 22  java.nio.Buffer.hasRemaining():boolean (17 bytes)   trivial (relevance=1.000216, probability=1.000000, bonus=1.000000, nodes=9)
                                        @ 1  java.nio.CharBuffer.hasArray():boolean (20 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=12 <= 300.000000)
                                        @ 8  java.nio.ByteBuffer.hasArray():boolean (20 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=12 <= 300.000000)
                            @ 10  java.nio.Buffer.position():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 21  java.nio.Buffer.limit():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 38  java.nio.Buffer.position():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 49  java.nio.Buffer.limit():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 78  java.lang.System$2.encodeASCII(char[], int, byte[], int, int):int (11 bytes)   inline method (bytecode parsing)
                                          @ 1  java.nio.CharBuffer.array():char[] (35 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                                          @ 6  java.nio.CharBuffer.arrayOffset():int (35 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=12 <= 300.000000)
                                          @ 17  java.nio.CharBuffer.arrayOffset():int (35 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=12 <= 300.000000)
                                          @ 28  java.nio.ByteBuffer.array():byte[] (35 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                                          @ 34  java.nio.ByteBuffer.arrayOffset():int (35 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=12 <= 300.000000)
                                          @ 45  java.nio.ByteBuffer.arrayOffset():int (35 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=12 <= 300.000000)
                                          @ 75  java.lang.Math.min(int, int):int (11 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=7)
                                            @ 3  java.nio.CharBuffer.arrayOffset():int (35 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=12 <= 300.000000)
                            @ 2  java.nio.CharBuffer.position(int):CharBuffer (8 bytes)   inline method (bytecode parsing)
                                              @ 2  java.nio.Buffer.position(int):Buffer (52 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=16 <= 300.000000)
                                            @ 7  java.nio.CharBuffer.position(int):Buffer (6 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=18 <= 300.000000)
                                            @ 14  java.nio.ByteBuffer.arrayOffset():int (35 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=12 <= 300.000000)
                                                @ 2  java.nio.Buffer.position(int):Buffer (52 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=16 <= 300.000000)
                                              @ 2  java.nio.ByteBuffer.position(int):ByteBuffer (8 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=17 <= 300.000000)
                                            @ 18  java.nio.ByteBuffer.position(int):Buffer (6 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=23 <= 300.000000)
                                          @ 130  sun.nio.cs.UTF_8.updatePositions(Buffer, int, Buffer, int):void (23 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=60 <= 300.000000)
                                        @ 17  sun.nio.cs.UTF_8$Encoder.encodeArrayLoop(CharBuffer, ByteBuffer):CoderResult (137 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=137 <= 300.000000)
                                      @ 57  sun.nio.cs.UTF_8$Encoder.encodeLoop(CharBuffer, ByteBuffer):CoderResult (28 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=152 <= 300.000000)
                                      @ 79  java.nio.charset.CoderResult.isOverflow():boolean (14 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                                      @ 90  java.nio.charset.CoderResult.isUnderflow():boolean (13 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                                    @ 38  java.nio.charset.CharsetEncoder.encode(CharBuffer, ByteBuffer, boolean):CoderResult (273 bytes)   relevance-based (relevance=1.000216, probability=1.000000, bonus=1.000000, nodes=160 <= 300.000000)
                                    @ 43  java.nio.charset.CoderResult.isUnderflow():boolean (13 bytes)   trivial (relevance=1.000216, probability=1.000000, bonus=1.000000, nodes=5)
                                    @ 76  java.nio.Buffer.remaining():int (20 bytes)   relevance-based (relevance=1.000216, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                                  @ 11  sun.nio.cs.StreamEncoder.implWrite(CharBuffer):void (145 bytes)   relevance-based (relevance=1.022803, probability=1.000000, bonus=1.000000, nodes=217 <= 300.000000)
                                @ 49  sun.nio.cs.StreamEncoder.implWrite(char[], int, int):void (15 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=282 <= 300.000000)
                              @ 30  sun.nio.cs.StreamEncoder.lockedWrite(char[], int, int):void (53 bytes)   relevance-based (relevance=1.137693, probability=1.000000, bonus=1.000000, nodes=300 <= 300.000000)
                            @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 8  java.util.concurrent.locks.AbstractOwnableSynchronizer.getExclusiveOwnerThread():Thread (5 bytes)   inline accessor method (bytecode parsing)
                            @ 41  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                            @ 46  java.util.concurrent.locks.AbstractQueuedSynchronizer.setState(int):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  java.util.concurrent.locks.ReentrantLock$Sync.tryRelease(int):boolean (51 bytes)   relevance-based (relevance=1.137693, probability=1.000000, bonus=1.000000, nodes=37 <= 300.000000)
                            @ 22  java.util.concurrent.locks.AbstractQueuedSynchronizer$Node.getAndUnsetStatus(int):int (14 bytes)   inline method (bytecode parsing)
                              @ 10  jdk.internal.misc.Unsafe.getAndBitwiseAndInt(Object, long, int):int (27 bytes)   inline method (bytecode parsing)
                            @ 5  java.lang.Thread.isVirtual():boolean (5 bytes)   inline method (bytecode parsing)
                                @ 30  java.util.concurrent.locks.LockSupport.unpark(Thread):void (26 bytes)   not inlining relevance-based (relevance=0.011708, probability=0.006665, bonus=1.000000, nodes=20 > 3.512350)
                              @ 12  java.util.concurrent.locks.AbstractQueuedSynchronizer.signalNext(AbstractQueuedSynchronizer$Node):void (34 bytes)   relevance-based (relevance=1.026109, probability=0.901921, bonus=1.000000, nodes=56 <= 300.000000)
                              @ 1  sun.nio.cs.StreamEncoder.ensureOpen():void (18 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 12  java.nio.CharBuffer.<init>(int, int, int, int, char[], int, MemorySegment):void (24 bytes)   inline method (bytecode parsing)
                            @ 2  java.nio.CharBuffer.limit(int):CharBuffer (8 bytes)   inline method (bytecode parsing)
                                        @ 2  java.nio.Buffer.limit(int):Buffer (65 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=27 <= 300.000000)
                                      @ 39  java.nio.CharBuffer.limit(int):Buffer (6 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=29 <= 300.000000)
                            @ 2  java.nio.CharBuffer.position(int):CharBuffer (8 bytes)   inline method (bytecode parsing)
                                        @ 2  java.nio.Buffer.position(int):Buffer (52 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=16 <= 300.000000)
                                      @ 45  java.nio.CharBuffer.position(int):Buffer (6 bytes)   relevance-based (relevance=1.022803, probability=1.000000, bonus=1.000000, nodes=18 <= 300.000000)
                                    @ 8  java.nio.Buffer.<init>(int, int, int, int, MemorySegment):void (105 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=56 <= 300.000000)
                                  @ 8  java.nio.HeapCharBuffer.<init>(char[], int, int, MemorySegment):void (23 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=68 <= 300.000000)
                                @ 3  java.nio.CharBuffer.wrap(char[], int, int):CharBuffer (21 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=69 <= 300.000000)
                                  @ 15  java.nio.Buffer.remaining():int (20 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                            @ 4  java.nio.Buffer.capacity():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 21  java.nio.charset.CharsetEncoder.maxBytesPerChar():float (5 bytes)   inline accessor method (bytecode parsing)
                                    @ 34  java.lang.Math.min(int, int):int (11 bytes)   trivial (relevance=1.000215, probability=1.000000, bonus=1.000000, nodes=7)
                            @ 4  java.nio.Buffer.position():int (5 bytes)   inline accessor method (bytecode parsing)
                                    @ 46  sun.nio.cs.StreamEncoder.implFlushBuffer():void (15 bytes)   not inlining relevance-based (relevance=0.000215, probability=0.000215, bonus=1.000000, nodes=21 > 0.064443)
                                    @ 52  java.nio.ByteBuffer.allocate(int):ByteBuffer (20 bytes)   not inlining relevance-based (relevance=0.000215, probability=0.000215, bonus=1.000000, nodes=21 > 0.064443)
                                  @ 18  sun.nio.cs.StreamEncoder.growByteBufferIfNeeded(int):void (59 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=38 <= 300.000000)
                                  @ 22  java.nio.Buffer.hasRemaining():boolean (17 bytes)   trivial (relevance=1.000215, probability=1.000000, bonus=1.000000, nodes=9)
                                      @ 1  java.nio.CharBuffer.hasArray():boolean (20 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=12 <= 300.000000)
                                      @ 8  java.nio.ByteBuffer.hasArray():boolean (20 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=12 <= 300.000000)
                            @ 10  java.nio.Buffer.position():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 21  java.nio.Buffer.limit():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 38  java.nio.Buffer.position():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 49  java.nio.Buffer.limit():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 78  java.lang.System$2.encodeASCII(char[], int, byte[], int, int):int (11 bytes)   inline method (bytecode parsing)
                                        @ 1  java.nio.CharBuffer.array():char[] (35 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                                        @ 6  java.nio.CharBuffer.arrayOffset():int (35 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=12 <= 300.000000)
                                        @ 17  java.nio.CharBuffer.arrayOffset():int (35 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=12 <= 300.000000)
                                        @ 28  java.nio.ByteBuffer.array():byte[] (35 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                                        @ 34  java.nio.ByteBuffer.arrayOffset():int (35 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=12 <= 300.000000)
                                        @ 45  java.nio.ByteBuffer.arrayOffset():int (35 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=12 <= 300.000000)
                                        @ 75  java.lang.Math.min(int, int):int (11 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=7)
                                          @ 3  java.nio.CharBuffer.arrayOffset():int (35 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=12 <= 300.000000)
                            @ 2  java.nio.CharBuffer.position(int):CharBuffer (8 bytes)   inline method (bytecode parsing)
                                            @ 2  java.nio.Buffer.position(int):Buffer (52 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=16 <= 300.000000)
                                          @ 7  java.nio.CharBuffer.position(int):Buffer (6 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=18 <= 300.000000)
                                          @ 14  java.nio.ByteBuffer.arrayOffset():int (35 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=12 <= 300.000000)
                                              @ 2  java.nio.Buffer.position(int):Buffer (52 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=16 <= 300.000000)
                                            @ 2  java.nio.ByteBuffer.position(int):ByteBuffer (8 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=17 <= 300.000000)
                                          @ 18  java.nio.ByteBuffer.position(int):Buffer (6 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=23 <= 300.000000)
                                        @ 130  sun.nio.cs.UTF_8.updatePositions(Buffer, int, Buffer, int):void (23 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=60 <= 300.000000)
                                      @ 17  sun.nio.cs.UTF_8$Encoder.encodeArrayLoop(CharBuffer, ByteBuffer):CoderResult (137 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=137 <= 300.000000)
                                    @ 57  sun.nio.cs.UTF_8$Encoder.encodeLoop(CharBuffer, ByteBuffer):CoderResult (28 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=152 <= 300.000000)
                                    @ 79  java.nio.charset.CoderResult.isOverflow():boolean (14 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                                    @ 90  java.nio.charset.CoderResult.isUnderflow():boolean (13 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                                  @ 38  java.nio.charset.CharsetEncoder.encode(CharBuffer, ByteBuffer, boolean):CoderResult (273 bytes)   relevance-based (relevance=1.000215, probability=1.000000, bonus=1.000000, nodes=160 <= 300.000000)
                                  @ 43  java.nio.charset.CoderResult.isUnderflow():boolean (13 bytes)   trivial (relevance=1.000215, probability=1.000000, bonus=1.000000, nodes=5)
                                  @ 76  java.nio.Buffer.remaining():int (20 bytes)   relevance-based (relevance=1.000215, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                                @ 11  sun.nio.cs.StreamEncoder.implWrite(CharBuffer):void (145 bytes)   relevance-based (relevance=1.022803, probability=1.000000, bonus=1.000000, nodes=217 <= 300.000000)
                              @ 49  sun.nio.cs.StreamEncoder.implWrite(char[], int, int):void (15 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=282 <= 300.000000)
                            @ 48  java.lang.Character.isWhitespace(char):boolean (5 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.Character.isWhitespace(int):boolean (9 bytes)   inline method (bytecode parsing)
                                  @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                                @ 36  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=8)
                                  @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=9)
                            @ 3  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                                  @ 12  java.lang.StringLatin1.charAt(byte[], int):char (15 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                                @ 50  java.lang.String.charAt(int):char (25 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=16 <= 300.000000)
                              @ 1  sun.reflect.generics.parser.SignatureParser.current():char (59 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=31 <= 300.000000)
                              @ 1  java.lang.CharacterData.of(int):CharacterData (136 bytes)   trivial (relevance=1.000000, probability=8.218457, bonus=1.000000, nodes=8)
                                @ 2  java.lang.CharacterDataLatin1.getProperties(int):int (11 bytes)   trivial (relevance=1.000000, probability=8.218457, bonus=1.000000, nodes=8)
                              @ 5  java.lang.CharacterDataLatin1.isWhitespace(int):boolean (23 bytes)   relevance-based (relevance=1.000000, probability=8.218457, bonus=1.000000, nodes=13 <= 300.000000)
                                  @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=8.218457, bonus=1.000000, nodes=5)
                                @ 36  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000000, probability=8.218457, bonus=1.000000, nodes=8)
                              @ 55  sun.reflect.generics.parser.SignatureParser.advance():void (53 bytes)   relevance-based (relevance=1.000000, probability=8.218457, bonus=1.000000, nodes=20 <= 300.000000)
                                  @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=8.218457, bonus=1.000000, nodes=5)
                                @ 36  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000000, probability=8.218457, bonus=1.000000, nodes=8)
                                  @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=8.218457, bonus=1.000000, nodes=9)
                            @ 3  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                                  @ 12  java.lang.StringLatin1.charAt(byte[], int):char (15 bytes)   relevance-based (relevance=1.000000, probability=8.218457, bonus=1.000000, nodes=11 <= 300.000000)
                                @ 50  java.lang.String.charAt(int):char (25 bytes)   relevance-based (relevance=1.000000, probability=8.218457, bonus=1.000000, nodes=16 <= 300.000000)
                              @ 59  sun.reflect.generics.parser.SignatureParser.current():char (59 bytes)   relevance-based (relevance=1.000000, probability=8.218457, bonus=1.000000, nodes=31 <= 300.000000)
                              @ 8  jdk.internal.misc.Unsafe.convEndian(boolean, short):short (16 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=20 <= 300.000000)
                            @ 18  jdk.internal.misc.InternalLock.lock():void (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.util.concurrent.locks.ReentrantLock.lock():void (8 bytes)   inline method (bytecode parsing)
                            @ 26  jdk.internal.misc.InternalLock.unlock():void (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.util.concurrent.locks.ReentrantLock.unlock():void (10 bytes)   inline method (bytecode parsing)
                                @ 5  java.util.concurrent.locks.AbstractQueuedSynchronizer.release(int):boolean (19 bytes)   inline method (bytecode parsing)
                            @ 9  java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(int):void (20 bytes)   inline method (bytecode parsing)
                            @ 7  java.util.concurrent.locks.AbstractQueuedSynchronizer.compareAndSetState(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 15  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                            @ 21  java.util.concurrent.locks.AbstractOwnableSynchronizer.getExclusiveOwnerThread():Thread (5 bytes)   inline accessor method (bytecode parsing)
                            @ 29  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 51  java.util.concurrent.locks.AbstractQueuedSynchronizer.setState(int):void (6 bytes)   inline method (bytecode parsing)
                                @ 1  java.util.concurrent.locks.ReentrantLock$NonfairSync.initialTryLock():boolean (58 bytes)   relevance-based (relevance=1.020111, probability=1.000000, bonus=1.000000, nodes=40 <= 300.000000)
                            @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 10  java.util.concurrent.locks.AbstractQueuedSynchronizer.compareAndSetState(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 20  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                                @ 2  java.util.concurrent.locks.ReentrantLock$NonfairSync.tryAcquire(int):boolean (27 bytes)   not inlining relevance-based (relevance=0.043772, probability=0.038475, bonus=1.000000, nodes=36 > 13.131676)
                            @ 245  java.util.concurrent.locks.AbstractQueuedSynchronizer$ExclusiveNode.<init>():void (5 bytes)   inline method (bytecode parsing)
                              @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer$Node.<init>():void (5 bytes)   inline method (bytecode parsing)
                            @ 393  java.lang.Thread.interrupted():boolean (7 bytes)   inline method (bytecode parsing)
                                @ 15  java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer$Node, int, boolean, boolean, boolean, long):int (424 bytes)   not inlining relevance-based (relevance=0.033977, probability=0.029865, bonus=1.000000, nodes=197 > 10.193132)
                              @ 4  java.util.concurrent.locks.ReentrantLock$Sync.lock():void (13 bytes)   relevance-based (relevance=1.108135, probability=1.000000, bonus=1.000000, nodes=57 <= 300.000000)
                                @ 1  sun.nio.cs.StreamEncoder.isOpen():boolean (13 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                            @ 4  java.nio.Buffer.position():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 12  java.nio.Buffer.limit():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 20  java.nio.Buffer.position():int (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 11  sun.nio.cs.StreamEncoder.writeBytes():void (139 bytes)   not inlining too large previous low-level graph (low-level-nodes: 629, relevance=1.000000, probability=0.999786, bonus=1.000000, nodes=41)
                                @ 8  sun.nio.cs.StreamEncoder.implFlushBuffer():void (15 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=21 <= 300.000000)
                              @ 22  sun.nio.cs.StreamEncoder.lockedFlushBuffer():void (25 bytes)   relevance-based (relevance=1.137693, probability=1.000000, bonus=1.000000, nodes=29 <= 300.000000)
                            @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 8  java.util.concurrent.locks.AbstractOwnableSynchronizer.getExclusiveOwnerThread():Thread (5 bytes)   inline accessor method (bytecode parsing)
                            @ 41  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                            @ 46  java.util.concurrent.locks.AbstractQueuedSynchronizer.setState(int):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  java.util.concurrent.locks.ReentrantLock$Sync.tryRelease(int):boolean (51 bytes)   relevance-based (relevance=1.137693, probability=1.000000, bonus=1.000000, nodes=37 <= 300.000000)
                            @ 22  java.util.concurrent.locks.AbstractQueuedSynchronizer$Node.getAndUnsetStatus(int):int (14 bytes)   inline method (bytecode parsing)
                              @ 10  jdk.internal.misc.Unsafe.getAndBitwiseAndInt(Object, long, int):int (27 bytes)   inline method (bytecode parsing)
                            @ 5  java.lang.Thread.isVirtual():boolean (5 bytes)   inline method (bytecode parsing)
                                @ 30  java.util.concurrent.locks.LockSupport.unpark(Thread):void (26 bytes)   not inlining relevance-based (relevance=0.011708, probability=0.006668, bonus=1.000000, nodes=20 > 3.512350)
                              @ 12  java.util.concurrent.locks.AbstractQueuedSynchronizer.signalNext(AbstractQueuedSynchronizer$Node):void (34 bytes)   relevance-based (relevance=1.026674, probability=0.902417, bonus=1.000000, nodes=56 <= 300.000000)
                                @ 2  org.graalvm.collections.EconomicMapImpl.getRawValue(int):Object (11 bytes)   relevance-based (relevance=1.048316, probability=1.000000, bonus=1.000000, nodes=10 <= 300.000000)
                              @ 11  org.graalvm.collections.EconomicMapImpl.getValue(int):Object (23 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=19 <= 300.000000)
                            @ 23  jdk.internal.misc.InternalLock.lock():void (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.util.concurrent.locks.ReentrantLock.lock():void (8 bytes)   inline method (bytecode parsing)
                            @ 35  jdk.internal.misc.InternalLock.unlock():void (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.util.concurrent.locks.ReentrantLock.unlock():void (10 bytes)   inline method (bytecode parsing)
                                @ 5  java.util.concurrent.locks.AbstractQueuedSynchronizer.release(int):boolean (19 bytes)   inline method (bytecode parsing)
                              @ 7  sun.nio.cs.StreamEncoder.write(char[], int, int):void (82 bytes)   not inlining too large previous low-level graph (low-level-nodes: 631, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=61)
                              @ 15  java.nio.Buffer.remaining():int (20 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                            @ 4  java.nio.Buffer.capacity():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 21  java.nio.charset.CharsetEncoder.maxBytesPerChar():float (5 bytes)   inline accessor method (bytecode parsing)
                                @ 34  java.lang.Math.min(int, int):int (11 bytes)   trivial (relevance=1.000214, probability=1.000000, bonus=1.000000, nodes=7)
                            @ 4  java.nio.Buffer.position():int (5 bytes)   inline accessor method (bytecode parsing)
                                @ 46  sun.nio.cs.StreamEncoder.implFlushBuffer():void (15 bytes)   not inlining relevance-based (relevance=0.000214, probability=0.000214, bonus=1.000000, nodes=21 > 0.064309)
                                @ 52  java.nio.ByteBuffer.allocate(int):ByteBuffer (20 bytes)   not inlining relevance-based (relevance=0.000214, probability=0.000214, bonus=1.000000, nodes=21 > 0.064309)
                              @ 18  sun.nio.cs.StreamEncoder.growByteBufferIfNeeded(int):void (59 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=38 <= 300.000000)
                              @ 22  java.nio.Buffer.hasRemaining():boolean (17 bytes)   trivial (relevance=1.000214, probability=1.000000, bonus=1.000000, nodes=9)
                                  @ 1  java.nio.CharBuffer.hasArray():boolean (20 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=12 <= 300.000000)
                                  @ 8  java.nio.ByteBuffer.hasArray():boolean (20 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=12 <= 300.000000)
                            @ 10  java.nio.Buffer.position():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 21  java.nio.Buffer.limit():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 38  java.nio.Buffer.position():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 49  java.nio.Buffer.limit():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 78  java.lang.System$2.encodeASCII(char[], int, byte[], int, int):int (11 bytes)   inline method (bytecode parsing)
                                    @ 1  java.nio.CharBuffer.array():char[] (35 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                                    @ 6  java.nio.CharBuffer.arrayOffset():int (35 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=12 <= 300.000000)
                                    @ 17  java.nio.CharBuffer.arrayOffset():int (35 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=12 <= 300.000000)
                                    @ 28  java.nio.ByteBuffer.array():byte[] (35 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                                    @ 34  java.nio.ByteBuffer.arrayOffset():int (35 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=12 <= 300.000000)
                                    @ 45  java.nio.ByteBuffer.arrayOffset():int (35 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=12 <= 300.000000)
                                    @ 75  java.lang.Math.min(int, int):int (11 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=7)
                                      @ 3  java.nio.CharBuffer.arrayOffset():int (35 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=12 <= 300.000000)
                            @ 2  java.nio.CharBuffer.position(int):CharBuffer (8 bytes)   inline method (bytecode parsing)
                                        @ 2  java.nio.Buffer.position(int):Buffer (52 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=16 <= 300.000000)
                                      @ 7  java.nio.CharBuffer.position(int):Buffer (6 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=18 <= 300.000000)
                                      @ 14  java.nio.ByteBuffer.arrayOffset():int (35 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=12 <= 300.000000)
                                          @ 2  java.nio.Buffer.position(int):Buffer (52 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=16 <= 300.000000)
                                        @ 2  java.nio.ByteBuffer.position(int):ByteBuffer (8 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=17 <= 300.000000)
                                      @ 18  java.nio.ByteBuffer.position(int):Buffer (6 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=23 <= 300.000000)
                                    @ 130  sun.nio.cs.UTF_8.updatePositions(Buffer, int, Buffer, int):void (23 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=65 <= 300.000000)
                                  @ 17  sun.nio.cs.UTF_8$Encoder.encodeArrayLoop(CharBuffer, ByteBuffer):CoderResult (137 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=150 <= 300.000000)
                                @ 57  sun.nio.cs.UTF_8$Encoder.encodeLoop(CharBuffer, ByteBuffer):CoderResult (28 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=167 <= 300.000000)
                                @ 79  java.nio.charset.CoderResult.isOverflow():boolean (14 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                                @ 90  java.nio.charset.CoderResult.isUnderflow():boolean (13 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                              @ 38  java.nio.charset.CharsetEncoder.encode(CharBuffer, ByteBuffer, boolean):CoderResult (273 bytes)   relevance-based (relevance=1.000214, probability=1.000000, bonus=1.000000, nodes=175 <= 300.000000)
                              @ 43  java.nio.charset.CoderResult.isUnderflow():boolean (13 bytes)   trivial (relevance=1.000214, probability=1.000000, bonus=1.000000, nodes=5)
                              @ 76  java.nio.Buffer.remaining():int (20 bytes)   relevance-based (relevance=1.000214, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                            @ 4  java.nio.Buffer.capacity():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 21  java.nio.charset.CharsetEncoder.maxBytesPerChar():float (5 bytes)   inline accessor method (bytecode parsing)
                              @ 34  java.lang.Math.min(int, int):int (11 bytes)   trivial (relevance=1.000214, probability=1.000000, bonus=1.000000, nodes=7)
                            @ 4  java.nio.Buffer.position():int (5 bytes)   inline accessor method (bytecode parsing)
                              @ 46  sun.nio.cs.StreamEncoder.implFlushBuffer():void (15 bytes)   not inlining relevance-based (relevance=0.000214, probability=0.000214, bonus=1.000000, nodes=21 > 0.064309)
                              @ 52  java.nio.ByteBuffer.allocate(int):ByteBuffer (20 bytes)   not inlining relevance-based (relevance=0.000214, probability=0.000214, bonus=1.000000, nodes=21 > 0.064309)
                              @ 5  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                                @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                              @ 9  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=8)
                                  @ 41  java.lang.Math.max(long, long):long (12 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=7)
                                  @ 44  java.lang.Math.min(long, long):long (12 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=7)
                                @ 5  java.lang.Math.clamp(long, int, int):int (49 bytes)   relevance-based (relevance=1.000010, probability=1.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                  @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                                @ 11  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000010, probability=1.000000, bonus=1.000000, nodes=8)
                                @ 42  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000010, probability=1.000000, bonus=1.000000, nodes=5)
                              @ 14  java.lang.String.indexOf(byte[], byte, int, String, int):int (101 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=43 <= 300.000000)
                                @ 41  java.lang.Math.max(long, long):long (12 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=7)
                                @ 44  java.lang.Math.min(long, long):long (12 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=7)
                              @ 5  java.lang.Math.clamp(long, int, int):int (49 bytes)   relevance-based (relevance=1.000010, probability=1.000000, bonus=1.000000, nodes=15 <= 300.000000)
                                @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                              @ 11  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000010, probability=1.000000, bonus=1.000000, nodes=8)
                              @ 42  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000010, probability=1.000000, bonus=1.000000, nodes=5)
                              @ 1  java.util.ArrayList$SubList.checkForComodification():void (23 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=9)
                              @ 41  java.lang.Math.max(long, long):long (12 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=7)
                              @ 44  java.lang.Math.min(long, long):long (12 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=7)
                                @ 1  java.nio.CharBuffer.hasArray():boolean (20 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=12 <= 300.000000)
                                @ 8  java.nio.ByteBuffer.hasArray():boolean (20 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=12 <= 300.000000)
                            @ 10  java.nio.Buffer.position():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 21  java.nio.Buffer.limit():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 38  java.nio.Buffer.position():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 49  java.nio.Buffer.limit():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 78  java.lang.System$2.encodeASCII(char[], int, byte[], int, int):int (11 bytes)   inline method (bytecode parsing)
                                  @ 1  java.nio.CharBuffer.array():char[] (35 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                                  @ 6  java.nio.CharBuffer.arrayOffset():int (35 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=12 <= 300.000000)
                                  @ 17  java.nio.CharBuffer.arrayOffset():int (35 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=12 <= 300.000000)
                                  @ 28  java.nio.ByteBuffer.array():byte[] (35 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                                  @ 34  java.nio.ByteBuffer.arrayOffset():int (35 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=12 <= 300.000000)
                                  @ 45  java.nio.ByteBuffer.arrayOffset():int (35 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=12 <= 300.000000)
                                  @ 75  java.lang.Math.min(int, int):int (11 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=7)
                                    @ 3  java.nio.CharBuffer.arrayOffset():int (35 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=12 <= 300.000000)
                            @ 2  java.nio.CharBuffer.position(int):CharBuffer (8 bytes)   inline method (bytecode parsing)
                                      @ 2  java.nio.Buffer.position(int):Buffer (52 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=16 <= 300.000000)
                                    @ 7  java.nio.CharBuffer.position(int):Buffer (6 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=18 <= 300.000000)
                                    @ 14  java.nio.ByteBuffer.arrayOffset():int (35 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=12 <= 300.000000)
                                        @ 2  java.nio.Buffer.position(int):Buffer (52 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=16 <= 300.000000)
                                      @ 2  java.nio.ByteBuffer.position(int):ByteBuffer (8 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=17 <= 300.000000)
                                    @ 18  java.nio.ByteBuffer.position(int):Buffer (6 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=23 <= 300.000000)
                                  @ 130  sun.nio.cs.UTF_8.updatePositions(Buffer, int, Buffer, int):void (23 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=65 <= 300.000000)
                                @ 17  sun.nio.cs.UTF_8$Encoder.encodeArrayLoop(CharBuffer, ByteBuffer):CoderResult (137 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=150 <= 300.000000)
                              @ 57  sun.nio.cs.UTF_8$Encoder.encodeLoop(CharBuffer, ByteBuffer):CoderResult (28 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=167 <= 300.000000)
                              @ 79  java.nio.charset.CoderResult.isOverflow():boolean (14 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                              @ 90  java.nio.charset.CoderResult.isUnderflow():boolean (13 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                            @ 10  java.nio.Buffer.position():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 21  java.nio.Buffer.limit():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 38  java.nio.Buffer.position():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 49  java.nio.Buffer.limit():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 78  java.lang.System$2.encodeASCII(char[], int, byte[], int, int):int (11 bytes)   inline method (bytecode parsing)
                              @ 1  java.nio.CharBuffer.array():char[] (35 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                              @ 6  java.nio.CharBuffer.arrayOffset():int (35 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=12 <= 300.000000)
                              @ 17  java.nio.CharBuffer.arrayOffset():int (35 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=12 <= 300.000000)
                              @ 28  java.nio.ByteBuffer.array():byte[] (35 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                              @ 34  java.nio.ByteBuffer.arrayOffset():int (35 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=12 <= 300.000000)
                              @ 45  java.nio.ByteBuffer.arrayOffset():int (35 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=12 <= 300.000000)
                              @ 75  java.lang.Math.min(int, int):int (11 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=7)
                                @ 3  java.nio.CharBuffer.arrayOffset():int (35 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=12 <= 300.000000)
                            @ 2  java.nio.CharBuffer.position(int):CharBuffer (8 bytes)   inline method (bytecode parsing)
                                  @ 2  java.nio.Buffer.position(int):Buffer (52 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=16 <= 300.000000)
                                @ 7  java.nio.CharBuffer.position(int):Buffer (6 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=18 <= 300.000000)
                                @ 14  java.nio.ByteBuffer.arrayOffset():int (35 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=12 <= 300.000000)
                                    @ 2  java.nio.Buffer.position(int):Buffer (52 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=16 <= 300.000000)
                                  @ 2  java.nio.ByteBuffer.position(int):ByteBuffer (8 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=17 <= 300.000000)
                                @ 18  java.nio.ByteBuffer.position(int):Buffer (6 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=23 <= 300.000000)
                              @ 130  sun.nio.cs.UTF_8.updatePositions(Buffer, int, Buffer, int):void (23 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=65 <= 300.000000)
                            @ 11  jdk.internal.misc.InternalLock.lock():void (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.util.concurrent.locks.ReentrantLock.lock():void (8 bytes)   inline method (bytecode parsing)
                            @ 22  jdk.internal.misc.InternalLock.unlock():void (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.util.concurrent.locks.ReentrantLock.unlock():void (10 bytes)   inline method (bytecode parsing)
                                @ 5  java.util.concurrent.locks.AbstractQueuedSynchronizer.release(int):boolean (19 bytes)   inline method (bytecode parsing)
                            @ 9  java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(int):void (20 bytes)   inline method (bytecode parsing)
                            @ 7  java.util.concurrent.locks.AbstractQueuedSynchronizer.compareAndSetState(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 15  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                            @ 21  java.util.concurrent.locks.AbstractOwnableSynchronizer.getExclusiveOwnerThread():Thread (5 bytes)   inline accessor method (bytecode parsing)
                            @ 29  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 51  java.util.concurrent.locks.AbstractQueuedSynchronizer.setState(int):void (6 bytes)   inline method (bytecode parsing)
                                @ 1  java.util.concurrent.locks.ReentrantLock$NonfairSync.initialTryLock():boolean (58 bytes)   relevance-based (relevance=1.020031, probability=1.000000, bonus=1.000000, nodes=40 <= 300.000000)
                            @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 10  java.util.concurrent.locks.AbstractQueuedSynchronizer.compareAndSetState(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 20  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                                @ 2  java.util.concurrent.locks.ReentrantLock$NonfairSync.tryAcquire(int):boolean (27 bytes)   not inlining relevance-based (relevance=0.043772, probability=0.038475, bonus=1.000000, nodes=36 > 13.131676)
                            @ 245  java.util.concurrent.locks.AbstractQueuedSynchronizer$ExclusiveNode.<init>():void (5 bytes)   inline method (bytecode parsing)
                              @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer$Node.<init>():void (5 bytes)   inline method (bytecode parsing)
                            @ 393  java.lang.Thread.interrupted():boolean (7 bytes)   inline method (bytecode parsing)
                                @ 15  java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer$Node, int, boolean, boolean, boolean, long):int (424 bytes)   not inlining relevance-based (relevance=0.033977, probability=0.029865, bonus=1.000000, nodes=197 > 10.193132)
                              @ 4  java.util.concurrent.locks.ReentrantLock$Sync.lock():void (13 bytes)   relevance-based (relevance=1.107666, probability=1.000000, bonus=1.000000, nodes=57 <= 300.000000)
                                @ 1  java.io.PrintStream.ensureOpen():void (18 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=7)
                            @ 11  jdk.internal.misc.InternalLock.lock():void (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.util.concurrent.locks.ReentrantLock.lock():void (8 bytes)   inline method (bytecode parsing)
                            @ 157  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                            @ 23  jdk.internal.misc.InternalLock.unlock():void (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.util.concurrent.locks.ReentrantLock.unlock():void (10 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 5  java.util.concurrent.locks.AbstractQueuedSynchronizer.release(int):boolean (19 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  jdk.graal.compiler.hotspot.HotSpotTTYStreamProvider$LogStreamOptionKey$DelayedOutputStream$$Lambda/0x00007f45e01dd6d0.<init>(String):void (10 bytes)   inline method (bytecode parsing)
                            @ 210  jdk.vm.ci.hotspot.HotSpotJVMCIRuntime.getLogStream():OutputStream (9 bytes)   inline method (bytecode parsing)
                            @ 0  jdk.graal.compiler.options.OptionValues.newOptionMap():EconomicMap (7 bytes)   inline method (bytecode parsing)
                              @ 3  org.graalvm.collections.EconomicMap.create(Equivalence):EconomicMap (6 bytes)   inline method (bytecode parsing)
                                @ 2  org.graalvm.collections.EconomicMapImpl.create(Equivalence, boolean):EconomicMapImpl (13 bytes)   inline method (bytecode parsing)
                                  @ 6  org.graalvm.collections.EconomicMapImpl.<init>(Equivalence, boolean):void (30 bytes)   inline method (bytecode parsing)
                                  @ 9  org.graalvm.collections.EconomicMapImpl.intercept(EconomicMapImpl):EconomicMapImpl (2 bytes)   inline method (bytecode parsing)
                            @ 6  jdk.vm.ci.common.InitTimer.timer(String):InitTimer (19 bytes)   inline method (bytecode parsing)
                            @ 239  org.graalvm.collections.EconomicMap.create():EconomicMap (7 bytes)   inline method (bytecode parsing)
                              @ 3  org.graalvm.collections.EconomicMap.create(Equivalence):EconomicMap (6 bytes)   inline method (bytecode parsing)
                                @ 2  org.graalvm.collections.EconomicMapImpl.create(Equivalence, boolean):EconomicMapImpl (13 bytes)   inline method (bytecode parsing)
                                  @ 6  org.graalvm.collections.EconomicMapImpl.<init>(Equivalence, boolean):void (30 bytes)   inline method (bytecode parsing)
                                  @ 9  org.graalvm.collections.EconomicMapImpl.intercept(EconomicMapImpl):EconomicMapImpl (2 bytes)   inline method (bytecode parsing)
                            @ 295  java.lang.String.startsWith(String):boolean (7 bytes)   inline method (bytecode parsing)
                            @ 305  java.lang.String.length():int (11 bytes)   inline method (bytecode parsing)
                              @ 6  java.lang.String.coder():byte (15 bytes)   inline method (bytecode parsing)
                            @ 308  java.lang.String.substring(int):String (10 bytes)   inline method (bytecode parsing)
                            @ 311  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.LambdaForm$MH/0x00007f45e0002400.invoke(Object, Object):Object (25 bytes)   inline method (bytecode parsing)
                                @ 21  java.lang.invoke.DirectMethodHandle$Holder.invokeStatic(Object, Object, Object):Object (15 bytes)   inline method (bytecode parsing)
                                  @ 1  java.lang.invoke.DirectMethodHandle.internalMemberName(Object):Object (8 bytes)   inline method (bytecode parsing)
                                  @ 11  java.lang.StringConcatHelper.simpleConcat(Object, Object):String (94 bytes)   inline method (bytecode parsing)
                                    @ 1  java.lang.StringConcatHelper.stringOf(Object):String (20 bytes)   inline method (bytecode parsing)
                                      @ 5  java.lang.String.toString():String (2 bytes)   inline method (bytecode parsing)
                                    @ 11  java.lang.String.isEmpty():boolean (14 bytes)   inline method (bytecode parsing)
                                    @ 61  java.lang.StringConcatHelper.newArray(long):byte[] (40 bytes)   inline method (bytecode parsing)
                            @ 9  java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(int):void (20 bytes)   inline method (bytecode parsing)
                            @ 322  java.lang.String.startsWith(String):boolean (7 bytes)   inline method (bytecode parsing)
                            @ 7  java.util.concurrent.locks.AbstractQueuedSynchronizer.compareAndSetState(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 359  java.lang.String.length():int (11 bytes)   inline method (bytecode parsing)
                            @ 15  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                            @ 21  java.util.concurrent.locks.AbstractOwnableSynchronizer.getExclusiveOwnerThread():Thread (5 bytes)   inline accessor method (bytecode parsing)
                              @ 6  java.lang.String.coder():byte (15 bytes)   inline method (bytecode parsing)
                            @ 29  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 51  java.util.concurrent.locks.AbstractQueuedSynchronizer.setState(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 362  java.lang.String.substring(int):String (10 bytes)   inline method (bytecode parsing)
                                @ 1  java.util.concurrent.locks.ReentrantLock$NonfairSync.initialTryLock():boolean (58 bytes)   relevance-based (relevance=1.020014, probability=1.000000, bonus=1.000000, nodes=40 <= 300.000000)
                            @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 10  java.util.concurrent.locks.AbstractQueuedSynchronizer.compareAndSetState(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 20  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                                @ 2  java.util.concurrent.locks.ReentrantLock$NonfairSync.tryAcquire(int):boolean (27 bytes)   not inlining relevance-based (relevance=0.043772, probability=0.038475, bonus=1.000000, nodes=36 > 13.131676)
                            @ 8  jdk.vm.ci.services.Services.getSavedProperty(String):String (13 bytes)   inline method (bytecode parsing)
                            @ 11  java.lang.Boolean.parseBoolean(String):boolean (7 bytes)   inline method (bytecode parsing)
                            @ 24  java.util.concurrent.atomic.AtomicInteger.<init>():void (5 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.Number.<init>():void (5 bytes)   inline method (bytecode parsing)
                            @ 245  java.util.concurrent.locks.AbstractQueuedSynchronizer$ExclusiveNode.<init>():void (5 bytes)   inline method (bytecode parsing)
                              @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer$Node.<init>():void (5 bytes)   inline method (bytecode parsing)
                            @ 393  java.lang.Thread.interrupted():boolean (7 bytes)   inline method (bytecode parsing)
                                              @ 0  jdk.vm.ci.services.Services.checkJVMCIEnabled():void (17 bytes)   trivial (relevance=4.000000, probability=0.031250, bonus=1.000000, nodes=3)
                                                @ 0  java.lang.System.allowSecurityManager():boolean (13 bytes)   trivial (relevance=1.000744, probability=0.007812, bonus=1.000000, nodes=8)
                                              @ 42  java.lang.System.getSecurityManager():SecurityManager (12 bytes)   relevance-based (relevance=1.000000, probability=0.007812, bonus=1.000000, nodes=14 <= 300.000000)
                            @ 12  java.lang.IllegalStateException.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                                @ 15  java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer$Node, int, boolean, boolean, boolean, long):int (424 bytes)   not inlining relevance-based (relevance=0.033978, probability=0.029866, bonus=1.000000, nodes=197 > 10.193547)
                              @ 2  java.lang.RuntimeException.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                              @ 4  java.util.concurrent.locks.ReentrantLock$Sync.lock():void (13 bytes)   relevance-based (relevance=1.107603, probability=1.000000, bonus=1.000000, nodes=57 <= 300.000000)
                                @ 2  java.lang.Exception.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                            @ 12  java.lang.NullPointerException.<init>():void (5 bytes)   inline method (bytecode parsing)
                            @ 23  java.io.OutputStreamWriter.flushBuffer():void (8 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.RuntimeException.<init>():void (5 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.Exception.<init>():void (5 bytes)   inline method (bytecode parsing)
                                @ 1  java.io.PrintStream.ensureOpen():void (18 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=7)
                 n                                    @ 25  java.lang.NullPointerException.getExtendedNPEMessage():String (0 bytes)   not inlining it is a non-intrinsic native method
                                    @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                                  @ 4  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=8)
                 n                                      @ 16  java.lang.Throwable.fillInStackTrace(int):Throwable (0 bytes)   not inlining it is a non-intrinsic native method
              s                                         @ 37  java.lang.Throwable.fillInStackTrace():Throwable (29 bytes)   relevance-based (relevance=4.000000, probability=0.000977, bonus=1.000000, nodes=34 <= 300.000000)
                            @ 23  jdk.internal.misc.InternalLock.lock():void (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.util.concurrent.locks.ReentrantLock.lock():void (8 bytes)   inline method (bytecode parsing)
              s                                       @ 24  java.lang.NullPointerException.fillInStackTrace():Throwable (41 bytes)   relevance-based (relevance=1.000000, probability=0.000977, bonus=1.000000, nodes=65 <= 300.000000)
                            @ 35  jdk.internal.misc.InternalLock.unlock():void (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.util.concurrent.locks.ReentrantLock.unlock():void (10 bytes)   inline method (bytecode parsing)
                                @ 5  java.util.concurrent.locks.AbstractQueuedSynchronizer.release(int):boolean (19 bytes)   inline method (bytecode parsing)
                                                    @ 1  java.lang.Throwable.<init>():void (29 bytes)   relevance-based (relevance=1.000000, probability=0.000977, bonus=1.000000, nodes=73 <= 300.000000)
                                                  @ 18  java.util.Collections$UnmodifiableMap.<init>(Map):void (22 bytes)   relevance-based (relevance=1.000000, probability=0.001953, bonus=1.000000, nodes=87 <= 300.000000)
                            @ 9  java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(int):void (20 bytes)   inline method (bytecode parsing)
                                                @ 19  java.util.Collections.unmodifiableMap(Map):Map (22 bytes)   relevance-based (relevance=1.000000, probability=0.003906, bonus=1.000000, nodes=95 <= 300.000000)
                            @ 7  java.util.concurrent.locks.AbstractQueuedSynchronizer.compareAndSetState(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 15  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                            @ 21  java.util.concurrent.locks.AbstractOwnableSynchronizer.getExclusiveOwnerThread():Thread (5 bytes)   inline accessor method (bytecode parsing)
                            @ 29  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 51  java.util.concurrent.locks.AbstractQueuedSynchronizer.setState(int):void (6 bytes)   inline method (bytecode parsing)
                                      @ 1  java.util.concurrent.locks.ReentrantLock$NonfairSync.initialTryLock():boolean (58 bytes)   relevance-based (relevance=1.020014, probability=1.000000, bonus=1.000000, nodes=40 <= 300.000000)
                 n                                @ 16  java.lang.Throwable.fillInStackTrace(int):Throwable (0 bytes)   not inlining it is a non-intrinsic native method
              s                                   @ 24  java.lang.Throwable.fillInStackTrace():Throwable (29 bytes)   relevance-based (relevance=1.000000, probability=0.003906, bonus=1.000000, nodes=34 <= 300.000000)
                                                @ 2  java.lang.Throwable.<init>(String):void (34 bytes)   relevance-based (relevance=16.000000, probability=0.003906, bonus=1.000000, nodes=45 <= 300.000000)
                            @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 61  jdk.internal.misc.VM.getSavedProperties():Map (23 bytes)   relevance-based (relevance=1.000744, probability=0.007812, bonus=1.000000, nodes=147 <= 300.000000)
                            @ 10  java.util.concurrent.locks.AbstractQueuedSynchronizer.compareAndSetState(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 20  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                                      @ 2  java.util.concurrent.locks.ReentrantLock$NonfairSync.tryAcquire(int):boolean (27 bytes)   not inlining relevance-based (relevance=0.043772, probability=0.038475, bonus=1.000000, nodes=36 > 13.131676)
                                            @ 0  jdk.vm.ci.services.Services.getSavedProperties():Map (81 bytes)   relevance-based (relevance=1.000000, probability=0.031250, bonus=1.000000, nodes=201 <= 300.000000)
                            @ 245  java.util.concurrent.locks.AbstractQueuedSynchronizer$ExclusiveNode.<init>():void (5 bytes)   inline method (bytecode parsing)
                                          @ 4  java.util.Map.get(Object):Object (0 bytes)   not inlining no type profile exists
                              @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer$Node.<init>():void (5 bytes)   inline method (bytecode parsing)
                            @ 393  java.lang.Thread.interrupted():boolean (7 bytes)   inline method (bytecode parsing)
                                                @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.006592, bonus=1.000000, nodes=5)
                                              @ 14  java.lang.String.length():int (11 bytes)   trivial (relevance=2.000000, probability=0.006592, bonus=1.000000, nodes=8)
                                                @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.006592, bonus=1.000000, nodes=5)
                                              @ 18  java.lang.String.length():int (11 bytes)   trivial (relevance=2.000000, probability=0.006592, bonus=1.000000, nodes=5)
                                      @ 15  java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer$Node, int, boolean, boolean, boolean, long):int (424 bytes)   not inlining relevance-based (relevance=0.033978, probability=0.029866, bonus=1.000000, nodes=197 > 10.193547)
                                    @ 4  java.util.concurrent.locks.ReentrantLock$Sync.lock():void (13 bytes)   relevance-based (relevance=1.107603, probability=1.000000, bonus=1.000000, nodes=57 <= 300.000000)
                                                @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.003296, bonus=1.000000, nodes=5)
                                              @ 30  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000000, probability=0.003296, bonus=1.000000, nodes=5)
                            @ 39  java.io.BufferedWriter.min(int, int):int (9 bytes)   inline method (bytecode parsing)
                            @ 146  java.lang.StringUTF16.regionMatchesCI_Latin1(byte[], int, byte[], int, int):boolean (10 bytes)   inline method (bytecode parsing)
                                      @ 1  java.io.BufferedWriter.ensureOpen():void (18 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=7)
                                      @ 6  java.io.BufferedWriter.growIfNeeded(int):void (63 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=15 <= 300.000000)
                            @ 16  java.lang.String.checkBoundsOffCount(int, int, int):int (10 bytes)   inline method (bytecode parsing)
                                                  @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.003296, bonus=1.000000, nodes=5)
                                                @ 27  java.lang.String.length():int (11 bytes)   trivial (relevance=16.000000, probability=0.003296, bonus=1.000000, nodes=5)
                                                  @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.003296, bonus=1.000000, nodes=5)
                                          @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                                                @ 43  java.lang.String.length():int (11 bytes)   trivial (relevance=16.000000, probability=0.003296, bonus=1.000000, nodes=8)
                                        @ 3  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=8)
                                                @ 70  java.lang.String.coder():byte (15 bytes)   trivial (relevance=4.000000, probability=0.000824, bonus=1.000000, nodes=5)
                                          @ 6  jdk.internal.util.Preconditions.checkFromToIndex(int, int, int, BiFunction):int (24 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                                        @ 6  java.lang.String.checkBoundsBeginEnd(int, int, int):void (11 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=10 <= 300.000000)
                                                @ 78  java.lang.String.coder():byte (15 bytes)   trivial (relevance=2.000000, probability=0.000824, bonus=1.000000, nodes=5)
                                        @ 6  jdk.internal.util.Preconditions.checkFromIndexSize(int, int, int, BiFunction):int (25 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=15 <= 300.000000)
                            @ 58  java.lang.Character.toUpperCase(char):char (6 bytes)   inline method (bytecode parsing)
                                        @ 21  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=9)
                              @ 1  java.lang.Character.toUpperCase(int):int (9 bytes)   inline method (bytecode parsing)
                            @ 75  java.lang.Character.toLowerCase(char):char (6 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.Character.toLowerCase(int):int (9 bytes)   inline method (bytecode parsing)
                            @ 80  java.lang.Character.toLowerCase(char):char (6 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.Character.toLowerCase(int):int (9 bytes)   inline method (bytecode parsing)
                                        @ 36  java.lang.StringLatin1.getChars(byte[], int, int, char[], int):void (12 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=38 <= 300.000000)
                                      @ 60  java.lang.String.getChars(int, int, char[], int):void (55 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=58 <= 300.000000)
                                    @ 30  java.io.BufferedWriter.implWrite(String, int, int):void (100 bytes)   relevance-based (relevance=1.137693, probability=1.000000, bonus=1.000000, nodes=96 <= 300.000000)
                                                  @ 50  java.lang.CharacterDataLatin1.toUpperCase(int):int (67 bytes)   relevance-based (relevance=4.000000, probability=0.000183, bonus=1.000000, nodes=52 <= 300.000000)
                            @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 8  java.util.concurrent.locks.AbstractOwnableSynchronizer.getExclusiveOwnerThread():Thread (5 bytes)   inline accessor method (bytecode parsing)
                                                  @ 1  java.lang.CharacterData.of(int):CharacterData (136 bytes)   trivial (relevance=32.000000, probability=0.000183, bonus=1.000000, nodes=8)
                            @ 41  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                            @ 46  java.util.concurrent.locks.AbstractQueuedSynchronizer.setState(int):void (6 bytes)   inline method (bytecode parsing)
                                                  @ 5  java.lang.CharacterDataLatin1.toUpperCase(int):int (67 bytes)   relevance-based (relevance=32.000000, probability=0.000183, bonus=1.000000, nodes=52 <= 300.000000)
                                    @ 2  java.util.concurrent.locks.ReentrantLock$Sync.tryRelease(int):boolean (51 bytes)   relevance-based (relevance=1.137693, probability=1.000000, bonus=1.000000, nodes=37 <= 300.000000)
                                                  @ 1  java.lang.CharacterData.of(int):CharacterData (136 bytes)   trivial (relevance=16.000000, probability=0.000092, bonus=1.000000, nodes=8)
                            @ 22  java.util.concurrent.locks.AbstractQueuedSynchronizer$Node.getAndUnsetStatus(int):int (14 bytes)   inline method (bytecode parsing)
                                                  @ 5  java.lang.CharacterDataLatin1.toLowerCase(int):int (44 bytes)   relevance-based (relevance=16.000000, probability=0.000092, bonus=1.000000, nodes=15 <= 300.000000)
                              @ 10  jdk.internal.misc.Unsafe.getAndBitwiseAndInt(Object, long, int):int (27 bytes)   inline method (bytecode parsing)
                                                  @ 1  java.lang.CharacterData.of(int):CharacterData (136 bytes)   trivial (relevance=16.000000, probability=0.000092, bonus=1.000000, nodes=8)
                                                  @ 5  java.lang.CharacterDataLatin1.toLowerCase(int):int (44 bytes)   relevance-based (relevance=16.000000, probability=0.000092, bonus=1.000000, nodes=15 <= 300.000000)
                            @ 5  java.lang.Thread.isVirtual():boolean (5 bytes)   inline method (bytecode parsing)
                                                @ 131  java.lang.StringLatin1.regionMatchesCI_UTF16(byte[], int, byte[], int, int):boolean (93 bytes)   relevance-based (relevance=1.000000, probability=0.000412, bonus=1.000000, nodes=175 <= 300.000000)
                                      @ 30  java.util.concurrent.locks.LockSupport.unpark(Thread):void (26 bytes)   not inlining relevance-based (relevance=0.011708, probability=0.006672, bonus=1.000000, nodes=20 > 3.512350)
                                    @ 12  java.util.concurrent.locks.AbstractQueuedSynchronizer.signalNext(AbstractQueuedSynchronizer$Node):void (34 bytes)   relevance-based (relevance=1.027166, probability=0.902850, bonus=1.000000, nodes=56 <= 300.000000)
                                  @ 7  java.io.BufferedWriter.write(String, int, int):void (82 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=265 <= 300.000000)
                                                  @ 32  java.lang.CharacterDataLatin1.equalsIgnoreCase(byte, byte):boolean (63 bytes)   relevance-based (relevance=2.000000, probability=0.000275, bonus=1.000000, nodes=42 <= 300.000000)
                                                @ 98  java.lang.StringLatin1.regionMatchesCI(byte[], int, byte[], int, int):boolean (45 bytes)   relevance-based (relevance=1.000000, probability=0.000412, bonus=1.000000, nodes=64 <= 300.000000)
                                @ 9  java.io.Writer.write(String):void (11 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=271 <= 300.000000)
                                              @ 33  java.lang.String.regionMatches(boolean, int, String, int, int):boolean (150 bytes)   relevance-based (relevance=1.000000, probability=0.003296, bonus=1.000000, nodes=254 <= 300.000000)
                                            @ 3  java.lang.String.equalsIgnoreCase(String):boolean (45 bytes)   relevance-based (relevance=3.377512, probability=0.026367, bonus=1.000000, nodes=271 <= 300.000000)
                            @ 18  jdk.internal.misc.InternalLock.lock():void (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.util.concurrent.locks.ReentrantLock.lock():void (8 bytes)   inline method (bytecode parsing)
                            @ 26  jdk.internal.misc.InternalLock.unlock():void (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.util.concurrent.locks.ReentrantLock.unlock():void (10 bytes)   inline method (bytecode parsing)
                                @ 5  java.util.concurrent.locks.AbstractQueuedSynchronizer.release(int):boolean (19 bytes)   inline method (bytecode parsing)
                                          @ 0  jdk.vm.ci.common.InitTimer.isEnabled():boolean (37 bytes)   not inlining relevance-based (relevance=2.000000, probability=0.062500, bonus=1.000000, nodes=499 > 300.000000)
                            @ 9  java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(int):void (20 bytes)   inline method (bytecode parsing)
                            @ 28  java.lang.StringBuilder.<init>():void (7 bytes)   inline method (bytecode parsing)
                            @ 7  java.util.concurrent.locks.AbstractQueuedSynchronizer.compareAndSetState(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 33  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 15  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                            @ 39  java.lang.StringBuilder.append(Object):StringBuilder (9 bytes)   inline method (bytecode parsing)
                            @ 21  java.util.concurrent.locks.AbstractOwnableSynchronizer.getExclusiveOwnerThread():Thread (5 bytes)   inline accessor method (bytecode parsing)
                              @ 5  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 29  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 42  java.lang.StringBuilder.toString():String (9 bytes)   inline method (bytecode parsing)
                            @ 51  java.util.concurrent.locks.AbstractQueuedSynchronizer.setState(int):void (6 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.String.<init>(StringBuilder):void (7 bytes)   inline method (bytecode parsing)
                                    @ 1  java.util.concurrent.locks.ReentrantLock$NonfairSync.initialTryLock():boolean (58 bytes)   relevance-based (relevance=1.020014, probability=1.000000, bonus=1.000000, nodes=40 <= 300.000000)
                            @ 120  java.lang.StringBuilder.<init>():void (7 bytes)   inline method (bytecode parsing)
                            @ 125  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 137  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 141  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 10  java.util.concurrent.locks.AbstractQueuedSynchronizer.compareAndSetState(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 144  java.lang.StringBuilder.toString():String (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.String.<init>(StringBuilder):void (7 bytes)   inline method (bytecode parsing)
                            @ 20  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                                    @ 2  java.util.concurrent.locks.ReentrantLock$NonfairSync.tryAcquire(int):boolean (27 bytes)   not inlining relevance-based (relevance=0.043772, probability=0.038475, bonus=1.000000, nodes=36 > 13.131676)
                                            @ 7  java.util.concurrent.atomic.AtomicInteger.getAndIncrement():int (12 bytes)   trivial (relevance=2.000000, probability=0.031250, bonus=1.000000, nodes=8)
                                            @ 3  java.lang.AbstractStringBuilder.<init>(int):void (39 bytes)   relevance-based (relevance=1.000000, probability=0.015625, bonus=1.000000, nodes=11 <= 300.000000)
                            @ 245  java.util.concurrent.locks.AbstractQueuedSynchronizer$ExclusiveNode.<init>():void (5 bytes)   inline method (bytecode parsing)
                              @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer$Node.<init>():void (5 bytes)   inline method (bytecode parsing)
                                            @ 2  java.lang.AbstractStringBuilder.append(String):AbstractStringBuilder (45 bytes)   not inlining too large previous low-level graph (low-level-nodes: 368, relevance=1.000000, probability=0.015625, bonus=1.000000, nodes=21)
                            @ 393  java.lang.Thread.interrupted():boolean (7 bytes)   inline method (bytecode parsing)
                                              @ 11  java.lang.Enum.toString():String (5 bytes)   trivial (relevance=1.000000, probability=0.015625, bonus=1.000000, nodes=5)
                                            @ 2  java.lang.String.valueOf(Object):String (15 bytes)   relevance-based (relevance=1.000000, probability=0.015625, bonus=1.000000, nodes=20 <= 300.000000)
                                            @ 2  java.lang.AbstractStringBuilder.append(String):AbstractStringBuilder (45 bytes)   not inlining too large previous low-level graph (low-level-nodes: 368, relevance=1.000028, probability=0.015625, bonus=1.000000, nodes=23)
                                    @ 15  java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer$Node, int, boolean, boolean, boolean, long):int (424 bytes)   not inlining relevance-based (relevance=0.033978, probability=0.029866, bonus=1.000000, nodes=197 > 10.193547)
                                  @ 4  java.util.concurrent.locks.ReentrantLock$Sync.lock():void (13 bytes)   relevance-based (relevance=1.107603, probability=1.000000, bonus=1.000000, nodes=57 <= 300.000000)
                            @ 5  java.lang.AbstractStringBuilder.getValue():byte[] (5 bytes)   inline accessor method (bytecode parsing)
                                            @ 3  java.lang.String.<init>(AbstractStringBuilder, Void):void (99 bytes)   not inlining too large previous low-level graph (low-level-nodes: 376, relevance=1.000028, probability=0.015625, bonus=1.000000, nodes=41)
                                    @ 1  java.io.BufferedWriter.ensureOpen():void (18 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=7)
                                                @ 11  java.lang.String.toString():String (2 bytes)   trivial (relevance=1.000000, probability=0.015625, bonus=1.000000, nodes=4)
                                              @ 11  java.lang.String.valueOf(Object):String (15 bytes)   trivial (relevance=1.000000, probability=0.015625, bonus=1.000000, nodes=4)
                            @ 23  jdk.internal.misc.InternalLock.lock():void (8 bytes)   inline method (bytecode parsing)
                            @ 11  jdk.internal.misc.InternalLock.lock():void (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.util.concurrent.locks.ReentrantLock.lock():void (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.util.concurrent.locks.ReentrantLock.lock():void (8 bytes)   inline method (bytecode parsing)
                            @ 35  jdk.internal.misc.InternalLock.unlock():void (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.util.concurrent.locks.ReentrantLock.unlock():void (10 bytes)   inline method (bytecode parsing)
                            @ 23  jdk.internal.misc.InternalLock.unlock():void (8 bytes)   inline method (bytecode parsing)
                                @ 5  java.util.concurrent.locks.AbstractQueuedSynchronizer.release(int):boolean (19 bytes)   inline method (bytecode parsing)
                              @ 4  java.util.concurrent.locks.ReentrantLock.unlock():void (10 bytes)   inline method (bytecode parsing)
                                @ 5  java.util.concurrent.locks.AbstractQueuedSynchronizer.release(int):boolean (19 bytes)   inline method (bytecode parsing)
                                      @ 7  sun.nio.cs.StreamEncoder.write(char[], int, int):void (82 bytes)   not inlining too large previous low-level graph (low-level-nodes: 631, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=60)
                                    @ 25  java.io.OutputStreamWriter.write(char[], int, int):void (11 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                                  @ 22  java.io.BufferedWriter.implFlushBuffer():void (34 bytes)   relevance-based (relevance=1.137693, probability=1.000000, bonus=1.000000, nodes=28 <= 300.000000)
                            @ 9  java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(int):void (20 bytes)   inline method (bytecode parsing)
                            @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 8  java.util.concurrent.locks.AbstractOwnableSynchronizer.getExclusiveOwnerThread():Thread (5 bytes)   inline accessor method (bytecode parsing)
                            @ 7  java.util.concurrent.locks.AbstractQueuedSynchronizer.compareAndSetState(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 41  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                            @ 15  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                            @ 46  java.util.concurrent.locks.AbstractQueuedSynchronizer.setState(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 21  java.util.concurrent.locks.AbstractOwnableSynchronizer.getExclusiveOwnerThread():Thread (5 bytes)   inline accessor method (bytecode parsing)
                            @ 29  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 51  java.util.concurrent.locks.AbstractQueuedSynchronizer.setState(int):void (6 bytes)   inline method (bytecode parsing)
                                  @ 2  java.util.concurrent.locks.ReentrantLock$Sync.tryRelease(int):boolean (51 bytes)   relevance-based (relevance=1.137693, probability=1.000000, bonus=1.000000, nodes=37 <= 300.000000)
                                                  @ 1  java.util.concurrent.locks.ReentrantLock$NonfairSync.initialTryLock():boolean (58 bytes)   relevance-based (relevance=1.020031, probability=0.007812, bonus=1.000000, nodes=40 <= 300.000000)
                            @ 22  java.util.concurrent.locks.AbstractQueuedSynchronizer$Node.getAndUnsetStatus(int):int (14 bytes)   inline method (bytecode parsing)
                            @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 10  java.util.concurrent.locks.AbstractQueuedSynchronizer.compareAndSetState(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                              @ 10  jdk.internal.misc.Unsafe.getAndBitwiseAndInt(Object, long, int):int (27 bytes)   inline method (bytecode parsing)
                            @ 20  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                                                  @ 2  java.util.concurrent.locks.ReentrantLock$NonfairSync.tryAcquire(int):boolean (27 bytes)   not inlining relevance-based (relevance=0.043772, probability=0.000301, bonus=1.000000, nodes=36 > 13.131676)
                            @ 5  java.lang.Thread.isVirtual():boolean (5 bytes)   inline method (bytecode parsing)
                                    @ 30  java.util.concurrent.locks.LockSupport.unpark(Thread):void (26 bytes)   not inlining relevance-based (relevance=0.011708, probability=0.006672, bonus=1.000000, nodes=20 > 3.512350)
                                  @ 12  java.util.concurrent.locks.AbstractQueuedSynchronizer.signalNext(AbstractQueuedSynchronizer$Node):void (34 bytes)   relevance-based (relevance=1.027166, probability=0.902850, bonus=1.000000, nodes=56 <= 300.000000)
                            @ 245  java.util.concurrent.locks.AbstractQueuedSynchronizer$ExclusiveNode.<init>():void (5 bytes)   inline method (bytecode parsing)
                              @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer$Node.<init>():void (5 bytes)   inline method (bytecode parsing)
                                @ 16  java.io.BufferedWriter.flushBuffer():void (63 bytes)   relevance-based (relevance=1.137693, probability=1.000000, bonus=1.000000, nodes=199 <= 300.000000)
                            @ 393  java.lang.Thread.interrupted():boolean (7 bytes)   inline method (bytecode parsing)
                              @ 16  java.io.PrintStream.implWrite(String):void (50 bytes)   not inlining relevance-based (relevance=1.137693, probability=1.000000, bonus=1.000000, nodes=479 > 300.000000)
                            @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 8  java.util.concurrent.locks.AbstractOwnableSynchronizer.getExclusiveOwnerThread():Thread (5 bytes)   inline accessor method (bytecode parsing)
                                                  @ 15  java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer$Node, int, boolean, boolean, boolean, long):int (424 bytes)   not inlining relevance-based (relevance=0.033977, probability=0.000233, bonus=1.000000, nodes=197 > 10.193132)
                            @ 41  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                                                @ 4  java.util.concurrent.locks.ReentrantLock$Sync.lock():void (13 bytes)   relevance-based (relevance=1.107666, probability=0.007812, bonus=1.000000, nodes=57 <= 300.000000)
                            @ 46  java.util.concurrent.locks.AbstractQueuedSynchronizer.setState(int):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  java.util.concurrent.locks.ReentrantLock$Sync.tryRelease(int):boolean (51 bytes)   relevance-based (relevance=1.137693, probability=1.000000, bonus=1.000000, nodes=37 <= 300.000000)
                            @ 16  java.io.BufferedWriter.newLine():void (8 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.System.lineSeparator():String (4 bytes)   inline method (bytecode parsing)
                            @ 30  java.io.OutputStreamWriter.flushBuffer():void (8 bytes)   inline method (bytecode parsing)
                            @ 22  java.util.concurrent.locks.AbstractQueuedSynchronizer$Node.getAndUnsetStatus(int):int (14 bytes)   inline method (bytecode parsing)
                              @ 10  jdk.internal.misc.Unsafe.getAndBitwiseAndInt(Object, long, int):int (27 bytes)   inline method (bytecode parsing)
                                                  @ 1  java.io.PrintStream.ensureOpen():void (18 bytes)   trivial (relevance=2.000000, probability=0.007812, bonus=1.000000, nodes=7)
                            @ 5  java.lang.Thread.isVirtual():boolean (5 bytes)   inline method (bytecode parsing)
                                                      @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.007812, bonus=1.000000, nodes=5)
                                @ 30  java.util.concurrent.locks.LockSupport.unpark(Thread):void (26 bytes)   not inlining relevance-based (relevance=0.011708, probability=0.006672, bonus=1.000000, nodes=20 > 3.512350)
                              @ 12  java.util.concurrent.locks.AbstractQueuedSynchronizer.signalNext(AbstractQueuedSynchronizer$Node):void (34 bytes)   relevance-based (relevance=1.027166, probability=0.902850, bonus=1.000000, nodes=56 <= 300.000000)
                                                    @ 4  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000000, probability=0.007812, bonus=1.000000, nodes=8)
                            @ 23  jdk.internal.misc.InternalLock.lock():void (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.util.concurrent.locks.ReentrantLock.lock():void (8 bytes)   inline method (bytecode parsing)
                            @ 35  jdk.internal.misc.InternalLock.unlock():void (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.util.concurrent.locks.ReentrantLock.unlock():void (10 bytes)   inline method (bytecode parsing)
                                @ 5  java.util.concurrent.locks.AbstractQueuedSynchronizer.release(int):boolean (19 bytes)   inline method (bytecode parsing)
                            @ 9  java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(int):void (20 bytes)   inline method (bytecode parsing)
                            @ 7  java.util.concurrent.locks.AbstractQueuedSynchronizer.compareAndSetState(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 15  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                            @ 21  java.util.concurrent.locks.AbstractOwnableSynchronizer.getExclusiveOwnerThread():Thread (5 bytes)   inline accessor method (bytecode parsing)
                            @ 29  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 51  java.util.concurrent.locks.AbstractQueuedSynchronizer.setState(int):void (6 bytes)   inline method (bytecode parsing)
                                                        @ 1  java.util.concurrent.locks.ReentrantLock$NonfairSync.initialTryLock():boolean (58 bytes)   relevance-based (relevance=1.020031, probability=0.007812, bonus=1.000000, nodes=40 <= 300.000000)
                            @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 10  java.util.concurrent.locks.AbstractQueuedSynchronizer.compareAndSetState(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 20  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                                                        @ 2  java.util.concurrent.locks.ReentrantLock$NonfairSync.tryAcquire(int):boolean (27 bytes)   not inlining relevance-based (relevance=0.043772, probability=0.000301, bonus=1.000000, nodes=36 > 13.131676)
                            @ 245  java.util.concurrent.locks.AbstractQueuedSynchronizer$ExclusiveNode.<init>():void (5 bytes)   inline method (bytecode parsing)
                              @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer$Node.<init>():void (5 bytes)   inline method (bytecode parsing)
                            @ 393  java.lang.Thread.interrupted():boolean (7 bytes)   inline method (bytecode parsing)
                                                        @ 15  java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer$Node, int, boolean, boolean, boolean, long):int (424 bytes)   not inlining relevance-based (relevance=0.033977, probability=0.000233, bonus=1.000000, nodes=197 > 10.193132)
                                                      @ 4  java.util.concurrent.locks.ReentrantLock$Sync.lock():void (13 bytes)   relevance-based (relevance=1.107666, probability=0.007812, bonus=1.000000, nodes=57 <= 300.000000)
                            @ 39  java.io.BufferedWriter.min(int, int):int (9 bytes)   inline method (bytecode parsing)
                                                        @ 1  java.io.BufferedWriter.ensureOpen():void (18 bytes)   trivial (relevance=1.000000, probability=0.007812, bonus=1.000000, nodes=7)
                                                        @ 6  java.io.BufferedWriter.growIfNeeded(int):void (63 bytes)   relevance-based (relevance=1.000000, probability=0.007812, bonus=1.000000, nodes=15 <= 300.000000)
                            @ 16  java.lang.String.checkBoundsOffCount(int, int, int):int (10 bytes)   inline method (bytecode parsing)
                                                            @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.007812, bonus=1.000000, nodes=5)
                                                          @ 3  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000000, probability=0.007812, bonus=1.000000, nodes=8)
                                                            @ 6  jdk.internal.util.Preconditions.checkFromToIndex(int, int, int, BiFunction):int (24 bytes)   relevance-based (relevance=1.000000, probability=0.007812, bonus=1.000000, nodes=11 <= 300.000000)
                                                          @ 6  java.lang.String.checkBoundsBeginEnd(int, int, int):void (11 bytes)   relevance-based (relevance=1.000000, probability=0.007812, bonus=1.000000, nodes=10 <= 300.000000)
                                                          @ 6  jdk.internal.util.Preconditions.checkFromIndexSize(int, int, int, BiFunction):int (25 bytes)   relevance-based (relevance=1.000000, probability=0.007812, bonus=1.000000, nodes=15 <= 300.000000)
                                                          @ 21  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=0.007812, bonus=1.000000, nodes=9)
                                                          @ 36  java.lang.StringLatin1.getChars(byte[], int, int, char[], int):void (12 bytes)   relevance-based (relevance=1.000000, probability=0.007812, bonus=1.000000, nodes=38 <= 300.000000)
                                                        @ 60  java.lang.String.getChars(int, int, char[], int):void (55 bytes)   relevance-based (relevance=1.000000, probability=0.007812, bonus=1.000000, nodes=58 <= 300.000000)
                                                      @ 30  java.io.BufferedWriter.implWrite(String, int, int):void (100 bytes)   relevance-based (relevance=1.137693, probability=0.007812, bonus=1.000000, nodes=93 <= 300.000000)
                            @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 8  java.util.concurrent.locks.AbstractOwnableSynchronizer.getExclusiveOwnerThread():Thread (5 bytes)   inline accessor method (bytecode parsing)
                            @ 41  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                            @ 46  java.util.concurrent.locks.AbstractQueuedSynchronizer.setState(int):void (6 bytes)   inline method (bytecode parsing)
                                                      @ 2  java.util.concurrent.locks.ReentrantLock$Sync.tryRelease(int):boolean (51 bytes)   relevance-based (relevance=1.137693, probability=0.007812, bonus=1.000000, nodes=37 <= 300.000000)
                            @ 22  java.util.concurrent.locks.AbstractQueuedSynchronizer$Node.getAndUnsetStatus(int):int (14 bytes)   inline method (bytecode parsing)
                              @ 10  jdk.internal.misc.Unsafe.getAndBitwiseAndInt(Object, long, int):int (27 bytes)   inline method (bytecode parsing)
                            @ 5  java.lang.Thread.isVirtual():boolean (5 bytes)   inline method (bytecode parsing)
                                                        @ 30  java.util.concurrent.locks.LockSupport.unpark(Thread):void (26 bytes)   not inlining relevance-based (relevance=0.011708, probability=0.000052, bonus=1.000000, nodes=20 > 3.512350)
                                                      @ 12  java.util.concurrent.locks.AbstractQueuedSynchronizer.signalNext(AbstractQueuedSynchronizer$Node):void (34 bytes)   relevance-based (relevance=1.027108, probability=0.007053, bonus=1.000000, nodes=56 <= 300.000000)
                                                    @ 7  java.io.BufferedWriter.write(String, int, int):void (82 bytes)   relevance-based (relevance=1.000000, probability=0.007812, bonus=1.000000, nodes=262 <= 300.000000)
                                                  @ 9  java.io.Writer.write(String):void (11 bytes)   relevance-based (relevance=2.000000, probability=0.007812, bonus=1.000000, nodes=266 <= 300.000000)
                                                @ 16  java.io.PrintStream.implWriteln(String):void (48 bytes)   not inlining relevance-based (relevance=1.137693, probability=0.007812, bonus=1.000000, nodes=309 > 300.000000)
                            @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 8  java.util.concurrent.locks.AbstractOwnableSynchronizer.getExclusiveOwnerThread():Thread (5 bytes)   inline accessor method (bytecode parsing)
                            @ 41  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                            @ 46  java.util.concurrent.locks.AbstractQueuedSynchronizer.setState(int):void (6 bytes)   inline method (bytecode parsing)
                                                @ 2  java.util.concurrent.locks.ReentrantLock$Sync.tryRelease(int):boolean (51 bytes)   relevance-based (relevance=1.137693, probability=0.007812, bonus=1.000000, nodes=37 <= 300.000000)
                            @ 22  java.util.concurrent.locks.AbstractQueuedSynchronizer$Node.getAndUnsetStatus(int):int (14 bytes)   inline method (bytecode parsing)
                              @ 10  jdk.internal.misc.Unsafe.getAndBitwiseAndInt(Object, long, int):int (27 bytes)   inline method (bytecode parsing)
                            @ 5  java.lang.Thread.isVirtual():boolean (5 bytes)   inline method (bytecode parsing)
                                                  @ 30  java.util.concurrent.locks.LockSupport.unpark(Thread):void (26 bytes)   not inlining relevance-based (relevance=0.011708, probability=0.000052, bonus=1.000000, nodes=20 > 3.512350)
                                                @ 12  java.util.concurrent.locks.AbstractQueuedSynchronizer.signalNext(AbstractQueuedSynchronizer$Node):void (34 bytes)   relevance-based (relevance=1.027108, probability=0.007053, bonus=1.000000, nodes=56 <= 300.000000)
                            @ 16  java.io.BufferedWriter.newLine():void (8 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.System.lineSeparator():String (4 bytes)   inline method (bytecode parsing)
                            @ 30  java.io.OutputStreamWriter.flushBuffer():void (8 bytes)   inline method (bytecode parsing)
                                                  @ 1  java.io.PrintStream.ensureOpen():void (18 bytes)   trivial (relevance=2.000000, probability=0.007812, bonus=1.000000, nodes=7)
                                                      @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.007812, bonus=1.000000, nodes=5)
                                                    @ 4  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000000, probability=0.007812, bonus=1.000000, nodes=8)
                            @ 23  jdk.internal.misc.InternalLock.lock():void (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.util.concurrent.locks.ReentrantLock.lock():void (8 bytes)   inline method (bytecode parsing)
                            @ 35  jdk.internal.misc.InternalLock.unlock():void (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.util.concurrent.locks.ReentrantLock.unlock():void (10 bytes)   inline method (bytecode parsing)
                                @ 5  java.util.concurrent.locks.AbstractQueuedSynchronizer.release(int):boolean (19 bytes)   inline method (bytecode parsing)
                            @ 9  java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(int):void (20 bytes)   inline method (bytecode parsing)
                            @ 7  java.util.concurrent.locks.AbstractQueuedSynchronizer.compareAndSetState(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 15  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                            @ 21  java.util.concurrent.locks.AbstractOwnableSynchronizer.getExclusiveOwnerThread():Thread (5 bytes)   inline accessor method (bytecode parsing)
                            @ 29  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 51  java.util.concurrent.locks.AbstractQueuedSynchronizer.setState(int):void (6 bytes)   inline method (bytecode parsing)
                                                        @ 1  java.util.concurrent.locks.ReentrantLock$NonfairSync.initialTryLock():boolean (58 bytes)   relevance-based (relevance=1.020031, probability=0.007812, bonus=1.000000, nodes=40 <= 300.000000)
                            @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 10  java.util.concurrent.locks.AbstractQueuedSynchronizer.compareAndSetState(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 20  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                                                        @ 2  java.util.concurrent.locks.ReentrantLock$NonfairSync.tryAcquire(int):boolean (27 bytes)   not inlining relevance-based (relevance=0.043772, probability=0.000301, bonus=1.000000, nodes=36 > 13.131676)
                            @ 245  java.util.concurrent.locks.AbstractQueuedSynchronizer$ExclusiveNode.<init>():void (5 bytes)   inline method (bytecode parsing)
                              @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer$Node.<init>():void (5 bytes)   inline method (bytecode parsing)
                            @ 393  java.lang.Thread.interrupted():boolean (7 bytes)   inline method (bytecode parsing)
                                                        @ 15  java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer$Node, int, boolean, boolean, boolean, long):int (424 bytes)   not inlining relevance-based (relevance=0.033977, probability=0.000233, bonus=1.000000, nodes=197 > 10.193132)
                                                      @ 4  java.util.concurrent.locks.ReentrantLock$Sync.lock():void (13 bytes)   relevance-based (relevance=1.107666, probability=0.007812, bonus=1.000000, nodes=57 <= 300.000000)
                            @ 39  java.io.BufferedWriter.min(int, int):int (9 bytes)   inline method (bytecode parsing)
                                                        @ 1  java.io.BufferedWriter.ensureOpen():void (18 bytes)   trivial (relevance=1.000000, probability=0.007812, bonus=1.000000, nodes=7)
                                                        @ 6  java.io.BufferedWriter.growIfNeeded(int):void (63 bytes)   relevance-based (relevance=1.000000, probability=0.007812, bonus=1.000000, nodes=15 <= 300.000000)
                            @ 16  java.lang.String.checkBoundsOffCount(int, int, int):int (10 bytes)   inline method (bytecode parsing)
                                                            @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.007812, bonus=1.000000, nodes=5)
                                                          @ 3  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000000, probability=0.007812, bonus=1.000000, nodes=8)
                                                            @ 6  jdk.internal.util.Preconditions.checkFromToIndex(int, int, int, BiFunction):int (24 bytes)   relevance-based (relevance=1.000000, probability=0.007812, bonus=1.000000, nodes=11 <= 300.000000)
                                                          @ 6  java.lang.String.checkBoundsBeginEnd(int, int, int):void (11 bytes)   relevance-based (relevance=1.000000, probability=0.007812, bonus=1.000000, nodes=10 <= 300.000000)
                                                          @ 6  jdk.internal.util.Preconditions.checkFromIndexSize(int, int, int, BiFunction):int (25 bytes)   relevance-based (relevance=1.000000, probability=0.007812, bonus=1.000000, nodes=15 <= 300.000000)
                                                          @ 21  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=0.007812, bonus=1.000000, nodes=9)
                                                          @ 36  java.lang.StringLatin1.getChars(byte[], int, int, char[], int):void (12 bytes)   relevance-based (relevance=1.000000, probability=0.007812, bonus=1.000000, nodes=38 <= 300.000000)
                                                        @ 60  java.lang.String.getChars(int, int, char[], int):void (55 bytes)   relevance-based (relevance=1.000000, probability=0.007812, bonus=1.000000, nodes=58 <= 300.000000)
                                                      @ 30  java.io.BufferedWriter.implWrite(String, int, int):void (100 bytes)   relevance-based (relevance=1.137693, probability=0.007812, bonus=1.000000, nodes=93 <= 300.000000)
                            @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 8  java.util.concurrent.locks.AbstractOwnableSynchronizer.getExclusiveOwnerThread():Thread (5 bytes)   inline accessor method (bytecode parsing)
                            @ 41  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                            @ 46  java.util.concurrent.locks.AbstractQueuedSynchronizer.setState(int):void (6 bytes)   inline method (bytecode parsing)
                                                      @ 2  java.util.concurrent.locks.ReentrantLock$Sync.tryRelease(int):boolean (51 bytes)   relevance-based (relevance=1.137693, probability=0.007812, bonus=1.000000, nodes=37 <= 300.000000)
                            @ 22  java.util.concurrent.locks.AbstractQueuedSynchronizer$Node.getAndUnsetStatus(int):int (14 bytes)   inline method (bytecode parsing)
                              @ 10  jdk.internal.misc.Unsafe.getAndBitwiseAndInt(Object, long, int):int (27 bytes)   inline method (bytecode parsing)
                            @ 5  java.lang.Thread.isVirtual():boolean (5 bytes)   inline method (bytecode parsing)
                                                        @ 30  java.util.concurrent.locks.LockSupport.unpark(Thread):void (26 bytes)   not inlining relevance-based (relevance=0.011708, probability=0.000052, bonus=1.000000, nodes=20 > 3.512350)
                                                      @ 12  java.util.concurrent.locks.AbstractQueuedSynchronizer.signalNext(AbstractQueuedSynchronizer$Node):void (34 bytes)   relevance-based (relevance=1.027108, probability=0.007053, bonus=1.000000, nodes=56 <= 300.000000)
                                                    @ 7  java.io.BufferedWriter.write(String, int, int):void (82 bytes)   relevance-based (relevance=1.000000, probability=0.007812, bonus=1.000000, nodes=262 <= 300.000000)
                                                  @ 9  java.io.Writer.write(String):void (11 bytes)   relevance-based (relevance=2.000000, probability=0.007812, bonus=1.000000, nodes=266 <= 300.000000)
                                                @ 48  java.io.PrintStream.implWriteln(String):void (48 bytes)   not inlining relevance-based (relevance=1.137693, probability=0.007812, bonus=1.000000, nodes=309 > 300.000000)
                                              @ 14  java.io.PrintStream.writeln(String):void (81 bytes)   relevance-based (relevance=1.000000, probability=0.015625, bonus=1.000000, nodes=189 <= 300.000000)
                                            @ 45  java.io.PrintStream.println(String):void (44 bytes)   relevance-based (relevance=1.000028, probability=0.015625, bonus=1.000000, nodes=190 <= 300.000000)
                                            @ 3  java.lang.AbstractStringBuilder.<init>(int):void (39 bytes)   relevance-based (relevance=2.000056, probability=0.031250, bonus=1.000000, nodes=11 <= 300.000000)
                                            @ 2  java.lang.AbstractStringBuilder.append(String):AbstractStringBuilder (45 bytes)   not inlining too large previous low-level graph (low-level-nodes: 368, relevance=2.000056, probability=0.031250, bonus=1.000000, nodes=21)
                                                @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.031250, bonus=1.000000, nodes=5)
                                              @ 1  java.lang.String.length():int (11 bytes)   trivial (relevance=1.813220, probability=0.031250, bonus=1.000000, nodes=5)
                                                @ 6  jdk.internal.util.Preconditions.checkFromToIndex(int, int, int, BiFunction):int (24 bytes)   relevance-based (relevance=1.000000, probability=0.031250, bonus=1.000000, nodes=12 <= 300.000000)
                                              @ 8  java.lang.String.checkBoundsBeginEnd(int, int, int):void (11 bytes)   relevance-based (relevance=1.813220, probability=0.031250, bonus=1.000000, nodes=11 <= 300.000000)
                                              @ 28  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000075, probability=0.017236, bonus=1.000000, nodes=5)
                            @ 20  java.lang.String.<init>(byte[], byte):void (15 bytes)   inline method (bytecode parsing)
                            @ 13  java.util.Arrays.copyOfRangeByte(byte[], int, int):byte[] (33 bytes)   inline method (bytecode parsing)
                              @ 2  java.util.Arrays.checkLength(int, int):void (38 bytes)   inline method (bytecode parsing)
                                                  @ 24  java.lang.Math.min(int, int):int (11 bytes)   trivial (relevance=1.000010, probability=0.012424, bonus=1.000000, nodes=7)
                                                @ 16  java.util.Arrays.copyOfRange(byte[], int, int):byte[] (25 bytes)   relevance-based (relevance=1.000000, probability=0.017230, bonus=1.000000, nodes=27 <= 300.000000)
                                              @ 41  java.lang.StringLatin1.newString(byte[], int, int):String (24 bytes)   relevance-based (relevance=1.000000, probability=0.017236, bonus=1.000000, nodes=45 <= 300.000000)
                                            @ 134  java.lang.String.substring(int, int):String (58 bytes)   relevance-based (relevance=2.000056, probability=0.031250, bonus=1.000000, nodes=59 <= 300.000000)
                                          @ 11  jdk.vm.ci.common.InitTimer.<init>(String):void (151 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.031250, bonus=1.000000, nodes=347 > 300.000000)
                            @ 21  java.util.ServiceLoader.load(Class, ClassLoader):ServiceLoader (13 bytes)   inline method (bytecode parsing)
                            @ 0  jdk.internal.misc.VM.initLevel():int (4 bytes)   inline method (bytecode parsing)
                            @ 45  java.lang.IllegalStateException.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  java.lang.RuntimeException.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                                @ 2  java.lang.Exception.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                            @ 32  java.lang.ClassLoader.getBuiltinAppClassLoader():ClassLoader (4 bytes)   inline method (bytecode parsing)
                              @ 0  jdk.internal.loader.ClassLoaders.appClassLoader():ClassLoader (4 bytes)   inline method (bytecode parsing)
                                                @ 0  java.lang.System.allowSecurityManager():boolean (13 bytes)   trivial (relevance=0.333581, probability=0.006250, bonus=1.000000, nodes=8)
                                              @ 75  java.lang.System.getSecurityManager():SecurityManager (12 bytes)   relevance-based (relevance=0.333333, probability=0.006250, bonus=1.000000, nodes=14 <= 100.000000)
                                                  @ 0  java.lang.System.allowSecurityManager():boolean (13 bytes)   trivial (relevance=0.333578, probability=0.003125, bonus=1.000000, nodes=8)
                                                @ 0  java.lang.System.getSecurityManager():SecurityManager (12 bytes)   relevance-based (relevance=0.333330, probability=0.003125, bonus=1.000000, nodes=14 <= 99.999000)
                            @ 7  java.lang.Class.getClassLoader0():ClassLoader (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 9  java.lang.ClassLoader.getClassLoader(Class):ClassLoader (11 bytes)   relevance-based (relevance=0.083395, probability=0.001562, bonus=1.000000, nodes=13 <= 25.018358)
                                              @ 89  java.lang.ClassLoader.checkClassLoaderPermission(ClassLoader, Class):void (29 bytes)   not inlining relevance-based (relevance=0.166665, probability=0.003125, bonus=1.000000, nodes=50 > 49.999500)
                 n                              @ 16  java.lang.Throwable.fillInStackTrace(int):Throwable (0 bytes)   not inlining it is a non-intrinsic native method
              s                                 @ 24  java.lang.Throwable.fillInStackTrace():Throwable (29 bytes)   relevance-based (relevance=0.333333, probability=0.006250, bonus=1.000000, nodes=34 <= 100.000000)
                                              @ 2  java.lang.Throwable.<init>(String):void (34 bytes)   relevance-based (relevance=0.333333, probability=0.006250, bonus=1.000000, nodes=45 <= 100.000000)
                                            @ 18  java.lang.ClassLoader.getSystemClassLoader():ClassLoader (96 bytes)   relevance-based (relevance=1.000000, probability=0.031250, bonus=1.000000, nodes=103 <= 300.000000)
                            @ 27  java.util.Objects.requireNonNull(Object):Object (14 bytes)   inline method (bytecode parsing)
                            @ 54  java.lang.Class.getModule():Module (5 bytes)   inline accessor method (bytecode parsing)
                            @ 61  java.lang.Class.getModule():Module (5 bytes)   inline accessor method (bytecode parsing)
                            @ 67  java.lang.Class.getModule():Module (5 bytes)   inline accessor method (bytecode parsing)
                            @ 91  java.lang.StringBuilder.<init>():void (7 bytes)   inline method (bytecode parsing)
                            @ 96  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 101  java.lang.StringBuilder.append(Object):StringBuilder (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 106  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 109  java.lang.StringBuilder.toString():String (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.String.<init>(StringBuilder):void (7 bytes)   inline method (bytecode parsing)
                            @ 1  java.util.AbstractList.<init>():void (10 bytes)   inline method (bytecode parsing)
                              @ 1  java.util.AbstractCollection.<init>():void (5 bytes)   inline method (bytecode parsing)
                                              @ 9  java.util.ArrayList.<init>():void (12 bytes)   relevance-based (relevance=8.000000, probability=0.025000, bonus=1.000000, nodes=11 <= 300.000000)
                            @ 1  java.util.AbstractList.<init>():void (10 bytes)   inline method (bytecode parsing)
                              @ 1  java.util.AbstractCollection.<init>():void (5 bytes)   inline method (bytecode parsing)
                                              @ 20  java.util.ArrayList.<init>():void (12 bytes)   relevance-based (relevance=8.000000, probability=0.025000, bonus=1.000000, nodes=11 <= 300.000000)
                                              @ 31  jdk.internal.misc.VM.isBooted():boolean (13 bytes)   relevance-based (relevance=8.000000, probability=0.025000, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 11  java.lang.Class.getModule():Module (5 bytes)   inline accessor method (bytecode parsing)
                            @ 35  java.lang.StringBuilder.<init>():void (7 bytes)   inline method (bytecode parsing)
                            @ 40  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 44  java.lang.StringBuilder.append(Object):StringBuilder (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 47  java.lang.StringBuilder.toString():String (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.String.<init>(StringBuilder):void (7 bytes)   inline method (bytecode parsing)
                            @ 66  java.lang.StringBuilder.<init>():void (7 bytes)   inline method (bytecode parsing)
                            @ 70  java.lang.StringBuilder.append(Object):StringBuilder (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 75  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 78  java.lang.StringBuilder.toString():String (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.String.<init>(StringBuilder):void (7 bytes)   inline method (bytecode parsing)
                            @ 1  java.util.Objects.requireNonNull(Object):Object (14 bytes)   inline method (bytecode parsing)
                            @ 6  java.util.Objects.requireNonNull(Object):Object (14 bytes)   inline method (bytecode parsing)
                            @ 18  java.lang.Class.getModule():Module (5 bytes)   inline accessor method (bytecode parsing)
                            @ 1  java.lang.Class.getModule():Module (5 bytes)   inline accessor method (bytecode parsing)
                            @ 47  java.lang.String.lastIndexOf(int):int (12 bytes)   inline method (bytecode parsing)
                 n                                    @ 14  java.lang.Class.initClassName():String (0 bytes)   not inlining it is a non-intrinsic native method
                                                      @ 40  java.lang.Class.getName():String (18 bytes)   relevance-based (relevance=1.005556, probability=0.007160, bonus=1.000000, nodes=17 <= 300.000000)
                                                        @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.007160, bonus=1.000000, nodes=5)
                                                      @ 3  java.lang.String.length():int (11 bytes)   trivial (relevance=1.187487, probability=0.007160, bonus=1.000000, nodes=8)
                                                        @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=0.007160, bonus=1.000000, nodes=9)
                                                          @ 1  java.lang.StringLatin1.canEncode(int):boolean (13 bytes)   trivial (relevance=1.000000, probability=0.007160, bonus=1.000000, nodes=5)
                                                          @ 14  java.lang.Math.min(int, int):int (11 bytes)   trivial (relevance=1.000000, probability=0.007160, bonus=1.000000, nodes=7)
                                                        @ 13  java.lang.StringLatin1.lastIndexOf(byte[], int, int):int (40 bytes)   relevance-based (relevance=1.000000, probability=0.007160, bonus=1.000000, nodes=31 <= 300.000000)
                                                      @ 8  java.lang.String.lastIndexOf(int, int):int (29 bytes)   relevance-based (relevance=1.187487, probability=0.007160, bonus=1.000000, nodes=40 <= 300.000000)
                                                          @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.007120, bonus=1.000000, nodes=5)
                                                        @ 1  java.lang.String.length():int (11 bytes)   trivial (relevance=1.813220, probability=0.007120, bonus=1.000000, nodes=8)
                                                          @ 6  jdk.internal.util.Preconditions.checkFromToIndex(int, int, int, BiFunction):int (24 bytes)   relevance-based (relevance=1.000000, probability=0.007120, bonus=1.000000, nodes=11 <= 300.000000)
                                                        @ 8  java.lang.String.checkBoundsBeginEnd(int, int, int):void (11 bytes)   relevance-based (relevance=1.813220, probability=0.007120, bonus=1.000000, nodes=10 <= 300.000000)
                                                        @ 28  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000075, probability=0.003927, bonus=1.000000, nodes=9)
                            @ 20  java.lang.String.<init>(byte[], byte):void (15 bytes)   inline method (bytecode parsing)
                            @ 13  java.util.Arrays.copyOfRangeByte(byte[], int, int):byte[] (33 bytes)   inline method (bytecode parsing)
                              @ 2  java.util.Arrays.checkLength(int, int):void (38 bytes)   inline method (bytecode parsing)
                                                            @ 24  java.lang.Math.min(int, int):int (11 bytes)   trivial (relevance=1.000010, probability=0.002830, bonus=1.000000, nodes=7)
                                                          @ 16  java.util.Arrays.copyOfRange(byte[], int, int):byte[] (25 bytes)   relevance-based (relevance=1.000000, probability=0.003925, bonus=1.000000, nodes=33 <= 300.000000)
                                                        @ 41  java.lang.StringLatin1.newString(byte[], int, int):String (24 bytes)   relevance-based (relevance=1.000000, probability=0.003927, bonus=1.000000, nodes=51 <= 300.000000)
                            @ 31  java.lang.String.<init>(byte[], byte):void (15 bytes)   inline method (bytecode parsing)
                            @ 54  java.lang.String.<init>(byte[], byte):void (15 bytes)   inline method (bytecode parsing)
                                                        @ 54  java.lang.StringUTF16.newString(byte[], int, int):String (58 bytes)   not inlining relevance-based (relevance=0.000104, probability=0.000000, bonus=1.000000, nodes=38 > 0.031156)
                                                      @ 62  java.lang.String.substring(int, int):String (58 bytes)   relevance-based (relevance=1.180926, probability=0.007120, bonus=1.000000, nodes=78 <= 300.000000)
                 n                                  @ 65  java.lang.String.intern():String (0 bytes)   not inlining it is a non-intrinsic native method
                                                    @ 13  java.lang.Class.getPackageName():String (81 bytes)   relevance-based (relevance=1.000000, probability=0.012500, bonus=1.000000, nodes=162 <= 300.000000)
                            @ 1  java.util.Objects.requireNonNull(Object):Object (14 bytes)   inline method (bytecode parsing)
                            @ 6  java.util.Objects.requireNonNull(Object):Object (14 bytes)   inline method (bytecode parsing)
                            @ 36  java.lang.module.ModuleDescriptor.isOpen():boolean (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  java.lang.module.ModuleDescriptor.isAutomatic():boolean (5 bytes)   inline accessor method (bytecode parsing)
                                                        @ 1  java.lang.Module.isNamed():boolean (13 bytes)   trivial (relevance=1.066612, probability=0.012500, bonus=1.000000, nodes=9)
                                                                  @ 17  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=0.015302, probability=0.000175, bonus=1.000000, nodes=9)
                                                                  @ 27  java.lang.StringLatin1.hashCode(byte[]):int (52 bytes)   not inlining relevance-based (relevance=0.015294, probability=0.000175, bonus=1.000000, nodes=22 > 4.588326)
                                                                  @ 37  java.lang.StringUTF16.hashCode(byte[]):int (52 bytes)   not inlining relevance-based (relevance=0.000008, probability=0.000000, bonus=1.000000, nodes=23 > 0.002314)
                                                                @ 9  java.lang.String.hashCode():int (60 bytes)   relevance-based (relevance=1.000000, probability=0.011630, bonus=1.000000, nodes=48 <= 300.000000)
                                                              @ 23  java.util.HashMap.hash(Object):int (20 bytes)   relevance-based (relevance=1.539847, probability=0.011630, bonus=1.000000, nodes=56 <= 300.000000)
                                                              @ 95  java.util.HashMap$TreeNode.getTreeNode(int, Object):HashMap$TreeNode (22 bytes)   not inlining relevance-based (relevance=0.000710, probability=0.000008, bonus=1.000000, nodes=23 > 0.212883)
                                                              @ 63  java.lang.String.equals(Object):boolean (56 bytes)   relevance-based (relevance=0.659378, probability=0.007553, bonus=1.000000, nodes=50 <= 197.813476)
                                                              @ 128  java.lang.String.equals(Object):boolean (56 bytes)   relevance-based (relevance=0.245286, probability=0.002620, bonus=1.000000, nodes=50 <= 73.585732)
                                                            @ 2  java.util.HashMap.getNode(Object):HashMap$Node (150 bytes)   relevance-based (relevance=1.133161, probability=0.012441, bonus=1.000000, nodes=241 <= 300.000000)
                                                          @ 51  java.util.HashMap.get(Object):Object (19 bytes)   relevance-based (relevance=1.000000, probability=0.012441, bonus=1.000000, nodes=246 <= 300.000000)
                                                          @ 8  java.util.Set.contains(Object):boolean (0 bytes)   not inlining no type profile exists
                                                          @ 27  java.util.Set.contains(Object):boolean (0 bytes)   not inlining no type profile exists
                                                            @ 38  java.lang.Module.isNamed():boolean (13 bytes)   trivial (relevance=2.000000, probability=0.000778, bonus=1.000000, nodes=9)
                                                          @ 48  java.util.Set.contains(Object):boolean (0 bytes)   not inlining no type profile exists
                                                          @ 60  java.lang.Module.allows(Set, Module):boolean (60 bytes)   relevance-based (relevance=1.086093, probability=0.012441, bonus=1.000000, nodes=47 <= 300.000000)
                                                        @ 70  java.lang.Module.isStaticallyExportedOrOpen(String, Module, boolean):boolean (70 bytes)   not inlining relevance-based (relevance=1.066612, probability=0.012500, bonus=1.000000, nodes=316 > 300.000000)
                            @ 7  java.lang.WeakPairMap.get(Object, Object):Object (17 bytes)   inline method (bytecode parsing)
                              @ 10  java.lang.WeakPairMap$Pair.lookup(Object, Object):WeakPairMap$Pair (10 bytes)   inline method (bytecode parsing)
                            @ 68  java.lang.WeakPairMap.get(Object, Object):Object (17 bytes)   inline method (bytecode parsing)
                              @ 10  java.lang.WeakPairMap$Pair.lookup(Object, Object):WeakPairMap$Pair (10 bytes)   inline method (bytecode parsing)
                            @ 131  java.lang.WeakPairMap.get(Object, Object):Object (17 bytes)   inline method (bytecode parsing)
                              @ 10  java.lang.WeakPairMap$Pair.lookup(Object, Object):WeakPairMap$Pair (10 bytes)   inline method (bytecode parsing)
                            @ 13  java.util.concurrent.locks.ReentrantLock.lock():void (8 bytes)   inline method (bytecode parsing)
                            @ 25  java.util.concurrent.locks.ReentrantLock.unlock():void (10 bytes)   inline method (bytecode parsing)
                              @ 5  java.util.concurrent.locks.AbstractQueuedSynchronizer.release(int):boolean (19 bytes)   inline method (bytecode parsing)
                                                              @ 1  java.lang.ref.ReferenceQueue.headIsNull():boolean (13 bytes)   relevance-based (relevance=1.000600, probability=0.011719, bonus=1.000000, nodes=11 <= 300.000000)
                            @ 9  java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(int):void (20 bytes)   inline method (bytecode parsing)
                                                              @ 4  java.util.concurrent.locks.ReentrantLock$Sync.lock():void (13 bytes)   not inlining relevance-based (relevance=0.000600, probability=0.000007, bonus=1.000000, nodes=31 > 0.179933)
                                                              @ 17  java.lang.ref.ReferenceQueue.poll0():Reference (65 bytes)   not inlining relevance-based (relevance=0.000600, probability=0.000007, bonus=1.000000, nodes=41 > 0.179933)
                            @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 8  java.util.concurrent.locks.AbstractOwnableSynchronizer.getExclusiveOwnerThread():Thread (5 bytes)   inline accessor method (bytecode parsing)
                            @ 41  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                            @ 46  java.util.concurrent.locks.AbstractQueuedSynchronizer.setState(int):void (6 bytes)   inline method (bytecode parsing)
                                                              @ 2  java.util.concurrent.locks.ReentrantLock$Sync.tryRelease(int):boolean (51 bytes)   not inlining relevance-based (relevance=0.000600, probability=0.000007, bonus=1.000000, nodes=37 > 0.179933)
                            @ 22  java.util.concurrent.locks.AbstractQueuedSynchronizer$Node.getAndUnsetStatus(int):int (14 bytes)   inline method (bytecode parsing)
                              @ 10  jdk.internal.misc.Unsafe.getAndBitwiseAndInt(Object, long, int):int (27 bytes)   inline method (bytecode parsing)
                                                              @ 12  java.util.concurrent.locks.AbstractQueuedSynchronizer.signalNext(AbstractQueuedSynchronizer$Node):void (34 bytes)   not inlining relevance-based (relevance=0.000541, probability=0.000006, bonus=1.000000, nodes=56 > 0.162444)
                                                            @ 4  java.lang.ref.ReferenceQueue.poll():Reference (40 bytes)   relevance-based (relevance=1.000000, probability=0.011719, bonus=1.000000, nodes=46 <= 300.000000)
                                                          @ 1  java.lang.WeakPairMap.expungeStaleAssociations():void (31 bytes)   relevance-based (relevance=1.003068, probability=0.011719, bonus=1.000000, nodes=53 <= 300.000000)
                            @ 6  java.util.Objects.requireNonNull(Object):Object (14 bytes)   inline method (bytecode parsing)
                            @ 14  java.util.Objects.requireNonNull(Object):Object (14 bytes)   inline method (bytecode parsing)
                                                          @ 6  java.lang.WeakPairMap$Pair$Lookup.<init>(Object, Object):void (21 bytes)   relevance-based (relevance=1.000600, probability=0.011719, bonus=1.000000, nodes=11 <= 300.000000)
                            @ 4  java.util.concurrent.ConcurrentHashMap.spread(int):int (10 bytes)   inline method (bytecode parsing)
                            @ 8  java.lang.WeakPairMap$Pair.hashCode(Object, Object):int (10 bytes)   inline method (bytecode parsing)
                                                            @ 1  java.lang.WeakPairMap$Pair$Lookup.hashCode():int (12 bytes)   relevance-based (relevance=3.983570, probability=0.011719, bonus=1.000000, nodes=12 <= 300.000000)
                                                            @ 34  java.util.concurrent.ConcurrentHashMap.tabAt(ConcurrentHashMap$Node[], int):ConcurrentHashMap$Node (22 bytes)   relevance-based (relevance=3.972292, probability=0.011686, bonus=1.000000, nodes=11 <= 300.000000)
                            @ 1  java.lang.ref.Reference.get():Object (5 bytes)   inline accessor method (bytecode parsing)
                                                                @ 10  java.lang.WeakPairMap$Pair$Weak.first():Object (5 bytes)   trivial (relevance=1.002495, probability=0.002942, bonus=1.000000, nodes=6)
                            @ 4  java.lang.ref.Reference.get():Object (5 bytes)   inline accessor method (bytecode parsing)
                                                                @ 20  java.lang.WeakPairMap$Pair$Weak.second():Object (8 bytes)   relevance-based (relevance=1.000000, probability=0.002935, bonus=1.000000, nodes=10 <= 300.000000)
                                                              @ 19  java.lang.WeakPairMap$Pair.equals(Object, Object, WeakPairMap$Pair):boolean (34 bytes)   relevance-based (relevance=1.000000, probability=0.002942, bonus=1.000000, nodes=31 <= 300.000000)
                                                            @ 73  java.lang.WeakPairMap$Pair$Lookup.equals(Object):boolean (31 bytes)   relevance-based (relevance=1.000194, probability=0.002942, bonus=1.000000, nodes=40 <= 300.000000)
                            @ 1  java.lang.ref.Reference.get():Object (5 bytes)   inline accessor method (bytecode parsing)
                                                                @ 10  java.lang.WeakPairMap$Pair$Weak.first():Object (5 bytes)   trivial (relevance=0.286660, probability=0.000495, bonus=1.000000, nodes=6)
                            @ 4  java.lang.ref.Reference.get():Object (5 bytes)   inline accessor method (bytecode parsing)
                                                                @ 20  java.lang.WeakPairMap$Pair$Weak.second():Object (8 bytes)   relevance-based (relevance=0.285946, probability=0.000494, bonus=1.000000, nodes=10 <= 85.783856)
                                                              @ 19  java.lang.WeakPairMap$Pair.equals(Object, Object, WeakPairMap$Pair):boolean (34 bytes)   relevance-based (relevance=0.285946, probability=0.000495, bonus=1.000000, nodes=31 <= 85.783856)
                                                            @ 149  java.lang.WeakPairMap$Pair$Lookup.equals(Object):boolean (31 bytes)   relevance-based (relevance=0.285946, probability=0.000495, bonus=1.000000, nodes=40 <= 85.783856)
                                                          @ 13  java.util.concurrent.ConcurrentHashMap.get(Object):Object (162 bytes)   relevance-based (relevance=1.000600, probability=0.011719, bonus=1.000000, nodes=176 <= 300.000000)
                                                        @ 82  java.lang.Module.isReflectivelyExportedOrOpen(String, Module, boolean):boolean (182 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.011719, bonus=1.000000, nodes=330 > 300.000000)
                                                      @ 14  java.lang.Module.implIsExportedOrOpen(String, Module, boolean):boolean (92 bytes)   relevance-based (relevance=1.000000, probability=0.012500, bonus=1.000000, nodes=36 <= 300.000000)
                                                    @ 20  java.lang.Module.isExported(String, Module):boolean (18 bytes)   relevance-based (relevance=2.073264, probability=0.012500, bonus=1.000000, nodes=45 <= 300.000000)
                                                  @ 22  jdk.internal.reflect.Reflection.verifyModuleAccess(Module, Class):boolean (24 bytes)   relevance-based (relevance=8.000000, probability=0.025000, bonus=1.000000, nodes=212 <= 300.000000)
                                                @ 24  jdk.internal.reflect.Reflection.verifyMemberAccess(Class, Class, Class, int):boolean (200 bytes)   not inlining relevance-based (relevance=2.000000, probability=0.025000, bonus=1.000000, nodes=321 > 300.000000)
                                                @ 3  java.lang.AbstractStringBuilder.<init>(int):void (39 bytes)   relevance-based (relevance=1.000000, probability=0.012500, bonus=1.000000, nodes=11 <= 300.000000)
                                                @ 2  java.lang.AbstractStringBuilder.append(String):AbstractStringBuilder (45 bytes)   not inlining too large previous low-level graph (low-level-nodes: 368, relevance=1.000000, probability=0.012500, bonus=1.000000, nodes=21)
                            @ 11  java.lang.StringBuilder.<init>():void (7 bytes)   inline method (bytecode parsing)
                            @ 16  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 23  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 26  java.lang.StringBuilder.toString():String (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.String.<init>(StringBuilder):void (7 bytes)   inline method (bytecode parsing)
                            @ 34  java.lang.Integer.toHexString(int):String (6 bytes)   inline method (bytecode parsing)
                            @ 42  java.lang.StringBuilder.<init>():void (7 bytes)   inline method (bytecode parsing)
                            @ 48  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 52  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 55  java.lang.StringBuilder.toString():String (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.String.<init>(StringBuilder):void (7 bytes)   inline method (bytecode parsing)
                                                    @ 1  java.lang.Module.isNamed():boolean (13 bytes)   trivial (relevance=2.000000, probability=0.012500, bonus=1.000000, nodes=9)
                                                    @ 3  java.lang.AbstractStringBuilder.<init>(int):void (39 bytes)   relevance-based (relevance=1.000000, probability=0.006250, bonus=1.000000, nodes=11 <= 300.000000)
                                                    @ 2  java.lang.AbstractStringBuilder.append(String):AbstractStringBuilder (45 bytes)   not inlining too large previous low-level graph (low-level-nodes: 368, relevance=1.000000, probability=0.006250, bonus=1.000000, nodes=21)
                                                    @ 2  java.lang.AbstractStringBuilder.append(String):AbstractStringBuilder (45 bytes)   not inlining too large previous low-level graph (low-level-nodes: 368, relevance=1.000000, probability=0.006250, bonus=1.000000, nodes=23)
                            @ 5  java.lang.AbstractStringBuilder.getValue():byte[] (5 bytes)   inline accessor method (bytecode parsing)
                                                    @ 3  java.lang.String.<init>(AbstractStringBuilder, Void):void (99 bytes)   not inlining too large previous low-level graph (low-level-nodes: 376, relevance=1.000000, probability=0.006250, bonus=1.000000, nodes=41)
                            @ 16  java.lang.Math.max(int, int):int (11 bytes)   inline method (bytecode parsing)
                            @ 46  java.lang.String.<init>(byte[], byte):void (15 bytes)   inline method (bytecode parsing)
                                                      @ 36  java.lang.Integer.formatUnsignedInt(int, int, byte[], int):void (40 bytes)   relevance-based (relevance=1.000000, probability=0.006250, bonus=1.000000, nodes=30 <= 300.000000)
                                                    @ 2  java.lang.Integer.toUnsignedString0(int, int):String (76 bytes)   relevance-based (relevance=1.000000, probability=0.006250, bonus=1.000000, nodes=46 <= 300.000000)
                                                    @ 3  java.lang.AbstractStringBuilder.<init>(int):void (39 bytes)   relevance-based (relevance=1.000000, probability=0.006250, bonus=1.000000, nodes=11 <= 300.000000)
                                                    @ 2  java.lang.AbstractStringBuilder.append(String):AbstractStringBuilder (45 bytes)   not inlining too large previous low-level graph (low-level-nodes: 368, relevance=1.000000, probability=0.006250, bonus=1.000000, nodes=21)
                                                    @ 2  java.lang.AbstractStringBuilder.append(String):AbstractStringBuilder (45 bytes)   not inlining too large previous low-level graph (low-level-nodes: 368, relevance=1.000000, probability=0.006250, bonus=1.000000, nodes=21)
                            @ 5  java.lang.AbstractStringBuilder.getValue():byte[] (5 bytes)   inline accessor method (bytecode parsing)
                                                    @ 3  java.lang.String.<init>(AbstractStringBuilder, Void):void (99 bytes)   not inlining too large previous low-level graph (low-level-nodes: 376, relevance=1.000000, probability=0.006250, bonus=1.000000, nodes=41)
                                                  @ 11  java.lang.Module.toString():String (59 bytes)   relevance-based (relevance=1.000000, probability=0.012500, bonus=1.000000, nodes=105 <= 300.000000)
                                                @ 2  java.lang.String.valueOf(Object):String (15 bytes)   relevance-based (relevance=1.000000, probability=0.012500, bonus=1.000000, nodes=118 <= 300.000000)
                                                @ 2  java.lang.AbstractStringBuilder.append(String):AbstractStringBuilder (45 bytes)   not inlining too large previous low-level graph (low-level-nodes: 368, relevance=2.000056, probability=0.012500, bonus=1.000000, nodes=21)
                            @ 5  java.lang.AbstractStringBuilder.getValue():byte[] (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 3  java.lang.String.<init>(AbstractStringBuilder, Void):void (99 bytes)   not inlining too large previous low-level graph (low-level-nodes: 376, relevance=2.000056, probability=0.012500, bonus=1.000000, nodes=41)
                            @ 8  java.lang.StringBuilder.<init>():void (7 bytes)   inline method (bytecode parsing)
                            @ 15  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 20  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 24  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 27  java.lang.StringBuilder.toString():String (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.String.<init>(StringBuilder):void (7 bytes)   inline method (bytecode parsing)
                                                  @ 3  java.lang.AbstractStringBuilder.<init>(int):void (39 bytes)   relevance-based (relevance=1.000000, probability=0.012500, bonus=1.000000, nodes=11 <= 300.000000)
                 n                                @ 14  java.lang.Class.initClassName():String (0 bytes)   not inlining it is a non-intrinsic native method
                                                  @ 12  java.lang.Class.getName():String (18 bytes)   relevance-based (relevance=1.000000, probability=0.012500, bonus=1.000000, nodes=17 <= 300.000000)
                                                  @ 2  java.lang.AbstractStringBuilder.append(String):AbstractStringBuilder (45 bytes)   not inlining too large previous low-level graph (low-level-nodes: 368, relevance=1.187487, probability=0.012500, bonus=1.000000, nodes=23)
                                                  @ 2  java.lang.AbstractStringBuilder.append(String):AbstractStringBuilder (45 bytes)   not inlining too large previous low-level graph (low-level-nodes: 368, relevance=1.187487, probability=0.012500, bonus=1.000000, nodes=21)
                                                  @ 2  java.lang.AbstractStringBuilder.append(String):AbstractStringBuilder (45 bytes)   not inlining too large previous low-level graph (low-level-nodes: 368, relevance=1.187487, probability=0.012500, bonus=1.000000, nodes=21)
                            @ 5  java.lang.AbstractStringBuilder.getValue():byte[] (5 bytes)   inline accessor method (bytecode parsing)
                                                  @ 3  java.lang.String.<init>(AbstractStringBuilder, Void):void (99 bytes)   not inlining too large previous low-level graph (low-level-nodes: 376, relevance=1.187487, probability=0.012500, bonus=1.000000, nodes=41)
                                                @ 50  java.util.ServiceLoader.fail(Class, String):void (34 bytes)   relevance-based (relevance=2.000056, probability=0.012500, bonus=1.000000, nodes=52 <= 300.000000)
                            @ 1  java.util.Objects.requireNonNull(Object):Object (14 bytes)   inline method (bytecode parsing)
                            @ 18  java.lang.module.ModuleDescriptor.isAutomatic():boolean (5 bytes)   inline accessor method (bytecode parsing)
                            @ 30  java.lang.module.ModuleDescriptor.uses():Set (5 bytes)   inline accessor method (bytecode parsing)
                            @ 52  java.lang.WeakPairMap.containsKeyPair(Object, Object):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 10  java.lang.WeakPairMap$Pair.lookup(Object, Object):WeakPairMap$Pair (10 bytes)   inline method (bytecode parsing)
                              @ 13  java.util.concurrent.ConcurrentHashMap.containsKey(Object):boolean (14 bytes)   inline method (bytecode parsing)
                                                  @ 6  java.lang.Module.isNamed():boolean (13 bytes)   trivial (relevance=8.000000, probability=0.012500, bonus=1.000000, nodes=9)
                 n                                @ 14  java.lang.Class.initClassName():String (0 bytes)   not inlining it is a non-intrinsic native method
                                                  @ 34  java.lang.Class.getName():String (18 bytes)   relevance-based (relevance=2.000000, probability=0.003125, bonus=1.000000, nodes=17 <= 300.000000)
                                                @ 37  java.util.Set.contains(Object):boolean (0 bytes)   not inlining no type profile exists
                            @ 13  java.util.concurrent.locks.ReentrantLock.lock():void (8 bytes)   inline method (bytecode parsing)
                            @ 25  java.util.concurrent.locks.ReentrantLock.unlock():void (10 bytes)   inline method (bytecode parsing)
                              @ 5  java.util.concurrent.locks.AbstractQueuedSynchronizer.release(int):boolean (19 bytes)   inline method (bytecode parsing)
                                                      @ 1  java.lang.ref.ReferenceQueue.headIsNull():boolean (13 bytes)   relevance-based (relevance=0.594099, probability=0.001562, bonus=1.000000, nodes=11 <= 178.229846)
                            @ 9  java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(int):void (20 bytes)   inline method (bytecode parsing)
                                                      @ 4  java.util.concurrent.locks.ReentrantLock$Sync.lock():void (13 bytes)   not inlining relevance-based (relevance=0.000356, probability=0.000001, bonus=1.000000, nodes=31 > 0.106834)
                                                      @ 17  java.lang.ref.ReferenceQueue.poll0():Reference (65 bytes)   not inlining relevance-based (relevance=0.000356, probability=0.000001, bonus=1.000000, nodes=41 > 0.106834)
                            @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 8  java.util.concurrent.locks.AbstractOwnableSynchronizer.getExclusiveOwnerThread():Thread (5 bytes)   inline accessor method (bytecode parsing)
                            @ 41  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                            @ 46  java.util.concurrent.locks.AbstractQueuedSynchronizer.setState(int):void (6 bytes)   inline method (bytecode parsing)
                                                      @ 2  java.util.concurrent.locks.ReentrantLock$Sync.tryRelease(int):boolean (51 bytes)   not inlining relevance-based (relevance=0.000356, probability=0.000001, bonus=1.000000, nodes=37 > 0.106834)
                            @ 22  java.util.concurrent.locks.AbstractQueuedSynchronizer$Node.getAndUnsetStatus(int):int (14 bytes)   inline method (bytecode parsing)
                              @ 10  jdk.internal.misc.Unsafe.getAndBitwiseAndInt(Object, long, int):int (27 bytes)   inline method (bytecode parsing)
                                                      @ 12  java.util.concurrent.locks.AbstractQueuedSynchronizer.signalNext(AbstractQueuedSynchronizer$Node):void (34 bytes)   not inlining relevance-based (relevance=0.000321, probability=0.000001, bonus=1.000000, nodes=56 > 0.096450)
                                                    @ 4  java.lang.ref.ReferenceQueue.poll():Reference (40 bytes)   relevance-based (relevance=0.593743, probability=0.001562, bonus=1.000000, nodes=46 <= 178.123012)
                                                  @ 1  java.lang.WeakPairMap.expungeStaleAssociations():void (31 bytes)   relevance-based (relevance=0.593743, probability=0.001562, bonus=1.000000, nodes=53 <= 178.123012)
                            @ 6  java.util.Objects.requireNonNull(Object):Object (14 bytes)   inline method (bytecode parsing)
                            @ 14  java.util.Objects.requireNonNull(Object):Object (14 bytes)   inline method (bytecode parsing)
                                                  @ 6  java.lang.WeakPairMap$Pair$Lookup.<init>(Object, Object):void (21 bytes)   relevance-based (relevance=0.593743, probability=0.001562, bonus=1.000000, nodes=11 <= 178.123012)
                            @ 4  java.util.concurrent.ConcurrentHashMap.spread(int):int (10 bytes)   inline method (bytecode parsing)
                            @ 8  java.lang.WeakPairMap$Pair.hashCode(Object, Object):int (10 bytes)   inline method (bytecode parsing)
                                                    @ 1  java.lang.WeakPairMap$Pair$Lookup.hashCode():int (12 bytes)   relevance-based (relevance=2.365218, probability=0.001562, bonus=1.000000, nodes=12 <= 300.000000)
                                                    @ 34  java.util.concurrent.ConcurrentHashMap.tabAt(ConcurrentHashMap$Node[], int):ConcurrentHashMap$Node (22 bytes)   relevance-based (relevance=2.358522, probability=0.001558, bonus=1.000000, nodes=11 <= 300.000000)
                            @ 1  java.lang.ref.Reference.get():Object (5 bytes)   inline accessor method (bytecode parsing)
                                                        @ 10  java.lang.WeakPairMap$Pair$Weak.first():Object (5 bytes)   trivial (relevance=0.595341, probability=0.000392, bonus=1.000000, nodes=6)
                            @ 4  java.lang.ref.Reference.get():Object (5 bytes)   inline accessor method (bytecode parsing)
                                                        @ 20  java.lang.WeakPairMap$Pair$Weak.second():Object (8 bytes)   relevance-based (relevance=0.593859, probability=0.000391, bonus=1.000000, nodes=10 <= 178.157646)
                                                      @ 19  java.lang.WeakPairMap$Pair.equals(Object, Object, WeakPairMap$Pair):boolean (34 bytes)   relevance-based (relevance=0.593859, probability=0.000392, bonus=1.000000, nodes=31 <= 178.157646)
                                                    @ 73  java.lang.WeakPairMap$Pair$Lookup.equals(Object):boolean (31 bytes)   relevance-based (relevance=0.593859, probability=0.000392, bonus=1.000000, nodes=40 <= 178.157646)
                            @ 1  java.lang.ref.Reference.get():Object (5 bytes)   inline accessor method (bytecode parsing)
                                                        @ 10  java.lang.WeakPairMap$Pair$Weak.first():Object (5 bytes)   trivial (relevance=0.170202, probability=0.000066, bonus=1.000000, nodes=6)
                            @ 4  java.lang.ref.Reference.get():Object (5 bytes)   inline accessor method (bytecode parsing)
                                                        @ 20  java.lang.WeakPairMap$Pair$Weak.second():Object (8 bytes)   relevance-based (relevance=0.169779, probability=0.000066, bonus=1.000000, nodes=10 <= 50.933596)
                                                      @ 19  java.lang.WeakPairMap$Pair.equals(Object, Object, WeakPairMap$Pair):boolean (34 bytes)   relevance-based (relevance=0.169779, probability=0.000066, bonus=1.000000, nodes=31 <= 50.933596)
                                                    @ 149  java.lang.WeakPairMap$Pair$Lookup.equals(Object):boolean (31 bytes)   relevance-based (relevance=0.169779, probability=0.000066, bonus=1.000000, nodes=40 <= 50.933596)
                                                  @ 2  java.util.concurrent.ConcurrentHashMap.get(Object):Object (162 bytes)   relevance-based (relevance=0.593743, probability=0.001562, bonus=1.000000, nodes=176 <= 178.123012)
                                                @ 55  java.lang.Module.canUse(Class):boolean (56 bytes)   relevance-based (relevance=2.000056, probability=0.012500, bonus=1.000000, nodes=280 <= 300.000000)
                                              @ 39  java.util.ServiceLoader.checkCaller(Class, Class):void (85 bytes)   not inlining relevance-based (relevance=4.000000, probability=0.025000, bonus=1.000000, nodes=510 > 300.000000)
                            @ 0  jdk.internal.misc.VM.initLevel():int (4 bytes)   inline method (bytecode parsing)
                            @ 45  java.lang.IllegalStateException.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  java.lang.RuntimeException.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                                @ 2  java.lang.Exception.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                            @ 32  java.lang.ClassLoader.getBuiltinAppClassLoader():ClassLoader (4 bytes)   inline method (bytecode parsing)
                              @ 0  jdk.internal.loader.ClassLoaders.appClassLoader():ClassLoader (4 bytes)   inline method (bytecode parsing)
                                                  @ 0  java.lang.System.allowSecurityManager():boolean (13 bytes)   trivial (relevance=0.333581, probability=0.001250, bonus=1.000000, nodes=8)
                                                @ 75  java.lang.System.getSecurityManager():SecurityManager (12 bytes)   relevance-based (relevance=0.333333, probability=0.001250, bonus=1.000000, nodes=14 <= 100.000000)
                                                    @ 0  java.lang.System.allowSecurityManager():boolean (13 bytes)   trivial (relevance=0.333578, probability=0.000625, bonus=1.000000, nodes=8)
                                                  @ 0  java.lang.System.getSecurityManager():SecurityManager (12 bytes)   relevance-based (relevance=0.333330, probability=0.000625, bonus=1.000000, nodes=14 <= 99.999000)
                            @ 7  java.lang.Class.getClassLoader0():ClassLoader (5 bytes)   inline accessor method (bytecode parsing)
                                                  @ 9  java.lang.ClassLoader.getClassLoader(Class):ClassLoader (11 bytes)   relevance-based (relevance=0.083395, probability=0.000312, bonus=1.000000, nodes=13 <= 25.018358)
                                                @ 89  java.lang.ClassLoader.checkClassLoaderPermission(ClassLoader, Class):void (29 bytes)   not inlining relevance-based (relevance=0.166665, probability=0.000625, bonus=1.000000, nodes=50 > 49.999500)
                 n                                @ 16  java.lang.Throwable.fillInStackTrace(int):Throwable (0 bytes)   not inlining it is a non-intrinsic native method
              s                                   @ 24  java.lang.Throwable.fillInStackTrace():Throwable (29 bytes)   relevance-based (relevance=0.333333, probability=0.001250, bonus=1.000000, nodes=34 <= 100.000000)
                                                @ 2  java.lang.Throwable.<init>(String):void (34 bytes)   relevance-based (relevance=0.333333, probability=0.001250, bonus=1.000000, nodes=45 <= 100.000000)
                                              @ 46  java.lang.ClassLoader.getSystemClassLoader():ClassLoader (96 bytes)   relevance-based (relevance=1.000000, probability=0.006250, bonus=1.000000, nodes=103 <= 300.000000)
                 n                            @ 14  java.lang.Class.initClassName():String (0 bytes)   not inlining it is a non-intrinsic native method
                                              @ 124  java.lang.Class.getName():String (18 bytes)   relevance-based (relevance=4.666667, probability=0.017500, bonus=1.000000, nodes=17 <= 300.000000)
                                                @ 0  java.lang.System.allowSecurityManager():boolean (13 bytes)   trivial (relevance=1.000744, probability=0.017500, bonus=1.000000, nodes=8)
                                              @ 141  java.lang.System.getSecurityManager():SecurityManager (12 bytes)   relevance-based (relevance=4.666667, probability=0.017500, bonus=1.000000, nodes=14 <= 300.000000)
                            @ 14  java.security.AccessControlContext.<init>(ProtectionDomain[], boolean):void (30 bytes)   inline method (bytecode parsing)
                 n                            @ 0  java.security.AccessController.getStackAccessControlContext():AccessControlContext (0 bytes)   not inlining it is a non-intrinsic native method
                 n                              @ 44  java.security.AccessController.getInheritedAccessControlContext():AccessControlContext (0 bytes)   not inlining it is a non-intrinsic native method
                                                  @ 141  java.security.AccessControlContext.getDebug():Debug (32 bytes)   relevance-based (relevance=2.000000, probability=0.001094, bonus=1.000000, nodes=11 <= 300.000000)
                            @ 7  java.lang.StringBuilder.<init>():void (7 bytes)   inline method (bytecode parsing)
                            @ 14  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 19  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 23  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 26  java.lang.StringBuilder.toString():String (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.String.<init>(StringBuilder):void (7 bytes)   inline method (bytecode parsing)
                                                    @ 3  java.lang.AbstractStringBuilder.<init>(int):void (39 bytes)   relevance-based (relevance=1.000000, probability=0.000547, bonus=1.000000, nodes=11 <= 300.000000)
                                                    @ 2  java.lang.AbstractStringBuilder.append(String):AbstractStringBuilder (45 bytes)   not inlining too large previous low-level graph (low-level-nodes: 368, relevance=1.000000, probability=0.000547, bonus=1.000000, nodes=23)
                                                    @ 2  java.lang.AbstractStringBuilder.append(String):AbstractStringBuilder (45 bytes)   not inlining too large previous low-level graph (low-level-nodes: 368, relevance=1.000000, probability=0.000547, bonus=1.000000, nodes=21)
                                                    @ 2  java.lang.AbstractStringBuilder.append(String):AbstractStringBuilder (45 bytes)   not inlining too large previous low-level graph (low-level-nodes: 368, relevance=1.000000, probability=0.000547, bonus=1.000000, nodes=21)
                            @ 5  java.lang.AbstractStringBuilder.getValue():byte[] (5 bytes)   inline accessor method (bytecode parsing)
                                                    @ 3  java.lang.String.<init>(AbstractStringBuilder, Void):void (99 bytes)   not inlining too large previous low-level graph (low-level-nodes: 376, relevance=1.000000, probability=0.000547, bonus=1.000000, nodes=41)
                                                        @ 11  java.lang.String.toString():String (2 bytes)   trivial (relevance=1.000000, probability=0.000547, bonus=1.000000, nodes=4)
                                                      @ 11  java.lang.String.valueOf(Object):String (15 bytes)   trivial (relevance=1.000000, probability=0.000547, bonus=1.000000, nodes=4)
                            @ 11  jdk.internal.misc.InternalLock.lock():void (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.util.concurrent.locks.ReentrantLock.lock():void (8 bytes)   inline method (bytecode parsing)
                            @ 23  jdk.internal.misc.InternalLock.unlock():void (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.util.concurrent.locks.ReentrantLock.unlock():void (10 bytes)   inline method (bytecode parsing)
                                @ 5  java.util.concurrent.locks.AbstractQueuedSynchronizer.release(int):boolean (19 bytes)   inline method (bytecode parsing)
                            @ 9  java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(int):void (20 bytes)   inline method (bytecode parsing)
                            @ 7  java.util.concurrent.locks.AbstractQueuedSynchronizer.compareAndSetState(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 15  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                            @ 21  java.util.concurrent.locks.AbstractOwnableSynchronizer.getExclusiveOwnerThread():Thread (5 bytes)   inline accessor method (bytecode parsing)
                            @ 29  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 51  java.util.concurrent.locks.AbstractQueuedSynchronizer.setState(int):void (6 bytes)   inline method (bytecode parsing)
                                                          @ 1  java.util.concurrent.locks.ReentrantLock$NonfairSync.initialTryLock():boolean (58 bytes)   relevance-based (relevance=1.020031, probability=0.000273, bonus=1.000000, nodes=40 <= 300.000000)
                            @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 10  java.util.concurrent.locks.AbstractQueuedSynchronizer.compareAndSetState(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 20  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                                                          @ 2  java.util.concurrent.locks.ReentrantLock$NonfairSync.tryAcquire(int):boolean (27 bytes)   not inlining relevance-based (relevance=0.043772, probability=0.000011, bonus=1.000000, nodes=36 > 13.131676)
                            @ 245  java.util.concurrent.locks.AbstractQueuedSynchronizer$ExclusiveNode.<init>():void (5 bytes)   inline method (bytecode parsing)
                              @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer$Node.<init>():void (5 bytes)   inline method (bytecode parsing)
                            @ 393  java.lang.Thread.interrupted():boolean (7 bytes)   inline method (bytecode parsing)
                                                          @ 15  java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer$Node, int, boolean, boolean, boolean, long):int (424 bytes)   not inlining relevance-based (relevance=0.033977, probability=0.000008, bonus=1.000000, nodes=197 > 10.193132)
                                                        @ 4  java.util.concurrent.locks.ReentrantLock$Sync.lock():void (13 bytes)   relevance-based (relevance=1.107666, probability=0.000273, bonus=1.000000, nodes=57 <= 300.000000)
                            @ 16  java.io.BufferedWriter.newLine():void (8 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.System.lineSeparator():String (4 bytes)   inline method (bytecode parsing)
                            @ 30  java.io.OutputStreamWriter.flushBuffer():void (8 bytes)   inline method (bytecode parsing)
                            @ 39  java.io.BufferedWriter.min(int, int):int (9 bytes)   inline method (bytecode parsing)
                                                          @ 1  java.io.PrintStream.ensureOpen():void (18 bytes)   trivial (relevance=2.000000, probability=0.000273, bonus=1.000000, nodes=7)
                                                              @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.000273, bonus=1.000000, nodes=5)
                                                            @ 4  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000000, probability=0.000273, bonus=1.000000, nodes=8)
                            @ 23  jdk.internal.misc.InternalLock.lock():void (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.util.concurrent.locks.ReentrantLock.lock():void (8 bytes)   inline method (bytecode parsing)
                            @ 35  jdk.internal.misc.InternalLock.unlock():void (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.util.concurrent.locks.ReentrantLock.unlock():void (10 bytes)   inline method (bytecode parsing)
                                @ 5  java.util.concurrent.locks.AbstractQueuedSynchronizer.release(int):boolean (19 bytes)   inline method (bytecode parsing)
                            @ 9  java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(int):void (20 bytes)   inline method (bytecode parsing)
                            @ 7  java.util.concurrent.locks.AbstractQueuedSynchronizer.compareAndSetState(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 15  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                            @ 21  java.util.concurrent.locks.AbstractOwnableSynchronizer.getExclusiveOwnerThread():Thread (5 bytes)   inline accessor method (bytecode parsing)
                            @ 29  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 51  java.util.concurrent.locks.AbstractQueuedSynchronizer.setState(int):void (6 bytes)   inline method (bytecode parsing)
                                                                @ 1  java.util.concurrent.locks.ReentrantLock$NonfairSync.initialTryLock():boolean (58 bytes)   relevance-based (relevance=1.020031, probability=0.000273, bonus=1.000000, nodes=40 <= 300.000000)
                            @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 10  java.util.concurrent.locks.AbstractQueuedSynchronizer.compareAndSetState(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 20  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                                                                @ 2  java.util.concurrent.locks.ReentrantLock$NonfairSync.tryAcquire(int):boolean (27 bytes)   not inlining relevance-based (relevance=0.043772, probability=0.000011, bonus=1.000000, nodes=36 > 13.131676)
                            @ 245  java.util.concurrent.locks.AbstractQueuedSynchronizer$ExclusiveNode.<init>():void (5 bytes)   inline method (bytecode parsing)
                              @ 1  java.io.BufferedWriter.ensureOpen():void (18 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=7)
                              @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer$Node.<init>():void (5 bytes)   inline method (bytecode parsing)
                            @ 393  java.lang.Thread.interrupted():boolean (7 bytes)   inline method (bytecode parsing)
                              @ 6  java.io.BufferedWriter.growIfNeeded(int):void (63 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=15 <= 300.000000)
                            @ 16  java.lang.String.checkBoundsOffCount(int, int, int):int (10 bytes)   inline method (bytecode parsing)
                                  @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                                @ 3  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=8)
                                                                @ 15  java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer$Node, int, boolean, boolean, boolean, long):int (424 bytes)   not inlining relevance-based (relevance=0.033977, probability=0.000008, bonus=1.000000, nodes=197 > 10.193132)
                                                              @ 4  java.util.concurrent.locks.ReentrantLock$Sync.lock():void (13 bytes)   relevance-based (relevance=1.107666, probability=0.000273, bonus=1.000000, nodes=57 <= 300.000000)
                                  @ 6  jdk.internal.util.Preconditions.checkFromToIndex(int, int, int, BiFunction):int (24 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=14 <= 300.000000)
                                @ 6  java.lang.String.checkBoundsBeginEnd(int, int, int):void (11 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=13 <= 300.000000)
                            @ 39  java.io.BufferedWriter.min(int, int):int (9 bytes)   inline method (bytecode parsing)
                                @ 6  jdk.internal.util.Preconditions.checkFromIndexSize(int, int, int, BiFunction):int (25 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=15 <= 300.000000)
                                @ 21  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=9)
                                                                @ 1  java.io.BufferedWriter.ensureOpen():void (18 bytes)   trivial (relevance=1.000000, probability=0.000273, bonus=1.000000, nodes=7)
                                                                @ 6  java.io.BufferedWriter.growIfNeeded(int):void (63 bytes)   relevance-based (relevance=1.000000, probability=0.000273, bonus=1.000000, nodes=15 <= 300.000000)
                                @ 36  java.lang.StringLatin1.getChars(byte[], int, int, char[], int):void (12 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=40 <= 300.000000)
                            @ 16  java.lang.String.checkBoundsOffCount(int, int, int):int (10 bytes)   inline method (bytecode parsing)
                              @ 60  java.lang.String.getChars(int, int, char[], int):void (55 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=62 <= 300.000000)
                                                                    @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.000273, bonus=1.000000, nodes=5)
                                                                  @ 3  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000000, probability=0.000273, bonus=1.000000, nodes=8)
                                                                    @ 6  jdk.internal.util.Preconditions.checkFromToIndex(int, int, int, BiFunction):int (24 bytes)   relevance-based (relevance=1.000000, probability=0.000273, bonus=1.000000, nodes=11 <= 300.000000)
                                                                  @ 6  java.lang.String.checkBoundsBeginEnd(int, int, int):void (11 bytes)   relevance-based (relevance=1.000000, probability=0.000273, bonus=1.000000, nodes=10 <= 300.000000)
                                                                  @ 6  jdk.internal.util.Preconditions.checkFromIndexSize(int, int, int, BiFunction):int (25 bytes)   relevance-based (relevance=1.000000, probability=0.000273, bonus=1.000000, nodes=15 <= 300.000000)
                                                                  @ 21  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=0.000273, bonus=1.000000, nodes=9)
                                                                  @ 36  java.lang.StringLatin1.getChars(byte[], int, int, char[], int):void (12 bytes)   relevance-based (relevance=1.000000, probability=0.000273, bonus=1.000000, nodes=38 <= 300.000000)
                                                                @ 60  java.lang.String.getChars(int, int, char[], int):void (55 bytes)   relevance-based (relevance=1.000000, probability=0.000273, bonus=1.000000, nodes=58 <= 300.000000)
                                                              @ 30  java.io.BufferedWriter.implWrite(String, int, int):void (100 bytes)   relevance-based (relevance=1.137693, probability=0.000273, bonus=1.000000, nodes=93 <= 300.000000)
                            @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 8  java.util.concurrent.locks.AbstractOwnableSynchronizer.getExclusiveOwnerThread():Thread (5 bytes)   inline accessor method (bytecode parsing)
                            @ 41  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                            @ 46  java.util.concurrent.locks.AbstractQueuedSynchronizer.setState(int):void (6 bytes)   inline method (bytecode parsing)
                                                              @ 2  java.util.concurrent.locks.ReentrantLock$Sync.tryRelease(int):boolean (51 bytes)   relevance-based (relevance=1.137693, probability=0.000273, bonus=1.000000, nodes=37 <= 300.000000)
                            @ 22  java.util.concurrent.locks.AbstractQueuedSynchronizer$Node.getAndUnsetStatus(int):int (14 bytes)   inline method (bytecode parsing)
                              @ 10  jdk.internal.misc.Unsafe.getAndBitwiseAndInt(Object, long, int):int (27 bytes)   inline method (bytecode parsing)
                            @ 5  java.lang.Thread.isVirtual():boolean (5 bytes)   inline method (bytecode parsing)
                                                                @ 30  java.util.concurrent.locks.LockSupport.unpark(Thread):void (26 bytes)   not inlining relevance-based (relevance=0.011708, probability=0.000002, bonus=1.000000, nodes=20 > 3.512350)
                                                              @ 12  java.util.concurrent.locks.AbstractQueuedSynchronizer.signalNext(AbstractQueuedSynchronizer$Node):void (34 bytes)   relevance-based (relevance=1.027108, probability=0.000247, bonus=1.000000, nodes=56 <= 300.000000)
                                                            @ 7  java.io.BufferedWriter.write(String, int, int):void (82 bytes)   relevance-based (relevance=1.000000, probability=0.000273, bonus=1.000000, nodes=262 <= 300.000000)
                                                          @ 9  java.io.Writer.write(String):void (11 bytes)   relevance-based (relevance=2.000000, probability=0.000273, bonus=1.000000, nodes=266 <= 300.000000)
                                                        @ 16  java.io.PrintStream.implWriteln(String):void (48 bytes)   not inlining relevance-based (relevance=1.137693, probability=0.000273, bonus=1.000000, nodes=309 > 300.000000)
                            @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 8  java.util.concurrent.locks.AbstractOwnableSynchronizer.getExclusiveOwnerThread():Thread (5 bytes)   inline accessor method (bytecode parsing)
                            @ 41  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                            @ 46  java.util.concurrent.locks.AbstractQueuedSynchronizer.setState(int):void (6 bytes)   inline method (bytecode parsing)
                                                        @ 2  java.util.concurrent.locks.ReentrantLock$Sync.tryRelease(int):boolean (51 bytes)   relevance-based (relevance=1.137693, probability=0.000273, bonus=1.000000, nodes=37 <= 300.000000)
                            @ 22  java.util.concurrent.locks.AbstractQueuedSynchronizer$Node.getAndUnsetStatus(int):int (14 bytes)   inline method (bytecode parsing)
                              @ 10  jdk.internal.misc.Unsafe.getAndBitwiseAndInt(Object, long, int):int (27 bytes)   inline method (bytecode parsing)
                            @ 5  java.lang.Thread.isVirtual():boolean (5 bytes)   inline method (bytecode parsing)
                                                          @ 30  java.util.concurrent.locks.LockSupport.unpark(Thread):void (26 bytes)   not inlining relevance-based (relevance=0.011708, probability=0.000002, bonus=1.000000, nodes=20 > 3.512350)
                                                        @ 12  java.util.concurrent.locks.AbstractQueuedSynchronizer.signalNext(AbstractQueuedSynchronizer$Node):void (34 bytes)   relevance-based (relevance=1.027108, probability=0.000247, bonus=1.000000, nodes=56 <= 300.000000)
                            @ 16  java.io.BufferedWriter.newLine():void (8 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.System.lineSeparator():String (4 bytes)   inline method (bytecode parsing)
                            @ 30  java.io.OutputStreamWriter.flushBuffer():void (8 bytes)   inline method (bytecode parsing)
                                                          @ 1  java.io.PrintStream.ensureOpen():void (18 bytes)   trivial (relevance=2.000000, probability=0.000273, bonus=1.000000, nodes=7)
                                                              @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.000273, bonus=1.000000, nodes=5)
                                                            @ 4  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000000, probability=0.000273, bonus=1.000000, nodes=8)
                            @ 23  jdk.internal.misc.InternalLock.lock():void (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.util.concurrent.locks.ReentrantLock.lock():void (8 bytes)   inline method (bytecode parsing)
                            @ 35  jdk.internal.misc.InternalLock.unlock():void (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.util.concurrent.locks.ReentrantLock.unlock():void (10 bytes)   inline method (bytecode parsing)
                                @ 5  java.util.concurrent.locks.AbstractQueuedSynchronizer.release(int):boolean (19 bytes)   inline method (bytecode parsing)
                            @ 9  java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(int):void (20 bytes)   inline method (bytecode parsing)
                            @ 7  java.util.concurrent.locks.AbstractQueuedSynchronizer.compareAndSetState(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 15  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                            @ 21  java.util.concurrent.locks.AbstractOwnableSynchronizer.getExclusiveOwnerThread():Thread (5 bytes)   inline accessor method (bytecode parsing)
                            @ 29  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 51  java.util.concurrent.locks.AbstractQueuedSynchronizer.setState(int):void (6 bytes)   inline method (bytecode parsing)
                                                                @ 1  java.util.concurrent.locks.ReentrantLock$NonfairSync.initialTryLock():boolean (58 bytes)   relevance-based (relevance=1.020031, probability=0.000273, bonus=1.000000, nodes=40 <= 300.000000)
                            @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 10  java.util.concurrent.locks.AbstractQueuedSynchronizer.compareAndSetState(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 20  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                                                                @ 2  java.util.concurrent.locks.ReentrantLock$NonfairSync.tryAcquire(int):boolean (27 bytes)   not inlining relevance-based (relevance=0.043772, probability=0.000011, bonus=1.000000, nodes=36 > 13.131676)
                            @ 245  java.util.concurrent.locks.AbstractQueuedSynchronizer$ExclusiveNode.<init>():void (5 bytes)   inline method (bytecode parsing)
                              @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer$Node.<init>():void (5 bytes)   inline method (bytecode parsing)
                            @ 393  java.lang.Thread.interrupted():boolean (7 bytes)   inline method (bytecode parsing)
                                                                @ 15  java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer$Node, int, boolean, boolean, boolean, long):int (424 bytes)   not inlining relevance-based (relevance=0.033977, probability=0.000008, bonus=1.000000, nodes=197 > 10.193132)
                                                              @ 4  java.util.concurrent.locks.ReentrantLock$Sync.lock():void (13 bytes)   relevance-based (relevance=1.107666, probability=0.000273, bonus=1.000000, nodes=57 <= 300.000000)
                            @ 39  java.io.BufferedWriter.min(int, int):int (9 bytes)   inline method (bytecode parsing)
                                                                @ 1  java.io.BufferedWriter.ensureOpen():void (18 bytes)   trivial (relevance=1.000000, probability=0.000273, bonus=1.000000, nodes=7)
                                                                @ 6  java.io.BufferedWriter.growIfNeeded(int):void (63 bytes)   relevance-based (relevance=1.000000, probability=0.000273, bonus=1.000000, nodes=15 <= 300.000000)
                            @ 16  java.lang.String.checkBoundsOffCount(int, int, int):int (10 bytes)   inline method (bytecode parsing)
                                                                    @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.000273, bonus=1.000000, nodes=5)
                                                                  @ 3  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000000, probability=0.000273, bonus=1.000000, nodes=8)
                                                                    @ 6  jdk.internal.util.Preconditions.checkFromToIndex(int, int, int, BiFunction):int (24 bytes)   relevance-based (relevance=1.000000, probability=0.000273, bonus=1.000000, nodes=11 <= 300.000000)
                                                                  @ 6  java.lang.String.checkBoundsBeginEnd(int, int, int):void (11 bytes)   relevance-based (relevance=1.000000, probability=0.000273, bonus=1.000000, nodes=10 <= 300.000000)
                                                                  @ 6  jdk.internal.util.Preconditions.checkFromIndexSize(int, int, int, BiFunction):int (25 bytes)   relevance-based (relevance=1.000000, probability=0.000273, bonus=1.000000, nodes=15 <= 300.000000)
                                                                  @ 21  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=0.000273, bonus=1.000000, nodes=9)
                                                                  @ 36  java.lang.StringLatin1.getChars(byte[], int, int, char[], int):void (12 bytes)   relevance-based (relevance=1.000000, probability=0.000273, bonus=1.000000, nodes=38 <= 300.000000)
                                                                @ 60  java.lang.String.getChars(int, int, char[], int):void (55 bytes)   relevance-based (relevance=1.000000, probability=0.000273, bonus=1.000000, nodes=58 <= 300.000000)
                                                              @ 30  java.io.BufferedWriter.implWrite(String, int, int):void (100 bytes)   relevance-based (relevance=1.137693, probability=0.000273, bonus=1.000000, nodes=93 <= 300.000000)
                            @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 8  java.util.concurrent.locks.AbstractOwnableSynchronizer.getExclusiveOwnerThread():Thread (5 bytes)   inline accessor method (bytecode parsing)
                            @ 41  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                            @ 46  java.util.concurrent.locks.AbstractQueuedSynchronizer.setState(int):void (6 bytes)   inline method (bytecode parsing)
                                                              @ 2  java.util.concurrent.locks.ReentrantLock$Sync.tryRelease(int):boolean (51 bytes)   relevance-based (relevance=1.137693, probability=0.000273, bonus=1.000000, nodes=37 <= 300.000000)
                            @ 22  java.util.concurrent.locks.AbstractQueuedSynchronizer$Node.getAndUnsetStatus(int):int (14 bytes)   inline method (bytecode parsing)
                              @ 10  jdk.internal.misc.Unsafe.getAndBitwiseAndInt(Object, long, int):int (27 bytes)   inline method (bytecode parsing)
                            @ 5  java.lang.Thread.isVirtual():boolean (5 bytes)   inline method (bytecode parsing)
                                                                @ 30  java.util.concurrent.locks.LockSupport.unpark(Thread):void (26 bytes)   not inlining relevance-based (relevance=0.011708, probability=0.000002, bonus=1.000000, nodes=20 > 3.512350)
                                                              @ 12  java.util.concurrent.locks.AbstractQueuedSynchronizer.signalNext(AbstractQueuedSynchronizer$Node):void (34 bytes)   relevance-based (relevance=1.027108, probability=0.000247, bonus=1.000000, nodes=56 <= 300.000000)
                                                            @ 7  java.io.BufferedWriter.write(String, int, int):void (82 bytes)   relevance-based (relevance=1.000000, probability=0.000273, bonus=1.000000, nodes=262 <= 300.000000)
                                                          @ 9  java.io.Writer.write(String):void (11 bytes)   relevance-based (relevance=2.000000, probability=0.000273, bonus=1.000000, nodes=266 <= 300.000000)
                                                        @ 48  java.io.PrintStream.implWriteln(String):void (48 bytes)   not inlining relevance-based (relevance=1.137693, probability=0.000273, bonus=1.000000, nodes=309 > 300.000000)
                                                      @ 14  java.io.PrintStream.writeln(String):void (81 bytes)   relevance-based (relevance=1.000000, probability=0.000547, bonus=1.000000, nodes=189 <= 300.000000)
                                                    @ 29  java.io.PrintStream.println(String):void (44 bytes)   relevance-based (relevance=1.000000, probability=0.000547, bonus=1.000000, nodes=190 <= 300.000000)
                                                  @ 153  sun.security.util.Debug.println(String):void (33 bytes)   not inlining callee invoke probability is too high (invokeP=5.037505, relevance=1.000000, probability=0.000547, bonus=1.000000, nodes=224)
                                                    @ 38  java.security.AccessControlContext.combine(ProtectionDomain[], ProtectionDomain[]):ProtectionDomain[] (205 bytes)   relevance-based (relevance=2.000000, probability=0.000820, bonus=1.000000, nodes=143 <= 300.000000)
                                                      @ 103  java.lang.Object.equals(Object):boolean (11 bytes)   trivial (relevance=0.499997, probability=0.000011, bonus=1.000000, nodes=9)
                                                    @ 61  java.security.AccessControlContext.containsAllPDs(ProtectionDomain[], ProtectionDomain[]):boolean (135 bytes)   relevance-based (relevance=0.499997, probability=0.000205, bonus=1.000000, nodes=97 <= 149.999121)
                                                  @ 193  java.security.AccessControlContext.calculateFields(AccessControlContext, AccessControlContext, Permission[]):void (89 bytes)   relevance-based (relevance=1.500000, probability=0.000820, bonus=1.000000, nodes=286 <= 300.000000)
                                                @ 19  java.security.AccessControlContext.optimize():AccessControlContext (319 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.004375, bonus=1.000000, nodes=479 > 300.000000)
                                              @ 147  java.security.AccessController.getContext():AccessControlContext (23 bytes)   relevance-based (relevance=2.333333, probability=0.008750, bonus=1.000000, nodes=29 <= 300.000000)
                                            @ 9  java.util.ServiceLoader.<init>(Class, Class, ClassLoader):void (158 bytes)   relevance-based (relevance=1.333333, probability=0.025000, bonus=1.000000, nodes=209 <= 300.000000)
                                          @ 10  jdk.graal.compiler.options.OptionsParser.getOptionsLoader():Iterable (25 bytes)   not inlining relevance-based (relevance=2.000000, probability=0.062500, bonus=1.000000, nodes=309 > 300.000000)
                                            @ 0  jdk.vm.ci.services.Services.checkJVMCIEnabled():void (17 bytes)   trivial (relevance=4.000000, probability=0.062500, bonus=1.000000, nodes=3)
                                              @ 0  java.lang.System.allowSecurityManager():boolean (13 bytes)   trivial (relevance=1.000744, probability=0.015625, bonus=1.000000, nodes=8)
                                            @ 42  java.lang.System.getSecurityManager():SecurityManager (12 bytes)   relevance-based (relevance=1.000000, probability=0.015625, bonus=1.000000, nodes=14 <= 300.000000)
                            @ 12  java.lang.IllegalStateException.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  java.lang.RuntimeException.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                                @ 2  java.lang.Exception.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                            @ 12  java.lang.NullPointerException.<init>():void (5 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.RuntimeException.<init>():void (5 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.Exception.<init>():void (5 bytes)   inline method (bytecode parsing)
                 n                                  @ 25  java.lang.NullPointerException.getExtendedNPEMessage():String (0 bytes)   not inlining it is a non-intrinsic native method
                 n                                    @ 16  java.lang.Throwable.fillInStackTrace(int):Throwable (0 bytes)   not inlining it is a non-intrinsic native method
              s                                       @ 37  java.lang.Throwable.fillInStackTrace():Throwable (29 bytes)   relevance-based (relevance=4.000000, probability=0.001953, bonus=1.000000, nodes=34 <= 300.000000)
              s                                     @ 24  java.lang.NullPointerException.fillInStackTrace():Throwable (41 bytes)   relevance-based (relevance=1.000000, probability=0.001953, bonus=1.000000, nodes=65 <= 300.000000)
                                                  @ 1  java.lang.Throwable.<init>():void (29 bytes)   relevance-based (relevance=1.000000, probability=0.001953, bonus=1.000000, nodes=73 <= 300.000000)
                                                @ 18  java.util.Collections$UnmodifiableMap.<init>(Map):void (22 bytes)   relevance-based (relevance=1.000000, probability=0.003906, bonus=1.000000, nodes=87 <= 300.000000)
                                              @ 19  java.util.Collections.unmodifiableMap(Map):Map (22 bytes)   relevance-based (relevance=1.000000, probability=0.007812, bonus=1.000000, nodes=95 <= 300.000000)
                 n                              @ 16  java.lang.Throwable.fillInStackTrace(int):Throwable (0 bytes)   not inlining it is a non-intrinsic native method
              s                                 @ 24  java.lang.Throwable.fillInStackTrace():Throwable (29 bytes)   relevance-based (relevance=1.000000, probability=0.007812, bonus=1.000000, nodes=34 <= 300.000000)
                                              @ 2  java.lang.Throwable.<init>(String):void (34 bytes)   relevance-based (relevance=16.000000, probability=0.007812, bonus=1.000000, nodes=45 <= 300.000000)
                                            @ 61  jdk.internal.misc.VM.getSavedProperties():Map (23 bytes)   relevance-based (relevance=1.000744, probability=0.015625, bonus=1.000000, nodes=147 <= 300.000000)
                                          @ 14  jdk.vm.ci.services.Services.getSavedProperties():Map (81 bytes)   relevance-based (relevance=2.000000, probability=0.062500, bonus=1.000000, nodes=201 <= 300.000000)
                                        @ 4  jdk.graal.compiler.hotspot.HotSpotGraalOptionValues.parseOptions():EconomicMap (417 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.062500, bonus=1.000000, nodes=468 > 300.000000)
                            @ 4  jdk.graal.compiler.options.OptionValues.newOptionMap():EconomicMap (7 bytes)   inline method (bytecode parsing)
                              @ 3  org.graalvm.collections.EconomicMap.create(Equivalence):EconomicMap (6 bytes)   inline method (bytecode parsing)
                                @ 2  org.graalvm.collections.EconomicMapImpl.create(Equivalence, boolean):EconomicMapImpl (13 bytes)   inline method (bytecode parsing)
                                  @ 6  org.graalvm.collections.EconomicMapImpl.<init>(Equivalence, boolean):void (30 bytes)   inline method (bytecode parsing)
                                  @ 9  org.graalvm.collections.EconomicMapImpl.intercept(EconomicMapImpl):EconomicMapImpl (2 bytes)   inline method (bytecode parsing)
                                          @ 1  org.graalvm.collections.UnmodifiableEconomicMap.getEntries():UnmodifiableMapCursor (0 bytes)   not inlining no type profile exists
                                          @ 8  org.graalvm.collections.UnmodifiableMapCursor.advance():boolean (0 bytes)   not inlining no type profile exists
                                          @ 18  org.graalvm.collections.UnmodifiableMapCursor.getKey():Object (0 bytes)   not inlining no type profile exists
                                          @ 27  org.graalvm.collections.UnmodifiableMapCursor.getValue():Object (0 bytes)   not inlining no type profile exists
                                            @ 32  jdk.graal.compiler.options.OptionValues.encodeNull(Object):Object (12 bytes)   relevance-based (relevance=1.000000, probability=0.062500, bonus=1.000000, nodes=14 <= 300.000000)
                            @ 111  org.graalvm.collections.EconomicMapImpl.setKey(int, Object):void (10 bytes)   inline method (bytecode parsing)
                            @ 143  org.graalvm.collections.EconomicMapImpl.size():int (10 bytes)   inline method (bytecode parsing)
                            @ 147  org.graalvm.collections.EconomicMapImpl.size():int (10 bytes)   inline method (bytecode parsing)
                                            @ 35  org.graalvm.collections.EconomicMapImpl.put(Object, Object):Object (192 bytes)   not inlining too large previous low-level graph (low-level-nodes: 1167, relevance=1.000000, probability=0.062500, bonus=1.000000, nodes=101)
                                          @ 10  jdk.graal.compiler.options.OptionValues.initMap(EconomicMap, UnmodifiableEconomicMap):void (45 bytes)   not inlining callee invoke probability is too high (invokeP=6.000000, relevance=1.000000, probability=0.062500, bonus=1.000000, nodes=44)
                                        @ 7  jdk.graal.compiler.options.OptionValues.<init>(UnmodifiableEconomicMap):void (19 bytes)   relevance-based (relevance=1.000000, probability=0.062500, bonus=1.000000, nodes=24 <= 300.000000)
                                      @ 21  jdk.graal.compiler.hotspot.HotSpotGraalOptionValues.initializeOptions():OptionValues (11 bytes)   relevance-based (relevance=1.000000, probability=0.062500, bonus=1.000000, nodes=27 <= 300.000000)
                                    @ 22  jdk.graal.compiler.hotspot.HotSpotGraalOptionValues.defaultOptions():OptionValues (41 bytes)   relevance-based (relevance=6.183661, probability=0.250000, bonus=1.000000, nodes=60 <= 300.000000)
                            @ 23  jdk.graal.compiler.options.OptionValues.get(OptionKey):Object (9 bytes)   inline method (bytecode parsing)
                            @ 13  jdk.graal.compiler.options.OptionKey.getDefaultValue():Object (5 bytes)   inline accessor method (bytecode parsing)
                                      @ 2  org.graalvm.collections.UnmodifiableEconomicMap.get(Object):Object (0 bytes)   not inlining no type profile exists
                                        @ 18  jdk.graal.compiler.options.OptionValues.decodeNull(Object):Object (13 bytes)   relevance-based (relevance=1.000000, probability=0.125000, bonus=1.000000, nodes=15 <= 300.000000)
                                      @ 5  jdk.graal.compiler.options.OptionValues.get(UnmodifiableEconomicMap, OptionKey):Object (22 bytes)   relevance-based (relevance=1.000000, probability=0.250000, bonus=1.000000, nodes=26 <= 300.000000)
                                    @ 25  jdk.graal.compiler.options.OptionKey.getValue(OptionValues):Object (27 bytes)   relevance-based (relevance=4.000000, probability=0.250000, bonus=1.000000, nodes=31 <= 300.000000)
                            @ 5  java.lang.String.contains(CharSequence):boolean (19 bytes)   inline method (bytecode parsing)
                              @ 2  java.lang.String.toString():String (2 bytes)   inline method (bytecode parsing)
                            @ 24  java.lang.String.contains(CharSequence):boolean (19 bytes)   inline method (bytecode parsing)
                              @ 2  java.lang.String.toString():String (2 bytes)   inline method (bytecode parsing)
                            @ 44  java.lang.String.contains(CharSequence):boolean (19 bytes)   inline method (bytecode parsing)
                              @ 2  java.lang.String.toString():String (2 bytes)   inline method (bytecode parsing)
                            @ 64  java.lang.String.contains(CharSequence):boolean (19 bytes)   inline method (bytecode parsing)
                              @ 2  java.lang.String.toString():String (2 bytes)   inline method (bytecode parsing)
                            @ 76  java.lang.String.valueOf(long):String (5 bytes)   inline method (bytecode parsing)
                                        @ 1  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.125000, bonus=1.000000, nodes=5)
                                        @ 7  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.125000, bonus=1.000000, nodes=5)
                                        @ 14  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=0.125000, bonus=1.000000, nodes=9)
                                        @ 28  java.lang.StringLatin1.indexOf(byte[], byte[]):int (25 bytes)   relevance-based (relevance=1.000000, probability=0.125000, bonus=1.000000, nodes=16 <= 300.000000)
                                      @ 7  java.lang.String.indexOf(String):int (64 bytes)   relevance-based (relevance=2.000000, probability=0.125000, bonus=1.000000, nodes=25 <= 300.000000)
                            @ 0  java.lang.ProcessHandle.current():ProcessHandle (4 bytes)   inline method (bytecode parsing)
                            @ 3  java.lang.ProcessHandleImpl.pid():long (5 bytes)   inline accessor method (bytecode parsing)
                            @ 15  java.lang.RuntimePermission.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  java.security.BasicPermission.<init>(String):void (11 bytes)   inline method (bytecode parsing)
                                @ 2  java.security.Permission.<init>(String):void (10 bytes)   inline method (bytecode parsing)
                                            @ 0  java.lang.System.allowSecurityManager():boolean (13 bytes)   trivial (relevance=1.000744, probability=0.062500, bonus=1.000000, nodes=8)
                                          @ 0  java.lang.System.getSecurityManager():SecurityManager (12 bytes)   relevance-based (relevance=2.000000, probability=0.062500, bonus=1.000000, nodes=14 <= 300.000000)
                            @ 10  java.lang.NullPointerException.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  java.lang.RuntimeException.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                                @ 2  java.lang.Exception.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                            @ 29  java.lang.IllegalArgumentException.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  java.lang.RuntimeException.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                                @ 2  java.lang.Exception.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                                              @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.031250, bonus=1.000000, nodes=5)
                                            @ 15  java.lang.String.length():int (11 bytes)   trivial (relevance=8.005955, probability=0.031250, bonus=1.000000, nodes=5)
                                              @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=0.031250, bonus=1.000000, nodes=5)
                            @ 3  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                                              @ 12  java.lang.StringLatin1.charAt(byte[], int):char (15 bytes)   trivial (relevance=1.000000, probability=0.031250, bonus=1.000000, nodes=6)
                                            @ 37  java.lang.String.charAt(int):char (25 bytes)   trivial (relevance=8.005955, probability=0.031250, bonus=1.000000, nodes=6)
                                          @ 7  java.security.BasicPermission.init(String):void (132 bytes)   trivial (relevance=0.500372, probability=0.031250, bonus=1.000000, nodes=7)
                                        @ 0  java.lang.ProcessHandleImpl.current():ProcessHandleImpl (25 bytes)   relevance-based (relevance=1.000000, probability=0.062500, bonus=1.000000, nodes=36 <= 300.000000)
                            @ 28  java.lang.String.<init>(byte[], byte):void (15 bytes)   inline method (bytecode parsing)
                                        @ 8  java.lang.Long.toString(long):String (55 bytes)   not inlining too large previous low-level graph (low-level-nodes: 544, relevance=0.500372, probability=0.031250, bonus=1.000000, nodes=19)
                                      @ 14  jdk.graal.compiler.serviceprovider.GraalServices.getExecutionID():String (12 bytes)   relevance-based (relevance=1.000000, probability=0.062500, bonus=1.000000, nodes=41 <= 300.000000)
                            @ 206  java.lang.StringBuilder.<init>(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 215  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 237  java.lang.StringBuilder.append(char):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 242  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 254  java.lang.StringBuilder.toString():String (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.String.<init>(StringBuilder):void (7 bytes)   inline method (bytecode parsing)
                                        @ 1  java.lang.String.toString():String (2 bytes)   trivial (relevance=4.002977, probability=0.031250, bonus=1.000000, nodes=4)
                                        @ 8  java.lang.String.toString():String (2 bytes)   trivial (relevance=4.002977, probability=0.031250, bonus=1.000000, nodes=4)
                                          @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.031250, bonus=1.000000, nodes=5)
                                        @ 16  java.lang.String.length():int (11 bytes)   trivial (relevance=4.002977, probability=0.031250, bonus=1.000000, nodes=8)
                                          @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.031250, bonus=1.000000, nodes=5)
                                        @ 22  java.lang.String.length():int (11 bytes)   trivial (relevance=4.002977, probability=0.031250, bonus=1.000000, nodes=5)
                                          @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.031250, bonus=1.000000, nodes=5)
                                        @ 29  java.lang.String.length():int (11 bytes)   trivial (relevance=10.674606, probability=0.031250, bonus=1.000000, nodes=8)
                                        @ 68  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=10.674606, probability=0.031250, bonus=1.000000, nodes=9)
                                        @ 74  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=10.674606, probability=0.031250, bonus=1.000000, nodes=5)
                                        @ 81  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=10.674606, probability=0.031250, bonus=1.000000, nodes=9)
                            @ 162  java.lang.StringConcatHelper.newArray(long):byte[] (40 bytes)   inline method (bytecode parsing)
                            @ 287  java.lang.String.<init>(byte[], byte):void (15 bytes)   inline method (bytecode parsing)
                                        @ 120  java.lang.StringLatin1.replace(byte[], int, byte[], int, byte[], int):String (291 bytes)   not inlining relevance-based (relevance=0.500372, probability=0.001465, bonus=1.000000, nodes=190 > 150.111652)
                            @ 588  java.lang.StringUTF16.compress(byte[], int, int):byte[] (20 bytes)   inline method (bytecode parsing)
                            @ 605  java.lang.String.<init>(byte[], byte):void (15 bytes)   inline method (bytecode parsing)
                            @ 616  java.lang.String.<init>(byte[], byte):void (15 bytes)   inline method (bytecode parsing)
                                          @ 76  java.lang.StringLatin1.indexOf(byte[], byte[]):int (25 bytes)   relevance-based (relevance=1.000000, probability=0.005127, bonus=1.000000, nodes=16 <= 300.000000)
                            @ 8  java.lang.StringUTF16.length(byte[]):int (5 bytes)   inline method (bytecode parsing)
                            @ 20  java.lang.StringUTF16.length(byte[]):int (5 bytes)   inline method (bytecode parsing)
                                          @ 95  java.lang.StringUTF16.indexOfLatin1(byte[], byte[]):int (31 bytes)   relevance-based (relevance=1.000010, probability=0.005127, bonus=1.000000, nodes=22 <= 300.000000)
                            @ 4  java.lang.StringUTF16.checkBoundsBeginEnd(int, int, byte[]):void (10 bytes)   inline method (bytecode parsing)
                              @ 3  java.lang.StringUTF16.length(byte[]):int (5 bytes)   inline method (bytecode parsing)
                            @ 11  java.lang.String.checkBoundsBeginEnd(int, int, int):void (11 bytes)   inline method (bytecode parsing)
                              @ 6  jdk.internal.util.Preconditions.checkFromToIndex(int, int, int, BiFunction):int (24 bytes)   inline method (bytecode parsing)
                                              @ 6  jdk.internal.util.Preconditions.checkFromToIndex(int, int, int, BiFunction):int (24 bytes)   relevance-based (relevance=1.000000, probability=0.005127, bonus=1.000000, nodes=14 <= 300.000000)
                                            @ 6  java.lang.String.checkBoundsBeginEnd(int, int, int):void (11 bytes)   relevance-based (relevance=1.000010, probability=0.005127, bonus=1.000000, nodes=13 <= 300.000000)
                                          @ 178  java.lang.StringUTF16.indexOfLatin1(byte[], int, byte[], int, int):int (24 bytes)   relevance-based (relevance=1.000010, probability=0.005127, bonus=1.000000, nodes=24 <= 300.000000)
                                        @ 151  java.lang.StringUTF16.replace(byte[], int, boolean, byte[], int, boolean, byte[], int, boolean):String (620 bytes)   not inlining relevance-based (relevance=3.502605, probability=0.010254, bonus=1.000000, nodes=311 > 300.000000)
                                      @ 17  java.lang.String.replace(CharSequence, CharSequence):String (258 bytes)   relevance-based (relevance=0.500372, probability=0.031250, bonus=1.000000, nodes=57 <= 150.111652)
                                        @ 1  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.125000, bonus=1.000000, nodes=5)
                                        @ 7  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.125000, bonus=1.000000, nodes=5)
                                        @ 14  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=0.125000, bonus=1.000000, nodes=9)
                                        @ 28  java.lang.StringLatin1.indexOf(byte[], byte[]):int (25 bytes)   relevance-based (relevance=1.000000, probability=0.125000, bonus=1.000000, nodes=16 <= 300.000000)
                                      @ 7  java.lang.String.indexOf(String):int (64 bytes)   relevance-based (relevance=2.001489, probability=0.125000, bonus=1.000000, nodes=25 <= 300.000000)
                                        @ 1  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.125000, bonus=1.000000, nodes=5)
                                        @ 7  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.125000, bonus=1.000000, nodes=5)
                                        @ 14  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=0.125000, bonus=1.000000, nodes=9)
                                        @ 28  java.lang.StringLatin1.indexOf(byte[], byte[]):int (25 bytes)   relevance-based (relevance=1.000000, probability=0.125000, bonus=1.000000, nodes=16 <= 300.000000)
                                      @ 7  java.lang.String.indexOf(String):int (64 bytes)   relevance-based (relevance=2.001489, probability=0.125000, bonus=1.000000, nodes=25 <= 300.000000)
                                        @ 1  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.125000, bonus=1.000000, nodes=5)
                                        @ 7  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.125000, bonus=1.000000, nodes=5)
                                        @ 14  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=0.125000, bonus=1.000000, nodes=9)
                                        @ 28  java.lang.StringLatin1.indexOf(byte[], byte[]):int (25 bytes)   relevance-based (relevance=1.000000, probability=0.125000, bonus=1.000000, nodes=16 <= 300.000000)
                                      @ 7  java.lang.String.indexOf(String):int (64 bytes)   relevance-based (relevance=2.001489, probability=0.125000, bonus=1.000000, nodes=25 <= 300.000000)
                                    @ 37  jdk.graal.compiler.hotspot.HotSpotTTYStreamProvider$LogStreamOptionKey.makeFilename(String):String (157 bytes)   not inlining relevance-based (relevance=2.000000, probability=0.125000, bonus=1.000000, nodes=301 > 300.000000)
                                      @ 17  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=0.015302, probability=0.001884, bonus=1.000000, nodes=9)
                                      @ 27  java.lang.StringLatin1.hashCode(byte[]):int (52 bytes)   not inlining relevance-based (relevance=0.015294, probability=0.001883, bonus=1.000000, nodes=22 > 4.588326)
                                      @ 37  java.lang.StringUTF16.hashCode(byte[]):int (52 bytes)   not inlining relevance-based (relevance=0.000008, probability=0.000001, bonus=1.000000, nodes=23 > 0.002314)
                                    @ 49  java.lang.String.hashCode():int (60 bytes)   relevance-based (relevance=2.000000, probability=0.125000, bonus=1.000000, nodes=48 <= 300.000000)
                                  @ 1  jdk.graal.compiler.hotspot.HotSpotTTYStreamProvider$LogStreamOptionKey$DelayedOutputStream.lazy():OutputStream (266 bytes)   not inlining relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=308 > 300.000000)
                                @ 4  java.io.OutputStream.flush():void (1 bytes)   not inlining no type profile exists
                                @ 8  jdk.graal.compiler.hotspot.HotSpotTTYStreamProvider$LogStreamOptionKey$DelayedOutputStream.flush():void (8 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=10 <= 300.000000)
                              @ 15  java.io.PrintStream.implFlush():void (21 bytes)   relevance-based (relevance=1.137693, probability=1.000000, bonus=1.000000, nodes=23 <= 300.000000)
                            @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 8  java.util.concurrent.locks.AbstractOwnableSynchronizer.getExclusiveOwnerThread():Thread (5 bytes)   inline accessor method (bytecode parsing)
                            @ 41  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                            @ 46  java.util.concurrent.locks.AbstractQueuedSynchronizer.setState(int):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  java.util.concurrent.locks.ReentrantLock$Sync.tryRelease(int):boolean (51 bytes)   relevance-based (relevance=1.137693, probability=1.000000, bonus=1.000000, nodes=37 <= 300.000000)
                            @ 22  java.util.concurrent.locks.AbstractQueuedSynchronizer$Node.getAndUnsetStatus(int):int (14 bytes)   inline method (bytecode parsing)
                              @ 10  jdk.internal.misc.Unsafe.getAndBitwiseAndInt(Object, long, int):int (27 bytes)   inline method (bytecode parsing)
                            @ 5  java.lang.Thread.isVirtual():boolean (5 bytes)   inline method (bytecode parsing)
                                @ 30  java.util.concurrent.locks.LockSupport.unpark(Thread):void (26 bytes)   not inlining relevance-based (relevance=0.011708, probability=0.006671, bonus=1.000000, nodes=20 > 3.512350)
                              @ 12  java.util.concurrent.locks.AbstractQueuedSynchronizer.signalNext(AbstractQueuedSynchronizer$Node):void (34 bytes)   relevance-based (relevance=1.027108, probability=0.902799, bonus=1.000000, nodes=56 <= 300.000000)
                            @ 6  jdk.internal.misc.Blocker.currentCarrierThread():Thread (9 bytes)   inline method (bytecode parsing)
                              @ 3  java.lang.System$2.currentCarrierThread():Thread (4 bytes)   inline method (bytecode parsing)
                              @ 0  jdk.internal.misc.VM.isBooted():boolean (13 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 23  jdk.internal.misc.InternalLock.lock():void (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.util.concurrent.locks.ReentrantLock.lock():void (8 bytes)   inline method (bytecode parsing)
                            @ 35  jdk.internal.misc.InternalLock.unlock():void (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.util.concurrent.locks.ReentrantLock.unlock():void (10 bytes)   inline method (bytecode parsing)
                                @ 5  java.util.concurrent.locks.AbstractQueuedSynchronizer.release(int):boolean (19 bytes)   inline method (bytecode parsing)
                            @ 9  java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(int):void (20 bytes)   inline method (bytecode parsing)
                            @ 7  java.util.concurrent.locks.AbstractQueuedSynchronizer.compareAndSetState(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 15  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                            @ 21  java.util.concurrent.locks.AbstractOwnableSynchronizer.getExclusiveOwnerThread():Thread (5 bytes)   inline accessor method (bytecode parsing)
                            @ 29  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 51  java.util.concurrent.locks.AbstractQueuedSynchronizer.setState(int):void (6 bytes)   inline method (bytecode parsing)
                                @ 1  java.util.concurrent.locks.ReentrantLock$NonfairSync.initialTryLock():boolean (58 bytes)   relevance-based (relevance=1.019813, probability=1.000000, bonus=1.000000, nodes=40 <= 300.000000)
                            @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 10  java.util.concurrent.locks.AbstractQueuedSynchronizer.compareAndSetState(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 20  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                                @ 2  java.util.concurrent.locks.ReentrantLock$NonfairSync.tryAcquire(int):boolean (27 bytes)   not inlining relevance-based (relevance=0.043772, probability=0.038475, bonus=1.000000, nodes=36 > 13.131676)
                            @ 245  java.util.concurrent.locks.AbstractQueuedSynchronizer$ExclusiveNode.<init>():void (5 bytes)   inline method (bytecode parsing)
                              @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer$Node.<init>():void (5 bytes)   inline method (bytecode parsing)
                            @ 393  java.lang.Thread.interrupted():boolean (7 bytes)   inline method (bytecode parsing)
                                @ 15  java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer$Node, int, boolean, boolean, boolean, long):int (424 bytes)   not inlining relevance-based (relevance=0.034016, probability=0.029899, bonus=1.000000, nodes=197 > 10.204914)
                              @ 4  java.util.concurrent.locks.ReentrantLock$Sync.lock():void (13 bytes)   relevance-based (relevance=1.105379, probability=1.000000, bonus=1.000000, nodes=57 <= 300.000000)
                            @ 39  java.io.BufferedWriter.min(int, int):int (9 bytes)   inline method (bytecode parsing)
                                @ 1  java.io.BufferedWriter.ensureOpen():void (18 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=7)
                                @ 6  java.io.BufferedWriter.growIfNeeded(int):void (63 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=15 <= 300.000000)
                            @ 16  java.lang.String.checkBoundsOffCount(int, int, int):int (10 bytes)   inline method (bytecode parsing)
                                    @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                                  @ 3  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=8)
                                    @ 6  jdk.internal.util.Preconditions.checkFromToIndex(int, int, int, BiFunction):int (24 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=14 <= 300.000000)
                                  @ 6  java.lang.String.checkBoundsBeginEnd(int, int, int):void (11 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                  @ 6  jdk.internal.util.Preconditions.checkFromIndexSize(int, int, int, BiFunction):int (25 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=15 <= 300.000000)
                                  @ 21  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=9)
                                  @ 36  java.lang.StringLatin1.getChars(byte[], int, int, char[], int):void (12 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=40 <= 300.000000)
                                @ 60  java.lang.String.getChars(int, int, char[], int):void (55 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=62 <= 300.000000)
                              @ 30  java.io.BufferedWriter.implWrite(String, int, int):void (100 bytes)   relevance-based (relevance=1.137693, probability=1.000000, bonus=1.000000, nodes=102 <= 300.000000)
                            @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 8  java.util.concurrent.locks.AbstractOwnableSynchronizer.getExclusiveOwnerThread():Thread (5 bytes)   inline accessor method (bytecode parsing)
                            @ 41  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                            @ 46  java.util.concurrent.locks.AbstractQueuedSynchronizer.setState(int):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  java.util.concurrent.locks.ReentrantLock$Sync.tryRelease(int):boolean (51 bytes)   relevance-based (relevance=1.137693, probability=1.000000, bonus=1.000000, nodes=37 <= 300.000000)
                            @ 22  java.util.concurrent.locks.AbstractQueuedSynchronizer$Node.getAndUnsetStatus(int):int (14 bytes)   inline method (bytecode parsing)
                              @ 10  jdk.internal.misc.Unsafe.getAndBitwiseAndInt(Object, long, int):int (27 bytes)   inline method (bytecode parsing)
                            @ 5  java.lang.Thread.isVirtual():boolean (5 bytes)   inline method (bytecode parsing)
                                @ 30  java.util.concurrent.locks.LockSupport.unpark(Thread):void (26 bytes)   not inlining relevance-based (relevance=0.011708, probability=0.006685, bonus=1.000000, nodes=20 > 3.512350)
                              @ 12  java.util.concurrent.locks.AbstractQueuedSynchronizer.signalNext(AbstractQueuedSynchronizer$Node):void (34 bytes)   relevance-based (relevance=1.029233, probability=0.904667, bonus=1.000000, nodes=56 <= 300.000000)
                            @ 7  java.io.FileDescriptor$1.getAppend(FileDescriptor):boolean (5 bytes)   inline method (bytecode parsing)
                            @ 6  jdk.internal.misc.Blocker.currentCarrierThread():Thread (9 bytes)   inline method (bytecode parsing)
                              @ 3  java.lang.System$2.currentCarrierThread():Thread (4 bytes)   inline method (bytecode parsing)
                                @ 0  jdk.internal.misc.VM.isBooted():boolean (13 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=10 <= 300.000000)
                              @ 14  jdk.internal.misc.Blocker.begin():long (97 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=20 <= 300.000000)
                 n          @ 25  java.io.FileOutputStream.writeBytes(byte[], int, int, boolean):void (0 bytes)   not inlining it is a non-intrinsic native method
                              @ 30  jdk.internal.misc.Blocker.end(long):void (71 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=4)
                            @ 18  jdk.internal.misc.InternalLock.lock():void (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.util.concurrent.locks.ReentrantLock.lock():void (8 bytes)   inline method (bytecode parsing)
                            @ 26  jdk.internal.misc.InternalLock.unlock():void (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.util.concurrent.locks.ReentrantLock.unlock():void (10 bytes)   inline method (bytecode parsing)
                                @ 5  java.util.concurrent.locks.AbstractQueuedSynchronizer.release(int):boolean (19 bytes)   inline method (bytecode parsing)
                            @ 9  java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(int):void (20 bytes)   inline method (bytecode parsing)
                            @ 7  java.util.concurrent.locks.AbstractQueuedSynchronizer.compareAndSetState(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 15  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                            @ 21  java.util.concurrent.locks.AbstractOwnableSynchronizer.getExclusiveOwnerThread():Thread (5 bytes)   inline accessor method (bytecode parsing)
                            @ 29  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 51  java.util.concurrent.locks.AbstractQueuedSynchronizer.setState(int):void (6 bytes)   inline method (bytecode parsing)
                                @ 1  java.util.concurrent.locks.ReentrantLock$NonfairSync.initialTryLock():boolean (58 bytes)   relevance-based (relevance=1.019797, probability=1.000000, bonus=1.000000, nodes=40 <= 300.000000)
                            @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 10  java.util.concurrent.locks.AbstractQueuedSynchronizer.compareAndSetState(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 20  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                                @ 2  java.util.concurrent.locks.ReentrantLock$NonfairSync.tryAcquire(int):boolean (27 bytes)   not inlining relevance-based (relevance=0.043772, probability=0.038475, bonus=1.000000, nodes=36 > 13.131676)
                            @ 245  java.util.concurrent.locks.AbstractQueuedSynchronizer$ExclusiveNode.<init>():void (5 bytes)   inline method (bytecode parsing)
                              @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer$Node.<init>():void (5 bytes)   inline method (bytecode parsing)
                            @ 393  java.lang.Thread.interrupted():boolean (7 bytes)   inline method (bytecode parsing)
                                @ 15  java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer$Node, int, boolean, boolean, boolean, long):int (424 bytes)   not inlining relevance-based (relevance=0.034016, probability=0.029899, bonus=1.000000, nodes=197 > 10.204914)
                              @ 4  java.util.concurrent.locks.ReentrantLock$Sync.lock():void (13 bytes)   relevance-based (relevance=1.105290, probability=1.000000, bonus=1.000000, nodes=57 <= 300.000000)
                                @ 1  java.io.BufferedWriter.ensureOpen():void (18 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=7)
                            @ 23  jdk.internal.misc.InternalLock.lock():void (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.util.concurrent.locks.ReentrantLock.lock():void (8 bytes)   inline method (bytecode parsing)
                            @ 35  jdk.internal.misc.InternalLock.unlock():void (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.util.concurrent.locks.ReentrantLock.unlock():void (10 bytes)   inline method (bytecode parsing)
                                @ 5  java.util.concurrent.locks.AbstractQueuedSynchronizer.release(int):boolean (19 bytes)   inline method (bytecode parsing)
                                  @ 7  sun.nio.cs.StreamEncoder.write(char[], int, int):void (82 bytes)   not inlining too large previous low-level graph (low-level-nodes: 631, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=60)
                                @ 25  java.io.OutputStreamWriter.write(char[], int, int):void (11 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                              @ 22  java.io.BufferedWriter.implFlushBuffer():void (34 bytes)   relevance-based (relevance=1.137693, probability=1.000000, bonus=1.000000, nodes=28 <= 300.000000)
                            @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 8  java.util.concurrent.locks.AbstractOwnableSynchronizer.getExclusiveOwnerThread():Thread (5 bytes)   inline accessor method (bytecode parsing)
                            @ 41  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                            @ 46  java.util.concurrent.locks.AbstractQueuedSynchronizer.setState(int):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  java.util.concurrent.locks.ReentrantLock$Sync.tryRelease(int):boolean (51 bytes)   relevance-based (relevance=1.137693, probability=1.000000, bonus=1.000000, nodes=37 <= 300.000000)
                            @ 22  java.util.concurrent.locks.AbstractQueuedSynchronizer$Node.getAndUnsetStatus(int):int (14 bytes)   inline method (bytecode parsing)
                              @ 10  jdk.internal.misc.Unsafe.getAndBitwiseAndInt(Object, long, int):int (27 bytes)   inline method (bytecode parsing)
                            @ 5  java.lang.Thread.isVirtual():boolean (5 bytes)   inline method (bytecode parsing)
                                @ 30  java.util.concurrent.locks.LockSupport.unpark(Thread):void (26 bytes)   not inlining relevance-based (relevance=0.011708, probability=0.006685, bonus=1.000000, nodes=20 > 3.512350)
                              @ 12  java.util.concurrent.locks.AbstractQueuedSynchronizer.signalNext(AbstractQueuedSynchronizer$Node):void (34 bytes)   relevance-based (relevance=1.029316, probability=0.904740, bonus=1.000000, nodes=56 <= 300.000000)
                                    @ 3  java.lang.Math.max(int, int):int (11 bytes)   trivial (relevance=0.133981, probability=0.118151, bonus=1.000000, nodes=7)
                                  @ 29  jdk.internal.util.ArraysSupport.newLength(int, int, int):int (27 bytes)   relevance-based (relevance=0.133981, probability=0.118151, bonus=1.000000, nodes=15 <= 40.194428)
                                @ 24  java.lang.AbstractStringBuilder.newCapacity(int):int (59 bytes)   relevance-based (relevance=0.133981, probability=0.118151, bonus=1.000000, nodes=27 <= 40.194428)
                                  @ 25  java.lang.Math.min(int, int):int (11 bytes)   trivial (relevance=0.133983, probability=0.118151, bonus=1.000000, nodes=7)
                                @ 32  java.util.Arrays.copyOf(byte[], int):byte[] (33 bytes)   relevance-based (relevance=0.133981, probability=0.118151, bonus=1.000000, nodes=28 <= 40.194428)
                              @ 15  java.lang.AbstractStringBuilder.ensureCapacityInternal(int):void (39 bytes)   relevance-based (relevance=1.000202, probability=1.000000, bonus=1.000000, nodes=72 <= 300.000000)
                            @ 23  java.io.OutputStreamWriter.flushBuffer():void (8 bytes)   inline method (bytecode parsing)
                              @ 1  java.io.PrintStream.ensureOpen():void (18 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=7)
                                  @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                                @ 4  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=8)
                            @ 23  jdk.internal.misc.InternalLock.lock():void (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.util.concurrent.locks.ReentrantLock.lock():void (8 bytes)   inline method (bytecode parsing)
                            @ 35  jdk.internal.misc.InternalLock.unlock():void (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.util.concurrent.locks.ReentrantLock.unlock():void (10 bytes)   inline method (bytecode parsing)
                                @ 5  java.util.concurrent.locks.AbstractQueuedSynchronizer.release(int):boolean (19 bytes)   inline method (bytecode parsing)
                                @ 7  java.io.BufferedWriter.write(String, int, int):void (82 bytes)   not inlining too large previous low-level graph (low-level-nodes: 437, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=60)
                              @ 9  java.io.Writer.write(String):void (11 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=16 <= 300.000000)
                            @ 18  jdk.internal.misc.InternalLock.lock():void (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.util.concurrent.locks.ReentrantLock.lock():void (8 bytes)   inline method (bytecode parsing)
                            @ 26  jdk.internal.misc.InternalLock.unlock():void (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.util.concurrent.locks.ReentrantLock.unlock():void (10 bytes)   inline method (bytecode parsing)
                                @ 5  java.util.concurrent.locks.AbstractQueuedSynchronizer.release(int):boolean (19 bytes)   inline method (bytecode parsing)
                            @ 9  java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(int):void (20 bytes)   inline method (bytecode parsing)
                            @ 7  java.util.concurrent.locks.AbstractQueuedSynchronizer.compareAndSetState(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 15  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                            @ 21  java.util.concurrent.locks.AbstractOwnableSynchronizer.getExclusiveOwnerThread():Thread (5 bytes)   inline accessor method (bytecode parsing)
                            @ 29  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 51  java.util.concurrent.locks.AbstractQueuedSynchronizer.setState(int):void (6 bytes)   inline method (bytecode parsing)
                                  @ 1  java.util.concurrent.locks.ReentrantLock$NonfairSync.initialTryLock():boolean (58 bytes)   relevance-based (relevance=1.019787, probability=1.000000, bonus=1.000000, nodes=40 <= 300.000000)
                            @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 10  java.util.concurrent.locks.AbstractQueuedSynchronizer.compareAndSetState(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 20  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                                  @ 2  java.util.concurrent.locks.ReentrantLock$NonfairSync.tryAcquire(int):boolean (27 bytes)   not inlining relevance-based (relevance=0.043772, probability=0.038475, bonus=1.000000, nodes=36 > 13.131676)
                            @ 245  java.util.concurrent.locks.AbstractQueuedSynchronizer$ExclusiveNode.<init>():void (5 bytes)   inline method (bytecode parsing)
                              @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer$Node.<init>():void (5 bytes)   inline method (bytecode parsing)
                            @ 393  java.lang.Thread.interrupted():boolean (7 bytes)   inline method (bytecode parsing)
                                  @ 15  java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer$Node, int, boolean, boolean, boolean, long):int (424 bytes)   not inlining relevance-based (relevance=0.034016, probability=0.029899, bonus=1.000000, nodes=197 > 10.204914)
                                @ 4  java.util.concurrent.locks.ReentrantLock$Sync.lock():void (13 bytes)   relevance-based (relevance=1.105233, probability=1.000000, bonus=1.000000, nodes=57 <= 300.000000)
                                  @ 1  java.io.BufferedWriter.ensureOpen():void (18 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=7)
                            @ 23  jdk.internal.misc.InternalLock.lock():void (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.util.concurrent.locks.ReentrantLock.lock():void (8 bytes)   inline method (bytecode parsing)
                            @ 35  jdk.internal.misc.InternalLock.unlock():void (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.util.concurrent.locks.ReentrantLock.unlock():void (10 bytes)   inline method (bytecode parsing)
                                @ 5  java.util.concurrent.locks.AbstractQueuedSynchronizer.release(int):boolean (19 bytes)   inline method (bytecode parsing)
                                    @ 7  sun.nio.cs.StreamEncoder.write(char[], int, int):void (82 bytes)   not inlining too large previous low-level graph (low-level-nodes: 631, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=60)
                                  @ 25  java.io.OutputStreamWriter.write(char[], int, int):void (11 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                                @ 22  java.io.BufferedWriter.implFlushBuffer():void (34 bytes)   relevance-based (relevance=1.137693, probability=1.000000, bonus=1.000000, nodes=28 <= 300.000000)
                            @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 8  java.util.concurrent.locks.AbstractOwnableSynchronizer.getExclusiveOwnerThread():Thread (5 bytes)   inline accessor method (bytecode parsing)
                            @ 41  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                            @ 46  java.util.concurrent.locks.AbstractQueuedSynchronizer.setState(int):void (6 bytes)   inline method (bytecode parsing)
                                @ 2  java.util.concurrent.locks.ReentrantLock$Sync.tryRelease(int):boolean (51 bytes)   relevance-based (relevance=1.137693, probability=1.000000, bonus=1.000000, nodes=37 <= 300.000000)
                            @ 22  java.util.concurrent.locks.AbstractQueuedSynchronizer$Node.getAndUnsetStatus(int):int (14 bytes)   inline method (bytecode parsing)
                              @ 10  jdk.internal.misc.Unsafe.getAndBitwiseAndInt(Object, long, int):int (27 bytes)   inline method (bytecode parsing)
                            @ 5  java.lang.Thread.isVirtual():boolean (5 bytes)   inline method (bytecode parsing)
                                  @ 30  java.util.concurrent.locks.LockSupport.unpark(Thread):void (26 bytes)   not inlining relevance-based (relevance=0.011708, probability=0.006686, bonus=1.000000, nodes=20 > 3.512350)
                                @ 12  java.util.concurrent.locks.AbstractQueuedSynchronizer.signalNext(AbstractQueuedSynchronizer$Node):void (34 bytes)   relevance-based (relevance=1.029369, probability=0.904787, bonus=1.000000, nodes=56 <= 300.000000)
                              @ 16  java.io.BufferedWriter.flushBuffer():void (63 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=199 <= 300.000000)
                            @ 18  jdk.internal.misc.InternalLock.lock():void (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.util.concurrent.locks.ReentrantLock.lock():void (8 bytes)   inline method (bytecode parsing)
                            @ 26  jdk.internal.misc.InternalLock.unlock():void (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.util.concurrent.locks.ReentrantLock.unlock():void (10 bytes)   inline method (bytecode parsing)
                                @ 5  java.util.concurrent.locks.AbstractQueuedSynchronizer.release(int):boolean (19 bytes)   inline method (bytecode parsing)
                            @ 9  java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(int):void (20 bytes)   inline method (bytecode parsing)
                            @ 7  java.util.concurrent.locks.AbstractQueuedSynchronizer.compareAndSetState(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 15  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                            @ 21  java.util.concurrent.locks.AbstractOwnableSynchronizer.getExclusiveOwnerThread():Thread (5 bytes)   inline accessor method (bytecode parsing)
                            @ 29  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 51  java.util.concurrent.locks.AbstractQueuedSynchronizer.setState(int):void (6 bytes)   inline method (bytecode parsing)
                                  @ 1  java.util.concurrent.locks.ReentrantLock$NonfairSync.initialTryLock():boolean (58 bytes)   relevance-based (relevance=1.019787, probability=1.000000, bonus=1.000000, nodes=40 <= 300.000000)
                            @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 10  java.util.concurrent.locks.AbstractQueuedSynchronizer.compareAndSetState(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 20  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                                  @ 2  java.util.concurrent.locks.ReentrantLock$NonfairSync.tryAcquire(int):boolean (27 bytes)   not inlining relevance-based (relevance=0.043772, probability=0.038475, bonus=1.000000, nodes=36 > 13.131676)
                            @ 245  java.util.concurrent.locks.AbstractQueuedSynchronizer$ExclusiveNode.<init>():void (5 bytes)   inline method (bytecode parsing)
                              @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer$Node.<init>():void (5 bytes)   inline method (bytecode parsing)
                            @ 393  java.lang.Thread.interrupted():boolean (7 bytes)   inline method (bytecode parsing)
                                  @ 15  java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer$Node, int, boolean, boolean, boolean, long):int (424 bytes)   not inlining relevance-based (relevance=0.034016, probability=0.029899, bonus=1.000000, nodes=197 > 10.204914)
                                @ 4  java.util.concurrent.locks.ReentrantLock$Sync.lock():void (13 bytes)   relevance-based (relevance=1.105233, probability=1.000000, bonus=1.000000, nodes=57 <= 300.000000)
                                  @ 1  sun.nio.cs.StreamEncoder.isOpen():boolean (13 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                            @ 4  java.nio.Buffer.position():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 12  java.nio.Buffer.limit():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 20  java.nio.Buffer.position():int (5 bytes)   inline accessor method (bytecode parsing)
                                    @ 11  sun.nio.cs.StreamEncoder.writeBytes():void (139 bytes)   not inlining too large previous low-level graph (low-level-nodes: 629, relevance=1.000000, probability=0.999787, bonus=1.000000, nodes=41)
                                  @ 8  sun.nio.cs.StreamEncoder.implFlushBuffer():void (15 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=21 <= 300.000000)
                                @ 22  sun.nio.cs.StreamEncoder.lockedFlushBuffer():void (25 bytes)   relevance-based (relevance=1.137693, probability=1.000000, bonus=1.000000, nodes=29 <= 300.000000)
                            @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 8  java.util.concurrent.locks.AbstractOwnableSynchronizer.getExclusiveOwnerThread():Thread (5 bytes)   inline accessor method (bytecode parsing)
                            @ 41  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                            @ 46  java.util.concurrent.locks.AbstractQueuedSynchronizer.setState(int):void (6 bytes)   inline method (bytecode parsing)
                                @ 2  java.util.concurrent.locks.ReentrantLock$Sync.tryRelease(int):boolean (51 bytes)   relevance-based (relevance=1.137693, probability=1.000000, bonus=1.000000, nodes=37 <= 300.000000)
                            @ 22  java.util.concurrent.locks.AbstractQueuedSynchronizer$Node.getAndUnsetStatus(int):int (14 bytes)   inline method (bytecode parsing)
                              @ 10  jdk.internal.misc.Unsafe.getAndBitwiseAndInt(Object, long, int):int (27 bytes)   inline method (bytecode parsing)
                            @ 5  java.lang.Thread.isVirtual():boolean (5 bytes)   inline method (bytecode parsing)
                                  @ 30  java.util.concurrent.locks.LockSupport.unpark(Thread):void (26 bytes)   not inlining relevance-based (relevance=0.011708, probability=0.006686, bonus=1.000000, nodes=20 > 3.512350)
                                @ 12  java.util.concurrent.locks.AbstractQueuedSynchronizer.signalNext(AbstractQueuedSynchronizer$Node):void (34 bytes)   relevance-based (relevance=1.029369, probability=0.904787, bonus=1.000000, nodes=56 <= 300.000000)
                              @ 4  sun.nio.cs.StreamEncoder.flushBuffer():void (63 bytes)   relevance-based (relevance=1.137693, probability=1.000000, bonus=1.000000, nodes=199 <= 300.000000)
                            @ 2  java.nio.CharBuffer.limit(int):CharBuffer (8 bytes)   inline method (bytecode parsing)
                                  @ 2  java.nio.Buffer.limit(int):Buffer (65 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=27 <= 300.000000)
                                @ 39  java.nio.CharBuffer.limit(int):Buffer (6 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=29 <= 300.000000)
                            @ 2  java.nio.CharBuffer.position(int):CharBuffer (8 bytes)   inline method (bytecode parsing)
                                  @ 2  java.nio.Buffer.position(int):Buffer (52 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=16 <= 300.000000)
                                @ 45  java.nio.CharBuffer.position(int):Buffer (6 bytes)   relevance-based (relevance=1.022803, probability=1.000000, bonus=1.000000, nodes=18 <= 300.000000)
                              @ 8  java.nio.Buffer.<init>(int, int, int, int, MemorySegment):void (105 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=61 <= 300.000000)
                            @ 16  java.lang.Math.max(int, int):int (11 bytes)   inline method (bytecode parsing)
                            @ 46  java.lang.String.<init>(byte[], byte):void (15 bytes)   inline method (bytecode parsing)
                              @ 36  java.lang.Integer.formatUnsignedInt(int, int, byte[], int):void (40 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=31 <= 300.000000)
                              @ 31  java.util.ArrayList.fastRemove(Object[], int):void (44 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=38 <= 300.000000)
                            @ 8  java.util.HashMap.put(Object, Object):Object (13 bytes)   inline method (bytecode parsing)
                                  @ 17  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=0.015302, probability=0.014474, bonus=1.000000, nodes=9)
                                  @ 27  java.lang.StringLatin1.hashCode(byte[]):int (52 bytes)   not inlining relevance-based (relevance=0.015294, probability=0.014467, bonus=1.000000, nodes=22 > 4.588326)
                                  @ 37  java.lang.StringUTF16.hashCode(byte[]):int (52 bytes)   not inlining relevance-based (relevance=0.000008, probability=0.000007, bonus=1.000000, nodes=23 > 0.002314)
                                @ 9  java.lang.String.hashCode():int (60 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=48 <= 300.000000)
                              @ 2  java.util.HashMap.hash(Object):int (20 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=66 <= 300.000000)
                              @ 9  java.util.HashMap.putVal(int, Object, Object, boolean, boolean):Object (300 bytes)   not inlining too large previous low-level graph (low-level-nodes: 766, relevance=1.057205, probability=1.000000, bonus=1.000000, nodes=166)
                            @ 4  java.lang.Class.getComponentType():Class (14 bytes)   inline method (bytecode parsing)
                            @ 18  jdk.graal.compiler.nodes.java.DynamicNewArrayNode.newArray(Class, int, JavaKind):Object (8 bytes)   inline method (bytecode parsing)
                            @ 40  jdk.graal.compiler.replacements.arraycopy.ArrayCopyCallNode.disjointUninitializedArraycopy(Object, int, Object, int, int, JavaKind, int):void (17 bytes)   inline method (bytecode parsing)
                            @ 15  jdk.graal.compiler.replacements.ReplacementsUtil.staticAssert(boolean, String):void (12 bytes)   inline method (bytecode parsing)
                            @ 86  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.loadKlassFromObject(Object, int, LocationIdentity):KlassPointer (32 bytes)   inline method (bytecode parsing)
                              @ 18  jdk.graal.compiler.replacements.ReplacementsUtil.staticAssert(boolean, String):void (12 bytes)   inline method (bytecode parsing)
                            @ 117  jdk.graal.compiler.hotspot.replacements.ClassGetHubNode.piCastNonNull(KlassPointer, GuardingNode):KlassPointer (9 bytes)   inline method (bytecode parsing)
                            @ 182  jdk.graal.compiler.replacements.ReplacementsUtil.dynamicAssert(boolean, String):void (12 bytes)   inline method (bytecode parsing)
                            @ 249  jdk.graal.compiler.replacements.AllocationSnippets.allocateArrayImpl(Word, int, int, int, AllocationSnippets$FillContent, int, boolean, boolean, boolean, boolean, AllocationSnippets$AllocationProfilingData):Object (178 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getTLABInfo():Word (5 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getThread():Word (8 bytes)   inline method (bytecode parsing)
                                  @ 4  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.registerAsWord(Register):Word (7 bytes)   inline method (bytecode parsing)
                              @ 9  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.readTlabTop(Word):Word (5 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.readTlabTop(Word):Word (17 bytes)   inline method (bytecode parsing)
                              @ 17  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.readTlabEnd(Word):Word (5 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.readTlabEnd(Word):Word (17 bytes)   inline method (bytecode parsing)
                              @ 36  jdk.graal.compiler.replacements.ReplacementsUtil.dynamicAssert(boolean, String):void (12 bytes)   inline method (bytecode parsing)
                              @ 44  jdk.graal.compiler.replacements.AllocationSnippets.arrayAllocationSize(int, int, int):UnsignedWord (18 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.objectAlignment():int (7 bytes)   inline method (bytecode parsing)
                                @ 11  jdk.graal.compiler.replacements.AllocationSnippets.arrayAllocationSize(int, int, int, int):long (32 bytes)   inline method (bytecode parsing)
                              @ 59  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.useTLAB():boolean (7 bytes)   inline method (bytecode parsing)
                              @ 72  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.shouldAllocateInTLAB(UnsignedWord, boolean):boolean (33 bytes)   inline method (bytecode parsing)
                              @ 102  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.writeTlabTop(Word, Word):void (6 bytes)   inline method (bytecode parsing)
                                @ 2  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.writeTlabTop(Word, Word):void (15 bytes)   inline method (bytecode parsing)
                              @ 109  jdk.graal.compiler.replacements.AllocationSnippets.emitPrefetchAllocate(Word, boolean):void (61 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getPrefetchStyle():int (7 bytes)   inline method (bytecode parsing)
                                @ 9  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getPrefetchLines(boolean):int (18 bytes)   inline method (bytecode parsing)
                                @ 14  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getPrefetchStepSize():int (7 bytes)   inline method (bytecode parsing)
                                @ 20  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getPrefetchDistance():int (7 bytes)   inline method (bytecode parsing)
                              @ 136  jdk.graal.compiler.replacements.AllocationSnippets.formatArray(Word, UnsignedWord, int, Word, AllocationSnippets$FillContent, boolean, int, boolean, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):Object (53 bytes)   inline method (bytecode parsing)
                                @ 5  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.initializeObjectHeader(Word, Word, boolean):void (29 bytes)   inline method (bytecode parsing)
                                  @ 25  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.initializeObjectHeader(Word, Word, KlassPointer):void (20 bytes)   inline method (bytecode parsing)
                                @ 11  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.arrayLengthOffset():int (7 bytes)   inline method (bytecode parsing)
                                @ 15  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                                @ 38  jdk.graal.compiler.replacements.AllocationSnippets.fillContents(Word, AllocationSnippets$FillContent, int, UnsignedWord, boolean, boolean, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):void (58 bytes)   inline method (bytecode parsing)
                                  @ 22  jdk.graal.compiler.replacements.AllocationSnippets.zeroMemory(Word, int, UnsignedWord, boolean, boolean, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):void (19 bytes)   inline method (bytecode parsing)
                                    @ 15  jdk.graal.compiler.replacements.AllocationSnippets.fillMemory(long, Word, int, UnsignedWord, boolean, boolean, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):void (194 bytes)   inline method (bytecode parsing)
                                      @ 17  jdk.graal.compiler.replacements.ReplacementsUtil.dynamicAssert(boolean, String):void (12 bytes)   inline method (bytecode parsing)
                                      @ 56  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                                      @ 89  jdk.graal.compiler.replacements.ReplacementsUtil.dynamicAssert(boolean, String):void (12 bytes)   inline method (bytecode parsing)
                                      @ 153  jdk.graal.compiler.replacements.ReplacementsUtil.staticAssert(boolean, String):void (12 bytes)   inline method (bytecode parsing)
                                      @ 167  jdk.graal.compiler.replacements.AllocationSnippets.fillMemoryAlignedUnrollable(long, Word, UnsignedWord, UnsignedWord, boolean, AllocationSnippets$AllocationSnippetCounters):void (68 bytes)   inline method (bytecode parsing)
                                        @ 5  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                          @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                                        @ 44  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                                      @ 190  jdk.graal.compiler.replacements.AllocationSnippets.fillMemoryAligned(long, Word, UnsignedWord, UnsignedWord, boolean, UnsignedWord, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):void (155 bytes)   inline method (bytecode parsing)
                                        @ 17  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getMinimalBulkZeroingSize():int (7 bytes)   inline method (bytecode parsing)
                                        @ 36  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                          @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                                        @ 53  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                                        @ 105  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                          @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                                        @ 134  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                                @ 44  jdk.graal.compiler.replacements.AllocationSnippets.emitMemoryBarrierIf(boolean):void (14 bytes)   inline method (bytecode parsing)
                                  @ 7  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                              @ 152  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                              @ 158  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.callNewArrayStub(Word, int):Object (35 bytes)   inline method (bytecode parsing)
                                @ 22  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.nonNullOrDeopt(Object):Object (27 bytes)   inline method (bytecode parsing)
                              @ 168  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.profileAllocation(AllocationSnippets$AllocationProfilingData, UnsignedWord):void (51 bytes)   inline method (bytecode parsing)
                              @ 174  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.verifyOop(Object):Object (5 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.verifyOop(Object):Object (19 bytes)   inline method (bytecode parsing)
                            @ 4  java.util.Objects.checkFromIndexSize(int, int, int):int (8 bytes)   inline method (bytecode parsing)
                              @ 4  jdk.internal.util.Preconditions.checkFromIndexSize(int, int, int, BiFunction):int (25 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=15 <= 300.000000)
                            @ 4  java.util.Objects.checkFromIndexSize(int, int, int):int (8 bytes)   inline method (bytecode parsing)
                            @ 11  jdk.internal.misc.InternalLock.lock():void (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.util.concurrent.locks.ReentrantLock.lock():void (8 bytes)   inline method (bytecode parsing)
                            @ 27  jdk.internal.misc.InternalLock.unlock():void (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.util.concurrent.locks.ReentrantLock.unlock():void (10 bytes)   inline method (bytecode parsing)
                                @ 5  java.util.concurrent.locks.AbstractQueuedSynchronizer.release(int):boolean (19 bytes)   inline method (bytecode parsing)
                            @ 9  java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(int):void (20 bytes)   inline method (bytecode parsing)
                            @ 7  java.util.concurrent.locks.AbstractQueuedSynchronizer.compareAndSetState(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 15  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                            @ 21  java.util.concurrent.locks.AbstractOwnableSynchronizer.getExclusiveOwnerThread():Thread (5 bytes)   inline accessor method (bytecode parsing)
                            @ 29  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 51  java.util.concurrent.locks.AbstractQueuedSynchronizer.setState(int):void (6 bytes)   inline method (bytecode parsing)
                                  @ 1  java.util.concurrent.locks.ReentrantLock$NonfairSync.initialTryLock():boolean (58 bytes)   relevance-based (relevance=0.138850, probability=0.109474, bonus=1.000000, nodes=40 <= 41.654962)
                                @ 4  java.util.concurrent.locks.ReentrantLock$Sync.lock():void (13 bytes)   not inlining relevance-based (relevance=0.136156, probability=0.109474, bonus=1.000000, nodes=57 > 40.846832)
                                @ 18  java.io.BufferedInputStream.implRead(byte[], int, int):int (112 bytes)   not inlining relevance-based (relevance=0.136156, probability=0.109474, bonus=1.000000, nodes=57 > 40.846832)
                            @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 8  java.util.concurrent.locks.AbstractOwnableSynchronizer.getExclusiveOwnerThread():Thread (5 bytes)   inline accessor method (bytecode parsing)
                            @ 41  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                            @ 46  java.util.concurrent.locks.AbstractQueuedSynchronizer.setState(int):void (6 bytes)   inline method (bytecode parsing)
                                @ 2  java.util.concurrent.locks.ReentrantLock$Sync.tryRelease(int):boolean (51 bytes)   relevance-based (relevance=0.136156, probability=0.109474, bonus=1.000000, nodes=37 <= 40.846832)
                            @ 22  java.util.concurrent.locks.AbstractQueuedSynchronizer$Node.getAndUnsetStatus(int):int (14 bytes)   inline method (bytecode parsing)
                              @ 10  jdk.internal.misc.Unsafe.getAndBitwiseAndInt(Object, long, int):int (27 bytes)   inline method (bytecode parsing)
                                @ 12  java.util.concurrent.locks.AbstractQueuedSynchronizer.signalNext(AbstractQueuedSynchronizer$Node):void (34 bytes)   not inlining relevance-based (relevance=0.121506, probability=0.099053, bonus=1.000000, nodes=56 > 36.451719)
                                @ 4  jdk.internal.util.Preconditions.checkFromIndexSize(int, int, int, BiFunction):int (25 bytes)   relevance-based (relevance=0.982990, probability=0.873506, bonus=1.000000, nodes=15 <= 294.897083)
              s               @ 30  java.io.ByteArrayInputStream.read(byte[], int, int):int (73 bytes)   relevance-based (relevance=0.982980, probability=0.982980, bonus=1.000000, nodes=138 <= 294.894134)
                            @ 497  java.lang.String.<init>(char[], int, int):void (14 bytes)   inline method (bytecode parsing)
                              @ 7  java.lang.String.rangeCheck(char[], int, int):Void (10 bytes)   inline method (bytecode parsing)
                                @ 4  java.lang.String.checkBoundsOffCount(int, int, int):int (10 bytes)   inline method (bytecode parsing)
                                  @ 6  jdk.internal.util.Preconditions.checkFromIndexSize(int, int, int, BiFunction):int (25 bytes)   inline method (bytecode parsing)
                                @ 36  java.lang.StringUTF16.compress(char[], int, int):byte[] (20 bytes)   relevance-based (relevance=1.000000, probability=0.999282, bonus=1.000000, nodes=25 <= 300.000000)
                              @ 10  java.lang.String.<init>(char[], int, int, Void):void (74 bytes)   relevance-based (relevance=1.038286, probability=1.000000, bonus=1.000000, nodes=43 <= 300.000000)
                              @ 25  java.lang.Math.min(int, int):int (11 bytes)   trivial (relevance=1.000010, probability=1.000000, bonus=1.000000, nodes=7)
                            @ 4  java.util.Objects.checkFromIndexSize(int, int, int):int (8 bytes)   inline method (bytecode parsing)
                              @ 4  jdk.internal.util.Preconditions.checkFromIndexSize(int, int, int, BiFunction):int (25 bytes)   relevance-based (relevance=1.000010, probability=1.000000, bonus=1.000000, nodes=15 <= 300.000000)
                            @ 10  org.graalvm.collections.EconomicMapImpl.intercept(EconomicMapImpl):EconomicMapImpl (2 bytes)   inline method (bytecode parsing)
                                @ 3  org.graalvm.collections.EconomicMapImpl.<init>(Equivalence, boolean):void (30 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=25 <= 300.000000)
                                @ 8  org.graalvm.collections.EconomicMapImpl.initFrom(Object):boolean (85 bytes)   not inlining too large previous low-level graph (low-level-nodes: 376, relevance=1.629110, probability=1.000000, bonus=1.000000, nodes=54)
                              @ 7  org.graalvm.collections.EconomicMapImpl.<init>(Equivalence, UnmodifiableEconomicMap, boolean):void (30 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=33 <= 300.000000)
                              @ 6  java.util.AbstractList.subListRangeCheck(int, int, int):void (110 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=13 <= 300.000000)
                            @ 1  java.util.AbstractList.<init>():void (10 bytes)   inline method (bytecode parsing)
                              @ 1  java.util.AbstractCollection.<init>():void (5 bytes)   inline method (bytecode parsing)
                              @ 16  java.util.ArrayList$SubList.<init>(ArrayList, int, int):void (35 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=25 <= 300.000000)
                              @ 1  sun.management.spi.PlatformMBeanProvider$PlatformComponent.mbeanInterfaceNames():Set (0 bytes)   not inlining no methods remaining after filtering less frequent methods (8 methods previously)
                            @ 41  java.lang.Enum.ordinal():int (5 bytes)   inline accessor method (bytecode parsing)
                                      @ 2  java.util.HashMap.getNode(Object):HashMap$Node (150 bytes)   not inlining relevance-based (relevance=0.272881, probability=0.128662, bonus=1.000000, nodes=108 > 81.864349)
                                    @ 5  java.util.HashMap.containsKey(Object):boolean (14 bytes)   relevance-based (relevance=0.272881, probability=0.128662, bonus=1.000000, nodes=12 <= 81.864349)
                                  @ 5  java.util.HashSet.contains(Object):boolean (9 bytes)   relevance-based (relevance=0.272881, probability=0.214381, bonus=1.000000, nodes=29 <= 81.864349)
                                    @ 18  java.lang.String.equals(Object):boolean (56 bytes)   relevance-based (relevance=1.000000, probability=0.611226, bonus=1.000000, nodes=50 <= 300.000000)
                                  @ 5  java.util.Collections.eq(Object, Object):boolean (22 bytes)   relevance-based (relevance=1.000000, probability=0.785619, bonus=1.000000, nodes=60 <= 300.000000)
                                @ 7  java.util.Collections$SingletonSet.contains(Object):boolean (9 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=101 <= 300.000000)
                              @ 8  java.lang.management.ManagementFactory$PlatformMBeanFinder.lambda$findSingleton$1(String, PlatformMBeanProvider$PlatformComponent):boolean (13 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=108 <= 300.000000)
                            @ 12  java.util.ArrayDeque.elementAt(Object[], int):Object (4 bytes)   inline method (bytecode parsing)
                                @ 28  java.util.ArrayDeque.inc(int, int):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.999291, bonus=1.000000, nodes=10 <= 300.000000)
                              @ 1  java.util.ArrayDeque.pollFirst():Object (36 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=26 <= 300.000000)
                            @ 1  jdk.graal.compiler.core.common.cfg.BasicBlock.getId():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  jdk.graal.compiler.core.common.cfg.BasicBlock.getId():int (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 8  java.lang.Integer.compare(int, int):int (20 bytes)   trivial (relevance=1.000000, probability=0.757493, bonus=1.000000, nodes=6)
                                @ 9  jdk.graal.compiler.core.common.cfg.BasicBlock$BlockIdComparator.compare(BasicBlock, BasicBlock):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.757493, bonus=1.000000, nodes=14 <= 300.000000)
                              @ 43  jdk.graal.compiler.core.common.cfg.BasicBlock$BlockIdComparator.compare(Object, Object):int (13 bytes)   relevance-based (relevance=1.653318, probability=0.999609, bonus=1.000000, nodes=21 <= 300.000000)
                            @ 8  jdk.graal.compiler.lir.alloc.lsra.LinearScan.lambda$sortIntervals$0(Interval, Interval):int (10 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.lir.alloc.lsra.Interval.from():int (8 bytes)   inline method (bytecode parsing)
                              @ 5  jdk.graal.compiler.lir.alloc.lsra.Interval.from():int (8 bytes)   inline method (bytecode parsing)
                            @ 17  java.lang.Enum.ordinal():int (5 bytes)   inline accessor method (bytecode parsing)
                                        @ 2  java.util.EnumMap.isValidKey(Object):boolean (36 bytes)   relevance-based (relevance=1.000000, probability=0.048521, bonus=1.000000, nodes=13 <= 300.000000)
                                        @ 21  java.util.EnumMap.unmaskNull(Object):Object (13 bytes)   trivial (relevance=1.000008, probability=0.048521, bonus=1.000000, nodes=7)
                                      @ 7  java.util.EnumMap.get(Object):Object (29 bytes)   relevance-based (relevance=1.000000, probability=0.048521, bonus=1.000000, nodes=27 <= 300.000000)
                                    @ 1  jdk.graal.compiler.hotspot.HotSpotCompiledCodeBuilder$SiteComparator.ord(Infopoint):int (19 bytes)   relevance-based (relevance=1.656058, probability=0.048521, bonus=1.000000, nodes=36 <= 300.000000)
                            @ 17  java.lang.Enum.ordinal():int (5 bytes)   inline accessor method (bytecode parsing)
                                        @ 2  java.util.EnumMap.isValidKey(Object):boolean (36 bytes)   relevance-based (relevance=0.414018, probability=0.048521, bonus=1.000000, nodes=13 <= 124.205358)
                                        @ 21  java.util.EnumMap.unmaskNull(Object):Object (13 bytes)   trivial (relevance=0.414021, probability=0.048521, bonus=1.000000, nodes=7)
                                      @ 7  java.util.EnumMap.get(Object):Object (29 bytes)   relevance-based (relevance=0.414018, probability=0.048521, bonus=1.000000, nodes=27 <= 124.205358)
                                    @ 6  jdk.graal.compiler.hotspot.HotSpotCompiledCodeBuilder$SiteComparator.ord(Infopoint):int (19 bytes)   relevance-based (relevance=0.414018, probability=0.048521, bonus=1.000000, nodes=36 <= 124.205358)
                            @ 6  java.lang.Error.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                            @ 89  java.lang.String.format(Locale, String, Object[]):String (17 bytes)   inline method (bytecode parsing)
                              @ 5  java.util.Formatter.<init>(Locale):void (13 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.StringBuilder.<init>():void (7 bytes)   inline method (bytecode parsing)
                                @ 9  java.util.Formatter.<init>(Locale, Appendable):void (15 bytes)   inline method (bytecode parsing)
                                      @ 3  jdk.graal.compiler.debug.GraalError.format(String, Object[]):String (93 bytes)   not inlining relevance-based (relevance=0.103504, probability=0.012130, bonus=1.000000, nodes=81 > 31.051340)
              s                         @ 24  java.lang.Throwable.fillInStackTrace():Throwable (29 bytes)   not inlining relevance-based (relevance=0.103504, probability=0.012130, bonus=1.000000, nodes=34 > 31.051340)
                                      @ 2  java.lang.Throwable.<init>(String):void (34 bytes)   relevance-based (relevance=0.103504, probability=0.012130, bonus=1.000000, nodes=18 <= 31.051340)
                            @ 1  java.util.AbstractList.<init>():void (10 bytes)   inline method (bytecode parsing)
                              @ 1  java.util.AbstractCollection.<init>():void (5 bytes)   inline method (bytecode parsing)
                                      @ 14  java.util.ArrayList.<init>():void (12 bytes)   relevance-based (relevance=0.103504, probability=0.012130, bonus=1.000000, nodes=11 <= 31.051340)
                                    @ 36  jdk.graal.compiler.debug.GraalError.<init>(String, Object[]):void (21 bytes)   not inlining relevance-based (relevance=0.103504, probability=0.012130, bonus=1.000000, nodes=36 > 31.051340)
                                  @ 86  jdk.graal.compiler.hotspot.HotSpotCompiledCodeBuilder$SiteComparator.checkCollision(Infopoint, Infopoint):int (44 bytes)   relevance-based (relevance=0.414014, probability=0.048521, bonus=1.000000, nodes=92 <= 124.204349)
                                @ 9  jdk.graal.compiler.hotspot.HotSpotCompiledCodeBuilder$SiteComparator.compare(Site, Site):int (100 bytes)   not inlining relevance-based (relevance=0.414014, probability=0.776335, bonus=1.000000, nodes=138 > 124.204349)
                              @ 109  jdk.graal.compiler.lir.alloc.lsra.LinearScan$$Lambda/0x00007f45e03010e8.compare(Object, Object):int (12 bytes)   relevance-based (relevance=0.584577, probability=2.208045, bonus=1.000000, nodes=37 <= 175.373042)
                            @ 8  jdk.graal.compiler.lir.alloc.lsra.LinearScan.lambda$sortIntervals$0(Interval, Interval):int (10 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.lir.alloc.lsra.Interval.from():int (8 bytes)   inline method (bytecode parsing)
                              @ 5  jdk.graal.compiler.lir.alloc.lsra.Interval.from():int (8 bytes)   inline method (bytecode parsing)
                                @ 9  jdk.graal.compiler.lir.SwitchStrategy$RangesStrategy$1.compare(Integer, Integer):int (54 bytes)   not inlining relevance-based (relevance=0.001162, probability=0.000586, bonus=1.000000, nodes=35 > 0.348717)
                                @ 9  jdk.graal.compiler.lir.SwitchStrategy$SequentialStrategy$1.compare(Integer, Integer):int (54 bytes)   not inlining relevance-based (relevance=0.001162, probability=0.000586, bonus=1.000000, nodes=35 > 0.348717)
                                @ 9  jdk.vm.ci.hotspot.HotSpotResolvedObjectTypeImpl$SortByOffset.compare(ResolvedJavaField, ResolvedJavaField):int (14 bytes)   not inlining relevance-based (relevance=0.001162, probability=0.000586, bonus=1.000000, nodes=18 > 0.348717)
                                @ 6  java.util.Comparator.lambda$comparingInt$7b0bb60$1(ToIntFunction, Object, Object):int (18 bytes)   not inlining relevance-based (relevance=0.001356, probability=0.000683, bonus=1.000000, nodes=15 > 0.406836)
                              @ 6  java.util.Comparator.compare(Object, Object):int (0 bytes)   not inlining no type profile exists
                                @ 9  jdk.graal.compiler.hotspot.HotSpotCompiledCodeBuilder$SiteComparator.compare(Site, Site):int (100 bytes)   not inlining relevance-based (relevance=0.012399, probability=0.006248, bonus=1.000000, nodes=55 > 3.719646)
                            @ 1  jdk.graal.compiler.core.common.cfg.BasicBlock.getId():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  jdk.graal.compiler.core.common.cfg.BasicBlock.getId():int (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 8  java.lang.Integer.compare(int, int):int (20 bytes)   trivial (relevance=0.393469, probability=0.198282, bonus=1.000000, nodes=6)
                                @ 9  jdk.graal.compiler.core.common.cfg.BasicBlock$BlockIdComparator.compare(BasicBlock, BasicBlock):int (12 bytes)   relevance-based (relevance=0.393469, probability=0.198282, bonus=1.000000, nodes=14 <= 118.040644)
                              @ 68  jdk.graal.compiler.core.common.cfg.BasicBlock$BlockIdComparator.compare(Object, Object):int (13 bytes)   not inlining relevance-based (relevance=0.393469, probability=0.225715, bonus=1.000000, nodes=123 > 118.040644)
                              @ 86  java.util.TimSort.reverseRange(Object[], int, int):void (32 bytes)   relevance-based (relevance=0.798170, probability=0.604608, bonus=1.000000, nodes=28 <= 239.450960)
                            @ 17  java.lang.Enum.ordinal():int (5 bytes)   inline accessor method (bytecode parsing)
                              @ 2  java.util.EnumMap.isValidKey(Object):boolean (36 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=18 <= 300.000000)
                              @ 21  java.util.EnumMap.unmaskNull(Object):Object (13 bytes)   trivial (relevance=1.000008, probability=1.000000, bonus=1.000000, nodes=7)
                              @ 2  java.util.LinkedList.isPositionIndex(int):boolean (18 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=12 <= 300.000000)
                            @ 10  java.lang.StringBuilder.append(char):StringBuilder (8 bytes)   inline method (bytecode parsing)
                                      @ 3  java.lang.Math.max(int, int):int (11 bytes)   trivial (relevance=0.133981, probability=0.780115, bonus=1.000000, nodes=7)
                                    @ 29  jdk.internal.util.ArraysSupport.newLength(int, int, int):int (27 bytes)   relevance-based (relevance=0.133981, probability=0.780115, bonus=1.000000, nodes=15 <= 40.194428)
                                  @ 24  java.lang.AbstractStringBuilder.newCapacity(int):int (59 bytes)   relevance-based (relevance=0.133981, probability=0.780115, bonus=1.000000, nodes=27 <= 40.194428)
                                    @ 25  java.lang.Math.min(int, int):int (11 bytes)   trivial (relevance=0.133983, probability=0.780111, bonus=1.000000, nodes=7)
                                  @ 32  java.util.Arrays.copyOf(byte[], int):byte[] (33 bytes)   relevance-based (relevance=0.133981, probability=0.780115, bonus=1.000000, nodes=28 <= 40.194428)
                                @ 7  java.lang.AbstractStringBuilder.ensureCapacityInternal(int):void (39 bytes)   relevance-based (relevance=1.000018, probability=6.602679, bonus=1.000000, nodes=72 <= 300.000000)
                                @ 11  java.lang.AbstractStringBuilder.isLatin1():boolean (19 bytes)   trivial (relevance=1.133980, probability=6.602671, bonus=1.000000, nodes=9)
                                @ 18  java.lang.StringLatin1.canEncode(int):boolean (13 bytes)   trivial (relevance=1.133961, probability=6.602560, bonus=1.000000, nodes=5)
                                @ 46  java.lang.AbstractStringBuilder.isLatin1():boolean (19 bytes)   trivial (relevance=0.000020, probability=0.000119, bonus=1.000000, nodes=9)
                            @ 2  java.lang.StringUTF16.checkIndex(int, byte[]):void (9 bytes)   inline method (bytecode parsing)
                              @ 2  java.lang.StringUTF16.length(byte[]):int (5 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                                @ 72  java.lang.StringUTF16.putCharSB(byte[], int, int):void (12 bytes)   not inlining relevance-based (relevance=0.000020, probability=0.000119, bonus=1.000000, nodes=15 > 0.006128)
                              @ 2  java.lang.AbstractStringBuilder.append(char):AbstractStringBuilder (77 bytes)   relevance-based (relevance=1.000000, probability=6.602679, bonus=1.000000, nodes=102 <= 300.000000)
                            @ 8  jdk.internal.math.DoubleToDecimal.append(int):void (19 bytes)   inline method (bytecode parsing)
                              @ 2  jdk.internal.math.DoubleToDecimal.appendDigit(int):void (22 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=14 <= 300.000000)
                              @ 29  jdk.internal.math.DoubleToDecimal.appendDigit(int):void (22 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=17 <= 300.000000)
                                @ 2  jdk.internal.math.DoubleToDecimal.y(int):int (20 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=16 <= 300.000000)
                                @ 26  jdk.internal.math.DoubleToDecimal.appendDigit(int):void (22 bytes)   relevance-based (relevance=1.000000, probability=8.000000, bonus=1.000000, nodes=15 <= 300.000000)
                              @ 34  jdk.internal.math.DoubleToDecimal.append8Digits(int):void (42 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=48 <= 300.000000)
                                  @ 2  jdk.internal.math.DoubleToDecimal.y(int):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.588396, bonus=1.000000, nodes=16 <= 300.000000)
                                  @ 26  jdk.internal.math.DoubleToDecimal.appendDigit(int):void (22 bytes)   relevance-based (relevance=1.000000, probability=4.707165, bonus=1.000000, nodes=15 <= 300.000000)
                                @ 6  jdk.internal.math.DoubleToDecimal.append8Digits(int):void (42 bytes)   relevance-based (relevance=1.000000, probability=0.588396, bonus=1.000000, nodes=48 <= 300.000000)
                                @ 10  jdk.internal.math.DoubleToDecimal.removeTrailingZeroes():void (52 bytes)   relevance-based (relevance=1.699537, probability=1.000000, bonus=1.000000, nodes=38 <= 300.000000)
                              @ 39  jdk.internal.math.DoubleToDecimal.lowDigits(int):void (14 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=89 <= 300.000000)
                              @ 18  jdk.internal.math.DoubleToDecimal.appendDigit(int):void (22 bytes)   relevance-based (relevance=0.424167, probability=0.424167, bonus=1.000000, nodes=14 <= 127.250068)
                            @ 7  java.nio.Buffer.checkIndex(int):int (12 bytes)   inline method (bytecode parsing)
                            @ 10  java.nio.HeapByteBuffer.ix(int):int (7 bytes)   inline method (bytecode parsing)
                              @ 11  java.lang.Enum.toString():String (5 bytes)   trivial (relevance=1.000000, probability=0.999972, bonus=1.000000, nodes=5)
                            @ 2  jdk.internal.org.objectweb.asm.SymbolTable.hash(int, String):int (10 bytes)   inline method (bytecode parsing)
