VM Arguments: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:-UnlockExperimentalVMOptions -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -Djdk.graal.CompilationFailureAction=Diagnose -Djdk.graal.DumpOnError=true -Djdk.graal.ShowDumpFiles=true -Djdk.graal.PrintGraph=Network -Djdk.graal.ObjdumpExecutables=objdump,gobjdump -Dgraalvm.locatorDisabled=true -XX:+UseJVMCICompiler -Dgraal.EnableProfiler=false -Dgraal.MinGraphSize=80 -Dgraal.CountCompiledMethods=false -Dgraal.BuboDebugMode=false -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -Dgraal.CompilationFailureAction=Diagnose -XX:+UseJVMCICompiler -Dgraal.HotSpotPrintInlining=true -Djdk.graal.LogFile=NormalNoDump.txt --add-exports=jdk.graal.compiler/jdk.graal.compiler.hotspot.meta.Bubo=ALL-UNNAMED -javaagent:/home/hburchell/Repos/graal-dev/graal-instrumentation/Bubo-Agent/target/JavaAgent-1.0-SNAPSHOT-jar-with-dependencies.jar
sun.java.command=Harness DeltaBlue 300 60000
                              @ 17  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=0.332350, probability=0.248775, bonus=1.000000, nodes=9)
                              @ 27  java.lang.StringLatin1.hashCode(byte[]):int (52 bytes)   relevance-based (relevance=0.332350, probability=0.248775, bonus=1.000000, nodes=22 <= 99.704980)
                            @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.registerAsWord(Register):Word (7 bytes)   inline method (bytecode parsing)
                            @ 14  jdk.graal.compiler.hotspot.stubs.ExceptionHandlerStub.checkNoExceptionInThread(Word, boolean):void (62 bytes)   inline method (bytecode parsing)
                            @ 24  jdk.graal.compiler.hotspot.stubs.ExceptionHandlerStub.checkExceptionNotNull(boolean, Object):void (14 bytes)   inline method (bytecode parsing)
                            @ 30  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.writeExceptionOop(Word, Object):void (15 bytes)   inline method (bytecode parsing)
                            @ 36  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.writeExceptionPc(Word, Word):void (15 bytes)   inline method (bytecode parsing)
                            @ 26  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 4  deltablue.Plan.lambda$execute$0(AbstractConstraint):void (5 bytes)   inline method (bytecode parsing)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                            @ 8  deltablue.Planner.lambda$incrementalRemove$0(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                                @ 2  deltablue.Planner.incrementalAdd(AbstractConstraint):void (27 bytes)   not inlining relevance-based (relevance=0.000000, probability=0.000002, bonus=1.000000, nodes=24 > 0.000050)
                                  @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000098, probability=0.000098, bonus=1.000000, nodes=41 > 0.029369)
                                @ 11  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=35 <= 300.000000)
                                @ 8  deltablue.Planner.lambda$extractPlanFromConstraints$1(Vector, AbstractConstraint):void (20 bytes)   not inlining relevance-based (relevance=0.000000, probability=0.000002, bonus=1.000000, nodes=28 > 0.000050)
                              @ 1  som.Vector.with(Object):Vector (16 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=40 <= 300.000000)
                                @ 17  som.Vector.lambda$remove$0(Object, boolean[], Object[], int[], Object):void (28 bytes)   not inlining relevance-based (relevance=0.000000, probability=0.000006, bonus=1.000000, nodes=26 > 0.000150)
                              @ 6  som.Vector.isEmpty():boolean (17 bytes)   relevance-based (relevance=2.000000, probability=2.000000, bonus=1.000000, nodes=10 <= 300.000000)
                                @ 12  deltablue.Planner.lambda$constraintsConsuming$3(AbstractConstraint, ForEachInterface, AbstractConstraint):void (20 bytes)   not inlining relevance-based (relevance=0.020000, probability=0.248968, bonus=1.000000, nodes=26 > 5.999950)
                                @ 8  deltablue.Planner.lambda$removePropagateFrom$4(Vector, AbstractConstraint):void (13 bytes)   not inlining relevance-based (relevance=0.020000, probability=0.248968, bonus=1.000000, nodes=20 > 5.999950)
                                @ 1  som.Vector.isEmpty():boolean (17 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=10 <= 300.000000)
                              @ 13  som.Vector.removeFirst():Object (31 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=18 <= 300.000000)
                                  @ 6  deltablue.BinaryConstraint.isSatisfied():boolean (13 bytes)   relevance-based (relevance=0.064130, probability=0.487062, bonus=1.000000, nodes=14 <= 19.239072)
                              @ 23  deltablue.BinaryConstraint.getOutput():Variable (22 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=22 <= 300.000000)
                                @ 12  deltablue.Planner.lambda$addConstraintsConsumingTo$2(AbstractConstraint, Vector, AbstractConstraint):void (18 bytes)   not inlining relevance-based (relevance=0.100350, probability=1.249209, bonus=1.000000, nodes=42 > 30.105048)
                            @ 18  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 21  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 35  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 38  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 39  deltablue.Variable.getWalkStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 45  deltablue.Variable.setWalkStrength(Strength):void (6 bytes)   inline method (bytecode parsing)
                            @ 50  deltablue.Variable.getStay():boolean (5 bytes)   inline accessor method (bytecode parsing)
                            @ 53  deltablue.Variable.setStay(boolean):void (6 bytes)   inline method (bytecode parsing)
                            @ 57  deltablue.Variable.getStay():boolean (5 bytes)   inline accessor method (bytecode parsing)
                                @ 1  deltablue.EqualityConstraint.execute():void (42 bytes)   relevance-based (relevance=1.000000, probability=12.448501, bonus=1.000000, nodes=41 <= 300.000000)
                            @ 8  deltablue.Variable.setWalkStrength(Strength):void (6 bytes)   inline method (bytecode parsing)
                            @ 27  deltablue.Variable.setStay(boolean):void (6 bytes)   inline method (bytecode parsing)
                              @ 20  deltablue.Plan$$Lambda/0x00007f8674194c88.apply(Object):void (8 bytes)   not inlining callee invoke probability is too high (invokeP=6.000000, relevance=1.000000, probability=14.195657, bonus=1.000000, nodes=142)
                            @ 34  deltablue.Variable.getStay():boolean (5 bytes)   inline accessor method (bytecode parsing)
                            @ 39  deltablue.Variable.getWalkStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 45  deltablue.Variable.setWalkStrength(Strength):void (6 bytes)   inline method (bytecode parsing)
                            @ 50  deltablue.Variable.getStay():boolean (5 bytes)   inline accessor method (bytecode parsing)
                            @ 60  deltablue.Variable.getStay():boolean (5 bytes)   inline accessor method (bytecode parsing)
                            @ 70  deltablue.Variable.getStay():boolean (5 bytes)   inline accessor method (bytecode parsing)
                            @ 81  deltablue.Variable.setStay(boolean):void (6 bytes)   inline method (bytecode parsing)
                            @ 85  deltablue.Variable.getStay():boolean (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 2  deltablue.Strength.weaker(Strength):boolean (17 bytes)   relevance-based (relevance=0.132329, probability=0.104636, bonus=1.000000, nodes=11 <= 39.698834)
                                @ 42  deltablue.Strength.weakest(Strength):Strength (14 bytes)   relevance-based (relevance=0.132329, probability=0.104636, bonus=1.000000, nodes=12 <= 39.698834)
                            @ 18  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 25  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 33  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 37  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                                @ 92  deltablue.ScaleConstraint.execute():void (74 bytes)   relevance-based (relevance=0.132329, probability=0.104636, bonus=1.000000, nodes=32 <= 39.698834)
                                @ 16  deltablue.AbstractConstraint.isInput():boolean (2 bytes)   trivial (relevance=0.132338, probability=0.104642, bonus=1.000000, nodes=4)
                                @ 41  deltablue.StayConstraint.execute():void (1 bytes)   trivial (relevance=0.132338, probability=0.104642, bonus=1.000000, nodes=3)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 2  deltablue.Strength.weaker(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.790722, bonus=1.000000, nodes=11 <= 300.000000)
                                @ 42  deltablue.Strength.weakest(Strength):Strength (14 bytes)   relevance-based (relevance=1.667835, probability=0.790722, bonus=1.000000, nodes=12 <= 300.000000)
                            @ 18  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 21  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 35  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 38  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                                @ 64  deltablue.EqualityConstraint.execute():void (42 bytes)   relevance-based (relevance=1.333918, probability=0.632411, bonus=1.000000, nodes=38 <= 300.000000)
                              @ 42  deltablue.BinaryConstraint.recalculate():void (68 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=206 <= 300.000000)
                              @ 48  deltablue.BinaryConstraint.getOutput():Variable (22 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=22 <= 300.000000)
                            @ 1  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 6  deltablue.Variable.getConstraints():Vector (5 bytes)   inline accessor method (bytecode parsing)
                            @ 11  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object, Object):Object (10 bytes)   inline method (bytecode parsing)
                              @ 6  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object, Object):Object (24 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 19  deltablue.Planner$$Lambda/0x00007f867403ac20.<init>(AbstractConstraint, Vector):void (15 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                                      @ 6  deltablue.BinaryConstraint.isSatisfied():boolean (13 bytes)   relevance-based (relevance=0.594886, probability=4.912754, bonus=1.000000, nodes=14 <= 178.465802)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                        @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000015, probability=0.000120, bonus=1.000000, nodes=41 > 0.004368)
                                      @ 14  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=0.148720, probability=1.228178, bonus=1.000000, nodes=35 <= 44.616079)
                                    @ 12  deltablue.Planner.lambda$addConstraintsConsumingTo$2(AbstractConstraint, Vector, AbstractConstraint):void (18 bytes)   relevance-based (relevance=1.000000, probability=13.171067, bonus=1.000000, nodes=72 <= 300.000000)
                                  @ 20  deltablue.Planner$$Lambda/0x00007f867403ac20.apply(Object):void (16 bytes)   relevance-based (relevance=1.000000, probability=13.171067, bonus=1.000000, nodes=79 <= 300.000000)
                                @ 16  som.Vector.forEach(ForEachInterface):void (32 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=92 <= 300.000000)
                              @ 52  deltablue.Planner.addConstraintsConsumingTo(Variable, Vector):void (20 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=111 <= 300.000000)
                              @ 1  deltablue.Planner.newMark():int (15 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f867403aa08.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 4  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 15  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 30  deltablue.Variable.getWalkStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 65  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 76  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 91  deltablue.Variable.getWalkStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 126  deltablue.Variable.getWalkStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 133  deltablue.Variable.getWalkStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 189  deltablue.Variable.getWalkStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 20  deltablue.Variable.getWalkStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 23  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=0.400188, probability=0.166923, bonus=1.000000, nodes=13 <= 120.056336)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 136  deltablue.Strength.weaker(Strength):boolean (17 bytes)   relevance-based (relevance=0.995733, probability=0.332374, bonus=1.000000, nodes=14 <= 298.720011)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 192  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=0.995733, probability=0.332374, bonus=1.000000, nodes=13 <= 298.720011)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 23  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                  @ 94  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.333798, bonus=1.000000, nodes=13 <= 300.000000)
                              @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 37  jdk.graal.compiler.nodes.PiNode.piCastNonNull(Object, GuardingNode):Object (9 bytes)   inline method (bytecode parsing)
                                  @ 33  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=0.500004, probability=0.166900, bonus=1.000000, nodes=13 <= 150.001250)
                                @ 2  deltablue.BinaryConstraint.chooseMethod(int):Direction (220 bytes)   relevance-based (relevance=1.997178, probability=1.000000, bonus=1.000000, nodes=138 <= 300.000000)
                            @ 72  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                            @ 83  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                                @ 7  deltablue.BinaryConstraint.isSatisfied():boolean (13 bytes)   relevance-based (relevance=2.995825, probability=1.000000, bonus=1.000000, nodes=14 <= 300.000000)
                            @ 8  deltablue.AbstractConstraint.lambda$satisfy$1(int, Variable):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                                  @ 48  deltablue.AbstractConstraint$$Lambda/0x00007f867403aa08.apply(Object):void (12 bytes)   not inlining relevance-based (relevance=0.000013, probability=0.000003, bonus=1.000000, nodes=13 > 0.003790)
                            @ 8  deltablue.AbstractConstraint.lambda$satisfy$1(int, Variable):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 23  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                                  @ 58  deltablue.AbstractConstraint$$Lambda/0x00007f867403aa08.apply(Object):void (12 bytes)   not inlining relevance-based (relevance=0.000013, probability=0.000003, bonus=1.000000, nodes=13 > 0.003790)
                            @ 43  jdk.graal.compiler.nodes.PiNode.piCastNonNull(Object, GuardingNode):Object (9 bytes)   inline method (bytecode parsing)
                            @ 8  deltablue.AbstractConstraint.lambda$satisfy$1(int, Variable):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                                  @ 68  deltablue.AbstractConstraint$$Lambda/0x00007f867403aa08.apply(Object):void (12 bytes)   not inlining relevance-based (relevance=0.000013, probability=0.000003, bonus=1.000000, nodes=13 > 0.003790)
                            @ 117  jdk.graal.compiler.hotspot.replacements.TypeCheckSnippetUtils.checkUnknownSubType(KlassPointer, KlassPointer, TypeCheckSnippetUtils$Counters):boolean (91 bytes)   inline method (bytecode parsing)
                            @ 8  deltablue.AbstractConstraint.lambda$satisfy$1(int, Variable):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                              @ 55  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                  @ 15  deltablue.AbstractConstraint$$Lambda/0x00007f867403aa08.apply(Object):void (12 bytes)   relevance-based (relevance=0.750573, probability=0.166900, bonus=1.000000, nodes=13 <= 225.171921)
                                @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                              @ 65  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                            @ 8  deltablue.AbstractConstraint.lambda$satisfy$1(int, Variable):void (6 bytes)   inline method (bytecode parsing)
                              @ 79  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                              @ 2  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                              @ 87  jdk.graal.compiler.hotspot.replacements.TypeCheckSnippetUtils.checkSelfAndSupers(KlassPointer, KlassPointer, TypeCheckSnippetUtils$Counters):boolean (113 bytes)   inline method (bytecode parsing)
                                  @ 25  deltablue.AbstractConstraint$$Lambda/0x00007f867403aa08.apply(Object):void (12 bytes)   relevance-based (relevance=0.750573, probability=0.166900, bonus=1.000000, nodes=13 <= 225.171921)
                                @ 12  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                  @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                            @ 8  deltablue.AbstractConstraint.lambda$satisfy$1(int, Variable):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                                @ 63  jdk.graal.compiler.hotspot.replacements.TypeCheckSnippetUtils.loadSecondarySupersElement(Word, int):KlassPointer (26 bytes)   inline method (bytecode parsing)
                                  @ 35  deltablue.AbstractConstraint$$Lambda/0x00007f867403aa08.apply(Object):void (12 bytes)   relevance-based (relevance=0.750573, probability=0.166900, bonus=1.000000, nodes=13 <= 225.171921)
                            @ 8  deltablue.AbstractConstraint.lambda$satisfy$1(int, Variable):void (6 bytes)   inline method (bytecode parsing)
                                @ 93  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                              @ 2  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                                  @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                                @ 108  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                  @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                                  @ 28  deltablue.AbstractConstraint$$Lambda/0x00007f867403aa08.apply(Object):void (12 bytes)   relevance-based (relevance=1.000000, probability=0.333795, bonus=1.000000, nodes=13 <= 300.000000)
                            @ 8  deltablue.AbstractConstraint.lambda$satisfy$1(int, Variable):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                                  @ 15  deltablue.AbstractConstraint$$Lambda/0x00007f867403aa08.apply(Object):void (12 bytes)   relevance-based (relevance=0.995742, probability=0.332374, bonus=1.000000, nodes=13 <= 298.722500)
                                @ 20  deltablue.BinaryConstraint.inputsDo(ForEachInterface):void (34 bytes)   relevance-based (relevance=2.995800, probability=0.999992, bonus=1.000000, nodes=95 <= 300.000000)
                              @ 8  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=312 > 300.000000)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f867403aa08.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 4  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 15  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 30  deltablue.Variable.getWalkStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 65  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 76  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 91  deltablue.Variable.getWalkStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 126  deltablue.Variable.getWalkStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 133  deltablue.Variable.getWalkStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 189  deltablue.Variable.getWalkStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 20  deltablue.Variable.getWalkStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 23  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=0.400188, probability=0.167396, bonus=1.000000, nodes=13 <= 120.056336)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 136  deltablue.Strength.weaker(Strength):boolean (17 bytes)   relevance-based (relevance=0.995733, probability=0.333316, bonus=1.000000, nodes=14 <= 298.720011)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 192  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=0.995733, probability=0.333316, bonus=1.000000, nodes=13 <= 298.720011)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 94  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.334744, bonus=1.000000, nodes=13 <= 300.000000)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 33  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=0.500004, probability=0.167374, bonus=1.000000, nodes=13 <= 150.001250)
                                @ 2  deltablue.BinaryConstraint.chooseMethod(int):Direction (220 bytes)   relevance-based (relevance=1.997178, probability=1.002836, bonus=1.000000, nodes=138 <= 300.000000)
                                @ 7  deltablue.BinaryConstraint.isSatisfied():boolean (13 bytes)   relevance-based (relevance=2.995825, probability=1.002836, bonus=1.000000, nodes=14 <= 300.000000)
                            @ 8  deltablue.AbstractConstraint.lambda$satisfy$1(int, Variable):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                                  @ 48  deltablue.AbstractConstraint$$Lambda/0x00007f867403aa08.apply(Object):void (12 bytes)   not inlining relevance-based (relevance=0.000013, probability=0.000003, bonus=1.000000, nodes=13 > 0.003790)
                            @ 8  deltablue.AbstractConstraint.lambda$satisfy$1(int, Variable):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                                  @ 58  deltablue.AbstractConstraint$$Lambda/0x00007f867403aa08.apply(Object):void (12 bytes)   not inlining relevance-based (relevance=0.000013, probability=0.000003, bonus=1.000000, nodes=13 > 0.003790)
                            @ 23  jdk.graal.compiler.replacements.AllocationSnippets.allocateArrayImpl(Word, int, int, int, AllocationSnippets$FillContent, int, boolean, boolean, boolean, boolean, AllocationSnippets$AllocationProfilingData):Object (178 bytes)   inline method (bytecode parsing)
                            @ 8  deltablue.AbstractConstraint.lambda$satisfy$1(int, Variable):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getTLABInfo():Word (5 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getThread():Word (8 bytes)   inline method (bytecode parsing)
                                  @ 4  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.registerAsWord(Register):Word (7 bytes)   inline method (bytecode parsing)
                                  @ 68  deltablue.AbstractConstraint$$Lambda/0x00007f867403aa08.apply(Object):void (12 bytes)   not inlining relevance-based (relevance=0.000013, probability=0.000003, bonus=1.000000, nodes=13 > 0.003790)
                              @ 9  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.readTlabTop(Word):Word (5 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.readTlabTop(Word):Word (17 bytes)   inline method (bytecode parsing)
                            @ 8  deltablue.AbstractConstraint.lambda$satisfy$1(int, Variable):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                              @ 17  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.readTlabEnd(Word):Word (5 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.readTlabEnd(Word):Word (17 bytes)   inline method (bytecode parsing)
                                  @ 15  deltablue.AbstractConstraint$$Lambda/0x00007f867403aa08.apply(Object):void (12 bytes)   relevance-based (relevance=0.750573, probability=0.167374, bonus=1.000000, nodes=13 <= 225.171921)
                            @ 8  deltablue.AbstractConstraint.lambda$satisfy$1(int, Variable):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                              @ 36  jdk.graal.compiler.replacements.ReplacementsUtil.dynamicAssert(boolean, String):void (12 bytes)   inline method (bytecode parsing)
                              @ 44  jdk.graal.compiler.replacements.AllocationSnippets.arrayAllocationSize(int, int, int):UnsignedWord (18 bytes)   inline method (bytecode parsing)
                                  @ 25  deltablue.AbstractConstraint$$Lambda/0x00007f867403aa08.apply(Object):void (12 bytes)   relevance-based (relevance=0.750573, probability=0.167374, bonus=1.000000, nodes=13 <= 225.171921)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.objectAlignment():int (7 bytes)   inline method (bytecode parsing)
                                @ 11  jdk.graal.compiler.replacements.AllocationSnippets.arrayAllocationSize(int, int, int, int):long (32 bytes)   inline method (bytecode parsing)
                            @ 8  deltablue.AbstractConstraint.lambda$satisfy$1(int, Variable):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                                  @ 35  deltablue.AbstractConstraint$$Lambda/0x00007f867403aa08.apply(Object):void (12 bytes)   relevance-based (relevance=0.750573, probability=0.167374, bonus=1.000000, nodes=13 <= 225.171921)
                            @ 8  deltablue.AbstractConstraint.lambda$satisfy$1(int, Variable):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                              @ 59  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.useTLAB():boolean (7 bytes)   inline method (bytecode parsing)
                                  @ 28  deltablue.AbstractConstraint$$Lambda/0x00007f867403aa08.apply(Object):void (12 bytes)   relevance-based (relevance=1.000000, probability=0.334742, bonus=1.000000, nodes=13 <= 300.000000)
                              @ 72  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.shouldAllocateInTLAB(UnsignedWord, boolean):boolean (33 bytes)   inline method (bytecode parsing)
                            @ 8  deltablue.AbstractConstraint.lambda$satisfy$1(int, Variable):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                              @ 102  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.writeTlabTop(Word, Word):void (6 bytes)   inline method (bytecode parsing)
                                @ 2  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.writeTlabTop(Word, Word):void (15 bytes)   inline method (bytecode parsing)
                                  @ 15  deltablue.AbstractConstraint$$Lambda/0x00007f867403aa08.apply(Object):void (12 bytes)   relevance-based (relevance=0.995742, probability=0.333316, bonus=1.000000, nodes=13 <= 298.722500)
                              @ 109  jdk.graal.compiler.replacements.AllocationSnippets.emitPrefetchAllocate(Word, boolean):void (61 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getPrefetchStyle():int (7 bytes)   inline method (bytecode parsing)
                                @ 20  deltablue.BinaryConstraint.inputsDo(ForEachInterface):void (34 bytes)   relevance-based (relevance=2.995800, probability=1.002827, bonus=1.000000, nodes=95 <= 300.000000)
                                @ 9  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getPrefetchLines(boolean):int (18 bytes)   inline method (bytecode parsing)
                                @ 14  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getPrefetchStepSize():int (7 bytes)   inline method (bytecode parsing)
                                @ 20  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getPrefetchDistance():int (7 bytes)   inline method (bytecode parsing)
                              @ 19  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining relevance-based (relevance=1.000000, probability=1.002836, bonus=1.000000, nodes=312 > 300.000000)
                              @ 136  jdk.graal.compiler.replacements.AllocationSnippets.formatArray(Word, UnsignedWord, int, Word, AllocationSnippets$FillContent, boolean, int, boolean, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):Object (53 bytes)   inline method (bytecode parsing)
                                @ 5  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.initializeObjectHeader(Word, Word, boolean):void (29 bytes)   inline method (bytecode parsing)
                                  @ 25  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.initializeObjectHeader(Word, Word, KlassPointer):void (20 bytes)   inline method (bytecode parsing)
                                @ 11  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.arrayLengthOffset():int (7 bytes)   inline method (bytecode parsing)
                                @ 15  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                                @ 38  jdk.graal.compiler.replacements.AllocationSnippets.fillContents(Word, AllocationSnippets$FillContent, int, UnsignedWord, boolean, boolean, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):void (58 bytes)   inline method (bytecode parsing)
                                  @ 22  jdk.graal.compiler.replacements.AllocationSnippets.zeroMemory(Word, int, UnsignedWord, boolean, boolean, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):void (19 bytes)   inline method (bytecode parsing)
                                    @ 15  jdk.graal.compiler.replacements.AllocationSnippets.fillMemory(long, Word, int, UnsignedWord, boolean, boolean, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):void (194 bytes)   inline method (bytecode parsing)
                                      @ 17  jdk.graal.compiler.replacements.ReplacementsUtil.dynamicAssert(boolean, String):void (12 bytes)   inline method (bytecode parsing)
                                      @ 56  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                                      @ 89  jdk.graal.compiler.replacements.ReplacementsUtil.dynamicAssert(boolean, String):void (12 bytes)   inline method (bytecode parsing)
                                      @ 153  jdk.graal.compiler.replacements.ReplacementsUtil.staticAssert(boolean, String):void (12 bytes)   inline method (bytecode parsing)
                                      @ 167  jdk.graal.compiler.replacements.AllocationSnippets.fillMemoryAlignedUnrollable(long, Word, UnsignedWord, UnsignedWord, boolean, AllocationSnippets$AllocationSnippetCounters):void (68 bytes)   inline method (bytecode parsing)
                                        @ 5  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                          @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                                        @ 44  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                                      @ 190  jdk.graal.compiler.replacements.AllocationSnippets.fillMemoryAligned(long, Word, UnsignedWord, UnsignedWord, boolean, UnsignedWord, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):void (155 bytes)   inline method (bytecode parsing)
                                        @ 17  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getMinimalBulkZeroingSize():int (7 bytes)   inline method (bytecode parsing)
                                        @ 36  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                          @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                                        @ 53  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                                        @ 105  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                          @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                                        @ 134  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                                @ 44  jdk.graal.compiler.replacements.AllocationSnippets.emitMemoryBarrierIf(boolean):void (14 bytes)   inline method (bytecode parsing)
                              @ 152  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                              @ 158  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.callNewArrayStub(Word, int):Object (35 bytes)   inline method (bytecode parsing)
                                @ 22  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.nonNullOrDeopt(Object):Object (27 bytes)   inline method (bytecode parsing)
                              @ 168  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.profileAllocation(AllocationSnippets$AllocationProfilingData, UnsignedWord):void (51 bytes)   inline method (bytecode parsing)
                              @ 174  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.verifyOop(Object):Object (5 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.verifyOop(Object):Object (19 bytes)   inline method (bytecode parsing)
                            @ 4  deltablue.Plan.lambda$execute$0(AbstractConstraint):void (5 bytes)   inline method (bytecode parsing)
                            @ 12  jdk.graal.compiler.replacements.gc.G1WriteBarrierSnippets.satbBarrier(AddressNode$Address, Object, Object, boolean, boolean, int, G1WriteBarrierSnippets$Counters):void (417 bytes)   inline method (bytecode parsing)
                              @ 10  jdk.graal.compiler.hotspot.replacements.HotSpotG1WriteBarrierSnippets.getThread():Word (8 bytes)   inline method (bytecode parsing)
                                @ 4  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.registerAsWord(Register):Word (7 bytes)   inline method (bytecode parsing)
                              @ 17  jdk.graal.compiler.replacements.gc.G1WriteBarrierSnippets.verifyOop(Object):void (17 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotG1WriteBarrierSnippets.verifyOops():boolean (7 bytes)   inline method (bytecode parsing)
                              @ 29  jdk.graal.compiler.hotspot.replacements.HotSpotG1WriteBarrierSnippets.satbQueueMarkingActiveOffset():int (7 bytes)   inline method (bytecode parsing)
                              @ 43  jdk.graal.compiler.replacements.gc.G1WriteBarrierSnippets.isTracingActive(int):boolean (30 bytes)   inline method (bytecode parsing)
                            @ 8  deltablue.Planner.lambda$incrementalRemove$0(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                              @ 198  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                              @ 231  org.graalvm.word.LocationIdentity.any():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                              @ 288  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                                @ 2  deltablue.Planner.incrementalAdd(AbstractConstraint):void (27 bytes)   not inlining relevance-based (relevance=0.000000, probability=0.000000, bonus=1.000000, nodes=24 > 0.000050)
                              @ 315  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                              @ 321  jdk.graal.compiler.hotspot.replacements.HotSpotG1WriteBarrierSnippets.satbQueueIndexOffset():int (7 bytes)   inline method (bytecode parsing)
                                @ 8  deltablue.Planner.lambda$extractPlanFromConstraints$1(Vector, AbstractConstraint):void (20 bytes)   not inlining relevance-based (relevance=0.000000, probability=0.000000, bonus=1.000000, nodes=28 > 0.000050)
                              @ 353  jdk.graal.compiler.hotspot.replacements.HotSpotG1WriteBarrierSnippets.satbQueueBufferOffset():int (7 bytes)   inline method (bytecode parsing)
                              @ 370  jdk.graal.compiler.hotspot.replacements.HotSpotG1WriteBarrierSnippets.wordSize():int (4 bytes)   inline method (bytecode parsing)
                              @ 396  jdk.graal.compiler.hotspot.replacements.HotSpotG1WriteBarrierSnippets.satbQueueIndexOffset():int (7 bytes)   inline method (bytecode parsing)
                                @ 17  som.Vector.lambda$remove$0(Object, boolean[], Object[], int[], Object):void (28 bytes)   not inlining relevance-based (relevance=0.000000, probability=0.000000, bonus=1.000000, nodes=26 > 0.000150)
                              @ 413  jdk.graal.compiler.replacements.gc.G1WriteBarrierSnippets.g1PreBarrierStub(Object):void (9 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotG1WriteBarrierSnippets.preWriteBarrierCallDescriptor():ForeignCallDescriptor (4 bytes)   inline method (bytecode parsing)
                                @ 8  deltablue.Planner.lambda$removePropagateFrom$4(Vector, AbstractConstraint):void (13 bytes)   not inlining relevance-based (relevance=0.020000, probability=0.016047, bonus=1.000000, nodes=20 > 5.999950)
                                @ 12  deltablue.Planner.lambda$constraintsConsuming$3(AbstractConstraint, ForEachInterface, AbstractConstraint):void (20 bytes)   not inlining relevance-based (relevance=0.030542, probability=0.024505, bonus=1.000000, nodes=26 > 9.162497)
                            @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotG1WriteBarrierSnippets.getThread():Word (8 bytes)   inline method (bytecode parsing)
                              @ 4  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.registerAsWord(Register):Word (7 bytes)   inline method (bytecode parsing)
                                  @ 6  deltablue.BinaryConstraint.isSatisfied():boolean (13 bytes)   relevance-based (relevance=0.071831, probability=0.034567, bonus=1.000000, nodes=14 <= 21.549366)
                            @ 14  jdk.graal.compiler.replacements.gc.G1WriteBarrierSnippets.verifyOop(Object):void (17 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotG1WriteBarrierSnippets.verifyOops():boolean (7 bytes)   inline method (bytecode parsing)
                            @ 20  jdk.graal.compiler.replacements.gc.G1WriteBarrierSnippets.verifyOop(Object):void (17 bytes)   inline method (bytecode parsing)
                                @ 12  deltablue.Planner.lambda$addConstraintsConsumingTo$2(AbstractConstraint, Vector, AbstractConstraint):void (18 bytes)   not inlining relevance-based (relevance=0.107645, probability=0.086368, bonus=1.000000, nodes=42 > 32.293462)
                              @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotG1WriteBarrierSnippets.verifyOops():boolean (7 bytes)   inline method (bytecode parsing)
                            @ 27  jdk.graal.compiler.replacements.gc.G1WriteBarrierSnippets.validateObject(Object, Object):void (52 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotG1WriteBarrierSnippets.verifyOops():boolean (7 bytes)   inline method (bytecode parsing)
                            @ 45  jdk.graal.compiler.hotspot.replacements.HotSpotG1WriteBarrierSnippets.verifyBarrier():boolean (21 bytes)   inline method (bytecode parsing)
                            @ 64  jdk.graal.compiler.replacements.gc.G1WriteBarrierSnippets.isTracingActive(int):boolean (30 bytes)   inline method (bytecode parsing)
                            @ 156  jdk.graal.compiler.hotspot.replacements.HotSpotG1WriteBarrierSnippets.logOfHeapRegionGrainBytes():int (7 bytes)   inline method (bytecode parsing)
                            @ 18  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 21  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 184  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                            @ 35  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 38  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 209  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                            @ 232  jdk.graal.compiler.hotspot.replacements.HotSpotG1WriteBarrierSnippets.cardTableAddress(Pointer):Word (32 bytes)   inline method (bytecode parsing)
                            @ 18  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 253  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                            @ 25  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 262  jdk.graal.compiler.hotspot.replacements.HotSpotG1WriteBarrierSnippets.youngCardValue():byte (7 bytes)   inline method (bytecode parsing)
                            @ 33  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 37  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 305  jdk.graal.compiler.hotspot.replacements.HotSpotG1WriteBarrierSnippets.dirtyCardValue():byte (7 bytes)   inline method (bytecode parsing)
                            @ 51  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 345  jdk.graal.compiler.replacements.gc.G1WriteBarrierSnippets.log(boolean, String, long, long, long):void (21 bytes)   inline method (bytecode parsing)
                            @ 58  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 352  jdk.graal.compiler.hotspot.replacements.HotSpotG1WriteBarrierSnippets.dirtyCardValue():byte (7 bytes)   inline method (bytecode parsing)
                            @ 66  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 366  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                            @ 372  jdk.graal.compiler.hotspot.replacements.HotSpotG1WriteBarrierSnippets.cardQueueIndexOffset():int (7 bytes)   inline method (bytecode parsing)
                            @ 70  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 404  jdk.graal.compiler.hotspot.replacements.HotSpotG1WriteBarrierSnippets.cardQueueBufferOffset():int (7 bytes)   inline method (bytecode parsing)
                            @ 421  jdk.graal.compiler.hotspot.replacements.HotSpotG1WriteBarrierSnippets.wordSize():int (4 bytes)   inline method (bytecode parsing)
                            @ 444  jdk.graal.compiler.hotspot.replacements.HotSpotG1WriteBarrierSnippets.cardQueueIndexOffset():int (7 bytes)   inline method (bytecode parsing)
                            @ 461  jdk.graal.compiler.replacements.gc.G1WriteBarrierSnippets.g1PostBarrierStub(Word):void (9 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotG1WriteBarrierSnippets.postWriteBarrierCallDescriptor():ForeignCallDescriptor (4 bytes)   inline method (bytecode parsing)
                                @ 1  deltablue.EqualityConstraint.execute():void (42 bytes)   relevance-based (relevance=1.000000, probability=0.802346, bonus=1.000000, nodes=103 <= 300.000000)
                              @ 20  deltablue.Plan$$Lambda/0x00007f8674194c88.apply(Object):void (8 bytes)   not inlining callee invoke probability is too high (invokeP=6.000000, relevance=1.000000, probability=0.929267, bonus=1.000000, nodes=200)
                            @ 4  deltablue.Plan.lambda$execute$0(AbstractConstraint):void (5 bytes)   inline method (bytecode parsing)
                            @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotG1WriteBarrierSnippets.getThread():Word (8 bytes)   inline method (bytecode parsing)
                              @ 4  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.registerAsWord(Register):Word (7 bytes)   inline method (bytecode parsing)
                            @ 14  jdk.graal.compiler.replacements.gc.G1WriteBarrierSnippets.verifyOop(Object):void (17 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotG1WriteBarrierSnippets.verifyOops():boolean (7 bytes)   inline method (bytecode parsing)
                            @ 20  jdk.graal.compiler.replacements.gc.G1WriteBarrierSnippets.verifyOop(Object):void (17 bytes)   inline method (bytecode parsing)
                            @ 8  deltablue.Planner.lambda$incrementalRemove$0(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotG1WriteBarrierSnippets.verifyOops():boolean (7 bytes)   inline method (bytecode parsing)
                            @ 27  jdk.graal.compiler.replacements.gc.G1WriteBarrierSnippets.validateObject(Object, Object):void (52 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotG1WriteBarrierSnippets.verifyOops():boolean (7 bytes)   inline method (bytecode parsing)
                            @ 64  jdk.graal.compiler.replacements.gc.G1WriteBarrierSnippets.isTracingActive(int):boolean (30 bytes)   inline method (bytecode parsing)
                            @ 156  jdk.graal.compiler.hotspot.replacements.HotSpotG1WriteBarrierSnippets.logOfHeapRegionGrainBytes():int (7 bytes)   inline method (bytecode parsing)
                            @ 184  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                            @ 209  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                @ 2  deltablue.Planner.incrementalAdd(AbstractConstraint):void (27 bytes)   not inlining relevance-based (relevance=0.000000, probability=0.000002, bonus=1.000000, nodes=24 > 0.000050)
                              @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                            @ 232  jdk.graal.compiler.hotspot.replacements.HotSpotG1WriteBarrierSnippets.cardTableAddress(Pointer):Word (32 bytes)   inline method (bytecode parsing)
                            @ 253  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                @ 8  deltablue.Planner.lambda$extractPlanFromConstraints$1(Vector, AbstractConstraint):void (20 bytes)   not inlining relevance-based (relevance=0.000000, probability=0.000002, bonus=1.000000, nodes=28 > 0.000050)
                              @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                            @ 262  jdk.graal.compiler.hotspot.replacements.HotSpotG1WriteBarrierSnippets.youngCardValue():byte (7 bytes)   inline method (bytecode parsing)
                                @ 17  som.Vector.lambda$remove$0(Object, boolean[], Object[], int[], Object):void (28 bytes)   not inlining relevance-based (relevance=0.000000, probability=0.000005, bonus=1.000000, nodes=26 > 0.000150)
                            @ 305  jdk.graal.compiler.hotspot.replacements.HotSpotG1WriteBarrierSnippets.dirtyCardValue():byte (7 bytes)   inline method (bytecode parsing)
                            @ 345  jdk.graal.compiler.replacements.gc.G1WriteBarrierSnippets.log(boolean, String, long, long, long):void (21 bytes)   inline method (bytecode parsing)
                            @ 352  jdk.graal.compiler.hotspot.replacements.HotSpotG1WriteBarrierSnippets.dirtyCardValue():byte (7 bytes)   inline method (bytecode parsing)
                                @ 8  deltablue.Planner.lambda$removePropagateFrom$4(Vector, AbstractConstraint):void (13 bytes)   not inlining relevance-based (relevance=0.020000, probability=0.194771, bonus=1.000000, nodes=20 > 5.999950)
                            @ 366  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                            @ 372  jdk.graal.compiler.hotspot.replacements.HotSpotG1WriteBarrierSnippets.cardQueueIndexOffset():int (7 bytes)   inline method (bytecode parsing)
                            @ 404  jdk.graal.compiler.hotspot.replacements.HotSpotG1WriteBarrierSnippets.cardQueueBufferOffset():int (7 bytes)   inline method (bytecode parsing)
                                @ 12  deltablue.Planner.lambda$constraintsConsuming$3(AbstractConstraint, ForEachInterface, AbstractConstraint):void (20 bytes)   not inlining relevance-based (relevance=0.030542, probability=0.297435, bonus=1.000000, nodes=26 > 9.162497)
                            @ 421  jdk.graal.compiler.hotspot.replacements.HotSpotG1WriteBarrierSnippets.wordSize():int (4 bytes)   inline method (bytecode parsing)
                            @ 444  jdk.graal.compiler.hotspot.replacements.HotSpotG1WriteBarrierSnippets.cardQueueIndexOffset():int (7 bytes)   inline method (bytecode parsing)
                            @ 461  jdk.graal.compiler.replacements.gc.G1WriteBarrierSnippets.g1PostBarrierStub(Word):void (9 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotG1WriteBarrierSnippets.postWriteBarrierCallDescriptor():ForeignCallDescriptor (4 bytes)   inline method (bytecode parsing)
                                  @ 6  deltablue.BinaryConstraint.isSatisfied():boolean (13 bytes)   relevance-based (relevance=0.071831, probability=0.419565, bonus=1.000000, nodes=14 <= 21.549366)
                                @ 12  deltablue.Planner.lambda$addConstraintsConsumingTo$2(AbstractConstraint, Vector, AbstractConstraint):void (18 bytes)   not inlining relevance-based (relevance=0.107645, probability=1.048316, bonus=1.000000, nodes=42 > 32.293462)
                            @ 18  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 21  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 35  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 38  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 18  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 25  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 33  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 37  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 51  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 58  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 66  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 70  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                                @ 1  deltablue.EqualityConstraint.execute():void (42 bytes)   relevance-based (relevance=1.000000, probability=9.738655, bonus=1.000000, nodes=103 <= 300.000000)
                              @ 20  deltablue.Plan$$Lambda/0x00007f8674194c88.apply(Object):void (8 bytes)   not inlining callee invoke probability is too high (invokeP=6.000000, relevance=1.000000, probability=11.279185, bonus=1.000000, nodes=200)
                            @ 5  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.clearPendingException(Word):Object (30 bytes)   inline method (bytecode parsing)
                            @ 16  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.getPendingException(Word):Object (14 bytes)   inline method (bytecode parsing)
                            @ 27  jdk.graal.compiler.hotspot.stubs.ForeignCallSnippets.getAndClearObjectResult(Word):Object (30 bytes)   inline method (bytecode parsing)
                            @ 26  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                            @ 36  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.StringLatin1.canEncode(int):boolean (13 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=8)
                              @ 14  java.lang.Math.min(int, int):int (11 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=7)
                                @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                              @ 1  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=8)
                                @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=41.111122, bonus=1.000000, nodes=9)
                            @ 3  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                                @ 12  java.lang.StringLatin1.charAt(byte[], int):char (15 bytes)   relevance-based (relevance=1.000000, probability=41.111122, bonus=1.000000, nodes=11 <= 300.000000)
                              @ 19  java.lang.String.charAt(int):char (25 bytes)   relevance-based (relevance=1.000000, probability=41.111122, bonus=1.000000, nodes=16 <= 300.000000)
                            @ 1  java.nio.Buffer.limit():int (5 bytes)   inline accessor method (bytecode parsing)
                                @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                              @ 10  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=8)
                            @ 4  java.nio.Buffer.session():MemorySessionImpl (20 bytes)   inline method (bytecode parsing)
                            @ 11  java.nio.Buffer.checkIndex(int):int (12 bytes)   inline method (bytecode parsing)
                            @ 14  java.nio.DirectByteBuffer.ix(int):long (10 bytes)   inline method (bytecode parsing)
                            @ 17  jdk.internal.misc.ScopedMemoryAccess.getByte(MemorySessionImpl, Object, long):byte (16 bytes)   inline method (bytecode parsing)
                              @ 4  jdk.internal.misc.ScopedMemoryAccess.getByteInternal(MemorySessionImpl, Object, long):byte (34 bytes)   inline method (bytecode parsing)
                              @ 25  java.nio.DirectByteBuffer.get(int):byte (34 bytes)   relevance-based (relevance=1.049644, probability=21.143283, bonus=1.000000, nodes=23 <= 300.000000)
                                @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=20.147093, bonus=1.000000, nodes=9)
                            @ 3  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                                @ 12  java.lang.StringLatin1.charAt(byte[], int):char (15 bytes)   relevance-based (relevance=1.000000, probability=20.147093, bonus=1.000000, nodes=11 <= 300.000000)
                              @ 53  java.lang.String.charAt(int):char (25 bytes)   relevance-based (relevance=1.000189, probability=20.147093, bonus=1.000000, nodes=16 <= 300.000000)
                              @ 20  java.util.HashMap.resize():HashMap$Node[] (356 bytes)   not inlining relevance-based (relevance=0.142866, probability=0.125007, bonus=1.000000, nodes=188 > 42.859803)
                            @ 4  deltablue.Plan.lambda$execute$0(AbstractConstraint):void (5 bytes)   inline method (bytecode parsing)
                              @ 123  java.util.HashMap$TreeNode.putTreeVal(HashMap, HashMap$Node[], int, Object, Object):HashMap$TreeNode (314 bytes)   not inlining relevance-based (relevance=0.003785, probability=0.003311, bonus=1.000000, nodes=219 > 1.135369)
                            @ 18  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 21  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 35  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 38  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 18  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 25  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 33  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 37  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 51  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 58  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 66  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 70  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                              @ 1  deltablue.EqualityConstraint.execute():void (42 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=103 <= 300.000000)
                              @ 91  java.lang.String.equals(Object):boolean (56 bytes)   not inlining relevance-based (relevance=0.035184, probability=0.030785, bonus=1.000000, nodes=117 > 10.555101)
                            @ 9  java.util.LinkedHashMap$Entry.<init>(int, Object, Object, HashMap$Node):void (10 bytes)   inline method (bytecode parsing)
                                @ 6  java.util.HashMap$Node.<init>(int, Object, Object, HashMap$Node):void (26 bytes)   relevance-based (relevance=0.171643, probability=0.121640, bonus=1.000000, nodes=17 <= 51.492801)
                                @ 17  java.util.LinkedHashMap.linkNodeAtEnd(LinkedHashMap$Entry):void (76 bytes)   relevance-based (relevance=0.171643, probability=0.121640, bonus=1.000000, nodes=26 <= 51.492801)
                                @ 9  java.util.HashMap$Node.<init>(int, Object, Object, HashMap$Node):void (26 bytes)   relevance-based (relevance=0.731397, probability=0.518327, bonus=1.000000, nodes=17 <= 219.419103)
                              @ 56  java.util.HashMap.newNode(int, Object, Object, HashMap$Node):HashMap$Node (13 bytes)   relevance-based (relevance=0.731397, probability=0.639967, bonus=1.000000, nodes=60 <= 219.419103)
                              @ 203  java.lang.String.equals(Object):boolean (56 bytes)   not inlining relevance-based (relevance=0.004403, probability=0.003800, bonus=1.000000, nodes=68 > 1.320885)
                            @ 9  java.util.LinkedHashMap$Entry.<init>(int, Object, Object, HashMap$Node):void (10 bytes)   inline method (bytecode parsing)
                                @ 6  java.util.HashMap$Node.<init>(int, Object, Object, HashMap$Node):void (26 bytes)   not inlining relevance-based (relevance=0.054750, probability=0.041638, bonus=1.000000, nodes=17 > 16.424948)
                                @ 17  java.util.LinkedHashMap.linkNodeAtEnd(LinkedHashMap$Entry):void (76 bytes)   not inlining relevance-based (relevance=0.054750, probability=0.041638, bonus=1.000000, nodes=26 > 16.424948)
                                @ 9  java.util.HashMap$Node.<init>(int, Object, Object, HashMap$Node):void (26 bytes)   relevance-based (relevance=0.363690, probability=0.276589, bonus=1.000000, nodes=17 <= 109.107052)
                              @ 152  java.util.HashMap.newNode(int, Object, Object, HashMap$Node):HashMap$Node (13 bytes)   relevance-based (relevance=0.363690, probability=0.318226, bonus=1.000000, nodes=34 <= 109.107052)
                              @ 169  java.util.HashMap.treeifyBin(HashMap$Node[], int):void (110 bytes)   not inlining relevance-based (relevance=0.001365, probability=0.001194, bonus=1.000000, nodes=77 > 0.409477)
                              @ 253  java.util.LinkedHashMap.afterNodeAccess(HashMap$Node):void (266 bytes)   not inlining relevance-based (relevance=0.043988, probability=0.038490, bonus=1.000000, nodes=154 > 13.196540)
                              @ 288  java.util.HashMap.resize():HashMap$Node[] (356 bytes)   not inlining relevance-based (relevance=0.022153, probability=0.019383, bonus=1.000000, nodes=188 > 6.645761)
                            @ 1  java.util.HashMap.size():int (5 bytes)   inline accessor method (bytecode parsing)
                                @ 15  java.util.LinkedHashMap.removeEldestEntry(Map$Entry):boolean (2 bytes)   relevance-based (relevance=0.092755, probability=0.047695, bonus=1.000000, nodes=14 <= 27.826614)
                              @ 295  java.util.HashMap.afterNodeInsertion(boolean):void (1 bytes)   relevance-based (relevance=1.098878, probability=0.961510, bonus=1.000000, nodes=40 <= 300.000000)
                            @ 18  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 21  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 35  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 38  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 18  jdk.graal.compiler.replacements.AllocationSnippets.allocateInstanceImpl(Word, UnsignedWord, boolean, AllocationSnippets$FillContent, boolean, boolean, AllocationSnippets$AllocationProfilingData):Object (143 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getTLABInfo():Word (5 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getThread():Word (8 bytes)   inline method (bytecode parsing)
                                  @ 4  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.registerAsWord(Register):Word (7 bytes)   inline method (bytecode parsing)
                              @ 9  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.readTlabTop(Word):Word (5 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.readTlabTop(Word):Word (17 bytes)   inline method (bytecode parsing)
                              @ 17  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.readTlabEnd(Word):Word (5 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.readTlabEnd(Word):Word (17 bytes)   inline method (bytecode parsing)
                              @ 35  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.useTLAB():boolean (7 bytes)   inline method (bytecode parsing)
                              @ 47  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.shouldAllocateInTLAB(UnsignedWord, boolean):boolean (33 bytes)   inline method (bytecode parsing)
                              @ 77  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.writeTlabTop(Word, Word):void (6 bytes)   inline method (bytecode parsing)
                                @ 2  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.writeTlabTop(Word, Word):void (15 bytes)   inline method (bytecode parsing)
                              @ 84  jdk.graal.compiler.replacements.AllocationSnippets.emitPrefetchAllocate(Word, boolean):void (61 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getPrefetchStyle():int (7 bytes)   inline method (bytecode parsing)
                                @ 9  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getPrefetchLines(boolean):int (18 bytes)   inline method (bytecode parsing)
                                @ 14  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getPrefetchStepSize():int (7 bytes)   inline method (bytecode parsing)
                                @ 20  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getPrefetchDistance():int (7 bytes)   inline method (bytecode parsing)
                              @ 103  jdk.graal.compiler.replacements.AllocationSnippets.formatObject(Word, UnsignedWord, Word, AllocationSnippets$FillContent, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):Object (41 bytes)   inline method (bytecode parsing)
                                @ 4  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.initializeObjectHeader(Word, Word, boolean):void (29 bytes)   inline method (bytecode parsing)
                                  @ 25  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.initializeObjectHeader(Word, Word, KlassPointer):void (20 bytes)   inline method (bytecode parsing)
                                @ 8  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.instanceHeaderSize():int (7 bytes)   inline method (bytecode parsing)
                                @ 27  jdk.graal.compiler.replacements.AllocationSnippets.fillContents(Word, AllocationSnippets$FillContent, int, UnsignedWord, boolean, boolean, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):void (58 bytes)   inline method (bytecode parsing)
                                  @ 22  jdk.graal.compiler.replacements.AllocationSnippets.zeroMemory(Word, int, UnsignedWord, boolean, boolean, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):void (19 bytes)   inline method (bytecode parsing)
                                    @ 15  jdk.graal.compiler.replacements.AllocationSnippets.fillMemory(long, Word, int, UnsignedWord, boolean, boolean, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):void (194 bytes)   inline method (bytecode parsing)
                                      @ 17  jdk.graal.compiler.replacements.ReplacementsUtil.dynamicAssert(boolean, String):void (12 bytes)   inline method (bytecode parsing)
                                      @ 56  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                                      @ 89  jdk.graal.compiler.replacements.ReplacementsUtil.dynamicAssert(boolean, String):void (12 bytes)   inline method (bytecode parsing)
                                      @ 153  jdk.graal.compiler.replacements.ReplacementsUtil.staticAssert(boolean, String):void (12 bytes)   inline method (bytecode parsing)
                                      @ 167  jdk.graal.compiler.replacements.AllocationSnippets.fillMemoryAlignedUnrollable(long, Word, UnsignedWord, UnsignedWord, boolean, AllocationSnippets$AllocationSnippetCounters):void (68 bytes)   inline method (bytecode parsing)
                                        @ 5  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                          @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                                        @ 44  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                                      @ 190  jdk.graal.compiler.replacements.AllocationSnippets.fillMemoryAligned(long, Word, UnsignedWord, UnsignedWord, boolean, UnsignedWord, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):void (155 bytes)   inline method (bytecode parsing)
                            @ 29  jdk.graal.compiler.nodes.PiNode.piCastNonNullClass(Class, GuardingNode):Class (9 bytes)   inline method (bytecode parsing)
                            @ 37  jdk.graal.compiler.nodes.java.DynamicNewInstanceNode.throwsInstantiationExceptionInjectedProbability(double, Class, Class):boolean (70 bytes)   inline method (bytecode parsing)
                                        @ 91  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                          @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                                        @ 105  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                          @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                                        @ 134  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                                @ 33  jdk.graal.compiler.replacements.AllocationSnippets.emitMemoryBarrierIf(boolean):void (14 bytes)   inline method (bytecode parsing)
                              @ 119  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                              @ 124  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.callNewInstanceStub(Word):Object (33 bytes)   inline method (bytecode parsing)
                                @ 21  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.nonNullOrDeopt(Object):Object (27 bytes)   inline method (bytecode parsing)
                              @ 133  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.profileAllocation(AllocationSnippets$AllocationProfilingData, UnsignedWord):void (51 bytes)   inline method (bytecode parsing)
                              @ 38  java.lang.reflect.Modifier.isAbstract(int):boolean (14 bytes)   inline method (bytecode parsing)
                              @ 139  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.verifyOop(Object):Object (5 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.verifyOop(Object):Object (19 bytes)   inline method (bytecode parsing)
                            @ 2  jdk.graal.compiler.hotspot.replacements.HotSpotIsArraySnippets.classIsArray(Class):boolean (33 bytes)   inline method (bytecode parsing)
                            @ 18  jdk.graal.compiler.replacements.AllocationSnippets.allocateInstanceImpl(Word, UnsignedWord, boolean, AllocationSnippets$FillContent, boolean, boolean, AllocationSnippets$AllocationProfilingData):Object (143 bytes)   inline method (bytecode parsing)
                              @ 24  jdk.graal.compiler.hotspot.replacements.ClassGetHubNode.piCastNonNull(KlassPointer, GuardingNode):KlassPointer (9 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getTLABInfo():Word (5 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getThread():Word (8 bytes)   inline method (bytecode parsing)
                                  @ 4  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.registerAsWord(Register):Word (7 bytes)   inline method (bytecode parsing)
                              @ 29  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.klassIsArray(KlassPointer):boolean (23 bytes)   inline method (bytecode parsing)
                              @ 9  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.readTlabTop(Word):Word (5 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.readTlabTop(Word):Word (17 bytes)   inline method (bytecode parsing)
                              @ 17  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.readTlabEnd(Word):Word (5 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.readTlabEnd(Word):Word (17 bytes)   inline method (bytecode parsing)
                              @ 35  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.useTLAB():boolean (7 bytes)   inline method (bytecode parsing)
                              @ 47  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.shouldAllocateInTLAB(UnsignedWord, boolean):boolean (33 bytes)   inline method (bytecode parsing)
                              @ 77  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.writeTlabTop(Word, Word):void (6 bytes)   inline method (bytecode parsing)
                                @ 2  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.writeTlabTop(Word, Word):void (15 bytes)   inline method (bytecode parsing)
                              @ 84  jdk.graal.compiler.replacements.AllocationSnippets.emitPrefetchAllocate(Word, boolean):void (61 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getPrefetchStyle():int (7 bytes)   inline method (bytecode parsing)
                                @ 9  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getPrefetchLines(boolean):int (18 bytes)   inline method (bytecode parsing)
                                @ 14  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getPrefetchStepSize():int (7 bytes)   inline method (bytecode parsing)
                                @ 20  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getPrefetchDistance():int (7 bytes)   inline method (bytecode parsing)
                              @ 103  jdk.graal.compiler.replacements.AllocationSnippets.formatObject(Word, UnsignedWord, Word, AllocationSnippets$FillContent, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):Object (41 bytes)   inline method (bytecode parsing)
                                @ 4  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.initializeObjectHeader(Word, Word, boolean):void (29 bytes)   inline method (bytecode parsing)
                                  @ 25  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.initializeObjectHeader(Word, Word, KlassPointer):void (20 bytes)   inline method (bytecode parsing)
                                @ 8  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.instanceHeaderSize():int (7 bytes)   inline method (bytecode parsing)
                                @ 27  jdk.graal.compiler.replacements.AllocationSnippets.fillContents(Word, AllocationSnippets$FillContent, int, UnsignedWord, boolean, boolean, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):void (58 bytes)   inline method (bytecode parsing)
                                  @ 22  jdk.graal.compiler.replacements.AllocationSnippets.zeroMemory(Word, int, UnsignedWord, boolean, boolean, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):void (19 bytes)   inline method (bytecode parsing)
                                    @ 15  jdk.graal.compiler.replacements.AllocationSnippets.fillMemory(long, Word, int, UnsignedWord, boolean, boolean, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):void (194 bytes)   inline method (bytecode parsing)
                                      @ 17  jdk.graal.compiler.replacements.ReplacementsUtil.dynamicAssert(boolean, String):void (12 bytes)   inline method (bytecode parsing)
                                      @ 56  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                                      @ 89  jdk.graal.compiler.replacements.ReplacementsUtil.dynamicAssert(boolean, String):void (12 bytes)   inline method (bytecode parsing)
                            @ 33  jdk.graal.compiler.hotspot.replacements.ClassGetHubNode.piCastNonNull(KlassPointer, GuardingNode):KlassPointer (9 bytes)   inline method (bytecode parsing)
                            @ 43  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.isInstanceKlassFullyInitialized(KlassPointer):boolean (19 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.readInstanceKlassInitState(KlassPointer):byte (14 bytes)   inline method (bytecode parsing)
                                      @ 153  jdk.graal.compiler.replacements.ReplacementsUtil.staticAssert(boolean, String):void (12 bytes)   inline method (bytecode parsing)
                                      @ 167  jdk.graal.compiler.replacements.AllocationSnippets.fillMemoryAlignedUnrollable(long, Word, UnsignedWord, UnsignedWord, boolean, AllocationSnippets$AllocationSnippetCounters):void (68 bytes)   inline method (bytecode parsing)
                                        @ 5  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                          @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                            @ 101  jdk.graal.compiler.replacements.AllocationSnippets.allocateInstanceImpl(Word, UnsignedWord, boolean, AllocationSnippets$FillContent, boolean, boolean, AllocationSnippets$AllocationProfilingData):Object (143 bytes)   inline method (bytecode parsing)
                                        @ 44  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getTLABInfo():Word (5 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getThread():Word (8 bytes)   inline method (bytecode parsing)
                                      @ 190  jdk.graal.compiler.replacements.AllocationSnippets.fillMemoryAligned(long, Word, UnsignedWord, UnsignedWord, boolean, UnsignedWord, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):void (155 bytes)   inline method (bytecode parsing)
                                  @ 4  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.registerAsWord(Register):Word (7 bytes)   inline method (bytecode parsing)
                              @ 9  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.readTlabTop(Word):Word (5 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.readTlabTop(Word):Word (17 bytes)   inline method (bytecode parsing)
                                        @ 91  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                          @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                                        @ 105  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                          @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                                        @ 134  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                                @ 33  jdk.graal.compiler.replacements.AllocationSnippets.emitMemoryBarrierIf(boolean):void (14 bytes)   inline method (bytecode parsing)
                              @ 17  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.readTlabEnd(Word):Word (5 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.readTlabEnd(Word):Word (17 bytes)   inline method (bytecode parsing)
                              @ 119  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                              @ 124  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.callNewInstanceStub(Word):Object (33 bytes)   inline method (bytecode parsing)
                              @ 35  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.useTLAB():boolean (7 bytes)   inline method (bytecode parsing)
                                @ 21  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.nonNullOrDeopt(Object):Object (27 bytes)   inline method (bytecode parsing)
                              @ 47  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.shouldAllocateInTLAB(UnsignedWord, boolean):boolean (33 bytes)   inline method (bytecode parsing)
                              @ 133  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.profileAllocation(AllocationSnippets$AllocationProfilingData, UnsignedWord):void (51 bytes)   inline method (bytecode parsing)
                              @ 77  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.writeTlabTop(Word, Word):void (6 bytes)   inline method (bytecode parsing)
                              @ 139  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.verifyOop(Object):Object (5 bytes)   inline method (bytecode parsing)
                                @ 2  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.writeTlabTop(Word, Word):void (15 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.verifyOop(Object):Object (19 bytes)   inline method (bytecode parsing)
                              @ 84  jdk.graal.compiler.replacements.AllocationSnippets.emitPrefetchAllocate(Word, boolean):void (61 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getPrefetchStyle():int (7 bytes)   inline method (bytecode parsing)
                                @ 9  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getPrefetchLines(boolean):int (18 bytes)   inline method (bytecode parsing)
                                @ 14  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getPrefetchStepSize():int (7 bytes)   inline method (bytecode parsing)
                                @ 20  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getPrefetchDistance():int (7 bytes)   inline method (bytecode parsing)
                              @ 103  jdk.graal.compiler.replacements.AllocationSnippets.formatObject(Word, UnsignedWord, Word, AllocationSnippets$FillContent, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):Object (41 bytes)   inline method (bytecode parsing)
                                @ 4  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.initializeObjectHeader(Word, Word, boolean):void (29 bytes)   inline method (bytecode parsing)
                                  @ 25  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.initializeObjectHeader(Word, Word, KlassPointer):void (20 bytes)   inline method (bytecode parsing)
                                @ 8  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.instanceHeaderSize():int (7 bytes)   inline method (bytecode parsing)
                                @ 27  jdk.graal.compiler.replacements.AllocationSnippets.fillContents(Word, AllocationSnippets$FillContent, int, UnsignedWord, boolean, boolean, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):void (58 bytes)   inline method (bytecode parsing)
                                  @ 22  jdk.graal.compiler.replacements.AllocationSnippets.zeroMemory(Word, int, UnsignedWord, boolean, boolean, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):void (19 bytes)   inline method (bytecode parsing)
                                    @ 15  jdk.graal.compiler.replacements.AllocationSnippets.fillMemory(long, Word, int, UnsignedWord, boolean, boolean, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):void (194 bytes)   inline method (bytecode parsing)
                                      @ 17  jdk.graal.compiler.replacements.ReplacementsUtil.dynamicAssert(boolean, String):void (12 bytes)   inline method (bytecode parsing)
                                      @ 56  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                                      @ 89  jdk.graal.compiler.replacements.ReplacementsUtil.dynamicAssert(boolean, String):void (12 bytes)   inline method (bytecode parsing)
                                      @ 153  jdk.graal.compiler.replacements.ReplacementsUtil.staticAssert(boolean, String):void (12 bytes)   inline method (bytecode parsing)
                                      @ 167  jdk.graal.compiler.replacements.AllocationSnippets.fillMemoryAlignedUnrollable(long, Word, UnsignedWord, UnsignedWord, boolean, AllocationSnippets$AllocationSnippetCounters):void (68 bytes)   inline method (bytecode parsing)
                                        @ 5  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                          @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                                        @ 44  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                                      @ 190  jdk.graal.compiler.replacements.AllocationSnippets.fillMemoryAligned(long, Word, UnsignedWord, UnsignedWord, boolean, UnsignedWord, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):void (155 bytes)   inline method (bytecode parsing)
                                        @ 105  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                          @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                                        @ 134  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                                @ 33  jdk.graal.compiler.replacements.AllocationSnippets.emitMemoryBarrierIf(boolean):void (14 bytes)   inline method (bytecode parsing)
                                  @ 7  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                              @ 119  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                              @ 124  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.callNewInstanceStub(Word):Object (33 bytes)   inline method (bytecode parsing)
                                @ 21  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.nonNullOrDeopt(Object):Object (27 bytes)   inline method (bytecode parsing)
                              @ 133  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.profileAllocation(AllocationSnippets$AllocationProfilingData, UnsignedWord):void (51 bytes)   inline method (bytecode parsing)
                              @ 139  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.verifyOop(Object):Object (5 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.verifyOop(Object):Object (19 bytes)   inline method (bytecode parsing)
                            @ 118  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.dynamicNewInstanceStub(Class):Object (28 bytes)   inline method (bytecode parsing)
                              @ 16  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.nonNullOrDeopt(Object):Object (27 bytes)   inline method (bytecode parsing)
                            @ 5  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.clearPendingException(Word):Object (30 bytes)   inline method (bytecode parsing)
                            @ 16  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.getPendingException(Word):Object (14 bytes)   inline method (bytecode parsing)
                            @ 27  jdk.graal.compiler.hotspot.stubs.ForeignCallSnippets.getAndClearObjectResult(Word):Object (30 bytes)   inline method (bytecode parsing)
                            @ 5  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.clearPendingException(Word):Object (30 bytes)   inline method (bytecode parsing)
                            @ 16  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.getPendingException(Word):Object (14 bytes)   inline method (bytecode parsing)
                            @ 27  jdk.graal.compiler.hotspot.stubs.ForeignCallSnippets.getAndClearObjectResult(Word):Object (30 bytes)   inline method (bytecode parsing)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                              @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000125, probability=0.000125, bonus=1.000000, nodes=41 > 0.037575)
                            @ 18  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 25  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 33  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 37  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 51  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 58  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 66  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 70  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                                @ 6  deltablue.BinaryConstraint.isSatisfied():boolean (13 bytes)   relevance-based (relevance=0.764883, probability=0.433390, bonus=1.000000, nodes=14 <= 229.464999)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                  @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000056, probability=0.000032, bonus=1.000000, nodes=41 > 0.016807)
                                @ 14  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=0.450742, probability=0.255395, bonus=1.000000, nodes=35 <= 135.222585)
                              @ 6  deltablue.BinaryConstraint.isSatisfied():boolean (13 bytes)   relevance-based (relevance=0.766835, probability=0.434016, bonus=1.000000, nodes=14 <= 230.050388)
                              @ 12  deltablue.Planner.lambda$addConstraintsConsumingTo$2(AbstractConstraint, Vector, AbstractConstraint):void (18 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=72 <= 300.000000)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000057, probability=0.000032, bonus=1.000000, nodes=41 > 0.016972)
                              @ 14  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=0.455170, probability=0.257619, bonus=1.000000, nodes=35 <= 136.551051)
                              @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=9)
                            @ 3  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                              @ 12  java.lang.StringLatin1.charAt(byte[], int):char (15 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                              @ 1  som.Vector.isEmpty():boolean (17 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=14 <= 300.000000)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                              @ 2  deltablue.Strength.weaker(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                            @ 23  jdk.graal.compiler.replacements.AllocationSnippets.allocateArrayImpl(Word, int, int, int, AllocationSnippets$FillContent, int, boolean, boolean, boolean, boolean, AllocationSnippets$AllocationProfilingData):Object (178 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getTLABInfo():Word (5 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getThread():Word (8 bytes)   inline method (bytecode parsing)
                                  @ 4  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.registerAsWord(Register):Word (7 bytes)   inline method (bytecode parsing)
                              @ 9  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.readTlabTop(Word):Word (5 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.readTlabTop(Word):Word (17 bytes)   inline method (bytecode parsing)
                            @ 8  deltablue.AbstractConstraint.lambda$satisfy$1(int, Variable):void (6 bytes)   inline method (bytecode parsing)
                              @ 17  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.readTlabEnd(Word):Word (5 bytes)   inline method (bytecode parsing)
                              @ 2  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.readTlabEnd(Word):Word (17 bytes)   inline method (bytecode parsing)
                              @ 36  jdk.graal.compiler.replacements.ReplacementsUtil.dynamicAssert(boolean, String):void (12 bytes)   inline method (bytecode parsing)
                              @ 44  jdk.graal.compiler.replacements.AllocationSnippets.arrayAllocationSize(int, int, int):UnsignedWord (18 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.objectAlignment():int (7 bytes)   inline method (bytecode parsing)
                                @ 11  jdk.graal.compiler.replacements.AllocationSnippets.arrayAllocationSize(int, int, int, int):long (32 bytes)   inline method (bytecode parsing)
                              @ 59  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.useTLAB():boolean (7 bytes)   inline method (bytecode parsing)
                              @ 72  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.shouldAllocateInTLAB(UnsignedWord, boolean):boolean (33 bytes)   inline method (bytecode parsing)
                              @ 102  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.writeTlabTop(Word, Word):void (6 bytes)   inline method (bytecode parsing)
                                @ 2  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.writeTlabTop(Word, Word):void (15 bytes)   inline method (bytecode parsing)
                              @ 109  jdk.graal.compiler.replacements.AllocationSnippets.emitPrefetchAllocate(Word, boolean):void (61 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getPrefetchStyle():int (7 bytes)   inline method (bytecode parsing)
                                @ 9  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getPrefetchLines(boolean):int (18 bytes)   inline method (bytecode parsing)
                                @ 14  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getPrefetchStepSize():int (7 bytes)   inline method (bytecode parsing)
                                @ 20  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getPrefetchDistance():int (7 bytes)   inline method (bytecode parsing)
                              @ 136  jdk.graal.compiler.replacements.AllocationSnippets.formatArray(Word, UnsignedWord, int, Word, AllocationSnippets$FillContent, boolean, int, boolean, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):Object (53 bytes)   inline method (bytecode parsing)
                                @ 5  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.initializeObjectHeader(Word, Word, boolean):void (29 bytes)   inline method (bytecode parsing)
                                  @ 25  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.initializeObjectHeader(Word, Word, KlassPointer):void (20 bytes)   inline method (bytecode parsing)
                                @ 11  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.arrayLengthOffset():int (7 bytes)   inline method (bytecode parsing)
                                @ 15  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                                @ 38  jdk.graal.compiler.replacements.AllocationSnippets.fillContents(Word, AllocationSnippets$FillContent, int, UnsignedWord, boolean, boolean, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):void (58 bytes)   inline method (bytecode parsing)
                                  @ 22  jdk.graal.compiler.replacements.AllocationSnippets.zeroMemory(Word, int, UnsignedWord, boolean, boolean, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):void (19 bytes)   inline method (bytecode parsing)
                                    @ 15  jdk.graal.compiler.replacements.AllocationSnippets.fillMemory(long, Word, int, UnsignedWord, boolean, boolean, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):void (194 bytes)   inline method (bytecode parsing)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                                      @ 17  jdk.graal.compiler.replacements.ReplacementsUtil.dynamicAssert(boolean, String):void (12 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                      @ 56  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                      @ 89  jdk.graal.compiler.replacements.ReplacementsUtil.dynamicAssert(boolean, String):void (12 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f867403aa08.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                                      @ 153  jdk.graal.compiler.replacements.ReplacementsUtil.staticAssert(boolean, String):void (12 bytes)   inline method (bytecode parsing)
                                      @ 167  jdk.graal.compiler.replacements.AllocationSnippets.fillMemoryAlignedUnrollable(long, Word, UnsignedWord, UnsignedWord, boolean, AllocationSnippets$AllocationSnippetCounters):void (68 bytes)   inline method (bytecode parsing)
                                        @ 5  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                          @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                                        @ 44  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                                      @ 190  jdk.graal.compiler.replacements.AllocationSnippets.fillMemoryAligned(long, Word, UnsignedWord, UnsignedWord, boolean, UnsignedWord, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):void (155 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                                        @ 17  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getMinimalBulkZeroingSize():int (7 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                                        @ 36  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                                        @ 53  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                                        @ 105  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                          @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                            @ 4  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                                        @ 134  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                            @ 15  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                                @ 44  jdk.graal.compiler.replacements.AllocationSnippets.emitMemoryBarrierIf(boolean):void (14 bytes)   inline method (bytecode parsing)
                            @ 30  deltablue.Variable.getWalkStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 7  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                            @ 65  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 76  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                              @ 152  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                            @ 91  deltablue.Variable.getWalkStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                              @ 158  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.callNewArrayStub(Word, int):Object (35 bytes)   inline method (bytecode parsing)
                            @ 126  deltablue.Variable.getWalkStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                                @ 22  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.nonNullOrDeopt(Object):Object (27 bytes)   inline method (bytecode parsing)
                            @ 133  deltablue.Variable.getWalkStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 189  deltablue.Variable.getWalkStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                              @ 168  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.profileAllocation(AllocationSnippets$AllocationProfilingData, UnsignedWord):void (51 bytes)   inline method (bytecode parsing)
                              @ 174  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.verifyOop(Object):Object (5 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.verifyOop(Object):Object (19 bytes)   inline method (bytecode parsing)
                            @ 5  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 20  deltablue.Variable.getWalkStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                @ 23  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=0.225085, probability=0.111235, bonus=1.000000, nodes=13 <= 67.525366)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                @ 136  deltablue.Strength.weaker(Strength):boolean (17 bytes)   relevance-based (relevance=0.997156, probability=0.332691, bonus=1.000000, nodes=14 <= 299.146671)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                @ 192  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=0.997156, probability=0.332691, bonus=1.000000, nodes=13 <= 299.146671)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                @ 94  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.333640, bonus=1.000000, nodes=13 <= 300.000000)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                @ 33  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=0.666669, probability=0.222428, bonus=1.000000, nodes=13 <= 200.000556)
                              @ 2  deltablue.BinaryConstraint.chooseMethod(int):Direction (220 bytes)   relevance-based (relevance=1.798317, probability=1.000000, bonus=1.000000, nodes=138 <= 300.000000)
                              @ 7  deltablue.BinaryConstraint.isSatisfied():boolean (13 bytes)   relevance-based (relevance=2.997239, probability=1.000000, bonus=1.000000, nodes=14 <= 300.000000)
                            @ 49  java.lang.StringConcatHelper.newArray(long):byte[] (40 bytes)   inline method (bytecode parsing)
                            @ 123  java.lang.String.<init>(byte[], byte):void (15 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.StringLatin1.canEncode(int):boolean (13 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=8)
                              @ 41  java.lang.StringLatin1.canEncode(int):boolean (13 bytes)   trivial (relevance=0.995762, probability=0.995762, bonus=1.000000, nodes=8)
                                @ 51  jdk.internal.misc.Unsafe.allocateUninitializedArray0(Class, int):Object (90 bytes)   trivial (relevance=0.995762, probability=0.995762, bonus=1.000000, nodes=6)
                              @ 33  jdk.internal.misc.Unsafe.allocateUninitializedArray(Class, int):Object (55 bytes)   trivial (relevance=0.995762, probability=0.995762, bonus=1.000000, nodes=7)
                            @ 8  deltablue.AbstractConstraint.lambda$satisfy$1(int, Variable):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                                @ 48  deltablue.AbstractConstraint$$Lambda/0x00007f867403aa08.apply(Object):void (12 bytes)   not inlining relevance-based (relevance=0.000007, probability=0.000002, bonus=1.000000, nodes=13 > 0.002165)
                            @ 8  deltablue.AbstractConstraint.lambda$satisfy$1(int, Variable):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                                @ 58  deltablue.AbstractConstraint$$Lambda/0x00007f867403aa08.apply(Object):void (12 bytes)   not inlining relevance-based (relevance=0.000007, probability=0.000002, bonus=1.000000, nodes=13 > 0.002165)
                            @ 8  deltablue.AbstractConstraint.lambda$satisfy$1(int, Variable):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                                @ 68  deltablue.AbstractConstraint$$Lambda/0x00007f867403aa08.apply(Object):void (12 bytes)   not inlining relevance-based (relevance=0.000007, probability=0.000002, bonus=1.000000, nodes=13 > 0.002165)
                            @ 8  deltablue.AbstractConstraint.lambda$satisfy$1(int, Variable):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                                @ 15  deltablue.AbstractConstraint$$Lambda/0x00007f867403aa08.apply(Object):void (12 bytes)   relevance-based (relevance=0.428710, probability=0.111215, bonus=1.000000, nodes=13 <= 128.612904)
                            @ 8  deltablue.AbstractConstraint.lambda$satisfy$1(int, Variable):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                                @ 25  deltablue.AbstractConstraint$$Lambda/0x00007f867403aa08.apply(Object):void (12 bytes)   relevance-based (relevance=0.428710, probability=0.111215, bonus=1.000000, nodes=13 <= 128.612904)
                            @ 8  deltablue.AbstractConstraint.lambda$satisfy$1(int, Variable):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                                @ 35  deltablue.AbstractConstraint$$Lambda/0x00007f867403aa08.apply(Object):void (12 bytes)   relevance-based (relevance=0.428710, probability=0.111215, bonus=1.000000, nodes=13 <= 128.612904)
                            @ 8  deltablue.AbstractConstraint.lambda$satisfy$1(int, Variable):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                                @ 28  deltablue.AbstractConstraint$$Lambda/0x00007f867403aa08.apply(Object):void (12 bytes)   relevance-based (relevance=0.751600, probability=0.333639, bonus=1.000000, nodes=13 <= 225.480085)
                            @ 8  deltablue.AbstractConstraint.lambda$satisfy$1(int, Variable):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                                @ 15  deltablue.AbstractConstraint$$Lambda/0x00007f867403aa08.apply(Object):void (12 bytes)   relevance-based (relevance=1.000000, probability=0.443904, bonus=1.000000, nodes=13 <= 300.000000)
                              @ 20  deltablue.BinaryConstraint.inputsDo(ForEachInterface):void (34 bytes)   relevance-based (relevance=2.997217, probability=0.999993, bonus=1.000000, nodes=95 <= 300.000000)
                              @ 24  deltablue.BinaryConstraint.getOutput():Variable (22 bytes)   relevance-based (relevance=2.997217, probability=0.999993, bonus=1.000000, nodes=22 <= 300.000000)
                            @ 23  jdk.graal.compiler.replacements.AllocationSnippets.allocateArrayImpl(Word, int, int, int, AllocationSnippets$FillContent, int, boolean, boolean, boolean, boolean, AllocationSnippets$AllocationProfilingData):Object (178 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getTLABInfo():Word (5 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getThread():Word (8 bytes)   inline method (bytecode parsing)
                              @ 40  deltablue.BinaryConstraint.markUnsatisfied():void (6 bytes)   relevance-based (relevance=1.666691, probability=0.556075, bonus=1.000000, nodes=14 <= 300.000000)
                                  @ 4  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.registerAsWord(Register):Word (7 bytes)   inline method (bytecode parsing)
                              @ 9  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.readTlabTop(Word):Word (5 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.readTlabTop(Word):Word (17 bytes)   inline method (bytecode parsing)
                              @ 17  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.readTlabEnd(Word):Word (5 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.readTlabEnd(Word):Word (17 bytes)   inline method (bytecode parsing)
                            @ 26  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                              @ 36  jdk.graal.compiler.replacements.ReplacementsUtil.dynamicAssert(boolean, String):void (12 bytes)   inline method (bytecode parsing)
                              @ 44  jdk.graal.compiler.replacements.AllocationSnippets.arrayAllocationSize(int, int, int):UnsignedWord (18 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.objectAlignment():int (7 bytes)   inline method (bytecode parsing)
                                @ 11  jdk.graal.compiler.replacements.AllocationSnippets.arrayAllocationSize(int, int, int, int):long (32 bytes)   inline method (bytecode parsing)
                              @ 59  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.useTLAB():boolean (7 bytes)   inline method (bytecode parsing)
                              @ 52  deltablue.Planner.addPropagate(AbstractConstraint, int):boolean (60 bytes)   not inlining too large previous low-level graph (low-level-nodes: 1106, relevance=2.997217, probability=0.999993, bonus=1.000000, nodes=53)
                              @ 72  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.shouldAllocateInTLAB(UnsignedWord, boolean):boolean (33 bytes)   inline method (bytecode parsing)
                              @ 102  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.writeTlabTop(Word, Word):void (6 bytes)   inline method (bytecode parsing)
                                @ 2  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.writeTlabTop(Word, Word):void (15 bytes)   inline method (bytecode parsing)
                              @ 109  jdk.graal.compiler.replacements.AllocationSnippets.emitPrefetchAllocate(Word, boolean):void (61 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getPrefetchStyle():int (7 bytes)   inline method (bytecode parsing)
                                @ 9  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getPrefetchLines(boolean):int (18 bytes)   inline method (bytecode parsing)
                                @ 14  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getPrefetchStepSize():int (7 bytes)   inline method (bytecode parsing)
                                @ 20  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getPrefetchDistance():int (7 bytes)   inline method (bytecode parsing)
                              @ 136  jdk.graal.compiler.replacements.AllocationSnippets.formatArray(Word, UnsignedWord, int, Word, AllocationSnippets$FillContent, boolean, int, boolean, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):Object (53 bytes)   inline method (bytecode parsing)
                                @ 5  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.initializeObjectHeader(Word, Word, boolean):void (29 bytes)   inline method (bytecode parsing)
                                  @ 25  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.initializeObjectHeader(Word, Word, KlassPointer):void (20 bytes)   inline method (bytecode parsing)
                                @ 11  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.arrayLengthOffset():int (7 bytes)   inline method (bytecode parsing)
                                @ 15  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                                @ 38  jdk.graal.compiler.replacements.AllocationSnippets.fillContents(Word, AllocationSnippets$FillContent, int, UnsignedWord, boolean, boolean, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):void (58 bytes)   inline method (bytecode parsing)
                                  @ 22  jdk.graal.compiler.replacements.AllocationSnippets.zeroMemory(Word, int, UnsignedWord, boolean, boolean, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):void (19 bytes)   inline method (bytecode parsing)
                                    @ 15  jdk.graal.compiler.replacements.AllocationSnippets.fillMemory(long, Word, int, UnsignedWord, boolean, boolean, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):void (194 bytes)   inline method (bytecode parsing)
                                      @ 17  jdk.graal.compiler.replacements.ReplacementsUtil.dynamicAssert(boolean, String):void (12 bytes)   inline method (bytecode parsing)
                                      @ 56  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                                      @ 89  jdk.graal.compiler.replacements.ReplacementsUtil.dynamicAssert(boolean, String):void (12 bytes)   inline method (bytecode parsing)
                                      @ 153  jdk.graal.compiler.replacements.ReplacementsUtil.staticAssert(boolean, String):void (12 bytes)   inline method (bytecode parsing)
                                      @ 167  jdk.graal.compiler.replacements.AllocationSnippets.fillMemoryAlignedUnrollable(long, Word, UnsignedWord, UnsignedWord, boolean, AllocationSnippets$AllocationSnippetCounters):void (68 bytes)   inline method (bytecode parsing)
                                        @ 5  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                          @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                                        @ 44  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                                      @ 190  jdk.graal.compiler.replacements.AllocationSnippets.fillMemoryAligned(long, Word, UnsignedWord, UnsignedWord, boolean, UnsignedWord, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):void (155 bytes)   inline method (bytecode parsing)
                                        @ 17  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getMinimalBulkZeroingSize():int (7 bytes)   inline method (bytecode parsing)
                                        @ 36  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                          @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                                        @ 53  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                                        @ 105  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                          @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                                        @ 134  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                                @ 44  jdk.graal.compiler.replacements.AllocationSnippets.emitMemoryBarrierIf(boolean):void (14 bytes)   inline method (bytecode parsing)
                                  @ 7  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                              @ 152  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                              @ 158  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.callNewArrayStub(Word, int):Object (35 bytes)   inline method (bytecode parsing)
                                @ 22  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.nonNullOrDeopt(Object):Object (27 bytes)   inline method (bytecode parsing)
                              @ 168  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.profileAllocation(AllocationSnippets$AllocationProfilingData, UnsignedWord):void (51 bytes)   inline method (bytecode parsing)
                              @ 174  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.verifyOop(Object):Object (5 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.verifyOop(Object):Object (19 bytes)   inline method (bytecode parsing)
                            @ 18  jdk.graal.compiler.replacements.AllocationSnippets.allocateInstanceImpl(Word, UnsignedWord, boolean, AllocationSnippets$FillContent, boolean, boolean, AllocationSnippets$AllocationProfilingData):Object (143 bytes)   inline method (bytecode parsing)
                            @ 18  jdk.graal.compiler.replacements.AllocationSnippets.allocateInstanceImpl(Word, UnsignedWord, boolean, AllocationSnippets$FillContent, boolean, boolean, AllocationSnippets$AllocationProfilingData):Object (143 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getTLABInfo():Word (5 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getTLABInfo():Word (5 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getThread():Word (8 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getThread():Word (8 bytes)   inline method (bytecode parsing)
                                  @ 4  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.registerAsWord(Register):Word (7 bytes)   inline method (bytecode parsing)
                                  @ 4  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.registerAsWord(Register):Word (7 bytes)   inline method (bytecode parsing)
                              @ 9  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.readTlabTop(Word):Word (5 bytes)   inline method (bytecode parsing)
                              @ 9  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.readTlabTop(Word):Word (5 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.readTlabTop(Word):Word (17 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.readTlabTop(Word):Word (17 bytes)   inline method (bytecode parsing)
                              @ 17  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.readTlabEnd(Word):Word (5 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.readTlabEnd(Word):Word (17 bytes)   inline method (bytecode parsing)
                              @ 17  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.readTlabEnd(Word):Word (5 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.readTlabEnd(Word):Word (17 bytes)   inline method (bytecode parsing)
                              @ 35  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.useTLAB():boolean (7 bytes)   inline method (bytecode parsing)
                              @ 35  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.useTLAB():boolean (7 bytes)   inline method (bytecode parsing)
                              @ 47  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.shouldAllocateInTLAB(UnsignedWord, boolean):boolean (33 bytes)   inline method (bytecode parsing)
                              @ 47  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.shouldAllocateInTLAB(UnsignedWord, boolean):boolean (33 bytes)   inline method (bytecode parsing)
                              @ 77  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.writeTlabTop(Word, Word):void (6 bytes)   inline method (bytecode parsing)
                              @ 77  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.writeTlabTop(Word, Word):void (6 bytes)   inline method (bytecode parsing)
                                @ 2  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.writeTlabTop(Word, Word):void (15 bytes)   inline method (bytecode parsing)
                                @ 2  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.writeTlabTop(Word, Word):void (15 bytes)   inline method (bytecode parsing)
                              @ 84  jdk.graal.compiler.replacements.AllocationSnippets.emitPrefetchAllocate(Word, boolean):void (61 bytes)   inline method (bytecode parsing)
                              @ 84  jdk.graal.compiler.replacements.AllocationSnippets.emitPrefetchAllocate(Word, boolean):void (61 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getPrefetchStyle():int (7 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getPrefetchStyle():int (7 bytes)   inline method (bytecode parsing)
                                @ 9  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getPrefetchLines(boolean):int (18 bytes)   inline method (bytecode parsing)
                                @ 9  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getPrefetchLines(boolean):int (18 bytes)   inline method (bytecode parsing)
                                @ 14  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getPrefetchStepSize():int (7 bytes)   inline method (bytecode parsing)
                                @ 14  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getPrefetchStepSize():int (7 bytes)   inline method (bytecode parsing)
                                @ 20  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getPrefetchDistance():int (7 bytes)   inline method (bytecode parsing)
                                @ 20  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getPrefetchDistance():int (7 bytes)   inline method (bytecode parsing)
                              @ 103  jdk.graal.compiler.replacements.AllocationSnippets.formatObject(Word, UnsignedWord, Word, AllocationSnippets$FillContent, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):Object (41 bytes)   inline method (bytecode parsing)
                              @ 103  jdk.graal.compiler.replacements.AllocationSnippets.formatObject(Word, UnsignedWord, Word, AllocationSnippets$FillContent, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):Object (41 bytes)   inline method (bytecode parsing)
                                @ 4  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.initializeObjectHeader(Word, Word, boolean):void (29 bytes)   inline method (bytecode parsing)
                                @ 4  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.initializeObjectHeader(Word, Word, boolean):void (29 bytes)   inline method (bytecode parsing)
                                  @ 25  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.initializeObjectHeader(Word, Word, KlassPointer):void (20 bytes)   inline method (bytecode parsing)
                                  @ 25  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.initializeObjectHeader(Word, Word, KlassPointer):void (20 bytes)   inline method (bytecode parsing)
                                @ 8  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.instanceHeaderSize():int (7 bytes)   inline method (bytecode parsing)
                                @ 8  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.instanceHeaderSize():int (7 bytes)   inline method (bytecode parsing)
                                @ 27  jdk.graal.compiler.replacements.AllocationSnippets.fillContents(Word, AllocationSnippets$FillContent, int, UnsignedWord, boolean, boolean, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):void (58 bytes)   inline method (bytecode parsing)
                                @ 27  jdk.graal.compiler.replacements.AllocationSnippets.fillContents(Word, AllocationSnippets$FillContent, int, UnsignedWord, boolean, boolean, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):void (58 bytes)   inline method (bytecode parsing)
                                  @ 22  jdk.graal.compiler.replacements.AllocationSnippets.zeroMemory(Word, int, UnsignedWord, boolean, boolean, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):void (19 bytes)   inline method (bytecode parsing)
                                  @ 22  jdk.graal.compiler.replacements.AllocationSnippets.zeroMemory(Word, int, UnsignedWord, boolean, boolean, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):void (19 bytes)   inline method (bytecode parsing)
                                    @ 15  jdk.graal.compiler.replacements.AllocationSnippets.fillMemory(long, Word, int, UnsignedWord, boolean, boolean, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):void (194 bytes)   inline method (bytecode parsing)
                                    @ 15  jdk.graal.compiler.replacements.AllocationSnippets.fillMemory(long, Word, int, UnsignedWord, boolean, boolean, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):void (194 bytes)   inline method (bytecode parsing)
                                      @ 17  jdk.graal.compiler.replacements.ReplacementsUtil.dynamicAssert(boolean, String):void (12 bytes)   inline method (bytecode parsing)
                                      @ 17  jdk.graal.compiler.replacements.ReplacementsUtil.dynamicAssert(boolean, String):void (12 bytes)   inline method (bytecode parsing)
                                      @ 56  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                                      @ 56  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                                      @ 89  jdk.graal.compiler.replacements.ReplacementsUtil.dynamicAssert(boolean, String):void (12 bytes)   inline method (bytecode parsing)
                                      @ 89  jdk.graal.compiler.replacements.ReplacementsUtil.dynamicAssert(boolean, String):void (12 bytes)   inline method (bytecode parsing)
                                      @ 153  jdk.graal.compiler.replacements.ReplacementsUtil.staticAssert(boolean, String):void (12 bytes)   inline method (bytecode parsing)
                                      @ 153  jdk.graal.compiler.replacements.ReplacementsUtil.staticAssert(boolean, String):void (12 bytes)   inline method (bytecode parsing)
                                      @ 167  jdk.graal.compiler.replacements.AllocationSnippets.fillMemoryAlignedUnrollable(long, Word, UnsignedWord, UnsignedWord, boolean, AllocationSnippets$AllocationSnippetCounters):void (68 bytes)   inline method (bytecode parsing)
                                      @ 167  jdk.graal.compiler.replacements.AllocationSnippets.fillMemoryAlignedUnrollable(long, Word, UnsignedWord, UnsignedWord, boolean, AllocationSnippets$AllocationSnippetCounters):void (68 bytes)   inline method (bytecode parsing)
                                        @ 5  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                        @ 5  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                          @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                                          @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                                        @ 44  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                                        @ 44  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                                      @ 190  jdk.graal.compiler.replacements.AllocationSnippets.fillMemoryAligned(long, Word, UnsignedWord, UnsignedWord, boolean, UnsignedWord, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):void (155 bytes)   inline method (bytecode parsing)
                                      @ 190  jdk.graal.compiler.replacements.AllocationSnippets.fillMemoryAligned(long, Word, UnsignedWord, UnsignedWord, boolean, UnsignedWord, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):void (155 bytes)   inline method (bytecode parsing)
                                        @ 91  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                        @ 91  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                          @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                                          @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                                        @ 105  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                        @ 105  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                          @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                                          @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                                        @ 134  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                                        @ 134  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                                @ 33  jdk.graal.compiler.replacements.AllocationSnippets.emitMemoryBarrierIf(boolean):void (14 bytes)   inline method (bytecode parsing)
                                @ 33  jdk.graal.compiler.replacements.AllocationSnippets.emitMemoryBarrierIf(boolean):void (14 bytes)   inline method (bytecode parsing)
                              @ 119  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                              @ 119  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                              @ 124  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.callNewInstanceStub(Word):Object (33 bytes)   inline method (bytecode parsing)
                              @ 124  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.callNewInstanceStub(Word):Object (33 bytes)   inline method (bytecode parsing)
                                @ 21  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.nonNullOrDeopt(Object):Object (27 bytes)   inline method (bytecode parsing)
                              @ 133  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.profileAllocation(AllocationSnippets$AllocationProfilingData, UnsignedWord):void (51 bytes)   inline method (bytecode parsing)
                              @ 139  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.verifyOop(Object):Object (5 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.verifyOop(Object):Object (19 bytes)   inline method (bytecode parsing)
                                @ 21  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.nonNullOrDeopt(Object):Object (27 bytes)   inline method (bytecode parsing)
                              @ 133  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.profileAllocation(AllocationSnippets$AllocationProfilingData, UnsignedWord):void (51 bytes)   inline method (bytecode parsing)
                              @ 139  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.verifyOop(Object):Object (5 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.verifyOop(Object):Object (19 bytes)   inline method (bytecode parsing)
                            @ 26  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                  @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000124, probability=0.000124, bonus=1.000000, nodes=41 > 0.037287)
                                @ 11  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=35 <= 300.000000)
                              @ 1  som.Vector.with(Object):Vector (16 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=40 <= 300.000000)
                              @ 6  som.Vector.isEmpty():boolean (17 bytes)   relevance-based (relevance=1.811250, probability=2.232665, bonus=1.000000, nodes=10 <= 300.000000)
                                @ 1  som.Vector.isEmpty():boolean (17 bytes)   relevance-based (relevance=1.000000, probability=1.232665, bonus=1.000000, nodes=10 <= 300.000000)
                              @ 13  som.Vector.removeFirst():Object (31 bytes)   relevance-based (relevance=1.000000, probability=1.232665, bonus=1.000000, nodes=18 <= 300.000000)
                              @ 23  deltablue.BinaryConstraint.getOutput():Variable (22 bytes)   relevance-based (relevance=1.000000, probability=1.232665, bonus=1.000000, nodes=22 <= 300.000000)
                            @ 39  deltablue.Variable.getWalkStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 45  deltablue.Variable.setWalkStrength(Strength):void (6 bytes)   inline method (bytecode parsing)
                            @ 50  deltablue.Variable.getStay():boolean (5 bytes)   inline accessor method (bytecode parsing)
                            @ 53  deltablue.Variable.setStay(boolean):void (6 bytes)   inline method (bytecode parsing)
                            @ 57  deltablue.Variable.getStay():boolean (5 bytes)   inline accessor method (bytecode parsing)
                            @ 39  deltablue.Variable.getWalkStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 45  deltablue.Variable.setWalkStrength(Strength):void (6 bytes)   inline method (bytecode parsing)
                            @ 50  deltablue.Variable.getStay():boolean (5 bytes)   inline accessor method (bytecode parsing)
                            @ 60  deltablue.Variable.getStay():boolean (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 70  deltablue.Variable.getStay():boolean (5 bytes)   inline accessor method (bytecode parsing)
                            @ 81  deltablue.Variable.setStay(boolean):void (6 bytes)   inline method (bytecode parsing)
                            @ 85  deltablue.Variable.getStay():boolean (5 bytes)   inline accessor method (bytecode parsing)
                            @ 8  deltablue.Variable.setWalkStrength(Strength):void (6 bytes)   inline method (bytecode parsing)
                            @ 27  deltablue.Variable.setStay(boolean):void (6 bytes)   inline method (bytecode parsing)
                            @ 34  deltablue.Variable.getStay():boolean (5 bytes)   inline accessor method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint.isInput():boolean (2 bytes)   trivial (relevance=0.307904, probability=0.152072, bonus=1.000000, nodes=8)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                @ 41  deltablue.StayConstraint.execute():void (1 bytes)   trivial (relevance=0.307888, probability=0.152064, bonus=1.000000, nodes=3)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 2  deltablue.Strength.weaker(Strength):boolean (17 bytes)   relevance-based (relevance=0.778117, probability=0.384326, bonus=1.000000, nodes=11 <= 233.435142)
                                @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000124, probability=0.000124, bonus=1.000000, nodes=41 > 0.037287)
                                @ 42  deltablue.Strength.weakest(Strength):Strength (14 bytes)   relevance-based (relevance=0.778117, probability=0.384326, bonus=1.000000, nodes=12 <= 233.435142)
                              @ 5  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=35 <= 300.000000)
                            @ 18  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 25  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 33  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 37  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 51  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 58  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 66  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 70  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                                @ 92  deltablue.ScaleConstraint.execute():void (74 bytes)   relevance-based (relevance=0.497608, probability=0.245778, bonus=1.000000, nodes=62 <= 149.282390)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 2  deltablue.Strength.weaker(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.696267, bonus=1.000000, nodes=11 <= 300.000000)
                                @ 42  deltablue.Strength.weakest(Strength):Strength (14 bytes)   relevance-based (relevance=1.600631, probability=0.696267, bonus=1.000000, nodes=12 <= 300.000000)
                            @ 18  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 21  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 35  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 38  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                                @ 64  deltablue.EqualityConstraint.execute():void (42 bytes)   relevance-based (relevance=1.200210, probability=0.522086, bonus=1.000000, nodes=38 <= 300.000000)
                              @ 42  deltablue.BinaryConstraint.recalculate():void (68 bytes)   relevance-based (relevance=1.409672, probability=1.232665, bonus=1.000000, nodes=271 <= 300.000000)
                              @ 48  deltablue.BinaryConstraint.getOutput():Variable (22 bytes)   relevance-based (relevance=1.409672, probability=1.232665, bonus=1.000000, nodes=22 <= 300.000000)
                            @ 1  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 6  deltablue.Variable.getConstraints():Vector (5 bytes)   inline accessor method (bytecode parsing)
                            @ 11  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object, Object):Object (10 bytes)   inline method (bytecode parsing)
                              @ 6  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object, Object):Object (24 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 19  deltablue.Planner$$Lambda/0x00007f867403ac20.<init>(AbstractConstraint, Vector):void (15 bytes)   relevance-based (relevance=1.000000, probability=1.232665, bonus=1.000000, nodes=11 <= 300.000000)
                                  @ 20  deltablue.Planner$$Lambda/0x00007f867403ac20.apply(Object):void (16 bytes)   not inlining too large previous low-level graph (low-level-nodes: 351, relevance=1.000000, probability=12.559641, bonus=1.000000, nodes=16)
                                @ 16  som.Vector.forEach(ForEachInterface):void (32 bytes)   not inlining callee invoke probability is too high (invokeP=10.189013, relevance=1.000000, probability=1.232665, bonus=1.000000, nodes=24)
                              @ 52  deltablue.Planner.addConstraintsConsumingTo(Variable, Vector):void (20 bytes)   relevance-based (relevance=1.409672, probability=1.232665, bonus=1.000000, nodes=23 <= 300.000000)
                            @ 4  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 15  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 30  deltablue.Variable.getWalkStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 65  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 76  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 91  deltablue.Variable.getWalkStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 126  deltablue.Variable.getWalkStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 133  deltablue.Variable.getWalkStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 189  deltablue.Variable.getWalkStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                              @ 136  deltablue.Strength.weaker(Strength):boolean (17 bytes)   relevance-based (relevance=0.859776, probability=0.364346, bonus=1.000000, nodes=14 <= 257.932675)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                              @ 192  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=0.859776, probability=0.364346, bonus=1.000000, nodes=13 <= 257.932675)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                              @ 94  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.423769, bonus=1.000000, nodes=13 <= 300.000000)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                              @ 33  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=0.500002, probability=0.211885, bonus=1.000000, nodes=13 <= 150.000625)
                              @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                            @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=14 <= 300.000000)
                                @ 1  deltablue.BinaryConstraint.isSatisfied():boolean (13 bytes)   relevance-based (relevance=1.000013, probability=1.000000, bonus=1.000000, nodes=14 <= 300.000000)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                @ 9  som.Vector.append(Object):void (51 bytes)   not inlining relevance-based (relevance=0.000013, probability=0.000013, bonus=1.000000, nodes=35 > 0.003752)
                              @ 8  deltablue.Planner.lambda$removePropagateFrom$4(Vector, AbstractConstraint):void (13 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=36 <= 300.000000)
                                @ 6  deltablue.BinaryConstraint.isSatisfied():boolean (13 bytes)   relevance-based (relevance=1.000025, probability=0.500005, bonus=1.000000, nodes=14 <= 300.000000)
                            @ 39  deltablue.Variable.getWalkStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 45  deltablue.Variable.setWalkStrength(Strength):void (6 bytes)   inline method (bytecode parsing)
                            @ 50  deltablue.Variable.getStay():boolean (5 bytes)   inline accessor method (bytecode parsing)
                            @ 60  deltablue.Variable.getStay():boolean (5 bytes)   inline accessor method (bytecode parsing)
                            @ 70  deltablue.Variable.getStay():boolean (5 bytes)   inline accessor method (bytecode parsing)
                            @ 81  deltablue.Variable.setStay(boolean):void (6 bytes)   inline method (bytecode parsing)
                            @ 85  deltablue.Variable.getStay():boolean (5 bytes)   inline accessor method (bytecode parsing)
                            @ 39  deltablue.Variable.getWalkStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 45  deltablue.Variable.setWalkStrength(Strength):void (6 bytes)   inline method (bytecode parsing)
                            @ 50  deltablue.Variable.getStay():boolean (5 bytes)   inline accessor method (bytecode parsing)
                            @ 53  deltablue.Variable.setStay(boolean):void (6 bytes)   inline method (bytecode parsing)
                            @ 57  deltablue.Variable.getStay():boolean (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                        @ 2  deltablue.Strength.weaker(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.204633, bonus=1.000000, nodes=11 <= 300.000000)
                                      @ 42  deltablue.Strength.weakest(Strength):Strength (14 bytes)   relevance-based (relevance=1.108963, probability=0.204633, bonus=1.000000, nodes=12 <= 300.000000)
                            @ 18  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 21  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 35  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 38  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                                      @ 64  deltablue.EqualityConstraint.execute():void (42 bytes)   relevance-based (relevance=0.831540, probability=0.153441, bonus=1.000000, nodes=38 <= 249.462078)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                        @ 2  deltablue.Strength.weaker(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.295359, bonus=1.000000, nodes=11 <= 300.000000)
                                      @ 42  deltablue.Strength.weakest(Strength):Strength (14 bytes)   relevance-based (relevance=1.000008, probability=0.295359, bonus=1.000000, nodes=12 <= 300.000000)
                            @ 18  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 25  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 33  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 37  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 51  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 58  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 66  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 70  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                                      @ 92  deltablue.ScaleConstraint.execute():void (74 bytes)   relevance-based (relevance=0.624518, probability=0.184456, bonus=1.000000, nodes=62 <= 187.355439)
                                    @ 1  deltablue.ScaleConstraint.recalculate():void (96 bytes)   relevance-based (relevance=1.000000, probability=0.499993, bonus=1.000000, nodes=223 <= 300.000000)
                                    @ 6  deltablue.BinaryConstraint.getOutput():Variable (22 bytes)   relevance-based (relevance=1.692843, probability=0.499993, bonus=1.000000, nodes=17 <= 300.000000)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                      @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000124, probability=0.000062, bonus=1.000000, nodes=41 > 0.037287)
                                    @ 9  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.692843, probability=0.499993, bonus=1.000000, nodes=35 <= 300.000000)
                                  @ 8  deltablue.Planner.lambda$removePropagateFrom$5(Vector, AbstractConstraint):void (13 bytes)   relevance-based (relevance=1.000000, probability=0.499993, bonus=1.000000, nodes=274 <= 300.000000)
                                @ 14  deltablue.Planner$$Lambda/0x00007f86741954d8.apply(Object):void (12 bytes)   relevance-based (relevance=1.000000, probability=0.499993, bonus=1.000000, nodes=275 <= 300.000000)
                              @ 12  deltablue.Planner.lambda$constraintsConsuming$3(AbstractConstraint, ForEachInterface, AbstractConstraint):void (20 bytes)   not inlining relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=315 > 300.000000)
                            @ 39  deltablue.Variable.getWalkStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 45  deltablue.Variable.setWalkStrength(Strength):void (6 bytes)   inline method (bytecode parsing)
                            @ 50  deltablue.Variable.getStay():boolean (5 bytes)   inline accessor method (bytecode parsing)
                            @ 60  deltablue.Variable.getStay():boolean (5 bytes)   inline accessor method (bytecode parsing)
                            @ 70  deltablue.Variable.getStay():boolean (5 bytes)   inline accessor method (bytecode parsing)
                            @ 81  deltablue.Variable.setStay(boolean):void (6 bytes)   inline method (bytecode parsing)
                            @ 85  deltablue.Variable.getStay():boolean (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                @ 2  deltablue.Strength.weaker(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                              @ 42  deltablue.Strength.weakest(Strength):Strength (14 bytes)   relevance-based (relevance=1.000008, probability=1.000000, bonus=1.000000, nodes=12 <= 300.000000)
                            @ 18  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 39  deltablue.Variable.getWalkStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 25  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 45  deltablue.Variable.setWalkStrength(Strength):void (6 bytes)   inline method (bytecode parsing)
                            @ 50  deltablue.Variable.getStay():boolean (5 bytes)   inline accessor method (bytecode parsing)
                            @ 33  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 53  deltablue.Variable.setStay(boolean):void (6 bytes)   inline method (bytecode parsing)
                            @ 37  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 57  deltablue.Variable.getStay():boolean (5 bytes)   inline accessor method (bytecode parsing)
                            @ 51  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 58  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 66  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 70  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                              @ 92  deltablue.ScaleConstraint.execute():void (74 bytes)   relevance-based (relevance=0.590095, probability=0.590090, bonus=1.000000, nodes=62 <= 177.028466)
                                @ 2  deltablue.Strength.weaker(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                              @ 42  deltablue.Strength.weakest(Strength):Strength (14 bytes)   relevance-based (relevance=1.600631, probability=1.000000, bonus=1.000000, nodes=12 <= 300.000000)
                            @ 18  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 21  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 35  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 38  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                              @ 64  deltablue.EqualityConstraint.execute():void (42 bytes)   relevance-based (relevance=1.200210, probability=0.749836, bonus=1.000000, nodes=38 <= 300.000000)
                            @ 8  deltablue.AbstractConstraint.lambda$satisfy$1(int, Variable):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                              @ 28  deltablue.AbstractConstraint$$Lambda/0x00007f867403aa08.apply(Object):void (12 bytes)   relevance-based (relevance=1.000000, probability=0.500533, bonus=1.000000, nodes=13 <= 300.000000)
                            @ 8  deltablue.AbstractConstraint.lambda$satisfy$1(int, Variable):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                              @ 15  deltablue.AbstractConstraint$$Lambda/0x00007f867403aa08.apply(Object):void (12 bytes)   relevance-based (relevance=0.997871, probability=0.499467, bonus=1.000000, nodes=13 <= 299.361250)
                            @ 49  jdk.graal.compiler.graph.Node.valueEquals(Node):boolean (10 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.graph.Node.getNodeClass():NodeClass (5 bytes)   inline accessor method (bytecode parsing)
                            @ 59  jdk.graal.compiler.core.common.Fields.getCount():int (6 bytes)   inline method (bytecode parsing)
                            @ 4  jdk.graal.compiler.graph.Node.getNodeClass():NodeClass (5 bytes)   inline accessor method (bytecode parsing)
                            @ 70  jdk.graal.compiler.core.common.Fields.getType(int):Class (7 bytes)   inline method (bytecode parsing)
                              @ 40  jdk.graal.compiler.graph.Graph$1.hashCode(Object):int (15 bytes)   not inlining relevance-based (relevance=0.035276, probability=0.029908, bonus=1.000000, nodes=14 > 10.582706)
                 n            @ 48  java.lang.Object.hashCode():int (0 bytes)   trivial (relevance=1.144188, probability=0.970092, bonus=1.000000, nodes=5)
                              @ 61  org.graalvm.collections.EconomicMapImpl.getHashTableSize():int (43 bytes)   relevance-based (relevance=1.179464, probability=1.000000, bonus=1.000000, nodes=21 <= 300.000000)
                                  @ 6  jdk.graal.compiler.graph.NodeClass.dataEquals(Node, Node):boolean (546 bytes)   not inlining relevance-based (relevance=0.087902, probability=0.038236, bonus=1.000000, nodes=248 > 26.370511)
                            @ 22  jdk.graal.compiler.hotspot.replacements.HotSpotHashCodeSnippets.computeIdentityHashCode(Object):int (127 bytes)   inline method (bytecode parsing)
                                @ 46  jdk.graal.compiler.graph.Graph$1.equals(Object, Object):boolean (53 bytes)   relevance-based (relevance=0.087902, probability=0.076471, bonus=1.000000, nodes=25 <= 26.370511)
                              @ 7  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.loadWordFromObject(Object, int):Word (34 bytes)   inline method (bytecode parsing)
                                @ 18  jdk.graal.compiler.replacements.ReplacementsUtil.staticAssert(boolean, String):void (12 bytes)   inline method (bytecode parsing)
                                @ 24  org.graalvm.word.LocationIdentity.any():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                              @ 36  java.lang.Object.equals(Object):boolean (11 bytes)   not inlining no methods remaining after filtering less frequent methods (7 methods previously)
                              @ 26  org.graalvm.collections.EconomicMapImpl.compareKeys(Object, Object):boolean (52 bytes)   relevance-based (relevance=1.184579, probability=1.912277, bonus=1.000000, nodes=66 <= 300.000000)
                            @ 5  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.clearPendingException(Word):Object (30 bytes)   inline method (bytecode parsing)
                            @ 16  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.getPendingException(Word):Object (14 bytes)   inline method (bytecode parsing)
                            @ 27  jdk.graal.compiler.hotspot.stubs.ForeignCallSnippets.getAndClearObjectResult(Word):Object (30 bytes)   inline method (bytecode parsing)
                              @ 1  org.graalvm.collections.EconomicMapImpl.hasHashArray():boolean (13 bytes)   trivial (relevance=1.256798, probability=1.000000, bonus=1.000000, nodes=9)
                            @ 19  org.graalvm.collections.EconomicMapImpl.getKey(int):Object (9 bytes)   inline method (bytecode parsing)
                            @ 4  jdk.graal.compiler.graph.Node.getNodeClass():NodeClass (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 40  jdk.graal.compiler.graph.Graph$1.hashCode(Object):int (15 bytes)   not inlining relevance-based (relevance=0.035789, probability=0.024167, bonus=1.000000, nodes=14 > 10.736669)
                 n                @ 48  java.lang.Object.hashCode():int (0 bytes)   trivial (relevance=1.142530, probability=0.771506, bonus=1.000000, nodes=5)
                                  @ 61  org.graalvm.collections.EconomicMapImpl.getHashTableSize():int (43 bytes)   relevance-based (relevance=1.178319, probability=0.795673, bonus=1.000000, nodes=21 <= 300.000000)
                              @ 6  deltablue.BinaryConstraint.isSatisfied():boolean (13 bytes)   relevance-based (relevance=1.000017, probability=0.532270, bonus=1.000000, nodes=14 <= 300.000000)
                                @ 3  org.graalvm.collections.EconomicMapImpl.getHashIndex(Object):int (68 bytes)   relevance-based (relevance=1.455675, probability=0.795673, bonus=1.000000, nodes=76 <= 300.000000)
                                @ 6  org.graalvm.collections.EconomicMapImpl.getHashArray(int):int (126 bytes)   relevance-based (relevance=1.178319, probability=0.795673, bonus=1.000000, nodes=31 <= 300.000000)
                            @ 39  deltablue.Variable.getWalkStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 45  deltablue.Variable.setWalkStrength(Strength):void (6 bytes)   inline method (bytecode parsing)
                            @ 50  deltablue.Variable.getStay():boolean (5 bytes)   inline accessor method (bytecode parsing)
                            @ 60  deltablue.Variable.getStay():boolean (5 bytes)   inline accessor method (bytecode parsing)
                            @ 70  deltablue.Variable.getStay():boolean (5 bytes)   inline accessor method (bytecode parsing)
                            @ 81  deltablue.Variable.setStay(boolean):void (6 bytes)   inline method (bytecode parsing)
                            @ 85  deltablue.Variable.getStay():boolean (5 bytes)   inline accessor method (bytecode parsing)
                            @ 39  deltablue.Variable.getWalkStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 49  jdk.graal.compiler.graph.Node.valueEquals(Node):boolean (10 bytes)   inline method (bytecode parsing)
                            @ 45  deltablue.Variable.setWalkStrength(Strength):void (6 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.graph.Node.getNodeClass():NodeClass (5 bytes)   inline accessor method (bytecode parsing)
                            @ 50  deltablue.Variable.getStay():boolean (5 bytes)   inline accessor method (bytecode parsing)
                            @ 53  deltablue.Variable.setStay(boolean):void (6 bytes)   inline method (bytecode parsing)
                            @ 57  deltablue.Variable.getStay():boolean (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 46  jdk.graal.compiler.graph.Graph$1.equals(Object, Object):boolean (53 bytes)   not inlining relevance-based (relevance=0.032492, probability=0.010000, bonus=1.000000, nodes=25 > 9.747687)
                                @ 36  java.lang.Object.equals(Object):boolean (11 bytes)   not inlining no methods remaining after filtering less frequent methods (7 methods previously)
                                  @ 1  deltablue.ScaleConstraint.recalculate():void (96 bytes)   not inlining too large previous low-level graph (low-level-nodes: 365, relevance=1.000000, probability=0.532261, bonus=1.000000, nodes=124)
                                @ 26  org.graalvm.collections.EconomicMapImpl.compareKeys(Object, Object):boolean (52 bytes)   relevance-based (relevance=0.368853, probability=0.249072, bonus=1.000000, nodes=40 <= 110.655896)
                                  @ 6  deltablue.BinaryConstraint.getOutput():Variable (22 bytes)   relevance-based (relevance=1.000000, probability=0.532261, bonus=1.000000, nodes=17 <= 300.000000)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                @ 36  org.graalvm.collections.EconomicMapImpl.getRawValue(int):Object (11 bytes)   relevance-based (relevance=0.076915, probability=0.051938, bonus=1.000000, nodes=10 <= 23.074467)
                            @ 15  org.graalvm.collections.EconomicMapImpl.getKey(int):Object (9 bytes)   inline method (bytecode parsing)
                                    @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000124, probability=0.000066, bonus=1.000000, nodes=41 > 0.037287)
                                  @ 9  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.236389, probability=0.532261, bonus=1.000000, nodes=35 <= 300.000000)
                                @ 8  deltablue.Planner.lambda$removePropagateFrom$5(Vector, AbstractConstraint):void (13 bytes)   relevance-based (relevance=1.000000, probability=0.532261, bonus=1.000000, nodes=62 <= 300.000000)
                                @ 56  org.graalvm.collections.EconomicMapImpl.findWithCollision(Object, EconomicMapImpl$CollisionLink):int (65 bytes)   not inlining relevance-based (relevance=0.017861, probability=0.012061, bonus=1.000000, nodes=42 > 5.358206)
                              @ 9  org.graalvm.collections.EconomicMapImpl.findHash(Object):int (62 bytes)   relevance-based (relevance=1.000000, probability=0.795673, bonus=1.000000, nodes=163 <= 300.000000)
                              @ 14  deltablue.Planner$$Lambda/0x00007f86741954d8.apply(Object):void (12 bytes)   relevance-based (relevance=1.000000, probability=0.532261, bonus=1.000000, nodes=67 <= 300.000000)
                            @ 49  jdk.graal.compiler.graph.Node.valueEquals(Node):boolean (10 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.graph.Node.getNodeClass():NodeClass (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 46  jdk.graal.compiler.graph.Graph$1.equals(Object, Object):boolean (53 bytes)   not inlining relevance-based (relevance=0.031634, probability=0.015680, bonus=1.000000, nodes=25 > 9.490179)
                                @ 36  java.lang.Object.equals(Object):boolean (11 bytes)   not inlining no methods remaining after filtering less frequent methods (7 methods previously)
                                @ 26  org.graalvm.collections.EconomicMapImpl.compareKeys(Object, Object):boolean (52 bytes)   relevance-based (relevance=0.359109, probability=0.390574, bonus=1.000000, nodes=40 <= 107.732664)
                              @ 15  org.graalvm.collections.EconomicMapImpl.findLinear(Object):int (42 bytes)   relevance-based (relevance=0.302590, probability=0.204327, bonus=1.000000, nodes=66 <= 90.777121)
                            @ 15  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 27  deltablue.Strength.absoluteWeakest():Strength (4 bytes)   inline method (bytecode parsing)
                                @ 7  deltablue.Strength$Sym.customHash():int (5 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                              @ 1  som.Dictionary.hash(Dictionary$CustomHash):int (20 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=13 <= 300.000000)
                            @ 6  som.Dictionary.getBucketIdx(int):int (10 bytes)   inline method (bytecode parsing)
                              @ 7  som.Dictionary.getBucket(int):Dictionary$Entry (11 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                              @ 18  som.IdentityDictionary$IdEntry.match(int, Object):boolean (22 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=13 <= 300.000000)
                            @ 5  deltablue.Variable.addConstraint(AbstractConstraint):void (9 bytes)   inline method (bytecode parsing)
                            @ 5  deltablue.Variable.addConstraint(AbstractConstraint):void (9 bytes)   inline method (bytecode parsing)
                            @ 13  deltablue.Variable.addConstraint(AbstractConstraint):void (9 bytes)   inline method (bytecode parsing)
                            @ 5  deltablue.Variable.addConstraint(AbstractConstraint):void (9 bytes)   inline method (bytecode parsing)
                            @ 13  deltablue.Variable.addConstraint(AbstractConstraint):void (9 bytes)   inline method (bytecode parsing)
                            @ 21  deltablue.Variable.addConstraint(AbstractConstraint):void (9 bytes)   inline method (bytecode parsing)
                            @ 29  deltablue.Variable.addConstraint(AbstractConstraint):void (9 bytes)   inline method (bytecode parsing)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                @ 5  som.Vector.append(Object):void (51 bytes)   not inlining relevance-based (relevance=0.000276, probability=0.000111, bonus=1.000000, nodes=35 > 0.082783)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                @ 5  som.Vector.append(Object):void (51 bytes)   not inlining relevance-based (relevance=0.000276, probability=0.000111, bonus=1.000000, nodes=35 > 0.082783)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                @ 5  som.Vector.append(Object):void (51 bytes)   not inlining relevance-based (relevance=0.000276, probability=0.000111, bonus=1.000000, nodes=35 > 0.082783)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                @ 5  som.Vector.append(Object):void (51 bytes)   not inlining relevance-based (relevance=0.000276, probability=0.000111, bonus=1.000000, nodes=35 > 0.082783)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                            @ 19  org.graalvm.collections.EconomicMapImpl.getKey(int):Object (9 bytes)   inline method (bytecode parsing)
                                  @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000062, probability=0.000025, bonus=1.000000, nodes=41 > 0.018548)
                                @ 5  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=0.497441, probability=0.199256, bonus=1.000000, nodes=35 <= 149.232377)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                            @ 4  jdk.graal.compiler.graph.Node.getNodeClass():NodeClass (5 bytes)   inline accessor method (bytecode parsing)
                                @ 40  jdk.graal.compiler.graph.Graph$1.hashCode(Object):int (15 bytes)   not inlining relevance-based (relevance=0.035789, probability=0.030373, bonus=1.000000, nodes=14 > 10.736669)
                 n              @ 48  java.lang.Object.hashCode():int (0 bytes)   trivial (relevance=1.142530, probability=0.969627, bonus=1.000000, nodes=5)
                                  @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000062, probability=0.000025, bonus=1.000000, nodes=41 > 0.018550)
                                @ 5  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=0.497503, probability=0.199256, bonus=1.000000, nodes=35 <= 149.250925)
                                @ 61  org.graalvm.collections.EconomicMapImpl.getHashTableSize():int (43 bytes)   relevance-based (relevance=1.178319, probability=1.000000, bonus=1.000000, nodes=21 <= 300.000000)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                              @ 3  org.graalvm.collections.EconomicMapImpl.getHashIndex(Object):int (68 bytes)   relevance-based (relevance=1.452485, probability=1.000000, bonus=1.000000, nodes=76 <= 300.000000)
                                  @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000124, probability=0.000050, bonus=1.000000, nodes=41 > 0.037287)
                                @ 5  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=0.400563, bonus=1.000000, nodes=35 <= 300.000000)
                              @ 1  deltablue.UnaryConstraint.addToGraph():void (14 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=176 <= 300.000000)
                              @ 6  org.graalvm.collections.EconomicMapImpl.getHashArray(int):int (126 bytes)   relevance-based (relevance=1.178319, probability=1.000000, bonus=1.000000, nodes=31 <= 300.000000)
                            @ 49  jdk.graal.compiler.graph.Node.valueEquals(Node):boolean (10 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.graph.Node.getNodeClass():NodeClass (5 bytes)   inline accessor method (bytecode parsing)
                                @ 46  jdk.graal.compiler.graph.Graph$1.equals(Object, Object):boolean (53 bytes)   not inlining relevance-based (relevance=0.033228, probability=0.012515, bonus=1.000000, nodes=25 > 9.968352)
                              @ 36  java.lang.Object.equals(Object):boolean (11 bytes)   not inlining no methods remaining after filtering less frequent methods (7 methods previously)
                                @ 1  deltablue.Planner.newMark():int (15 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=10 <= 300.000000)
                              @ 26  org.graalvm.collections.EconomicMapImpl.compareKeys(Object, Object):boolean (52 bytes)   relevance-based (relevance=0.367076, probability=0.311525, bonus=1.000000, nodes=40 <= 110.122725)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                              @ 36  org.graalvm.collections.EconomicMapImpl.getRawValue(int):Object (11 bytes)   relevance-based (relevance=0.075773, probability=0.064306, bonus=1.000000, nodes=10 <= 22.731873)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                            @ 15  org.graalvm.collections.EconomicMapImpl.getKey(int):Object (9 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f867403aa08.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                              @ 56  org.graalvm.collections.EconomicMapImpl.findWithCollision(Object, EconomicMapImpl$CollisionLink):int (65 bytes)   not inlining relevance-based (relevance=0.017135, probability=0.014542, bonus=1.000000, nodes=42 > 5.140502)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                @ 8  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 690, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=72)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f867403aa08.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                @ 19  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 690, relevance=1.000000, probability=1.002830, bonus=1.000000, nodes=72)
                              @ 6  deltablue.Planner.incrementalAdd(AbstractConstraint):void (27 bytes)   relevance-based (relevance=1.497903, probability=1.000000, bonus=1.000000, nodes=28 <= 300.000000)
                            @ 2  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f8674194690.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 9  deltablue.Variable.getStay():boolean (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 8  deltablue.AbstractConstraint.lambda$inputsKnown$0(int, Variable):boolean (28 bytes)   not inlining relevance-based (relevance=0.000005, probability=0.000005, bonus=1.000000, nodes=21 > 0.001434)
                                @ 26  deltablue.AbstractConstraint$$Lambda/0x00007f8674194690.test(Object):boolean (12 bytes)   trivial (relevance=0.000005, probability=0.000005, bonus=1.000000, nodes=9)
                            @ 1  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 9  deltablue.Variable.getStay():boolean (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 8  deltablue.AbstractConstraint.lambda$inputsKnown$0(int, Variable):boolean (28 bytes)   relevance-based (relevance=1.000000, probability=0.999971, bonus=1.000000, nodes=21 <= 300.000000)
                                @ 15  deltablue.AbstractConstraint$$Lambda/0x00007f8674194690.test(Object):boolean (12 bytes)   relevance-based (relevance=1.000000, probability=0.999971, bonus=1.000000, nodes=23 <= 300.000000)
                              @ 7  deltablue.BinaryConstraint.inputsHasOne(TestInterface):boolean (32 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=42 <= 300.000000)
                            @ 1  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 9  deltablue.Variable.getStay():boolean (5 bytes)   inline accessor method (bytecode parsing)
                                @ 8  deltablue.AbstractConstraint.lambda$inputsKnown$0(int, Variable):boolean (28 bytes)   not inlining relevance-based (relevance=0.000005, probability=0.000005, bonus=1.000000, nodes=21 > 0.001434)
                              @ 26  deltablue.AbstractConstraint$$Lambda/0x00007f8674194690.test(Object):boolean (12 bytes)   trivial (relevance=0.000005, probability=0.000005, bonus=1.000000, nodes=9)
                            @ 1  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 9  deltablue.Variable.getStay():boolean (5 bytes)   inline accessor method (bytecode parsing)
                                @ 8  deltablue.AbstractConstraint.lambda$inputsKnown$0(int, Variable):boolean (28 bytes)   relevance-based (relevance=1.000000, probability=0.999995, bonus=1.000000, nodes=21 <= 300.000000)
                              @ 15  deltablue.AbstractConstraint$$Lambda/0x00007f8674194690.test(Object):boolean (12 bytes)   relevance-based (relevance=1.000000, probability=0.999995, bonus=1.000000, nodes=23 <= 300.000000)
                              @ 1  java.util.ArrayList$Itr.checkForComodification():void (23 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=9)
                            @ 41  java.lang.Enum.ordinal():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 1  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 6  deltablue.Variable.getConstraints():Vector (5 bytes)   inline accessor method (bytecode parsing)
                            @ 11  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object, Object):Object (10 bytes)   inline method (bytecode parsing)
                              @ 6  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object, Object):Object (24 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                              @ 19  deltablue.Planner$$Lambda/0x00007f86741956f8.<init>(AbstractConstraint, ForEachInterface):void (15 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                            @ 39  deltablue.Variable.getWalkStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 45  deltablue.Variable.setWalkStrength(Strength):void (6 bytes)   inline method (bytecode parsing)
                            @ 50  deltablue.Variable.getStay():boolean (5 bytes)   inline accessor method (bytecode parsing)
                            @ 60  deltablue.Variable.getStay():boolean (5 bytes)   inline accessor method (bytecode parsing)
                            @ 70  deltablue.Variable.getStay():boolean (5 bytes)   inline accessor method (bytecode parsing)
                            @ 81  deltablue.Variable.setStay(boolean):void (6 bytes)   inline method (bytecode parsing)
                            @ 85  deltablue.Variable.getStay():boolean (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 12  deltablue.Planner.lambda$constraintsConsuming$3(AbstractConstraint, ForEachInterface, AbstractConstraint):void (20 bytes)   not inlining too large previous low-level graph (low-level-nodes: 368, relevance=1.000000, probability=8.549532, bonus=1.000000, nodes=26)
                                @ 20  deltablue.Planner$$Lambda/0x00007f86741956f8.apply(Object):void (16 bytes)   relevance-based (relevance=1.000000, probability=8.549532, bonus=1.000000, nodes=16 <= 300.000000)
                            @ 39  deltablue.Variable.getWalkStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 45  deltablue.Variable.setWalkStrength(Strength):void (6 bytes)   inline method (bytecode parsing)
                              @ 16  som.Vector.forEach(ForEachInterface):void (32 bytes)   not inlining callee invoke probability is too high (invokeP=8.549532, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=33)
                            @ 50  deltablue.Variable.getStay():boolean (5 bytes)   inline accessor method (bytecode parsing)
                            @ 53  deltablue.Variable.setStay(boolean):void (6 bytes)   inline method (bytecode parsing)
                            @ 57  deltablue.Variable.getStay():boolean (5 bytes)   inline accessor method (bytecode parsing)
                                @ 1  deltablue.ScaleConstraint.recalculate():void (96 bytes)   not inlining too large previous low-level graph (low-level-nodes: 365, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=124)
                                @ 6  deltablue.BinaryConstraint.getOutput():Variable (22 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=17 <= 300.000000)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                  @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000124, probability=0.000124, bonus=1.000000, nodes=41 > 0.037287)
                                @ 9  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.236389, probability=1.000000, bonus=1.000000, nodes=35 <= 300.000000)
                              @ 8  deltablue.Planner.lambda$removePropagateFrom$5(Vector, AbstractConstraint):void (13 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=62 <= 300.000000)
                              @ 2  org.graalvm.collections.EconomicMapImpl.checkKeyNonNull(Object):void (15 bytes)   trivial (relevance=1.220948, probability=1.000000, bonus=1.000000, nodes=6)
                              @ 7  org.graalvm.collections.EconomicMapImpl.find(Object):int (19 bytes)   not inlining too large previous low-level graph (low-level-nodes: 336, relevance=1.220948, probability=1.000000, bonus=1.000000, nodes=20)
                                @ 2  org.graalvm.collections.EconomicMapImpl.getRawValue(int):Object (11 bytes)   relevance-based (relevance=0.232135, probability=0.180964, bonus=1.000000, nodes=10 <= 69.640518)
                              @ 18  org.graalvm.collections.EconomicMapImpl.getValue(int):Object (23 bytes)   relevance-based (relevance=0.220948, probability=0.180964, bonus=1.000000, nodes=19 <= 66.284441)
                                      @ 7  deltablue.Strength$Sym.customHash():int (5 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                                    @ 1  som.Dictionary.hash(Dictionary$CustomHash):int (20 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=12 <= 300.000000)
                            @ 6  som.Dictionary.getBucketIdx(int):int (10 bytes)   inline method (bytecode parsing)
                                    @ 7  som.Dictionary.getBucket(int):Dictionary$Entry (11 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                            @ 10  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                                    @ 18  som.IdentityDictionary$IdEntry.match(int, Object):boolean (22 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=13 <= 300.000000)
                            @ 15  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                                  @ 4  som.Dictionary.at(Dictionary$CustomHash):Object (39 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=35 <= 300.000000)
                            @ 27  deltablue.Strength.absoluteWeakest():Strength (4 bytes)   inline method (bytecode parsing)
                              @ 4  deltablue.Variable.<init>():void (44 bytes)   not inlining too large previous low-level graph (low-level-nodes: 356, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=27)
                                @ 6  deltablue.Strength.of(Strength$Sym):Strength (11 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=38 <= 300.000000)
                              @ 2  deltablue.AbstractConstraint.<init>(Strength$Sym):void (13 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=42 <= 300.000000)
                            @ 4  java.nio.Buffer.session():MemorySessionImpl (20 bytes)   inline method (bytecode parsing)
                            @ 11  java.nio.Buffer.checkIndex(int):int (12 bytes)   inline method (bytecode parsing)
                            @ 14  java.nio.DirectByteBuffer.ix(int):long (10 bytes)   inline method (bytecode parsing)
                            @ 17  jdk.internal.misc.ScopedMemoryAccess.getByte(MemorySessionImpl, Object, long):byte (16 bytes)   inline method (bytecode parsing)
                              @ 4  jdk.internal.misc.ScopedMemoryAccess.getByteInternal(MemorySessionImpl, Object, long):byte (34 bytes)   inline method (bytecode parsing)
                            @ 49  jdk.graal.compiler.graph.Node.valueEquals(Node):boolean (10 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.graph.Node.getNodeClass():NodeClass (5 bytes)   inline accessor method (bytecode parsing)
                            @ 59  jdk.graal.compiler.core.common.Fields.getCount():int (6 bytes)   inline method (bytecode parsing)
                            @ 70  jdk.graal.compiler.core.common.Fields.getType(int):Class (7 bytes)   inline method (bytecode parsing)
                                @ 6  jdk.graal.compiler.graph.NodeClass.dataEquals(Node, Node):boolean (546 bytes)   not inlining relevance-based (relevance=0.093658, probability=0.020411, bonus=1.000000, nodes=248 > 28.097320)
                              @ 46  jdk.graal.compiler.graph.Graph$1.equals(Object, Object):boolean (53 bytes)   relevance-based (relevance=0.093658, probability=0.040821, bonus=1.000000, nodes=25 <= 28.097320)
                            @ 36  java.lang.Object.equals(Object):boolean (11 bytes)   not inlining no methods remaining after filtering less frequent methods (7 methods previously)
                            @ 5  java.util.Objects.checkIndex(int, int):int (7 bytes)   inline method (bytecode parsing)
                            @ 11  java.util.ArrayList.elementData(int):Object (7 bytes)   inline method (bytecode parsing)
                            @ 8  java.util.ArrayDeque.elementAt(Object[], int):Object (4 bytes)   inline method (bytecode parsing)
                              @ 44  java.lang.StringLatin1.equals(byte[], byte[]):boolean (36 bytes)   relevance-based (relevance=1.000000, probability=0.509767, bonus=1.000000, nodes=33 <= 300.000000)
                            @ 8  java.util.ArrayDeque.elementAt(Object[], int):Object (4 bytes)   inline method (bytecode parsing)
                              @ 1  java.util.ArrayDeque.peekFirst():Object (12 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=7)
                            @ 15  org.graalvm.collections.EconomicMapImpl.getKey(int):Object (9 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.Planner.lambda$chainTest$7(int):Variable (8 bytes)   inline method (bytecode parsing)
                            @ 12  deltablue.AbstractConstraint.addConstraint(Planner):void (10 bytes)   inline method (bytecode parsing)
                            @ 15  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 27  deltablue.Strength.absoluteWeakest():Strength (4 bytes)   inline method (bytecode parsing)
                              @ 4  deltablue.Variable.<init>():void (44 bytes)   not inlining too large previous low-level graph (low-level-nodes: 356, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=27)
                                        @ 7  deltablue.Strength$Sym.customHash():int (5 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                                      @ 1  som.Dictionary.hash(Dictionary$CustomHash):int (20 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=12 <= 300.000000)
                            @ 6  som.Dictionary.getBucketIdx(int):int (10 bytes)   inline method (bytecode parsing)
                                      @ 7  som.Dictionary.getBucket(int):Dictionary$Entry (11 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                            @ 12  deltablue.AbstractConstraint.addConstraint(Planner):void (10 bytes)   inline method (bytecode parsing)
                              @ 6  deltablue.BinaryConstraint.<init>(Variable, Variable, Strength$Sym, Planner):void (21 bytes)   not inlining too large previous low-level graph (low-level-nodes: 394, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=17)
                                      @ 18  som.IdentityDictionary$IdEntry.match(int, Object):boolean (22 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=13 <= 300.000000)
                            @ 5  deltablue.Variable.addConstraint(AbstractConstraint):void (9 bytes)   inline method (bytecode parsing)
                            @ 13  deltablue.Variable.addConstraint(AbstractConstraint):void (9 bytes)   inline method (bytecode parsing)
                                    @ 4  som.Dictionary.at(Dictionary$CustomHash):Object (39 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=35 <= 300.000000)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                  @ 6  deltablue.Strength.of(Strength$Sym):Strength (11 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=38 <= 300.000000)
                                @ 2  deltablue.AbstractConstraint.<init>(Strength$Sym):void (13 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=42 <= 300.000000)
                                  @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000124, probability=0.000124, bonus=1.000000, nodes=41 > 0.037287)
                            @ 5  deltablue.Variable.addConstraint(AbstractConstraint):void (9 bytes)   inline method (bytecode parsing)
                                @ 5  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=35 <= 300.000000)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                  @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000124, probability=0.000124, bonus=1.000000, nodes=41 > 0.037287)
                                    @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000124, probability=0.000124, bonus=1.000000, nodes=41 > 0.037287)
                                @ 5  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000124, probability=1.000000, bonus=1.000000, nodes=35 <= 300.000000)
                                  @ 5  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=35 <= 300.000000)
                              @ 1  deltablue.BinaryConstraint.addToGraph():void (22 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=86 <= 300.000000)
                                @ 1  deltablue.UnaryConstraint.addToGraph():void (14 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=47 <= 300.000000)
                                  @ 1  deltablue.Planner.newMark():int (15 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=10 <= 300.000000)
                                @ 1  deltablue.Planner.newMark():int (15 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f867403aa08.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f867403aa08.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 8  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 690, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=72)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                                @ 8  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 690, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=72)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f867403aa08.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f867403aa08.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                                  @ 19  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 690, relevance=1.000000, probability=1.002830, bonus=1.000000, nodes=72)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                @ 6  deltablue.Planner.incrementalAdd(AbstractConstraint):void (27 bytes)   relevance-based (relevance=1.000124, probability=1.000000, bonus=1.000000, nodes=28 <= 300.000000)
                                @ 19  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 690, relevance=1.000000, probability=1.002830, bonus=1.000000, nodes=72)
                              @ 4  deltablue.UnaryConstraint.<init>(Variable, Strength$Sym, Planner):void (16 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=119 <= 300.000000)
                              @ 6  deltablue.Planner.incrementalAdd(AbstractConstraint):void (27 bytes)   relevance-based (relevance=1.000124, probability=1.000000, bonus=1.000000, nodes=28 <= 300.000000)
                            @ 12  java.util.ArrayDeque.elementAt(Object[], int):Object (4 bytes)   inline method (bytecode parsing)
                            @ 111  org.graalvm.collections.EconomicMapImpl.setKey(int, Object):void (10 bytes)   inline method (bytecode parsing)
                            @ 143  org.graalvm.collections.EconomicMapImpl.size():int (10 bytes)   inline method (bytecode parsing)
                              @ 28  java.util.ArrayDeque.inc(int, int):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.999582, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 147  org.graalvm.collections.EconomicMapImpl.size():int (10 bytes)   inline method (bytecode parsing)
                              @ 2  org.graalvm.collections.EconomicMapImpl.checkKeyNonNull(Object):void (15 bytes)   trivial (relevance=2.157861, probability=1.000000, bonus=1.000000, nodes=6)
                              @ 7  org.graalvm.collections.EconomicMapImpl.find(Object):int (19 bytes)   not inlining too large previous low-level graph (low-level-nodes: 336, relevance=2.157861, probability=1.000000, bonus=1.000000, nodes=20)
                                @ 2  org.graalvm.collections.EconomicMapImpl.getRawValue(int):Object (11 bytes)   relevance-based (relevance=0.964018, probability=0.425955, bonus=1.000000, nodes=10 <= 289.205440)
                              @ 18  org.graalvm.collections.EconomicMapImpl.getValue(int):Object (23 bytes)   relevance-based (relevance=0.919151, probability=0.425955, bonus=1.000000, nodes=19 <= 275.745408)
                                @ 2  org.graalvm.collections.EconomicMapImpl.getRawValue(int):Object (11 bytes)   relevance-based (relevance=0.933175, probability=0.425955, bonus=1.000000, nodes=10 <= 279.952581)
                                @ 43  org.graalvm.collections.EconomicMapImpl.setRawValue(int, Object):void (12 bytes)   relevance-based (relevance=0.919151, probability=0.419553, bonus=1.000000, nodes=12 <= 275.745408)
                              @ 2  org.graalvm.collections.EconomicMapImpl.getRawValue(int):Object (11 bytes)   relevance-based (relevance=1.015251, probability=1.000000, bonus=1.000000, nodes=10 <= 300.000000)
                                @ 31  org.graalvm.collections.EconomicMapImpl$CollisionLink.<init>(Object, int):void (15 bytes)   not inlining relevance-based (relevance=0.014024, probability=0.006401, bonus=1.000000, nodes=11 > 4.207172)
                              @ 43  org.graalvm.collections.EconomicMapImpl.setRawValue(int, Object):void (12 bytes)   relevance-based (relevance=1.000000, probability=0.984978, bonus=1.000000, nodes=12 <= 300.000000)
                                @ 34  org.graalvm.collections.EconomicMapImpl.setRawValue(int, Object):void (12 bytes)   not inlining relevance-based (relevance=0.014024, probability=0.006401, bonus=1.000000, nodes=12 > 4.207172)
                              @ 31  org.graalvm.collections.EconomicMapImpl$CollisionLink.<init>(Object, int):void (15 bytes)   not inlining relevance-based (relevance=0.015251, probability=0.015022, bonus=1.000000, nodes=11 > 4.575351)
                              @ 26  org.graalvm.collections.EconomicMapImpl.setValue(int, Object):void (47 bytes)   relevance-based (relevance=0.919151, probability=0.425955, bonus=1.000000, nodes=34 <= 275.745408)
                              @ 34  org.graalvm.collections.EconomicMapImpl.setRawValue(int, Object):void (12 bytes)   not inlining relevance-based (relevance=0.015251, probability=0.015022, bonus=1.000000, nodes=12 > 4.575351)
                            @ 14  java.lang.Math.max(int, int):int (11 bytes)   inline method (bytecode parsing)
                              @ 70  org.graalvm.collections.EconomicMapImpl.grow():void (91 bytes)   not inlining relevance-based (relevance=0.080142, probability=0.037139, bonus=1.000000, nodes=58 > 24.042561)
                                @ 2  org.graalvm.collections.EconomicMapImpl.getRawValue(int):Object (11 bytes)   relevance-based (relevance=1.015257, probability=0.574045, bonus=1.000000, nodes=10 <= 300.000000)
                                @ 43  org.graalvm.collections.EconomicMapImpl.setRawValue(int, Object):void (12 bytes)   relevance-based (relevance=1.000000, probability=0.565418, bonus=1.000000, nodes=12 <= 300.000000)
                                @ 31  org.graalvm.collections.EconomicMapImpl$CollisionLink.<init>(Object, int):void (15 bytes)   not inlining relevance-based (relevance=0.015257, probability=0.008627, bonus=1.000000, nodes=11 > 4.577236)
                                @ 34  org.graalvm.collections.EconomicMapImpl.setRawValue(int, Object):void (12 bytes)   not inlining relevance-based (relevance=0.015257, probability=0.008627, bonus=1.000000, nodes=12 > 4.577236)
                              @ 118  org.graalvm.collections.EconomicMapImpl.setValue(int, Object):void (47 bytes)   relevance-based (relevance=1.238710, probability=0.574045, bonus=1.000000, nodes=34 <= 300.000000)
                              @ 132  org.graalvm.collections.EconomicMapImpl.hasHashArray():boolean (13 bytes)   trivial (relevance=1.238710, probability=0.574045, bonus=1.000000, nodes=9)
                              @ 139  org.graalvm.collections.EconomicMapImpl.getHashTableSize():int (43 bytes)   relevance-based (relevance=0.733468, probability=0.339905, bonus=1.000000, nodes=21 <= 220.040528)
                            @ 4  jdk.graal.compiler.graph.Node.getNodeClass():NodeClass (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 40  jdk.graal.compiler.graph.Graph$1.hashCode(Object):int (15 bytes)   not inlining relevance-based (relevance=0.028121, probability=0.010324, bonus=1.000000, nodes=14 > 8.436188)
                 n                @ 48  java.lang.Object.hashCode():int (0 bytes)   trivial (relevance=0.897727, probability=0.329581, bonus=1.000000, nodes=5)
                                  @ 61  org.graalvm.collections.EconomicMapImpl.getHashTableSize():int (43 bytes)   relevance-based (relevance=0.925848, probability=0.339905, bonus=1.000000, nodes=21 <= 277.754301)
                                @ 2  org.graalvm.collections.EconomicMapImpl.getHashIndex(Object):int (68 bytes)   relevance-based (relevance=0.785736, probability=0.339905, bonus=1.000000, nodes=76 <= 235.720818)
                                  @ 3  java.lang.Math.max(int, int):int (11 bytes)   trivial (relevance=0.167499, probability=0.143468, bonus=1.000000, nodes=7)
                                @ 10  org.graalvm.collections.EconomicMapImpl.getHashArray(int):int (126 bytes)   relevance-based (relevance=0.864260, probability=0.339905, bonus=1.000000, nodes=31 <= 259.277918)
                                @ 29  jdk.internal.util.ArraysSupport.newLength(int, int, int):int (27 bytes)   relevance-based (relevance=0.167499, probability=0.143468, bonus=1.000000, nodes=15 <= 50.249726)
                              @ 24  java.lang.AbstractStringBuilder.newCapacity(int):int (59 bytes)   relevance-based (relevance=0.167499, probability=0.143468, bonus=1.000000, nodes=27 <= 50.249726)
                            @ 1  org.graalvm.collections.EconomicMapImpl.size():int (10 bytes)   inline method (bytecode parsing)
                            @ 84  org.graalvm.collections.EconomicMapImpl.getKey(int):Object (9 bytes)   inline method (bytecode parsing)
                                @ 28  org.graalvm.collections.EconomicMapImpl.createHash():void (109 bytes)   not inlining relevance-based (relevance=0.003677, probability=0.001446, bonus=1.000000, nodes=57 > 1.102970)
                                @ 25  java.lang.Math.min(int, int):int (11 bytes)   trivial (relevance=0.167501, probability=0.143448, bonus=1.000000, nodes=7)
                              @ 32  java.util.Arrays.copyOf(byte[], int):byte[] (33 bytes)   relevance-based (relevance=0.167499, probability=0.143468, bonus=1.000000, nodes=28 <= 50.249726)
                                @ 38  org.graalvm.collections.EconomicMapImpl.setHashArray(int, int):void (112 bytes)   relevance-based (relevance=0.860583, probability=0.338459, bonus=1.000000, nodes=37 <= 258.174949)
                                @ 43  org.graalvm.collections.EconomicMapImpl.getRawValue(int):Object (11 bytes)   relevance-based (relevance=0.860583, probability=0.338459, bonus=1.000000, nodes=10 <= 258.174949)
                                @ 121  org.graalvm.collections.EconomicMapImpl.getRawValue(int):Object (11 bytes)   relevance-based (relevance=0.048029, probability=0.018889, bonus=1.000000, nodes=10 <= 14.408557)
                            @ 5  jdk.graal.compiler.nodes.java.NewArrayNode.newUninitializedArray(Class, int):Object (7 bytes)   inline method (bytecode parsing)
                                @ 126  org.graalvm.collections.EconomicMapImpl$CollisionLink.<init>(Object, int):void (15 bytes)   relevance-based (relevance=0.048029, probability=0.018889, bonus=1.000000, nodes=11 <= 14.408557)
                                @ 129  org.graalvm.collections.EconomicMapImpl.setRawValue(int, Object):void (12 bytes)   relevance-based (relevance=0.048029, probability=0.018889, bonus=1.000000, nodes=12 <= 14.408557)
                            @ 27  jdk.graal.compiler.replacements.arraycopy.ArrayCopyCallNode.disjointArraycopy(Object, int, Object, int, int, JavaKind, int):void (17 bytes)   inline method (bytecode parsing)
                                @ 104  org.graalvm.collections.EconomicMapImpl$CollisionLink.<init>(Object, int):void (15 bytes)   not inlining relevance-based (relevance=0.005785, probability=0.002275, bonus=1.000000, nodes=11 > 1.735430)
                                @ 107  org.graalvm.collections.EconomicMapImpl.setRawValue(int, Object):void (12 bytes)   not inlining relevance-based (relevance=0.005785, probability=0.002275, bonus=1.000000, nodes=12 > 1.735430)
                                @ 157  org.graalvm.collections.EconomicMapImpl.setRawValue(int, Object):void (12 bytes)   not inlining relevance-based (relevance=0.022937, probability=0.009021, bonus=1.000000, nodes=12 > 6.881037)
                              @ 169  org.graalvm.collections.EconomicMapImpl.putHashEntry(Object, int, boolean):void (161 bytes)   relevance-based (relevance=0.733468, probability=0.339905, bonus=1.000000, nodes=196 <= 220.040528)
                              @ 180  org.graalvm.collections.EconomicMapImpl.getHashThreshold():int (22 bytes)   relevance-based (relevance=0.505242, probability=0.234140, bonus=1.000000, nodes=12 <= 151.572461)
                            @ 1  org.graalvm.collections.EconomicMapImpl.size():int (10 bytes)   inline method (bytecode parsing)
                            @ 84  org.graalvm.collections.EconomicMapImpl.getKey(int):Object (9 bytes)   inline method (bytecode parsing)
                              @ 187  org.graalvm.collections.EconomicMapImpl.createHash():void (109 bytes)   not inlining relevance-based (relevance=0.028343, probability=0.013135, bonus=1.000000, nodes=57 > 8.503048)
                            @ 5  jdk.graal.compiler.replacements.arraycopy.ArrayCopySnippets.checkArrayTypes(Object, Object, ArrayCopySnippets$ArrayCopyTypeCheck):void (98 bytes)   inline method (bytecode parsing)
                            @ 20  jdk.graal.compiler.replacements.arraycopy.ArrayCopySnippets.checkLimits(Object, int, Object, int, int, JavaKind, ArrayCopySnippets$Counters):int[] (230 bytes)   inline method (bytecode parsing)
                              @ 21  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                              @ 37  jdk.graal.compiler.nodes.PiNode.piCastPositive(int, GuardingNode):int (9 bytes)   inline method (bytecode parsing)
                              @ 64  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                              @ 81  jdk.graal.compiler.nodes.PiNode.piCastPositive(int, GuardingNode):int (9 bytes)   inline method (bytecode parsing)
                              @ 108  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                              @ 125  jdk.graal.compiler.nodes.PiNode.piCastPositive(int, GuardingNode):int (9 bytes)   inline method (bytecode parsing)
                              @ 159  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                              @ 200  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                              @ 217  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                              @ 226  jdk.graal.compiler.replacements.arraycopy.ArrayCopySnippets.createCheckLimitsResult(int, int, int):int[] (18 bytes)   inline method (bytecode parsing)
                            @ 47  jdk.graal.compiler.replacements.arraycopy.ArrayCopySnippets.incrementLengthCounter(int, ArrayCopySnippets$Counters):void (16 bytes)   inline method (bytecode parsing)
                              @ 12  jdk.graal.compiler.replacements.SnippetIntegerHistogram.inc(long):void (215 bytes)   inline method (bytecode parsing)
                            @ 52  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                            @ 59  jdk.graal.compiler.replacements.SnippetCounter.add(int):void (13 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                            @ 77  jdk.graal.compiler.replacements.arraycopy.ArrayCopySnippets.doArraycopyExactStubCallSnippet(Object, int, Object, int, int, JavaKind, LocationIdentity, ArrayCopySnippets$Counters):void (19 bytes)   inline method (bytecode parsing)
                              @ 12  jdk.graal.compiler.hotspot.replacements.arraycopy.HotSpotArraycopySnippets.heapWordSize():int (7 bytes)   inline method (bytecode parsing)
                              @ 15  jdk.graal.compiler.replacements.arraycopy.ArrayCopyCallNode.arraycopy(Object, int, Object, int, int, JavaKind, LocationIdentity, int):void (19 bytes)   inline method (bytecode parsing)
                            @ 23  jdk.graal.compiler.replacements.AllocationSnippets.allocateArrayImpl(Word, int, int, int, AllocationSnippets$FillContent, int, boolean, boolean, boolean, boolean, AllocationSnippets$AllocationProfilingData):Object (178 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getTLABInfo():Word (5 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getThread():Word (8 bytes)   inline method (bytecode parsing)
                                  @ 4  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.registerAsWord(Register):Word (7 bytes)   inline method (bytecode parsing)
                              @ 9  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.readTlabTop(Word):Word (5 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.readTlabTop(Word):Word (17 bytes)   inline method (bytecode parsing)
                              @ 17  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.readTlabEnd(Word):Word (5 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.readTlabEnd(Word):Word (17 bytes)   inline method (bytecode parsing)
                              @ 36  jdk.graal.compiler.replacements.ReplacementsUtil.dynamicAssert(boolean, String):void (12 bytes)   inline method (bytecode parsing)
                              @ 44  jdk.graal.compiler.replacements.AllocationSnippets.arrayAllocationSize(int, int, int):UnsignedWord (18 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.objectAlignment():int (7 bytes)   inline method (bytecode parsing)
                                @ 11  jdk.graal.compiler.replacements.AllocationSnippets.arrayAllocationSize(int, int, int, int):long (32 bytes)   inline method (bytecode parsing)
                              @ 59  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.useTLAB():boolean (7 bytes)   inline method (bytecode parsing)
                              @ 72  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.shouldAllocateInTLAB(UnsignedWord, boolean):boolean (33 bytes)   inline method (bytecode parsing)
                              @ 102  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.writeTlabTop(Word, Word):void (6 bytes)   inline method (bytecode parsing)
                                @ 2  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.writeTlabTop(Word, Word):void (15 bytes)   inline method (bytecode parsing)
                              @ 109  jdk.graal.compiler.replacements.AllocationSnippets.emitPrefetchAllocate(Word, boolean):void (61 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getPrefetchStyle():int (7 bytes)   inline method (bytecode parsing)
                                @ 9  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getPrefetchLines(boolean):int (18 bytes)   inline method (bytecode parsing)
                                @ 14  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getPrefetchStepSize():int (7 bytes)   inline method (bytecode parsing)
                                @ 20  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getPrefetchDistance():int (7 bytes)   inline method (bytecode parsing)
                              @ 136  jdk.graal.compiler.replacements.AllocationSnippets.formatArray(Word, UnsignedWord, int, Word, AllocationSnippets$FillContent, boolean, int, boolean, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):Object (53 bytes)   inline method (bytecode parsing)
                                @ 5  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.initializeObjectHeader(Word, Word, boolean):void (29 bytes)   inline method (bytecode parsing)
                                  @ 25  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.initializeObjectHeader(Word, Word, KlassPointer):void (20 bytes)   inline method (bytecode parsing)
                                @ 11  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.arrayLengthOffset():int (7 bytes)   inline method (bytecode parsing)
                                @ 15  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                                @ 38  jdk.graal.compiler.replacements.AllocationSnippets.fillContents(Word, AllocationSnippets$FillContent, int, UnsignedWord, boolean, boolean, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):void (58 bytes)   inline method (bytecode parsing)
                                @ 44  jdk.graal.compiler.replacements.AllocationSnippets.emitMemoryBarrierIf(boolean):void (14 bytes)   inline method (bytecode parsing)
                                  @ 7  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                              @ 152  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                              @ 158  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.callNewArrayStub(Word, int):Object (35 bytes)   inline method (bytecode parsing)
                                @ 22  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.nonNullOrDeopt(Object):Object (27 bytes)   inline method (bytecode parsing)
                              @ 168  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.profileAllocation(AllocationSnippets$AllocationProfilingData, UnsignedWord):void (51 bytes)   inline method (bytecode parsing)
                              @ 174  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.verifyOop(Object):Object (5 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.verifyOop(Object):Object (19 bytes)   inline method (bytecode parsing)
                            @ 1  java.nio.Buffer.limit():int (5 bytes)   inline accessor method (bytecode parsing)
                                @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                              @ 10  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=8)
                            @ 4  java.nio.Buffer.session():MemorySessionImpl (20 bytes)   inline method (bytecode parsing)
                            @ 11  java.nio.Buffer.checkIndex(int):int (12 bytes)   inline method (bytecode parsing)
                            @ 14  java.nio.DirectByteBuffer.ix(int):long (10 bytes)   inline method (bytecode parsing)
                            @ 17  jdk.internal.misc.ScopedMemoryAccess.getByte(MemorySessionImpl, Object, long):byte (16 bytes)   inline method (bytecode parsing)
                              @ 4  jdk.internal.misc.ScopedMemoryAccess.getByteInternal(MemorySessionImpl, Object, long):byte (34 bytes)   inline method (bytecode parsing)
                              @ 25  java.nio.DirectByteBuffer.get(int):byte (34 bytes)   relevance-based (relevance=1.049647, probability=21.142096, bonus=1.000000, nodes=23 <= 300.000000)
                                @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=20.145864, bonus=1.000000, nodes=9)
                            @ 3  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                                @ 12  java.lang.StringLatin1.charAt(byte[], int):char (15 bytes)   relevance-based (relevance=1.000000, probability=20.145864, bonus=1.000000, nodes=11 <= 300.000000)
                              @ 53  java.lang.String.charAt(int):char (25 bytes)   relevance-based (relevance=1.000187, probability=20.145864, bonus=1.000000, nodes=16 <= 300.000000)
                            @ 49  java.lang.Math.max(int, int):int (11 bytes)   inline method (bytecode parsing)
                            @ 37  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                      @ 3  java.lang.Math.max(int, int):int (11 bytes)   trivial (relevance=0.087985, probability=0.051295, bonus=1.000000, nodes=7)
                                    @ 27  jdk.internal.util.ArraysSupport.newLength(int, int, int):int (27 bytes)   relevance-based (relevance=0.087985, probability=0.051295, bonus=1.000000, nodes=15 <= 26.395535)
                                    @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.087985, probability=0.051295, bonus=1.000000, nodes=41 > 26.395535)
                                  @ 7  java.util.ArrayList.grow(int):Object[] (60 bytes)   relevance-based (relevance=0.415539, probability=0.293555, bonus=1.000000, nodes=51 <= 124.661723)
                                @ 7  java.util.ArrayList.grow():Object[] (11 bytes)   relevance-based (relevance=0.415539, probability=0.293555, bonus=1.000000, nodes=57 <= 124.661723)
                              @ 20  java.util.ArrayList.add(Object, Object[], int):void (23 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=72 <= 300.000000)
                              @ 35  java.util.ArrayDeque.inc(int, int):int (12 bytes)   relevance-based (relevance=1.007908, probability=1.000000, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 55  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                              @ 47  java.util.ArrayDeque.grow(int):void (165 bytes)   not inlining relevance-based (relevance=0.007908, probability=0.007846, bonus=1.000000, nodes=75 > 2.372550)
                            @ 5  deltablue.Variable.addConstraint(AbstractConstraint):void (9 bytes)   inline method (bytecode parsing)
                            @ 13  deltablue.Variable.addConstraint(AbstractConstraint):void (9 bytes)   inline method (bytecode parsing)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000124, probability=0.000124, bonus=1.000000, nodes=41 > 0.037287)
                              @ 5  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=35 <= 300.000000)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000124, probability=0.000124, bonus=1.000000, nodes=41 > 0.037287)
                              @ 5  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000124, probability=1.000000, bonus=1.000000, nodes=35 <= 300.000000)
                            @ 24  deltablue.AbstractConstraint.addConstraint(Planner):void (10 bytes)   inline method (bytecode parsing)
                              @ 8  deltablue.BinaryConstraint.<init>(Variable, Variable, Strength$Sym, Planner):void (21 bytes)   not inlining too large previous low-level graph (low-level-nodes: 394, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=17)
                            @ 5  deltablue.Variable.addConstraint(AbstractConstraint):void (9 bytes)   inline method (bytecode parsing)
                            @ 13  deltablue.Variable.addConstraint(AbstractConstraint):void (9 bytes)   inline method (bytecode parsing)
                            @ 21  deltablue.Variable.addConstraint(AbstractConstraint):void (9 bytes)   inline method (bytecode parsing)
                            @ 29  deltablue.Variable.addConstraint(AbstractConstraint):void (9 bytes)   inline method (bytecode parsing)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                  @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000124, probability=0.000124, bonus=1.000000, nodes=41 > 0.037287)
                                @ 5  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=35 <= 300.000000)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                  @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000124, probability=0.000124, bonus=1.000000, nodes=41 > 0.037287)
                                @ 5  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000124, probability=1.000000, bonus=1.000000, nodes=35 <= 300.000000)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                  @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000124, probability=0.000124, bonus=1.000000, nodes=41 > 0.037287)
                                @ 5  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000124, probability=1.000000, bonus=1.000000, nodes=35 <= 300.000000)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                 n            @ 9  java.lang.Object.hashCode():int (0 bytes)   not inlining no methods remaining after filtering less frequent methods (7 methods previously)
                                  @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000124, probability=0.000124, bonus=1.000000, nodes=41 > 0.037287)
                              @ 23  java.util.HashMap.hash(Object):int (20 bytes)   relevance-based (relevance=1.954971, probability=0.946775, bonus=1.000000, nodes=12 <= 300.000000)
                                @ 5  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000124, probability=1.000000, bonus=1.000000, nodes=35 <= 300.000000)
                              @ 1  deltablue.ScaleConstraint.addToGraph():void (38 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=164 <= 300.000000)
                              @ 95  java.util.HashMap$TreeNode.getTreeNode(int, Object):HashMap$TreeNode (22 bytes)   not inlining relevance-based (relevance=0.023613, probability=0.011435, bonus=1.000000, nodes=23 > 7.083844)
                                @ 1  deltablue.Planner.newMark():int (15 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=10 <= 300.000000)
                              @ 29  java.nio.file.attribute.BasicFileAttributes.lastModifiedTime():FileTime (0 bytes)   not inlining no type profile exists
                              @ 38  java.nio.file.attribute.BasicFileAttributes.lastModifiedTime():FileTime (0 bytes)   not inlining no type profile exists
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 43  java.nio.file.attribute.FileTime.equals(Object):boolean (28 bytes)   not inlining relevance-based (relevance=0.000284, probability=0.000008, bonus=1.000000, nodes=21 > 0.085152)
                              @ 55  java.nio.file.attribute.BasicFileAttributes.fileKey():Object (0 bytes)   not inlining no type profile exists
                              @ 70  java.nio.file.attribute.BasicFileAttributes.fileKey():Object (0 bytes)   not inlining no type profile exists
                              @ 75  java.lang.Object.equals(Object):boolean (11 bytes)   not inlining no type profile exists
                            @ 14  java.io.File.compareTo(File):int (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.io.UnixFileSystem.compare(File, File):int (12 bytes)   inline method (bytecode parsing)
                                @ 1  java.io.File.getPath():String (5 bytes)   inline accessor method (bytecode parsing)
                                @ 5  java.io.File.getPath():String (5 bytes)   inline accessor method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f867403aa08.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                @ 8  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 690, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=72)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f867403aa08.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                                @ 87  java.io.File.equals(Object):boolean (28 bytes)   not inlining relevance-based (relevance=0.000071, probability=0.000002, bonus=1.000000, nodes=23 > 0.021288)
                                @ 22  jdk.vm.ci.hotspot.HotSpotResolvedJavaMethodImpl.equals(Object):boolean (39 bytes)   not inlining relevance-based (relevance=0.070676, probability=0.001959, bonus=1.000000, nodes=28 > 21.202767)
                              @ 88  java.lang.Object.equals(Object):boolean (11 bytes)   not inlining no type profile exists
                              @ 63  java.lang.Long.equals(Object):boolean (30 bytes)   relevance-based (relevance=1.000000, probability=0.484291, bonus=1.000000, nodes=237 <= 300.000000)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                              @ 128  java.lang.Long.equals(Object):boolean (30 bytes)   relevance-based (relevance=0.557576, probability=0.215564, bonus=1.000000, nodes=68 <= 167.272817)
                                @ 19  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 690, relevance=1.000000, probability=1.002830, bonus=1.000000, nodes=72)
                              @ 6  deltablue.Planner.incrementalAdd(AbstractConstraint):void (27 bytes)   relevance-based (relevance=1.000124, probability=1.000000, bonus=1.000000, nodes=28 <= 300.000000)
                            @ 1  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                            @ 5  java.lang.Long.longValue():long (5 bytes)   inline method (bytecode parsing)
                            @ 1  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                            @ 5  java.lang.Integer.intValue():int (5 bytes)   inline method (bytecode parsing)
                            @ 5  deltablue.Variable.addConstraint(AbstractConstraint):void (9 bytes)   inline method (bytecode parsing)
                            @ 13  deltablue.Variable.addConstraint(AbstractConstraint):void (9 bytes)   inline method (bytecode parsing)
                            @ 21  deltablue.Variable.addConstraint(AbstractConstraint):void (9 bytes)   inline method (bytecode parsing)
                            @ 29  deltablue.Variable.addConstraint(AbstractConstraint):void (9 bytes)   inline method (bytecode parsing)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000124, probability=0.000124, bonus=1.000000, nodes=41 > 0.037287)
                              @ 5  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=35 <= 300.000000)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                              @ 2  org.graalvm.collections.EconomicMapImpl.getRawValue(int):Object (11 bytes)   relevance-based (relevance=1.048460, probability=1.000000, bonus=1.000000, nodes=10 <= 300.000000)
                                @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000124, probability=0.000124, bonus=1.000000, nodes=41 > 0.037287)
                              @ 5  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000124, probability=1.000000, bonus=1.000000, nodes=35 <= 300.000000)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000124, probability=0.000124, bonus=1.000000, nodes=41 > 0.037287)
                              @ 5  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000124, probability=1.000000, bonus=1.000000, nodes=35 <= 300.000000)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000124, probability=0.000124, bonus=1.000000, nodes=41 > 0.037287)
                              @ 5  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000124, probability=1.000000, bonus=1.000000, nodes=35 <= 300.000000)
                            @ 4  jdk.graal.compiler.graph.Node.getNodeClass():NodeClass (5 bytes)   inline accessor method (bytecode parsing)
                                @ 40  jdk.graal.compiler.graph.Graph$1.hashCode(Object):int (15 bytes)   not inlining relevance-based (relevance=0.035789, probability=0.030373, bonus=1.000000, nodes=14 > 10.736669)
                 n              @ 48  java.lang.Object.hashCode():int (0 bytes)   trivial (relevance=1.142530, probability=0.969627, bonus=1.000000, nodes=5)
                                @ 61  org.graalvm.collections.EconomicMapImpl.getHashTableSize():int (43 bytes)   relevance-based (relevance=1.178319, probability=1.000000, bonus=1.000000, nodes=21 <= 300.000000)
                              @ 2  org.graalvm.collections.EconomicMapImpl.getHashIndex(Object):int (68 bytes)   relevance-based (relevance=1.067781, probability=1.000000, bonus=1.000000, nodes=76 <= 300.000000)
                              @ 10  org.graalvm.collections.EconomicMapImpl.getHashArray(int):int (126 bytes)   relevance-based (relevance=1.178319, probability=1.000000, bonus=1.000000, nodes=31 <= 300.000000)
                            @ 1  org.graalvm.collections.EconomicMapImpl.size():int (10 bytes)   inline method (bytecode parsing)
                            @ 84  org.graalvm.collections.EconomicMapImpl.getKey(int):Object (9 bytes)   inline method (bytecode parsing)
                              @ 28  org.graalvm.collections.EconomicMapImpl.createHash():void (109 bytes)   not inlining relevance-based (relevance=0.004478, probability=0.003800, bonus=1.000000, nodes=57 > 1.343257)
                              @ 38  org.graalvm.collections.EconomicMapImpl.setHashArray(int, int):void (112 bytes)   relevance-based (relevance=1.173841, probability=0.996200, bonus=1.000000, nodes=37 <= 300.000000)
                              @ 43  org.graalvm.collections.EconomicMapImpl.getRawValue(int):Object (11 bytes)   relevance-based (relevance=1.173841, probability=0.996200, bonus=1.000000, nodes=10 <= 300.000000)
                              @ 121  org.graalvm.collections.EconomicMapImpl.getRawValue(int):Object (11 bytes)   relevance-based (relevance=0.061955, probability=0.052580, bonus=1.000000, nodes=10 <= 18.586634)
                              @ 126  org.graalvm.collections.EconomicMapImpl$CollisionLink.<init>(Object, int):void (15 bytes)   relevance-based (relevance=0.061955, probability=0.052580, bonus=1.000000, nodes=11 <= 18.586634)
                              @ 129  org.graalvm.collections.EconomicMapImpl.setRawValue(int, Object):void (12 bytes)   relevance-based (relevance=0.061955, probability=0.052580, bonus=1.000000, nodes=12 <= 18.586634)
                              @ 104  org.graalvm.collections.EconomicMapImpl$CollisionLink.<init>(Object, int):void (15 bytes)   not inlining relevance-based (relevance=0.008365, probability=0.007099, bonus=1.000000, nodes=11 > 2.509494)
                              @ 107  org.graalvm.collections.EconomicMapImpl.setRawValue(int, Object):void (12 bytes)   not inlining relevance-based (relevance=0.008365, probability=0.007099, bonus=1.000000, nodes=12 > 2.509494)
                              @ 157  org.graalvm.collections.EconomicMapImpl.setRawValue(int, Object):void (12 bytes)   not inlining relevance-based (relevance=0.034486, probability=0.029267, bonus=1.000000, nodes=12 > 10.345924)
                                @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                              @ 36  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=8)
                                @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=9)
                            @ 3  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                                @ 12  java.lang.StringLatin1.charAt(byte[], int):char (15 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                              @ 50  java.lang.String.charAt(int):char (25 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=16 <= 300.000000)
                                @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                            @ 8  deltablue.Variable.setWalkStrength(Strength):void (6 bytes)   inline method (bytecode parsing)
                              @ 36  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=8)
                            @ 27  deltablue.Variable.setStay(boolean):void (6 bytes)   inline method (bytecode parsing)
                            @ 34  deltablue.Variable.getStay():boolean (5 bytes)   inline accessor method (bytecode parsing)
                              @ 16  deltablue.AbstractConstraint.isInput():boolean (2 bytes)   trivial (relevance=1.000075, probability=1.000000, bonus=1.000000, nodes=8)
                              @ 41  deltablue.StayConstraint.execute():void (1 bytes)   trivial (relevance=1.000000, probability=0.999925, bonus=1.000000, nodes=3)
                              @ 1  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000010, probability=1.000000, bonus=1.000000, nodes=5)
                              @ 5  java.util.ArrayList$Itr.<init>(ArrayList):void (26 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=15 <= 300.000000)
                            @ 12  java.util.ArrayDeque.elementAt(Object[], int):Object (4 bytes)   inline method (bytecode parsing)
                                @ 28  java.util.ArrayDeque.inc(int, int):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.999585, bonus=1.000000, nodes=10 <= 300.000000)
                              @ 1  java.util.ArrayDeque.pollFirst():Object (36 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=26 <= 300.000000)
                              @ 2  java.lang.CharacterDataLatin1.getProperties(int):int (11 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=8)
                                    @ 3  java.lang.Math.max(int, int):int (11 bytes)   trivial (relevance=0.166032, probability=0.142390, bonus=1.000000, nodes=7)
                                  @ 29  jdk.internal.util.ArraysSupport.newLength(int, int, int):int (27 bytes)   relevance-based (relevance=0.166032, probability=0.142390, bonus=1.000000, nodes=15 <= 49.809492)
                                @ 24  java.lang.AbstractStringBuilder.newCapacity(int):int (59 bytes)   relevance-based (relevance=0.166032, probability=0.142390, bonus=1.000000, nodes=27 <= 49.809492)
                                  @ 25  java.lang.Math.min(int, int):int (11 bytes)   trivial (relevance=0.166033, probability=0.142371, bonus=1.000000, nodes=7)
                                      @ 3  java.lang.Math.max(int, int):int (11 bytes)   trivial (relevance=0.166032, probability=0.142390, bonus=1.000000, nodes=7)
                                @ 32  java.util.Arrays.copyOf(byte[], int):byte[] (33 bytes)   relevance-based (relevance=0.166032, probability=0.142390, bonus=1.000000, nodes=28 <= 49.809492)
                                    @ 29  jdk.internal.util.ArraysSupport.newLength(int, int, int):int (27 bytes)   relevance-based (relevance=0.166032, probability=0.142390, bonus=1.000000, nodes=15 <= 49.809492)
                                  @ 24  java.lang.AbstractStringBuilder.newCapacity(int):int (59 bytes)   relevance-based (relevance=0.166032, probability=0.142390, bonus=1.000000, nodes=27 <= 49.809492)
                              @ 7  java.lang.AbstractStringBuilder.ensureCapacityInternal(int):void (39 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=72 <= 300.000000)
                              @ 11  java.lang.AbstractStringBuilder.isLatin1():boolean (19 bytes)   trivial (relevance=1.166030, probability=0.999999, bonus=1.000000, nodes=9)
                                    @ 25  java.lang.Math.min(int, int):int (11 bytes)   trivial (relevance=0.166033, probability=0.142371, bonus=1.000000, nodes=7)
                              @ 18  java.lang.StringLatin1.canEncode(int):boolean (13 bytes)   trivial (relevance=1.166030, probability=0.999999, bonus=1.000000, nodes=8)
                                  @ 32  java.util.Arrays.copyOf(byte[], int):byte[] (33 bytes)   relevance-based (relevance=0.166032, probability=0.142390, bonus=1.000000, nodes=28 <= 49.809492)
                                @ 7  java.lang.AbstractStringBuilder.ensureCapacityInternal(int):void (39 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=72 <= 300.000000)
                                @ 11  java.lang.AbstractStringBuilder.isLatin1():boolean (19 bytes)   trivial (relevance=1.166030, probability=0.999999, bonus=1.000000, nodes=9)
                                @ 18  java.lang.StringLatin1.canEncode(int):boolean (13 bytes)   trivial (relevance=1.166030, probability=0.999999, bonus=1.000000, nodes=8)
                              @ 2  java.lang.AbstractStringBuilder.append(char):AbstractStringBuilder (77 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=90 <= 300.000000)
                            @ 49  java.lang.Math.max(int, int):int (11 bytes)   inline method (bytecode parsing)
                            @ 37  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                @ 3  java.lang.Math.max(int, int):int (11 bytes)   trivial (relevance=0.240702, probability=0.194005, bonus=1.000000, nodes=7)
                              @ 27  jdk.internal.util.ArraysSupport.newLength(int, int, int):int (27 bytes)   relevance-based (relevance=0.240702, probability=0.194005, bonus=1.000000, nodes=15 <= 72.210687)
                                @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                              @ 10  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=8)
                                @ 14  java.lang.Class.getComponentType():Class (14 bytes)   trivial (relevance=0.061352, probability=0.039406, bonus=1.000000, nodes=7)
                                @ 32  java.lang.Math.min(int, int):int (11 bytes)   trivial (relevance=0.302054, probability=0.194005, bonus=1.000000, nodes=7)
                                    @ 3  java.lang.Math.max(int, int):int (11 bytes)   trivial (relevance=0.166032, probability=0.142390, bonus=1.000000, nodes=7)
                              @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   relevance-based (relevance=0.240702, probability=0.194005, bonus=1.000000, nodes=40 <= 72.210687)
                                  @ 29  jdk.internal.util.ArraysSupport.newLength(int, int, int):int (27 bytes)   relevance-based (relevance=0.166032, probability=0.142390, bonus=1.000000, nodes=15 <= 49.809492)
                                @ 24  java.lang.AbstractStringBuilder.newCapacity(int):int (59 bytes)   relevance-based (relevance=0.166032, probability=0.142390, bonus=1.000000, nodes=27 <= 49.809492)
                                  @ 25  java.lang.Math.min(int, int):int (11 bytes)   trivial (relevance=0.166033, probability=0.142371, bonus=1.000000, nodes=7)
                                @ 32  java.util.Arrays.copyOf(byte[], int):byte[] (33 bytes)   relevance-based (relevance=0.166032, probability=0.142390, bonus=1.000000, nodes=28 <= 49.809492)
                              @ 21  java.lang.AbstractStringBuilder.ensureCapacityInternal(int):void (39 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=72 <= 300.000000)
                                  @ 11  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.999999, bonus=1.000000, nodes=5)
                            @ 5  jdk.graal.compiler.replacements.arraycopy.ArrayCopySnippets.checkArrayTypes(Object, Object, ArrayCopySnippets$ArrayCopyTypeCheck):void (98 bytes)   inline method (bytecode parsing)
                            @ 20  jdk.graal.compiler.replacements.arraycopy.ArrayCopySnippets.checkLimits(Object, int, Object, int, int, JavaKind, ArrayCopySnippets$Counters):int[] (230 bytes)   inline method (bytecode parsing)
                                @ 2  java.lang.AbstractStringBuilder.inflateIfNeededFor(String):void (22 bytes)   relevance-based (relevance=1.000000, probability=0.999999, bonus=1.000000, nodes=12 <= 300.000000)
                              @ 21  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                              @ 37  jdk.graal.compiler.nodes.PiNode.piCastPositive(int, GuardingNode):int (9 bytes)   inline method (bytecode parsing)
                                  @ 1  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000010, probability=0.999999, bonus=1.000000, nodes=5)
                              @ 64  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                                @ 15  java.lang.String.getBytes(byte[], int, byte):void (44 bytes)   relevance-based (relevance=1.000000, probability=0.999999, bonus=1.000000, nodes=26 <= 300.000000)
                              @ 81  jdk.graal.compiler.nodes.PiNode.piCastPositive(int, GuardingNode):int (9 bytes)   inline method (bytecode parsing)
                              @ 108  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                              @ 30  java.lang.AbstractStringBuilder.putStringAt(int, String):void (19 bytes)   relevance-based (relevance=1.166030, probability=0.999999, bonus=1.000000, nodes=37 <= 300.000000)
                              @ 125  jdk.graal.compiler.nodes.PiNode.piCastPositive(int, GuardingNode):int (9 bytes)   inline method (bytecode parsing)
                              @ 159  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                              @ 200  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                              @ 217  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                              @ 226  jdk.graal.compiler.replacements.arraycopy.ArrayCopySnippets.createCheckLimitsResult(int, int, int):int[] (18 bytes)   inline method (bytecode parsing)
                            @ 47  jdk.graal.compiler.replacements.arraycopy.ArrayCopySnippets.incrementLengthCounter(int, ArrayCopySnippets$Counters):void (16 bytes)   inline method (bytecode parsing)
                              @ 12  jdk.graal.compiler.replacements.SnippetIntegerHistogram.inc(long):void (215 bytes)   inline method (bytecode parsing)
                            @ 66  jdk.graal.compiler.replacements.arraycopy.ArrayCopyWithDelayedLoweringNode.arraycopy(Object, int, Object, int, int, ArrayCopySnippets$WorkSnippetID, GraphState$GuardsStage, JavaKind):void (17 bytes)   inline method (bytecode parsing)
                            @ 15  jdk.graal.compiler.replacements.ReplacementsUtil.staticAssert(boolean, String):void (12 bytes)   inline method (bytecode parsing)
                            @ 58  jdk.graal.compiler.nodes.java.DynamicNewArrayNode.throwsIllegalArgumentException(Class, Class):boolean (11 bytes)   inline method (bytecode parsing)
                            @ 86  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.loadKlassFromObject(Object, int, LocationIdentity):KlassPointer (32 bytes)   inline method (bytecode parsing)
                              @ 18  jdk.graal.compiler.replacements.ReplacementsUtil.staticAssert(boolean, String):void (12 bytes)   inline method (bytecode parsing)
                            @ 117  jdk.graal.compiler.hotspot.replacements.ClassGetHubNode.piCastNonNull(KlassPointer, GuardingNode):KlassPointer (9 bytes)   inline method (bytecode parsing)
                              @ 4  jdk.internal.util.Preconditions.checkFromIndexSize(int, int, int, BiFunction):int (25 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=15 <= 300.000000)
                            @ 249  jdk.graal.compiler.replacements.AllocationSnippets.allocateArrayImpl(Word, int, int, int, AllocationSnippets$FillContent, int, boolean, boolean, boolean, boolean, AllocationSnippets$AllocationProfilingData):Object (178 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getTLABInfo():Word (5 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getThread():Word (8 bytes)   inline method (bytecode parsing)
                                  @ 4  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.registerAsWord(Register):Word (7 bytes)   inline method (bytecode parsing)
                              @ 9  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.readTlabTop(Word):Word (5 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.readTlabTop(Word):Word (17 bytes)   inline method (bytecode parsing)
                              @ 17  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.readTlabEnd(Word):Word (5 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.readTlabEnd(Word):Word (17 bytes)   inline method (bytecode parsing)
                              @ 36  jdk.graal.compiler.replacements.ReplacementsUtil.dynamicAssert(boolean, String):void (12 bytes)   inline method (bytecode parsing)
                              @ 44  jdk.graal.compiler.replacements.AllocationSnippets.arrayAllocationSize(int, int, int):UnsignedWord (18 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.objectAlignment():int (7 bytes)   inline method (bytecode parsing)
                                @ 11  jdk.graal.compiler.replacements.AllocationSnippets.arrayAllocationSize(int, int, int, int):long (32 bytes)   inline method (bytecode parsing)
                              @ 59  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.useTLAB():boolean (7 bytes)   inline method (bytecode parsing)
                              @ 72  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.shouldAllocateInTLAB(UnsignedWord, boolean):boolean (33 bytes)   inline method (bytecode parsing)
                              @ 102  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.writeTlabTop(Word, Word):void (6 bytes)   inline method (bytecode parsing)
                                @ 2  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.writeTlabTop(Word, Word):void (15 bytes)   inline method (bytecode parsing)
                              @ 109  jdk.graal.compiler.replacements.AllocationSnippets.emitPrefetchAllocate(Word, boolean):void (61 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getPrefetchStyle():int (7 bytes)   inline method (bytecode parsing)
                                @ 9  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getPrefetchLines(boolean):int (18 bytes)   inline method (bytecode parsing)
                                @ 14  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getPrefetchStepSize():int (7 bytes)   inline method (bytecode parsing)
                                @ 20  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getPrefetchDistance():int (7 bytes)   inline method (bytecode parsing)
                              @ 136  jdk.graal.compiler.replacements.AllocationSnippets.formatArray(Word, UnsignedWord, int, Word, AllocationSnippets$FillContent, boolean, int, boolean, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):Object (53 bytes)   inline method (bytecode parsing)
                            @ 1  java.lang.AbstractStringBuilder.length():int (5 bytes)   inline accessor method (bytecode parsing)
                                @ 5  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.initializeObjectHeader(Word, Word, boolean):void (29 bytes)   inline method (bytecode parsing)
                                  @ 25  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.initializeObjectHeader(Word, Word, KlassPointer):void (20 bytes)   inline method (bytecode parsing)
                                @ 11  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.arrayLengthOffset():int (7 bytes)   inline method (bytecode parsing)
                                @ 15  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                                @ 38  jdk.graal.compiler.replacements.AllocationSnippets.fillContents(Word, AllocationSnippets$FillContent, int, UnsignedWord, boolean, boolean, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):void (58 bytes)   inline method (bytecode parsing)
                                  @ 22  jdk.graal.compiler.replacements.AllocationSnippets.zeroMemory(Word, int, UnsignedWord, boolean, boolean, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):void (19 bytes)   inline method (bytecode parsing)
                                    @ 15  jdk.graal.compiler.replacements.AllocationSnippets.fillMemory(long, Word, int, UnsignedWord, boolean, boolean, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):void (194 bytes)   inline method (bytecode parsing)
                                      @ 17  jdk.graal.compiler.replacements.ReplacementsUtil.dynamicAssert(boolean, String):void (12 bytes)   inline method (bytecode parsing)
                                      @ 56  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                                      @ 89  jdk.graal.compiler.replacements.ReplacementsUtil.dynamicAssert(boolean, String):void (12 bytes)   inline method (bytecode parsing)
                                      @ 153  jdk.graal.compiler.replacements.ReplacementsUtil.staticAssert(boolean, String):void (12 bytes)   inline method (bytecode parsing)
                                      @ 167  jdk.graal.compiler.replacements.AllocationSnippets.fillMemoryAlignedUnrollable(long, Word, UnsignedWord, UnsignedWord, boolean, AllocationSnippets$AllocationSnippetCounters):void (68 bytes)   inline method (bytecode parsing)
                                        @ 5  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                          @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                                        @ 44  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                                      @ 190  jdk.graal.compiler.replacements.AllocationSnippets.fillMemoryAligned(long, Word, UnsignedWord, UnsignedWord, boolean, UnsignedWord, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):void (155 bytes)   inline method (bytecode parsing)
                                        @ 17  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getMinimalBulkZeroingSize():int (7 bytes)   inline method (bytecode parsing)
                                        @ 36  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                          @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                                        @ 53  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                            @ 9  java.nio.HeapByteBuffer.ix(int):int (7 bytes)   inline method (bytecode parsing)
                                        @ 105  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                          @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                                        @ 134  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                              @ 6  java.nio.Buffer.nextPutIndex():int (30 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=12 <= 300.000000)
                                @ 44  jdk.graal.compiler.replacements.AllocationSnippets.emitMemoryBarrierIf(boolean):void (14 bytes)   inline method (bytecode parsing)
                                  @ 7  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                              @ 152  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                              @ 158  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.callNewArrayStub(Word, int):Object (35 bytes)   inline method (bytecode parsing)
                                @ 22  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.nonNullOrDeopt(Object):Object (27 bytes)   inline method (bytecode parsing)
                              @ 168  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.profileAllocation(AllocationSnippets$AllocationProfilingData, UnsignedWord):void (51 bytes)   inline method (bytecode parsing)
                              @ 174  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.verifyOop(Object):Object (5 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.verifyOop(Object):Object (19 bytes)   inline method (bytecode parsing)
                            @ 1  java.util.AbstractList.<init>():void (10 bytes)   inline method (bytecode parsing)
                              @ 1  java.util.AbstractCollection.<init>():void (5 bytes)   inline method (bytecode parsing)
                            @ 14  jdk.graal.compiler.hotspot.replacements.arraycopy.HotSpotArraycopySnippets.doCheckcastArraycopySnippet(Object, int, Object, int, int, JavaKind, LocationIdentity, ArrayCopySnippets$Counters):void (228 bytes)   inline method (bytecode parsing)
                              @ 23  jdk.graal.compiler.nodes.PiNode.piCastNonNull(Object, GuardingNode):Object (9 bytes)   inline method (bytecode parsing)
                              @ 32  jdk.graal.compiler.nodes.PiNode.piCastNonNull(Object, GuardingNode):Object (9 bytes)   inline method (bytecode parsing)
                              @ 39  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.loadHub(Object):KlassPointer (5 bytes)   inline method (bytecode parsing)
                              @ 46  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.loadHub(Object):KlassPointer (5 bytes)   inline method (bytecode parsing)
                              @ 131  jdk.graal.compiler.hotspot.replacements.arraycopy.HotSpotArraycopySnippets.getDestElemClass(KlassPointer):KlassPointer (14 bytes)   inline method (bytecode parsing)
                              @ 139  jdk.graal.compiler.hotspot.replacements.arraycopy.HotSpotArraycopySnippets.getSuperCheckOffset(KlassPointer):Word (20 bytes)   inline method (bytecode parsing)
                              @ 149  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                              @ 159  jdk.graal.compiler.replacements.SnippetCounter.add(int):void (13 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                 n            @ 224  java.lang.System.arraycopy(Object, int, Object, int, int):void (0 bytes)   not inlining native method (bytecode parsing)
                                @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                              @ 1  java.lang.String.length():int (11 bytes)   trivial (relevance=1.270951, probability=1.000000, bonus=1.000000, nodes=8)
                              @ 96  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                @ 6  jdk.internal.util.Preconditions.checkFromToIndex(int, int, int, BiFunction):int (24 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=14 <= 300.000000)
                                @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                              @ 106  jdk.graal.compiler.replacements.SnippetCounter.add(int):void (13 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                              @ 8  java.lang.String.checkBoundsBeginEnd(int, int, int):void (11 bytes)   relevance-based (relevance=1.270951, probability=1.000000, bonus=1.000000, nodes=13 <= 300.000000)
                              @ 119  jdk.graal.compiler.hotspot.replacements.arraycopy.HotSpotArraycopySnippets.heapWordSize():int (7 bytes)   inline method (bytecode parsing)
                              @ 122  jdk.graal.compiler.replacements.arraycopy.ArrayCopyCallNode.arraycopyObjectKillsAny(Object, int, Object, int, int, int):void (21 bytes)   inline method (bytecode parsing)
                                @ 9  org.graalvm.word.LocationIdentity.any():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                              @ 28  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.233164, probability=0.970269, bonus=1.000000, nodes=9)
                            @ 20  java.lang.String.<init>(byte[], byte):void (15 bytes)   inline method (bytecode parsing)
                            @ 13  java.util.Arrays.copyOfRangeByte(byte[], int, int):byte[] (33 bytes)   inline method (bytecode parsing)
                              @ 2  java.util.Arrays.checkLength(int, int):void (38 bytes)   inline method (bytecode parsing)
                                  @ 24  java.lang.Math.min(int, int):int (11 bytes)   trivial (relevance=1.769862, probability=0.871451, bonus=1.000000, nodes=7)
                                @ 16  java.util.Arrays.copyOfRange(byte[], int, int):byte[] (25 bytes)   relevance-based (relevance=1.000000, probability=0.970239, bonus=1.000000, nodes=44 <= 300.000000)
                              @ 41  java.lang.StringLatin1.newString(byte[], int, int):String (24 bytes)   relevance-based (relevance=1.233164, probability=0.970269, bonus=1.000000, nodes=62 <= 300.000000)
                            @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.registerAsWord(Register):Word (7 bytes)   inline method (bytecode parsing)
                            @ 6  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.readExceptionOop(Word):Object (14 bytes)   inline method (bytecode parsing)
                            @ 12  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.writeExceptionOop(Word, Object):void (15 bytes)   inline method (bytecode parsing)
                            @ 22  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.writeExceptionPc(Word, Word):void (15 bytes)   inline method (bytecode parsing)
                            @ 20  java.lang.String.<init>(byte[], byte):void (15 bytes)   inline method (bytecode parsing)
                            @ 13  java.util.Arrays.copyOfRangeByte(byte[], int, int):byte[] (33 bytes)   inline method (bytecode parsing)
                              @ 2  java.util.Arrays.checkLength(int, int):void (38 bytes)   inline method (bytecode parsing)
                                @ 24  java.lang.Math.min(int, int):int (11 bytes)   trivial (relevance=1.767405, probability=0.898269, bonus=1.000000, nodes=7)
                              @ 2  java.util.HashMap.getNode(Object):HashMap$Node (150 bytes)   not inlining too large previous low-level graph (low-level-nodes: 503, relevance=1.176852, probability=1.000000, bonus=1.000000, nodes=108)
                              @ 16  java.util.Arrays.copyOfRange(byte[], int, int):byte[] (25 bytes)   relevance-based (relevance=1.000000, probability=0.999969, bonus=1.000000, nodes=44 <= 300.000000)
                              @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=9)
                                @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                              @ 14  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=8)
                            @ 11  java.lang.Math.max(int, int):int (11 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.StringLatin1.canEncode(int):boolean (13 bytes)   trivial (relevance=1.002075, probability=1.000000, bonus=1.000000, nodes=8)
                                @ 18  java.lang.Math.min(int, int):int (11 bytes)   trivial (relevance=1.002075, probability=1.000000, bonus=1.000000, nodes=7)
                              @ 17  java.lang.StringLatin1.indexOf(byte[], int, int, int):int (37 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=24 <= 300.000000)
                            @ 11  java.lang.Math.max(int, int):int (11 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.StringLatin1.canEncode(int):boolean (13 bytes)   trivial (relevance=1.002075, probability=1.000000, bonus=1.000000, nodes=8)
                              @ 18  java.lang.Math.min(int, int):int (11 bytes)   trivial (relevance=1.002075, probability=1.000000, bonus=1.000000, nodes=7)
                            @ 48  java.lang.Character.isWhitespace(char):boolean (5 bytes)   inline method (bytecode parsing)
                            @ 1  java.util.AbstractCollection.<init>():void (5 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.Character.isWhitespace(int):boolean (9 bytes)   inline method (bytecode parsing)
                                  @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                                @ 36  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=8)
                                  @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=9)
                            @ 3  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                                  @ 12  java.lang.StringLatin1.charAt(byte[], int):char (15 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                                @ 50  java.lang.String.charAt(int):char (25 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=16 <= 300.000000)
                              @ 1  sun.reflect.generics.parser.SignatureParser.current():char (59 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=31 <= 300.000000)
                              @ 1  java.lang.CharacterData.of(int):CharacterData (136 bytes)   trivial (relevance=1.000000, probability=8.232512, bonus=1.000000, nodes=8)
                                @ 2  java.lang.CharacterDataLatin1.getProperties(int):int (11 bytes)   trivial (relevance=1.000000, probability=8.232512, bonus=1.000000, nodes=8)
                              @ 5  java.lang.CharacterDataLatin1.isWhitespace(int):boolean (23 bytes)   relevance-based (relevance=1.000000, probability=8.232512, bonus=1.000000, nodes=13 <= 300.000000)
                                  @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=8.232512, bonus=1.000000, nodes=5)
                                @ 36  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000000, probability=8.232512, bonus=1.000000, nodes=8)
                              @ 55  sun.reflect.generics.parser.SignatureParser.advance():void (53 bytes)   relevance-based (relevance=1.000000, probability=8.232512, bonus=1.000000, nodes=20 <= 300.000000)
                                  @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=8.232512, bonus=1.000000, nodes=5)
                                @ 36  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000000, probability=8.232512, bonus=1.000000, nodes=8)
                                  @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=8.232512, bonus=1.000000, nodes=9)
                            @ 3  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                                  @ 12  java.lang.StringLatin1.charAt(byte[], int):char (15 bytes)   relevance-based (relevance=1.000000, probability=8.232512, bonus=1.000000, nodes=11 <= 300.000000)
                                @ 50  java.lang.String.charAt(int):char (25 bytes)   relevance-based (relevance=1.000000, probability=8.232512, bonus=1.000000, nodes=16 <= 300.000000)
                              @ 59  sun.reflect.generics.parser.SignatureParser.current():char (59 bytes)   relevance-based (relevance=1.000000, probability=8.232512, bonus=1.000000, nodes=31 <= 300.000000)
                              @ 9  java.util.HashMap$Node.<init>(int, Object, Object, HashMap$Node):void (26 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=17 <= 300.000000)
                            @ 12  jdk.graal.compiler.replacements.gc.G1WriteBarrierSnippets.satbBarrier(AddressNode$Address, Object, Object, boolean, boolean, int, G1WriteBarrierSnippets$Counters):void (417 bytes)   inline method (bytecode parsing)
                              @ 10  jdk.graal.compiler.hotspot.replacements.HotSpotG1WriteBarrierSnippets.getThread():Word (8 bytes)   inline method (bytecode parsing)
                                @ 4  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.registerAsWord(Register):Word (7 bytes)   inline method (bytecode parsing)
                              @ 17  jdk.graal.compiler.replacements.gc.G1WriteBarrierSnippets.verifyOop(Object):void (17 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotG1WriteBarrierSnippets.verifyOops():boolean (7 bytes)   inline method (bytecode parsing)
                              @ 29  jdk.graal.compiler.hotspot.replacements.HotSpotG1WriteBarrierSnippets.satbQueueMarkingActiveOffset():int (7 bytes)   inline method (bytecode parsing)
                              @ 43  jdk.graal.compiler.replacements.gc.G1WriteBarrierSnippets.isTracingActive(int):boolean (30 bytes)   inline method (bytecode parsing)
                              @ 198  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                              @ 288  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                              @ 315  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                              @ 321  jdk.graal.compiler.hotspot.replacements.HotSpotG1WriteBarrierSnippets.satbQueueIndexOffset():int (7 bytes)   inline method (bytecode parsing)
                              @ 353  jdk.graal.compiler.hotspot.replacements.HotSpotG1WriteBarrierSnippets.satbQueueBufferOffset():int (7 bytes)   inline method (bytecode parsing)
                              @ 370  jdk.graal.compiler.hotspot.replacements.HotSpotG1WriteBarrierSnippets.wordSize():int (4 bytes)   inline method (bytecode parsing)
                              @ 396  jdk.graal.compiler.hotspot.replacements.HotSpotG1WriteBarrierSnippets.satbQueueIndexOffset():int (7 bytes)   inline method (bytecode parsing)
                              @ 413  jdk.graal.compiler.replacements.gc.G1WriteBarrierSnippets.g1PreBarrierStub(Object):void (9 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotG1WriteBarrierSnippets.preWriteBarrierCallDescriptor():ForeignCallDescriptor (4 bytes)   inline method (bytecode parsing)
                            @ 36  java.util.BitSet.wordIndex(int):int (5 bytes)   inline method (bytecode parsing)
                              @ 14  java.lang.Math.min(int, int):int (11 bytes)   trivial (relevance=1.644288, probability=1.000000, bonus=1.000000, nodes=7)
                                @ 17  java.lang.Math.max(int, int):int (11 bytes)   trivial (relevance=0.467105, probability=0.193631, bonus=1.000000, nodes=7)
                              @ 32  java.util.BitSet.checkInvariants():void (111 bytes)   trivial (relevance=1.062641, probability=1.000000, bonus=1.000000, nodes=4)
                                  @ 25  java.lang.Math.min(int, int):int (11 bytes)   trivial (relevance=0.467110, probability=0.193631, bonus=1.000000, nodes=7)
                                @ 27  java.util.Arrays.copyOf(long[], int):long[] (33 bytes)   relevance-based (relevance=0.467105, probability=0.193631, bonus=1.000000, nodes=21 <= 140.131518)
                              @ 34  java.util.BitSet.ensureCapacity(int):void (39 bytes)   relevance-based (relevance=1.000000, probability=0.608166, bonus=1.000000, nodes=41 <= 300.000000)
                              @ 101  java.util.BitSet.checkInvariants():void (111 bytes)   trivial (relevance=2.412328, probability=0.999994, bonus=1.000000, nodes=4)
                            @ 5  jdk.graal.compiler.replacements.arraycopy.ArrayCopySnippets.checkArrayTypes(Object, Object, ArrayCopySnippets$ArrayCopyTypeCheck):void (98 bytes)   inline method (bytecode parsing)
                            @ 20  jdk.graal.compiler.replacements.arraycopy.ArrayCopySnippets.checkLimits(Object, int, Object, int, int, JavaKind, ArrayCopySnippets$Counters):int[] (230 bytes)   inline method (bytecode parsing)
                              @ 21  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                              @ 37  jdk.graal.compiler.nodes.PiNode.piCastPositive(int, GuardingNode):int (9 bytes)   inline method (bytecode parsing)
                              @ 64  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                              @ 81  jdk.graal.compiler.nodes.PiNode.piCastPositive(int, GuardingNode):int (9 bytes)   inline method (bytecode parsing)
                              @ 108  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                              @ 125  jdk.graal.compiler.nodes.PiNode.piCastPositive(int, GuardingNode):int (9 bytes)   inline method (bytecode parsing)
                              @ 159  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                              @ 200  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                              @ 217  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                              @ 226  jdk.graal.compiler.replacements.arraycopy.ArrayCopySnippets.createCheckLimitsResult(int, int, int):int[] (18 bytes)   inline method (bytecode parsing)
                            @ 47  jdk.graal.compiler.replacements.arraycopy.ArrayCopySnippets.incrementLengthCounter(int, ArrayCopySnippets$Counters):void (16 bytes)   inline method (bytecode parsing)
                              @ 12  jdk.graal.compiler.replacements.SnippetIntegerHistogram.inc(long):void (215 bytes)   inline method (bytecode parsing)
                            @ 52  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                            @ 59  jdk.graal.compiler.replacements.SnippetCounter.add(int):void (13 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                            @ 77  jdk.graal.compiler.replacements.arraycopy.ArrayCopySnippets.doArraycopyExactStubCallSnippet(Object, int, Object, int, int, JavaKind, LocationIdentity, ArrayCopySnippets$Counters):void (19 bytes)   inline method (bytecode parsing)
                              @ 12  jdk.graal.compiler.hotspot.replacements.arraycopy.HotSpotArraycopySnippets.heapWordSize():int (7 bytes)   inline method (bytecode parsing)
                              @ 15  jdk.graal.compiler.replacements.arraycopy.ArrayCopyCallNode.arraycopy(Object, int, Object, int, int, JavaKind, LocationIdentity, int):void (19 bytes)   inline method (bytecode parsing)
                            @ 23  jdk.graal.compiler.replacements.AllocationSnippets.allocateArrayImpl(Word, int, int, int, AllocationSnippets$FillContent, int, boolean, boolean, boolean, boolean, AllocationSnippets$AllocationProfilingData):Object (178 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getTLABInfo():Word (5 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getThread():Word (8 bytes)   inline method (bytecode parsing)
                                  @ 4  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.registerAsWord(Register):Word (7 bytes)   inline method (bytecode parsing)
                              @ 9  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.readTlabTop(Word):Word (5 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.readTlabTop(Word):Word (17 bytes)   inline method (bytecode parsing)
                              @ 17  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.readTlabEnd(Word):Word (5 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.readTlabEnd(Word):Word (17 bytes)   inline method (bytecode parsing)
                              @ 36  jdk.graal.compiler.replacements.ReplacementsUtil.dynamicAssert(boolean, String):void (12 bytes)   inline method (bytecode parsing)
                              @ 44  jdk.graal.compiler.replacements.AllocationSnippets.arrayAllocationSize(int, int, int):UnsignedWord (18 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.objectAlignment():int (7 bytes)   inline method (bytecode parsing)
                                @ 11  jdk.graal.compiler.replacements.AllocationSnippets.arrayAllocationSize(int, int, int, int):long (32 bytes)   inline method (bytecode parsing)
                              @ 59  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.useTLAB():boolean (7 bytes)   inline method (bytecode parsing)
                              @ 72  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.shouldAllocateInTLAB(UnsignedWord, boolean):boolean (33 bytes)   inline method (bytecode parsing)
                              @ 102  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.writeTlabTop(Word, Word):void (6 bytes)   inline method (bytecode parsing)
                                @ 2  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.writeTlabTop(Word, Word):void (15 bytes)   inline method (bytecode parsing)
                              @ 109  jdk.graal.compiler.replacements.AllocationSnippets.emitPrefetchAllocate(Word, boolean):void (61 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getPrefetchStyle():int (7 bytes)   inline method (bytecode parsing)
                                @ 9  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getPrefetchLines(boolean):int (18 bytes)   inline method (bytecode parsing)
                                @ 14  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getPrefetchStepSize():int (7 bytes)   inline method (bytecode parsing)
                                @ 20  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getPrefetchDistance():int (7 bytes)   inline method (bytecode parsing)
                              @ 136  jdk.graal.compiler.replacements.AllocationSnippets.formatArray(Word, UnsignedWord, int, Word, AllocationSnippets$FillContent, boolean, int, boolean, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):Object (53 bytes)   inline method (bytecode parsing)
                                @ 5  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.initializeObjectHeader(Word, Word, boolean):void (29 bytes)   inline method (bytecode parsing)
                                  @ 25  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.initializeObjectHeader(Word, Word, KlassPointer):void (20 bytes)   inline method (bytecode parsing)
                                @ 11  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.arrayLengthOffset():int (7 bytes)   inline method (bytecode parsing)
                                @ 15  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                                @ 38  jdk.graal.compiler.replacements.AllocationSnippets.fillContents(Word, AllocationSnippets$FillContent, int, UnsignedWord, boolean, boolean, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):void (58 bytes)   inline method (bytecode parsing)
                                  @ 22  jdk.graal.compiler.replacements.AllocationSnippets.zeroMemory(Word, int, UnsignedWord, boolean, boolean, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):void (19 bytes)   inline method (bytecode parsing)
                                    @ 15  jdk.graal.compiler.replacements.AllocationSnippets.fillMemory(long, Word, int, UnsignedWord, boolean, boolean, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):void (194 bytes)   inline method (bytecode parsing)
                                      @ 17  jdk.graal.compiler.replacements.ReplacementsUtil.dynamicAssert(boolean, String):void (12 bytes)   inline method (bytecode parsing)
                                      @ 56  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                                      @ 89  jdk.graal.compiler.replacements.ReplacementsUtil.dynamicAssert(boolean, String):void (12 bytes)   inline method (bytecode parsing)
                                      @ 153  jdk.graal.compiler.replacements.ReplacementsUtil.staticAssert(boolean, String):void (12 bytes)   inline method (bytecode parsing)
                                      @ 167  jdk.graal.compiler.replacements.AllocationSnippets.fillMemoryAlignedUnrollable(long, Word, UnsignedWord, UnsignedWord, boolean, AllocationSnippets$AllocationSnippetCounters):void (68 bytes)   inline method (bytecode parsing)
                                        @ 5  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                          @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                                        @ 44  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                                      @ 190  jdk.graal.compiler.replacements.AllocationSnippets.fillMemoryAligned(long, Word, UnsignedWord, UnsignedWord, boolean, UnsignedWord, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):void (155 bytes)   inline method (bytecode parsing)
                                        @ 17  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getMinimalBulkZeroingSize():int (7 bytes)   inline method (bytecode parsing)
                                        @ 36  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                          @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                                        @ 53  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                                        @ 105  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                          @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                                        @ 134  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                                @ 44  jdk.graal.compiler.replacements.AllocationSnippets.emitMemoryBarrierIf(boolean):void (14 bytes)   inline method (bytecode parsing)
                                  @ 7  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                              @ 152  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                              @ 158  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.callNewArrayStub(Word, int):Object (35 bytes)   inline method (bytecode parsing)
                                @ 22  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.nonNullOrDeopt(Object):Object (27 bytes)   inline method (bytecode parsing)
                              @ 168  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.profileAllocation(AllocationSnippets$AllocationProfilingData, UnsignedWord):void (51 bytes)   inline method (bytecode parsing)
                              @ 174  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.verifyOop(Object):Object (5 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.verifyOop(Object):Object (19 bytes)   inline method (bytecode parsing)
                              @ 2  java.lang.ref.Reference.refersToImpl(Object):boolean (6 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=12 <= 300.000000)
                            @ 1  org.graalvm.collections.EconomicMapImpl.size():int (10 bytes)   inline method (bytecode parsing)
                            @ 84  org.graalvm.collections.EconomicMapImpl.getKey(int):Object (9 bytes)   inline method (bytecode parsing)
                              @ 6  org.graalvm.collections.EconomicMapImpl.getHashThreshold():int (22 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=12 <= 300.000000)
                              @ 99  org.graalvm.collections.EconomicMapImpl.putHashEntry(Object, int, boolean):void (161 bytes)   not inlining too large previous low-level graph (low-level-nodes: 479, relevance=1.000000, probability=22.685748, bonus=1.000000, nodes=67)
                                @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                              @ 1  java.lang.String.length():int (11 bytes)   trivial (relevance=1.183361, probability=1.000000, bonus=1.000000, nodes=8)
                              @ 43  jdk.internal.org.objectweb.asm.ByteVector.enlarge(int):void (73 bytes)   relevance-based (relevance=0.183361, probability=0.154950, bonus=1.000000, nodes=28 <= 55.008428)
                                @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=26.688911, bonus=1.000000, nodes=9)
                            @ 3  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                                @ 12  java.lang.StringLatin1.charAt(byte[], int):char (15 bytes)   relevance-based (relevance=1.000000, probability=26.688911, bonus=1.000000, nodes=11 <= 300.000000)
                              @ 85  java.lang.String.charAt(int):char (25 bytes)   relevance-based (relevance=1.000000, probability=26.688911, bonus=1.000000, nodes=16 <= 300.000000)
                            @ 36  java.lang.Long.<init>(long):void (10 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.Number.<init>():void (5 bytes)   inline method (bytecode parsing)
                            @ 4  java.lang.Long.hashCode(long):int (8 bytes)   inline method (bytecode parsing)
                            @ 1  java.util.AbstractList.<init>():void (10 bytes)   inline method (bytecode parsing)
                              @ 1  java.util.AbstractCollection.<init>():void (5 bytes)   inline method (bytecode parsing)
                            @ 5  java.lang.AbstractStringBuilder.getValue():byte[] (5 bytes)   inline accessor method (bytecode parsing)
                            @ 20  java.lang.ClassValue$Entry.value():Object (9 bytes)   inline method (bytecode parsing)
                            @ 1  java.lang.AbstractStringBuilder.length():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 14  java.lang.ClassValue$ClassValueMap.getCache():ClassValue$Entry[] (5 bytes)   inline accessor method (bytecode parsing)
                              @ 10  java.lang.StringBuilder.length():int (5 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                              @ 1  java.lang.ClassValue.getCacheCarefully(Class):ClassValue$Entry[] (20 bytes)   relevance-based (relevance=1.007445, probability=1.000000, bonus=1.000000, nodes=14 <= 300.000000)
                            @ 6  java.lang.ClassValue$ClassValueMap.loadFromCache(ClassValue$Entry[], int):ClassValue$Entry (9 bytes)   inline method (bytecode parsing)
                            @ 9  java.lang.ClassValue.castEntry(ClassValue$Entry):ClassValue$Entry (2 bytes)   inline method (bytecode parsing)
                              @ 16  java.lang.AbstractStringBuilder.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=9)
                              @ 7  java.lang.ClassValue$ClassValueMap.probeHomeLocation(ClassValue$Entry[], ClassValue):ClassValue$Entry (13 bytes)   relevance-based (relevance=1.007126, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                            @ 13  java.util.Arrays.copyOfRangeByte(byte[], int, int):byte[] (33 bytes)   inline method (bytecode parsing)
                              @ 2  java.util.Arrays.checkLength(int, int):void (38 bytes)   inline method (bytecode parsing)
                            @ 5  java.lang.ref.Reference.get():Object (5 bytes)   inline accessor method (bytecode parsing)
                                @ 24  java.lang.Math.min(int, int):int (11 bytes)   trivial (relevance=1.000010, probability=0.788879, bonus=1.000000, nodes=7)
                              @ 13  java.lang.ClassValue.match(ClassValue$Entry):boolean (21 bytes)   relevance-based (relevance=1.007126, probability=1.000000, bonus=1.000000, nodes=25 <= 300.000000)
                              @ 32  java.util.Arrays.copyOfRange(byte[], int, int):byte[] (25 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=33 <= 300.000000)
                              @ 1  java.lang.ClassValue$Entry.assertNotPromise():void (22 bytes)   trivial (relevance=0.999658, probability=0.992585, bonus=1.000000, nodes=4)
                            @ 11  java.lang.ClassValue$Entry.value():Object (9 bytes)   inline method (bytecode parsing)
                              @ 27  java.lang.ClassValue.getFromBackup(ClassValue$Entry[], Class):Object (21 bytes)   not inlining relevance-based (relevance=0.007468, probability=0.007415, bonus=1.000000, nodes=24 > 2.240419)
                            @ 10  jdk.graal.compiler.replacements.gc.G1WriteBarrierSnippets.satbBarrier(AddressNode$Address, Object, Object, boolean, boolean, int, G1WriteBarrierSnippets$Counters):void (417 bytes)   inline method (bytecode parsing)
                              @ 10  jdk.graal.compiler.hotspot.replacements.HotSpotG1WriteBarrierSnippets.getThread():Word (8 bytes)   inline method (bytecode parsing)
                                @ 4  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.registerAsWord(Register):Word (7 bytes)   inline method (bytecode parsing)
                              @ 17  jdk.graal.compiler.replacements.gc.G1WriteBarrierSnippets.verifyOop(Object):void (17 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotG1WriteBarrierSnippets.verifyOops():boolean (7 bytes)   inline method (bytecode parsing)
                              @ 29  jdk.graal.compiler.hotspot.replacements.HotSpotG1WriteBarrierSnippets.satbQueueMarkingActiveOffset():int (7 bytes)   inline method (bytecode parsing)
                              @ 43  jdk.graal.compiler.replacements.gc.G1WriteBarrierSnippets.isTracingActive(int):boolean (30 bytes)   inline method (bytecode parsing)
                              @ 198  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                              @ 288  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                              @ 315  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                              @ 321  jdk.graal.compiler.hotspot.replacements.HotSpotG1WriteBarrierSnippets.satbQueueIndexOffset():int (7 bytes)   inline method (bytecode parsing)
                              @ 353  jdk.graal.compiler.hotspot.replacements.HotSpotG1WriteBarrierSnippets.satbQueueBufferOffset():int (7 bytes)   inline method (bytecode parsing)
                              @ 370  jdk.graal.compiler.hotspot.replacements.HotSpotG1WriteBarrierSnippets.wordSize():int (4 bytes)   inline method (bytecode parsing)
                              @ 396  jdk.graal.compiler.hotspot.replacements.HotSpotG1WriteBarrierSnippets.satbQueueIndexOffset():int (7 bytes)   inline method (bytecode parsing)
                              @ 413  jdk.graal.compiler.replacements.gc.G1WriteBarrierSnippets.g1PreBarrierStub(Object):void (9 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotG1WriteBarrierSnippets.preWriteBarrierCallDescriptor():ForeignCallDescriptor (4 bytes)   inline method (bytecode parsing)
                              @ 17  som.Vector.lambda$remove$0(Object, boolean[], Object[], int[], Object):void (28 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=26 <= 300.000000)
                              @ 14  java.lang.Class.getComponentType():Class (14 bytes)   trivial (relevance=0.282268, probability=0.220132, bonus=1.000000, nodes=7)
                              @ 32  java.lang.Math.min(int, int):int (11 bytes)   trivial (relevance=1.282268, probability=1.000000, bonus=1.000000, nodes=7)
                              @ 4  java.util.ArrayList$Itr.hasNext():boolean (20 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=22 <= 300.000000)
                            @ 12  java.util.ArrayDeque.elementAt(Object[], int):Object (4 bytes)   inline method (bytecode parsing)
                              @ 28  java.util.ArrayDeque.nonNullElementAt(Object[], int):Object (18 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=8)
                              @ 44  java.util.ArrayDeque.inc(int, int):int (12 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=10 <= 300.000000)
                                  @ 28  java.util.ArrayDeque.inc(int, int):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.999585, bonus=1.000000, nodes=10 <= 300.000000)
                                @ 1  java.util.ArrayDeque.pollFirst():Object (36 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=26 <= 300.000000)
                              @ 1  java.util.ArrayDeque.removeFirst():Object (19 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=28 <= 300.000000)
                            @ 36  java.util.BitSet.wordIndex(int):int (5 bytes)   inline method (bytecode parsing)
                                @ 1  java.util.ArrayList$Itr.checkForComodification():void (23 bytes)   trivial (relevance=1.000000, probability=0.783691, bonus=1.000000, nodes=9)
                              @ 32  java.util.BitSet.checkInvariants():void (111 bytes)   trivial (relevance=1.211152, probability=1.000000, bonus=1.000000, nodes=4)
                              @ 4  java.util.ArrayList$Itr.next():Object (66 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=39 <= 300.000000)
                                @ 35  java.util.ArrayDeque.inc(int, int):int (12 bytes)   relevance-based (relevance=1.007944, probability=1.000000, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 55  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                              @ 3  java.lang.AbstractStringBuilder.<init>(int):void (39 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                                @ 47  java.util.ArrayDeque.grow(int):void (165 bytes)   not inlining relevance-based (relevance=0.007944, probability=0.007881, bonus=1.000000, nodes=75 > 2.383153)
                              @ 2  java.util.ArrayDeque.addLast(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=31 <= 300.000000)
                            @ 23  jdk.graal.compiler.replacements.AllocationSnippets.allocateArrayImpl(Word, int, int, int, AllocationSnippets$FillContent, int, boolean, boolean, boolean, boolean, AllocationSnippets$AllocationProfilingData):Object (178 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getTLABInfo():Word (5 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getThread():Word (8 bytes)   inline method (bytecode parsing)
                                  @ 4  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.registerAsWord(Register):Word (7 bytes)   inline method (bytecode parsing)
                              @ 9  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.readTlabTop(Word):Word (5 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.readTlabTop(Word):Word (17 bytes)   inline method (bytecode parsing)
                              @ 17  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.readTlabEnd(Word):Word (5 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.readTlabEnd(Word):Word (17 bytes)   inline method (bytecode parsing)
                              @ 36  jdk.graal.compiler.replacements.ReplacementsUtil.dynamicAssert(boolean, String):void (12 bytes)   inline method (bytecode parsing)
                              @ 44  jdk.graal.compiler.replacements.AllocationSnippets.arrayAllocationSize(int, int, int):UnsignedWord (18 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.objectAlignment():int (7 bytes)   inline method (bytecode parsing)
                                @ 11  jdk.graal.compiler.replacements.AllocationSnippets.arrayAllocationSize(int, int, int, int):long (32 bytes)   inline method (bytecode parsing)
                              @ 59  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.useTLAB():boolean (7 bytes)   inline method (bytecode parsing)
                              @ 72  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.shouldAllocateInTLAB(UnsignedWord, boolean):boolean (33 bytes)   inline method (bytecode parsing)
                              @ 102  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.writeTlabTop(Word, Word):void (6 bytes)   inline method (bytecode parsing)
                                @ 2  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.writeTlabTop(Word, Word):void (15 bytes)   inline method (bytecode parsing)
                              @ 109  jdk.graal.compiler.replacements.AllocationSnippets.emitPrefetchAllocate(Word, boolean):void (61 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getPrefetchStyle():int (7 bytes)   inline method (bytecode parsing)
                                @ 9  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getPrefetchLines(boolean):int (18 bytes)   inline method (bytecode parsing)
                                @ 14  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getPrefetchStepSize():int (7 bytes)   inline method (bytecode parsing)
                                @ 20  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getPrefetchDistance():int (7 bytes)   inline method (bytecode parsing)
                              @ 136  jdk.graal.compiler.replacements.AllocationSnippets.formatArray(Word, UnsignedWord, int, Word, AllocationSnippets$FillContent, boolean, int, boolean, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):Object (53 bytes)   inline method (bytecode parsing)
                                @ 5  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.initializeObjectHeader(Word, Word, boolean):void (29 bytes)   inline method (bytecode parsing)
                                  @ 25  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.initializeObjectHeader(Word, Word, KlassPointer):void (20 bytes)   inline method (bytecode parsing)
                                @ 11  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.arrayLengthOffset():int (7 bytes)   inline method (bytecode parsing)
                                @ 15  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                                @ 38  jdk.graal.compiler.replacements.AllocationSnippets.fillContents(Word, AllocationSnippets$FillContent, int, UnsignedWord, boolean, boolean, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):void (58 bytes)   inline method (bytecode parsing)
                                  @ 22  jdk.graal.compiler.replacements.AllocationSnippets.zeroMemory(Word, int, UnsignedWord, boolean, boolean, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):void (19 bytes)   inline method (bytecode parsing)
                                    @ 15  jdk.graal.compiler.replacements.AllocationSnippets.fillMemory(long, Word, int, UnsignedWord, boolean, boolean, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):void (194 bytes)   inline method (bytecode parsing)
                                      @ 17  jdk.graal.compiler.replacements.ReplacementsUtil.dynamicAssert(boolean, String):void (12 bytes)   inline method (bytecode parsing)
                                      @ 56  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                                      @ 89  jdk.graal.compiler.replacements.ReplacementsUtil.dynamicAssert(boolean, String):void (12 bytes)   inline method (bytecode parsing)
                                      @ 153  jdk.graal.compiler.replacements.ReplacementsUtil.staticAssert(boolean, String):void (12 bytes)   inline method (bytecode parsing)
                                      @ 167  jdk.graal.compiler.replacements.AllocationSnippets.fillMemoryAlignedUnrollable(long, Word, UnsignedWord, UnsignedWord, boolean, AllocationSnippets$AllocationSnippetCounters):void (68 bytes)   inline method (bytecode parsing)
                                        @ 5  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                          @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                                        @ 44  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                                      @ 190  jdk.graal.compiler.replacements.AllocationSnippets.fillMemoryAligned(long, Word, UnsignedWord, UnsignedWord, boolean, UnsignedWord, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):void (155 bytes)   inline method (bytecode parsing)
                                        @ 17  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getMinimalBulkZeroingSize():int (7 bytes)   inline method (bytecode parsing)
                                        @ 36  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                          @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                                        @ 53  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                                        @ 105  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                          @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                                        @ 134  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                                @ 44  jdk.graal.compiler.replacements.AllocationSnippets.emitMemoryBarrierIf(boolean):void (14 bytes)   inline method (bytecode parsing)
                              @ 152  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                              @ 158  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.callNewArrayStub(Word, int):Object (35 bytes)   inline method (bytecode parsing)
                                @ 22  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.nonNullOrDeopt(Object):Object (27 bytes)   inline method (bytecode parsing)
                              @ 168  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.profileAllocation(AllocationSnippets$AllocationProfilingData, UnsignedWord):void (51 bytes)   inline method (bytecode parsing)
                              @ 174  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.verifyOop(Object):Object (5 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.verifyOop(Object):Object (19 bytes)   inline method (bytecode parsing)
                            @ 17  java.lang.Enum.ordinal():int (5 bytes)   inline accessor method (bytecode parsing)
                              @ 2  java.util.EnumSet.typeCheck(Enum):void (59 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=12 <= 300.000000)
                            @ 5  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                              @ 9  java.lang.AbstractStringBuilder.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=9)
                            @ 5  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                                @ 9  java.lang.AbstractStringBuilder.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=9)
                              @ 2  java.lang.AbstractStringBuilder.charAt(int):char (36 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=19 <= 300.000000)
                            @ 32  java.util.BitSet.wordIndex(int):int (5 bytes)   inline method (bytecode parsing)
                                  @ 17  java.lang.Math.max(int, int):int (11 bytes)   trivial (relevance=0.064258, probability=0.038759, bonus=1.000000, nodes=7)
                                  @ 27  java.util.Arrays.copyOf(long[], int):long[] (33 bytes)   not inlining relevance-based (relevance=0.064258, probability=0.038759, bonus=1.000000, nodes=22 > 19.277281)
                            @ 34  java.lang.ref.Reference.refersTo(Object):boolean (6 bytes)   inline method (bytecode parsing)
                                @ 14  java.util.BitSet.ensureCapacity(int):void (39 bytes)   relevance-based (relevance=0.142406, probability=0.124655, bonus=1.000000, nodes=28 <= 42.721938)
                              @ 38  java.util.BitSet.expandTo(int):void (23 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=41 <= 300.000000)
                              @ 2  java.lang.ref.Reference.refersToImpl(Object):boolean (6 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=12 <= 300.000000)
                              @ 54  java.util.BitSet.checkInvariants():void (111 bytes)   trivial (relevance=1.142406, probability=1.000000, bonus=1.000000, nodes=4)
                              @ 13  java.util.ArrayDeque.sub(int, int, int):int (14 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=18 <= 300.000000)
                            @ 13  java.lang.StringBuilder.length():int (5 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.AbstractStringBuilder.length():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 101  java.util.Formatter$Flags.contains(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 261  java.lang.StringBuilder.append(char):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 291  java.lang.StringBuilder.append(char):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 337  java.lang.StringBuilder.length():int (5 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.AbstractStringBuilder.length():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 13  java.text.DecimalFormatSymbols.getZeroDigit():char (5 bytes)   inline accessor method (bytecode parsing)
                            @ 9  java.text.DecimalFormatSymbols.getLocale():Locale (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 13  java.util.Locale.equals(Object):boolean (75 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=8)
                                @ 10  java.util.Formatter.getDecimalFormatSymbols(Locale):DecimalFormatSymbols (32 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=15 <= 300.000000)
                              @ 20  java.util.Formatter.getZero(Locale):char (17 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=20 <= 300.000000)
                            @ 1  java.lang.AbstractStringBuilder.length():int (5 bytes)   inline accessor method (bytecode parsing)
                                @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=0.545841, probability=0.353103, bonus=1.000000, nodes=5)
                              @ 35  java.lang.StringBuilder.length():int (5 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=13 <= 300.000000)
                            @ 9  deltablue.Plan.<init>():void (7 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=0.602378, probability=0.643279, bonus=1.000000, nodes=9)
                              @ 3  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 3  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                            @ 39  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 67  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                                @ 12  java.lang.StringLatin1.charAt(byte[], int):char (15 bytes)   relevance-based (relevance=0.602378, probability=0.643279, bonus=1.000000, nodes=11 <= 180.713295)
                            @ 5  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                                  @ 9  java.lang.AbstractStringBuilder.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=1.522654, bonus=1.000000, nodes=9)
                              @ 18  som.Vector.isEmpty():boolean (17 bytes)   relevance-based (relevance=1.000025, probability=1.000000, bonus=1.000000, nodes=10 <= 300.000000)
                                @ 2  java.lang.AbstractStringBuilder.charAt(int):char (36 bytes)   relevance-based (relevance=1.000000, probability=1.522654, bonus=1.000000, nodes=19 <= 300.000000)
                              @ 60  java.lang.StringBuilder.charAt(int):char (6 bytes)   relevance-based (relevance=1.425840, probability=2.165932, bonus=1.000000, nodes=35 <= 300.000000)
                                @ 1  som.Vector.isEmpty():boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.999975, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 13  java.text.DecimalFormatSymbols.getDecimalSeparator():char (5 bytes)   inline accessor method (bytecode parsing)
                              @ 26  som.Vector.removeFirst():Object (31 bytes)   relevance-based (relevance=1.000000, probability=0.999975, bonus=1.000000, nodes=18 <= 300.000000)
                            @ 9  java.text.DecimalFormatSymbols.getLocale():Locale (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 13  java.util.Locale.equals(Object):boolean (75 bytes)   trivial (relevance=1.000000, probability=0.646897, bonus=1.000000, nodes=8)
                              @ 36  deltablue.BinaryConstraint.getOutput():Variable (22 bytes)   relevance-based (relevance=1.000000, probability=0.999975, bonus=1.000000, nodes=22 <= 300.000000)
                                @ 10  java.util.Formatter.getDecimalFormatSymbols(Locale):DecimalFormatSymbols (32 bytes)   relevance-based (relevance=1.000000, probability=0.646897, bonus=1.000000, nodes=15 <= 300.000000)
                            @ 2  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 92  java.util.Formatter.getDecimalSeparator(Locale):char (17 bytes)   relevance-based (relevance=1.000000, probability=0.646897, bonus=1.000000, nodes=20 <= 300.000000)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f8674194690.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=0.135421, probability=0.643772, bonus=1.000000, nodes=9)
                            @ 3  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                                @ 12  java.lang.StringLatin1.charAt(byte[], int):char (15 bytes)   relevance-based (relevance=0.135421, probability=0.643772, bonus=1.000000, nodes=11 <= 40.626205)
                            @ 1  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 9  deltablue.Variable.getStay():boolean (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                                    @ 8  deltablue.AbstractConstraint.lambda$inputsKnown$0(int, Variable):boolean (28 bytes)   not inlining relevance-based (relevance=0.000005, probability=0.000005, bonus=1.000000, nodes=21 > 0.001434)
                                  @ 26  deltablue.AbstractConstraint$$Lambda/0x00007f8674194690.test(Object):boolean (12 bytes)   trivial (relevance=0.000005, probability=0.000005, bonus=1.000000, nodes=9)
                                  @ 9  java.lang.AbstractStringBuilder.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=4.753867, bonus=1.000000, nodes=9)
                                @ 2  java.lang.AbstractStringBuilder.charAt(int):char (36 bytes)   relevance-based (relevance=1.000000, probability=4.753867, bonus=1.000000, nodes=19 <= 300.000000)
                            @ 1  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 9  deltablue.Variable.getStay():boolean (5 bytes)   inline accessor method (bytecode parsing)
                              @ 274  java.lang.StringBuilder.charAt(int):char (6 bytes)   relevance-based (relevance=1.000000, probability=5.397639, bonus=1.000000, nodes=35 <= 300.000000)
                                    @ 8  deltablue.AbstractConstraint.lambda$inputsKnown$0(int, Variable):boolean (28 bytes)   relevance-based (relevance=1.000000, probability=0.999946, bonus=1.000000, nodes=21 <= 300.000000)
                                  @ 15  deltablue.AbstractConstraint$$Lambda/0x00007f8674194690.test(Object):boolean (12 bytes)   relevance-based (relevance=1.000000, probability=0.999946, bonus=1.000000, nodes=23 <= 300.000000)
                                @ 7  deltablue.BinaryConstraint.inputsHasOne(TestInterface):boolean (32 bytes)   relevance-based (relevance=1.000000, probability=0.999975, bonus=1.000000, nodes=42 <= 300.000000)
                              @ 49  deltablue.AbstractConstraint.inputsKnown(int):boolean (19 bytes)   relevance-based (relevance=1.236414, probability=0.999975, bonus=1.000000, nodes=59 <= 300.000000)
                                      @ 3  java.lang.Math.max(int, int):int (11 bytes)   trivial (relevance=0.166032, probability=0.768572, bonus=1.000000, nodes=7)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                    @ 29  jdk.internal.util.ArraysSupport.newLength(int, int, int):int (27 bytes)   relevance-based (relevance=0.166032, probability=0.768572, bonus=1.000000, nodes=15 <= 49.809492)
                                  @ 24  java.lang.AbstractStringBuilder.newCapacity(int):int (59 bytes)   relevance-based (relevance=0.166032, probability=0.768572, bonus=1.000000, nodes=27 <= 49.809492)
                                @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000124, probability=0.000124, bonus=1.000000, nodes=41 > 0.037287)
                              @ 58  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.236414, probability=0.999975, bonus=1.000000, nodes=35 <= 300.000000)
                                    @ 25  java.lang.Math.min(int, int):int (11 bytes)   trivial (relevance=0.166033, probability=0.768466, bonus=1.000000, nodes=7)
                                  @ 32  java.util.Arrays.copyOf(byte[], int):byte[] (33 bytes)   relevance-based (relevance=0.166032, probability=0.768572, bonus=1.000000, nodes=28 <= 49.809492)
                              @ 63  deltablue.BinaryConstraint.getOutput():Variable (22 bytes)   relevance-based (relevance=1.236414, probability=0.999975, bonus=1.000000, nodes=22 <= 300.000000)
                                @ 7  java.lang.AbstractStringBuilder.ensureCapacityInternal(int):void (39 bytes)   relevance-based (relevance=1.000000, probability=5.397639, bonus=1.000000, nodes=72 <= 300.000000)
                                @ 11  java.lang.AbstractStringBuilder.isLatin1():boolean (19 bytes)   trivial (relevance=1.166030, probability=5.397631, bonus=1.000000, nodes=9)
                              @ 73  deltablue.BinaryConstraint.getOutput():Variable (22 bytes)   relevance-based (relevance=1.236414, probability=0.999975, bonus=1.000000, nodes=22 <= 300.000000)
                                @ 18  java.lang.StringLatin1.canEncode(int):boolean (13 bytes)   trivial (relevance=1.166030, probability=5.397631, bonus=1.000000, nodes=8)
                            @ 1  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 6  deltablue.Variable.getConstraints():Vector (5 bytes)   inline accessor method (bytecode parsing)
                              @ 2  java.lang.AbstractStringBuilder.append(char):AbstractStringBuilder (77 bytes)   relevance-based (relevance=1.135421, probability=5.397639, bonus=1.000000, nodes=90 <= 300.000000)
                            @ 11  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object, Object):Object (10 bytes)   inline method (bytecode parsing)
                              @ 6  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object, Object):Object (24 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 19  deltablue.Planner$$Lambda/0x00007f867403ac20.<init>(AbstractConstraint, Vector):void (15 bytes)   relevance-based (relevance=1.000000, probability=0.999975, bonus=1.000000, nodes=11 <= 300.000000)
                                  @ 24  java.lang.AbstractStringBuilder.newCapacity(int):int (59 bytes)   not inlining relevance-based (relevance=0.022589, probability=0.092096, bonus=1.000000, nodes=21 > 6.776831)
                                  @ 20  deltablue.Planner$$Lambda/0x00007f867403ac20.apply(Object):void (16 bytes)   not inlining too large previous low-level graph (low-level-nodes: 351, relevance=1.000000, probability=8.405364, bonus=1.000000, nodes=16)
                                  @ 32  java.util.Arrays.copyOf(byte[], int):byte[] (33 bytes)   not inlining relevance-based (relevance=0.022589, probability=0.092096, bonus=1.000000, nodes=29 > 6.776831)
                                @ 16  som.Vector.forEach(ForEachInterface):void (32 bytes)   not inlining callee invoke probability is too high (invokeP=8.405575, relevance=1.000000, probability=0.999975, bonus=1.000000, nodes=24)
                                @ 7  java.lang.AbstractStringBuilder.ensureCapacityInternal(int):void (39 bytes)   relevance-based (relevance=0.136055, probability=0.646787, bonus=1.000000, nodes=29 <= 40.816505)
                              @ 78  deltablue.Planner.addConstraintsConsumingTo(Variable, Vector):void (20 bytes)   relevance-based (relevance=1.236414, probability=0.999975, bonus=1.000000, nodes=23 <= 300.000000)
                              @ 2  java.lang.AbstractStringBuilder.append(char):AbstractStringBuilder (77 bytes)   not inlining relevance-based (relevance=0.136055, probability=0.646787, bonus=1.000000, nodes=52 > 40.816505)
                              @ 18  som.Vector.isEmpty():boolean (17 bytes)   relevance-based (relevance=1.000025, probability=39994.000025, bonus=1.000000, nodes=10 <= 300.000000)
                                @ 1  som.Vector.isEmpty():boolean (17 bytes)   relevance-based (relevance=1.000000, probability=39993.000050, bonus=1.000000, nodes=10 <= 300.000000)
                              @ 26  som.Vector.removeFirst():Object (31 bytes)   relevance-based (relevance=1.000000, probability=39993.000050, bonus=1.000000, nodes=18 <= 300.000000)
                              @ 36  deltablue.BinaryConstraint.getOutput():Variable (22 bytes)   relevance-based (relevance=1.000000, probability=39993.000050, bonus=1.000000, nodes=22 <= 300.000000)
                            @ 2  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f8674194690.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 9  deltablue.Variable.getStay():boolean (5 bytes)   inline accessor method (bytecode parsing)
                                    @ 8  deltablue.AbstractConstraint.lambda$inputsKnown$0(int, Variable):boolean (28 bytes)   not inlining relevance-based (relevance=0.000005, probability=0.191191, bonus=1.000000, nodes=21 > 0.001434)
                                  @ 26  deltablue.AbstractConstraint$$Lambda/0x00007f8674194690.test(Object):boolean (12 bytes)   trivial (relevance=0.000005, probability=0.191191, bonus=1.000000, nodes=9)
                            @ 1  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 9  deltablue.Variable.getStay():boolean (5 bytes)   inline accessor method (bytecode parsing)
                                    @ 8  deltablue.AbstractConstraint.lambda$inputsKnown$0(int, Variable):boolean (28 bytes)   relevance-based (relevance=1.000000, probability=39991.853631, bonus=1.000000, nodes=21 <= 300.000000)
                                  @ 15  deltablue.AbstractConstraint$$Lambda/0x00007f8674194690.test(Object):boolean (12 bytes)   relevance-based (relevance=1.000000, probability=39991.853631, bonus=1.000000, nodes=23 <= 300.000000)
                                @ 7  deltablue.BinaryConstraint.inputsHasOne(TestInterface):boolean (32 bytes)   relevance-based (relevance=1.000000, probability=39993.000050, bonus=1.000000, nodes=42 <= 300.000000)
                              @ 49  deltablue.AbstractConstraint.inputsKnown(int):boolean (19 bytes)   relevance-based (relevance=1.236414, probability=39993.000050, bonus=1.000000, nodes=59 <= 300.000000)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000124, probability=4.970092, bonus=1.000000, nodes=41 > 0.037287)
                              @ 58  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.236414, probability=39993.000050, bonus=1.000000, nodes=35 <= 300.000000)
                              @ 63  deltablue.BinaryConstraint.getOutput():Variable (22 bytes)   relevance-based (relevance=1.236414, probability=39993.000050, bonus=1.000000, nodes=22 <= 300.000000)
                              @ 73  deltablue.BinaryConstraint.getOutput():Variable (22 bytes)   relevance-based (relevance=1.236414, probability=39993.000050, bonus=1.000000, nodes=22 <= 300.000000)
                            @ 1  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 6  deltablue.Variable.getConstraints():Vector (5 bytes)   inline accessor method (bytecode parsing)
                            @ 11  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object, Object):Object (10 bytes)   inline method (bytecode parsing)
                              @ 6  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object, Object):Object (24 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 19  deltablue.Planner$$Lambda/0x00007f867403ac20.<init>(AbstractConstraint, Vector):void (15 bytes)   relevance-based (relevance=1.000000, probability=39993.000050, bonus=1.000000, nodes=11 <= 300.000000)
                                  @ 20  deltablue.Planner$$Lambda/0x00007f867403ac20.apply(Object):void (16 bytes)   not inlining too large previous low-level graph (low-level-nodes: 351, relevance=1.000000, probability=336164.142341, bonus=1.000000, nodes=16)
                                @ 16  som.Vector.forEach(ForEachInterface):void (32 bytes)   not inlining callee invoke probability is too high (invokeP=8.405575, relevance=1.000000, probability=39993.000050, bonus=1.000000, nodes=24)
                              @ 78  deltablue.Planner.addConstraintsConsumingTo(Variable, Vector):void (20 bytes)   relevance-based (relevance=1.236414, probability=39993.000050, bonus=1.000000, nodes=23 <= 300.000000)
                            @ 28  java.lang.Integer.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.Number.<init>():void (5 bytes)   inline method (bytecode parsing)
                            @ 4  som.Vector.<init>():void (7 bytes)   inline method (bytecode parsing)
                              @ 3  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 10  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 14  deltablue.Strength.absoluteWeakest():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 17  deltablue.Variable.setWalkStrength(Strength):void (6 bytes)   inline method (bytecode parsing)
                            @ 22  deltablue.Variable.setStay(boolean):void (6 bytes)   inline method (bytecode parsing)
                            @ 48  deltablue.Variable.getConstraints():Vector (5 bytes)   inline accessor method (bytecode parsing)
                            @ 52  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.Planner$$Lambda/0x00007f86741952b8.<init>(Vector):void (10 bytes)   inline method (bytecode parsing)
                            @ 64  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.Planner$$Lambda/0x00007f86741954d8.<init>(Vector):void (10 bytes)   inline method (bytecode parsing)
                            @ 76  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object):Object (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.lang.invoke.LambdaForm$MH/0x00007f8674000800.invoke(Object):Object (8 bytes)   inline method (bytecode parsing)
                              @ 31  som.Vector.isEmpty():boolean (17 bytes)   relevance-based (relevance=1.000029, probability=1.000000, bonus=1.000000, nodes=10 <= 300.000000)
                                @ 1  som.Vector.isEmpty():boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.999971, bonus=1.000000, nodes=10 <= 300.000000)
                              @ 38  som.Vector.removeFirst():Object (31 bytes)   relevance-based (relevance=1.000000, probability=0.999971, bonus=1.000000, nodes=18 <= 300.000000)
                                    @ 1  deltablue.BinaryConstraint.isSatisfied():boolean (13 bytes)   relevance-based (relevance=1.000013, probability=8.405334, bonus=1.000000, nodes=14 <= 300.000000)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                    @ 9  som.Vector.append(Object):void (51 bytes)   not inlining relevance-based (relevance=0.000013, probability=0.000105, bonus=1.000000, nodes=35 > 0.003752)
                                  @ 8  deltablue.Planner.lambda$removePropagateFrom$4(Vector, AbstractConstraint):void (13 bytes)   relevance-based (relevance=1.000000, probability=8.405334, bonus=1.000000, nodes=36 <= 300.000000)
                                @ 20  deltablue.Planner$$Lambda/0x00007f86741952b8.apply(Object):void (12 bytes)   relevance-based (relevance=1.000000, probability=8.405334, bonus=1.000000, nodes=43 <= 300.000000)
                              @ 57  som.Vector.forEach(ForEachInterface):void (32 bytes)   relevance-based (relevance=1.000000, probability=0.999971, bonus=1.000000, nodes=56 <= 300.000000)
                            @ 1  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 6  deltablue.Variable.getConstraints():Vector (5 bytes)   inline accessor method (bytecode parsing)
                            @ 11  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object, Object):Object (10 bytes)   inline method (bytecode parsing)
                              @ 6  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object, Object):Object (24 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 19  deltablue.Planner$$Lambda/0x00007f86741956f8.<init>(AbstractConstraint, ForEachInterface):void (15 bytes)   relevance-based (relevance=1.000000, probability=0.999971, bonus=1.000000, nodes=11 <= 300.000000)
                                    @ 12  deltablue.Planner.lambda$constraintsConsuming$3(AbstractConstraint, ForEachInterface, AbstractConstraint):void (20 bytes)   not inlining too large previous low-level graph (low-level-nodes: 368, relevance=1.000000, probability=8.405334, bonus=1.000000, nodes=26)
                                  @ 20  deltablue.Planner$$Lambda/0x00007f86741956f8.apply(Object):void (16 bytes)   relevance-based (relevance=1.000000, probability=8.405334, bonus=1.000000, nodes=16 <= 300.000000)
                                @ 16  som.Vector.forEach(ForEachInterface):void (32 bytes)   not inlining callee invoke probability is too high (invokeP=8.405575, relevance=1.000000, probability=0.999971, bonus=1.000000, nodes=33)
                              @ 69  deltablue.Planner.constraintsConsuming(Variable, ForEachInterface):void (20 bytes)   relevance-based (relevance=1.000000, probability=0.999971, bonus=1.000000, nodes=23 <= 300.000000)
                              @ 31  som.Vector.isEmpty():boolean (17 bytes)   relevance-based (relevance=1.000029, probability=35000.416695, bonus=1.000000, nodes=10 <= 300.000000)
                                @ 1  som.Vector.isEmpty():boolean (17 bytes)   relevance-based (relevance=1.000000, probability=34999.416724, bonus=1.000000, nodes=10 <= 300.000000)
                              @ 38  som.Vector.removeFirst():Object (31 bytes)   relevance-based (relevance=1.000000, probability=34999.416724, bonus=1.000000, nodes=18 <= 300.000000)
                                    @ 1  deltablue.BinaryConstraint.isSatisfied():boolean (13 bytes)   relevance-based (relevance=1.000013, probability=294190.205553, bonus=1.000000, nodes=14 <= 300.000000)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                    @ 9  som.Vector.append(Object):void (51 bytes)   not inlining relevance-based (relevance=0.000013, probability=3.679685, bonus=1.000000, nodes=35 > 0.003752)
                                  @ 8  deltablue.Planner.lambda$removePropagateFrom$4(Vector, AbstractConstraint):void (13 bytes)   relevance-based (relevance=1.000000, probability=294190.205553, bonus=1.000000, nodes=36 <= 300.000000)
                                @ 20  deltablue.Planner$$Lambda/0x00007f86741952b8.apply(Object):void (12 bytes)   relevance-based (relevance=1.000000, probability=294190.205553, bonus=1.000000, nodes=43 <= 300.000000)
                              @ 57  som.Vector.forEach(ForEachInterface):void (32 bytes)   relevance-based (relevance=1.000000, probability=34999.416724, bonus=1.000000, nodes=56 <= 300.000000)
                            @ 12  java.lang.invoke.VarHandle.accessModeType(int):MethodType (41 bytes)   inline method (bytecode parsing)
                              @ 33  java.lang.invoke.VarHandle.accessModeTypeUncached(int):MethodType (10 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                                @ 1  java.lang.invoke.VarHandle$AccessType.values():VarHandle$AccessType[] (10 bytes)   inline method (bytecode parsing)
                            @ 6  deltablue.Variable.getConstraints():Vector (5 bytes)   inline accessor method (bytecode parsing)
                            @ 11  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object, Object):Object (10 bytes)   inline method (bytecode parsing)
                              @ 6  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object, Object):Object (24 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                            @ 6  java.lang.invoke.VarHandle.accessModeTypeUncached(VarHandle$AccessType):MethodType (0 bytes)   not inlining no type profile exists
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 19  deltablue.Planner$$Lambda/0x00007f86741956f8.<init>(AbstractConstraint, ForEachInterface):void (15 bytes)   relevance-based (relevance=1.000000, probability=34999.416724, bonus=1.000000, nodes=11 <= 300.000000)
                                    @ 12  deltablue.Planner.lambda$constraintsConsuming$3(AbstractConstraint, ForEachInterface, AbstractConstraint):void (20 bytes)   not inlining too large previous low-level graph (low-level-nodes: 368, relevance=1.000000, probability=294190.205553, bonus=1.000000, nodes=26)
                                  @ 20  deltablue.Planner$$Lambda/0x00007f86741956f8.apply(Object):void (16 bytes)   relevance-based (relevance=1.000000, probability=294190.205553, bonus=1.000000, nodes=16 <= 300.000000)
                                @ 16  som.Vector.forEach(ForEachInterface):void (32 bytes)   not inlining callee invoke probability is too high (invokeP=8.405575, relevance=1.000000, probability=34999.416724, bonus=1.000000, nodes=33)
                              @ 69  deltablue.Planner.constraintsConsuming(Variable, ForEachInterface):void (20 bytes)   relevance-based (relevance=1.000000, probability=34999.416724, bonus=1.000000, nodes=23 <= 300.000000)
                            @ 1  som.Vector.size():int (10 bytes)   inline method (bytecode parsing)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                      @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.250000, bonus=1.000000, nodes=13 <= 300.000000)
                                    @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.250000, bonus=1.000000, nodes=24 <= 300.000000)
                                  @ 45  deltablue.Planner$$Lambda/0x00007f8674195918.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.250000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 13  java.lang.invoke.VarForm.resolveMemberName(int):MemberName (61 bytes)   not inlining it is marked non-inlinable
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                      @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.062500, bonus=1.000000, nodes=13 <= 300.000000)
                                    @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.062500, bonus=1.000000, nodes=24 <= 300.000000)
                                  @ 101  deltablue.Planner$$Lambda/0x00007f8674195918.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.062500, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 4  deltablue.Planner.<init>():void (10 bytes)   inline method (bytecode parsing)
                            @ 12  som.Vector.<init>():void (7 bytes)   inline method (bytecode parsing)
                                      @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.062500, bonus=1.000000, nodes=13 <= 300.000000)
                              @ 3  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 18  deltablue.Variable.value(int):Variable (15 bytes)   inline method (bytecode parsing)
                                    @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.062500, bonus=1.000000, nodes=24 <= 300.000000)
                              @ 10  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 25  deltablue.Variable.value(int):Variable (15 bytes)   inline method (bytecode parsing)
                              @ 10  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                                  @ 114  deltablue.Planner$$Lambda/0x00007f8674195918.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.062500, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 75  deltablue.StayConstraint.<init>(Variable, Strength$Sym, Planner):void (8 bytes)   inline method (bytecode parsing)
                              @ 4  deltablue.UnaryConstraint.<init>(Variable, Strength$Sym, Planner):void (16 bytes)   inline method (bytecode parsing)
                                @ 2  deltablue.AbstractConstraint.<init>(Strength$Sym):void (13 bytes)   inline method (bytecode parsing)
                                  @ 6  deltablue.Strength.of(Strength$Sym):Strength (11 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                                @ 12  deltablue.AbstractConstraint.addConstraint(Planner):void (10 bytes)   inline method (bytecode parsing)
                            @ 114  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 144  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 187  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                      @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.010417, bonus=1.000000, nodes=13 <= 300.000000)
                            @ 248  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                    @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.010417, bonus=1.000000, nodes=24 <= 300.000000)
                                  @ 184  deltablue.Planner$$Lambda/0x00007f8674195918.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.010417, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                              @ 242  som.Vector.at(int):Object (18 bytes)   relevance-based (relevance=1.000000, probability=0.999983, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                              @ 242  som.Vector.at(int):Object (18 bytes)   relevance-based (relevance=1.000000, probability=59997.000034, bonus=1.000000, nodes=10 <= 300.000000)
                                      @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.010417, bonus=1.000000, nodes=13 <= 300.000000)
                                    @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.010417, bonus=1.000000, nodes=24 <= 300.000000)
                                  @ 218  deltablue.Planner$$Lambda/0x00007f8674195918.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.010417, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                        @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.003906, bonus=1.000000, nodes=13 <= 300.000000)
                                      @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.003906, bonus=1.000000, nodes=24 <= 300.000000)
                                    @ 45  deltablue.Planner$$Lambda/0x00007f8674195918.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.003906, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                        @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000977, bonus=1.000000, nodes=13 <= 300.000000)
                                      @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000977, bonus=1.000000, nodes=24 <= 300.000000)
                                    @ 101  deltablue.Planner$$Lambda/0x00007f8674195918.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000977, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                        @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000977, bonus=1.000000, nodes=13 <= 300.000000)
                                      @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000977, bonus=1.000000, nodes=24 <= 300.000000)
                                    @ 114  deltablue.Planner$$Lambda/0x00007f8674195918.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000977, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 9  deltablue.Plan.<init>():void (7 bytes)   inline method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                              @ 3  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                                        @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000163, bonus=1.000000, nodes=13 <= 300.000000)
                            @ 39  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                                      @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000163, bonus=1.000000, nodes=24 <= 300.000000)
                            @ 67  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                                    @ 184  deltablue.Planner$$Lambda/0x00007f8674195918.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000163, bonus=1.000000, nodes=30 <= 300.000000)
                              @ 1  deltablue.Planner.newMark():int (15 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                              @ 18  som.Vector.isEmpty():boolean (17 bytes)   relevance-based (relevance=1.000023, probability=42862.714286, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                        @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000163, bonus=1.000000, nodes=13 <= 300.000000)
                                @ 1  som.Vector.isEmpty():boolean (17 bytes)   relevance-based (relevance=1.000000, probability=42861.714286, bonus=1.000000, nodes=10 <= 300.000000)
                                      @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000163, bonus=1.000000, nodes=24 <= 300.000000)
                              @ 26  som.Vector.removeFirst():Object (31 bytes)   relevance-based (relevance=1.000000, probability=42861.714286, bonus=1.000000, nodes=18 <= 300.000000)
                                    @ 218  deltablue.Planner$$Lambda/0x00007f8674195918.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000163, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                              @ 36  deltablue.BinaryConstraint.getOutput():Variable (22 bytes)   relevance-based (relevance=1.000000, probability=42861.714286, bonus=1.000000, nodes=22 <= 300.000000)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 2  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f8674194690.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 1  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 9  deltablue.Variable.getStay():boolean (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000061, bonus=1.000000, nodes=13 <= 300.000000)
                                    @ 8  deltablue.AbstractConstraint.lambda$inputsKnown$0(int, Variable):boolean (28 bytes)   not inlining relevance-based (relevance=0.000005, probability=0.204905, bonus=1.000000, nodes=21 > 0.001434)
                                        @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000061, bonus=1.000000, nodes=24 <= 300.000000)
                                  @ 26  deltablue.AbstractConstraint$$Lambda/0x00007f8674194690.test(Object):boolean (12 bytes)   trivial (relevance=0.000005, probability=0.204905, bonus=1.000000, nodes=9)
                                      @ 45  deltablue.Planner$$Lambda/0x00007f8674195918.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000061, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 9  deltablue.Variable.getStay():boolean (5 bytes)   inline accessor method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                                    @ 8  deltablue.AbstractConstraint.lambda$inputsKnown$0(int, Variable):boolean (28 bytes)   relevance-based (relevance=1.000000, probability=42860.485634, bonus=1.000000, nodes=21 <= 300.000000)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 15  deltablue.AbstractConstraint$$Lambda/0x00007f8674194690.test(Object):boolean (12 bytes)   relevance-based (relevance=1.000000, probability=42860.485634, bonus=1.000000, nodes=23 <= 300.000000)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                @ 7  deltablue.BinaryConstraint.inputsHasOne(TestInterface):boolean (32 bytes)   relevance-based (relevance=1.000000, probability=42861.714286, bonus=1.000000, nodes=42 <= 300.000000)
                                          @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000015, bonus=1.000000, nodes=13 <= 300.000000)
                                        @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000015, bonus=1.000000, nodes=24 <= 300.000000)
                              @ 49  deltablue.AbstractConstraint.inputsKnown(int):boolean (19 bytes)   relevance-based (relevance=1.236418, probability=42861.714286, bonus=1.000000, nodes=59 <= 300.000000)
                                      @ 101  deltablue.Planner$$Lambda/0x00007f8674195918.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000015, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000124, probability=5.326598, bonus=1.000000, nodes=41 > 0.037287)
                                          @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000015, bonus=1.000000, nodes=13 <= 300.000000)
                              @ 58  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.236418, probability=42861.714286, bonus=1.000000, nodes=35 <= 300.000000)
                                        @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000015, bonus=1.000000, nodes=24 <= 300.000000)
                                      @ 114  deltablue.Planner$$Lambda/0x00007f8674195918.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000015, bonus=1.000000, nodes=30 <= 300.000000)
                              @ 63  deltablue.BinaryConstraint.getOutput():Variable (22 bytes)   relevance-based (relevance=1.236418, probability=42861.714286, bonus=1.000000, nodes=22 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000003, bonus=1.000000, nodes=13 <= 300.000000)
                              @ 73  deltablue.BinaryConstraint.getOutput():Variable (22 bytes)   relevance-based (relevance=1.236418, probability=42861.714286, bonus=1.000000, nodes=22 <= 300.000000)
                                        @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000003, bonus=1.000000, nodes=24 <= 300.000000)
                                      @ 184  deltablue.Planner$$Lambda/0x00007f8674195918.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000003, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 6  deltablue.Variable.getConstraints():Vector (5 bytes)   inline accessor method (bytecode parsing)
                            @ 11  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object, Object):Object (10 bytes)   inline method (bytecode parsing)
                              @ 6  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object, Object):Object (24 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                                @ 19  deltablue.Planner$$Lambda/0x00007f867403ac20.<init>(AbstractConstraint, Vector):void (15 bytes)   relevance-based (relevance=1.000000, probability=42861.714286, bonus=1.000000, nodes=11 <= 300.000000)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000003, bonus=1.000000, nodes=13 <= 300.000000)
                                        @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000003, bonus=1.000000, nodes=24 <= 300.000000)
                                  @ 20  deltablue.Planner$$Lambda/0x00007f867403ac20.apply(Object):void (16 bytes)   not inlining too large previous low-level graph (low-level-nodes: 351, relevance=1.000000, probability=360277.333636, bonus=1.000000, nodes=16)
                                      @ 218  deltablue.Planner$$Lambda/0x00007f8674195918.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000003, bonus=1.000000, nodes=30 <= 300.000000)
                                @ 16  som.Vector.forEach(ForEachInterface):void (32 bytes)   not inlining callee invoke probability is too high (invokeP=8.405575, relevance=1.000000, probability=42861.714286, bonus=1.000000, nodes=24)
                              @ 78  deltablue.Planner.addConstraintsConsumingTo(Variable, Vector):void (20 bytes)   relevance-based (relevance=1.236418, probability=42861.714286, bonus=1.000000, nodes=23 <= 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                            @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000001, bonus=1.000000, nodes=13 <= 300.000000)
                                          @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000001, bonus=1.000000, nodes=24 <= 300.000000)
                                        @ 45  deltablue.Planner$$Lambda/0x00007f8674195918.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000001, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                            @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                          @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                        @ 101  deltablue.Planner$$Lambda/0x00007f8674195918.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                            @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                          @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                        @ 114  deltablue.Planner$$Lambda/0x00007f8674195918.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                            @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                          @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                        @ 184  deltablue.Planner$$Lambda/0x00007f8674195918.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                            @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                          @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                        @ 218  deltablue.Planner$$Lambda/0x00007f8674195918.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 45  deltablue.Planner$$Lambda/0x00007f8674195918.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 101  deltablue.Planner$$Lambda/0x00007f8674195918.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 114  deltablue.Planner$$Lambda/0x00007f8674195918.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 184  deltablue.Planner$$Lambda/0x00007f8674195918.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 218  deltablue.Planner$$Lambda/0x00007f8674195918.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 45  deltablue.Planner$$Lambda/0x00007f8674195918.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 101  deltablue.Planner$$Lambda/0x00007f8674195918.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 114  deltablue.Planner$$Lambda/0x00007f8674195918.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 184  deltablue.Planner$$Lambda/0x00007f8674195918.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 218  deltablue.Planner$$Lambda/0x00007f8674195918.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                                          @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining it exceeds the maximum recursive inlining depth
                                          @ 269  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining it exceeds the maximum recursive inlining depth
                                          @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=202 <= 300.000000)
                                        @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=387 > 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 45  deltablue.Planner$$Lambda/0x00007f8674195918.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 101  deltablue.Planner$$Lambda/0x00007f8674195918.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 114  deltablue.Planner$$Lambda/0x00007f8674195918.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 184  deltablue.Planner$$Lambda/0x00007f8674195918.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 218  deltablue.Planner$$Lambda/0x00007f8674195918.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 45  deltablue.Planner$$Lambda/0x00007f8674195918.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 101  deltablue.Planner$$Lambda/0x00007f8674195918.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 114  deltablue.Planner$$Lambda/0x00007f8674195918.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 184  deltablue.Planner$$Lambda/0x00007f8674195918.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 218  deltablue.Planner$$Lambda/0x00007f8674195918.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                                          @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining it exceeds the maximum recursive inlining depth
                                          @ 269  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining it exceeds the maximum recursive inlining depth
                                          @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=202 <= 300.000000)
                                        @ 269  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=387 > 300.000000)
                                      @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   relevance-based (relevance=1.000000, probability=0.000002, bonus=1.000000, nodes=202 <= 300.000000)
                                    @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.000122, bonus=1.000000, nodes=387 > 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                              @ 2  org.graalvm.collections.EconomicMapImpl.find(Object):int (19 bytes)   not inlining too large previous low-level graph (low-level-nodes: 336, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=20)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000061, bonus=1.000000, nodes=13 <= 300.000000)
                                        @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000061, bonus=1.000000, nodes=24 <= 300.000000)
                                      @ 45  deltablue.Planner$$Lambda/0x00007f8674195918.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000061, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000015, bonus=1.000000, nodes=13 <= 300.000000)
                                        @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000015, bonus=1.000000, nodes=24 <= 300.000000)
                                      @ 101  deltablue.Planner$$Lambda/0x00007f8674195918.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000015, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000015, bonus=1.000000, nodes=13 <= 300.000000)
                                        @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000015, bonus=1.000000, nodes=24 <= 300.000000)
                                      @ 114  deltablue.Planner$$Lambda/0x00007f8674195918.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000015, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000003, bonus=1.000000, nodes=13 <= 300.000000)
                                        @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000003, bonus=1.000000, nodes=24 <= 300.000000)
                                      @ 184  deltablue.Planner$$Lambda/0x00007f8674195918.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000003, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000003, bonus=1.000000, nodes=13 <= 300.000000)
                                        @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000003, bonus=1.000000, nodes=24 <= 300.000000)
                                      @ 218  deltablue.Planner$$Lambda/0x00007f8674195918.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000003, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                            @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000001, bonus=1.000000, nodes=13 <= 300.000000)
                                          @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000001, bonus=1.000000, nodes=24 <= 300.000000)
                                        @ 45  deltablue.Planner$$Lambda/0x00007f8674195918.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000001, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                            @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                          @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                        @ 101  deltablue.Planner$$Lambda/0x00007f8674195918.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                            @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                          @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                        @ 114  deltablue.Planner$$Lambda/0x00007f8674195918.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 4  java.lang.StringBuilder.append(CharSequence, int, int):StringBuilder (10 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                            @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                    @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                                          @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                  @ 10  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=8)
                                        @ 184  deltablue.Planner$$Lambda/0x00007f8674195918.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                                  @ 18  jdk.internal.util.Preconditions.checkFromToIndex(int, int, int, BiFunction):int (24 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=14 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                            @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                          @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                        @ 218  deltablue.Planner$$Lambda/0x00007f8674195918.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                                        @ 3  java.lang.Math.max(int, int):int (11 bytes)   trivial (relevance=0.166032, probability=0.142390, bonus=1.000000, nodes=7)
                                      @ 29  jdk.internal.util.ArraysSupport.newLength(int, int, int):int (27 bytes)   relevance-based (relevance=0.166032, probability=0.142390, bonus=1.000000, nodes=15 <= 49.809492)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                                    @ 24  java.lang.AbstractStringBuilder.newCapacity(int):int (59 bytes)   relevance-based (relevance=0.166032, probability=0.142390, bonus=1.000000, nodes=27 <= 49.809492)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                                      @ 25  java.lang.Math.min(int, int):int (11 bytes)   trivial (relevance=0.166033, probability=0.142371, bonus=1.000000, nodes=7)
                                    @ 32  java.util.Arrays.copyOf(byte[], int):byte[] (33 bytes)   relevance-based (relevance=0.166032, probability=0.142390, bonus=1.000000, nodes=28 <= 49.809492)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 35  java.lang.AbstractStringBuilder.ensureCapacityInternal(int):void (39 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=72 <= 300.000000)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                            @ 15  java.lang.String.value():byte[] (5 bytes)   inline accessor method (bytecode parsing)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 45  deltablue.Planner$$Lambda/0x00007f8674195918.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                                    @ 1  java.lang.AbstractStringBuilder.isLatin1():boolean (19 bytes)   trivial (relevance=1.000010, probability=0.999999, bonus=1.000000, nodes=9)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                                    @ 8  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000010, probability=0.999999, bonus=1.000000, nodes=9)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 52  java.lang.AbstractStringBuilder.appendChars(String, int, int):void (207 bytes)   relevance-based (relevance=1.166030, probability=0.999999, bonus=1.000000, nodes=38 <= 300.000000)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                @ 4  java.lang.AbstractStringBuilder.append(CharSequence, int, int):AbstractStringBuilder (67 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=122 <= 300.000000)
                                          @ 101  deltablue.Planner$$Lambda/0x00007f8674195918.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                              @ 16  java.lang.StringBuilder.append(CharSequence, int, int):Appendable (8 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=124 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 114  deltablue.Planner$$Lambda/0x00007f8674195918.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 184  deltablue.Planner$$Lambda/0x00007f8674195918.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 218  deltablue.Planner$$Lambda/0x00007f8674195918.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 45  deltablue.Planner$$Lambda/0x00007f8674195918.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 101  deltablue.Planner$$Lambda/0x00007f8674195918.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 114  deltablue.Planner$$Lambda/0x00007f8674195918.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 184  deltablue.Planner$$Lambda/0x00007f8674195918.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 218  deltablue.Planner$$Lambda/0x00007f8674195918.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                                          @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining it exceeds the maximum recursive inlining depth
                                          @ 269  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining it exceeds the maximum recursive inlining depth
                                          @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=202 <= 300.000000)
                            @ 4  java.lang.StringBuilder.append(CharSequence, int, int):StringBuilder (10 bytes)   inline method (bytecode parsing)
                                        @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=387 > 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                                  @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                                @ 10  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=8)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                                @ 18  jdk.internal.util.Preconditions.checkFromToIndex(int, int, int, BiFunction):int (24 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=14 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                      @ 3  java.lang.Math.max(int, int):int (11 bytes)   trivial (relevance=0.166032, probability=0.142390, bonus=1.000000, nodes=7)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                    @ 29  jdk.internal.util.ArraysSupport.newLength(int, int, int):int (27 bytes)   relevance-based (relevance=0.166032, probability=0.142390, bonus=1.000000, nodes=15 <= 49.809492)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                  @ 24  java.lang.AbstractStringBuilder.newCapacity(int):int (59 bytes)   relevance-based (relevance=0.166032, probability=0.142390, bonus=1.000000, nodes=27 <= 49.809492)
                                          @ 45  deltablue.Planner$$Lambda/0x00007f8674195918.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                                    @ 25  java.lang.Math.min(int, int):int (11 bytes)   trivial (relevance=0.166033, probability=0.142371, bonus=1.000000, nodes=7)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 32  java.util.Arrays.copyOf(byte[], int):byte[] (33 bytes)   relevance-based (relevance=0.166032, probability=0.142390, bonus=1.000000, nodes=28 <= 49.809492)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                @ 35  java.lang.AbstractStringBuilder.ensureCapacityInternal(int):void (39 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=72 <= 300.000000)
                                          @ 101  deltablue.Planner$$Lambda/0x00007f8674195918.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 15  java.lang.String.value():byte[] (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                  @ 1  java.lang.AbstractStringBuilder.isLatin1():boolean (19 bytes)   trivial (relevance=1.000010, probability=0.999999, bonus=1.000000, nodes=9)
                                          @ 114  deltablue.Planner$$Lambda/0x00007f8674195918.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                                  @ 8  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000010, probability=0.999999, bonus=1.000000, nodes=9)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                                @ 52  java.lang.AbstractStringBuilder.appendChars(String, int, int):void (207 bytes)   relevance-based (relevance=1.166030, probability=0.999999, bonus=1.000000, nodes=38 <= 300.000000)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                              @ 4  java.lang.AbstractStringBuilder.append(CharSequence, int, int):AbstractStringBuilder (67 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=132 <= 300.000000)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 184  deltablue.Planner$$Lambda/0x00007f8674195918.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 218  deltablue.Planner$$Lambda/0x00007f8674195918.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 45  deltablue.Planner$$Lambda/0x00007f8674195918.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 101  deltablue.Planner$$Lambda/0x00007f8674195918.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 114  deltablue.Planner$$Lambda/0x00007f8674195918.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 184  deltablue.Planner$$Lambda/0x00007f8674195918.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 218  deltablue.Planner$$Lambda/0x00007f8674195918.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                                          @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining it exceeds the maximum recursive inlining depth
                                          @ 269  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining it exceeds the maximum recursive inlining depth
                                          @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=202 <= 300.000000)
                                        @ 269  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=387 > 300.000000)
                                      @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   relevance-based (relevance=1.000000, probability=0.000002, bonus=1.000000, nodes=202 <= 300.000000)
                                    @ 269  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.000122, bonus=1.000000, nodes=387 > 300.000000)
                                  @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   relevance-based (relevance=1.000000, probability=0.007813, bonus=1.000000, nodes=202 <= 300.000000)
                                @ 19  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=387 > 300.000000)
                              @ 81  som.Vector.sort(Comparator):void (23 bytes)   relevance-based (relevance=1.000029, probability=1.000000, bonus=1.000000, nodes=22 <= 300.000000)
                              @ 27  java.util.ArrayList$Itr.hasNext():boolean (20 bytes)   relevance-based (relevance=2.100294, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                                @ 1  java.util.ArrayList$Itr.checkForComodification():void (23 bytes)   trivial (relevance=1.000000, probability=0.846479, bonus=1.000000, nodes=9)
                              @ 37  java.util.ArrayList$Itr.next():Object (66 bytes)   relevance-based (relevance=1.777855, probability=0.846479, bonus=1.000000, nodes=25 <= 300.000000)
                              @ 49  java.util.Formatter$FormatSpecifier.index():int (5 bytes)   trivial (relevance=1.777855, probability=0.846479, bonus=1.000000, nodes=9)
                            @ 58  java.util.Formatter$Flags.contains(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                                  @ 89  java.lang.String.toString():String (2 bytes)   trivial (relevance=0.733918, probability=0.113334, bonus=1.000000, nodes=4)
                            @ 34  java.util.Formatter$Flags.contains(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 2  java.lang.StringBuilder.append(CharSequence):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 2  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                                                @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=0.733918, probability=0.113334, bonus=1.000000, nodes=5)
                                              @ 10  java.lang.String.length():int (11 bytes)   trivial (relevance=0.733918, probability=0.113334, bonus=1.000000, nodes=8)
                                                    @ 3  java.lang.Math.max(int, int):int (11 bytes)   trivial (relevance=0.121854, probability=0.016138, bonus=1.000000, nodes=7)
                                                  @ 29  jdk.internal.util.ArraysSupport.newLength(int, int, int):int (27 bytes)   relevance-based (relevance=0.121854, probability=0.016138, bonus=1.000000, nodes=15 <= 36.556079)
                                                @ 24  java.lang.AbstractStringBuilder.newCapacity(int):int (59 bytes)   relevance-based (relevance=0.121854, probability=0.016138, bonus=1.000000, nodes=27 <= 36.556079)
                                                  @ 25  java.lang.Math.min(int, int):int (11 bytes)   trivial (relevance=0.121855, probability=0.016136, bonus=1.000000, nodes=7)
                                                @ 32  java.util.Arrays.copyOf(byte[], int):byte[] (33 bytes)   relevance-based (relevance=0.121854, probability=0.016138, bonus=1.000000, nodes=28 <= 36.556079)
                                              @ 21  java.lang.AbstractStringBuilder.ensureCapacityInternal(int):void (39 bytes)   relevance-based (relevance=0.733918, probability=0.113334, bonus=1.000000, nodes=72 <= 220.175376)
                                                  @ 11  java.lang.String.coder():byte (15 bytes)   trivial (relevance=0.855770, probability=0.113334, bonus=1.000000, nodes=5)
                                                @ 2  java.lang.AbstractStringBuilder.inflateIfNeededFor(String):void (22 bytes)   trivial (relevance=0.855770, probability=0.113334, bonus=1.000000, nodes=9)
                              @ 25  java.util.BitSet.checkInvariants():void (111 bytes)   trivial (relevance=1.291188, probability=1.000000, bonus=1.000000, nodes=4)
                              @ 29  java.util.BitSet.checkInvariants():void (111 bytes)   trivial (relevance=1.291188, probability=1.000000, bonus=1.000000, nodes=4)
                                                  @ 1  java.lang.String.coder():byte (15 bytes)   trivial (relevance=0.855779, probability=0.113334, bonus=1.000000, nodes=5)
                                                @ 15  java.lang.String.getBytes(byte[], int, byte):void (44 bytes)   relevance-based (relevance=0.855770, probability=0.113334, bonus=1.000000, nodes=26 <= 256.731089)
                                              @ 30  java.lang.AbstractStringBuilder.putStringAt(int, String):void (19 bytes)   relevance-based (relevance=0.855770, probability=0.113334, bonus=1.000000, nodes=32 <= 256.731089)
                                            @ 2  java.lang.AbstractStringBuilder.append(String):AbstractStringBuilder (45 bytes)   relevance-based (relevance=0.733918, probability=0.113334, bonus=1.000000, nodes=110 <= 220.175376)
                                          @ 21  java.lang.StringBuilder.append(String):AbstractStringBuilder (6 bytes)   relevance-based (relevance=0.733918, probability=0.113334, bonus=1.000000, nodes=112 <= 220.175376)
                                        @ 2  java.lang.AbstractStringBuilder.append(CharSequence):AbstractStringBuilder (54 bytes)   relevance-based (relevance=0.733918, probability=0.113334, bonus=1.000000, nodes=113 <= 220.175376)
                                      @ 10  java.lang.StringBuilder.append(CharSequence):Appendable (6 bytes)   relevance-based (relevance=0.733918, probability=0.113334, bonus=1.000000, nodes=115 <= 220.175376)
                                    @ 53  java.util.Formatter$FormatSpecifier.appendJustified(Appendable, CharSequence):void (89 bytes)   relevance-based (relevance=0.733918, probability=0.113334, bonus=1.000000, nodes=129 <= 220.175376)
                                  @ 93  java.util.Formatter$FormatSpecifier.print(Formatter, String, Locale):void (57 bytes)   relevance-based (relevance=0.733918, probability=0.113334, bonus=1.000000, nodes=138 <= 220.175376)
                                @ 176  java.util.Formatter$FormatSpecifier.printString(Formatter, Object, Locale):void (97 bytes)   relevance-based (relevance=0.733918, probability=0.113334, bonus=1.000000, nodes=156 <= 220.175376)
                            @ 4  java.lang.StringBuilder.<init>():void (7 bytes)   inline method (bytecode parsing)
                            @ 30  jdk.internal.math.FormattedFPDecimal.toDigit(long):char (6 bytes)   inline method (bytecode parsing)
                              @ 2  jdk.internal.math.FormattedFPDecimal.toDigit(int):char (6 bytes)   inline method (bytecode parsing)
                                    @ 3  java.lang.AbstractStringBuilder.<init>(int):void (39 bytes)   relevance-based (relevance=0.908790, probability=0.140339, bonus=1.000000, nodes=11 <= 272.637102)
                                    @ 11  java.lang.Double.compare(double, double):int (54 bytes)   relevance-based (relevance=0.908790, probability=0.140339, bonus=1.000000, nodes=25 <= 272.637102)
                                    @ 26  java.lang.Double.isNaN(double):boolean (12 bytes)   trivial (relevance=0.968962, probability=0.140339, bonus=1.000000, nodes=7)
                            @ 10  java.util.Formatter$Flags.contains(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 32  java.util.Formatter$Flags.contains(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                                    @ 43  java.util.Formatter$FormatSpecifier.leadingSign(StringBuilder, boolean):StringBuilder (80 bytes)   relevance-based (relevance=0.968962, probability=0.140339, bonus=1.000000, nodes=13 <= 290.688478)
                                    @ 49  java.lang.Double.isInfinite(double):boolean (17 bytes)   trivial (relevance=0.968962, probability=0.140339, bonus=1.000000, nodes=9)
                            @ 275  java.lang.StringBuilder.<init>():void (7 bytes)   inline method (bytecode parsing)
                            @ 280  jdk.internal.math.FormattedFPDecimal.getMantissa():char[] (5 bytes)   inline accessor method (bytecode parsing)
                            @ 283  java.lang.StringBuilder.append(char[]):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 299  java.util.Formatter$Flags.contains(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 4  jdk.internal.math.FormattedFPDecimal.<init>():void (5 bytes)   inline method (bytecode parsing)
                                          @ 5  jdk.internal.math.DoubleToDecimal.<init>(boolean):void (21 bytes)   trivial (relevance=0.968962, probability=0.140339, bonus=1.000000, nodes=9)
                            @ 15  jdk.internal.math.MathUtils.pow10(int):long (6 bytes)   inline method (bytecode parsing)
                                              @ 7  jdk.internal.math.MathUtils.flog10pow2(int):int (11 bytes)   relevance-based (relevance=1.024417, probability=0.089511, bonus=1.000000, nodes=10 <= 300.000000)
                                              @ 36  jdk.internal.math.FormattedFPDecimal.set(long, int, int):void (17 bytes)   relevance-based (relevance=1.024417, probability=0.089511, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 123  jdk.internal.math.DoubleToDecimal.toChars(long, int, FormattedFPDecimal):int (161 bytes)   relevance-based (relevance=0.968962, probability=0.089511, bonus=1.000000, nodes=36 <= 290.688478)
                                              @ 57  jdk.internal.math.MathUtils.flog10pow2(int):int (11 bytes)   relevance-based (relevance=0.581694, probability=0.041441, bonus=1.000000, nodes=10 <= 174.508062)
                                              @ 72  jdk.internal.math.MathUtils.flog10threeQuartersPow2(int):int (15 bytes)   relevance-based (relevance=0.131755, probability=0.009386, bonus=1.000000, nodes=12 <= 39.526479)
                                              @ 81  jdk.internal.math.MathUtils.flog2pow10(int):int (11 bytes)   relevance-based (relevance=0.713448, probability=0.050827, bonus=1.000000, nodes=10 <= 214.034541)
                                              @ 91  jdk.internal.math.MathUtils.g1(int):long (12 bytes)   relevance-based (relevance=0.713448, probability=0.050827, bonus=1.000000, nodes=10 <= 214.034541)
                                              @ 98  jdk.internal.math.MathUtils.g0(int):long (14 bytes)   relevance-based (relevance=0.713448, probability=0.050827, bonus=1.000000, nodes=11 <= 214.034541)
                                              @ 112  jdk.internal.math.DoubleToDecimal.rop(long, long, long):long (58 bytes)   relevance-based (relevance=0.713448, probability=0.050827, bonus=1.000000, nodes=20 <= 214.034541)
                                              @ 126  jdk.internal.math.DoubleToDecimal.rop(long, long, long):long (58 bytes)   relevance-based (relevance=0.713448, probability=0.050827, bonus=1.000000, nodes=20 <= 214.034541)
                                            @ 135  jdk.internal.math.DoubleToDecimal.toDecimal(int, long, int, FormattedFPDecimal):int (385 bytes)   not inlining relevance-based (relevance=0.581694, probability=0.050827, bonus=1.000000, nodes=175 > 174.508062)
                                          @ 10  jdk.internal.math.DoubleToDecimal.toDecimal(double, FormattedFPDecimal):int (220 bytes)   relevance-based (relevance=0.968962, probability=0.140339, bonus=1.000000, nodes=82 <= 290.688478)
                                        @ 12  jdk.internal.math.DoubleToDecimal.split(double, FormattedFPDecimal):void (15 bytes)   relevance-based (relevance=0.968962, probability=0.140339, bonus=1.000000, nodes=92 <= 290.688478)
                            @ 64  jdk.internal.math.MathUtils.pow10(int):long (6 bytes)   inline method (bytecode parsing)
                            @ 119  jdk.internal.math.MathUtils.pow10(int):long (6 bytes)   inline method (bytecode parsing)
                                          @ 14  jdk.internal.math.FormattedFPDecimal.round(long):void (149 bytes)   relevance-based (relevance=1.000000, probability=0.140339, bonus=1.000000, nodes=80 <= 300.000000)
                                              @ 29  jdk.internal.math.FormattedFPDecimal.fillWithZeros(int, int):void (20 bytes)   relevance-based (relevance=1.000000, probability=0.094480, bonus=1.000000, nodes=22 <= 300.000000)
                            @ 30  jdk.internal.math.FormattedFPDecimal.toDigit(long):char (6 bytes)   inline method (bytecode parsing)
                              @ 2  jdk.internal.math.FormattedFPDecimal.toDigit(int):char (6 bytes)   inline method (bytecode parsing)
                                              @ 42  jdk.internal.math.FormattedFPDecimal.fillWithDigits(long, int, int):long (42 bytes)   relevance-based (relevance=1.000000, probability=0.094480, bonus=1.000000, nodes=37 <= 300.000000)
                                            @ 8  jdk.internal.math.FormattedFPDecimal.plainCharsPureInteger():void (47 bytes)   relevance-based (relevance=1.000000, probability=0.094480, bonus=1.000000, nodes=59 <= 300.000000)
                            @ 30  jdk.internal.math.FormattedFPDecimal.toDigit(long):char (6 bytes)   inline method (bytecode parsing)
                              @ 2  jdk.internal.math.FormattedFPDecimal.toDigit(int):char (6 bytes)   inline method (bytecode parsing)
                                              @ 34  jdk.internal.math.FormattedFPDecimal.fillWithDigits(long, int, int):long (42 bytes)   relevance-based (relevance=0.207630, probability=0.019617, bonus=1.000000, nodes=37 <= 62.288902)
                              @ 7  java.lang.AbstractStringBuilder.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=9)
                            @ 30  jdk.internal.math.FormattedFPDecimal.toDigit(long):char (6 bytes)   inline method (bytecode parsing)
                              @ 2  jdk.internal.math.FormattedFPDecimal.toDigit(int):char (6 bytes)   inline method (bytecode parsing)
                              @ 40  java.lang.StringLatin1.canEncode(int):boolean (13 bytes)   trivial (relevance=1.000000, probability=3.743756, bonus=1.000000, nodes=8)
                                              @ 66  jdk.internal.math.FormattedFPDecimal.fillWithDigits(long, int, int):long (42 bytes)   relevance-based (relevance=0.207630, probability=0.019617, bonus=1.000000, nodes=37 <= 62.288902)
                                            @ 27  jdk.internal.math.FormattedFPDecimal.plainCharsMixed():void (71 bytes)   not inlining relevance-based (relevance=0.207630, probability=0.019617, bonus=1.000000, nodes=77 > 62.288902)
                            @ 53  jdk.internal.math.FormattedFPDecimal.fillWithZeros(int, int):void (20 bytes)   inline method (bytecode parsing)
                            @ 30  jdk.internal.math.FormattedFPDecimal.toDigit(long):char (6 bytes)   inline method (bytecode parsing)
                              @ 2  jdk.internal.math.FormattedFPDecimal.toDigit(int):char (6 bytes)   inline method (bytecode parsing)
                                              @ 36  jdk.internal.math.FormattedFPDecimal.fillWithDigits(long, int, int):long (42 bytes)   relevance-based (relevance=0.277744, probability=0.026241, bonus=1.000000, nodes=37 <= 83.323281)
                                            @ 34  jdk.internal.math.FormattedFPDecimal.plainCharsPureFraction():void (65 bytes)   relevance-based (relevance=0.277744, probability=0.026241, bonus=1.000000, nodes=70 <= 83.323281)
                                          @ 18  jdk.internal.math.FormattedFPDecimal.plainChars():FormattedFPDecimal (39 bytes)   relevance-based (relevance=1.566320, probability=0.140339, bonus=1.000000, nodes=139 <= 300.000000)
                                        @ 56  jdk.internal.math.FormattedFPDecimal.plain(int):FormattedFPDecimal (22 bytes)   relevance-based (relevance=1.606111, probability=0.140339, bonus=1.000000, nodes=218 <= 300.000000)
                                      @ 266  jdk.internal.math.FormattedFPDecimal.valueOf(double, int, char):FormattedFPDecimal (96 bytes)   not inlining relevance-based (relevance=0.968962, probability=0.140339, bonus=1.000000, nodes=304 > 290.688478)
                                      @ 3  java.lang.AbstractStringBuilder.<init>(int):void (39 bytes)   relevance-based (relevance=0.968962, probability=0.140339, bonus=1.000000, nodes=11 <= 290.688478)
                                              @ 3  java.lang.Math.max(int, int):int (11 bytes)   trivial (relevance=0.160878, probability=0.019983, bonus=1.000000, nodes=7)
                                            @ 29  jdk.internal.util.ArraysSupport.newLength(int, int, int):int (27 bytes)   relevance-based (relevance=0.160878, probability=0.019983, bonus=1.000000, nodes=15 <= 48.263485)
                                          @ 24  java.lang.AbstractStringBuilder.newCapacity(int):int (59 bytes)   relevance-based (relevance=0.160878, probability=0.019983, bonus=1.000000, nodes=27 <= 48.263485)
                                            @ 25  java.lang.Math.min(int, int):int (11 bytes)   trivial (relevance=0.160880, probability=0.019980, bonus=1.000000, nodes=7)
                                          @ 32  java.util.Arrays.copyOf(byte[], int):byte[] (33 bytes)   relevance-based (relevance=0.160878, probability=0.019983, bonus=1.000000, nodes=28 <= 48.263485)
                                        @ 10  java.lang.AbstractStringBuilder.ensureCapacityInternal(int):void (39 bytes)   relevance-based (relevance=0.968962, probability=0.140339, bonus=1.000000, nodes=72 <= 290.688478)
                                          @ 7  java.lang.AbstractStringBuilder.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=0.140338, bonus=1.000000, nodes=9)
                                          @ 40  java.lang.StringLatin1.canEncode(int):boolean (13 bytes)   trivial (relevance=1.000000, probability=0.525393, bonus=1.000000, nodes=8)
                                        @ 17  java.lang.AbstractStringBuilder.appendChars(char[], int, int):void (130 bytes)   relevance-based (relevance=1.129838, probability=0.140338, bonus=1.000000, nodes=37 <= 300.000000)
                                      @ 2  java.lang.AbstractStringBuilder.append(char[]):AbstractStringBuilder (22 bytes)   relevance-based (relevance=0.968962, probability=0.140339, bonus=1.000000, nodes=106 <= 290.688478)
                            @ 1  java.lang.StringBuilder.length():int (5 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.AbstractStringBuilder.length():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 17  java.lang.StringBuilder.charAt(int):char (6 bytes)   inline method (bytecode parsing)
                            @ 98  java.lang.StringBuilder.append(char):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 5  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                                          @ 9  java.lang.AbstractStringBuilder.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=0.251476, bonus=1.000000, nodes=9)
                                        @ 2  java.lang.AbstractStringBuilder.charAt(int):char (36 bytes)   relevance-based (relevance=1.222261, probability=0.251476, bonus=1.000000, nodes=19 <= 300.000000)
                                                @ 3  java.lang.Math.max(int, int):int (11 bytes)   trivial (relevance=0.111923, probability=0.013471, bonus=1.000000, nodes=7)
                                              @ 29  jdk.internal.util.ArraysSupport.newLength(int, int, int):int (27 bytes)   relevance-based (relevance=0.111923, probability=0.013471, bonus=1.000000, nodes=15 <= 33.576753)
                                            @ 24  java.lang.AbstractStringBuilder.newCapacity(int):int (59 bytes)   relevance-based (relevance=0.111923, probability=0.013471, bonus=1.000000, nodes=27 <= 33.576753)
                                              @ 25  java.lang.Math.min(int, int):int (11 bytes)   trivial (relevance=0.111924, probability=0.013469, bonus=1.000000, nodes=7)
                                            @ 32  java.util.Arrays.copyOf(byte[], int):byte[] (33 bytes)   relevance-based (relevance=0.111923, probability=0.013471, bonus=1.000000, nodes=28 <= 33.576753)
                                          @ 7  java.lang.AbstractStringBuilder.ensureCapacityInternal(int):void (39 bytes)   relevance-based (relevance=0.674104, probability=0.094603, bonus=1.000000, nodes=72 <= 202.231051)
                                          @ 11  java.lang.AbstractStringBuilder.isLatin1():boolean (19 bytes)   trivial (relevance=0.786025, probability=0.094603, bonus=1.000000, nodes=9)
                              @ 8  java.lang.Math.min(int, int):int (11 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=7)
                                          @ 18  java.lang.StringLatin1.canEncode(int):boolean (13 bytes)   trivial (relevance=0.786025, probability=0.094603, bonus=1.000000, nodes=5)
                              @ 44  java.util.BitSet.recalculateWordsInUse():void (39 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=38 <= 300.000000)
                                        @ 2  java.lang.AbstractStringBuilder.append(char):AbstractStringBuilder (77 bytes)   relevance-based (relevance=0.674104, probability=0.094603, bonus=1.000000, nodes=85 <= 202.231051)
                              @ 48  java.util.BitSet.checkInvariants():void (111 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=4)
                            @ 10  java.lang.StringBuilder.append(char):StringBuilder (8 bytes)   inline method (bytecode parsing)
                                                  @ 3  java.lang.Math.max(int, int):int (11 bytes)   trivial (relevance=0.113394, probability=0.081077, bonus=1.000000, nodes=7)
                                                @ 29  jdk.internal.util.ArraysSupport.newLength(int, int, int):int (27 bytes)   relevance-based (relevance=0.113394, probability=0.081077, bonus=1.000000, nodes=15 <= 34.018219)
                                              @ 24  java.lang.AbstractStringBuilder.newCapacity(int):int (59 bytes)   relevance-based (relevance=0.113394, probability=0.081077, bonus=1.000000, nodes=27 <= 34.018219)
                                                @ 25  java.lang.Math.min(int, int):int (11 bytes)   trivial (relevance=0.113395, probability=0.081066, bonus=1.000000, nodes=7)
                                              @ 32  java.util.Arrays.copyOf(byte[], int):byte[] (33 bytes)   relevance-based (relevance=0.113394, probability=0.081077, bonus=1.000000, nodes=28 <= 34.018219)
                                            @ 7  java.lang.AbstractStringBuilder.ensureCapacityInternal(int):void (39 bytes)   relevance-based (relevance=0.682967, probability=0.569400, bonus=1.000000, nodes=72 <= 204.889976)
                                            @ 11  java.lang.AbstractStringBuilder.isLatin1():boolean (19 bytes)   trivial (relevance=0.796360, probability=0.569399, bonus=1.000000, nodes=9)
                                            @ 18  java.lang.StringLatin1.canEncode(int):boolean (13 bytes)   trivial (relevance=0.796360, probability=0.569399, bonus=1.000000, nodes=5)
                                          @ 2  java.lang.AbstractStringBuilder.append(char):AbstractStringBuilder (77 bytes)   relevance-based (relevance=0.682967, probability=0.569400, bonus=1.000000, nodes=85 <= 204.889976)
                                        @ 108  java.util.Formatter$FormatSpecifier.trailingZeros(StringBuilder, int):void (21 bytes)   relevance-based (relevance=0.682967, probability=0.095846, bonus=1.000000, nodes=99 <= 204.889976)
                                      @ 293  java.util.Formatter$FormatSpecifier.addZeros(StringBuilder, int):void (112 bytes)   relevance-based (relevance=1.129838, probability=0.140338, bonus=1.000000, nodes=233 <= 300.000000)
                                    @ 77  java.util.Formatter$FormatSpecifier.print(Formatter, StringBuilder, double, Locale, int, char, int, boolean):void (912 bytes)   not inlining relevance-based (relevance=0.968962, probability=0.140339, bonus=1.000000, nodes=375 > 290.688478)
                                    @ 114  java.util.Formatter$FormatSpecifier.trailingSign(StringBuilder, boolean):StringBuilder (26 bytes)   trivial (relevance=0.968962, probability=0.140339, bonus=1.000000, nodes=6)
                            @ 2  java.lang.StringBuilder.append(CharSequence):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 1  java.lang.AbstractStringBuilder.length():int (5 bytes)   inline accessor method (bytecode parsing)
                                            @ 10  java.lang.StringBuilder.length():int (5 bytes)   trivial (relevance=0.968962, probability=0.140339, bonus=1.000000, nodes=5)
                            @ 1  java.util.AbstractList.<init>():void (10 bytes)   inline method (bytecode parsing)
                              @ 1  java.util.AbstractCollection.<init>():void (5 bytes)   inline method (bytecode parsing)
                              @ 4  java.util.ArrayList.<init>():void (12 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                                                  @ 3  java.lang.Math.max(int, int):int (11 bytes)   trivial (relevance=0.160878, probability=0.019983, bonus=1.000000, nodes=7)
                                                @ 29  jdk.internal.util.ArraysSupport.newLength(int, int, int):int (27 bytes)   relevance-based (relevance=0.160878, probability=0.019983, bonus=1.000000, nodes=15 <= 48.263485)
                                @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                              @ 11  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=8)
                                              @ 24  java.lang.AbstractStringBuilder.newCapacity(int):int (59 bytes)   relevance-based (relevance=0.160878, probability=0.019983, bonus=1.000000, nodes=27 <= 48.263485)
                                @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=3.763697, bonus=1.000000, nodes=9)
                                                @ 25  java.lang.Math.min(int, int):int (11 bytes)   trivial (relevance=0.160880, probability=0.019980, bonus=1.000000, nodes=7)
                                              @ 32  java.util.Arrays.copyOf(byte[], int):byte[] (33 bytes)   relevance-based (relevance=0.160878, probability=0.019983, bonus=1.000000, nodes=28 <= 48.263485)
                                  @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=3.763697, bonus=1.000000, nodes=5)
                                @ 14  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000000, probability=3.763697, bonus=1.000000, nodes=8)
                            @ 11  java.lang.Math.max(int, int):int (11 bytes)   inline method (bytecode parsing)
                                            @ 21  java.lang.AbstractStringBuilder.ensureCapacityInternal(int):void (39 bytes)   relevance-based (relevance=0.968962, probability=0.140339, bonus=1.000000, nodes=72 <= 290.688478)
                                  @ 1  java.lang.StringLatin1.canEncode(int):boolean (13 bytes)   trivial (relevance=1.002075, probability=3.763697, bonus=1.000000, nodes=5)
                                  @ 18  java.lang.Math.min(int, int):int (11 bytes)   trivial (relevance=1.002075, probability=3.763697, bonus=1.000000, nodes=7)
                                @ 17  java.lang.StringLatin1.indexOf(byte[], int, int, int):int (37 bytes)   relevance-based (relevance=1.000000, probability=3.763697, bonus=1.000000, nodes=21 <= 300.000000)
                              @ 27  java.lang.String.indexOf(int, int):int (37 bytes)   relevance-based (relevance=2.149015, probability=3.763697, bonus=1.000000, nodes=32 <= 300.000000)
                                              @ 11  java.lang.AbstractStringBuilder.getCoder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.140338, bonus=1.000000, nodes=5)
                                            @ 26  java.lang.AbstractStringBuilder.inflateIfNeededFor(AbstractStringBuilder):void (22 bytes)   trivial (relevance=1.129838, probability=0.140338, bonus=1.000000, nodes=9)
                              @ 70  java.util.Formatter$FixedString.<init>(String, int, int):void (20 bytes)   relevance-based (relevance=0.466295, probability=1.751359, bonus=1.000000, nodes=14 <= 139.888525)
                                            @ 42  java.lang.AbstractStringBuilder.getBytes(byte[], int, byte):void (44 bytes)   relevance-based (relevance=1.129838, probability=0.140338, bonus=1.000000, nodes=27 <= 300.000000)
                              @ 73  java.util.ArrayList.add(Object):boolean (25 bytes)   not inlining too large previous low-level graph (low-level-nodes: 478, relevance=0.466295, probability=1.751359, bonus=1.000000, nodes=15)
                                          @ 37  java.lang.AbstractStringBuilder.append(AbstractStringBuilder):AbstractStringBuilder (70 bytes)   relevance-based (relevance=0.968962, probability=0.140339, bonus=1.000000, nodes=112 <= 290.688478)
                              @ 45  java.util.Formatter$FixedString.<init>(String, int, int):void (20 bytes)   relevance-based (relevance=0.662259, probability=0.662259, bonus=1.000000, nodes=14 <= 198.677623)
                              @ 48  java.util.ArrayList.add(Object):boolean (25 bytes)   not inlining too large previous low-level graph (low-level-nodes: 478, relevance=0.662259, probability=0.662259, bonus=1.000000, nodes=15)
                                        @ 2  java.lang.AbstractStringBuilder.append(CharSequence):AbstractStringBuilder (54 bytes)   relevance-based (relevance=0.968962, probability=0.140339, bonus=1.000000, nodes=113 <= 290.688478)
                                @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=0.825750, probability=3.101438, bonus=1.000000, nodes=9)
                                      @ 10  java.lang.StringBuilder.append(CharSequence):Appendable (6 bytes)   relevance-based (relevance=0.968962, probability=0.140339, bonus=1.000000, nodes=115 <= 290.688478)
                            @ 3  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                                @ 12  java.lang.StringLatin1.charAt(byte[], int):char (15 bytes)   relevance-based (relevance=0.825750, probability=3.101438, bonus=1.000000, nodes=11 <= 247.725075)
                              @ 99  java.lang.String.charAt(int):char (25 bytes)   relevance-based (relevance=0.825750, probability=3.101438, bonus=1.000000, nodes=16 <= 247.725075)
                                    @ 154  java.util.Formatter$FormatSpecifier.appendJustified(Appendable, CharSequence):void (89 bytes)   relevance-based (relevance=0.968962, probability=0.140339, bonus=1.000000, nodes=129 <= 290.688478)
                                  @ 55  java.util.Formatter$FormatSpecifier.print(Formatter, double, Locale):void (158 bytes)   relevance-based (relevance=0.908790, probability=0.140339, bonus=1.000000, nodes=182 <= 272.637102)
                              @ 106  java.util.Formatter$Conversion.isValid(char):boolean (358 bytes)   trivial (relevance=0.825750, probability=3.101438, bonus=1.000000, nodes=9)
                            @ 35  java.lang.Character.isUpperCase(char):boolean (5 bytes)   inline method (bytecode parsing)
                                @ 146  java.util.Formatter$FormatSpecifier.printFloat(Formatter, Object, Locale):void (91 bytes)   relevance-based (relevance=0.908790, probability=0.140339, bonus=1.000000, nodes=196 <= 272.637102)
                              @ 1  java.lang.Character.isUpperCase(int):boolean (9 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.CharacterData.of(int):CharacterData (136 bytes)   trivial (relevance=0.825750, probability=3.101438, bonus=1.000000, nodes=5)
                              @ 205  java.util.Formatter$FormatSpecifier.print(Formatter, Object, Locale):void (234 bytes)   not inlining relevance-based (relevance=1.000096, probability=0.476124, bonus=1.000000, nodes=362 > 300.000000)
                                  @ 2  java.lang.CharacterDataLatin1.getPropertiesEx(int):int (11 bytes)   trivial (relevance=0.825750, probability=3.101438, bonus=1.000000, nodes=6)
                              @ 89  java.util.Formatter$FixedString.print(Formatter, Object, Locale):void (23 bytes)   not inlining too large previous low-level graph (low-level-nodes: 378, relevance=0.777929, probability=0.370355, bonus=1.000000, nodes=12)
                                @ 5  java.lang.CharacterDataLatin1.isUpperCase(int):boolean (16 bytes)   relevance-based (relevance=0.825750, probability=3.101438, bonus=1.000000, nodes=11 <= 247.725075)
                                @ 55  java.util.Formatter$Conversion.isText(char):boolean (34 bytes)   trivial (relevance=0.825750, probability=3.101438, bonus=1.000000, nodes=9)
                              @ 27  java.util.ArrayList$Itr.hasNext():boolean (20 bytes)   relevance-based (relevance=2.171729, probability=4.667284, bonus=1.000000, nodes=11 <= 300.000000)
                              @ 119  java.util.Formatter$FormatSpecifier.<init>(char):void (68 bytes)   relevance-based (relevance=0.825750, probability=3.101438, bonus=1.000000, nodes=28 <= 247.725075)
                              @ 122  java.util.ArrayList.add(Object):boolean (25 bytes)   not inlining too large previous low-level graph (low-level-nodes: 478, relevance=0.825750, probability=3.101438, bonus=1.000000, nodes=15)
                                @ 1  java.util.ArrayList$Itr.checkForComodification():void (23 bytes)   trivial (relevance=1.000000, probability=3.820805, bonus=1.000000, nodes=9)
                              @ 37  java.util.ArrayList$Itr.next():Object (66 bytes)   relevance-based (relevance=1.777855, probability=3.820805, bonus=1.000000, nodes=25 <= 300.000000)
                              @ 49  java.util.Formatter$FormatSpecifier.index():int (5 bytes)   trivial (relevance=1.777855, probability=3.820805, bonus=1.000000, nodes=9)
                            @ 58  java.util.Formatter$Flags.contains(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                                  @ 89  java.lang.String.toString():String (2 bytes)   trivial (relevance=0.733918, probability=0.511564, bonus=1.000000, nodes=4)
                            @ 34  java.util.Formatter$Flags.contains(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 2  java.lang.StringBuilder.append(CharSequence):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 2  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                                                @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=0.733918, probability=0.511564, bonus=1.000000, nodes=5)
                                              @ 10  java.lang.String.length():int (11 bytes)   trivial (relevance=0.733918, probability=0.511564, bonus=1.000000, nodes=8)
                                                    @ 3  java.lang.Math.max(int, int):int (11 bytes)   trivial (relevance=0.121854, probability=0.072842, bonus=1.000000, nodes=7)
                                                  @ 29  jdk.internal.util.ArraysSupport.newLength(int, int, int):int (27 bytes)   relevance-based (relevance=0.121854, probability=0.072842, bonus=1.000000, nodes=15 <= 36.556079)
                                                @ 24  java.lang.AbstractStringBuilder.newCapacity(int):int (59 bytes)   relevance-based (relevance=0.121854, probability=0.072842, bonus=1.000000, nodes=27 <= 36.556079)
                                                  @ 25  java.lang.Math.min(int, int):int (11 bytes)   trivial (relevance=0.121855, probability=0.072832, bonus=1.000000, nodes=7)
                                                @ 32  java.util.Arrays.copyOf(byte[], int):byte[] (33 bytes)   relevance-based (relevance=0.121854, probability=0.072842, bonus=1.000000, nodes=28 <= 36.556079)
                                              @ 21  java.lang.AbstractStringBuilder.ensureCapacityInternal(int):void (39 bytes)   relevance-based (relevance=0.733918, probability=0.511564, bonus=1.000000, nodes=72 <= 220.175376)
                                                  @ 11  java.lang.String.coder():byte (15 bytes)   trivial (relevance=0.855770, probability=0.511563, bonus=1.000000, nodes=5)
                                                @ 2  java.lang.AbstractStringBuilder.inflateIfNeededFor(String):void (22 bytes)   trivial (relevance=0.855770, probability=0.511563, bonus=1.000000, nodes=9)
                                                  @ 1  java.lang.String.coder():byte (15 bytes)   trivial (relevance=0.855779, probability=0.511563, bonus=1.000000, nodes=5)
                                                @ 15  java.lang.String.getBytes(byte[], int, byte):void (44 bytes)   relevance-based (relevance=0.855770, probability=0.511563, bonus=1.000000, nodes=26 <= 256.731089)
                                              @ 30  java.lang.AbstractStringBuilder.putStringAt(int, String):void (19 bytes)   relevance-based (relevance=0.855770, probability=0.511563, bonus=1.000000, nodes=32 <= 256.731089)
                                            @ 2  java.lang.AbstractStringBuilder.append(String):AbstractStringBuilder (45 bytes)   relevance-based (relevance=0.733918, probability=0.511564, bonus=1.000000, nodes=110 <= 220.175376)
                                          @ 21  java.lang.StringBuilder.append(String):AbstractStringBuilder (6 bytes)   relevance-based (relevance=0.733918, probability=0.511564, bonus=1.000000, nodes=112 <= 220.175376)
                                        @ 2  java.lang.AbstractStringBuilder.append(CharSequence):AbstractStringBuilder (54 bytes)   relevance-based (relevance=0.733918, probability=0.511564, bonus=1.000000, nodes=113 <= 220.175376)
                                      @ 10  java.lang.StringBuilder.append(CharSequence):Appendable (6 bytes)   relevance-based (relevance=0.733918, probability=0.511564, bonus=1.000000, nodes=115 <= 220.175376)
                                    @ 53  java.util.Formatter$FormatSpecifier.appendJustified(Appendable, CharSequence):void (89 bytes)   relevance-based (relevance=0.733918, probability=0.511564, bonus=1.000000, nodes=129 <= 220.175376)
                                  @ 93  java.util.Formatter$FormatSpecifier.print(Formatter, String, Locale):void (57 bytes)   relevance-based (relevance=0.733918, probability=0.511564, bonus=1.000000, nodes=138 <= 220.175376)
                                @ 176  java.util.Formatter$FormatSpecifier.printString(Formatter, Object, Locale):void (97 bytes)   relevance-based (relevance=0.733918, probability=0.511564, bonus=1.000000, nodes=156 <= 220.175376)
                            @ 4  java.lang.StringBuilder.<init>():void (7 bytes)   inline method (bytecode parsing)
                                    @ 3  java.lang.AbstractStringBuilder.<init>(int):void (39 bytes)   relevance-based (relevance=0.908790, probability=0.633456, bonus=1.000000, nodes=11 <= 272.637102)
                                    @ 11  java.lang.Double.compare(double, double):int (54 bytes)   relevance-based (relevance=0.908790, probability=0.633456, bonus=1.000000, nodes=25 <= 272.637102)
                                    @ 26  java.lang.Double.isNaN(double):boolean (12 bytes)   trivial (relevance=0.968962, probability=0.633456, bonus=1.000000, nodes=7)
                            @ 10  java.util.Formatter$Flags.contains(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 32  java.util.Formatter$Flags.contains(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                                    @ 43  java.util.Formatter$FormatSpecifier.leadingSign(StringBuilder, boolean):StringBuilder (80 bytes)   relevance-based (relevance=0.968962, probability=0.633456, bonus=1.000000, nodes=13 <= 290.688478)
                                    @ 49  java.lang.Double.isInfinite(double):boolean (17 bytes)   trivial (relevance=0.968962, probability=0.633456, bonus=1.000000, nodes=9)
                            @ 275  java.lang.StringBuilder.<init>():void (7 bytes)   inline method (bytecode parsing)
                            @ 280  jdk.internal.math.FormattedFPDecimal.getMantissa():char[] (5 bytes)   inline accessor method (bytecode parsing)
                            @ 283  java.lang.StringBuilder.append(char[]):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 299  java.util.Formatter$Flags.contains(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 4  jdk.internal.math.FormattedFPDecimal.<init>():void (5 bytes)   inline method (bytecode parsing)
                                          @ 5  jdk.internal.math.DoubleToDecimal.<init>(boolean):void (21 bytes)   trivial (relevance=0.968962, probability=0.633456, bonus=1.000000, nodes=9)
                            @ 15  jdk.internal.math.MathUtils.pow10(int):long (6 bytes)   inline method (bytecode parsing)
                                              @ 7  jdk.internal.math.MathUtils.flog10pow2(int):int (11 bytes)   relevance-based (relevance=1.024417, probability=0.404034, bonus=1.000000, nodes=10 <= 300.000000)
                                              @ 36  jdk.internal.math.FormattedFPDecimal.set(long, int, int):void (17 bytes)   relevance-based (relevance=1.024417, probability=0.404034, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 123  jdk.internal.math.DoubleToDecimal.toChars(long, int, FormattedFPDecimal):int (161 bytes)   relevance-based (relevance=0.968962, probability=0.404034, bonus=1.000000, nodes=36 <= 290.688478)
                                              @ 57  jdk.internal.math.MathUtils.flog10pow2(int):int (11 bytes)   relevance-based (relevance=0.581694, probability=0.187054, bonus=1.000000, nodes=10 <= 174.508062)
                                              @ 72  jdk.internal.math.MathUtils.flog10threeQuartersPow2(int):int (15 bytes)   relevance-based (relevance=0.131755, probability=0.042368, bonus=1.000000, nodes=12 <= 39.526479)
                                              @ 81  jdk.internal.math.MathUtils.flog2pow10(int):int (11 bytes)   relevance-based (relevance=0.713448, probability=0.229422, bonus=1.000000, nodes=10 <= 214.034541)
                                              @ 91  jdk.internal.math.MathUtils.g1(int):long (12 bytes)   relevance-based (relevance=0.713448, probability=0.229422, bonus=1.000000, nodes=10 <= 214.034541)
                                              @ 98  jdk.internal.math.MathUtils.g0(int):long (14 bytes)   relevance-based (relevance=0.713448, probability=0.229422, bonus=1.000000, nodes=11 <= 214.034541)
                                              @ 112  jdk.internal.math.DoubleToDecimal.rop(long, long, long):long (58 bytes)   relevance-based (relevance=0.713448, probability=0.229422, bonus=1.000000, nodes=20 <= 214.034541)
                            @ 1  java.lang.StringBuilder.length():int (5 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.AbstractStringBuilder.length():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 17  java.lang.StringBuilder.charAt(int):char (6 bytes)   inline method (bytecode parsing)
                            @ 98  java.lang.StringBuilder.append(char):StringBuilder (8 bytes)   inline method (bytecode parsing)
                                              @ 126  jdk.internal.math.DoubleToDecimal.rop(long, long, long):long (58 bytes)   relevance-based (relevance=0.713448, probability=0.229422, bonus=1.000000, nodes=20 <= 214.034541)
                                            @ 135  jdk.internal.math.DoubleToDecimal.toDecimal(int, long, int, FormattedFPDecimal):int (385 bytes)   not inlining relevance-based (relevance=0.581694, probability=0.229422, bonus=1.000000, nodes=175 > 174.508062)
                                          @ 10  jdk.internal.math.DoubleToDecimal.toDecimal(double, FormattedFPDecimal):int (220 bytes)   relevance-based (relevance=0.968962, probability=0.633456, bonus=1.000000, nodes=82 <= 290.688478)
                            @ 5  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                                        @ 12  jdk.internal.math.DoubleToDecimal.split(double, FormattedFPDecimal):void (15 bytes)   relevance-based (relevance=0.968962, probability=0.633456, bonus=1.000000, nodes=92 <= 290.688478)
                                @ 9  java.lang.AbstractStringBuilder.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=1.791925, bonus=1.000000, nodes=9)
                              @ 2  java.lang.AbstractStringBuilder.charAt(int):char (36 bytes)   relevance-based (relevance=1.222261, probability=1.791925, bonus=1.000000, nodes=19 <= 300.000000)
                            @ 64  jdk.internal.math.MathUtils.pow10(int):long (6 bytes)   inline method (bytecode parsing)
                            @ 119  jdk.internal.math.MathUtils.pow10(int):long (6 bytes)   inline method (bytecode parsing)
                                          @ 14  jdk.internal.math.FormattedFPDecimal.round(long):void (149 bytes)   relevance-based (relevance=1.000000, probability=0.633456, bonus=1.000000, nodes=80 <= 300.000000)
                                      @ 3  java.lang.Math.max(int, int):int (11 bytes)   trivial (relevance=0.111923, probability=0.095986, bonus=1.000000, nodes=7)
                                    @ 29  jdk.internal.util.ArraysSupport.newLength(int, int, int):int (27 bytes)   relevance-based (relevance=0.111923, probability=0.095986, bonus=1.000000, nodes=15 <= 33.576753)
                                  @ 24  java.lang.AbstractStringBuilder.newCapacity(int):int (59 bytes)   relevance-based (relevance=0.111923, probability=0.095986, bonus=1.000000, nodes=27 <= 33.576753)
                                    @ 25  java.lang.Math.min(int, int):int (11 bytes)   trivial (relevance=0.111924, probability=0.095973, bonus=1.000000, nodes=7)
                                  @ 32  java.util.Arrays.copyOf(byte[], int):byte[] (33 bytes)   relevance-based (relevance=0.111923, probability=0.095986, bonus=1.000000, nodes=28 <= 33.576753)
                                              @ 29  jdk.internal.math.FormattedFPDecimal.fillWithZeros(int, int):void (20 bytes)   relevance-based (relevance=1.000000, probability=0.426462, bonus=1.000000, nodes=22 <= 300.000000)
                                @ 7  java.lang.AbstractStringBuilder.ensureCapacityInternal(int):void (39 bytes)   relevance-based (relevance=0.674104, probability=0.674104, bonus=1.000000, nodes=72 <= 202.231051)
                            @ 30  jdk.internal.math.FormattedFPDecimal.toDigit(long):char (6 bytes)   inline method (bytecode parsing)
                                @ 11  java.lang.AbstractStringBuilder.isLatin1():boolean (19 bytes)   trivial (relevance=0.786025, probability=0.674103, bonus=1.000000, nodes=9)
                              @ 2  jdk.internal.math.FormattedFPDecimal.toDigit(int):char (6 bytes)   inline method (bytecode parsing)
                                @ 18  java.lang.StringLatin1.canEncode(int):boolean (13 bytes)   trivial (relevance=0.786025, probability=0.674103, bonus=1.000000, nodes=5)
                              @ 2  java.lang.AbstractStringBuilder.append(char):AbstractStringBuilder (77 bytes)   relevance-based (relevance=0.674104, probability=0.674104, bonus=1.000000, nodes=85 <= 202.231051)
                                              @ 42  jdk.internal.math.FormattedFPDecimal.fillWithDigits(long, int, int):long (42 bytes)   relevance-based (relevance=1.000000, probability=0.426462, bonus=1.000000, nodes=37 <= 300.000000)
                                            @ 8  jdk.internal.math.FormattedFPDecimal.plainCharsPureInteger():void (47 bytes)   relevance-based (relevance=1.000000, probability=0.426462, bonus=1.000000, nodes=59 <= 300.000000)
                            @ 10  java.lang.StringBuilder.append(char):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 30  jdk.internal.math.FormattedFPDecimal.toDigit(long):char (6 bytes)   inline method (bytecode parsing)
                              @ 2  jdk.internal.math.FormattedFPDecimal.toDigit(int):char (6 bytes)   inline method (bytecode parsing)
                                              @ 34  jdk.internal.math.FormattedFPDecimal.fillWithDigits(long, int, int):long (42 bytes)   relevance-based (relevance=0.207630, probability=0.088546, bonus=1.000000, nodes=37 <= 62.288902)
                                        @ 3  java.lang.Math.max(int, int):int (11 bytes)   trivial (relevance=0.113394, probability=0.577725, bonus=1.000000, nodes=7)
                                      @ 29  jdk.internal.util.ArraysSupport.newLength(int, int, int):int (27 bytes)   relevance-based (relevance=0.113394, probability=0.577725, bonus=1.000000, nodes=15 <= 34.018219)
                                    @ 24  java.lang.AbstractStringBuilder.newCapacity(int):int (59 bytes)   relevance-based (relevance=0.113394, probability=0.577725, bonus=1.000000, nodes=27 <= 34.018219)
                            @ 30  jdk.internal.math.FormattedFPDecimal.toDigit(long):char (6 bytes)   inline method (bytecode parsing)
                              @ 2  jdk.internal.math.FormattedFPDecimal.toDigit(int):char (6 bytes)   inline method (bytecode parsing)
                                              @ 66  jdk.internal.math.FormattedFPDecimal.fillWithDigits(long, int, int):long (42 bytes)   relevance-based (relevance=0.207630, probability=0.088546, bonus=1.000000, nodes=37 <= 62.288902)
                                      @ 25  java.lang.Math.min(int, int):int (11 bytes)   trivial (relevance=0.113395, probability=0.577647, bonus=1.000000, nodes=7)
                                    @ 32  java.util.Arrays.copyOf(byte[], int):byte[] (33 bytes)   relevance-based (relevance=0.113394, probability=0.577725, bonus=1.000000, nodes=28 <= 34.018219)
                                            @ 27  jdk.internal.math.FormattedFPDecimal.plainCharsMixed():void (71 bytes)   not inlining relevance-based (relevance=0.207630, probability=0.088546, bonus=1.000000, nodes=77 > 62.288902)
                                  @ 7  java.lang.AbstractStringBuilder.ensureCapacityInternal(int):void (39 bytes)   relevance-based (relevance=0.682967, probability=4.057334, bonus=1.000000, nodes=72 <= 204.889976)
                            @ 53  jdk.internal.math.FormattedFPDecimal.fillWithZeros(int, int):void (20 bytes)   inline method (bytecode parsing)
                                  @ 11  java.lang.AbstractStringBuilder.isLatin1():boolean (19 bytes)   trivial (relevance=0.796360, probability=4.057329, bonus=1.000000, nodes=9)
                                  @ 18  java.lang.StringLatin1.canEncode(int):boolean (13 bytes)   trivial (relevance=0.796360, probability=4.057329, bonus=1.000000, nodes=5)
                            @ 30  jdk.internal.math.FormattedFPDecimal.toDigit(long):char (6 bytes)   inline method (bytecode parsing)
                                @ 2  java.lang.AbstractStringBuilder.append(char):AbstractStringBuilder (77 bytes)   relevance-based (relevance=0.682967, probability=4.057334, bonus=1.000000, nodes=85 <= 204.889976)
                              @ 2  jdk.internal.math.FormattedFPDecimal.toDigit(int):char (6 bytes)   inline method (bytecode parsing)
                              @ 108  java.util.Formatter$FormatSpecifier.trailingZeros(StringBuilder, int):void (21 bytes)   relevance-based (relevance=0.682967, probability=0.682967, bonus=1.000000, nodes=102 <= 204.889976)
                                              @ 36  jdk.internal.math.FormattedFPDecimal.fillWithDigits(long, int, int):long (42 bytes)   relevance-based (relevance=0.277744, probability=0.118447, bonus=1.000000, nodes=37 <= 83.323281)
                                            @ 34  jdk.internal.math.FormattedFPDecimal.plainCharsPureFraction():void (65 bytes)   relevance-based (relevance=0.277744, probability=0.118447, bonus=1.000000, nodes=70 <= 83.323281)
                                          @ 18  jdk.internal.math.FormattedFPDecimal.plainChars():FormattedFPDecimal (39 bytes)   relevance-based (relevance=1.566320, probability=0.633456, bonus=1.000000, nodes=139 <= 300.000000)
                                        @ 56  jdk.internal.math.FormattedFPDecimal.plain(int):FormattedFPDecimal (22 bytes)   relevance-based (relevance=1.606111, probability=0.633456, bonus=1.000000, nodes=218 <= 300.000000)
                                      @ 266  jdk.internal.math.FormattedFPDecimal.valueOf(double, int, char):FormattedFPDecimal (96 bytes)   not inlining relevance-based (relevance=0.968962, probability=0.633456, bonus=1.000000, nodes=304 > 290.688478)
                                      @ 3  java.lang.AbstractStringBuilder.<init>(int):void (39 bytes)   relevance-based (relevance=0.968962, probability=0.633456, bonus=1.000000, nodes=11 <= 290.688478)
                                              @ 3  java.lang.Math.max(int, int):int (11 bytes)   trivial (relevance=0.160878, probability=0.090198, bonus=1.000000, nodes=7)
                                            @ 29  jdk.internal.util.ArraysSupport.newLength(int, int, int):int (27 bytes)   relevance-based (relevance=0.160878, probability=0.090198, bonus=1.000000, nodes=15 <= 48.263485)
                                          @ 24  java.lang.AbstractStringBuilder.newCapacity(int):int (59 bytes)   relevance-based (relevance=0.160878, probability=0.090198, bonus=1.000000, nodes=27 <= 48.263485)
                                            @ 25  java.lang.Math.min(int, int):int (11 bytes)   trivial (relevance=0.160880, probability=0.090186, bonus=1.000000, nodes=7)
                                          @ 32  java.util.Arrays.copyOf(byte[], int):byte[] (33 bytes)   relevance-based (relevance=0.160878, probability=0.090198, bonus=1.000000, nodes=28 <= 48.263485)
                                        @ 10  java.lang.AbstractStringBuilder.ensureCapacityInternal(int):void (39 bytes)   relevance-based (relevance=0.968962, probability=0.633456, bonus=1.000000, nodes=72 <= 290.688478)
                                          @ 7  java.lang.AbstractStringBuilder.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=0.633455, bonus=1.000000, nodes=9)
                                          @ 40  java.lang.StringLatin1.canEncode(int):boolean (13 bytes)   trivial (relevance=1.000000, probability=2.371500, bonus=1.000000, nodes=8)
                                        @ 17  java.lang.AbstractStringBuilder.appendChars(char[], int, int):void (130 bytes)   relevance-based (relevance=1.129838, probability=0.633455, bonus=1.000000, nodes=37 <= 300.000000)
                                      @ 2  java.lang.AbstractStringBuilder.append(char[]):AbstractStringBuilder (22 bytes)   relevance-based (relevance=0.968962, probability=0.633456, bonus=1.000000, nodes=106 <= 290.688478)
                            @ 1  java.lang.StringBuilder.length():int (5 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.AbstractStringBuilder.length():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 17  java.lang.StringBuilder.charAt(int):char (6 bytes)   inline method (bytecode parsing)
                            @ 98  java.lang.StringBuilder.append(char):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 5  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                                          @ 9  java.lang.AbstractStringBuilder.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=1.135103, bonus=1.000000, nodes=9)
                                        @ 2  java.lang.AbstractStringBuilder.charAt(int):char (36 bytes)   relevance-based (relevance=1.222261, probability=1.135103, bonus=1.000000, nodes=19 <= 300.000000)
                                                @ 3  java.lang.Math.max(int, int):int (11 bytes)   trivial (relevance=0.111923, probability=0.060803, bonus=1.000000, nodes=7)
                                              @ 29  jdk.internal.util.ArraysSupport.newLength(int, int, int):int (27 bytes)   relevance-based (relevance=0.111923, probability=0.060803, bonus=1.000000, nodes=15 <= 33.576753)
                                            @ 24  java.lang.AbstractStringBuilder.newCapacity(int):int (59 bytes)   relevance-based (relevance=0.111923, probability=0.060803, bonus=1.000000, nodes=27 <= 33.576753)
                                              @ 25  java.lang.Math.min(int, int):int (11 bytes)   trivial (relevance=0.111924, probability=0.060794, bonus=1.000000, nodes=7)
                                            @ 32  java.util.Arrays.copyOf(byte[], int):byte[] (33 bytes)   relevance-based (relevance=0.111923, probability=0.060803, bonus=1.000000, nodes=28 <= 33.576753)
                                          @ 7  java.lang.AbstractStringBuilder.ensureCapacityInternal(int):void (39 bytes)   relevance-based (relevance=0.674104, probability=0.427014, bonus=1.000000, nodes=72 <= 202.231051)
                                          @ 11  java.lang.AbstractStringBuilder.isLatin1():boolean (19 bytes)   trivial (relevance=0.786025, probability=0.427013, bonus=1.000000, nodes=9)
                                          @ 18  java.lang.StringLatin1.canEncode(int):boolean (13 bytes)   trivial (relevance=0.786025, probability=0.427013, bonus=1.000000, nodes=5)
                                        @ 2  java.lang.AbstractStringBuilder.append(char):AbstractStringBuilder (77 bytes)   relevance-based (relevance=0.674104, probability=0.427014, bonus=1.000000, nodes=85 <= 202.231051)
                            @ 10  java.lang.StringBuilder.append(char):StringBuilder (8 bytes)   inline method (bytecode parsing)
                                                  @ 3  java.lang.Math.max(int, int):int (11 bytes)   trivial (relevance=0.113394, probability=0.365963, bonus=1.000000, nodes=7)
                                                @ 29  jdk.internal.util.ArraysSupport.newLength(int, int, int):int (27 bytes)   relevance-based (relevance=0.113394, probability=0.365963, bonus=1.000000, nodes=15 <= 34.018219)
                                              @ 24  java.lang.AbstractStringBuilder.newCapacity(int):int (59 bytes)   relevance-based (relevance=0.113394, probability=0.365963, bonus=1.000000, nodes=27 <= 34.018219)
                                                @ 25  java.lang.Math.min(int, int):int (11 bytes)   trivial (relevance=0.113395, probability=0.365913, bonus=1.000000, nodes=7)
                                              @ 32  java.util.Arrays.copyOf(byte[], int):byte[] (33 bytes)   relevance-based (relevance=0.113394, probability=0.365963, bonus=1.000000, nodes=28 <= 34.018219)
                                            @ 7  java.lang.AbstractStringBuilder.ensureCapacityInternal(int):void (39 bytes)   relevance-based (relevance=0.682967, probability=2.570137, bonus=1.000000, nodes=72 <= 204.889976)
                                            @ 11  java.lang.AbstractStringBuilder.isLatin1():boolean (19 bytes)   trivial (relevance=0.796360, probability=2.570134, bonus=1.000000, nodes=9)
                                            @ 18  java.lang.StringLatin1.canEncode(int):boolean (13 bytes)   trivial (relevance=0.796360, probability=2.570134, bonus=1.000000, nodes=5)
                                          @ 2  java.lang.AbstractStringBuilder.append(char):AbstractStringBuilder (77 bytes)   relevance-based (relevance=0.682967, probability=2.570137, bonus=1.000000, nodes=85 <= 204.889976)
                                        @ 108  java.util.Formatter$FormatSpecifier.trailingZeros(StringBuilder, int):void (21 bytes)   relevance-based (relevance=0.682967, probability=0.432628, bonus=1.000000, nodes=99 <= 204.889976)
                                      @ 293  java.util.Formatter$FormatSpecifier.addZeros(StringBuilder, int):void (112 bytes)   relevance-based (relevance=1.129838, probability=0.633455, bonus=1.000000, nodes=233 <= 300.000000)
                                    @ 77  java.util.Formatter$FormatSpecifier.print(Formatter, StringBuilder, double, Locale, int, char, int, boolean):void (912 bytes)   not inlining relevance-based (relevance=0.968962, probability=0.633456, bonus=1.000000, nodes=375 > 290.688478)
                                    @ 114  java.util.Formatter$FormatSpecifier.trailingSign(StringBuilder, boolean):StringBuilder (26 bytes)   trivial (relevance=0.968962, probability=0.633456, bonus=1.000000, nodes=6)
                            @ 2  java.lang.StringBuilder.append(CharSequence):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 1  java.lang.AbstractStringBuilder.length():int (5 bytes)   inline accessor method (bytecode parsing)
                                            @ 10  java.lang.StringBuilder.length():int (5 bytes)   trivial (relevance=0.968962, probability=0.633456, bonus=1.000000, nodes=5)
                                                  @ 3  java.lang.Math.max(int, int):int (11 bytes)   trivial (relevance=0.160878, probability=0.090198, bonus=1.000000, nodes=7)
                                                @ 29  jdk.internal.util.ArraysSupport.newLength(int, int, int):int (27 bytes)   relevance-based (relevance=0.160878, probability=0.090198, bonus=1.000000, nodes=15 <= 48.263485)
                                              @ 24  java.lang.AbstractStringBuilder.newCapacity(int):int (59 bytes)   relevance-based (relevance=0.160878, probability=0.090198, bonus=1.000000, nodes=27 <= 48.263485)
                                                @ 25  java.lang.Math.min(int, int):int (11 bytes)   trivial (relevance=0.160880, probability=0.090186, bonus=1.000000, nodes=7)
                                              @ 32  java.util.Arrays.copyOf(byte[], int):byte[] (33 bytes)   relevance-based (relevance=0.160878, probability=0.090198, bonus=1.000000, nodes=28 <= 48.263485)
                                            @ 21  java.lang.AbstractStringBuilder.ensureCapacityInternal(int):void (39 bytes)   relevance-based (relevance=0.968962, probability=0.633456, bonus=1.000000, nodes=72 <= 290.688478)
                                              @ 11  java.lang.AbstractStringBuilder.getCoder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.633455, bonus=1.000000, nodes=5)
                                            @ 26  java.lang.AbstractStringBuilder.inflateIfNeededFor(AbstractStringBuilder):void (22 bytes)   trivial (relevance=1.129838, probability=0.633455, bonus=1.000000, nodes=9)
                                            @ 42  java.lang.AbstractStringBuilder.getBytes(byte[], int, byte):void (44 bytes)   relevance-based (relevance=1.129838, probability=0.633455, bonus=1.000000, nodes=27 <= 300.000000)
                                          @ 37  java.lang.AbstractStringBuilder.append(AbstractStringBuilder):AbstractStringBuilder (70 bytes)   relevance-based (relevance=0.968962, probability=0.633456, bonus=1.000000, nodes=112 <= 290.688478)
                                        @ 2  java.lang.AbstractStringBuilder.append(CharSequence):AbstractStringBuilder (54 bytes)   relevance-based (relevance=0.968962, probability=0.633456, bonus=1.000000, nodes=113 <= 290.688478)
                                      @ 10  java.lang.StringBuilder.append(CharSequence):Appendable (6 bytes)   relevance-based (relevance=0.968962, probability=0.633456, bonus=1.000000, nodes=115 <= 290.688478)
                                    @ 154  java.util.Formatter$FormatSpecifier.appendJustified(Appendable, CharSequence):void (89 bytes)   relevance-based (relevance=0.968962, probability=0.633456, bonus=1.000000, nodes=129 <= 290.688478)
                                  @ 55  java.util.Formatter$FormatSpecifier.print(Formatter, double, Locale):void (158 bytes)   relevance-based (relevance=0.908790, probability=0.633456, bonus=1.000000, nodes=182 <= 272.637102)
                                @ 146  java.util.Formatter$FormatSpecifier.printFloat(Formatter, Object, Locale):void (91 bytes)   relevance-based (relevance=0.908790, probability=0.633456, bonus=1.000000, nodes=196 <= 272.637102)
                              @ 205  java.util.Formatter$FormatSpecifier.print(Formatter, Object, Locale):void (234 bytes)   not inlining relevance-based (relevance=1.000096, probability=2.149110, bonus=1.000000, nodes=362 > 300.000000)
                              @ 89  java.util.Formatter$FixedString.print(Formatter, Object, Locale):void (23 bytes)   not inlining too large previous low-level graph (low-level-nodes: 378, relevance=0.777929, probability=1.671696, bonus=1.000000, nodes=12)
                            @ 55  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                            @ 23  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                            @ 37  jdk.graal.compiler.nodes.PiNode.piCastNonNull(Object, GuardingNode):Object (9 bytes)   inline method (bytecode parsing)
                            @ 91  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                            @ 118  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                            @ 126  jdk.graal.compiler.hotspot.replacements.TypeCheckSnippetUtils.checkSecondarySubType(KlassPointer, KlassPointer, TypeCheckSnippetUtils$Counters):boolean (36 bytes)   inline method (bytecode parsing)
                              @ 24  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                              @ 32  jdk.graal.compiler.hotspot.replacements.TypeCheckSnippetUtils.checkSelfAndSupers(KlassPointer, KlassPointer, TypeCheckSnippetUtils$Counters):boolean (113 bytes)   inline method (bytecode parsing)
                                @ 12  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                  @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                                @ 63  jdk.graal.compiler.hotspot.replacements.TypeCheckSnippetUtils.loadSecondarySupersElement(Word, int):KlassPointer (26 bytes)   inline method (bytecode parsing)
                                @ 93  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                  @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                                @ 108  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                  @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                            @ 45  org.graalvm.collections.EconomicMapImpl.getKey(int):Object (9 bytes)   inline method (bytecode parsing)
                            @ 48  org.graalvm.collections.EconomicMapImpl.setKey(int, Object):void (10 bytes)   inline method (bytecode parsing)
                            @ 75  org.graalvm.collections.EconomicMapImpl.setKey(int, Object):void (10 bytes)   inline method (bytecode parsing)
                            @ 81  org.graalvm.collections.EconomicMapImpl.setRawValue(int, Object):void (12 bytes)   inline method (bytecode parsing)
                            @ 112  org.graalvm.collections.EconomicMapImpl.getKey(int):Object (9 bytes)   inline method (bytecode parsing)
                              @ 23  org.graalvm.collections.EconomicMapImpl.hasHashArray():boolean (13 bytes)   trivial (relevance=1.206054, probability=0.845298, bonus=1.000000, nodes=9)
                              @ 57  org.graalvm.collections.EconomicMapImpl.getRawValue(int):Object (11 bytes)   relevance-based (relevance=1.000000, probability=0.714676, bonus=1.000000, nodes=10 <= 300.000000)
                              @ 60  org.graalvm.collections.EconomicMapImpl.setRawValue(int, Object):void (12 bytes)   relevance-based (relevance=1.000000, probability=0.714676, bonus=1.000000, nodes=12 <= 300.000000)
                            @ 23  java.lang.Math.max(int, int):int (11 bytes)   inline method (bytecode parsing)
                            @ 60  org.graalvm.collections.EconomicMapImpl.getKey(int):Object (9 bytes)   inline method (bytecode parsing)
                                @ 32  org.graalvm.collections.EconomicMapImpl.compressLarge(int):int (154 bytes)   not inlining relevance-based (relevance=0.017724, probability=0.011881, bonus=1.000000, nodes=96 > 5.317133)
                              @ 157  org.graalvm.collections.EconomicMapImpl.maybeCompress(int):int (38 bytes)   relevance-based (relevance=0.389308, probability=0.272857, bonus=1.000000, nodes=25 <= 116.792301)
                            @ 8  jdk.graal.compiler.lir.alloc.lsra.LinearScan.lambda$sortIntervals$0(Interval, Interval):int (10 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.lir.alloc.lsra.Interval.from():int (8 bytes)   inline method (bytecode parsing)
                              @ 5  jdk.graal.compiler.lir.alloc.lsra.Interval.from():int (8 bytes)   inline method (bytecode parsing)
                                @ 9  jdk.graal.compiler.lir.SwitchStrategy$RangesStrategy$1.compare(Integer, Integer):int (54 bytes)   not inlining relevance-based (relevance=0.005417, probability=0.008815, bonus=1.000000, nodes=35 > 1.625193)
                                @ 9  jdk.graal.compiler.lir.SwitchStrategy$SequentialStrategy$1.compare(Integer, Integer):int (54 bytes)   not inlining relevance-based (relevance=0.005417, probability=0.008815, bonus=1.000000, nodes=35 > 1.625193)
                                @ 6  java.util.Comparator.lambda$comparingInt$7b0bb60$1(ToIntFunction, Object, Object):int (18 bytes)   not inlining relevance-based (relevance=0.005417, probability=0.008815, bonus=1.000000, nodes=15 > 1.625193)
                              @ 6  java.util.Comparator.compare(Object, Object):int (0 bytes)   not inlining no type profile exists
                                @ 9  jdk.vm.ci.hotspot.HotSpotResolvedObjectTypeImpl$SortByOffset.compare(ResolvedJavaField, ResolvedJavaField):int (14 bytes)   not inlining relevance-based (relevance=0.015048, probability=0.024485, bonus=1.000000, nodes=18 > 4.514424)
                            @ 1  jdk.graal.compiler.core.common.cfg.BasicBlock.getId():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  jdk.graal.compiler.core.common.cfg.BasicBlock.getId():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 15  org.graalvm.collections.EconomicMapImpl.getKey(int):Object (9 bytes)   inline method (bytecode parsing)
                                  @ 8  java.lang.Integer.compare(int, int):int (20 bytes)   trivial (relevance=1.000000, probability=2.045018, bonus=1.000000, nodes=6)
                                @ 9  jdk.graal.compiler.core.common.cfg.BasicBlock$BlockIdComparator.compare(BasicBlock, BasicBlock):int (12 bytes)   relevance-based (relevance=1.000000, probability=2.045018, bonus=1.000000, nodes=14 <= 300.000000)
                            @ 49  jdk.graal.compiler.graph.Node.valueEquals(Node):boolean (10 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.graph.Node.getNodeClass():NodeClass (5 bytes)   inline accessor method (bytecode parsing)
                            @ 59  jdk.graal.compiler.core.common.Fields.getCount():int (6 bytes)   inline method (bytecode parsing)
                            @ 70  jdk.graal.compiler.core.common.Fields.getType(int):Class (7 bytes)   inline method (bytecode parsing)
                            @ 17  java.lang.Enum.ordinal():int (5 bytes)   inline accessor method (bytecode parsing)
                                        @ 2  java.util.EnumMap.isValidKey(Object):boolean (36 bytes)   relevance-based (relevance=1.000000, probability=0.172775, bonus=1.000000, nodes=13 <= 300.000000)
                                        @ 21  java.util.EnumMap.unmaskNull(Object):Object (13 bytes)   trivial (relevance=1.000084, probability=0.172775, bonus=1.000000, nodes=7)
                                      @ 7  java.util.EnumMap.get(Object):Object (29 bytes)   relevance-based (relevance=1.000000, probability=0.172775, bonus=1.000000, nodes=27 <= 300.000000)
                                    @ 1  jdk.graal.compiler.hotspot.HotSpotCompiledCodeBuilder$SiteComparator.ord(Infopoint):int (19 bytes)   relevance-based (relevance=4.000000, probability=0.172775, bonus=1.000000, nodes=36 <= 300.000000)
                            @ 17  java.lang.Enum.ordinal():int (5 bytes)   inline accessor method (bytecode parsing)
                                        @ 2  java.util.EnumMap.isValidKey(Object):boolean (36 bytes)   relevance-based (relevance=1.000000, probability=0.172775, bonus=1.000000, nodes=13 <= 300.000000)
                                  @ 6  jdk.graal.compiler.graph.NodeClass.dataEquals(Node, Node):boolean (546 bytes)   not inlining relevance-based (relevance=0.093801, probability=0.022674, bonus=1.000000, nodes=248 > 28.140425)
                                @ 46  jdk.graal.compiler.graph.Graph$1.equals(Object, Object):boolean (53 bytes)   relevance-based (relevance=0.093801, probability=0.045347, bonus=1.000000, nodes=25 <= 28.140425)
                                        @ 21  java.util.EnumMap.unmaskNull(Object):Object (13 bytes)   trivial (relevance=1.000084, probability=0.172775, bonus=1.000000, nodes=7)
                                      @ 7  java.util.EnumMap.get(Object):Object (29 bytes)   relevance-based (relevance=1.000000, probability=0.172775, bonus=1.000000, nodes=27 <= 300.000000)
                                    @ 6  jdk.graal.compiler.hotspot.HotSpotCompiledCodeBuilder$SiteComparator.ord(Infopoint):int (19 bytes)   relevance-based (relevance=1.000084, probability=0.172775, bonus=1.000000, nodes=36 <= 300.000000)
                              @ 36  java.lang.Object.equals(Object):boolean (11 bytes)   not inlining no methods remaining after filtering less frequent methods (7 methods previously)
                              @ 24  org.graalvm.collections.EconomicMapImpl.compareKeys(Object, Object):boolean (52 bytes)   relevance-based (relevance=1.370063, probability=1.109617, bonus=1.000000, nodes=66 <= 300.000000)
                            @ 6  java.lang.Error.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                              @ 34  org.graalvm.collections.EconomicMapImpl.getRawValue(int):Object (11 bytes)   relevance-based (relevance=0.619966, probability=0.299715, bonus=1.000000, nodes=10 <= 185.989840)
                            @ 89  java.lang.String.format(Locale, String, Object[]):String (17 bytes)   inline method (bytecode parsing)
                              @ 5  java.util.Formatter.<init>(Locale):void (13 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.StringBuilder.<init>():void (7 bytes)   inline method (bytecode parsing)
                              @ 49  org.graalvm.collections.EconomicMapImpl.getRawValue(int):Object (11 bytes)   relevance-based (relevance=0.226745, probability=0.109617, bonus=1.000000, nodes=10 <= 68.023477)
                                @ 9  java.util.Formatter.<init>(Locale, Appendable):void (15 bytes)   inline method (bytecode parsing)
                                      @ 3  jdk.graal.compiler.debug.GraalError.format(String, Object[]):String (93 bytes)   not inlining relevance-based (relevance=0.250021, probability=0.043194, bonus=1.000000, nodes=81 > 75.006299)
                 n                      @ 16  java.lang.Throwable.fillInStackTrace(int):Throwable (0 bytes)   not inlining it is a non-intrinsic native method
              s                         @ 24  java.lang.Throwable.fillInStackTrace():Throwable (29 bytes)   relevance-based (relevance=0.250021, probability=0.043194, bonus=1.000000, nodes=34 <= 75.006299)
                                      @ 2  java.lang.Throwable.<init>(String):void (34 bytes)   relevance-based (relevance=0.250021, probability=0.043194, bonus=1.000000, nodes=45 <= 75.006299)
                            @ 1  java.util.AbstractList.<init>():void (10 bytes)   inline method (bytecode parsing)
                              @ 1  java.util.AbstractCollection.<init>():void (5 bytes)   inline method (bytecode parsing)
                                      @ 14  java.util.ArrayList.<init>():void (12 bytes)   relevance-based (relevance=1.000084, probability=0.043194, bonus=1.000000, nodes=11 <= 300.000000)
                                    @ 36  jdk.graal.compiler.debug.GraalError.<init>(String, Object[]):void (21 bytes)   relevance-based (relevance=0.250021, probability=0.043194, bonus=1.000000, nodes=62 <= 75.006299)
                                  @ 86  jdk.graal.compiler.hotspot.HotSpotCompiledCodeBuilder$SiteComparator.checkCollision(Infopoint, Infopoint):int (44 bytes)   relevance-based (relevance=1.000000, probability=0.172775, bonus=1.000000, nodes=145 <= 300.000000)
                                @ 9  jdk.graal.compiler.hotspot.HotSpotCompiledCodeBuilder$SiteComparator.compare(Site, Site):int (100 bytes)   relevance-based (relevance=1.000000, probability=2.764398, bonus=1.000000, nodes=191 <= 300.000000)
                              @ 93  jdk.graal.compiler.lir.alloc.lsra.LinearScan$$Lambda/0x00007f86742f2570.compare(Object, Object):int (12 bytes)   not inlining relevance-based (relevance=1.771761, probability=7.755007, bonus=1.000000, nodes=304 > 300.000000)
                            @ 5  jdk.graal.compiler.replacements.arraycopy.ArrayCopySnippets.checkArrayTypes(Object, Object, ArrayCopySnippets$ArrayCopyTypeCheck):void (98 bytes)   inline method (bytecode parsing)
                            @ 20  jdk.graal.compiler.replacements.arraycopy.ArrayCopySnippets.checkLimits(Object, int, Object, int, int, JavaKind, ArrayCopySnippets$Counters):int[] (230 bytes)   inline method (bytecode parsing)
                              @ 21  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                              @ 37  jdk.graal.compiler.nodes.PiNode.piCastPositive(int, GuardingNode):int (9 bytes)   inline method (bytecode parsing)
                              @ 64  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                              @ 81  jdk.graal.compiler.nodes.PiNode.piCastPositive(int, GuardingNode):int (9 bytes)   inline method (bytecode parsing)
                              @ 108  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                              @ 125  jdk.graal.compiler.nodes.PiNode.piCastPositive(int, GuardingNode):int (9 bytes)   inline method (bytecode parsing)
                              @ 159  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                              @ 200  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                              @ 217  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                              @ 226  jdk.graal.compiler.replacements.arraycopy.ArrayCopySnippets.createCheckLimitsResult(int, int, int):int[] (18 bytes)   inline method (bytecode parsing)
                            @ 47  jdk.graal.compiler.replacements.arraycopy.ArrayCopySnippets.incrementLengthCounter(int, ArrayCopySnippets$Counters):void (16 bytes)   inline method (bytecode parsing)
                              @ 12  jdk.graal.compiler.replacements.SnippetIntegerHistogram.inc(long):void (215 bytes)   inline method (bytecode parsing)
                            @ 52  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                            @ 59  jdk.graal.compiler.replacements.SnippetCounter.add(int):void (13 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                            @ 77  jdk.graal.compiler.replacements.arraycopy.ArrayCopySnippets.doArraycopyExactStubCallSnippet(Object, int, Object, int, int, JavaKind, LocationIdentity, ArrayCopySnippets$Counters):void (19 bytes)   inline method (bytecode parsing)
                              @ 12  jdk.graal.compiler.hotspot.replacements.arraycopy.HotSpotArraycopySnippets.heapWordSize():int (7 bytes)   inline method (bytecode parsing)
                              @ 15  jdk.graal.compiler.replacements.arraycopy.ArrayCopyCallNode.arraycopy(Object, int, Object, int, int, JavaKind, LocationIdentity, int):void (19 bytes)   inline method (bytecode parsing)
                              @ 1  java.util.Formatter.ensureOpen():void (16 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=7)
                              @ 11  java.util.Formatter.parse(String):List (208 bytes)   not inlining too large previous low-level graph (low-level-nodes: 500, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=83)
                                @ 5  java.util.ArrayList$Itr.<init>(ArrayList):void (26 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=15 <= 300.000000)
                              @ 18  java.util.ArrayList.iterator():Iterator (9 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=16 <= 300.000000)
                              @ 27  java.util.ArrayList$Itr.hasNext():boolean (20 bytes)   relevance-based (relevance=2.100294, probability=6.513763, bonus=1.000000, nodes=11 <= 300.000000)
                                @ 1  java.util.ArrayList$Itr.checkForComodification():void (23 bytes)   trivial (relevance=1.000000, probability=5.513763, bonus=1.000000, nodes=9)
                              @ 37  java.util.ArrayList$Itr.next():Object (66 bytes)   relevance-based (relevance=1.777855, probability=5.513763, bonus=1.000000, nodes=25 <= 300.000000)
                              @ 49  java.util.Formatter$FormatSpecifier.index():int (5 bytes)   trivial (relevance=1.777855, probability=5.513763, bonus=1.000000, nodes=9)
                            @ 58  java.util.Formatter$Flags.contains(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                                  @ 89  java.lang.String.toString():String (2 bytes)   trivial (relevance=0.690186, probability=0.690458, bonus=1.000000, nodes=4)
                            @ 34  java.util.Formatter$Flags.contains(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 2  java.lang.StringBuilder.append(CharSequence):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 2  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                                                @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=0.690186, probability=0.690458, bonus=1.000000, nodes=5)
                                              @ 10  java.lang.String.length():int (11 bytes)   trivial (relevance=0.690186, probability=0.690458, bonus=1.000000, nodes=8)
                                                    @ 3  java.lang.Math.max(int, int):int (11 bytes)   trivial (relevance=0.114593, probability=0.098315, bonus=1.000000, nodes=7)
                                                  @ 29  jdk.internal.util.ArraysSupport.newLength(int, int, int):int (27 bytes)   relevance-based (relevance=0.114593, probability=0.098315, bonus=1.000000, nodes=15 <= 34.377834)
                                                @ 24  java.lang.AbstractStringBuilder.newCapacity(int):int (59 bytes)   relevance-based (relevance=0.114593, probability=0.098315, bonus=1.000000, nodes=27 <= 34.377834)
                                                  @ 25  java.lang.Math.min(int, int):int (11 bytes)   trivial (relevance=0.114594, probability=0.098301, bonus=1.000000, nodes=7)
                                                @ 32  java.util.Arrays.copyOf(byte[], int):byte[] (33 bytes)   relevance-based (relevance=0.114593, probability=0.098315, bonus=1.000000, nodes=28 <= 34.377834)
                                              @ 21  java.lang.AbstractStringBuilder.ensureCapacityInternal(int):void (39 bytes)   relevance-based (relevance=0.690186, probability=0.690458, bonus=1.000000, nodes=72 <= 207.055918)
                                                  @ 11  java.lang.String.coder():byte (15 bytes)   trivial (relevance=0.804778, probability=0.690457, bonus=1.000000, nodes=5)
                                                @ 2  java.lang.AbstractStringBuilder.inflateIfNeededFor(String):void (22 bytes)   trivial (relevance=0.804778, probability=0.690457, bonus=1.000000, nodes=9)
                                                  @ 1  java.lang.String.coder():byte (15 bytes)   trivial (relevance=0.804786, probability=0.690457, bonus=1.000000, nodes=5)
                                                @ 15  java.lang.String.getBytes(byte[], int, byte):void (44 bytes)   relevance-based (relevance=0.804778, probability=0.690457, bonus=1.000000, nodes=26 <= 241.433408)
                                              @ 30  java.lang.AbstractStringBuilder.putStringAt(int, String):void (19 bytes)   relevance-based (relevance=0.804778, probability=0.690457, bonus=1.000000, nodes=32 <= 241.433408)
                                            @ 2  java.lang.AbstractStringBuilder.append(String):AbstractStringBuilder (45 bytes)   relevance-based (relevance=0.690186, probability=0.690458, bonus=1.000000, nodes=110 <= 207.055918)
                                          @ 21  java.lang.StringBuilder.append(String):AbstractStringBuilder (6 bytes)   relevance-based (relevance=0.690186, probability=0.690458, bonus=1.000000, nodes=112 <= 207.055918)
                                        @ 2  java.lang.AbstractStringBuilder.append(CharSequence):AbstractStringBuilder (54 bytes)   relevance-based (relevance=0.690186, probability=0.690458, bonus=1.000000, nodes=113 <= 207.055918)
                                      @ 10  java.lang.StringBuilder.append(CharSequence):Appendable (6 bytes)   relevance-based (relevance=0.690186, probability=0.690458, bonus=1.000000, nodes=115 <= 207.055918)
                                    @ 53  java.util.Formatter$FormatSpecifier.appendJustified(Appendable, CharSequence):void (89 bytes)   relevance-based (relevance=0.690186, probability=0.690458, bonus=1.000000, nodes=129 <= 207.055918)
                            @ 55  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                  @ 93  java.util.Formatter$FormatSpecifier.print(Formatter, String, Locale):void (57 bytes)   relevance-based (relevance=0.690186, probability=0.690458, bonus=1.000000, nodes=138 <= 207.055918)
                                @ 176  java.util.Formatter$FormatSpecifier.printString(Formatter, Object, Locale):void (97 bytes)   relevance-based (relevance=0.690186, probability=0.690458, bonus=1.000000, nodes=156 <= 207.055918)
                                @ 14  java.lang.Class.getComponentType():Class (14 bytes)   trivial (relevance=0.282835, probability=0.220477, bonus=1.000000, nodes=7)
                                @ 32  java.lang.Math.min(int, int):int (11 bytes)   trivial (relevance=1.282835, probability=1.000000, bonus=1.000000, nodes=7)
                              @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   relevance-based (relevance=1.354684, probability=1.000000, bonus=1.000000, nodes=40 <= 300.000000)
                            @ 4  java.lang.StringBuilder.<init>():void (7 bytes)   inline method (bytecode parsing)
                                    @ 3  java.lang.AbstractStringBuilder.<init>(int):void (39 bytes)   relevance-based (relevance=1.000000, probability=1.000394, bonus=1.000000, nodes=11 <= 300.000000)
                                    @ 11  java.lang.Double.compare(double, double):int (54 bytes)   relevance-based (relevance=1.000000, probability=1.000394, bonus=1.000000, nodes=25 <= 300.000000)
                                    @ 26  java.lang.Double.isNaN(double):boolean (12 bytes)   trivial (relevance=1.066210, probability=1.000394, bonus=1.000000, nodes=7)
                            @ 10  java.util.Formatter$Flags.contains(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 32  java.util.Formatter$Flags.contains(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                                    @ 43  java.util.Formatter$FormatSpecifier.leadingSign(StringBuilder, boolean):StringBuilder (80 bytes)   relevance-based (relevance=1.066210, probability=1.000394, bonus=1.000000, nodes=13 <= 300.000000)
                                    @ 49  java.lang.Double.isInfinite(double):boolean (17 bytes)   trivial (relevance=1.066210, probability=1.000394, bonus=1.000000, nodes=9)
                            @ 275  java.lang.StringBuilder.<init>():void (7 bytes)   inline method (bytecode parsing)
                            @ 280  jdk.internal.math.FormattedFPDecimal.getMantissa():char[] (5 bytes)   inline accessor method (bytecode parsing)
                            @ 283  java.lang.StringBuilder.append(char[]):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 299  java.util.Formatter$Flags.contains(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 4  jdk.internal.math.FormattedFPDecimal.<init>():void (5 bytes)   inline method (bytecode parsing)
                                          @ 5  jdk.internal.math.DoubleToDecimal.<init>(boolean):void (21 bytes)   trivial (relevance=1.000000, probability=1.000394, bonus=1.000000, nodes=9)
                            @ 15  jdk.internal.math.MathUtils.pow10(int):long (6 bytes)   inline method (bytecode parsing)
                                              @ 7  jdk.internal.math.MathUtils.flog10pow2(int):int (11 bytes)   relevance-based (relevance=1.057232, probability=0.638076, bonus=1.000000, nodes=10 <= 300.000000)
                                              @ 36  jdk.internal.math.FormattedFPDecimal.set(long, int, int):void (17 bytes)   relevance-based (relevance=1.057232, probability=0.638076, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 123  jdk.internal.math.DoubleToDecimal.toChars(long, int, FormattedFPDecimal):int (161 bytes)   relevance-based (relevance=1.000000, probability=0.638076, bonus=1.000000, nodes=36 <= 300.000000)
                                              @ 57  jdk.internal.math.MathUtils.flog10pow2(int):int (11 bytes)   relevance-based (relevance=0.600327, probability=0.326355, bonus=1.000000, nodes=10 <= 180.098017)
                                              @ 72  jdk.internal.math.MathUtils.flog10threeQuartersPow2(int):int (15 bytes)   relevance-based (relevance=0.066153, probability=0.035963, bonus=1.000000, nodes=12 <= 19.845883)
                                              @ 81  jdk.internal.math.MathUtils.flog2pow10(int):int (11 bytes)   relevance-based (relevance=0.666480, probability=0.362318, bonus=1.000000, nodes=10 <= 199.943901)
                                              @ 91  jdk.internal.math.MathUtils.g1(int):long (12 bytes)   relevance-based (relevance=0.666480, probability=0.362318, bonus=1.000000, nodes=10 <= 199.943901)
                                              @ 98  jdk.internal.math.MathUtils.g0(int):long (14 bytes)   relevance-based (relevance=0.666480, probability=0.362318, bonus=1.000000, nodes=11 <= 199.943901)
                                              @ 112  jdk.internal.math.DoubleToDecimal.rop(long, long, long):long (58 bytes)   relevance-based (relevance=0.666480, probability=0.362318, bonus=1.000000, nodes=20 <= 199.943901)
                                              @ 126  jdk.internal.math.DoubleToDecimal.rop(long, long, long):long (58 bytes)   relevance-based (relevance=0.666480, probability=0.362318, bonus=1.000000, nodes=20 <= 199.943901)
                                              @ 140  jdk.internal.math.DoubleToDecimal.rop(long, long, long):long (58 bytes)   relevance-based (relevance=0.666480, probability=0.362318, bonus=1.000000, nodes=20 <= 199.943901)
                                            @ 135  jdk.internal.math.DoubleToDecimal.toDecimal(int, long, int, FormattedFPDecimal):int (385 bytes)   not inlining relevance-based (relevance=0.600327, probability=0.362318, bonus=1.000000, nodes=183 > 180.098017)
                                          @ 10  jdk.internal.math.DoubleToDecimal.toDecimal(double, FormattedFPDecimal):int (220 bytes)   relevance-based (relevance=1.000000, probability=1.000394, bonus=1.000000, nodes=82 <= 300.000000)
                                        @ 12  jdk.internal.math.DoubleToDecimal.split(double, FormattedFPDecimal):void (15 bytes)   relevance-based (relevance=1.000000, probability=1.000394, bonus=1.000000, nodes=92 <= 300.000000)
                            @ 64  jdk.internal.math.MathUtils.pow10(int):long (6 bytes)   inline method (bytecode parsing)
                            @ 119  jdk.internal.math.MathUtils.pow10(int):long (6 bytes)   inline method (bytecode parsing)
                                          @ 14  jdk.internal.math.FormattedFPDecimal.round(long):void (149 bytes)   relevance-based (relevance=1.000000, probability=1.000394, bonus=1.000000, nodes=80 <= 300.000000)
                                              @ 29  jdk.internal.math.FormattedFPDecimal.fillWithZeros(int, int):void (20 bytes)   relevance-based (relevance=1.000000, probability=0.673497, bonus=1.000000, nodes=22 <= 300.000000)
                            @ 30  jdk.internal.math.FormattedFPDecimal.toDigit(long):char (6 bytes)   inline method (bytecode parsing)
                              @ 2  jdk.internal.math.FormattedFPDecimal.toDigit(int):char (6 bytes)   inline method (bytecode parsing)
                                              @ 42  jdk.internal.math.FormattedFPDecimal.fillWithDigits(long, int, int):long (42 bytes)   relevance-based (relevance=1.000000, probability=0.673497, bonus=1.000000, nodes=37 <= 300.000000)
                                            @ 8  jdk.internal.math.FormattedFPDecimal.plainCharsPureInteger():void (47 bytes)   relevance-based (relevance=1.000000, probability=0.673497, bonus=1.000000, nodes=59 <= 300.000000)
                            @ 30  jdk.internal.math.FormattedFPDecimal.toDigit(long):char (6 bytes)   inline method (bytecode parsing)
                              @ 2  jdk.internal.math.FormattedFPDecimal.toDigit(int):char (6 bytes)   inline method (bytecode parsing)
                                              @ 34  jdk.internal.math.FormattedFPDecimal.fillWithDigits(long, int, int):long (42 bytes)   relevance-based (relevance=0.207630, probability=0.139838, bonus=1.000000, nodes=37 <= 62.288902)
                            @ 30  jdk.internal.math.FormattedFPDecimal.toDigit(long):char (6 bytes)   inline method (bytecode parsing)
                              @ 2  jdk.internal.math.FormattedFPDecimal.toDigit(int):char (6 bytes)   inline method (bytecode parsing)
                                              @ 66  jdk.internal.math.FormattedFPDecimal.fillWithDigits(long, int, int):long (42 bytes)   relevance-based (relevance=0.207630, probability=0.139838, bonus=1.000000, nodes=37 <= 62.288902)
                                            @ 27  jdk.internal.math.FormattedFPDecimal.plainCharsMixed():void (71 bytes)   not inlining relevance-based (relevance=0.207630, probability=0.139838, bonus=1.000000, nodes=77 > 62.288902)
                            @ 53  jdk.internal.math.FormattedFPDecimal.fillWithZeros(int, int):void (20 bytes)   inline method (bytecode parsing)
                            @ 30  jdk.internal.math.FormattedFPDecimal.toDigit(long):char (6 bytes)   inline method (bytecode parsing)
                              @ 2  jdk.internal.math.FormattedFPDecimal.toDigit(int):char (6 bytes)   inline method (bytecode parsing)
                                              @ 36  jdk.internal.math.FormattedFPDecimal.fillWithDigits(long, int, int):long (42 bytes)   relevance-based (relevance=0.277744, probability=0.187060, bonus=1.000000, nodes=37 <= 83.323281)
                                            @ 34  jdk.internal.math.FormattedFPDecimal.plainCharsPureFraction():void (65 bytes)   relevance-based (relevance=0.277744, probability=0.187060, bonus=1.000000, nodes=70 <= 83.323281)
                                          @ 18  jdk.internal.math.FormattedFPDecimal.plainChars():FormattedFPDecimal (39 bytes)   relevance-based (relevance=1.566320, probability=1.000394, bonus=1.000000, nodes=139 <= 300.000000)
                                        @ 56  jdk.internal.math.FormattedFPDecimal.plain(int):FormattedFPDecimal (22 bytes)   relevance-based (relevance=1.657559, probability=1.000394, bonus=1.000000, nodes=218 <= 300.000000)
                                      @ 266  jdk.internal.math.FormattedFPDecimal.valueOf(double, int, char):FormattedFPDecimal (96 bytes)   not inlining relevance-based (relevance=1.000000, probability=1.000394, bonus=1.000000, nodes=304 > 300.000000)
                                      @ 3  java.lang.AbstractStringBuilder.<init>(int):void (39 bytes)   relevance-based (relevance=1.000000, probability=1.000394, bonus=1.000000, nodes=11 <= 300.000000)
                                              @ 3  java.lang.Math.max(int, int):int (11 bytes)   trivial (relevance=0.166032, probability=0.142446, bonus=1.000000, nodes=7)
                                            @ 29  jdk.internal.util.ArraysSupport.newLength(int, int, int):int (27 bytes)   relevance-based (relevance=0.166032, probability=0.142446, bonus=1.000000, nodes=15 <= 49.809492)
                                          @ 24  java.lang.AbstractStringBuilder.newCapacity(int):int (59 bytes)   relevance-based (relevance=0.166032, probability=0.142446, bonus=1.000000, nodes=27 <= 49.809492)
                                            @ 25  java.lang.Math.min(int, int):int (11 bytes)   trivial (relevance=0.166033, probability=0.142427, bonus=1.000000, nodes=7)
                                          @ 32  java.util.Arrays.copyOf(byte[], int):byte[] (33 bytes)   relevance-based (relevance=0.166032, probability=0.142446, bonus=1.000000, nodes=28 <= 49.809492)
                                        @ 10  java.lang.AbstractStringBuilder.ensureCapacityInternal(int):void (39 bytes)   relevance-based (relevance=1.000000, probability=1.000394, bonus=1.000000, nodes=72 <= 300.000000)
                                          @ 7  java.lang.AbstractStringBuilder.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=1.000393, bonus=1.000000, nodes=9)
                                          @ 40  java.lang.StringLatin1.canEncode(int):boolean (13 bytes)   trivial (relevance=1.000000, probability=3.745227, bonus=1.000000, nodes=8)
                                        @ 17  java.lang.AbstractStringBuilder.appendChars(char[], int, int):void (130 bytes)   relevance-based (relevance=1.166030, probability=1.000393, bonus=1.000000, nodes=37 <= 300.000000)
                                      @ 2  java.lang.AbstractStringBuilder.append(char[]):AbstractStringBuilder (22 bytes)   relevance-based (relevance=1.000000, probability=1.000394, bonus=1.000000, nodes=106 <= 300.000000)
                            @ 1  java.lang.StringBuilder.length():int (5 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.AbstractStringBuilder.length():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 17  java.lang.StringBuilder.charAt(int):char (6 bytes)   inline method (bytecode parsing)
                            @ 98  java.lang.StringBuilder.append(char):StringBuilder (8 bytes)   inline method (bytecode parsing)
                                      @ 293  java.util.Formatter$FormatSpecifier.addZeros(StringBuilder, int):void (112 bytes)   not inlining too large previous low-level graph (low-level-nodes: 940, relevance=1.166030, probability=1.000393, bonus=1.000000, nodes=61)
                            @ 13  java.lang.StringBuilder.length():int (5 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.AbstractStringBuilder.length():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 101  java.util.Formatter$Flags.contains(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 261  java.lang.StringBuilder.append(char):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 291  java.lang.StringBuilder.append(char):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 337  java.lang.StringBuilder.length():int (5 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.AbstractStringBuilder.length():int (5 bytes)   inline accessor method (bytecode parsing)
                                      @ 358  java.util.Formatter$FormatSpecifier.localizedMagnitude(Formatter, StringBuilder, CharSequence, int, int, int, Locale):StringBuilder (381 bytes)   not inlining too large previous low-level graph (low-level-nodes: 981, relevance=1.166030, probability=1.000393, bonus=1.000000, nodes=94)
                                    @ 77  java.util.Formatter$FormatSpecifier.print(Formatter, StringBuilder, double, Locale, int, char, int, boolean):void (912 bytes)   relevance-based (relevance=1.066210, probability=1.000394, bonus=1.000000, nodes=152 <= 300.000000)
                                    @ 114  java.util.Formatter$FormatSpecifier.trailingSign(StringBuilder, boolean):StringBuilder (26 bytes)   trivial (relevance=1.066209, probability=1.000393, bonus=1.000000, nodes=6)
                            @ 2  java.lang.StringBuilder.append(CharSequence):StringBuilder (8 bytes)   inline method (bytecode parsing)
                                @ 25  java.util.ArrayDeque.dec(int, int):int (13 bytes)   relevance-based (relevance=1.002093, probability=1.000000, bonus=1.000000, nodes=18 <= 300.000000)
                            @ 55  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                @ 47  java.util.ArrayDeque.grow(int):void (165 bytes)   not inlining too large previous low-level graph (low-level-nodes: 1230, relevance=0.003088, probability=0.002088, bonus=1.000000, nodes=75)
                              @ 2  java.util.ArrayDeque.addFirst(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=42 <= 300.000000)
                            @ 1  java.lang.AbstractStringBuilder.length():int (5 bytes)   inline accessor method (bytecode parsing)
                                            @ 10  java.lang.StringBuilder.length():int (5 bytes)   trivial (relevance=1.000000, probability=1.000393, bonus=1.000000, nodes=5)
                                                  @ 3  java.lang.Math.max(int, int):int (11 bytes)   trivial (relevance=0.166032, probability=0.142446, bonus=1.000000, nodes=7)
                                                @ 29  jdk.internal.util.ArraysSupport.newLength(int, int, int):int (27 bytes)   relevance-based (relevance=0.166032, probability=0.142446, bonus=1.000000, nodes=15 <= 49.809492)
                                              @ 24  java.lang.AbstractStringBuilder.newCapacity(int):int (59 bytes)   relevance-based (relevance=0.166032, probability=0.142446, bonus=1.000000, nodes=27 <= 49.809492)
                                                @ 25  java.lang.Math.min(int, int):int (11 bytes)   trivial (relevance=0.166033, probability=0.142427, bonus=1.000000, nodes=7)
                                              @ 32  java.util.Arrays.copyOf(byte[], int):byte[] (33 bytes)   relevance-based (relevance=0.166032, probability=0.142446, bonus=1.000000, nodes=28 <= 49.809492)
                                            @ 21  java.lang.AbstractStringBuilder.ensureCapacityInternal(int):void (39 bytes)   relevance-based (relevance=1.000000, probability=1.000393, bonus=1.000000, nodes=72 <= 300.000000)
                                              @ 11  java.lang.AbstractStringBuilder.getCoder():byte (15 bytes)   trivial (relevance=1.000000, probability=1.000391, bonus=1.000000, nodes=5)
                                            @ 26  java.lang.AbstractStringBuilder.inflateIfNeededFor(AbstractStringBuilder):void (22 bytes)   trivial (relevance=1.166030, probability=1.000391, bonus=1.000000, nodes=9)
                                            @ 42  java.lang.AbstractStringBuilder.getBytes(byte[], int, byte):void (44 bytes)   relevance-based (relevance=1.166030, probability=1.000391, bonus=1.000000, nodes=27 <= 300.000000)
                                          @ 37  java.lang.AbstractStringBuilder.append(AbstractStringBuilder):AbstractStringBuilder (70 bytes)   relevance-based (relevance=1.000000, probability=1.000393, bonus=1.000000, nodes=112 <= 300.000000)
                                        @ 2  java.lang.AbstractStringBuilder.append(CharSequence):AbstractStringBuilder (54 bytes)   relevance-based (relevance=1.000000, probability=1.000393, bonus=1.000000, nodes=113 <= 300.000000)
                                      @ 10  java.lang.StringBuilder.append(CharSequence):Appendable (6 bytes)   relevance-based (relevance=1.000000, probability=1.000393, bonus=1.000000, nodes=115 <= 300.000000)
                                    @ 154  java.util.Formatter$FormatSpecifier.appendJustified(Appendable, CharSequence):void (89 bytes)   relevance-based (relevance=1.066209, probability=1.000393, bonus=1.000000, nodes=129 <= 300.000000)
                                  @ 55  java.util.Formatter$FormatSpecifier.print(Formatter, double, Locale):void (158 bytes)   not inlining relevance-based (relevance=1.000000, probability=1.000394, bonus=1.000000, nodes=314 > 300.000000)
                                @ 146  java.util.Formatter$FormatSpecifier.printFloat(Formatter, Object, Locale):void (91 bytes)   relevance-based (relevance=1.000000, probability=1.000394, bonus=1.000000, nodes=23 <= 300.000000)
                            @ 4  java.lang.StringBuilder.<init>():void (7 bytes)   inline method (bytecode parsing)
                                      @ 3  java.lang.AbstractStringBuilder.<init>(int):void (39 bytes)   relevance-based (relevance=0.456929, probability=0.457110, bonus=1.000000, nodes=11 <= 137.078850)
                            @ 28  java.lang.String.<init>(byte[], byte):void (15 bytes)   inline method (bytecode parsing)
                                          @ 1  java.lang.Long.stringSize(long):int (55 bytes)   relevance-based (relevance=0.456929, probability=0.457110, bonus=1.000000, nodes=34 <= 137.078850)
                                          @ 18  java.lang.Long.getChars(long, int, byte[]):int (195 bytes)   relevance-based (relevance=0.456929, probability=0.457110, bonus=1.000000, nodes=61 <= 137.078850)
                                @ 25  java.lang.Math.min(int, int):int (11 bytes)   trivial (relevance=0.406041, probability=0.288781, bonus=1.000000, nodes=7)
                              @ 21  java.util.Arrays.copyOf(long[], int):long[] (33 bytes)   relevance-based (relevance=0.406037, probability=0.288781, bonus=1.000000, nodes=21 <= 121.811100)
                                        @ 21  java.lang.Long.toString(long):String (55 bytes)   relevance-based (relevance=0.456929, probability=0.457110, bonus=1.000000, nodes=95 <= 137.078850)
                              @ 28  java.util.BitSet.checkInvariants():void (111 bytes)   trivial (relevance=0.406033, probability=0.288778, bonus=1.000000, nodes=4)
                                      @ 34  java.lang.Long.toString(long, int):String (139 bytes)   relevance-based (relevance=0.456929, probability=0.457110, bonus=1.000000, nodes=97 <= 137.078850)
                            @ 10  java.util.Formatter$Flags.contains(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 32  java.util.Formatter$Flags.contains(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                                      @ 44  java.util.Formatter$FormatSpecifier.leadingSign(StringBuilder, boolean):StringBuilder (80 bytes)   relevance-based (relevance=0.456929, probability=0.457110, bonus=1.000000, nodes=13 <= 137.078850)
                                      @ 79  java.util.Formatter$FormatSpecifier.adjustWidth(int, int, boolean):int (29 bytes)   trivial (relevance=0.456929, probability=0.457110, bonus=1.000000, nodes=9)
                            @ 13  java.lang.StringBuilder.length():int (5 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.AbstractStringBuilder.length():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 101  java.util.Formatter$Flags.contains(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 261  java.lang.StringBuilder.append(char):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 291  java.lang.StringBuilder.append(char):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 337  java.lang.StringBuilder.length():int (5 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.AbstractStringBuilder.length():int (5 bytes)   inline accessor method (bytecode parsing)
                                      @ 84  java.util.Formatter$FormatSpecifier.localizedMagnitude(Formatter, StringBuilder, CharSequence, int, int, int, Locale):StringBuilder (381 bytes)   not inlining too large previous low-level graph (low-level-nodes: 981, relevance=0.456929, probability=0.457110, bonus=1.000000, nodes=94)
                                      @ 93  java.util.Formatter$FormatSpecifier.trailingSign(StringBuilder, boolean):StringBuilder (26 bytes)   trivial (relevance=0.456929, probability=0.457110, bonus=1.000000, nodes=6)
                            @ 2  java.lang.StringBuilder.append(CharSequence):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 1  java.lang.AbstractStringBuilder.length():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 10  java.lang.StringBuilder.length():int (5 bytes)   trivial (relevance=0.456929, probability=0.457110, bonus=1.000000, nodes=5)
                            @ 1  java.util.Objects.requireNonNull(Object):Object (14 bytes)   inline method (bytecode parsing)
                            @ 43  java.util.ArrayList.elementAt(Object[], int):Object (4 bytes)   inline method (bytecode parsing)
                                                    @ 3  java.lang.Math.max(int, int):int (11 bytes)   trivial (relevance=0.075865, probability=0.065088, bonus=1.000000, nodes=7)
                                                  @ 29  jdk.internal.util.ArraysSupport.newLength(int, int, int):int (27 bytes)   relevance-based (relevance=0.075865, probability=0.065088, bonus=1.000000, nodes=15 <= 22.759426)
                                                @ 24  java.lang.AbstractStringBuilder.newCapacity(int):int (59 bytes)   not inlining relevance-based (relevance=0.075865, probability=0.065088, bonus=1.000000, nodes=27 > 22.759426)
                                                @ 32  java.util.Arrays.copyOf(byte[], int):byte[] (33 bytes)   not inlining relevance-based (relevance=0.075865, probability=0.065088, bonus=1.000000, nodes=29 > 22.759426)
                                              @ 21  java.lang.AbstractStringBuilder.ensureCapacityInternal(int):void (39 bytes)   relevance-based (relevance=0.456929, probability=0.457110, bonus=1.000000, nodes=29 <= 137.078850)
                            @ 5  jdk.graal.compiler.lir.constopt.UseEntry.getBlock():BasicBlock (5 bytes)   inline accessor method (bytecode parsing)
                                @ 8  jdk.graal.compiler.lir.constopt.ConstantLoadOptimization$Optimization.lambda$createConstantTree$5(ConstantTree, UseEntry):void (12 bytes)   not inlining relevance-based (relevance=0.023101, probability=0.017604, bonus=1.000000, nodes=13 > 6.930434)
                            @ 2  jdk.graal.compiler.lir.constopt.UseEntry.getBlock():BasicBlock (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 11  java.lang.AbstractStringBuilder.getCoder():byte (15 bytes)   trivial (relevance=0.532794, probability=0.457110, bonus=1.000000, nodes=5)
                                @ 8  jdk.graal.compiler.lir.constopt.ConstantTree.lambda$new$0(UseEntry):void (16 bytes)   not inlining relevance-based (relevance=0.023101, probability=0.017604, bonus=1.000000, nodes=15 > 6.930434)
                                              @ 26  java.lang.AbstractStringBuilder.inflateIfNeededFor(AbstractStringBuilder):void (22 bytes)   trivial (relevance=0.532794, probability=0.457110, bonus=1.000000, nodes=9)
                            @ 1  jdk.graal.compiler.lir.constopt.UseEntry.getBlock():BasicBlock (5 bytes)   inline accessor method (bytecode parsing)
                            @ 10  jdk.graal.compiler.core.common.cfg.BlockMap.get(BasicBlock):Object (10 bytes)   inline method (bytecode parsing)
                              @ 5  jdk.graal.compiler.core.common.cfg.BasicBlock.getId():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 42  java.lang.AbstractStringBuilder.getBytes(byte[], int, byte):void (44 bytes)   relevance-based (relevance=0.532794, probability=0.457110, bonus=1.000000, nodes=27 <= 159.838276)
                                @ 8  jdk.graal.compiler.lir.constopt.ConstantLoadOptimization$Optimization.addUsageToBlockMap(UseEntry):void (47 bytes)   not inlining relevance-based (relevance=0.023101, probability=0.017604, bonus=1.000000, nodes=42 > 6.930434)
                            @ 2  jdk.graal.compiler.lir.LIRInstruction.visitEachInput(InstructionValueConsumer):void (10 bytes)   inline method (bytecode parsing)
                            @ 7  jdk.graal.compiler.lir.LIRInstruction.visitEachAlive(InstructionValueConsumer):void (10 bytes)   inline method (bytecode parsing)
                                            @ 37  java.lang.AbstractStringBuilder.append(AbstractStringBuilder):AbstractStringBuilder (70 bytes)   relevance-based (relevance=0.456929, probability=0.457110, bonus=1.000000, nodes=70 <= 137.078850)
                            @ 12  jdk.graal.compiler.lir.LIRInstruction.visitEachState(InstructionValueConsumer):void (10 bytes)   inline method (bytecode parsing)
                            @ 17  jdk.graal.compiler.lir.LIRInstruction.visitEachTemp(InstructionValueConsumer):void (10 bytes)   inline method (bytecode parsing)
                            @ 22  jdk.graal.compiler.lir.LIRInstruction.visitEachOutput(InstructionValueConsumer):void (10 bytes)   inline method (bytecode parsing)
                                          @ 2  java.lang.AbstractStringBuilder.append(CharSequence):AbstractStringBuilder (54 bytes)   relevance-based (relevance=0.456929, probability=0.457110, bonus=1.000000, nodes=71 <= 137.078850)
                                        @ 10  java.lang.StringBuilder.append(CharSequence):Appendable (6 bytes)   relevance-based (relevance=0.456929, probability=0.457110, bonus=1.000000, nodes=73 <= 137.078850)
                            @ 6  jdk.graal.compiler.core.common.Fields.getCount():int (6 bytes)   inline method (bytecode parsing)
                            @ 51  jdk.graal.compiler.lir.LIRIntrospection$Values.getDirectCount():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 61  jdk.graal.compiler.lir.LIRIntrospection$Values.getValue(Object, int):Value (10 bytes)   inline method (bytecode parsing)
                                      @ 353  java.util.Formatter$FormatSpecifier.appendJustified(Appendable, CharSequence):void (89 bytes)   relevance-based (relevance=0.456929, probability=0.457110, bonus=1.000000, nodes=87 <= 137.078850)
                            @ 100  jdk.graal.compiler.lir.LIRIntrospection$Values.getFlags(int):EnumSet (7 bytes)   inline method (bytecode parsing)
                            @ 115  jdk.graal.compiler.lir.LIRIntrospection$Values.getValueArray(Object, int):Value[] (10 bytes)   inline method (bytecode parsing)
                                    @ 62  java.util.Formatter$FormatSpecifier.print(Formatter, long, Locale):void (357 bytes)   not inlining relevance-based (relevance=0.456929, probability=0.457110, bonus=1.000000, nodes=206 > 137.078850)
                            @ 172  jdk.graal.compiler.lir.LIRIntrospection$Values.getFlags(int):EnumSet (7 bytes)   inline method (bytecode parsing)
                                  @ 78  java.util.Formatter$FormatSpecifier.print(Formatter, int, Locale):void (66 bytes)   relevance-based (relevance=0.456929, probability=0.457110, bonus=1.000000, nodes=14 <= 137.078850)
                                @ 136  java.util.Formatter$FormatSpecifier.printInteger(Formatter, Object, Locale):void (137 bytes)   relevance-based (relevance=0.456929, probability=0.457110, bonus=1.000000, nodes=30 <= 137.078850)
                            @ 27  java.lang.Character.toString():String (8 bytes)   inline method (bytecode parsing)
                                      @ 3  jdk.graal.compiler.core.common.Fields.getObject(Object, int):Object (40 bytes)   trivial (relevance=2.000000, probability=0.381015, bonus=1.000000, nodes=9)
                            @ 18  java.lang.StringLatin1.toBytes(char):byte[] (9 bytes)   inline method (bytecode parsing)
                            @ 22  java.lang.String.<init>(byte[], byte):void (15 bytes)   inline method (bytecode parsing)
                                      @ 3  jdk.graal.compiler.core.common.Fields.getObject(Object, int):Object (40 bytes)   trivial (relevance=2.000000, probability=0.381015, bonus=1.000000, nodes=9)
                                    @ 103  jdk.graal.compiler.lir.InstructionValueConsumer.visitValue(LIRInstruction, Value, LIRInstruction$OperandMode, EnumSet):void (0 bytes)   not inlining no type profile exists
                                    @ 7  java.lang.StringLatin1.canEncode(int):boolean (13 bytes)   trivial (relevance=0.953019, probability=0.953395, bonus=1.000000, nodes=8)
                                      @ 10  jdk.graal.compiler.lir.InstructionValueConsumer.visitValue(LIRInstruction, Value, LIRInstruction$OperandMode, EnumSet):void (0 bytes)   not inlining no type profile exists
                                      @ 25  jdk.graal.compiler.lir.InstructionValueConsumer.visitValue(LIRInstruction, Value, LIRInstruction$OperandMode, EnumSet):void (0 bytes)   not inlining no type profile exists
                                      @ 86  jdk.graal.compiler.lir.amd64.AMD64AddressValue.visitEachComponent(LIRInstruction, LIRInstruction$OperandMode, InstructionValueConsumer):void (31 bytes)   relevance-based (relevance=1.000000, probability=0.190507, bonus=1.000000, nodes=16 <= 300.000000)
                                  @ 4  java.lang.String.valueOf(char):String (39 bytes)   relevance-based (relevance=0.953019, probability=0.953395, bonus=1.000000, nodes=22 <= 285.905803)
                                    @ 175  jdk.graal.compiler.lir.InstructionValueConsumer.visitValue(LIRInstruction, Value, LIRInstruction$OperandMode, EnumSet):void (0 bytes)   not inlining no type profile exists
                                      @ 10  jdk.graal.compiler.lir.InstructionValueConsumer.visitValue(LIRInstruction, Value, LIRInstruction$OperandMode, EnumSet):void (0 bytes)   not inlining no type profile exists
                                      @ 25  jdk.graal.compiler.lir.InstructionValueConsumer.visitValue(LIRInstruction, Value, LIRInstruction$OperandMode, EnumSet):void (0 bytes)   not inlining no type profile exists
                                      @ 158  jdk.graal.compiler.lir.amd64.AMD64AddressValue.visitEachComponent(LIRInstruction, LIRInstruction$OperandMode, InstructionValueConsumer):void (31 bytes)   relevance-based (relevance=1.000000, probability=0.190507, bonus=1.000000, nodes=16 <= 300.000000)
                            @ 34  java.util.Formatter$Flags.contains(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                                    @ 9  jdk.graal.compiler.lir.LIRIntrospection.visitEach(LIRInstruction, LIRIntrospection$Values, LIRInstruction$OperandMode, InstructionValueConsumer):void (193 bytes)   relevance-based (relevance=1.000000, probability=0.762030, bonus=1.000000, nodes=104 <= 300.000000)
                                  @ 6  jdk.graal.compiler.lir.LIRInstructionClass.visitEachUse(LIRInstruction, InstructionValueConsumer):void (13 bytes)   relevance-based (relevance=1.000000, probability=0.762030, bonus=1.000000, nodes=106 <= 300.000000)
                            @ 2  java.lang.StringBuilder.append(CharSequence):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 2  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 6  jdk.graal.compiler.core.common.Fields.getCount():int (6 bytes)   inline method (bytecode parsing)
                            @ 51  jdk.graal.compiler.lir.LIRIntrospection$Values.getDirectCount():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 61  jdk.graal.compiler.lir.LIRIntrospection$Values.getValue(Object, int):Value (10 bytes)   inline method (bytecode parsing)
                            @ 100  jdk.graal.compiler.lir.LIRIntrospection$Values.getFlags(int):EnumSet (7 bytes)   inline method (bytecode parsing)
                                                @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=0.953019, probability=0.953395, bonus=1.000000, nodes=5)
                            @ 115  jdk.graal.compiler.lir.LIRIntrospection$Values.getValueArray(Object, int):Value[] (10 bytes)   inline method (bytecode parsing)
                                              @ 10  java.lang.String.length():int (11 bytes)   trivial (relevance=0.953019, probability=0.953395, bonus=1.000000, nodes=8)
                            @ 172  jdk.graal.compiler.lir.LIRIntrospection$Values.getFlags(int):EnumSet (7 bytes)   inline method (bytecode parsing)
                                                    @ 3  java.lang.Math.max(int, int):int (11 bytes)   trivial (relevance=0.158231, probability=0.135754, bonus=1.000000, nodes=7)
                                                  @ 29  jdk.internal.util.ArraysSupport.newLength(int, int, int):int (27 bytes)   relevance-based (relevance=0.158231, probability=0.135754, bonus=1.000000, nodes=15 <= 47.469409)
                                      @ 3  jdk.graal.compiler.core.common.Fields.getObject(Object, int):Object (40 bytes)   trivial (relevance=2.000000, probability=0.381015, bonus=1.000000, nodes=9)
                                                @ 24  java.lang.AbstractStringBuilder.newCapacity(int):int (59 bytes)   relevance-based (relevance=0.158231, probability=0.135754, bonus=1.000000, nodes=27 <= 47.469409)
                                      @ 3  jdk.graal.compiler.core.common.Fields.getObject(Object, int):Object (40 bytes)   trivial (relevance=2.000000, probability=0.381015, bonus=1.000000, nodes=9)
                                    @ 103  jdk.graal.compiler.lir.InstructionValueConsumer.visitValue(LIRInstruction, Value, LIRInstruction$OperandMode, EnumSet):void (0 bytes)   not inlining no type profile exists
                                                  @ 25  java.lang.Math.min(int, int):int (11 bytes)   trivial (relevance=0.158233, probability=0.135736, bonus=1.000000, nodes=7)
                                      @ 10  jdk.graal.compiler.lir.InstructionValueConsumer.visitValue(LIRInstruction, Value, LIRInstruction$OperandMode, EnumSet):void (0 bytes)   not inlining no type profile exists
                                                @ 32  java.util.Arrays.copyOf(byte[], int):byte[] (33 bytes)   relevance-based (relevance=0.158231, probability=0.135754, bonus=1.000000, nodes=28 <= 47.469409)
                                      @ 25  jdk.graal.compiler.lir.InstructionValueConsumer.visitValue(LIRInstruction, Value, LIRInstruction$OperandMode, EnumSet):void (0 bytes)   not inlining no type profile exists
                                      @ 86  jdk.graal.compiler.lir.amd64.AMD64AddressValue.visitEachComponent(LIRInstruction, LIRInstruction$OperandMode, InstructionValueConsumer):void (31 bytes)   relevance-based (relevance=1.000000, probability=0.190507, bonus=1.000000, nodes=16 <= 300.000000)
                                              @ 21  java.lang.AbstractStringBuilder.ensureCapacityInternal(int):void (39 bytes)   relevance-based (relevance=0.953019, probability=0.953395, bonus=1.000000, nodes=72 <= 285.905803)
                                    @ 175  jdk.graal.compiler.lir.InstructionValueConsumer.visitValue(LIRInstruction, Value, LIRInstruction$OperandMode, EnumSet):void (0 bytes)   not inlining no type profile exists
                                      @ 10  jdk.graal.compiler.lir.InstructionValueConsumer.visitValue(LIRInstruction, Value, LIRInstruction$OperandMode, EnumSet):void (0 bytes)   not inlining no type profile exists
                                      @ 25  jdk.graal.compiler.lir.InstructionValueConsumer.visitValue(LIRInstruction, Value, LIRInstruction$OperandMode, EnumSet):void (0 bytes)   not inlining no type profile exists
                                      @ 158  jdk.graal.compiler.lir.amd64.AMD64AddressValue.visitEachComponent(LIRInstruction, LIRInstruction$OperandMode, InstructionValueConsumer):void (31 bytes)   relevance-based (relevance=1.000000, probability=0.190507, bonus=1.000000, nodes=16 <= 300.000000)
                                    @ 9  jdk.graal.compiler.lir.LIRIntrospection.visitEach(LIRInstruction, LIRIntrospection$Values, LIRInstruction$OperandMode, InstructionValueConsumer):void (193 bytes)   relevance-based (relevance=1.000000, probability=0.762030, bonus=1.000000, nodes=104 <= 300.000000)
                                                  @ 11  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.953394, bonus=1.000000, nodes=5)
                                                @ 2  java.lang.AbstractStringBuilder.inflateIfNeededFor(String):void (22 bytes)   trivial (relevance=1.000000, probability=0.953394, bonus=1.000000, nodes=9)
                                  @ 6  jdk.graal.compiler.lir.LIRInstructionClass.visitEachAlive(LIRInstruction, InstructionValueConsumer):void (13 bytes)   relevance-based (relevance=1.000000, probability=0.762030, bonus=1.000000, nodes=106 <= 300.000000)
                                                  @ 1  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000010, probability=0.953394, bonus=1.000000, nodes=5)
                                                @ 15  java.lang.String.getBytes(byte[], int, byte):void (44 bytes)   relevance-based (relevance=1.000000, probability=0.953394, bonus=1.000000, nodes=26 <= 300.000000)
                                              @ 30  java.lang.AbstractStringBuilder.putStringAt(int, String):void (19 bytes)   relevance-based (relevance=1.111249, probability=0.953394, bonus=1.000000, nodes=32 <= 300.000000)
                            @ 7  jdk.graal.compiler.core.common.Fields.getCount():int (6 bytes)   inline method (bytecode parsing)
                                            @ 2  java.lang.AbstractStringBuilder.append(String):AbstractStringBuilder (45 bytes)   relevance-based (relevance=0.953019, probability=0.953395, bonus=1.000000, nodes=110 <= 285.905803)
                                          @ 21  java.lang.StringBuilder.append(String):AbstractStringBuilder (6 bytes)   relevance-based (relevance=0.953019, probability=0.953395, bonus=1.000000, nodes=112 <= 285.905803)
                                    @ 19  jdk.graal.compiler.core.common.Fields.getObject(Object, int):Object (40 bytes)   trivial (relevance=2.000000, probability=0.762030, bonus=1.000000, nodes=9)
                                        @ 2  java.lang.AbstractStringBuilder.append(CharSequence):AbstractStringBuilder (54 bytes)   relevance-based (relevance=0.953019, probability=0.953395, bonus=1.000000, nodes=113 <= 285.905803)
                            @ 20  jdk.vm.ci.code.BytecodeFrame.caller():BytecodeFrame (8 bytes)   inline method (bytecode parsing)
                                      @ 10  java.lang.StringBuilder.append(CharSequence):Appendable (6 bytes)   relevance-based (relevance=0.953019, probability=0.953395, bonus=1.000000, nodes=115 <= 285.905803)
                            @ 63  jdk.vm.ci.code.VirtualObject.getValues():JavaValue[] (5 bytes)   inline accessor method (bytecode parsing)
                                    @ 53  java.util.Formatter$FormatSpecifier.appendJustified(Appendable, CharSequence):void (89 bytes)   relevance-based (relevance=0.953019, probability=0.953395, bonus=1.000000, nodes=129 <= 285.905803)
                                  @ 211  java.util.Formatter$FormatSpecifier.print(Formatter, String, Locale):void (57 bytes)   relevance-based (relevance=0.953019, probability=0.953395, bonus=1.000000, nodes=138 <= 285.905803)
                                @ 156  java.util.Formatter$FormatSpecifier.printCharacter(Formatter, Object, Locale):void (215 bytes)   relevance-based (relevance=0.953019, probability=0.953395, bonus=1.000000, nodes=168 <= 285.905803)
                            @ 22  jdk.vm.ci.meta.Value$IllegalValue.equals(Object):boolean (5 bytes)   inline method (bytecode parsing)
                                        @ 18  jdk.vm.ci.code.ValueUtil.isIllegalJavaValue(JavaValue):boolean (26 bytes)   trivial (relevance=8.000000, probability=0.381015, bonus=1.000000, nodes=8)
                              @ 205  java.util.Formatter$FormatSpecifier.print(Formatter, Object, Locale):void (234 bytes)   not inlining relevance-based (relevance=1.000096, probability=3.101357, bonus=1.000000, nodes=366 > 300.000000)
                                      @ 48  jdk.graal.compiler.lir.InstructionValueConsumer.visitValue(LIRInstruction, Value, LIRInstruction$OperandMode, EnumSet):void (0 bytes)   not inlining no type profile exists
                                      @ 16  jdk.graal.compiler.lir.LIRFrameState.visitValues(LIRInstruction, JavaValue[], InstructionValueConsumer):void (167 bytes)   relevance-based (relevance=1.000000, probability=0.381015, bonus=1.000000, nodes=47 <= 300.000000)
                              @ 89  java.util.Formatter$FixedString.print(Formatter, Object, Locale):void (23 bytes)   not inlining too large previous low-level graph (low-level-nodes: 378, relevance=0.777929, probability=2.412406, bonus=1.000000, nodes=12)
                                      @ 1  jdk.vm.ci.code.BytecodePosition.getCaller():BytecodePosition (5 bytes)   trivial (relevance=1.000000, probability=0.381015, bonus=1.000000, nodes=5)
                            @ 22  jdk.vm.ci.meta.Value$IllegalValue.equals(Object):boolean (5 bytes)   inline method (bytecode parsing)
                                        @ 18  jdk.vm.ci.code.ValueUtil.isIllegalJavaValue(JavaValue):boolean (26 bytes)   trivial (relevance=4.000000, probability=0.190507, bonus=1.000000, nodes=8)
                                      @ 48  jdk.graal.compiler.lir.InstructionValueConsumer.visitValue(LIRInstruction, Value, LIRInstruction$OperandMode, EnumSet):void (0 bytes)   not inlining no type profile exists
                                      @ 67  jdk.graal.compiler.lir.LIRFrameState.visitValues(LIRInstruction, JavaValue[], InstructionValueConsumer):void (167 bytes)   relevance-based (relevance=0.500000, probability=0.190507, bonus=1.000000, nodes=47 <= 150.000000)
                                      @ 72  org.graalvm.collections.EconomicMap.getEntries():MapCursor (0 bytes)   not inlining no type profile exists
                                      @ 47  jdk.graal.compiler.lir.InstructionValueConsumer.visitValue(LIRInstruction, Value, LIRInstruction$OperandMode, EnumSet):void (0 bytes)   not inlining no type profile exists
                                      @ 81  org.graalvm.collections.MapCursor.advance():boolean (10 bytes)   not inlining no type profile exists
                                      @ 91  org.graalvm.collections.MapCursor.getValue():Object (10 bytes)   not inlining no type profile exists
                                      @ 113  jdk.graal.compiler.lir.InstructionValueConsumer.visitValue(LIRInstruction, Value, LIRInstruction$OperandMode, EnumSet):void (0 bytes)   not inlining no type profile exists
                                      @ 95  jdk.graal.compiler.lir.util.IndexedValueMap.visitEach(LIRInstruction, LIRInstruction$OperandMode, EnumSet, InstructionValueConsumer):void (122 bytes)   relevance-based (relevance=0.500000, probability=0.190507, bonus=1.000000, nodes=75 <= 150.000000)
                                    @ 36  jdk.graal.compiler.lir.LIRFrameState.visitEachState(LIRInstruction, InstructionValueConsumer):void (99 bytes)   relevance-based (relevance=1.000000, probability=0.381015, bonus=1.000000, nodes=202 <= 300.000000)
                                  @ 6  jdk.graal.compiler.lir.LIRInstructionClass.visitEachState(LIRInstruction, InstructionValueConsumer):void (46 bytes)   relevance-based (relevance=1.000000, probability=0.762030, bonus=1.000000, nodes=234 <= 300.000000)
                                @ 8  jdk.graal.compiler.lir.framemap.FrameMapBuilderImpl.lambda$verifyStackSlotAllocation$1(InstructionValueConsumer, LIRInstruction):void (26 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.762030, bonus=1.000000, nodes=458 > 300.000000)
                              @ 46  jdk.graal.compiler.lir.framemap.FrameMapBuilderImpl$$Lambda/0x00007f86742d6fd0.accept(Object):void (12 bytes)   relevance-based (relevance=1.000000, probability=0.814842, bonus=1.000000, nodes=48 <= 300.000000)
                            @ 5  jdk.graal.compiler.lir.constopt.UseEntry.getBlock():BasicBlock (5 bytes)   inline accessor method (bytecode parsing)
                                @ 8  jdk.graal.compiler.lir.constopt.ConstantLoadOptimization$Optimization.lambda$createConstantTree$5(ConstantTree, UseEntry):void (12 bytes)   not inlining relevance-based (relevance=0.023101, probability=0.059867, bonus=1.000000, nodes=13 > 6.930434)
                            @ 2  jdk.graal.compiler.lir.constopt.UseEntry.getBlock():BasicBlock (5 bytes)   inline accessor method (bytecode parsing)
                                @ 8  jdk.graal.compiler.lir.constopt.ConstantTree.lambda$new$0(UseEntry):void (16 bytes)   not inlining relevance-based (relevance=0.023101, probability=0.059867, bonus=1.000000, nodes=15 > 6.930434)
                            @ 1  jdk.graal.compiler.lir.constopt.UseEntry.getBlock():BasicBlock (5 bytes)   inline accessor method (bytecode parsing)
                            @ 10  jdk.graal.compiler.core.common.cfg.BlockMap.get(BasicBlock):Object (10 bytes)   inline method (bytecode parsing)
                              @ 5  jdk.graal.compiler.core.common.cfg.BasicBlock.getId():int (5 bytes)   inline accessor method (bytecode parsing)
                                @ 8  jdk.graal.compiler.lir.constopt.ConstantLoadOptimization$Optimization.addUsageToBlockMap(UseEntry):void (47 bytes)   not inlining relevance-based (relevance=0.023101, probability=0.059867, bonus=1.000000, nodes=42 > 6.930434)
                            @ 2  jdk.graal.compiler.lir.LIRInstruction.visitEachInput(InstructionValueConsumer):void (10 bytes)   inline method (bytecode parsing)
                            @ 7  jdk.graal.compiler.lir.LIRInstruction.visitEachAlive(InstructionValueConsumer):void (10 bytes)   inline method (bytecode parsing)
                            @ 12  jdk.graal.compiler.lir.LIRInstruction.visitEachState(InstructionValueConsumer):void (10 bytes)   inline method (bytecode parsing)
                            @ 17  jdk.graal.compiler.lir.LIRInstruction.visitEachTemp(InstructionValueConsumer):void (10 bytes)   inline method (bytecode parsing)
                            @ 22  jdk.graal.compiler.lir.LIRInstruction.visitEachOutput(InstructionValueConsumer):void (10 bytes)   inline method (bytecode parsing)
                            @ 6  jdk.graal.compiler.core.common.Fields.getCount():int (6 bytes)   inline method (bytecode parsing)
                            @ 51  jdk.graal.compiler.lir.LIRIntrospection$Values.getDirectCount():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 61  jdk.graal.compiler.lir.LIRIntrospection$Values.getValue(Object, int):Value (10 bytes)   inline method (bytecode parsing)
                            @ 100  jdk.graal.compiler.lir.LIRIntrospection$Values.getFlags(int):EnumSet (7 bytes)   inline method (bytecode parsing)
                            @ 115  jdk.graal.compiler.lir.LIRIntrospection$Values.getValueArray(Object, int):Value[] (10 bytes)   inline method (bytecode parsing)
                            @ 172  jdk.graal.compiler.lir.LIRIntrospection$Values.getFlags(int):EnumSet (7 bytes)   inline method (bytecode parsing)
                                      @ 3  jdk.graal.compiler.core.common.Fields.getObject(Object, int):Object (40 bytes)   trivial (relevance=2.000000, probability=1.295752, bonus=1.000000, nodes=9)
                                      @ 3  jdk.graal.compiler.core.common.Fields.getObject(Object, int):Object (40 bytes)   trivial (relevance=2.000000, probability=1.295752, bonus=1.000000, nodes=9)
                                    @ 103  jdk.graal.compiler.lir.InstructionValueConsumer.visitValue(LIRInstruction, Value, LIRInstruction$OperandMode, EnumSet):void (0 bytes)   not inlining no type profile exists
                                      @ 10  jdk.graal.compiler.lir.InstructionValueConsumer.visitValue(LIRInstruction, Value, LIRInstruction$OperandMode, EnumSet):void (0 bytes)   not inlining no type profile exists
                                      @ 25  jdk.graal.compiler.lir.InstructionValueConsumer.visitValue(LIRInstruction, Value, LIRInstruction$OperandMode, EnumSet):void (0 bytes)   not inlining no type profile exists
                                      @ 86  jdk.graal.compiler.lir.amd64.AMD64AddressValue.visitEachComponent(LIRInstruction, LIRInstruction$OperandMode, InstructionValueConsumer):void (31 bytes)   relevance-based (relevance=1.000000, probability=0.647876, bonus=1.000000, nodes=16 <= 300.000000)
                                    @ 175  jdk.graal.compiler.lir.InstructionValueConsumer.visitValue(LIRInstruction, Value, LIRInstruction$OperandMode, EnumSet):void (0 bytes)   not inlining no type profile exists
                                      @ 10  jdk.graal.compiler.lir.InstructionValueConsumer.visitValue(LIRInstruction, Value, LIRInstruction$OperandMode, EnumSet):void (0 bytes)   not inlining no type profile exists
                                      @ 25  jdk.graal.compiler.lir.InstructionValueConsumer.visitValue(LIRInstruction, Value, LIRInstruction$OperandMode, EnumSet):void (0 bytes)   not inlining no type profile exists
                                      @ 158  jdk.graal.compiler.lir.amd64.AMD64AddressValue.visitEachComponent(LIRInstruction, LIRInstruction$OperandMode, InstructionValueConsumer):void (31 bytes)   relevance-based (relevance=1.000000, probability=0.647876, bonus=1.000000, nodes=16 <= 300.000000)
                                    @ 9  jdk.graal.compiler.lir.LIRIntrospection.visitEach(LIRInstruction, LIRIntrospection$Values, LIRInstruction$OperandMode, InstructionValueConsumer):void (193 bytes)   relevance-based (relevance=1.000000, probability=2.591504, bonus=1.000000, nodes=104 <= 300.000000)
                                  @ 6  jdk.graal.compiler.lir.LIRInstructionClass.visitEachUse(LIRInstruction, InstructionValueConsumer):void (13 bytes)   relevance-based (relevance=1.000000, probability=2.591504, bonus=1.000000, nodes=106 <= 300.000000)
                            @ 6  jdk.graal.compiler.core.common.Fields.getCount():int (6 bytes)   inline method (bytecode parsing)
                            @ 51  jdk.graal.compiler.lir.LIRIntrospection$Values.getDirectCount():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 61  jdk.graal.compiler.lir.LIRIntrospection$Values.getValue(Object, int):Value (10 bytes)   inline method (bytecode parsing)
                            @ 100  jdk.graal.compiler.lir.LIRIntrospection$Values.getFlags(int):EnumSet (7 bytes)   inline method (bytecode parsing)
                            @ 115  jdk.graal.compiler.lir.LIRIntrospection$Values.getValueArray(Object, int):Value[] (10 bytes)   inline method (bytecode parsing)
                            @ 172  jdk.graal.compiler.lir.LIRIntrospection$Values.getFlags(int):EnumSet (7 bytes)   inline method (bytecode parsing)
                                      @ 3  jdk.graal.compiler.core.common.Fields.getObject(Object, int):Object (40 bytes)   trivial (relevance=2.000000, probability=1.295752, bonus=1.000000, nodes=9)
                                      @ 3  jdk.graal.compiler.core.common.Fields.getObject(Object, int):Object (40 bytes)   trivial (relevance=2.000000, probability=1.295752, bonus=1.000000, nodes=9)
                                    @ 103  jdk.graal.compiler.lir.InstructionValueConsumer.visitValue(LIRInstruction, Value, LIRInstruction$OperandMode, EnumSet):void (0 bytes)   not inlining no type profile exists
                                      @ 10  jdk.graal.compiler.lir.InstructionValueConsumer.visitValue(LIRInstruction, Value, LIRInstruction$OperandMode, EnumSet):void (0 bytes)   not inlining no type profile exists
                                      @ 25  jdk.graal.compiler.lir.InstructionValueConsumer.visitValue(LIRInstruction, Value, LIRInstruction$OperandMode, EnumSet):void (0 bytes)   not inlining no type profile exists
                                      @ 86  jdk.graal.compiler.lir.amd64.AMD64AddressValue.visitEachComponent(LIRInstruction, LIRInstruction$OperandMode, InstructionValueConsumer):void (31 bytes)   relevance-based (relevance=1.000000, probability=0.647876, bonus=1.000000, nodes=16 <= 300.000000)
                                    @ 175  jdk.graal.compiler.lir.InstructionValueConsumer.visitValue(LIRInstruction, Value, LIRInstruction$OperandMode, EnumSet):void (0 bytes)   not inlining no type profile exists
                                      @ 10  jdk.graal.compiler.lir.InstructionValueConsumer.visitValue(LIRInstruction, Value, LIRInstruction$OperandMode, EnumSet):void (0 bytes)   not inlining no type profile exists
                                      @ 25  jdk.graal.compiler.lir.InstructionValueConsumer.visitValue(LIRInstruction, Value, LIRInstruction$OperandMode, EnumSet):void (0 bytes)   not inlining no type profile exists
                                      @ 158  jdk.graal.compiler.lir.amd64.AMD64AddressValue.visitEachComponent(LIRInstruction, LIRInstruction$OperandMode, InstructionValueConsumer):void (31 bytes)   relevance-based (relevance=1.000000, probability=0.647876, bonus=1.000000, nodes=16 <= 300.000000)
                                    @ 9  jdk.graal.compiler.lir.LIRIntrospection.visitEach(LIRInstruction, LIRIntrospection$Values, LIRInstruction$OperandMode, InstructionValueConsumer):void (193 bytes)   relevance-based (relevance=1.000000, probability=2.591504, bonus=1.000000, nodes=104 <= 300.000000)
                                  @ 6  jdk.graal.compiler.lir.LIRInstructionClass.visitEachAlive(LIRInstruction, InstructionValueConsumer):void (13 bytes)   relevance-based (relevance=1.000000, probability=2.591504, bonus=1.000000, nodes=106 <= 300.000000)
                            @ 7  jdk.graal.compiler.core.common.Fields.getCount():int (6 bytes)   inline method (bytecode parsing)
                                    @ 19  jdk.graal.compiler.core.common.Fields.getObject(Object, int):Object (40 bytes)   trivial (relevance=2.000000, probability=2.591504, bonus=1.000000, nodes=9)
                            @ 20  jdk.vm.ci.code.BytecodeFrame.caller():BytecodeFrame (8 bytes)   inline method (bytecode parsing)
                            @ 63  jdk.vm.ci.code.VirtualObject.getValues():JavaValue[] (5 bytes)   inline accessor method (bytecode parsing)
                            @ 22  jdk.vm.ci.meta.Value$IllegalValue.equals(Object):boolean (5 bytes)   inline method (bytecode parsing)
                                        @ 18  jdk.vm.ci.code.ValueUtil.isIllegalJavaValue(JavaValue):boolean (26 bytes)   trivial (relevance=8.000000, probability=1.295752, bonus=1.000000, nodes=8)
                                      @ 48  jdk.graal.compiler.lir.InstructionValueConsumer.visitValue(LIRInstruction, Value, LIRInstruction$OperandMode, EnumSet):void (0 bytes)   not inlining no type profile exists
                                      @ 16  jdk.graal.compiler.lir.LIRFrameState.visitValues(LIRInstruction, JavaValue[], InstructionValueConsumer):void (167 bytes)   relevance-based (relevance=1.000000, probability=1.295752, bonus=1.000000, nodes=47 <= 300.000000)
                                      @ 1  jdk.vm.ci.code.BytecodePosition.getCaller():BytecodePosition (5 bytes)   trivial (relevance=1.000000, probability=1.295752, bonus=1.000000, nodes=5)
                            @ 22  jdk.vm.ci.meta.Value$IllegalValue.equals(Object):boolean (5 bytes)   inline method (bytecode parsing)
                                        @ 18  jdk.vm.ci.code.ValueUtil.isIllegalJavaValue(JavaValue):boolean (26 bytes)   trivial (relevance=4.000000, probability=0.647876, bonus=1.000000, nodes=8)
                                      @ 48  jdk.graal.compiler.lir.InstructionValueConsumer.visitValue(LIRInstruction, Value, LIRInstruction$OperandMode, EnumSet):void (0 bytes)   not inlining no type profile exists
                                      @ 67  jdk.graal.compiler.lir.LIRFrameState.visitValues(LIRInstruction, JavaValue[], InstructionValueConsumer):void (167 bytes)   relevance-based (relevance=0.500000, probability=0.647876, bonus=1.000000, nodes=47 <= 150.000000)
                                      @ 72  org.graalvm.collections.EconomicMap.getEntries():MapCursor (0 bytes)   not inlining no type profile exists
                                      @ 47  jdk.graal.compiler.lir.InstructionValueConsumer.visitValue(LIRInstruction, Value, LIRInstruction$OperandMode, EnumSet):void (0 bytes)   not inlining no type profile exists
                                      @ 81  org.graalvm.collections.MapCursor.advance():boolean (10 bytes)   not inlining no type profile exists
                                      @ 91  org.graalvm.collections.MapCursor.getValue():Object (10 bytes)   not inlining no type profile exists
                                      @ 113  jdk.graal.compiler.lir.InstructionValueConsumer.visitValue(LIRInstruction, Value, LIRInstruction$OperandMode, EnumSet):void (0 bytes)   not inlining no type profile exists
                                      @ 95  jdk.graal.compiler.lir.util.IndexedValueMap.visitEach(LIRInstruction, LIRInstruction$OperandMode, EnumSet, InstructionValueConsumer):void (122 bytes)   relevance-based (relevance=0.500000, probability=0.647876, bonus=1.000000, nodes=75 <= 150.000000)
                                    @ 36  jdk.graal.compiler.lir.LIRFrameState.visitEachState(LIRInstruction, InstructionValueConsumer):void (99 bytes)   relevance-based (relevance=1.000000, probability=1.295752, bonus=1.000000, nodes=202 <= 300.000000)
                                  @ 6  jdk.graal.compiler.lir.LIRInstructionClass.visitEachState(LIRInstruction, InstructionValueConsumer):void (46 bytes)   relevance-based (relevance=1.000000, probability=2.591504, bonus=1.000000, nodes=234 <= 300.000000)
                              @ 89  java.util.TimSort.<init>(Object[], Comparator, Object[], int, int):void (181 bytes)   not inlining relevance-based (relevance=0.030391, probability=0.017138, bonus=1.000000, nodes=112 > 9.117362)
                                @ 8  jdk.graal.compiler.lir.framemap.FrameMapBuilderImpl.lambda$verifyStackSlotAllocation$1(InstructionValueConsumer, LIRInstruction):void (26 bytes)   not inlining relevance-based (relevance=1.000000, probability=2.591504, bonus=1.000000, nodes=458 > 300.000000)
                              @ 46  jdk.graal.compiler.lir.framemap.FrameMapBuilderImpl$$Lambda/0x00007f86742d6fd0.accept(Object):void (12 bytes)   relevance-based (relevance=1.000000, probability=2.771107, bonus=1.000000, nodes=48 <= 300.000000)
                              @ 96  java.util.TimSort.minRunLength(int):int (43 bytes)   not inlining relevance-based (relevance=0.030391, probability=0.017138, bonus=1.000000, nodes=24 > 9.117362)
                            @ 1  jdk.graal.compiler.core.common.cfg.BasicBlock.getId():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  jdk.graal.compiler.core.common.cfg.BasicBlock.getId():int (5 bytes)   inline accessor method (bytecode parsing)
                                    @ 8  java.lang.Integer.compare(int, int):int (20 bytes)   trivial (relevance=1.000000, probability=0.493414, bonus=1.000000, nodes=6)
                                  @ 9  jdk.graal.compiler.core.common.cfg.BasicBlock$BlockIdComparator.compare(BasicBlock, BasicBlock):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.493414, bonus=1.000000, nodes=14 <= 300.000000)
                                @ 43  jdk.graal.compiler.core.common.cfg.BasicBlock$BlockIdComparator.compare(Object, Object):int (13 bytes)   relevance-based (relevance=1.606888, probability=0.563902, bonus=1.000000, nodes=21 <= 300.000000)
                            @ 8  jdk.graal.compiler.lir.alloc.lsra.LinearScan.lambda$sortIntervals$0(Interval, Interval):int (10 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.lir.alloc.lsra.Interval.from():int (8 bytes)   inline method (bytecode parsing)
                              @ 5  jdk.graal.compiler.lir.alloc.lsra.Interval.from():int (8 bytes)   inline method (bytecode parsing)
                            @ 17  java.lang.Enum.ordinal():int (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 2  java.util.EnumMap.isValidKey(Object):boolean (36 bytes)   relevance-based (relevance=1.000000, probability=0.012777, bonus=1.000000, nodes=13 <= 300.000000)
                                          @ 21  java.util.EnumMap.unmaskNull(Object):Object (13 bytes)   trivial (relevance=1.000084, probability=0.012777, bonus=1.000000, nodes=7)
                                        @ 7  java.util.EnumMap.get(Object):Object (29 bytes)   relevance-based (relevance=1.000000, probability=0.012777, bonus=1.000000, nodes=27 <= 300.000000)
                                      @ 1  jdk.graal.compiler.hotspot.HotSpotCompiledCodeBuilder$SiteComparator.ord(Infopoint):int (19 bytes)   relevance-based (relevance=2.026900, probability=0.012777, bonus=1.000000, nodes=36 <= 300.000000)
                            @ 17  java.lang.Enum.ordinal():int (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 2  java.util.EnumMap.isValidKey(Object):boolean (36 bytes)   relevance-based (relevance=0.506768, probability=0.012777, bonus=1.000000, nodes=13 <= 152.030270)
                                          @ 21  java.util.EnumMap.unmaskNull(Object):Object (13 bytes)   trivial (relevance=0.506810, probability=0.012777, bonus=1.000000, nodes=7)
                                        @ 7  java.util.EnumMap.get(Object):Object (29 bytes)   relevance-based (relevance=0.506768, probability=0.012777, bonus=1.000000, nodes=27 <= 152.030270)
                                      @ 6  jdk.graal.compiler.hotspot.HotSpotCompiledCodeBuilder$SiteComparator.ord(Infopoint):int (19 bytes)   relevance-based (relevance=0.506768, probability=0.012777, bonus=1.000000, nodes=36 <= 152.030270)
                            @ 6  java.lang.Error.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                            @ 89  java.lang.String.format(Locale, String, Object[]):String (17 bytes)   inline method (bytecode parsing)
                              @ 5  java.util.Formatter.<init>(Locale):void (13 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.StringBuilder.<init>():void (7 bytes)   inline method (bytecode parsing)
                                @ 9  java.util.Formatter.<init>(Locale, Appendable):void (15 bytes)   inline method (bytecode parsing)
                                        @ 3  jdk.graal.compiler.debug.GraalError.format(String, Object[]):String (93 bytes)   not inlining relevance-based (relevance=0.126692, probability=0.003194, bonus=1.000000, nodes=81 > 38.007568)
                 n                        @ 16  java.lang.Throwable.fillInStackTrace(int):Throwable (0 bytes)   not inlining it is a non-intrinsic native method
              s                           @ 24  java.lang.Throwable.fillInStackTrace():Throwable (29 bytes)   relevance-based (relevance=0.126692, probability=0.003194, bonus=1.000000, nodes=34 <= 38.007568)
                                        @ 2  java.lang.Throwable.<init>(String):void (34 bytes)   not inlining relevance-based (relevance=0.126692, probability=0.003194, bonus=1.000000, nodes=45 > 38.007568)
                            @ 1  java.util.AbstractList.<init>():void (10 bytes)   inline method (bytecode parsing)
                              @ 1  java.util.AbstractCollection.<init>():void (5 bytes)   inline method (bytecode parsing)
                                        @ 14  java.util.ArrayList.<init>():void (12 bytes)   relevance-based (relevance=0.126692, probability=0.003194, bonus=1.000000, nodes=11 <= 38.007568)
                                      @ 36  jdk.graal.compiler.debug.GraalError.<init>(String, Object[]):void (21 bytes)   relevance-based (relevance=0.126692, probability=0.003194, bonus=1.000000, nodes=25 <= 38.007568)
                                    @ 86  jdk.graal.compiler.hotspot.HotSpotCompiledCodeBuilder$SiteComparator.checkCollision(Infopoint, Infopoint):int (44 bytes)   relevance-based (relevance=0.506725, probability=0.012777, bonus=1.000000, nodes=108 <= 152.017503)
                                  @ 9  jdk.graal.compiler.hotspot.HotSpotCompiledCodeBuilder$SiteComparator.compare(Site, Site):int (100 bytes)   not inlining relevance-based (relevance=0.506725, probability=0.204438, bonus=1.000000, nodes=154 > 152.017503)
                                @ 109  jdk.graal.compiler.hotspot.HotSpotCompiledCodeBuilder$SiteComparator.compare(Object, Object):int (13 bytes)   relevance-based (relevance=0.506725, probability=0.552108, bonus=1.000000, nodes=37 <= 152.017503)
                            @ 8  jdk.graal.compiler.lir.alloc.lsra.LinearScan.lambda$sortIntervals$0(Interval, Interval):int (10 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.lir.alloc.lsra.Interval.from():int (8 bytes)   inline method (bytecode parsing)
                              @ 5  jdk.graal.compiler.lir.alloc.lsra.Interval.from():int (8 bytes)   inline method (bytecode parsing)
                                @ 68  jdk.graal.compiler.core.common.cfg.BasicBlock$BlockIdComparator.compare(Object, Object):int (13 bytes)   not inlining relevance-based (relevance=0.198445, probability=0.080647, bonus=1.000000, nodes=67 > 59.533580)
                                @ 86  java.util.TimSort.reverseRange(Object[], int, int):void (32 bytes)   relevance-based (relevance=0.711224, probability=0.350928, bonus=1.000000, nodes=28 <= 213.367121)
                              @ 60  java.util.TimSort.countRunAndMakeAscending(Object[], int, int, Comparator):int (128 bytes)   relevance-based (relevance=1.000000, probability=0.563902, bonus=1.000000, nodes=175 <= 300.000000)
                              @ 73  java.util.TimSort.binarySort(Object[], int, int, int, Comparator):void (223 bytes)   not inlining too large previous low-level graph (low-level-nodes: 628, relevance=1.142857, probability=0.563902, bonus=1.000000, nodes=85)
                              @ 105  java.util.TimSort.countRunAndMakeAscending(Object[], int, int, Comparator):int (128 bytes)   not inlining relevance-based (relevance=0.040317, probability=0.065816, bonus=1.000000, nodes=87 > 12.095058)
                              @ 144  java.util.TimSort.binarySort(Object[], int, int, int, Comparator):void (223 bytes)   not inlining too large previous low-level graph (low-level-nodes: 628, relevance=0.034733, probability=0.056700, bonus=1.000000, nodes=85)
                              @ 156  java.util.TimSort.pushRun(int, int):void (31 bytes)   not inlining relevance-based (relevance=0.040317, probability=0.065816, bonus=1.000000, nodes=17 > 12.095058)
                              @ 161  java.util.TimSort.mergeCollapse():void (134 bytes)   not inlining relevance-based (relevance=0.040317, probability=0.065816, bonus=1.000000, nodes=104 > 12.095058)
                              @ 202  java.util.TimSort.mergeForceCollapse():void (50 bytes)   not inlining relevance-based (relevance=0.034733, probability=0.017138, bonus=1.000000, nodes=44 > 10.419842)
                            @ 12  java.util.ArrayDeque.elementAt(Object[], int):Object (4 bytes)   inline method (bytecode parsing)
                                  @ 28  java.util.ArrayDeque.inc(int, int):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.999585, bonus=1.000000, nodes=10 <= 300.000000)
                                @ 1  java.util.ArrayDeque.pollFirst():Object (36 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=26 <= 300.000000)
                              @ 1  java.util.ArrayDeque.removeFirst():Object (19 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=28 <= 300.000000)
                            @ 15  java.lang.String.value():byte[] (5 bytes)   inline accessor method (bytecode parsing)
                              @ 1  java.lang.AbstractStringBuilder.isLatin1():boolean (19 bytes)   trivial (relevance=1.000010, probability=1.000000, bonus=1.000000, nodes=9)
                              @ 8  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000010, probability=1.000000, bonus=1.000000, nodes=9)
                                @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                              @ 10  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=8)
                              @ 18  jdk.internal.util.Preconditions.checkFromToIndex(int, int, int, BiFunction):int (24 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=14 <= 300.000000)
                                    @ 3  java.lang.Math.max(int, int):int (11 bytes)   trivial (relevance=0.166032, probability=0.142390, bonus=1.000000, nodes=7)
                                  @ 29  jdk.internal.util.ArraysSupport.newLength(int, int, int):int (27 bytes)   relevance-based (relevance=0.166032, probability=0.142390, bonus=1.000000, nodes=15 <= 49.809492)
                                @ 24  java.lang.AbstractStringBuilder.newCapacity(int):int (59 bytes)   relevance-based (relevance=0.166032, probability=0.142390, bonus=1.000000, nodes=27 <= 49.809492)
                                  @ 25  java.lang.Math.min(int, int):int (11 bytes)   trivial (relevance=0.166033, probability=0.142371, bonus=1.000000, nodes=7)
                                @ 32  java.util.Arrays.copyOf(byte[], int):byte[] (33 bytes)   relevance-based (relevance=0.166032, probability=0.142390, bonus=1.000000, nodes=28 <= 49.809492)
                              @ 35  java.lang.AbstractStringBuilder.ensureCapacityInternal(int):void (39 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=72 <= 300.000000)
                            @ 15  java.lang.String.value():byte[] (5 bytes)   inline accessor method (bytecode parsing)
                                @ 1  java.lang.AbstractStringBuilder.isLatin1():boolean (19 bytes)   trivial (relevance=1.000010, probability=0.999999, bonus=1.000000, nodes=9)
                                @ 8  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000010, probability=0.999999, bonus=1.000000, nodes=9)
                              @ 52  java.lang.AbstractStringBuilder.appendChars(String, int, int):void (207 bytes)   relevance-based (relevance=1.166030, probability=0.999999, bonus=1.000000, nodes=38 <= 300.000000)
                            @ 18  jdk.graal.compiler.replacements.AllocationSnippets.allocateInstanceImpl(Word, UnsignedWord, boolean, AllocationSnippets$FillContent, boolean, boolean, AllocationSnippets$AllocationProfilingData):Object (143 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getTLABInfo():Word (5 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getThread():Word (8 bytes)   inline method (bytecode parsing)
                                  @ 4  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.registerAsWord(Register):Word (7 bytes)   inline method (bytecode parsing)
                              @ 9  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.readTlabTop(Word):Word (5 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.readTlabTop(Word):Word (17 bytes)   inline method (bytecode parsing)
                              @ 17  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.readTlabEnd(Word):Word (5 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.readTlabEnd(Word):Word (17 bytes)   inline method (bytecode parsing)
                              @ 35  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.useTLAB():boolean (7 bytes)   inline method (bytecode parsing)
                              @ 47  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.shouldAllocateInTLAB(UnsignedWord, boolean):boolean (33 bytes)   inline method (bytecode parsing)
                              @ 77  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.writeTlabTop(Word, Word):void (6 bytes)   inline method (bytecode parsing)
                                @ 2  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.writeTlabTop(Word, Word):void (15 bytes)   inline method (bytecode parsing)
                              @ 84  jdk.graal.compiler.replacements.AllocationSnippets.emitPrefetchAllocate(Word, boolean):void (61 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getPrefetchStyle():int (7 bytes)   inline method (bytecode parsing)
                                @ 9  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getPrefetchLines(boolean):int (18 bytes)   inline method (bytecode parsing)
                                @ 14  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getPrefetchStepSize():int (7 bytes)   inline method (bytecode parsing)
                                @ 20  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getPrefetchDistance():int (7 bytes)   inline method (bytecode parsing)
                              @ 103  jdk.graal.compiler.replacements.AllocationSnippets.formatObject(Word, UnsignedWord, Word, AllocationSnippets$FillContent, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):Object (41 bytes)   inline method (bytecode parsing)
                                @ 4  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.initializeObjectHeader(Word, Word, boolean):void (29 bytes)   inline method (bytecode parsing)
                                  @ 25  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.initializeObjectHeader(Word, Word, KlassPointer):void (20 bytes)   inline method (bytecode parsing)
                                @ 8  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.instanceHeaderSize():int (7 bytes)   inline method (bytecode parsing)
                                @ 27  jdk.graal.compiler.replacements.AllocationSnippets.fillContents(Word, AllocationSnippets$FillContent, int, UnsignedWord, boolean, boolean, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):void (58 bytes)   inline method (bytecode parsing)
                                  @ 22  jdk.graal.compiler.replacements.AllocationSnippets.zeroMemory(Word, int, UnsignedWord, boolean, boolean, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):void (19 bytes)   inline method (bytecode parsing)
                                    @ 15  jdk.graal.compiler.replacements.AllocationSnippets.fillMemory(long, Word, int, UnsignedWord, boolean, boolean, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):void (194 bytes)   inline method (bytecode parsing)
                                      @ 17  jdk.graal.compiler.replacements.ReplacementsUtil.dynamicAssert(boolean, String):void (12 bytes)   inline method (bytecode parsing)
                                      @ 56  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                                      @ 89  jdk.graal.compiler.replacements.ReplacementsUtil.dynamicAssert(boolean, String):void (12 bytes)   inline method (bytecode parsing)
                                      @ 153  jdk.graal.compiler.replacements.ReplacementsUtil.staticAssert(boolean, String):void (12 bytes)   inline method (bytecode parsing)
                                      @ 167  jdk.graal.compiler.replacements.AllocationSnippets.fillMemoryAlignedUnrollable(long, Word, UnsignedWord, UnsignedWord, boolean, AllocationSnippets$AllocationSnippetCounters):void (68 bytes)   inline method (bytecode parsing)
                                        @ 5  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                          @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                                        @ 44  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                                      @ 190  jdk.graal.compiler.replacements.AllocationSnippets.fillMemoryAligned(long, Word, UnsignedWord, UnsignedWord, boolean, UnsignedWord, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):void (155 bytes)   inline method (bytecode parsing)
                                        @ 91  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                          @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                                        @ 105  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                          @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                                        @ 134  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                                @ 33  jdk.graal.compiler.replacements.AllocationSnippets.emitMemoryBarrierIf(boolean):void (14 bytes)   inline method (bytecode parsing)
                              @ 119  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                              @ 124  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.callNewInstanceStub(Word):Object (33 bytes)   inline method (bytecode parsing)
                                @ 21  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.nonNullOrDeopt(Object):Object (27 bytes)   inline method (bytecode parsing)
                              @ 133  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.profileAllocation(AllocationSnippets$AllocationProfilingData, UnsignedWord):void (51 bytes)   inline method (bytecode parsing)
                              @ 139  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.verifyOop(Object):Object (5 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.verifyOop(Object):Object (19 bytes)   inline method (bytecode parsing)
                              @ 7  jdk.internal.misc.Unsafe.convEndian(boolean, int):int (16 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=16 <= 300.000000)
                            @ 34  java.util.Formatter$Flags.contains(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 2  java.lang.StringBuilder.append(CharSequence):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 2  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                                          @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.516380, bonus=1.000000, nodes=5)
                                        @ 10  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000000, probability=0.516380, bonus=1.000000, nodes=8)
                                              @ 3  java.lang.Math.max(int, int):int (11 bytes)   trivial (relevance=0.166032, probability=0.073527, bonus=1.000000, nodes=7)
                                            @ 29  jdk.internal.util.ArraysSupport.newLength(int, int, int):int (27 bytes)   relevance-based (relevance=0.166032, probability=0.073527, bonus=1.000000, nodes=15 <= 49.809492)
                                          @ 24  java.lang.AbstractStringBuilder.newCapacity(int):int (59 bytes)   relevance-based (relevance=0.166032, probability=0.073527, bonus=1.000000, nodes=27 <= 49.809492)
                                            @ 25  java.lang.Math.min(int, int):int (11 bytes)   trivial (relevance=0.166033, probability=0.073517, bonus=1.000000, nodes=7)
                                          @ 32  java.util.Arrays.copyOf(byte[], int):byte[] (33 bytes)   relevance-based (relevance=0.166032, probability=0.073527, bonus=1.000000, nodes=28 <= 49.809492)
                                        @ 21  java.lang.AbstractStringBuilder.ensureCapacityInternal(int):void (39 bytes)   relevance-based (relevance=1.000000, probability=0.516380, bonus=1.000000, nodes=72 <= 300.000000)
                                            @ 11  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.516379, bonus=1.000000, nodes=5)
                                          @ 2  java.lang.AbstractStringBuilder.inflateIfNeededFor(String):void (22 bytes)   relevance-based (relevance=1.000000, probability=0.516379, bonus=1.000000, nodes=12 <= 300.000000)
                                            @ 1  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000010, probability=0.516379, bonus=1.000000, nodes=5)
                                          @ 15  java.lang.String.getBytes(byte[], int, byte):void (44 bytes)   relevance-based (relevance=1.000000, probability=0.516379, bonus=1.000000, nodes=26 <= 300.000000)
                                        @ 30  java.lang.AbstractStringBuilder.putStringAt(int, String):void (19 bytes)   relevance-based (relevance=1.166030, probability=0.516379, bonus=1.000000, nodes=37 <= 300.000000)
                                      @ 2  java.lang.AbstractStringBuilder.append(String):AbstractStringBuilder (45 bytes)   relevance-based (relevance=1.000000, probability=0.516380, bonus=1.000000, nodes=118 <= 300.000000)
                                    @ 21  java.lang.StringBuilder.append(String):AbstractStringBuilder (6 bytes)   relevance-based (relevance=1.000000, probability=0.516380, bonus=1.000000, nodes=120 <= 300.000000)
                                  @ 2  java.lang.AbstractStringBuilder.append(CharSequence):AbstractStringBuilder (54 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=127 <= 300.000000)
                                @ 10  java.lang.StringBuilder.append(CharSequence):Appendable (6 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=129 <= 300.000000)
                              @ 53  java.util.Formatter$FormatSpecifier.appendJustified(Appendable, CharSequence):void (89 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=143 <= 300.000000)
                            @ 8  jdk.graal.compiler.lir.stackslotalloc.LSStackSlotAllocator$Allocator.lambda$new$1(StackInterval, StackInterval):int (10 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.lir.stackslotalloc.StackInterval.to():int (5 bytes)   inline accessor method (bytecode parsing)
                              @ 5  jdk.graal.compiler.lir.stackslotalloc.StackInterval.to():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 8  jdk.graal.compiler.lir.stackslotalloc.LSStackSlotAllocator$Allocator.lambda$new$0(StackInterval, StackInterval):int (10 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.lir.stackslotalloc.StackInterval.from():int (5 bytes)   inline accessor method (bytecode parsing)
                              @ 5  jdk.graal.compiler.lir.stackslotalloc.StackInterval.from():int (5 bytes)   inline accessor method (bytecode parsing)
                                @ 1  jdk.graal.compiler.core.common.cfg.BasicBlock.getRelativeFrequency():double (0 bytes)   not inlining no type profile exists
                                @ 12  jdk.graal.compiler.core.common.cfg.BasicBlock.getRelativeFrequency():double (0 bytes)   not inlining no type profile exists
                                @ 23  jdk.graal.compiler.core.common.cfg.BasicBlock.getLoopDepth():int (0 bytes)   not inlining no type profile exists
                                @ 27  jdk.graal.compiler.core.common.cfg.BasicBlock.getLoopDepth():int (0 bytes)   not inlining no type profile exists
                                @ 39  jdk.graal.compiler.core.common.cfg.BasicBlock.getRelativeFrequency():double (0 bytes)   not inlining no type profile exists
                                @ 43  jdk.graal.compiler.core.common.cfg.BasicBlock.getRelativeFrequency():double (0 bytes)   not inlining no type profile exists
                                @ 9  jdk.graal.compiler.core.common.alloc.BasicBlockOrderUtils$BlockOrderComparator.compare(BasicBlock, BasicBlock):int (54 bytes)   relevance-based (relevance=1.000000, probability=1.375489, bonus=1.000000, nodes=47 <= 300.000000)
                              @ 21  jdk.graal.compiler.core.common.alloc.BasicBlockOrderUtils$BlockOrderComparator.compare(Object, Object):int (13 bytes)   relevance-based (relevance=1.680974, probability=1.498647, bonus=1.000000, nodes=99 <= 300.000000)
                            @ 5  java.util.Objects.checkIndex(int, int):int (7 bytes)   inline method (bytecode parsing)
                              @ 21  java.util.ArrayList.fastRemove(Object[], int):void (44 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=38 <= 300.000000)
                            @ 1  java.lang.AbstractStringBuilder.length():int (5 bytes)   inline accessor method (bytecode parsing)
                              @ 10  java.lang.StringBuilder.length():int (5 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                                    @ 3  java.lang.Math.max(int, int):int (11 bytes)   trivial (relevance=0.166032, probability=0.142390, bonus=1.000000, nodes=7)
                                  @ 29  jdk.internal.util.ArraysSupport.newLength(int, int, int):int (27 bytes)   relevance-based (relevance=0.166032, probability=0.142390, bonus=1.000000, nodes=15 <= 49.809492)
                                @ 24  java.lang.AbstractStringBuilder.newCapacity(int):int (59 bytes)   relevance-based (relevance=0.166032, probability=0.142390, bonus=1.000000, nodes=27 <= 49.809492)
                                  @ 25  java.lang.Math.min(int, int):int (11 bytes)   trivial (relevance=0.166033, probability=0.142371, bonus=1.000000, nodes=7)
                                @ 32  java.util.Arrays.copyOf(byte[], int):byte[] (33 bytes)   relevance-based (relevance=0.166032, probability=0.142390, bonus=1.000000, nodes=28 <= 49.809492)
                              @ 21  java.lang.AbstractStringBuilder.ensureCapacityInternal(int):void (39 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=72 <= 300.000000)
                                @ 11  java.lang.AbstractStringBuilder.getCoder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.999999, bonus=1.000000, nodes=5)
                              @ 26  java.lang.AbstractStringBuilder.inflateIfNeededFor(AbstractStringBuilder):void (22 bytes)   relevance-based (relevance=1.166030, probability=0.999999, bonus=1.000000, nodes=12 <= 300.000000)
                              @ 42  java.lang.AbstractStringBuilder.getBytes(byte[], int, byte):void (44 bytes)   relevance-based (relevance=1.166030, probability=0.999999, bonus=1.000000, nodes=27 <= 300.000000)
                            @ 10  java.util.Formatter$Flags.contains(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 32  java.util.Formatter$Flags.contains(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                              @ 10  java.lang.Long.compare(long, long):int (22 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=6)
                              @ 25  java.lang.Math.min(int, int):int (11 bytes)   trivial (relevance=1.000010, probability=1.000000, bonus=1.000000, nodes=7)
                            @ 32  java.util.BitSet.wordIndex(int):int (5 bytes)   inline method (bytecode parsing)
                              @ 62  java.util.BitSet.recalculateWordsInUse():void (39 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=38 <= 300.000000)
                              @ 66  java.util.BitSet.checkInvariants():void (111 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=4)
                            @ 4  java.lang.Integer.hashCode(int):int (2 bytes)   inline method (bytecode parsing)
                            @ 4  java.nio.Buffer.session():MemorySessionImpl (20 bytes)   inline method (bytecode parsing)
                            @ 18  java.nio.HeapByteBuffer.byteOffset(long):long (7 bytes)   inline method (bytecode parsing)
                            @ 26  jdk.internal.misc.ScopedMemoryAccess.putIntUnaligned(MemorySessionImpl, Object, long, int, boolean):void (23 bytes)   inline method (bytecode parsing)
                              @ 8  jdk.internal.misc.ScopedMemoryAccess.putIntUnalignedInternal(MemorySessionImpl, Object, long, int, boolean):void (37 bytes)   inline method (bytecode parsing)
                                @ 17  jdk.internal.misc.Unsafe.putIntUnaligned(Object, long, int, boolean):void (14 bytes)   inline method (bytecode parsing)
                              @ 14  java.nio.Buffer.nextPutIndex(int):int (32 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=13 <= 300.000000)
                              @ 7  jdk.internal.misc.Unsafe.convEndian(boolean, int):int (16 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=16 <= 300.000000)
                            @ 1  java.util.Objects.requireNonNull(Object):Object (14 bytes)   inline method (bytecode parsing)
                                @ 18  java.lang.Object.equals(Object):boolean (11 bytes)   trivial (relevance=1.000000, probability=0.806204, bonus=1.000000, nodes=9)
                              @ 5  java.util.Collections.eq(Object, Object):boolean (22 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=36 <= 300.000000)
                            @ 15  jdk.internal.math.MathUtils.pow10(int):long (6 bytes)   inline method (bytecode parsing)
                              @ 7  jdk.internal.math.MathUtils.flog10pow2(int):int (11 bytes)   relevance-based (relevance=1.057232, probability=1.000000, bonus=1.000000, nodes=10 <= 300.000000)
                              @ 36  jdk.internal.math.FormattedFPDecimal.set(long, int, int):void (17 bytes)   relevance-based (relevance=1.057232, probability=1.000000, bonus=1.000000, nodes=13 <= 300.000000)
                            @ 4  java.lang.StringBuilder.<init>():void (7 bytes)   inline method (bytecode parsing)
                                @ 29  jdk.internal.math.FormattedFPDecimal.fillWithZeros(int, int):void (20 bytes)   relevance-based (relevance=1.000000, probability=0.673231, bonus=1.000000, nodes=22 <= 300.000000)
                                @ 3  java.lang.AbstractStringBuilder.<init>(int):void (39 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                            @ 30  jdk.internal.math.FormattedFPDecimal.toDigit(long):char (6 bytes)   inline method (bytecode parsing)
                              @ 2  jdk.internal.math.FormattedFPDecimal.toDigit(int):char (6 bytes)   inline method (bytecode parsing)
                                @ 11  java.lang.Double.compare(double, double):int (54 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=25 <= 300.000000)
                                @ 42  jdk.internal.math.FormattedFPDecimal.fillWithDigits(long, int, int):long (42 bytes)   relevance-based (relevance=1.000000, probability=0.673231, bonus=1.000000, nodes=37 <= 300.000000)
                              @ 8  jdk.internal.math.FormattedFPDecimal.plainCharsPureInteger():void (47 bytes)   relevance-based (relevance=1.000000, probability=0.673231, bonus=1.000000, nodes=59 <= 300.000000)
                                @ 26  java.lang.Double.isNaN(double):boolean (12 bytes)   trivial (relevance=1.066210, probability=1.000000, bonus=1.000000, nodes=7)
                            @ 10  java.util.Formatter$Flags.contains(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 32  java.util.Formatter$Flags.contains(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 30  jdk.internal.math.FormattedFPDecimal.toDigit(long):char (6 bytes)   inline method (bytecode parsing)
                                @ 43  java.util.Formatter$FormatSpecifier.leadingSign(StringBuilder, boolean):StringBuilder (80 bytes)   relevance-based (relevance=1.066210, probability=1.000000, bonus=1.000000, nodes=13 <= 300.000000)
                              @ 2  jdk.internal.math.FormattedFPDecimal.toDigit(int):char (6 bytes)   inline method (bytecode parsing)
                                @ 34  jdk.internal.math.FormattedFPDecimal.fillWithDigits(long, int, int):long (42 bytes)   relevance-based (relevance=0.207630, probability=0.139783, bonus=1.000000, nodes=37 <= 62.288902)
                                @ 49  java.lang.Double.isInfinite(double):boolean (17 bytes)   trivial (relevance=1.066210, probability=1.000000, bonus=1.000000, nodes=9)
                            @ 30  jdk.internal.math.FormattedFPDecimal.toDigit(long):char (6 bytes)   inline method (bytecode parsing)
                              @ 2  jdk.internal.math.FormattedFPDecimal.toDigit(int):char (6 bytes)   inline method (bytecode parsing)
                            @ 275  java.lang.StringBuilder.<init>():void (7 bytes)   inline method (bytecode parsing)
                                @ 66  jdk.internal.math.FormattedFPDecimal.fillWithDigits(long, int, int):long (42 bytes)   relevance-based (relevance=0.207630, probability=0.139783, bonus=1.000000, nodes=37 <= 62.288902)
                            @ 280  jdk.internal.math.FormattedFPDecimal.getMantissa():char[] (5 bytes)   inline accessor method (bytecode parsing)
                            @ 283  java.lang.StringBuilder.append(char[]):StringBuilder (8 bytes)   inline method (bytecode parsing)
                              @ 27  jdk.internal.math.FormattedFPDecimal.plainCharsMixed():void (71 bytes)   not inlining relevance-based (relevance=0.207630, probability=0.139783, bonus=1.000000, nodes=77 > 62.288902)
                            @ 299  java.util.Formatter$Flags.contains(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 53  jdk.internal.math.FormattedFPDecimal.fillWithZeros(int, int):void (20 bytes)   inline method (bytecode parsing)
                            @ 4  jdk.internal.math.FormattedFPDecimal.<init>():void (5 bytes)   inline method (bytecode parsing)
                            @ 30  jdk.internal.math.FormattedFPDecimal.toDigit(long):char (6 bytes)   inline method (bytecode parsing)
                              @ 2  jdk.internal.math.FormattedFPDecimal.toDigit(int):char (6 bytes)   inline method (bytecode parsing)
                                @ 36  jdk.internal.math.FormattedFPDecimal.fillWithDigits(long, int, int):long (42 bytes)   relevance-based (relevance=0.277744, probability=0.186986, bonus=1.000000, nodes=37 <= 83.323281)
                              @ 34  jdk.internal.math.FormattedFPDecimal.plainCharsPureFraction():void (65 bytes)   relevance-based (relevance=0.277744, probability=0.186986, bonus=1.000000, nodes=70 <= 83.323281)
                                      @ 5  jdk.internal.math.DoubleToDecimal.<init>(boolean):void (21 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=9)
                            @ 15  jdk.internal.math.MathUtils.pow10(int):long (6 bytes)   inline method (bytecode parsing)
                                          @ 7  jdk.internal.math.MathUtils.flog10pow2(int):int (11 bytes)   relevance-based (relevance=1.057232, probability=0.637825, bonus=1.000000, nodes=10 <= 300.000000)
                                          @ 36  jdk.internal.math.FormattedFPDecimal.set(long, int, int):void (17 bytes)   relevance-based (relevance=1.057232, probability=0.637825, bonus=1.000000, nodes=13 <= 300.000000)
                                        @ 123  jdk.internal.math.DoubleToDecimal.toChars(long, int, FormattedFPDecimal):int (161 bytes)   relevance-based (relevance=1.000000, probability=0.637825, bonus=1.000000, nodes=36 <= 300.000000)
                                          @ 57  jdk.internal.math.MathUtils.flog10pow2(int):int (11 bytes)   relevance-based (relevance=0.600327, probability=0.333482, bonus=1.000000, nodes=10 <= 180.098017)
                                          @ 72  jdk.internal.math.MathUtils.flog10threeQuartersPow2(int):int (15 bytes)   relevance-based (relevance=0.051654, probability=0.028694, bonus=1.000000, nodes=12 <= 15.496102)
                                          @ 81  jdk.internal.math.MathUtils.flog2pow10(int):int (11 bytes)   relevance-based (relevance=0.651980, probability=0.362175, bonus=1.000000, nodes=10 <= 195.594119)
                                          @ 91  jdk.internal.math.MathUtils.g1(int):long (12 bytes)   relevance-based (relevance=0.651980, probability=0.362175, bonus=1.000000, nodes=10 <= 195.594119)
                                          @ 98  jdk.internal.math.MathUtils.g0(int):long (14 bytes)   relevance-based (relevance=0.651980, probability=0.362175, bonus=1.000000, nodes=11 <= 195.594119)
                                          @ 112  jdk.internal.math.DoubleToDecimal.rop(long, long, long):long (58 bytes)   relevance-based (relevance=0.651980, probability=0.362175, bonus=1.000000, nodes=20 <= 195.594119)
                                          @ 126  jdk.internal.math.DoubleToDecimal.rop(long, long, long):long (58 bytes)   relevance-based (relevance=0.651980, probability=0.362175, bonus=1.000000, nodes=20 <= 195.594119)
                                          @ 140  jdk.internal.math.DoubleToDecimal.rop(long, long, long):long (58 bytes)   relevance-based (relevance=0.651980, probability=0.362175, bonus=1.000000, nodes=20 <= 195.594119)
                                        @ 135  jdk.internal.math.DoubleToDecimal.toDecimal(int, long, int, FormattedFPDecimal):int (385 bytes)   not inlining relevance-based (relevance=0.600327, probability=0.362175, bonus=1.000000, nodes=183 > 180.098017)
                                      @ 10  jdk.internal.math.DoubleToDecimal.toDecimal(double, FormattedFPDecimal):int (220 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=82 <= 300.000000)
                            @ 23  jdk.graal.compiler.replacements.AllocationSnippets.allocateArrayImpl(Word, int, int, int, AllocationSnippets$FillContent, int, boolean, boolean, boolean, boolean, AllocationSnippets$AllocationProfilingData):Object (178 bytes)   inline method (bytecode parsing)
                                    @ 12  jdk.internal.math.DoubleToDecimal.split(double, FormattedFPDecimal):void (15 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=92 <= 300.000000)
                              @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getTLABInfo():Word (5 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getThread():Word (8 bytes)   inline method (bytecode parsing)
                                  @ 4  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.registerAsWord(Register):Word (7 bytes)   inline method (bytecode parsing)
                              @ 9  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.readTlabTop(Word):Word (5 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.readTlabTop(Word):Word (17 bytes)   inline method (bytecode parsing)
                              @ 17  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.readTlabEnd(Word):Word (5 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.readTlabEnd(Word):Word (17 bytes)   inline method (bytecode parsing)
                              @ 36  jdk.graal.compiler.replacements.ReplacementsUtil.dynamicAssert(boolean, String):void (12 bytes)   inline method (bytecode parsing)
                              @ 44  jdk.graal.compiler.replacements.AllocationSnippets.arrayAllocationSize(int, int, int):UnsignedWord (18 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.objectAlignment():int (7 bytes)   inline method (bytecode parsing)
                                @ 11  jdk.graal.compiler.replacements.AllocationSnippets.arrayAllocationSize(int, int, int, int):long (32 bytes)   inline method (bytecode parsing)
                              @ 59  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.useTLAB():boolean (7 bytes)   inline method (bytecode parsing)
                            @ 64  jdk.internal.math.MathUtils.pow10(int):long (6 bytes)   inline method (bytecode parsing)
                              @ 72  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.shouldAllocateInTLAB(UnsignedWord, boolean):boolean (33 bytes)   inline method (bytecode parsing)
                              @ 102  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.writeTlabTop(Word, Word):void (6 bytes)   inline method (bytecode parsing)
                                @ 2  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.writeTlabTop(Word, Word):void (15 bytes)   inline method (bytecode parsing)
                            @ 119  jdk.internal.math.MathUtils.pow10(int):long (6 bytes)   inline method (bytecode parsing)
                              @ 109  jdk.graal.compiler.replacements.AllocationSnippets.emitPrefetchAllocate(Word, boolean):void (61 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getPrefetchStyle():int (7 bytes)   inline method (bytecode parsing)
                                @ 9  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getPrefetchLines(boolean):int (18 bytes)   inline method (bytecode parsing)
                                @ 14  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getPrefetchStepSize():int (7 bytes)   inline method (bytecode parsing)
                                @ 20  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getPrefetchDistance():int (7 bytes)   inline method (bytecode parsing)
                                      @ 14  jdk.internal.math.FormattedFPDecimal.round(long):void (149 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=80 <= 300.000000)
                              @ 136  jdk.graal.compiler.replacements.AllocationSnippets.formatArray(Word, UnsignedWord, int, Word, AllocationSnippets$FillContent, boolean, int, boolean, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):Object (53 bytes)   inline method (bytecode parsing)
                                @ 5  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.initializeObjectHeader(Word, Word, boolean):void (29 bytes)   inline method (bytecode parsing)
                                  @ 25  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.initializeObjectHeader(Word, Word, KlassPointer):void (20 bytes)   inline method (bytecode parsing)
                                @ 11  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.arrayLengthOffset():int (7 bytes)   inline method (bytecode parsing)
                                @ 15  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                                @ 38  jdk.graal.compiler.replacements.AllocationSnippets.fillContents(Word, AllocationSnippets$FillContent, int, UnsignedWord, boolean, boolean, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):void (58 bytes)   inline method (bytecode parsing)
                                  @ 22  jdk.graal.compiler.replacements.AllocationSnippets.zeroMemory(Word, int, UnsignedWord, boolean, boolean, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):void (19 bytes)   inline method (bytecode parsing)
                                    @ 15  jdk.graal.compiler.replacements.AllocationSnippets.fillMemory(long, Word, int, UnsignedWord, boolean, boolean, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):void (194 bytes)   inline method (bytecode parsing)
                                      @ 17  jdk.graal.compiler.replacements.ReplacementsUtil.dynamicAssert(boolean, String):void (12 bytes)   inline method (bytecode parsing)
                                          @ 29  jdk.internal.math.FormattedFPDecimal.fillWithZeros(int, int):void (20 bytes)   relevance-based (relevance=1.000000, probability=0.673231, bonus=1.000000, nodes=22 <= 300.000000)
                                      @ 56  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                            @ 30  jdk.internal.math.FormattedFPDecimal.toDigit(long):char (6 bytes)   inline method (bytecode parsing)
                              @ 2  jdk.internal.math.FormattedFPDecimal.toDigit(int):char (6 bytes)   inline method (bytecode parsing)
                                      @ 89  jdk.graal.compiler.replacements.ReplacementsUtil.dynamicAssert(boolean, String):void (12 bytes)   inline method (bytecode parsing)
                                      @ 153  jdk.graal.compiler.replacements.ReplacementsUtil.staticAssert(boolean, String):void (12 bytes)   inline method (bytecode parsing)
                                          @ 42  jdk.internal.math.FormattedFPDecimal.fillWithDigits(long, int, int):long (42 bytes)   relevance-based (relevance=1.000000, probability=0.673231, bonus=1.000000, nodes=37 <= 300.000000)
                                      @ 167  jdk.graal.compiler.replacements.AllocationSnippets.fillMemoryAlignedUnrollable(long, Word, UnsignedWord, UnsignedWord, boolean, AllocationSnippets$AllocationSnippetCounters):void (68 bytes)   inline method (bytecode parsing)
                                        @ 5  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                          @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                                        @ 8  jdk.internal.math.FormattedFPDecimal.plainCharsPureInteger():void (47 bytes)   relevance-based (relevance=1.000000, probability=0.673231, bonus=1.000000, nodes=59 <= 300.000000)
                                        @ 44  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                                      @ 190  jdk.graal.compiler.replacements.AllocationSnippets.fillMemoryAligned(long, Word, UnsignedWord, UnsignedWord, boolean, UnsignedWord, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):void (155 bytes)   inline method (bytecode parsing)
                                        @ 17  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getMinimalBulkZeroingSize():int (7 bytes)   inline method (bytecode parsing)
                                        @ 36  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                            @ 30  jdk.internal.math.FormattedFPDecimal.toDigit(long):char (6 bytes)   inline method (bytecode parsing)
                                          @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                              @ 2  jdk.internal.math.FormattedFPDecimal.toDigit(int):char (6 bytes)   inline method (bytecode parsing)
                                        @ 53  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                                        @ 105  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                          @ 34  jdk.internal.math.FormattedFPDecimal.fillWithDigits(long, int, int):long (42 bytes)   relevance-based (relevance=0.207630, probability=0.139783, bonus=1.000000, nodes=37 <= 62.288902)
                                          @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                                        @ 134  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                            @ 30  jdk.internal.math.FormattedFPDecimal.toDigit(long):char (6 bytes)   inline method (bytecode parsing)
                                @ 44  jdk.graal.compiler.replacements.AllocationSnippets.emitMemoryBarrierIf(boolean):void (14 bytes)   inline method (bytecode parsing)
                              @ 2  jdk.internal.math.FormattedFPDecimal.toDigit(int):char (6 bytes)   inline method (bytecode parsing)
                                  @ 7  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                              @ 152  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                                          @ 66  jdk.internal.math.FormattedFPDecimal.fillWithDigits(long, int, int):long (42 bytes)   relevance-based (relevance=0.207630, probability=0.139783, bonus=1.000000, nodes=37 <= 62.288902)
                              @ 158  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.callNewArrayStub(Word, int):Object (35 bytes)   inline method (bytecode parsing)
                                @ 22  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.nonNullOrDeopt(Object):Object (27 bytes)   inline method (bytecode parsing)
                                        @ 27  jdk.internal.math.FormattedFPDecimal.plainCharsMixed():void (71 bytes)   not inlining relevance-based (relevance=0.207630, probability=0.139783, bonus=1.000000, nodes=77 > 62.288902)
                              @ 168  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.profileAllocation(AllocationSnippets$AllocationProfilingData, UnsignedWord):void (51 bytes)   inline method (bytecode parsing)
                            @ 53  jdk.internal.math.FormattedFPDecimal.fillWithZeros(int, int):void (20 bytes)   inline method (bytecode parsing)
                              @ 174  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.verifyOop(Object):Object (5 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.verifyOop(Object):Object (19 bytes)   inline method (bytecode parsing)
                            @ 30  jdk.internal.math.FormattedFPDecimal.toDigit(long):char (6 bytes)   inline method (bytecode parsing)
                              @ 2  jdk.internal.math.FormattedFPDecimal.toDigit(int):char (6 bytes)   inline method (bytecode parsing)
                                          @ 36  jdk.internal.math.FormattedFPDecimal.fillWithDigits(long, int, int):long (42 bytes)   relevance-based (relevance=0.277744, probability=0.186986, bonus=1.000000, nodes=37 <= 83.323281)
                                        @ 34  jdk.internal.math.FormattedFPDecimal.plainCharsPureFraction():void (65 bytes)   relevance-based (relevance=0.277744, probability=0.186986, bonus=1.000000, nodes=70 <= 83.323281)
                                      @ 18  jdk.internal.math.FormattedFPDecimal.plainChars():FormattedFPDecimal (39 bytes)   relevance-based (relevance=1.566320, probability=1.000000, bonus=1.000000, nodes=139 <= 300.000000)
                                    @ 56  jdk.internal.math.FormattedFPDecimal.plain(int):FormattedFPDecimal (22 bytes)   relevance-based (relevance=1.657559, probability=1.000000, bonus=1.000000, nodes=218 <= 300.000000)
                                  @ 266  jdk.internal.math.FormattedFPDecimal.valueOf(double, int, char):FormattedFPDecimal (96 bytes)   not inlining relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=304 > 300.000000)
                                  @ 3  java.lang.AbstractStringBuilder.<init>(int):void (39 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                                          @ 3  java.lang.Math.max(int, int):int (11 bytes)   trivial (relevance=0.166032, probability=0.142390, bonus=1.000000, nodes=7)
                                        @ 29  jdk.internal.util.ArraysSupport.newLength(int, int, int):int (27 bytes)   relevance-based (relevance=0.166032, probability=0.142390, bonus=1.000000, nodes=15 <= 49.809492)
                                      @ 24  java.lang.AbstractStringBuilder.newCapacity(int):int (59 bytes)   relevance-based (relevance=0.166032, probability=0.142390, bonus=1.000000, nodes=27 <= 49.809492)
                                        @ 25  java.lang.Math.min(int, int):int (11 bytes)   trivial (relevance=0.166033, probability=0.142371, bonus=1.000000, nodes=7)
                                      @ 32  java.util.Arrays.copyOf(byte[], int):byte[] (33 bytes)   relevance-based (relevance=0.166032, probability=0.142390, bonus=1.000000, nodes=28 <= 49.809492)
                                    @ 10  java.lang.AbstractStringBuilder.ensureCapacityInternal(int):void (39 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=72 <= 300.000000)
                                      @ 7  java.lang.AbstractStringBuilder.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=0.999999, bonus=1.000000, nodes=9)
                                      @ 40  java.lang.StringLatin1.canEncode(int):boolean (13 bytes)   trivial (relevance=1.000000, probability=3.743751, bonus=1.000000, nodes=8)
                                    @ 17  java.lang.AbstractStringBuilder.appendChars(char[], int, int):void (130 bytes)   relevance-based (relevance=1.166030, probability=0.999999, bonus=1.000000, nodes=37 <= 300.000000)
                                  @ 2  java.lang.AbstractStringBuilder.append(char[]):AbstractStringBuilder (22 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=106 <= 300.000000)
                            @ 1  java.lang.StringBuilder.length():int (5 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.AbstractStringBuilder.length():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 17  java.lang.StringBuilder.charAt(int):char (6 bytes)   inline method (bytecode parsing)
                            @ 98  java.lang.StringBuilder.append(char):StringBuilder (8 bytes)   inline method (bytecode parsing)
                                  @ 293  java.util.Formatter$FormatSpecifier.addZeros(StringBuilder, int):void (112 bytes)   not inlining too large previous low-level graph (low-level-nodes: 940, relevance=1.166030, probability=0.999999, bonus=1.000000, nodes=61)
                            @ 13  java.lang.StringBuilder.length():int (5 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.AbstractStringBuilder.length():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 101  java.util.Formatter$Flags.contains(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 261  java.lang.StringBuilder.append(char):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 291  java.lang.StringBuilder.append(char):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 337  java.lang.StringBuilder.length():int (5 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.AbstractStringBuilder.length():int (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 358  java.util.Formatter$FormatSpecifier.localizedMagnitude(Formatter, StringBuilder, CharSequence, int, int, int, Locale):StringBuilder (381 bytes)   not inlining too large previous low-level graph (low-level-nodes: 981, relevance=1.166030, probability=0.999999, bonus=1.000000, nodes=94)
                                @ 77  java.util.Formatter$FormatSpecifier.print(Formatter, StringBuilder, double, Locale, int, char, int, boolean):void (912 bytes)   relevance-based (relevance=1.066210, probability=1.000000, bonus=1.000000, nodes=152 <= 300.000000)
                                @ 114  java.util.Formatter$FormatSpecifier.trailingSign(StringBuilder, boolean):StringBuilder (26 bytes)   trivial (relevance=1.066209, probability=0.999999, bonus=1.000000, nodes=6)
                            @ 2  java.lang.StringBuilder.append(CharSequence):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 275  java.lang.StringBuilder.<init>():void (7 bytes)   inline method (bytecode parsing)
                            @ 280  jdk.internal.math.FormattedFPDecimal.getMantissa():char[] (5 bytes)   inline accessor method (bytecode parsing)
                            @ 283  java.lang.StringBuilder.append(char[]):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 299  java.util.Formatter$Flags.contains(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                                      @ 37  java.lang.AbstractStringBuilder.append(AbstractStringBuilder):AbstractStringBuilder (70 bytes)   not inlining too large previous low-level graph (low-level-nodes: 352, relevance=1.000000, probability=0.999999, bonus=1.000000, nodes=31)
                                    @ 2  java.lang.AbstractStringBuilder.append(CharSequence):AbstractStringBuilder (54 bytes)   trivial (relevance=1.000000, probability=0.999999, bonus=1.000000, nodes=8)
                                  @ 10  java.lang.StringBuilder.append(CharSequence):Appendable (6 bytes)   relevance-based (relevance=1.000000, probability=0.999999, bonus=1.000000, nodes=10 <= 300.000000)
                                @ 154  java.util.Formatter$FormatSpecifier.appendJustified(Appendable, CharSequence):void (89 bytes)   relevance-based (relevance=1.066209, probability=0.999999, bonus=1.000000, nodes=24 <= 300.000000)
                            @ 4  jdk.internal.math.FormattedFPDecimal.<init>():void (5 bytes)   inline method (bytecode parsing)
                              @ 55  java.util.Formatter$FormatSpecifier.print(Formatter, double, Locale):void (158 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=214 <= 300.000000)
                                  @ 5  jdk.internal.math.DoubleToDecimal.<init>(boolean):void (21 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=9)
                            @ 15  jdk.internal.math.MathUtils.pow10(int):long (6 bytes)   inline method (bytecode parsing)
                                      @ 7  jdk.internal.math.MathUtils.flog10pow2(int):int (11 bytes)   relevance-based (relevance=1.057232, probability=0.637825, bonus=1.000000, nodes=10 <= 300.000000)
                                      @ 36  jdk.internal.math.FormattedFPDecimal.set(long, int, int):void (17 bytes)   relevance-based (relevance=1.057232, probability=0.637825, bonus=1.000000, nodes=13 <= 300.000000)
                                    @ 123  jdk.internal.math.DoubleToDecimal.toChars(long, int, FormattedFPDecimal):int (161 bytes)   relevance-based (relevance=1.000000, probability=0.637825, bonus=1.000000, nodes=36 <= 300.000000)
                                      @ 57  jdk.internal.math.MathUtils.flog10pow2(int):int (11 bytes)   relevance-based (relevance=0.600327, probability=0.334534, bonus=1.000000, nodes=10 <= 180.098017)
                                      @ 72  jdk.internal.math.MathUtils.flog10threeQuartersPow2(int):int (15 bytes)   relevance-based (relevance=0.049603, probability=0.027641, bonus=1.000000, nodes=12 <= 14.880929)
                                      @ 81  jdk.internal.math.MathUtils.flog2pow10(int):int (11 bytes)   relevance-based (relevance=0.649930, probability=0.362175, bonus=1.000000, nodes=10 <= 194.978946)
                                      @ 91  jdk.internal.math.MathUtils.g1(int):long (12 bytes)   relevance-based (relevance=0.649930, probability=0.362175, bonus=1.000000, nodes=10 <= 194.978946)
                                      @ 98  jdk.internal.math.MathUtils.g0(int):long (14 bytes)   relevance-based (relevance=0.649930, probability=0.362175, bonus=1.000000, nodes=11 <= 194.978946)
                                      @ 112  jdk.internal.math.DoubleToDecimal.rop(long, long, long):long (58 bytes)   relevance-based (relevance=0.649930, probability=0.362175, bonus=1.000000, nodes=20 <= 194.978946)
                                      @ 126  jdk.internal.math.DoubleToDecimal.rop(long, long, long):long (58 bytes)   relevance-based (relevance=0.649930, probability=0.362175, bonus=1.000000, nodes=20 <= 194.978946)
                                      @ 140  jdk.internal.math.DoubleToDecimal.rop(long, long, long):long (58 bytes)   relevance-based (relevance=0.649930, probability=0.362175, bonus=1.000000, nodes=20 <= 194.978946)
                                    @ 135  jdk.internal.math.DoubleToDecimal.toDecimal(int, long, int, FormattedFPDecimal):int (385 bytes)   not inlining relevance-based (relevance=0.600327, probability=0.362175, bonus=1.000000, nodes=183 > 180.098017)
                                  @ 10  jdk.internal.math.DoubleToDecimal.toDecimal(double, FormattedFPDecimal):int (220 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=82 <= 300.000000)
                                @ 12  jdk.internal.math.DoubleToDecimal.split(double, FormattedFPDecimal):void (15 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=92 <= 300.000000)
                            @ 64  jdk.internal.math.MathUtils.pow10(int):long (6 bytes)   inline method (bytecode parsing)
                            @ 119  jdk.internal.math.MathUtils.pow10(int):long (6 bytes)   inline method (bytecode parsing)
                                  @ 14  jdk.internal.math.FormattedFPDecimal.round(long):void (149 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=80 <= 300.000000)
                                  @ 18  jdk.internal.math.FormattedFPDecimal.plainChars():FormattedFPDecimal (39 bytes)   not inlining too large previous low-level graph (low-level-nodes: 494, relevance=1.566320, probability=1.000000, bonus=1.000000, nodes=31)
                                @ 56  jdk.internal.math.FormattedFPDecimal.plain(int):FormattedFPDecimal (22 bytes)   relevance-based (relevance=1.657559, probability=1.000000, bonus=1.000000, nodes=88 <= 300.000000)
                              @ 266  jdk.internal.math.FormattedFPDecimal.valueOf(double, int, char):FormattedFPDecimal (96 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=175 <= 300.000000)
                            @ 1  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                            @ 5  java.lang.Double.doubleValue():double (5 bytes)   inline method (bytecode parsing)
                              @ 3  java.lang.AbstractStringBuilder.<init>(int):void (39 bytes)   relevance-based (relevance=1.657559, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                                      @ 3  java.lang.Math.max(int, int):int (11 bytes)   trivial (relevance=0.166032, probability=0.142390, bonus=1.000000, nodes=7)
                                    @ 29  jdk.internal.util.ArraysSupport.newLength(int, int, int):int (27 bytes)   relevance-based (relevance=0.166032, probability=0.142390, bonus=1.000000, nodes=15 <= 49.809492)
                                  @ 24  java.lang.AbstractStringBuilder.newCapacity(int):int (59 bytes)   relevance-based (relevance=0.166032, probability=0.142390, bonus=1.000000, nodes=27 <= 49.809492)
                                    @ 25  java.lang.Math.min(int, int):int (11 bytes)   trivial (relevance=0.166033, probability=0.142371, bonus=1.000000, nodes=7)
                                  @ 32  java.util.Arrays.copyOf(byte[], int):byte[] (33 bytes)   relevance-based (relevance=0.166032, probability=0.142390, bonus=1.000000, nodes=28 <= 49.809492)
                                @ 10  java.lang.AbstractStringBuilder.ensureCapacityInternal(int):void (39 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=72 <= 300.000000)
                                  @ 7  java.lang.AbstractStringBuilder.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=0.999999, bonus=1.000000, nodes=9)
                                  @ 40  java.lang.StringLatin1.canEncode(int):boolean (13 bytes)   trivial (relevance=1.000000, probability=3.743751, bonus=1.000000, nodes=8)
                                @ 17  java.lang.AbstractStringBuilder.appendChars(char[], int, int):void (130 bytes)   relevance-based (relevance=1.166030, probability=0.999999, bonus=1.000000, nodes=37 <= 300.000000)
                              @ 2  java.lang.AbstractStringBuilder.append(char[]):AbstractStringBuilder (22 bytes)   relevance-based (relevance=1.657559, probability=1.000000, bonus=1.000000, nodes=106 <= 300.000000)
                            @ 1  java.lang.StringBuilder.length():int (5 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.AbstractStringBuilder.length():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 17  java.lang.StringBuilder.charAt(int):char (6 bytes)   inline method (bytecode parsing)
                            @ 98  java.lang.StringBuilder.append(char):StringBuilder (8 bytes)   inline method (bytecode parsing)
                              @ 293  java.util.Formatter$FormatSpecifier.addZeros(StringBuilder, int):void (112 bytes)   not inlining too large previous low-level graph (low-level-nodes: 940, relevance=1.657556, probability=0.999999, bonus=1.000000, nodes=61)
                            @ 13  java.lang.StringBuilder.length():int (5 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.AbstractStringBuilder.length():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 101  java.util.Formatter$Flags.contains(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 261  java.lang.StringBuilder.append(char):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 291  java.lang.StringBuilder.append(char):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 337  java.lang.StringBuilder.length():int (5 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.AbstractStringBuilder.length():int (5 bytes)   inline accessor method (bytecode parsing)
                              @ 358  java.util.Formatter$FormatSpecifier.localizedMagnitude(Formatter, StringBuilder, CharSequence, int, int, int, Locale):StringBuilder (381 bytes)   not inlining too large previous low-level graph (low-level-nodes: 981, relevance=1.657556, probability=0.999999, bonus=1.000000, nodes=98)
                            @ 4  jdk.internal.math.FormattedFPDecimal.<init>():void (5 bytes)   inline method (bytecode parsing)
                                @ 5  jdk.internal.math.DoubleToDecimal.<init>(boolean):void (21 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=9)
                            @ 15  jdk.internal.math.MathUtils.pow10(int):long (6 bytes)   inline method (bytecode parsing)
                                    @ 7  jdk.internal.math.MathUtils.flog10pow2(int):int (11 bytes)   relevance-based (relevance=1.057232, probability=0.637825, bonus=1.000000, nodes=10 <= 300.000000)
                                    @ 36  jdk.internal.math.FormattedFPDecimal.set(long, int, int):void (17 bytes)   relevance-based (relevance=1.057232, probability=0.637825, bonus=1.000000, nodes=13 <= 300.000000)
                                  @ 123  jdk.internal.math.DoubleToDecimal.toChars(long, int, FormattedFPDecimal):int (161 bytes)   relevance-based (relevance=1.000000, probability=0.637825, bonus=1.000000, nodes=36 <= 300.000000)
                                    @ 57  jdk.internal.math.MathUtils.flog10pow2(int):int (11 bytes)   relevance-based (relevance=0.600327, probability=0.335224, bonus=1.000000, nodes=10 <= 180.098017)
                                    @ 72  jdk.internal.math.MathUtils.flog10threeQuartersPow2(int):int (15 bytes)   relevance-based (relevance=0.048265, probability=0.026951, bonus=1.000000, nodes=12 <= 14.479532)
                                    @ 81  jdk.internal.math.MathUtils.flog2pow10(int):int (11 bytes)   relevance-based (relevance=0.648592, probability=0.362175, bonus=1.000000, nodes=10 <= 194.577549)
                                    @ 91  jdk.internal.math.MathUtils.g1(int):long (12 bytes)   relevance-based (relevance=0.648592, probability=0.362175, bonus=1.000000, nodes=10 <= 194.577549)
                                    @ 98  jdk.internal.math.MathUtils.g0(int):long (14 bytes)   relevance-based (relevance=0.648592, probability=0.362175, bonus=1.000000, nodes=11 <= 194.577549)
                                    @ 112  jdk.internal.math.DoubleToDecimal.rop(long, long, long):long (58 bytes)   relevance-based (relevance=0.648592, probability=0.362175, bonus=1.000000, nodes=20 <= 194.577549)
                                    @ 126  jdk.internal.math.DoubleToDecimal.rop(long, long, long):long (58 bytes)   relevance-based (relevance=0.648592, probability=0.362175, bonus=1.000000, nodes=20 <= 194.577549)
                                    @ 140  jdk.internal.math.DoubleToDecimal.rop(long, long, long):long (58 bytes)   relevance-based (relevance=0.648592, probability=0.362175, bonus=1.000000, nodes=20 <= 194.577549)
                                  @ 135  jdk.internal.math.DoubleToDecimal.toDecimal(int, long, int, FormattedFPDecimal):int (385 bytes)   not inlining relevance-based (relevance=0.600327, probability=0.362175, bonus=1.000000, nodes=183 > 180.098017)
                                @ 10  jdk.internal.math.DoubleToDecimal.toDecimal(double, FormattedFPDecimal):int (220 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=82 <= 300.000000)
                              @ 12  jdk.internal.math.DoubleToDecimal.split(double, FormattedFPDecimal):void (15 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=92 <= 300.000000)
                            @ 64  jdk.internal.math.MathUtils.pow10(int):long (6 bytes)   inline method (bytecode parsing)
                            @ 119  jdk.internal.math.MathUtils.pow10(int):long (6 bytes)   inline method (bytecode parsing)
                                @ 14  jdk.internal.math.FormattedFPDecimal.round(long):void (149 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=80 <= 300.000000)
                                @ 18  jdk.internal.math.FormattedFPDecimal.plainChars():FormattedFPDecimal (39 bytes)   not inlining too large previous low-level graph (low-level-nodes: 494, relevance=1.566320, probability=1.000000, bonus=1.000000, nodes=31)
                              @ 56  jdk.internal.math.FormattedFPDecimal.plain(int):FormattedFPDecimal (22 bytes)   relevance-based (relevance=1.657559, probability=1.000000, bonus=1.000000, nodes=87 <= 300.000000)
                            @ 15  jdk.internal.math.MathUtils.pow10(int):long (6 bytes)   inline method (bytecode parsing)
                                @ 7  jdk.internal.math.MathUtils.flog10pow2(int):int (11 bytes)   relevance-based (relevance=1.057232, probability=0.637825, bonus=1.000000, nodes=10 <= 300.000000)
                                @ 36  jdk.internal.math.FormattedFPDecimal.set(long, int, int):void (17 bytes)   relevance-based (relevance=1.057232, probability=0.637825, bonus=1.000000, nodes=13 <= 300.000000)
                              @ 123  jdk.internal.math.DoubleToDecimal.toChars(long, int, FormattedFPDecimal):int (161 bytes)   relevance-based (relevance=1.000000, probability=0.637825, bonus=1.000000, nodes=40 <= 300.000000)
                                @ 57  jdk.internal.math.MathUtils.flog10pow2(int):int (11 bytes)   relevance-based (relevance=0.600327, probability=0.335629, bonus=1.000000, nodes=10 <= 180.098017)
                                @ 72  jdk.internal.math.MathUtils.flog10threeQuartersPow2(int):int (15 bytes)   relevance-based (relevance=0.047482, probability=0.026546, bonus=1.000000, nodes=12 <= 14.244517)
                                @ 81  jdk.internal.math.MathUtils.flog2pow10(int):int (11 bytes)   relevance-based (relevance=0.647808, probability=0.362175, bonus=1.000000, nodes=10 <= 194.342534)
                                @ 91  jdk.internal.math.MathUtils.g1(int):long (12 bytes)   relevance-based (relevance=0.647808, probability=0.362175, bonus=1.000000, nodes=10 <= 194.342534)
                                @ 98  jdk.internal.math.MathUtils.g0(int):long (14 bytes)   relevance-based (relevance=0.647808, probability=0.362175, bonus=1.000000, nodes=11 <= 194.342534)
                                @ 112  jdk.internal.math.DoubleToDecimal.rop(long, long, long):long (58 bytes)   relevance-based (relevance=0.647808, probability=0.362175, bonus=1.000000, nodes=20 <= 194.342534)
                                @ 126  jdk.internal.math.DoubleToDecimal.rop(long, long, long):long (58 bytes)   relevance-based (relevance=0.647808, probability=0.362175, bonus=1.000000, nodes=20 <= 194.342534)
                            @ 64  jdk.internal.math.MathUtils.pow10(int):long (6 bytes)   inline method (bytecode parsing)
                                @ 140  jdk.internal.math.DoubleToDecimal.rop(long, long, long):long (58 bytes)   relevance-based (relevance=0.647808, probability=0.362175, bonus=1.000000, nodes=20 <= 194.342534)
                            @ 119  jdk.internal.math.MathUtils.pow10(int):long (6 bytes)   inline method (bytecode parsing)
                              @ 135  jdk.internal.math.DoubleToDecimal.toDecimal(int, long, int, FormattedFPDecimal):int (385 bytes)   not inlining relevance-based (relevance=0.600327, probability=0.362175, bonus=1.000000, nodes=183 > 180.098017)
                              @ 14  jdk.internal.math.FormattedFPDecimal.round(long):void (149 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=80 <= 300.000000)
                              @ 18  jdk.internal.math.FormattedFPDecimal.plainChars():FormattedFPDecimal (39 bytes)   not inlining too large previous low-level graph (low-level-nodes: 494, relevance=1.566320, probability=1.000000, bonus=1.000000, nodes=31)
                            @ 64  jdk.internal.math.MathUtils.pow10(int):long (6 bytes)   inline method (bytecode parsing)
                            @ 119  jdk.internal.math.MathUtils.pow10(int):long (6 bytes)   inline method (bytecode parsing)
                            @ 4  java.lang.StringBuilder.<init>():void (7 bytes)   inline method (bytecode parsing)
                              @ 3  java.lang.AbstractStringBuilder.<init>(int):void (39 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                              @ 11  java.lang.Double.compare(double, double):int (54 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=23 <= 300.000000)
                              @ 26  java.lang.Double.isNaN(double):boolean (12 bytes)   trivial (relevance=1.072507, probability=1.000000, bonus=1.000000, nodes=8)
                            @ 10  java.util.Formatter$Flags.contains(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 32  java.util.Formatter$Flags.contains(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                              @ 43  java.util.Formatter$FormatSpecifier.leadingSign(StringBuilder, boolean):StringBuilder (80 bytes)   relevance-based (relevance=1.072507, probability=1.000000, bonus=1.000000, nodes=13 <= 300.000000)
                              @ 49  java.lang.Double.isInfinite(double):boolean (17 bytes)   trivial (relevance=1.072507, probability=1.000000, bonus=1.000000, nodes=9)
                            @ 275  java.lang.StringBuilder.<init>():void (7 bytes)   inline method (bytecode parsing)
                            @ 280  jdk.internal.math.FormattedFPDecimal.getMantissa():char[] (5 bytes)   inline accessor method (bytecode parsing)
                            @ 283  java.lang.StringBuilder.append(char[]):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 299  java.util.Formatter$Flags.contains(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                              @ 77  java.util.Formatter$FormatSpecifier.print(Formatter, StringBuilder, double, Locale, int, char, int, boolean):void (912 bytes)   not inlining too large previous low-level graph (low-level-nodes: 654, relevance=1.072507, probability=1.000000, bonus=1.000000, nodes=51)
                              @ 114  java.util.Formatter$FormatSpecifier.trailingSign(StringBuilder, boolean):StringBuilder (26 bytes)   trivial (relevance=1.072507, probability=1.000000, bonus=1.000000, nodes=6)
                                    @ 3  java.lang.Math.max(int, int):int (11 bytes)   trivial (relevance=0.166032, probability=0.142390, bonus=1.000000, nodes=7)
                                  @ 29  jdk.internal.util.ArraysSupport.newLength(int, int, int):int (27 bytes)   relevance-based (relevance=0.166032, probability=0.142390, bonus=1.000000, nodes=15 <= 49.809492)
                            @ 2  java.lang.StringBuilder.append(CharSequence):StringBuilder (8 bytes)   inline method (bytecode parsing)
                                @ 24  java.lang.AbstractStringBuilder.newCapacity(int):int (59 bytes)   relevance-based (relevance=0.166032, probability=0.142390, bonus=1.000000, nodes=27 <= 49.809492)
                                  @ 25  java.lang.Math.min(int, int):int (11 bytes)   trivial (relevance=0.166033, probability=0.142371, bonus=1.000000, nodes=7)
                                @ 32  java.util.Arrays.copyOf(byte[], int):byte[] (33 bytes)   relevance-based (relevance=0.166032, probability=0.142390, bonus=1.000000, nodes=28 <= 49.809492)
                                    @ 37  java.lang.AbstractStringBuilder.append(AbstractStringBuilder):AbstractStringBuilder (70 bytes)   not inlining too large previous low-level graph (low-level-nodes: 352, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=31)
                                  @ 2  java.lang.AbstractStringBuilder.append(CharSequence):AbstractStringBuilder (54 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=8)
                              @ 10  java.lang.AbstractStringBuilder.ensureCapacityInternal(int):void (39 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=72 <= 300.000000)
                                @ 10  java.lang.StringBuilder.append(CharSequence):Appendable (6 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=10 <= 300.000000)
                              @ 154  java.util.Formatter$FormatSpecifier.appendJustified(Appendable, CharSequence):void (89 bytes)   relevance-based (relevance=1.072507, probability=1.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                @ 7  java.lang.AbstractStringBuilder.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=0.999999, bonus=1.000000, nodes=9)
                                @ 40  java.lang.StringLatin1.canEncode(int):boolean (13 bytes)   trivial (relevance=1.000000, probability=3.743751, bonus=1.000000, nodes=8)
                              @ 17  java.lang.AbstractStringBuilder.appendChars(char[], int, int):void (130 bytes)   relevance-based (relevance=1.166030, probability=0.999999, bonus=1.000000, nodes=37 <= 300.000000)
                              @ 2  org.graalvm.collections.EconomicMapImpl.checkKeyNonNull(Object):void (15 bytes)   trivial (relevance=1.347396, probability=1.000000, bonus=1.000000, nodes=6)
                              @ 6  org.graalvm.collections.EconomicMapImpl.hasHashArray():boolean (13 bytes)   trivial (relevance=1.347396, probability=1.000000, bonus=1.000000, nodes=9)
                            @ 21  org.graalvm.collections.EconomicMapImpl.getKey(int):Object (9 bytes)   inline method (bytecode parsing)
                            @ 4  jdk.graal.compiler.graph.Node.getNodeClass():NodeClass (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 40  jdk.graal.compiler.graph.Graph$1.hashCode(Object):int (15 bytes)   not inlining relevance-based (relevance=0.015170, probability=0.007831, bonus=1.000000, nodes=14 > 4.550884)
                 n                @ 48  java.lang.Object.hashCode():int (0 bytes)   trivial (relevance=0.484277, probability=0.249996, bonus=1.000000, nodes=5)
                                  @ 61  org.graalvm.collections.EconomicMapImpl.getHashTableSize():int (43 bytes)   relevance-based (relevance=0.499447, probability=0.257827, bonus=1.000000, nodes=21 <= 149.833997)
                                @ 2  org.graalvm.collections.EconomicMapImpl.getHashIndex(Object):int (68 bytes)   relevance-based (relevance=0.423864, probability=0.257827, bonus=1.000000, nodes=76 <= 127.159120)
                              @ 14  org.graalvm.collections.EconomicMapImpl.findAndRemoveHash(Object):int (108 bytes)   not inlining relevance-based (relevance=0.347396, probability=0.257827, bonus=1.000000, nodes=124 > 104.218669)
                            @ 49  jdk.graal.compiler.graph.Node.valueEquals(Node):boolean (10 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.graph.Node.getNodeClass():NodeClass (5 bytes)   inline accessor method (bytecode parsing)
                            @ 59  jdk.graal.compiler.core.common.Fields.getCount():int (6 bytes)   inline method (bytecode parsing)
                              @ 12  java.util.ArrayDeque.circularClear(Object[], int, int):void (43 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=38 <= 300.000000)
                            @ 70  jdk.graal.compiler.core.common.Fields.getType(int):Class (7 bytes)   inline method (bytecode parsing)
                                    @ 6  jdk.graal.compiler.graph.NodeClass.dataEquals(Node, Node):boolean (546 bytes)   not inlining relevance-based (relevance=0.093801, probability=0.028989, bonus=1.000000, nodes=248 > 28.140425)
                                  @ 46  jdk.graal.compiler.graph.Graph$1.equals(Object, Object):boolean (53 bytes)   relevance-based (relevance=0.093801, probability=0.057977, bonus=1.000000, nodes=25 <= 28.140425)
                                @ 36  java.lang.Object.equals(Object):boolean (11 bytes)   not inlining no methods remaining after filtering less frequent methods (7 methods previously)
                                @ 26  org.graalvm.collections.EconomicMapImpl.compareKeys(Object, Object):boolean (52 bytes)   relevance-based (relevance=1.186782, probability=1.418672, bonus=1.000000, nodes=66 <= 300.000000)
                              @ 23  org.graalvm.collections.EconomicMapImpl.findLinear(Object):int (42 bytes)   relevance-based (relevance=1.000000, probability=0.742173, bonus=1.000000, nodes=88 <= 300.000000)
                                @ 2  org.graalvm.collections.EconomicMapImpl.getRawValue(int):Object (11 bytes)   relevance-based (relevance=1.047505, probability=0.993723, bonus=1.000000, nodes=10 <= 300.000000)
                              @ 34  org.graalvm.collections.EconomicMapImpl.getValue(int):Object (23 bytes)   relevance-based (relevance=1.338938, probability=0.993723, bonus=1.000000, nodes=19 <= 300.000000)
                            @ 45  org.graalvm.collections.EconomicMapImpl.getKey(int):Object (9 bytes)   inline method (bytecode parsing)
                            @ 48  org.graalvm.collections.EconomicMapImpl.setKey(int, Object):void (10 bytes)   inline method (bytecode parsing)
                            @ 75  org.graalvm.collections.EconomicMapImpl.setKey(int, Object):void (10 bytes)   inline method (bytecode parsing)
                            @ 81  org.graalvm.collections.EconomicMapImpl.setRawValue(int, Object):void (12 bytes)   inline method (bytecode parsing)
                            @ 112  org.graalvm.collections.EconomicMapImpl.getKey(int):Object (9 bytes)   inline method (bytecode parsing)
                              @ 40  org.graalvm.collections.EconomicMapImpl.remove(int):int (165 bytes)   not inlining too large previous low-level graph (low-level-nodes: 911, relevance=1.338938, probability=0.993723, bonus=1.000000, nodes=116)
                            @ 47  java.lang.Enum.ordinal():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 36  java.lang.Class$3.<init>(Class, Method):void (10 bytes)   inline method (bytecode parsing)
                            @ 39  java.security.AccessController.doPrivileged(PrivilegedAction):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.security.AccessController.executePrivileged(PrivilegedAction, AccessControlContext, Class):Object (65 bytes)   inline method (bytecode parsing)
                                @ 29  java.lang.Class$3.run():Object (5 bytes)   inline method (bytecode parsing)
                                  @ 1  java.lang.Class$3.run():Void (10 bytes)   inline method (bytecode parsing)
                            @ 49  java.lang.reflect.Method.invoke(Object, Object[]):Object (108 bytes)   inline method (bytecode parsing)
                              @ 10  java.lang.Class.isEnum():boolean (27 bytes)   not inlining relevance-based (relevance=0.000710, probability=0.000710, bonus=1.000000, nodes=70 > 0.213038)
                            @ 1  java.util.Objects.requireNonNull(Object):Object (14 bytes)   inline method (bytecode parsing)
                            @ 46  java.lang.NoSuchMethodException.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  java.lang.ReflectiveOperationException.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                                @ 2  java.lang.Exception.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                              @ 26  java.lang.Class.getMethod(String, Class[]):Method (59 bytes)   not inlining relevance-based (relevance=0.000710, probability=0.000710, bonus=1.000000, nodes=56 > 0.213038)
                            @ 11  java.lang.reflect.Method.checkCanSetAccessible(Class):void (10 bytes)   inline method (bytecode parsing)
                              @ 6  java.lang.reflect.AccessibleObject.checkCanSetAccessible(Class, Class):void (9 bytes)   inline method (bytecode parsing)
                            @ 16  java.lang.reflect.AccessibleObject.setAccessible0(boolean):boolean (7 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.reflect.Method.setAccessible(boolean):void (21 bytes)   not inlining relevance-based (relevance=0.000710, probability=0.000710, bonus=1.000000, nodes=23 > 0.213038)
                              @ 1  java.lang.reflect.Method.isCallerSensitive():boolean (38 bytes)   not inlining relevance-based (relevance=0.000710, probability=0.000710, bonus=1.000000, nodes=26 > 0.213038)
                              @ 42  java.lang.reflect.Modifier.isStatic(int):boolean (13 bytes)   trivial (relevance=0.000355, probability=0.000355, bonus=1.000000, nodes=9)
                              @ 60  java.lang.reflect.AccessibleObject.checkAccess(Class, Class, Class, int):void (40 bytes)   not inlining relevance-based (relevance=0.000355, probability=0.000355, bonus=1.000000, nodes=38 > 0.106519)
                            @ 14  java.lang.reflect.Method.getMethodAccessor():MethodAccessor (5 bytes)   inline accessor method (bytecode parsing)
                            @ 42  jdk.internal.misc.VM.isJavaLangInvokeInited():boolean (4 bytes)   inline method (bytecode parsing)
                              @ 75  java.lang.reflect.Method.acquireMethodAccessor():MethodAccessor (55 bytes)   not inlining relevance-based (relevance=0.000355, probability=0.000355, bonus=1.000000, nodes=39 > 0.106519)
                            @ 24  jdk.internal.reflect.DirectMethodHandleAccessor.invokeImpl(Object, Object[], Class):Object (140 bytes)   inline method (bytecode parsing)
                              @ 121  java.lang.invoke.MethodHandleImpl$1.reflectiveInvoker(Class):MethodHandle (10 bytes)   inline method (bytecode parsing)
                                @ 1  java.util.Objects.requireNonNull(Object):Object (14 bytes)   inline method (bytecode parsing)
                            @ 18  java.lang.StringLatin1.toBytes(char):byte[] (9 bytes)   inline method (bytecode parsing)
                            @ 22  java.lang.String.<init>(byte[], byte):void (15 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.internal.reflect.DirectMethodHandleAccessor.isStatic():boolean (20 bytes)   not inlining relevance-based (relevance=0.000710, probability=0.000355, bonus=1.000000, nodes=10 > 0.213038)
                              @ 7  java.lang.StringLatin1.canEncode(int):boolean (13 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=8)
                            @ 20  java.lang.IllegalArgumentException.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  java.lang.RuntimeException.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                                @ 2  java.lang.Exception.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                                @ 9  jdk.internal.reflect.DirectMethodHandleAccessor.checkReceiver(Object):void (25 bytes)   trivial (relevance=0.000355, probability=0.000177, bonus=1.000000, nodes=5)
                            @ 24  java.lang.StringBuilder.<init>():void (7 bytes)   inline method (bytecode parsing)
                            @ 29  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 33  java.lang.StringBuilder.append(int):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 38  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 42  java.lang.StringBuilder.append(int):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 45  java.lang.StringBuilder.toString():String (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.String.<init>(StringBuilder):void (7 bytes)   inline method (bytecode parsing)
                            @ 48  java.lang.IllegalArgumentException.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  java.lang.RuntimeException.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                                @ 2  java.lang.Exception.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                                @ 17  jdk.internal.reflect.DirectMethodHandleAccessor.checkArgumentCount(int, Object[]):void (53 bytes)   not inlining relevance-based (relevance=0.003551, probability=0.000355, bonus=1.000000, nodes=49 > 1.065190)
                                @ 1  jdk.internal.reflect.DirectMethodHandleAccessor.hasCallerParameter():boolean (20 bytes)   not inlining relevance-based (relevance=0.003551, probability=0.000355, bonus=1.000000, nodes=10 > 1.065190)
                              @ 90  jdk.internal.reflect.DirectMethodHandleAccessor.invoke(Object, Object[], Class):Object (102 bytes)   forced inlining
                            @ 23  jdk.internal.reflect.DirectMethodHandleAccessor.invokeImpl(Object, Object[]):Object (108 bytes)   inline method (bytecode parsing)
                            @ 27  java.lang.Character.toString():String (8 bytes)   inline method (bytecode parsing)
                              @ 72  java.lang.invoke.LambdaForm$MH/0x00007f8674004000.invokeExact_MT(Object, Object, Object, Object, Object):Object (26 bytes)   inline method (bytecode parsing)
                                @ 11  java.lang.invoke.Invokers.checkExactType(MethodHandle, MethodType):void (17 bytes)   inline method (bytecode parsing)
                                  @ 1  java.lang.invoke.MethodHandle.type():MethodType (5 bytes)   inline accessor method (bytecode parsing)
                            @ 18  java.lang.StringLatin1.toBytes(char):byte[] (9 bytes)   inline method (bytecode parsing)
                                @ 15  java.lang.invoke.Invokers.checkCustomized(MethodHandle):void (23 bytes)   inline method (bytecode parsing)
                            @ 22  java.lang.String.<init>(byte[], byte):void (15 bytes)   inline method (bytecode parsing)
                                @ 7  java.lang.StringLatin1.canEncode(int):boolean (13 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=8)
                              @ 41  java.lang.invoke.Invokers$Holder.invokeExact_MT(Object, Object, Object):Object (23 bytes)   inline method (bytecode parsing)
                              @ 4  java.lang.String.valueOf(char):String (39 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=22 <= 300.000000)
                                @ 10  java.lang.invoke.Invokers.checkExactType(MethodHandle, MethodType):void (17 bytes)   inline method (bytecode parsing)
                            @ 34  java.util.Formatter$Flags.contains(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                                  @ 1  java.lang.invoke.MethodHandle.type():MethodType (5 bytes)   inline accessor method (bytecode parsing)
                                @ 14  java.lang.invoke.Invokers.checkCustomized(MethodHandle):void (23 bytes)   inline method (bytecode parsing)
                              @ 211  java.util.Formatter$FormatSpecifier.print(Formatter, String, Locale):void (57 bytes)   not inlining too large previous low-level graph (low-level-nodes: 368, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=19)
                                @ 1  jdk.internal.reflect.DirectMethodHandleAccessor.isStatic():boolean (20 bytes)   not inlining relevance-based (relevance=0.000710, probability=0.000355, bonus=1.000000, nodes=10 > 0.213038)
                            @ 20  java.lang.IllegalArgumentException.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  java.lang.RuntimeException.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                                @ 2  java.lang.Exception.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                                @ 9  jdk.internal.reflect.DirectMethodHandleAccessor.checkReceiver(Object):void (25 bytes)   trivial (relevance=0.000355, probability=0.000177, bonus=1.000000, nodes=5)
                            @ 24  java.lang.StringBuilder.<init>():void (7 bytes)   inline method (bytecode parsing)
                            @ 29  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 33  java.lang.StringBuilder.append(int):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 38  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 42  java.lang.StringBuilder.append(int):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 45  java.lang.StringBuilder.toString():String (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.String.<init>(StringBuilder):void (7 bytes)   inline method (bytecode parsing)
                            @ 48  java.lang.IllegalArgumentException.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  java.lang.RuntimeException.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                                @ 2  java.lang.Exception.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                                @ 17  jdk.internal.reflect.DirectMethodHandleAccessor.checkArgumentCount(int, Object[]):void (53 bytes)   not inlining relevance-based (relevance=0.003414, probability=0.000355, bonus=1.000000, nodes=49 > 1.024245)
                              @ 19  java.lang.invoke.Invokers.maybeCustomize(MethodHandle):void (5 bytes)   not inlining it is marked non-inlinable
                              @ 19  java.lang.invoke.Invokers.maybeCustomize(MethodHandle):void (5 bytes)   not inlining it is marked non-inlinable
                              @ 102  jdk.internal.reflect.DirectMethodHandleAccessor.invoke(Object, Object[]):Object (92 bytes)   forced inlining
                            @ 1  java.util.EnumSet.getUniverse(Class):Enum[] (10 bytes)   inline method (bytecode parsing)
                              @ 0  jdk.internal.access.SharedSecrets.getJavaLangAccess():JavaLangAccess (4 bytes)   inline method (bytecode parsing)
                            @ 36  java.lang.Class$3.<init>(Class, Method):void (10 bytes)   inline method (bytecode parsing)
                            @ 39  java.security.AccessController.doPrivileged(PrivilegedAction):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.security.AccessController.executePrivileged(PrivilegedAction, AccessControlContext, Class):Object (65 bytes)   inline method (bytecode parsing)
                                @ 29  java.lang.Class$3.run():Object (5 bytes)   inline method (bytecode parsing)
                                  @ 1  java.lang.Class$3.run():Void (10 bytes)   inline method (bytecode parsing)
                            @ 49  java.lang.reflect.Method.invoke(Object, Object[]):Object (108 bytes)   inline method (bytecode parsing)
                                  @ 10  java.lang.Class.isEnum():boolean (27 bytes)   not inlining relevance-based (relevance=0.000710, probability=0.000710, bonus=1.000000, nodes=70 > 0.213038)
                            @ 1  java.util.Objects.requireNonNull(Object):Object (14 bytes)   inline method (bytecode parsing)
                            @ 46  java.lang.NoSuchMethodException.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  java.lang.ReflectiveOperationException.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                                @ 2  java.lang.Exception.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                                  @ 26  java.lang.Class.getMethod(String, Class[]):Method (59 bytes)   not inlining relevance-based (relevance=0.000710, probability=0.000710, bonus=1.000000, nodes=56 > 0.213038)
                            @ 11  java.lang.reflect.Method.checkCanSetAccessible(Class):void (10 bytes)   inline method (bytecode parsing)
                              @ 6  java.lang.reflect.AccessibleObject.checkCanSetAccessible(Class, Class):void (9 bytes)   inline method (bytecode parsing)
                            @ 16  java.lang.reflect.AccessibleObject.setAccessible0(boolean):boolean (7 bytes)   inline method (bytecode parsing)
                                  @ 5  java.lang.reflect.Method.setAccessible(boolean):void (21 bytes)   not inlining relevance-based (relevance=0.000710, probability=0.000710, bonus=1.000000, nodes=23 > 0.213038)
                                  @ 1  java.lang.reflect.Method.isCallerSensitive():boolean (38 bytes)   not inlining relevance-based (relevance=0.000710, probability=0.000710, bonus=1.000000, nodes=26 > 0.213038)
                                  @ 42  java.lang.reflect.Modifier.isStatic(int):boolean (13 bytes)   trivial (relevance=0.000355, probability=0.000355, bonus=1.000000, nodes=9)
                                  @ 60  java.lang.reflect.AccessibleObject.checkAccess(Class, Class, Class, int):void (40 bytes)   not inlining relevance-based (relevance=0.000355, probability=0.000355, bonus=1.000000, nodes=38 > 0.106519)
                            @ 14  java.lang.reflect.Method.getMethodAccessor():MethodAccessor (5 bytes)   inline accessor method (bytecode parsing)
                            @ 42  jdk.internal.misc.VM.isJavaLangInvokeInited():boolean (4 bytes)   inline method (bytecode parsing)
                                  @ 75  java.lang.reflect.Method.acquireMethodAccessor():MethodAccessor (55 bytes)   not inlining relevance-based (relevance=0.000355, probability=0.000355, bonus=1.000000, nodes=39 > 0.106519)
                            @ 24  jdk.internal.reflect.DirectMethodHandleAccessor.invokeImpl(Object, Object[], Class):Object (140 bytes)   inline method (bytecode parsing)
                              @ 121  java.lang.invoke.MethodHandleImpl$1.reflectiveInvoker(Class):MethodHandle (10 bytes)   inline method (bytecode parsing)
                                @ 1  java.util.Objects.requireNonNull(Object):Object (14 bytes)   inline method (bytecode parsing)
                                    @ 1  jdk.internal.reflect.DirectMethodHandleAccessor.isStatic():boolean (20 bytes)   not inlining relevance-based (relevance=0.000710, probability=0.000355, bonus=1.000000, nodes=10 > 0.213038)
                            @ 20  java.lang.IllegalArgumentException.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  java.lang.RuntimeException.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                                @ 2  java.lang.Exception.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                                    @ 9  jdk.internal.reflect.DirectMethodHandleAccessor.checkReceiver(Object):void (25 bytes)   trivial (relevance=0.000355, probability=0.000177, bonus=1.000000, nodes=5)
                            @ 24  java.lang.StringBuilder.<init>():void (7 bytes)   inline method (bytecode parsing)
                            @ 29  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 33  java.lang.StringBuilder.append(int):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 38  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 42  java.lang.StringBuilder.append(int):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 45  java.lang.StringBuilder.toString():String (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.String.<init>(StringBuilder):void (7 bytes)   inline method (bytecode parsing)
                            @ 48  java.lang.IllegalArgumentException.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  java.lang.RuntimeException.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                                @ 2  java.lang.Exception.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                                    @ 17  jdk.internal.reflect.DirectMethodHandleAccessor.checkArgumentCount(int, Object[]):void (53 bytes)   not inlining relevance-based (relevance=0.003551, probability=0.000355, bonus=1.000000, nodes=49 > 1.065190)
                                    @ 1  jdk.internal.reflect.DirectMethodHandleAccessor.hasCallerParameter():boolean (20 bytes)   not inlining relevance-based (relevance=0.003551, probability=0.000355, bonus=1.000000, nodes=10 > 1.065190)
                                  @ 90  jdk.internal.reflect.DirectMethodHandleAccessor.invoke(Object, Object[], Class):Object (102 bytes)   forced inlining
                            @ 23  jdk.internal.reflect.DirectMethodHandleAccessor.invokeImpl(Object, Object[]):Object (108 bytes)   inline method (bytecode parsing)
                              @ 22  jdk.internal.util.ArraysSupport.newLength(int, int, int):int (27 bytes)   not inlining relevance-based (relevance=0.039691, probability=0.038176, bonus=1.000000, nodes=16 > 11.907261)
                              @ 72  java.lang.invoke.LambdaForm$MH/0x00007f8674004000.invokeExact_MT(Object, Object, Object, Object, Object):Object (26 bytes)   inline method (bytecode parsing)
                              @ 25  java.util.Arrays.copyOf(byte[], int):byte[] (33 bytes)   not inlining relevance-based (relevance=0.039691, probability=0.038176, bonus=1.000000, nodes=29 > 11.907261)
                                @ 11  java.lang.invoke.Invokers.checkExactType(MethodHandle, MethodType):void (17 bytes)   inline method (bytecode parsing)
                                  @ 1  java.lang.invoke.MethodHandle.type():MethodType (5 bytes)   inline accessor method (bytecode parsing)
                                @ 15  java.lang.invoke.Invokers.checkCustomized(MethodHandle):void (23 bytes)   inline method (bytecode parsing)
                              @ 41  java.lang.invoke.Invokers$Holder.invokeExact_MT(Object, Object, Object):Object (23 bytes)   inline method (bytecode parsing)
                                @ 10  java.lang.invoke.Invokers.checkExactType(MethodHandle, MethodType):void (17 bytes)   inline method (bytecode parsing)
                                  @ 1  java.lang.invoke.MethodHandle.type():MethodType (5 bytes)   inline accessor method (bytecode parsing)
                                @ 14  java.lang.invoke.Invokers.checkCustomized(MethodHandle):void (23 bytes)   inline method (bytecode parsing)
                                    @ 1  jdk.internal.reflect.DirectMethodHandleAccessor.isStatic():boolean (20 bytes)   not inlining relevance-based (relevance=0.000710, probability=0.000355, bonus=1.000000, nodes=10 > 0.213038)
                            @ 20  java.lang.IllegalArgumentException.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  java.lang.RuntimeException.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                                @ 2  java.lang.Exception.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                                    @ 9  jdk.internal.reflect.DirectMethodHandleAccessor.checkReceiver(Object):void (25 bytes)   trivial (relevance=0.000355, probability=0.000177, bonus=1.000000, nodes=5)
                            @ 24  java.lang.StringBuilder.<init>():void (7 bytes)   inline method (bytecode parsing)
                            @ 29  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 33  java.lang.StringBuilder.append(int):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 38  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 42  java.lang.StringBuilder.append(int):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 45  java.lang.StringBuilder.toString():String (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.String.<init>(StringBuilder):void (7 bytes)   inline method (bytecode parsing)
                            @ 48  java.lang.IllegalArgumentException.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  java.lang.RuntimeException.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                                @ 2  java.lang.Exception.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                                    @ 17  jdk.internal.reflect.DirectMethodHandleAccessor.checkArgumentCount(int, Object[]):void (53 bytes)   not inlining relevance-based (relevance=0.003414, probability=0.000355, bonus=1.000000, nodes=49 > 1.024245)
                                  @ 19  java.lang.invoke.Invokers.maybeCustomize(MethodHandle):void (5 bytes)   not inlining it is marked non-inlinable
                                  @ 19  java.lang.invoke.Invokers.maybeCustomize(MethodHandle):void (5 bytes)   not inlining it is marked non-inlinable
                                  @ 102  jdk.internal.reflect.DirectMethodHandleAccessor.invoke(Object, Object[]):Object (92 bytes)   forced inlining
                            @ 4  java.util.Objects.checkFromIndexSize(int, int, int):int (8 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.Class.getEnumConstantsShared():Object[] (71 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=242 <= 300.000000)
                              @ 4  jdk.internal.util.Preconditions.checkFromIndexSize(int, int, int, BiFunction):int (25 bytes)   relevance-based (relevance=1.000010, probability=1.000000, bonus=1.000000, nodes=15 <= 300.000000)
                              @ 4  java.lang.System$2.getEnumConstantsShared(Class):Enum[] (8 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=252 <= 300.000000)
                                @ 22  jdk.internal.util.ArraysSupport.newLength(int, int, int):int (27 bytes)   not inlining relevance-based (relevance=0.039691, probability=0.038176, bonus=1.000000, nodes=16 > 11.907261)
                                @ 25  java.util.Arrays.copyOf(byte[], int):byte[] (33 bytes)   not inlining relevance-based (relevance=0.039691, probability=0.038176, bonus=1.000000, nodes=29 > 11.907261)
                              @ 15  java.io.ByteArrayOutputStream.ensureCapacity(int):void (32 bytes)   relevance-based (relevance=1.000010, probability=1.000000, bonus=1.000000, nodes=25 <= 300.000000)
                            @ 1  java.util.AbstractSet.<init>():void (5 bytes)   inline method (bytecode parsing)
                              @ 1  java.util.AbstractCollection.<init>():void (5 bytes)   inline method (bytecode parsing)
                                @ 3  java.util.EnumSet.<init>(Class, Enum[]):void (15 bytes)   relevance-based (relevance=1.000000, probability=0.999432, bonus=1.000000, nodes=11 <= 300.000000)
                              @ 49  java.util.RegularEnumSet.<init>(Class, Enum[]):void (12 bytes)   relevance-based (relevance=1.000142, probability=0.999432, bonus=1.000000, nodes=15 <= 300.000000)
                            @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.verifyOop(Object):Object (19 bytes)   inline method (bytecode parsing)
                            @ 12  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.loadWordFromObject(Object, int):Word (34 bytes)   inline method (bytecode parsing)
                              @ 18  jdk.graal.compiler.replacements.ReplacementsUtil.staticAssert(boolean, String):void (12 bytes)   inline method (bytecode parsing)
                              @ 24  org.graalvm.word.LocationIdentity.any():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                            @ 23  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                            @ 24  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.registerAsWord(Register):Word (7 bytes)   inline method (bytecode parsing)
                            @ 37  jdk.graal.compiler.nodes.PiNode.piCastNonNull(Object, GuardingNode):Object (9 bytes)   inline method (bytecode parsing)
                            @ 37  jdk.graal.compiler.hotspot.replacements.MonitorSnippets.trace(boolean, String, WordBase):void (15 bytes)   inline method (bytecode parsing)
                            @ 46  jdk.graal.compiler.hotspot.replacements.MonitorSnippets.trace(boolean, String, WordBase):void (15 bytes)   inline method (bytecode parsing)
                            @ 72  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                            @ 55  jdk.graal.compiler.hotspot.replacements.MonitorSnippets.trace(boolean, String, WordBase):void (15 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                            @ 58  jdk.graal.compiler.hotspot.replacements.MonitorSnippets.incCounter():void (34 bytes)   inline method (bytecode parsing)
                            @ 83  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                            @ 122  jdk.graal.compiler.hotspot.replacements.MonitorSnippets.tryFastPathLocking(Object, Register, boolean, MonitorSnippets$Counters, Word, Word, Word):boolean (48 bytes)   inline method (bytecode parsing)
                              @ 42  jdk.graal.compiler.hotspot.replacements.MonitorSnippets.tryStackLocking(Object, Word, Word, Word, boolean, MonitorSnippets$Counters, Register):boolean (270 bytes)   inline method (bytecode parsing)
                                @ 47  jdk.graal.compiler.hotspot.replacements.MonitorSnippets.tryEnterInflated(Object, Word, Word, boolean, MonitorSnippets$Counters):boolean (199 bytes)   inline method (bytecode parsing)
                                  @ 77  jdk.graal.compiler.hotspot.replacements.MonitorSnippets.traceObject(boolean, String, Object, boolean):void (46 bytes)   inline method (bytecode parsing)
                                  @ 85  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                    @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                                  @ 95  jdk.graal.compiler.hotspot.replacements.MonitorSnippets.traceObject(boolean, String, Object, boolean):void (46 bytes)   inline method (bytecode parsing)
                                  @ 103  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                    @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                                  @ 168  jdk.graal.compiler.hotspot.replacements.MonitorSnippets.traceObject(boolean, String, Object, boolean):void (46 bytes)   inline method (bytecode parsing)
                                  @ 176  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                    @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                                  @ 186  jdk.graal.compiler.hotspot.replacements.MonitorSnippets.traceObject(boolean, String, Object, boolean):void (46 bytes)   inline method (bytecode parsing)
                                  @ 194  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                    @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                                @ 75  jdk.graal.compiler.hotspot.replacements.MonitorSnippets.trace(boolean, String, WordBase):void (15 bytes)   inline method (bytecode parsing)
                                @ 139  jdk.graal.compiler.hotspot.replacements.MonitorSnippets.traceObject(boolean, String, Object, boolean):void (46 bytes)   inline method (bytecode parsing)
                                @ 147  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                  @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                                @ 158  jdk.graal.compiler.hotspot.replacements.MonitorSnippets.trace(boolean, String, WordBase):void (15 bytes)   inline method (bytecode parsing)
                                @ 176  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.registerAsWord(Register):Word (7 bytes)   inline method (bytecode parsing)
                                @ 237  jdk.graal.compiler.hotspot.replacements.MonitorSnippets.traceObject(boolean, String, Object, boolean):void (46 bytes)   inline method (bytecode parsing)
                                @ 245  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                  @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                                @ 257  jdk.graal.compiler.hotspot.replacements.MonitorSnippets.traceObject(boolean, String, Object, boolean):void (46 bytes)   inline method (bytecode parsing)
                                @ 265  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                  @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                            @ 130  jdk.graal.compiler.hotspot.replacements.MonitorSnippets.incrementHeldMonitorCount(Word):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  jdk.graal.compiler.hotspot.replacements.MonitorSnippets.updateHeldMonitorCount(Word, int):void (36 bytes)   inline method (bytecode parsing)
                            @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.verifyOop(Object):Object (19 bytes)   inline method (bytecode parsing)
                            @ 6  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.registerAsWord(Register):Word (7 bytes)   inline method (bytecode parsing)
                            @ 43  jdk.graal.compiler.hotspot.replacements.MonitorSnippets.trace(boolean, String, WordBase):void (15 bytes)   inline method (bytecode parsing)
                            @ 51  jdk.graal.compiler.hotspot.replacements.MonitorSnippets.trace(boolean, String, WordBase):void (15 bytes)   inline method (bytecode parsing)
                            @ 60  jdk.graal.compiler.hotspot.replacements.MonitorSnippets.trace(boolean, String, WordBase):void (15 bytes)   inline method (bytecode parsing)
                            @ 73  jdk.graal.compiler.hotspot.replacements.MonitorSnippets.tryFastPathUnlocking(Object, boolean, MonitorSnippets$Counters, Word, Word, Word):boolean (40 bytes)   inline method (bytecode parsing)
                              @ 34  jdk.graal.compiler.hotspot.replacements.MonitorSnippets.tryStackUnlocking(Object, Word, Word, Word, boolean, MonitorSnippets$Counters):boolean (147 bytes)   inline method (bytecode parsing)
                                @ 21  jdk.graal.compiler.hotspot.replacements.MonitorSnippets.traceObject(boolean, String, Object, boolean):void (46 bytes)   inline method (bytecode parsing)
                                @ 29  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                  @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                                @ 41  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.loadWordFromObject(Object, int):Word (34 bytes)   inline method (bytecode parsing)
                                  @ 18  jdk.graal.compiler.replacements.ReplacementsUtil.staticAssert(boolean, String):void (12 bytes)   inline method (bytecode parsing)
                                  @ 24  org.graalvm.word.LocationIdentity.any():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                                @ 76  jdk.graal.compiler.hotspot.replacements.MonitorSnippets.tryExitInflated(Object, Word, boolean, MonitorSnippets$Counters):boolean (369 bytes)   inline method (bytecode parsing)
                                  @ 7  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.loadWordFromObject(Object, int):Word (34 bytes)   inline method (bytecode parsing)
                                    @ 18  jdk.graal.compiler.replacements.ReplacementsUtil.staticAssert(boolean, String):void (12 bytes)   inline method (bytecode parsing)
                                    @ 24  org.graalvm.word.LocationIdentity.any():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                                  @ 159  jdk.graal.compiler.hotspot.replacements.MonitorSnippets.traceObject(boolean, String, Object, boolean):void (46 bytes)   inline method (bytecode parsing)
                                  @ 166  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                    @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                                  @ 253  jdk.graal.compiler.hotspot.replacements.MonitorSnippets.traceObject(boolean, String, Object, boolean):void (46 bytes)   inline method (bytecode parsing)
                                  @ 260  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                    @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                                  @ 302  jdk.graal.compiler.hotspot.replacements.MonitorSnippets.traceObject(boolean, String, Object, boolean):void (46 bytes)   inline method (bytecode parsing)
                                  @ 309  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                    @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                                  @ 357  jdk.graal.compiler.hotspot.replacements.MonitorSnippets.traceObject(boolean, String, Object, boolean):void (46 bytes)   inline method (bytecode parsing)
                                  @ 364  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                    @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                                  @ 339  jdk.graal.compiler.hotspot.replacements.MonitorSnippets.traceObject(boolean, String, Object, boolean):void (46 bytes)   inline method (bytecode parsing)
                                  @ 346  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                    @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                                @ 114  jdk.graal.compiler.hotspot.replacements.MonitorSnippets.traceObject(boolean, String, Object, boolean):void (46 bytes)   inline method (bytecode parsing)
                                @ 122  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                  @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                                @ 134  jdk.graal.compiler.hotspot.replacements.MonitorSnippets.traceObject(boolean, String, Object, boolean):void (46 bytes)   inline method (bytecode parsing)
                                @ 142  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                  @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                            @ 81  jdk.graal.compiler.hotspot.replacements.MonitorSnippets.decrementHeldMonitorCount(Word):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  jdk.graal.compiler.hotspot.replacements.MonitorSnippets.updateHeldMonitorCount(Word, int):void (36 bytes)   inline method (bytecode parsing)
                            @ 99  jdk.graal.compiler.hotspot.replacements.MonitorSnippets.decCounter():void (34 bytes)   inline method (bytecode parsing)
                            @ 497  java.lang.String.<init>(char[], int, int):void (14 bytes)   inline method (bytecode parsing)
                              @ 7  java.lang.String.rangeCheck(char[], int, int):Void (10 bytes)   inline method (bytecode parsing)
                                @ 4  java.lang.String.checkBoundsOffCount(int, int, int):int (10 bytes)   inline method (bytecode parsing)
                                  @ 6  jdk.internal.util.Preconditions.checkFromIndexSize(int, int, int, BiFunction):int (25 bytes)   inline method (bytecode parsing)
                            @ 15  jdk.internal.util.ByteArray.getUnsignedShort(byte[], int):int (12 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.VarHandleGuards.guard_LI_I(VarHandle, Object, int, VarHandle$AccessDescriptor):int (78 bytes)   inline method (bytecode parsing)
                                @ 2  java.lang.invoke.VarHandle.checkAccessModeThenIsDirect(VarHandle$AccessDescriptor):boolean (29 bytes)   inline method (bytecode parsing)
                                @ 42  java.lang.invoke.VarForm.getMemberName(int):MemberName (31 bytes)   inline method (bytecode parsing)
                                @ 45  java.lang.invoke.VarHandleByteArrayAsShorts$ArrayHandle.get(VarHandle, Object, int):short (36 bytes)   inline method (bytecode parsing)
                                  @ 19  java.lang.invoke.VarHandleByteArrayAsShorts$ArrayHandle.index(byte[], int):int (12 bytes)   inline method (bytecode parsing)
                                  @ 32  jdk.internal.misc.Unsafe.getShortUnaligned(Object, long, boolean):short (12 bytes)   inline method (bytecode parsing)
                                    @ 8  jdk.internal.misc.Unsafe.convEndian(boolean, short):short (16 bytes)   inline method (bytecode parsing)
                              @ 8  java.lang.Short.toUnsignedInt(short):int (5 bytes)   inline method (bytecode parsing)
                            @ 4  java.util.Objects.checkFromIndexSize(int, int, int):int (8 bytes)   inline method (bytecode parsing)
                                  @ 4  jdk.internal.util.Preconditions.checkFromIndexSize(int, int, int, BiFunction):int (25 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=9)
                            @ 5  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.clearPendingException(Word):Object (30 bytes)   inline method (bytecode parsing)
                            @ 4  java.util.Objects.checkFromIndexSize(int, int, int):int (8 bytes)   inline method (bytecode parsing)
                            @ 16  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.getPendingException(Word):Object (14 bytes)   inline method (bytecode parsing)
                            @ 27  jdk.graal.compiler.hotspot.stubs.ForeignCallSnippets.getAndClearObjectResult(Word):Object (30 bytes)   inline method (bytecode parsing)
                            @ 11  jdk.internal.misc.InternalLock.lock():void (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.util.concurrent.locks.ReentrantLock.lock():void (8 bytes)   inline method (bytecode parsing)
                            @ 27  jdk.internal.misc.InternalLock.unlock():void (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.util.concurrent.locks.ReentrantLock.unlock():void (10 bytes)   inline method (bytecode parsing)
                                @ 5  java.util.concurrent.locks.AbstractQueuedSynchronizer.release(int):boolean (19 bytes)   inline method (bytecode parsing)
                            @ 9  java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(int):void (20 bytes)   inline method (bytecode parsing)
                            @ 7  java.util.concurrent.locks.AbstractQueuedSynchronizer.compareAndSetState(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 15  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                            @ 21  java.util.concurrent.locks.AbstractOwnableSynchronizer.getExclusiveOwnerThread():Thread (5 bytes)   inline accessor method (bytecode parsing)
                            @ 29  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 51  java.util.concurrent.locks.AbstractQueuedSynchronizer.setState(int):void (6 bytes)   inline method (bytecode parsing)
                                      @ 1  java.util.concurrent.locks.ReentrantLock$NonfairSync.initialTryLock():boolean (58 bytes)   relevance-based (relevance=0.177227, probability=0.135173, bonus=1.000000, nodes=40 <= 53.168206)
                                    @ 4  java.util.concurrent.locks.ReentrantLock$Sync.lock():void (13 bytes)   not inlining relevance-based (relevance=0.176424, probability=0.135173, bonus=1.000000, nodes=57 > 52.927101)
                                    @ 18  java.io.BufferedInputStream.implRead(byte[], int, int):int (112 bytes)   not inlining relevance-based (relevance=0.176424, probability=0.135173, bonus=1.000000, nodes=57 > 52.927101)
                            @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 8  java.util.concurrent.locks.AbstractOwnableSynchronizer.getExclusiveOwnerThread():Thread (5 bytes)   inline accessor method (bytecode parsing)
                            @ 41  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                            @ 46  java.util.concurrent.locks.AbstractQueuedSynchronizer.setState(int):void (6 bytes)   inline method (bytecode parsing)
                                    @ 2  java.util.concurrent.locks.ReentrantLock$Sync.tryRelease(int):boolean (51 bytes)   relevance-based (relevance=0.176424, probability=0.135173, bonus=1.000000, nodes=37 <= 52.927101)
                            @ 22  java.util.concurrent.locks.AbstractQueuedSynchronizer$Node.getAndUnsetStatus(int):int (14 bytes)   inline method (bytecode parsing)
                              @ 10  jdk.internal.misc.Unsafe.getAndBitwiseAndInt(Object, long, int):int (27 bytes)   inline method (bytecode parsing)
                                    @ 12  java.util.concurrent.locks.AbstractQueuedSynchronizer.signalNext(AbstractQueuedSynchronizer$Node):void (34 bytes)   not inlining relevance-based (relevance=0.156738, probability=0.120080, bonus=1.000000, nodes=56 > 47.021545)
                            @ 6  java.util.ArrayList$ListItr.<init>(ArrayList, int):void (16 bytes)   inline method (bytecode parsing)
                                    @ 4  jdk.internal.util.Preconditions.checkFromIndexSize(int, int, int, BiFunction):int (25 bytes)   relevance-based (relevance=0.983015, probability=0.847832, bonus=1.000000, nodes=15 <= 294.904612)
                              @ 7  java.util.ArrayList$Itr.<init>(ArrayList):void (26 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=15 <= 300.000000)
              s                   @ 30  java.io.ByteArrayInputStream.read(byte[], int, int):int (73 bytes)   relevance-based (relevance=0.983006, probability=0.983006, bonus=1.000000, nodes=138 <= 294.901663)
                                @ 7  java.io.DataInputStream.readFully(byte[], int, int):void (59 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=164 <= 300.000000)
                              @ 1  java.io.DataInputStream.readUnsignedShort():int (19 bytes)   relevance-based (relevance=1.011777, probability=1.000000, bonus=1.000000, nodes=179 <= 300.000000)
                            @ 4  java.util.Objects.checkFromIndexSize(int, int, int):int (8 bytes)   inline method (bytecode parsing)
                                @ 4  jdk.internal.util.Preconditions.checkFromIndexSize(int, int, int, BiFunction):int (25 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=9)
                            @ 4  java.util.Objects.checkFromIndexSize(int, int, int):int (8 bytes)   inline method (bytecode parsing)
                            @ 11  jdk.internal.misc.InternalLock.lock():void (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.util.concurrent.locks.ReentrantLock.lock():void (8 bytes)   inline method (bytecode parsing)
                            @ 27  jdk.internal.misc.InternalLock.unlock():void (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.util.concurrent.locks.ReentrantLock.unlock():void (10 bytes)   inline method (bytecode parsing)
                                @ 5  java.util.concurrent.locks.AbstractQueuedSynchronizer.release(int):boolean (19 bytes)   inline method (bytecode parsing)
                            @ 9  java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(int):void (20 bytes)   inline method (bytecode parsing)
                            @ 58  java.util.Formatter$Flags.contains(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 7  java.util.concurrent.locks.AbstractQueuedSynchronizer.compareAndSetState(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                              @ 89  java.lang.String.toString():String (2 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=4)
                            @ 15  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                            @ 34  java.util.Formatter$Flags.contains(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 21  java.util.concurrent.locks.AbstractOwnableSynchronizer.getExclusiveOwnerThread():Thread (5 bytes)   inline accessor method (bytecode parsing)
                            @ 29  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                              @ 93  java.util.Formatter$FormatSpecifier.print(Formatter, String, Locale):void (57 bytes)   not inlining too large previous low-level graph (low-level-nodes: 368, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=19)
                            @ 51  java.util.concurrent.locks.AbstractQueuedSynchronizer.setState(int):void (6 bytes)   inline method (bytecode parsing)
                                    @ 1  java.util.concurrent.locks.ReentrantLock$NonfairSync.initialTryLock():boolean (58 bytes)   relevance-based (relevance=0.177227, probability=0.135173, bonus=1.000000, nodes=40 <= 53.168206)
                                  @ 4  java.util.concurrent.locks.ReentrantLock$Sync.lock():void (13 bytes)   not inlining relevance-based (relevance=0.176424, probability=0.135173, bonus=1.000000, nodes=57 > 52.927101)
                                  @ 18  java.io.BufferedInputStream.implRead(byte[], int, int):int (112 bytes)   not inlining relevance-based (relevance=0.176424, probability=0.135173, bonus=1.000000, nodes=57 > 52.927101)
                            @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 8  java.util.concurrent.locks.AbstractOwnableSynchronizer.getExclusiveOwnerThread():Thread (5 bytes)   inline accessor method (bytecode parsing)
                            @ 41  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                            @ 46  java.util.concurrent.locks.AbstractQueuedSynchronizer.setState(int):void (6 bytes)   inline method (bytecode parsing)
                                  @ 2  java.util.concurrent.locks.ReentrantLock$Sync.tryRelease(int):boolean (51 bytes)   relevance-based (relevance=0.176424, probability=0.135173, bonus=1.000000, nodes=37 <= 52.927101)
                            @ 22  java.util.concurrent.locks.AbstractQueuedSynchronizer$Node.getAndUnsetStatus(int):int (14 bytes)   inline method (bytecode parsing)
                            @ 1  java.util.Objects.requireNonNull(Object):Object (14 bytes)   inline method (bytecode parsing)
                              @ 10  jdk.internal.misc.Unsafe.getAndBitwiseAndInt(Object, long, int):int (27 bytes)   inline method (bytecode parsing)
                            @ 43  java.util.ArrayList.elementAt(Object[], int):Object (4 bytes)   inline method (bytecode parsing)
                                  @ 12  java.util.concurrent.locks.AbstractQueuedSynchronizer.signalNext(AbstractQueuedSynchronizer$Node):void (34 bytes)   not inlining relevance-based (relevance=0.156738, probability=0.120080, bonus=1.000000, nodes=56 > 47.021545)
                                  @ 4  jdk.internal.util.Preconditions.checkFromIndexSize(int, int, int, BiFunction):int (25 bytes)   relevance-based (relevance=0.983015, probability=0.847832, bonus=1.000000, nodes=15 <= 294.904612)
              s                 @ 30  java.io.ByteArrayInputStream.read(byte[], int, int):int (73 bytes)   relevance-based (relevance=0.983006, probability=0.983006, bonus=1.000000, nodes=138 <= 294.901663)
                            @ 5  jdk.graal.compiler.lir.constopt.UseEntry.getBlock():BasicBlock (5 bytes)   inline accessor method (bytecode parsing)
                                @ 8  jdk.graal.compiler.lir.constopt.ConstantLoadOptimization$Optimization.lambda$createConstantTree$5(ConstantTree, UseEntry):void (12 bytes)   not inlining relevance-based (relevance=0.023101, probability=0.095075, bonus=1.000000, nodes=13 > 6.930434)
                              @ 87  java.io.DataInputStream.readFully(byte[], int, int):void (59 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=164 <= 300.000000)
                            @ 2  jdk.graal.compiler.lir.constopt.UseEntry.getBlock():BasicBlock (5 bytes)   inline accessor method (bytecode parsing)
                                @ 8  jdk.graal.compiler.lir.constopt.ConstantTree.lambda$new$0(UseEntry):void (16 bytes)   not inlining relevance-based (relevance=0.023101, probability=0.095075, bonus=1.000000, nodes=15 > 6.930434)
                            @ 1  jdk.graal.compiler.lir.constopt.UseEntry.getBlock():BasicBlock (5 bytes)   inline accessor method (bytecode parsing)
                            @ 10  jdk.graal.compiler.core.common.cfg.BlockMap.get(BasicBlock):Object (10 bytes)   inline method (bytecode parsing)
                              @ 5  jdk.graal.compiler.core.common.cfg.BasicBlock.getId():int (5 bytes)   inline accessor method (bytecode parsing)
                                @ 8  jdk.graal.compiler.lir.constopt.ConstantLoadOptimization$Optimization.addUsageToBlockMap(UseEntry):void (47 bytes)   not inlining relevance-based (relevance=0.023101, probability=0.095075, bonus=1.000000, nodes=42 > 6.930434)
                            @ 2  jdk.graal.compiler.lir.LIRInstruction.visitEachInput(InstructionValueConsumer):void (10 bytes)   inline method (bytecode parsing)
                            @ 7  jdk.graal.compiler.lir.LIRInstruction.visitEachAlive(InstructionValueConsumer):void (10 bytes)   inline method (bytecode parsing)
                                @ 36  java.lang.StringUTF16.compress(char[], int, int):byte[] (20 bytes)   relevance-based (relevance=1.000000, probability=0.999257, bonus=1.000000, nodes=25 <= 300.000000)
                            @ 12  jdk.graal.compiler.lir.LIRInstruction.visitEachState(InstructionValueConsumer):void (10 bytes)   inline method (bytecode parsing)
                            @ 17  jdk.graal.compiler.lir.LIRInstruction.visitEachTemp(InstructionValueConsumer):void (10 bytes)   inline method (bytecode parsing)
                              @ 10  java.lang.String.<init>(char[], int, int, Void):void (74 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=43 <= 300.000000)
                            @ 22  jdk.graal.compiler.lir.LIRInstruction.visitEachOutput(InstructionValueConsumer):void (10 bytes)   inline method (bytecode parsing)
                            @ 6  jdk.graal.compiler.core.common.Fields.getCount():int (6 bytes)   inline method (bytecode parsing)
                            @ 51  jdk.graal.compiler.lir.LIRIntrospection$Values.getDirectCount():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 61  jdk.graal.compiler.lir.LIRIntrospection$Values.getValue(Object, int):Value (10 bytes)   inline method (bytecode parsing)
                            @ 100  jdk.graal.compiler.lir.LIRIntrospection$Values.getFlags(int):EnumSet (7 bytes)   inline method (bytecode parsing)
                            @ 115  jdk.graal.compiler.lir.LIRIntrospection$Values.getValueArray(Object, int):Value[] (10 bytes)   inline method (bytecode parsing)
                            @ 172  jdk.graal.compiler.lir.LIRIntrospection$Values.getFlags(int):EnumSet (7 bytes)   inline method (bytecode parsing)
                                      @ 3  jdk.graal.compiler.core.common.Fields.getObject(Object, int):Object (40 bytes)   trivial (relevance=2.000000, probability=2.057782, bonus=1.000000, nodes=9)
                                      @ 3  jdk.graal.compiler.core.common.Fields.getObject(Object, int):Object (40 bytes)   trivial (relevance=2.000000, probability=2.057782, bonus=1.000000, nodes=9)
                                    @ 103  jdk.graal.compiler.lir.InstructionValueConsumer.visitValue(LIRInstruction, Value, LIRInstruction$OperandMode, EnumSet):void (0 bytes)   not inlining no type profile exists
                                      @ 10  jdk.graal.compiler.lir.InstructionValueConsumer.visitValue(LIRInstruction, Value, LIRInstruction$OperandMode, EnumSet):void (0 bytes)   not inlining no type profile exists
                                      @ 25  jdk.graal.compiler.lir.InstructionValueConsumer.visitValue(LIRInstruction, Value, LIRInstruction$OperandMode, EnumSet):void (0 bytes)   not inlining no type profile exists
                                      @ 86  jdk.graal.compiler.lir.amd64.AMD64AddressValue.visitEachComponent(LIRInstruction, LIRInstruction$OperandMode, InstructionValueConsumer):void (31 bytes)   relevance-based (relevance=1.000000, probability=1.028891, bonus=1.000000, nodes=16 <= 300.000000)
                                    @ 175  jdk.graal.compiler.lir.InstructionValueConsumer.visitValue(LIRInstruction, Value, LIRInstruction$OperandMode, EnumSet):void (0 bytes)   not inlining no type profile exists
                                      @ 10  jdk.graal.compiler.lir.InstructionValueConsumer.visitValue(LIRInstruction, Value, LIRInstruction$OperandMode, EnumSet):void (0 bytes)   not inlining no type profile exists
                                      @ 25  jdk.graal.compiler.lir.InstructionValueConsumer.visitValue(LIRInstruction, Value, LIRInstruction$OperandMode, EnumSet):void (0 bytes)   not inlining no type profile exists
                                      @ 158  jdk.graal.compiler.lir.amd64.AMD64AddressValue.visitEachComponent(LIRInstruction, LIRInstruction$OperandMode, InstructionValueConsumer):void (31 bytes)   relevance-based (relevance=1.000000, probability=1.028891, bonus=1.000000, nodes=16 <= 300.000000)
                                    @ 9  jdk.graal.compiler.lir.LIRIntrospection.visitEach(LIRInstruction, LIRIntrospection$Values, LIRInstruction$OperandMode, InstructionValueConsumer):void (193 bytes)   relevance-based (relevance=1.000000, probability=4.115564, bonus=1.000000, nodes=104 <= 300.000000)
                                  @ 6  jdk.graal.compiler.lir.LIRInstructionClass.visitEachUse(LIRInstruction, InstructionValueConsumer):void (13 bytes)   relevance-based (relevance=1.000000, probability=4.115564, bonus=1.000000, nodes=106 <= 300.000000)
                            @ 6  jdk.graal.compiler.core.common.Fields.getCount():int (6 bytes)   inline method (bytecode parsing)
                            @ 51  jdk.graal.compiler.lir.LIRIntrospection$Values.getDirectCount():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 61  jdk.graal.compiler.lir.LIRIntrospection$Values.getValue(Object, int):Value (10 bytes)   inline method (bytecode parsing)
                            @ 100  jdk.graal.compiler.lir.LIRIntrospection$Values.getFlags(int):EnumSet (7 bytes)   inline method (bytecode parsing)
                            @ 115  jdk.graal.compiler.lir.LIRIntrospection$Values.getValueArray(Object, int):Value[] (10 bytes)   inline method (bytecode parsing)
                            @ 172  jdk.graal.compiler.lir.LIRIntrospection$Values.getFlags(int):EnumSet (7 bytes)   inline method (bytecode parsing)
                                      @ 3  jdk.graal.compiler.core.common.Fields.getObject(Object, int):Object (40 bytes)   trivial (relevance=2.000000, probability=2.057782, bonus=1.000000, nodes=9)
                                      @ 3  jdk.graal.compiler.core.common.Fields.getObject(Object, int):Object (40 bytes)   trivial (relevance=2.000000, probability=2.057782, bonus=1.000000, nodes=9)
                                    @ 103  jdk.graal.compiler.lir.InstructionValueConsumer.visitValue(LIRInstruction, Value, LIRInstruction$OperandMode, EnumSet):void (0 bytes)   not inlining no type profile exists
                                      @ 10  jdk.graal.compiler.lir.InstructionValueConsumer.visitValue(LIRInstruction, Value, LIRInstruction$OperandMode, EnumSet):void (0 bytes)   not inlining no type profile exists
                                      @ 25  jdk.graal.compiler.lir.InstructionValueConsumer.visitValue(LIRInstruction, Value, LIRInstruction$OperandMode, EnumSet):void (0 bytes)   not inlining no type profile exists
                                      @ 86  jdk.graal.compiler.lir.amd64.AMD64AddressValue.visitEachComponent(LIRInstruction, LIRInstruction$OperandMode, InstructionValueConsumer):void (31 bytes)   relevance-based (relevance=1.000000, probability=1.028891, bonus=1.000000, nodes=16 <= 300.000000)
                                    @ 175  jdk.graal.compiler.lir.InstructionValueConsumer.visitValue(LIRInstruction, Value, LIRInstruction$OperandMode, EnumSet):void (0 bytes)   not inlining no type profile exists
                                      @ 10  jdk.graal.compiler.lir.InstructionValueConsumer.visitValue(LIRInstruction, Value, LIRInstruction$OperandMode, EnumSet):void (0 bytes)   not inlining no type profile exists
                                      @ 25  jdk.graal.compiler.lir.InstructionValueConsumer.visitValue(LIRInstruction, Value, LIRInstruction$OperandMode, EnumSet):void (0 bytes)   not inlining no type profile exists
                                      @ 158  jdk.graal.compiler.lir.amd64.AMD64AddressValue.visitEachComponent(LIRInstruction, LIRInstruction$OperandMode, InstructionValueConsumer):void (31 bytes)   relevance-based (relevance=1.000000, probability=1.028891, bonus=1.000000, nodes=16 <= 300.000000)
                                    @ 9  jdk.graal.compiler.lir.LIRIntrospection.visitEach(LIRInstruction, LIRIntrospection$Values, LIRInstruction$OperandMode, InstructionValueConsumer):void (193 bytes)   relevance-based (relevance=1.000000, probability=4.115564, bonus=1.000000, nodes=104 <= 300.000000)
                                  @ 6  jdk.graal.compiler.lir.LIRInstructionClass.visitEachAlive(LIRInstruction, InstructionValueConsumer):void (13 bytes)   relevance-based (relevance=1.000000, probability=4.115564, bonus=1.000000, nodes=106 <= 300.000000)
                            @ 7  jdk.graal.compiler.core.common.Fields.getCount():int (6 bytes)   inline method (bytecode parsing)
                                    @ 19  jdk.graal.compiler.core.common.Fields.getObject(Object, int):Object (40 bytes)   trivial (relevance=2.000000, probability=4.115564, bonus=1.000000, nodes=9)
                            @ 20  jdk.vm.ci.code.BytecodeFrame.caller():BytecodeFrame (8 bytes)   inline method (bytecode parsing)
                            @ 63  jdk.vm.ci.code.VirtualObject.getValues():JavaValue[] (5 bytes)   inline accessor method (bytecode parsing)
                            @ 73  jdk.vm.ci.code.StackLockValue.getOwner():JavaValue (5 bytes)   inline accessor method (bytecode parsing)
                            @ 106  jdk.vm.ci.code.StackLockValue.getSlot():AllocatableValue (5 bytes)   inline accessor method (bytecode parsing)
                            @ 22  jdk.vm.ci.meta.Value$IllegalValue.equals(Object):boolean (5 bytes)   inline method (bytecode parsing)
                                        @ 18  jdk.vm.ci.code.ValueUtil.isIllegalJavaValue(JavaValue):boolean (26 bytes)   trivial (relevance=16.000000, probability=2.057782, bonus=1.000000, nodes=8)
                                      @ 99  jdk.graal.compiler.lir.InstructionValueConsumer.visitValue(LIRInstruction, Value, LIRInstruction$OperandMode, EnumSet):void (0 bytes)   not inlining no type profile exists
                                      @ 48  jdk.graal.compiler.lir.InstructionValueConsumer.visitValue(LIRInstruction, Value, LIRInstruction$OperandMode, EnumSet):void (0 bytes)   not inlining no type profile exists
                                        @ 113  jdk.graal.compiler.lir.LIRValueUtil.isVirtualStackSlot(Value):boolean (23 bytes)   trivial (relevance=2.000000, probability=0.257223, bonus=1.000000, nodes=8)
                                      @ 129  jdk.graal.compiler.lir.InstructionValueConsumer.visitValue(LIRInstruction, Value, LIRInstruction$OperandMode, EnumSet):void (0 bytes)   not inlining no type profile exists
                                      @ 16  jdk.graal.compiler.lir.LIRFrameState.visitValues(LIRInstruction, JavaValue[], InstructionValueConsumer):void (167 bytes)   relevance-based (relevance=1.000000, probability=2.057782, bonus=1.000000, nodes=75 <= 300.000000)
                                      @ 1  jdk.vm.ci.code.BytecodePosition.getCaller():BytecodePosition (5 bytes)   trivial (relevance=1.000000, probability=2.057782, bonus=1.000000, nodes=5)
                            @ 73  jdk.vm.ci.code.StackLockValue.getOwner():JavaValue (5 bytes)   inline accessor method (bytecode parsing)
                            @ 106  jdk.vm.ci.code.StackLockValue.getSlot():AllocatableValue (5 bytes)   inline accessor method (bytecode parsing)
                            @ 22  jdk.vm.ci.meta.Value$IllegalValue.equals(Object):boolean (5 bytes)   inline method (bytecode parsing)
                                        @ 18  jdk.vm.ci.code.ValueUtil.isIllegalJavaValue(JavaValue):boolean (26 bytes)   trivial (relevance=8.000000, probability=1.028891, bonus=1.000000, nodes=8)
                                      @ 99  jdk.graal.compiler.lir.InstructionValueConsumer.visitValue(LIRInstruction, Value, LIRInstruction$OperandMode, EnumSet):void (0 bytes)   not inlining no type profile exists
                                      @ 48  jdk.graal.compiler.lir.InstructionValueConsumer.visitValue(LIRInstruction, Value, LIRInstruction$OperandMode, EnumSet):void (0 bytes)   not inlining no type profile exists
                                        @ 113  jdk.graal.compiler.lir.LIRValueUtil.isVirtualStackSlot(Value):boolean (23 bytes)   trivial (relevance=1.000000, probability=0.128611, bonus=1.000000, nodes=8)
                                      @ 129  jdk.graal.compiler.lir.InstructionValueConsumer.visitValue(LIRInstruction, Value, LIRInstruction$OperandMode, EnumSet):void (0 bytes)   not inlining no type profile exists
                                      @ 67  jdk.graal.compiler.lir.LIRFrameState.visitValues(LIRInstruction, JavaValue[], InstructionValueConsumer):void (167 bytes)   relevance-based (relevance=0.500000, probability=1.028891, bonus=1.000000, nodes=75 <= 150.000000)
                                      @ 72  org.graalvm.collections.EconomicMap.getEntries():MapCursor (0 bytes)   not inlining no type profile exists
                                      @ 47  jdk.graal.compiler.lir.InstructionValueConsumer.visitValue(LIRInstruction, Value, LIRInstruction$OperandMode, EnumSet):void (0 bytes)   not inlining no type profile exists
                                      @ 81  org.graalvm.collections.MapCursor.advance():boolean (10 bytes)   not inlining no type profile exists
                                      @ 91  org.graalvm.collections.MapCursor.getValue():Object (10 bytes)   not inlining no type profile exists
                                      @ 113  jdk.graal.compiler.lir.InstructionValueConsumer.visitValue(LIRInstruction, Value, LIRInstruction$OperandMode, EnumSet):void (0 bytes)   not inlining no type profile exists
                                      @ 95  jdk.graal.compiler.lir.util.IndexedValueMap.visitEach(LIRInstruction, LIRInstruction$OperandMode, EnumSet, InstructionValueConsumer):void (122 bytes)   relevance-based (relevance=0.500000, probability=1.028891, bonus=1.000000, nodes=75 <= 150.000000)
                                    @ 36  jdk.graal.compiler.lir.LIRFrameState.visitEachState(LIRInstruction, InstructionValueConsumer):void (99 bytes)   relevance-based (relevance=1.000000, probability=2.057782, bonus=1.000000, nodes=258 <= 300.000000)
                                  @ 6  jdk.graal.compiler.lir.LIRInstructionClass.visitEachState(LIRInstruction, InstructionValueConsumer):void (46 bytes)   relevance-based (relevance=1.000000, probability=4.115564, bonus=1.000000, nodes=290 <= 300.000000)
                                @ 8  jdk.graal.compiler.lir.framemap.FrameMapBuilderImpl.lambda$verifyStackSlotAllocation$1(InstructionValueConsumer, LIRInstruction):void (26 bytes)   not inlining relevance-based (relevance=1.000000, probability=4.115564, bonus=1.000000, nodes=514 > 300.000000)
                              @ 46  jdk.graal.compiler.lir.framemap.FrameMapBuilderImpl$$Lambda/0x00007f86742d6fd0.accept(Object):void (12 bytes)   relevance-based (relevance=1.000000, probability=4.400791, bonus=1.000000, nodes=48 <= 300.000000)
                              @ 7  jdk.internal.misc.Unsafe.convEndian(boolean, short):short (16 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=20 <= 300.000000)
                            @ 8  java.lang.invoke.VarHandleGuards.guard_LII_V(VarHandle, Object, int, int, VarHandle$AccessDescriptor):void (135 bytes)   inline method (bytecode parsing)
                              @ 3  java.lang.invoke.VarHandle.checkAccessModeThenIsDirect(VarHandle$AccessDescriptor):boolean (29 bytes)   inline method (bytecode parsing)
                              @ 47  java.lang.invoke.VarForm.getMemberName(int):MemberName (31 bytes)   inline method (bytecode parsing)
                              @ 50  java.lang.invoke.VarHandleByteArrayAsShorts$ArrayHandle.set(VarHandle, Object, int, short):void (39 bytes)   inline method (bytecode parsing)
                                @ 20  java.lang.invoke.VarHandleByteArrayAsShorts$ArrayHandle.index(byte[], int):int (12 bytes)   inline method (bytecode parsing)
                                @ 35  jdk.internal.misc.Unsafe.putShortUnaligned(Object, long, short, boolean):void (14 bytes)   inline method (bytecode parsing)
                                  @ 7  jdk.internal.misc.Unsafe.convEndian(boolean, short):short (16 bytes)   inline method (bytecode parsing)
                            @ 2  java.lang.ThreadLocal.getMap(Thread):ThreadLocal$ThreadLocalMap (5 bytes)   inline method (bytecode parsing)
                            @ 26  java.lang.ref.Reference.refersTo(Object):boolean (6 bytes)   inline method (bytecode parsing)
                              @ 2  java.lang.ref.Reference.refersToImpl(Object):boolean (6 bytes)   inline method (bytecode parsing)
                              @ 12  java.lang.ThreadLocal$ThreadLocalMap.getEntry(ThreadLocal):ThreadLocal$ThreadLocalMap$Entry (42 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=21 <= 300.000000)
                            @ 26  java.lang.ref.Reference.refersTo(Object):boolean (6 bytes)   inline method (bytecode parsing)
                              @ 2  java.lang.ref.Reference.refersToImpl(Object):boolean (6 bytes)   inline method (bytecode parsing)
                              @ 29  jdk.internal.math.FormattedFPDecimal.fillWithZeros(int, int):void (20 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=22 <= 300.000000)
                            @ 30  jdk.internal.math.FormattedFPDecimal.toDigit(long):char (6 bytes)   inline method (bytecode parsing)
                              @ 2  jdk.internal.math.FormattedFPDecimal.toDigit(int):char (6 bytes)   inline method (bytecode parsing)
                              @ 42  jdk.internal.math.FormattedFPDecimal.fillWithDigits(long, int, int):long (42 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=37 <= 300.000000)
                                @ 14  java.lang.Class.getComponentType():Class (14 bytes)   trivial (relevance=0.060156, probability=0.038668, bonus=1.000000, nodes=7)
                                @ 32  java.lang.Math.min(int, int):int (11 bytes)   trivial (relevance=0.272847, probability=0.175386, bonus=1.000000, nodes=7)
                              @ 21  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   relevance-based (relevance=0.212690, probability=0.175386, bonus=1.000000, nodes=40 <= 63.807081)
                            @ 7  org.graalvm.collections.EconomicMapImpl$SparseMapIterator.<init>(EconomicMapImpl):void (10 bytes)   inline method (bytecode parsing)
                              @ 5  org.graalvm.collections.EconomicMapImpl$3.<init>(EconomicMapImpl):void (11 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=12 <= 300.000000)
                            @ 19  java.lang.invoke.VarHandleByteArrayAsInts$ArrayHandle.index(byte[], int):int (12 bytes)   inline method (bytecode parsing)
                            @ 32  jdk.internal.misc.Unsafe.getIntUnaligned(Object, long, boolean):int (12 bytes)   inline method (bytecode parsing)
                              @ 8  jdk.internal.misc.Unsafe.convEndian(boolean, int):int (16 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=16 <= 300.000000)
                            @ 1  java.util.AbstractMap.<init>():void (5 bytes)   inline method (bytecode parsing)
                              @ 51  java.lang.Float.isNaN(float):boolean (12 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=7)
                              @ 91  java.util.HashMap.tableSizeFor(int):int (32 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=23 <= 300.000000)
                              @ 1  java.util.ArrayList$SubList$1.checkForComodification():void (26 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 35  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                              @ 40  java.util.PriorityQueue.grow(int):void (42 bytes)   not inlining relevance-based (relevance=0.020459, probability=0.020049, bonus=1.000000, nodes=36 > 6.137811)
                                @ 17  java.util.PriorityQueue.siftUpUsingComparator(int, Object, Object[], Comparator):void (48 bytes)   not inlining too large previous low-level graph (low-level-nodes: 895, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=42)
                              @ 46  java.util.PriorityQueue.siftUp(int, Object):void (33 bytes)   relevance-based (relevance=1.020459, probability=1.000000, bonus=1.000000, nodes=13 <= 300.000000)
                            @ 20  java.util.concurrent.ConcurrentHashMap.spread(int):int (10 bytes)   inline method (bytecode parsing)
                            @ 83  java.util.concurrent.ConcurrentHashMap$ReservationNode.<init>():void (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.util.concurrent.ConcurrentHashMap$Node.<init>(int, Object, Object):void (20 bytes)   inline method (bytecode parsing)
                              @ 4  java.lang.Boolean.hashCode(boolean):int (14 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=9)
                                @ 1  java.util.ArrayList$SubList.checkForComodification():void (23 bytes)   trivial (relevance=0.847971, probability=0.360997, bonus=1.000000, nodes=9)
                              @ 1  java.util.PriorityQueue.size():int (5 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=20 <= 300.000000)
                            @ 4  java.security.CodeSource.getLocationNoFragString():String (5 bytes)   inline accessor method (bytecode parsing)
                                @ 13  java.lang.String.hashCode():int (60 bytes)   not inlining relevance-based (relevance=0.068420, probability=0.063985, bonus=1.000000, nodes=34 > 20.526129)
                                @ 17  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=0.398774, probability=0.266171, bonus=1.000000, nodes=9)
                                @ 27  java.lang.StringLatin1.hashCode(byte[]):int (52 bytes)   relevance-based (relevance=0.398774, probability=0.266171, bonus=1.000000, nodes=22 <= 119.632312)
                              @ 17  java.lang.String.hashCode():int (60 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=71 <= 300.000000)
                            @ 7  java.util.concurrent.locks.AbstractQueuedSynchronizer.compareAndSetState(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 15  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                            @ 21  java.util.concurrent.locks.AbstractOwnableSynchronizer.getExclusiveOwnerThread():Thread (5 bytes)   inline accessor method (bytecode parsing)
                            @ 29  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 51  java.util.concurrent.locks.AbstractQueuedSynchronizer.setState(int):void (6 bytes)   inline method (bytecode parsing)
                              @ 70  java.util.concurrent.ConcurrentHashMap.tabAt(ConcurrentHashMap$Node[], int):ConcurrentHashMap$Node (22 bytes)   relevance-based (relevance=1.155861, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                            @ 23  java.security.CodeSource.getLocationNoFragString():String (5 bytes)   inline accessor method (bytecode parsing)
                            @ 30  java.security.CodeSource.getLocationNoFragString():String (5 bytes)   inline accessor method (bytecode parsing)
                            @ 13  java.lang.WeakPairMap$Pair$Weak.first():Object (5 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.ref.Reference.get():Object (5 bytes)   inline accessor method (bytecode parsing)
                            @ 17  java.lang.WeakPairMap$Pair$Weak.second():Object (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.lang.ref.Reference.get():Object (5 bytes)   inline accessor method (bytecode parsing)
                                @ 24  java.lang.WeakPairMap$Pair.equals(Object, Object, WeakPairMap$Pair):boolean (34 bytes)   not inlining relevance-based (relevance=0.000442, probability=0.000089, bonus=1.000000, nodes=29 > 0.132728)
                            @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                                @ 33  java.util.Objects.equals(Object, Object):boolean (23 bytes)   not inlining relevance-based (relevance=0.079748, probability=0.063872, bonus=1.000000, nodes=24 > 23.924296)
                            @ 8  java.util.concurrent.locks.AbstractOwnableSynchronizer.getExclusiveOwnerThread():Thread (5 bytes)   inline accessor method (bytecode parsing)
                            @ 41  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                            @ 46  java.util.concurrent.locks.AbstractQueuedSynchronizer.setState(int):void (6 bytes)   inline method (bytecode parsing)
                                @ 48  java.security.CodeSource.matchCerts(CodeSource, boolean):boolean (254 bytes)   relevance-based (relevance=0.079748, probability=0.063872, bonus=1.000000, nodes=18 <= 23.924296)
                              @ 241  java.lang.String.equals(Object):boolean (56 bytes)   relevance-based (relevance=1.000026, probability=0.865178, bonus=1.000000, nodes=131 <= 300.000000)
                              @ 101  java.util.concurrent.ConcurrentHashMap.casTabAt(ConcurrentHashMap$Node[], int, ConcurrentHashMap$Node, ConcurrentHashMap$Node):boolean (21 bytes)   not inlining relevance-based (relevance=0.001542, probability=0.001174, bonus=1.000000, nodes=14 > 0.462530)
                              @ 7  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                            @ 5  jdk.internal.loader.NativeLibraries$NativeLibraryContext$1.apply(Thread):Deque (10 bytes)   inline method (bytecode parsing)
                              @ 115  jdk.vm.ci.hotspot.JFR$CompilerPhaseEvent$$Lambda/0x00007f8674164028.apply(Object):Object (12 bytes)   not inlining relevance-based (relevance=0.001542, probability=0.001174, bonus=1.000000, nodes=52 > 0.462530)
                              @ 134  java.util.concurrent.ConcurrentHashMap$Node.<init>(int, Object, Object):void (20 bytes)   not inlining relevance-based (relevance=0.001542, probability=0.001174, bonus=1.000000, nodes=14 > 0.462530)
                                @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                              @ 13  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=8)
                              @ 145  java.util.concurrent.ConcurrentHashMap.setTabAt(ConcurrentHashMap$Node[], int, ConcurrentHashMap$Node):void (20 bytes)   not inlining relevance-based (relevance=0.001542, probability=0.001174, bonus=1.000000, nodes=13 > 0.462530)
                              @ 68  java.lang.StringLatin1.lastIndexOf(byte[], int, byte[], int, int):int (125 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=39 <= 300.000000)
                              @ 51  java.util.concurrent.ConcurrentHashMap.initTable():ConcurrentHashMap$Node[] (112 bytes)   not inlining relevance-based (relevance=0.000029, probability=0.000022, bonus=1.000000, nodes=87 > 0.008728)
                              @ 274  java.util.concurrent.ConcurrentHashMap.tabAt(ConcurrentHashMap$Node[], int):ConcurrentHashMap$Node (22 bytes)   relevance-based (relevance=0.156095, probability=0.118897, bonus=1.000000, nodes=11 <= 46.828388)
                            @ 13  java.lang.WeakPairMap$Pair$Weak.first():Object (5 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.ref.Reference.get():Object (5 bytes)   inline accessor method (bytecode parsing)
                            @ 17  java.lang.WeakPairMap$Pair$Weak.second():Object (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.lang.ref.Reference.get():Object (5 bytes)   inline accessor method (bytecode parsing)
                              @ 323  java.lang.String.equals(Object):boolean (56 bytes)   not inlining relevance-based (relevance=0.145756, probability=0.118055, bonus=1.000000, nodes=85 > 43.726735)
                              @ 356  jdk.vm.ci.hotspot.JFR$CompilerPhaseEvent$$Lambda/0x00007f8674164028.apply(Object):Object (12 bytes)   not inlining relevance-based (relevance=0.001134, probability=0.000864, bonus=1.000000, nodes=28 > 0.340225)
                              @ 398  java.util.concurrent.ConcurrentHashMap$Node.<init>(int, Object, Object):void (20 bytes)   not inlining relevance-based (relevance=0.001134, probability=0.000864, bonus=1.000000, nodes=14 > 0.340225)
                            @ 161  java.util.concurrent.ConcurrentHashMap.resizeStamp(int):int (9 bytes)   inline method (bytecode parsing)
                              @ 570  java.util.concurrent.ConcurrentHashMap.addCount(long, int):void (280 bytes)   not inlining relevance-based (relevance=0.003052, probability=0.002037, bonus=1.000000, nodes=107 > 0.915710)
                            @ 4  deltablue.Planner.<init>():void (10 bytes)   inline method (bytecode parsing)
                            @ 16  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object):Object (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.lang.invoke.LambdaForm$MH/0x00007f8674000800.invoke(Object):Object (8 bytes)   inline method (bytecode parsing)
                            @ 55  deltablue.EqualityConstraint.<init>(Variable, Variable, Strength$Sym, Planner):void (16 bytes)   inline method (bytecode parsing)
                              @ 12  deltablue.AbstractConstraint.addConstraint(Planner):void (10 bytes)   inline method (bytecode parsing)
                            @ 76  deltablue.StayConstraint.<init>(Variable, Strength$Sym, Planner):void (8 bytes)   inline method (bytecode parsing)
                              @ 4  deltablue.UnaryConstraint.<init>(Variable, Strength$Sym, Planner):void (16 bytes)   inline method (bytecode parsing)
                                @ 2  deltablue.AbstractConstraint.<init>(Strength$Sym):void (13 bytes)   inline method (bytecode parsing)
                                  @ 6  deltablue.Strength.of(Strength$Sym):Strength (11 bytes)   inline method (bytecode parsing)
                                @ 12  deltablue.AbstractConstraint.addConstraint(Planner):void (10 bytes)   inline method (bytecode parsing)
                            @ 91  deltablue.EditConstraint.<init>(Variable, Strength$Sym, Planner):void (8 bytes)   inline method (bytecode parsing)
                              @ 4  deltablue.UnaryConstraint.<init>(Variable, Strength$Sym, Planner):void (16 bytes)   inline method (bytecode parsing)
                                @ 2  deltablue.AbstractConstraint.<init>(Strength$Sym):void (13 bytes)   inline method (bytecode parsing)
                                  @ 6  deltablue.Strength.of(Strength$Sym):Strength (11 bytes)   inline method (bytecode parsing)
                                @ 12  deltablue.AbstractConstraint.addConstraint(Planner):void (10 bytes)   inline method (bytecode parsing)
                            @ 124  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 129  deltablue.Plan.execute():void (10 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object):Object (8 bytes)   inline method (bytecode parsing)
                                @ 4  java.lang.invoke.LambdaForm$MH/0x00007f8674000800.invoke(Object):Object (8 bytes)   inline method (bytecode parsing)
                            @ 135  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                              @ 6  deltablue.BinaryConstraint.<init>(Variable, Variable, Strength$Sym, Planner):void (21 bytes)   not inlining too large previous low-level graph (low-level-nodes: 394, relevance=1.000000, probability=0.999983, bonus=1.000000, nodes=17)
                            @ 5  deltablue.Variable.addConstraint(AbstractConstraint):void (9 bytes)   inline method (bytecode parsing)
                            @ 13  deltablue.Variable.addConstraint(AbstractConstraint):void (9 bytes)   inline method (bytecode parsing)
                              @ 1  deltablue.BinaryConstraint.addToGraph():void (22 bytes)   not inlining too large previous low-level graph (low-level-nodes: 617, relevance=1.000000, probability=0.999983, bonus=1.000000, nodes=25)
                                @ 1  deltablue.Planner.newMark():int (15 bytes)   relevance-based (relevance=1.000000, probability=0.999983, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f867403aa08.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                @ 8  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 690, relevance=1.000000, probability=0.999983, bonus=1.000000, nodes=72)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f867403aa08.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                @ 19  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 690, relevance=1.000000, probability=1.002813, bonus=1.000000, nodes=72)
                              @ 6  deltablue.Planner.incrementalAdd(AbstractConstraint):void (27 bytes)   relevance-based (relevance=1.000000, probability=0.999983, bonus=1.000000, nodes=28 <= 300.000000)
                              @ 6  deltablue.BinaryConstraint.<init>(Variable, Variable, Strength$Sym, Planner):void (21 bytes)   not inlining too large previous low-level graph (low-level-nodes: 394, relevance=1.000000, probability=59905.333367, bonus=1.000000, nodes=17)
                            @ 5  deltablue.Variable.addConstraint(AbstractConstraint):void (9 bytes)   inline method (bytecode parsing)
                            @ 13  deltablue.Variable.addConstraint(AbstractConstraint):void (9 bytes)   inline method (bytecode parsing)
                              @ 1  deltablue.BinaryConstraint.addToGraph():void (22 bytes)   not inlining too large previous low-level graph (low-level-nodes: 617, relevance=1.000000, probability=59905.333367, bonus=1.000000, nodes=25)
                                @ 1  deltablue.Planner.newMark():int (15 bytes)   relevance-based (relevance=1.000000, probability=59905.333367, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f867403aa08.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                @ 8  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 690, relevance=1.000000, probability=59905.333367, bonus=1.000000, nodes=72)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f867403aa08.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                @ 19  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 690, relevance=1.000000, probability=60074.873300, bonus=1.000000, nodes=72)
                              @ 6  deltablue.Planner.incrementalAdd(AbstractConstraint):void (27 bytes)   relevance-based (relevance=1.000000, probability=59905.333367, bonus=1.000000, nodes=28 <= 300.000000)
                                  @ 7  deltablue.Strength$Sym.customHash():int (5 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                                @ 1  som.Dictionary.hash(Dictionary$CustomHash):int (20 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                            @ 6  som.Dictionary.getBucketIdx(int):int (10 bytes)   inline method (bytecode parsing)
                                @ 7  som.Dictionary.getBucket(int):Dictionary$Entry (11 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                                @ 18  som.IdentityDictionary$IdEntry.match(int, Object):boolean (22 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=13 <= 300.000000)
                              @ 4  som.Dictionary.at(Dictionary$CustomHash):Object (39 bytes)   relevance-based (relevance=1.000017, probability=1.000000, bonus=1.000000, nodes=28 <= 300.000000)
                            @ 5  deltablue.Variable.addConstraint(AbstractConstraint):void (9 bytes)   inline method (bytecode parsing)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                  @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000124, probability=0.000124, bonus=1.000000, nodes=41 > 0.037287)
                                @ 5  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=35 <= 300.000000)
                              @ 1  deltablue.UnaryConstraint.addToGraph():void (14 bytes)   relevance-based (relevance=1.000017, probability=1.000000, bonus=1.000000, nodes=47 <= 300.000000)
                                @ 1  deltablue.Planner.newMark():int (15 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f867403aa08.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                @ 8  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 690, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=72)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f867403aa08.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                @ 19  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 690, relevance=1.000000, probability=1.002830, bonus=1.000000, nodes=72)
                              @ 6  deltablue.Planner.incrementalAdd(AbstractConstraint):void (27 bytes)   relevance-based (relevance=1.000017, probability=1.000000, bonus=1.000000, nodes=28 <= 300.000000)
                                  @ 7  deltablue.Strength$Sym.customHash():int (5 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                                @ 1  som.Dictionary.hash(Dictionary$CustomHash):int (20 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                            @ 6  som.Dictionary.getBucketIdx(int):int (10 bytes)   inline method (bytecode parsing)
                                @ 7  som.Dictionary.getBucket(int):Dictionary$Entry (11 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                                @ 18  som.IdentityDictionary$IdEntry.match(int, Object):boolean (22 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=13 <= 300.000000)
                              @ 4  som.Dictionary.at(Dictionary$CustomHash):Object (39 bytes)   relevance-based (relevance=1.000017, probability=1.000000, bonus=1.000000, nodes=28 <= 300.000000)
                            @ 5  deltablue.Variable.addConstraint(AbstractConstraint):void (9 bytes)   inline method (bytecode parsing)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                  @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000124, probability=0.000124, bonus=1.000000, nodes=41 > 0.037287)
                                @ 5  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=35 <= 300.000000)
                              @ 1  deltablue.UnaryConstraint.addToGraph():void (14 bytes)   relevance-based (relevance=1.000017, probability=1.000000, bonus=1.000000, nodes=47 <= 300.000000)
                                @ 1  deltablue.Planner.newMark():int (15 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f867403aa08.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                @ 8  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 690, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=72)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f867403aa08.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                @ 19  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 690, relevance=1.000000, probability=1.002830, bonus=1.000000, nodes=72)
                              @ 6  deltablue.Planner.incrementalAdd(AbstractConstraint):void (27 bytes)   relevance-based (relevance=1.000017, probability=1.000000, bonus=1.000000, nodes=28 <= 300.000000)
                            @ 5  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                  @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000124, probability=0.000124, bonus=1.000000, nodes=41 > 0.037287)
                                @ 11  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=35 <= 300.000000)
                              @ 96  som.Vector.with(Object):Vector (16 bytes)   relevance-based (relevance=1.000017, probability=1.000000, bonus=1.000000, nodes=40 <= 300.000000)
                            @ 1  java.util.Objects.requireNonNull(Object):Object (14 bytes)   inline method (bytecode parsing)
                            @ 4  som.Vector.<init>():void (7 bytes)   inline method (bytecode parsing)
                              @ 3  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 10  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.Planner$$Lambda/0x00007f8674194000.<init>(Vector):void (10 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.Planner.lambda$chainTest$7(int):Variable (8 bytes)   inline method (bytecode parsing)
                            @ 15  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 27  deltablue.Strength.absoluteWeakest():Strength (4 bytes)   inline method (bytecode parsing)
                                @ 4  deltablue.Variable.<init>():void (44 bytes)   not inlining too large previous low-level graph (low-level-nodes: 356, relevance=1.000000, probability=0.999983, bonus=1.000000, nodes=27)
                              @ 17  deltablue.Planner$$Lambda/0x00007f867400b7f8.apply(int):Object (5 bytes)   trivial (relevance=1.000000, probability=0.999983, bonus=1.000000, nodes=9)
                                    @ 1  deltablue.AbstractConstraint.isInput():boolean (2 bytes)   not inlining no type profile exists
                                    @ 8  deltablue.AbstractConstraint.isSatisfied():boolean (0 bytes)   not inlining no type profile exists
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.Planner.lambda$chainTest$7(int):Variable (8 bytes)   inline method (bytecode parsing)
                            @ 15  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 27  deltablue.Strength.absoluteWeakest():Strength (4 bytes)   inline method (bytecode parsing)
                                        @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000124, probability=0.000261, bonus=1.000000, nodes=41 > 0.037287)
                                      @ 16  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=2.101394, bonus=1.000000, nodes=35 <= 300.000000)
                                @ 4  deltablue.Variable.<init>():void (44 bytes)   not inlining too large previous low-level graph (low-level-nodes: 356, relevance=1.000000, probability=59994.500033, bonus=1.000000, nodes=27)
                              @ 17  deltablue.Planner$$Lambda/0x00007f867400b7f8.apply(int):Object (5 bytes)   trivial (relevance=1.000000, probability=59994.500033, bonus=1.000000, nodes=9)
                                    @ 8  deltablue.Planner.lambda$extractPlanFromConstraints$1(Vector, AbstractConstraint):void (20 bytes)   relevance-based (relevance=1.000000, probability=8.405575, bonus=1.000000, nodes=59 <= 300.000000)
                                  @ 20  deltablue.Planner$$Lambda/0x00007f8674194000.apply(Object):void (12 bytes)   relevance-based (relevance=1.000000, probability=8.405575, bonus=1.000000, nodes=64 <= 300.000000)
                                @ 15  som.Vector.forEach(ForEachInterface):void (32 bytes)   not inlining callee invoke probability is too high (invokeP=12.608623, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=77)
                            @ 9  deltablue.Plan.<init>():void (7 bytes)   inline method (bytecode parsing)
                              @ 3  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 39  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 67  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                                @ 20  deltablue.Planner.makePlan(Vector):Plan (86 bytes)   not inlining too large previous low-level graph (low-level-nodes: 817, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=69)
                              @ 104  deltablue.Planner.extractPlanFromConstraints(Vector):Plan (24 bytes)   relevance-based (relevance=1.000017, probability=1.000000, bonus=1.000000, nodes=27 <= 300.000000)
                                @ 1  deltablue.UnaryConstraint.isSatisfied():boolean (5 bytes)   trivial (relevance=2.000000, probability=1.000000, bonus=1.000000, nodes=5)
                            @ 21  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.Planner$$Lambda/0x00007f8674195ba8.<init>(Planner):void (10 bytes)   inline method (bytecode parsing)
                                  @ 1  deltablue.UnaryConstraint.getOutput():Variable (5 bytes)   trivial (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=5)
                                  @ 6  deltablue.UnaryConstraint.markUnsatisfied():void (6 bytes)   trivial (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=7)
                            @ 1  som.Vector.capacity():int (6 bytes)   inline method (bytecode parsing)
                            @ 31  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object, Object, Object, Object):Object (13 bytes)   inline method (bytecode parsing)
                              @ 9  java.lang.invoke.LambdaForm$DMH/0x00007f867412c000.newInvokeSpecial(Object, Object, Object, Object, Object):Object (30 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 7  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                        @ 24  som.Vector$$Lambda/0x00007f8674195098.<init>(Object, boolean[], Object[], int[]):void (26 bytes)   relevance-based (relevance=1.000000, probability=0.250000, bonus=1.000000, nodes=17 <= 300.000000)
                                            @ 17  som.Vector.lambda$remove$0(Object, boolean[], Object[], int[], Object):void (28 bytes)   relevance-based (relevance=1.000000, probability=2.101394, bonus=1.000000, nodes=26 <= 300.000000)
                                          @ 20  som.Vector$$Lambda/0x00007f8674195098.apply(Object):void (21 bytes)   relevance-based (relevance=1.000000, probability=2.101394, bonus=1.000000, nodes=28 <= 300.000000)
                                        @ 36  som.Vector.forEach(ForEachInterface):void (32 bytes)   relevance-based (relevance=1.000000, probability=0.250000, bonus=1.000000, nodes=41 <= 300.000000)
                                      @ 5  som.Vector.remove(Object):boolean (61 bytes)   relevance-based (relevance=2.000000, probability=0.250000, bonus=1.000000, nodes=73 <= 300.000000)
                                    @ 12  deltablue.Variable.removeConstraint(AbstractConstraint):void (23 bytes)   relevance-based (relevance=1.000000, probability=0.250000, bonus=1.000000, nodes=90 <= 300.000000)
                                  @ 10  deltablue.UnaryConstraint.removeFromGraph():void (21 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=100 <= 300.000000)
                            @ 4  som.Vector.<init>():void (7 bytes)   inline method (bytecode parsing)
                              @ 3  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 10  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 14  deltablue.Strength.absoluteWeakest():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 17  deltablue.Variable.setWalkStrength(Strength):void (6 bytes)   inline method (bytecode parsing)
                            @ 22  deltablue.Variable.setStay(boolean):void (6 bytes)   inline method (bytecode parsing)
                            @ 48  deltablue.Variable.getConstraints():Vector (5 bytes)   inline accessor method (bytecode parsing)
                            @ 52  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.Planner$$Lambda/0x00007f86741952b8.<init>(Vector):void (10 bytes)   inline method (bytecode parsing)
                            @ 64  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.Planner$$Lambda/0x00007f86741954d8.<init>(Vector):void (10 bytes)   inline method (bytecode parsing)
                            @ 76  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object):Object (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.lang.invoke.LambdaForm$MH/0x00007f8674000800.invoke(Object):Object (8 bytes)   inline method (bytecode parsing)
                            @ 5  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                        @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000124, probability=0.000062, bonus=1.000000, nodes=41 > 0.037287)
                                      @ 11  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=35 <= 300.000000)
                                    @ 26  som.Vector.with(Object):Vector (16 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=40 <= 300.000000)
                                    @ 31  som.Vector.isEmpty():boolean (17 bytes)   relevance-based (relevance=1.000035, probability=14363.447368, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 1  som.Vector.size():int (10 bytes)   inline method (bytecode parsing)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                            @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.125000, bonus=1.000000, nodes=13 <= 300.000000)
                                          @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.125000, bonus=1.000000, nodes=24 <= 300.000000)
                                        @ 45  deltablue.Planner$$Lambda/0x00007f8674195918.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.125000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                            @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.031250, bonus=1.000000, nodes=13 <= 300.000000)
                                          @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.031250, bonus=1.000000, nodes=24 <= 300.000000)
                                        @ 101  deltablue.Planner$$Lambda/0x00007f8674195918.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.031250, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                            @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.031250, bonus=1.000000, nodes=13 <= 300.000000)
                                          @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.031250, bonus=1.000000, nodes=24 <= 300.000000)
                                        @ 114  deltablue.Planner$$Lambda/0x00007f8674195918.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.031250, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                            @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.005208, bonus=1.000000, nodes=13 <= 300.000000)
                                          @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.005208, bonus=1.000000, nodes=24 <= 300.000000)
                                        @ 184  deltablue.Planner$$Lambda/0x00007f8674195918.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.005208, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                            @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.005208, bonus=1.000000, nodes=13 <= 300.000000)
                                          @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.005208, bonus=1.000000, nodes=24 <= 300.000000)
                                        @ 218  deltablue.Planner$$Lambda/0x00007f8674195918.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.005208, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 5  java.lang.String.<init>(StringBuilder):void (7 bytes)   inline method (bytecode parsing)
                            @ 5  java.lang.AbstractStringBuilder.getValue():byte[] (5 bytes)   inline accessor method (bytecode parsing)
                            @ 1  java.lang.AbstractStringBuilder.length():int (5 bytes)   inline accessor method (bytecode parsing)
                                @ 10  java.lang.StringBuilder.length():int (5 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                                @ 16  java.lang.AbstractStringBuilder.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=9)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.001953, bonus=1.000000, nodes=13 <= 300.000000)
                            @ 13  java.util.Arrays.copyOfRangeByte(byte[], int, int):byte[] (33 bytes)   inline method (bytecode parsing)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.001953, bonus=1.000000, nodes=24 <= 300.000000)
                              @ 2  java.util.Arrays.checkLength(int, int):void (38 bytes)   inline method (bytecode parsing)
                                          @ 45  deltablue.Planner$$Lambda/0x00007f8674195918.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.001953, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 24  java.lang.Math.min(int, int):int (11 bytes)   trivial (relevance=1.000010, probability=0.788417, bonus=1.000000, nodes=7)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                                @ 32  java.util.Arrays.copyOfRange(byte[], int, int):byte[] (25 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=33 <= 300.000000)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                              @ 3  java.lang.String.<init>(AbstractStringBuilder, Void):void (99 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=48 <= 300.000000)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000488, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000488, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 101  deltablue.Planner$$Lambda/0x00007f8674195918.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000488, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000488, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000488, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 114  deltablue.Planner$$Lambda/0x00007f8674195918.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000488, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000081, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000081, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 184  deltablue.Planner$$Lambda/0x00007f8674195918.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000081, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000081, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000081, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 218  deltablue.Planner$$Lambda/0x00007f8674195918.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000081, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000031, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000031, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 45  deltablue.Planner$$Lambda/0x00007f8674195918.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000031, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000008, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000008, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 101  deltablue.Planner$$Lambda/0x00007f8674195918.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000008, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 22  java.util.concurrent.locks.AbstractQueuedSynchronizer$Node.getAndUnsetStatus(int):int (14 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                              @ 10  jdk.internal.misc.Unsafe.getAndBitwiseAndInt(Object, long, int):int (27 bytes)   inline method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000008, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000008, bonus=1.000000, nodes=24 <= 300.000000)
                            @ 5  java.lang.Thread.isVirtual():boolean (5 bytes)   inline method (bytecode parsing)
                                            @ 114  deltablue.Planner$$Lambda/0x00007f8674195918.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000008, bonus=1.000000, nodes=30 <= 300.000000)
                              @ 30  java.util.concurrent.locks.LockSupport.unpark(Thread):void (26 bytes)   not inlining relevance-based (relevance=0.006460, probability=0.004707, bonus=1.000000, nodes=23 > 1.937904)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000001, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000001, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 184  deltablue.Planner$$Lambda/0x00007f8674195918.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000001, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000001, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000001, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 218  deltablue.Planner$$Lambda/0x00007f8674195918.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000001, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                  @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                              @ 45  deltablue.Planner$$Lambda/0x00007f8674195918.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                  @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                              @ 101  deltablue.Planner$$Lambda/0x00007f8674195918.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                  @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                              @ 114  deltablue.Planner$$Lambda/0x00007f8674195918.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                 n            @ 9  java.lang.Object.hashCode():int (0 bytes)   not inlining no methods remaining after filtering less frequent methods (7 methods previously)
                              @ 23  java.util.HashMap.hash(Object):int (20 bytes)   relevance-based (relevance=1.857430, probability=0.908835, bonus=1.000000, nodes=12 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                              @ 95  java.util.HashMap$TreeNode.getTreeNode(int, Object):HashMap$TreeNode (22 bytes)   not inlining relevance-based (relevance=0.027401, probability=0.013407, bonus=1.000000, nodes=13 > 8.220407)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                  @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                              @ 184  deltablue.Planner$$Lambda/0x00007f8674195918.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                  @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                              @ 218  deltablue.Planner$$Lambda/0x00007f8674195918.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                              @ 29  java.nio.file.attribute.BasicFileAttributes.lastModifiedTime():FileTime (0 bytes)   not inlining no type profile exists
                              @ 38  java.nio.file.attribute.BasicFileAttributes.lastModifiedTime():FileTime (0 bytes)   not inlining no type profile exists
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                                @ 43  java.nio.file.attribute.FileTime.equals(Object):boolean (28 bytes)   not inlining relevance-based (relevance=0.000170, probability=0.000005, bonus=1.000000, nodes=21 > 0.050964)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                              @ 55  java.nio.file.attribute.BasicFileAttributes.fileKey():Object (0 bytes)   not inlining no type profile exists
                              @ 70  java.nio.file.attribute.BasicFileAttributes.fileKey():Object (0 bytes)   not inlining no type profile exists
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                              @ 75  java.lang.Object.equals(Object):boolean (11 bytes)   not inlining no type profile exists
                            @ 14  java.io.File.compareTo(File):int (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.io.UnixFileSystem.compare(File, File):int (12 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                                @ 1  java.io.File.getPath():String (5 bytes)   inline accessor method (bytecode parsing)
                                @ 5  java.io.File.getPath():String (5 bytes)   inline accessor method (bytecode parsing)
                                @ 87  java.io.File.equals(Object):boolean (28 bytes)   not inlining relevance-based (relevance=0.000042, probability=0.000001, bonus=1.000000, nodes=23 > 0.012741)
                            @ 17  java.lang.NullPointerException.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  java.lang.RuntimeException.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                                @ 2  java.lang.Exception.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                    @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                  @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                @ 45  deltablue.Planner$$Lambda/0x00007f8674195918.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                                      @ 4  jdk.vm.ci.hotspot.HotSpotResolvedJavaMethodImpl.getMetadataHandle():long (5 bytes)   trivial (relevance=0.259917, probability=0.000923, bonus=1.000000, nodes=5)
                                    @ 1  jdk.vm.ci.hotspot.MetaspaceHandleObject.getMetaspacePointer():long (13 bytes)   trivial (relevance=0.259917, probability=0.000923, bonus=1.000000, nodes=6)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                    @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                  @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                @ 101  deltablue.Planner$$Lambda/0x00007f8674195918.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                 n                    @ 25  java.lang.NullPointerException.getExtendedNPEMessage():String (0 bytes)   not inlining it is a non-intrinsic native method
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                 n                      @ 16  java.lang.Throwable.fillInStackTrace(int):Throwable (0 bytes)   not inlining it is a non-intrinsic native method
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
              s                         @ 37  java.lang.Throwable.fillInStackTrace():Throwable (29 bytes)   relevance-based (relevance=0.519834, probability=0.000461, bonus=1.000000, nodes=34 <= 155.950055)
                                                    @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
              s                       @ 24  java.lang.NullPointerException.fillInStackTrace():Throwable (41 bytes)   not inlining relevance-based (relevance=0.129958, probability=0.000461, bonus=1.000000, nodes=65 > 38.987514)
                                    @ 2  java.lang.Throwable.<init>(String):void (34 bytes)   relevance-based (relevance=0.129958, probability=0.000461, bonus=1.000000, nodes=18 <= 38.987514)
                                  @ 20  jdk.vm.ci.hotspot.HotSpotResolvedJavaMethodImpl.getMethodPointer():long (23 bytes)   relevance-based (relevance=0.129958, probability=0.000923, bonus=1.000000, nodes=31 <= 38.987514)
                                                  @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                @ 22  jdk.vm.ci.hotspot.HotSpotResolvedJavaMethodImpl.equals(Object):boolean (39 bytes)   not inlining relevance-based (relevance=0.129958, probability=0.003692, bonus=1.000000, nodes=56 > 38.987514)
                                                @ 114  deltablue.Planner$$Lambda/0x00007f8674195918.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                              @ 88  java.lang.Object.equals(Object):boolean (11 bytes)   not inlining no type profile exists
                              @ 63  java.lang.Long.equals(Object):boolean (30 bytes)   relevance-based (relevance=1.000000, probability=0.489297, bonus=1.000000, nodes=237 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                    @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                  @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                @ 184  deltablue.Planner$$Lambda/0x00007f8674195918.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                    @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                  @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                @ 218  deltablue.Planner$$Lambda/0x00007f8674195918.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                                @ 22  jdk.vm.ci.hotspot.HotSpotResolvedJavaMethodImpl.equals(Object):boolean (39 bytes)   not inlining relevance-based (relevance=0.001158, probability=0.000029, bonus=1.000000, nodes=28 > 0.347477)
                              @ 88  java.lang.Object.equals(Object):boolean (11 bytes)   not inlining no type profile exists
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                              @ 128  java.lang.Long.equals(Object):boolean (30 bytes)   relevance-based (relevance=0.554130, probability=0.229368, bonus=1.000000, nodes=146 <= 166.238866)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                      @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                    @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                  @ 45  deltablue.Planner$$Lambda/0x00007f8674195918.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                      @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                    @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                  @ 101  deltablue.Planner$$Lambda/0x00007f8674195918.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                      @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                    @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                  @ 114  deltablue.Planner$$Lambda/0x00007f8674195918.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                      @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                    @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                  @ 184  deltablue.Planner$$Lambda/0x00007f8674195918.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                      @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                    @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                  @ 218  deltablue.Planner$$Lambda/0x00007f8674195918.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                                                @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining it exceeds the maximum recursive inlining depth
                                                @ 269  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining it exceeds the maximum recursive inlining depth
                                                @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=202 <= 300.000000)
                                              @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=387 > 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                    @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                  @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                @ 45  deltablue.Planner$$Lambda/0x00007f8674195918.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                    @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                  @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                @ 101  deltablue.Planner$$Lambda/0x00007f8674195918.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                    @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                  @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                @ 114  deltablue.Planner$$Lambda/0x00007f8674195918.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                    @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                  @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                @ 184  deltablue.Planner$$Lambda/0x00007f8674195918.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                    @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                  @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                @ 218  deltablue.Planner$$Lambda/0x00007f8674195918.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                      @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                    @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                  @ 45  deltablue.Planner$$Lambda/0x00007f8674195918.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                      @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                    @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                  @ 101  deltablue.Planner$$Lambda/0x00007f8674195918.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                      @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                    @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                  @ 114  deltablue.Planner$$Lambda/0x00007f8674195918.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                      @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                    @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                  @ 184  deltablue.Planner$$Lambda/0x00007f8674195918.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                      @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                    @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                  @ 218  deltablue.Planner$$Lambda/0x00007f8674195918.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                                                @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining it exceeds the maximum recursive inlining depth
                                                @ 269  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining it exceeds the maximum recursive inlining depth
                                                @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=202 <= 300.000000)
                                              @ 269  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=387 > 300.000000)
                                            @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   relevance-based (relevance=1.000000, probability=0.000001, bonus=1.000000, nodes=202 <= 300.000000)
                                          @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.000061, bonus=1.000000, nodes=387 > 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 10  java.lang.StringBuilder.append(char):StringBuilder (8 bytes)   inline method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000031, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000031, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 45  deltablue.Planner$$Lambda/0x00007f8674195918.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000031, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000008, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000008, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 101  deltablue.Planner$$Lambda/0x00007f8674195918.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000008, bonus=1.000000, nodes=30 <= 300.000000)
                                      @ 3  java.lang.Math.max(int, int):int (11 bytes)   trivial (relevance=0.166032, probability=0.121875, bonus=1.000000, nodes=7)
                                    @ 29  jdk.internal.util.ArraysSupport.newLength(int, int, int):int (27 bytes)   relevance-based (relevance=0.166032, probability=0.121875, bonus=1.000000, nodes=15 <= 49.809492)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 24  java.lang.AbstractStringBuilder.newCapacity(int):int (59 bytes)   relevance-based (relevance=0.166032, probability=0.121875, bonus=1.000000, nodes=27 <= 49.809492)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000008, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000008, bonus=1.000000, nodes=24 <= 300.000000)
                                    @ 25  java.lang.Math.min(int, int):int (11 bytes)   trivial (relevance=0.166033, probability=0.121859, bonus=1.000000, nodes=7)
                                            @ 114  deltablue.Planner$$Lambda/0x00007f8674195918.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000008, bonus=1.000000, nodes=30 <= 300.000000)
                                  @ 32  java.util.Arrays.copyOf(byte[], int):byte[] (33 bytes)   relevance-based (relevance=0.166032, probability=0.121875, bonus=1.000000, nodes=28 <= 49.809492)
                                @ 7  java.lang.AbstractStringBuilder.ensureCapacityInternal(int):void (39 bytes)   relevance-based (relevance=1.000000, probability=0.855923, bonus=1.000000, nodes=72 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                                @ 11  java.lang.AbstractStringBuilder.isLatin1():boolean (19 bytes)   trivial (relevance=1.166030, probability=0.855922, bonus=1.000000, nodes=9)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000001, bonus=1.000000, nodes=13 <= 300.000000)
                                @ 18  java.lang.StringLatin1.canEncode(int):boolean (13 bytes)   trivial (relevance=1.166030, probability=0.855922, bonus=1.000000, nodes=5)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000001, bonus=1.000000, nodes=24 <= 300.000000)
                              @ 2  java.lang.AbstractStringBuilder.append(char):AbstractStringBuilder (77 bytes)   relevance-based (relevance=1.000000, probability=0.855923, bonus=1.000000, nodes=85 <= 300.000000)
                                            @ 184  deltablue.Planner$$Lambda/0x00007f8674195918.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000001, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000001, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000001, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 218  deltablue.Planner$$Lambda/0x00007f8674195918.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000001, bonus=1.000000, nodes=30 <= 300.000000)
                                      @ 3  java.lang.Math.max(int, int):int (11 bytes)   trivial (relevance=0.166032, probability=0.602155, bonus=1.000000, nodes=7)
                                    @ 29  jdk.internal.util.ArraysSupport.newLength(int, int, int):int (27 bytes)   relevance-based (relevance=0.166032, probability=0.602155, bonus=1.000000, nodes=15 <= 49.809492)
                                  @ 24  java.lang.AbstractStringBuilder.newCapacity(int):int (59 bytes)   relevance-based (relevance=0.166032, probability=0.602155, bonus=1.000000, nodes=27 <= 49.809492)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                                    @ 25  java.lang.Math.min(int, int):int (11 bytes)   trivial (relevance=0.166033, probability=0.602074, bonus=1.000000, nodes=7)
                                  @ 32  java.util.Arrays.copyOf(byte[], int):byte[] (33 bytes)   relevance-based (relevance=0.166032, probability=0.602155, bonus=1.000000, nodes=28 <= 49.809492)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                                @ 7  java.lang.AbstractStringBuilder.ensureCapacityInternal(int):void (39 bytes)   relevance-based (relevance=1.000000, probability=4.228904, bonus=1.000000, nodes=72 <= 300.000000)
                                @ 11  java.lang.AbstractStringBuilder.isLatin1():boolean (19 bytes)   trivial (relevance=1.166030, probability=4.228898, bonus=1.000000, nodes=9)
                                @ 18  java.lang.StringLatin1.canEncode(int):boolean (13 bytes)   trivial (relevance=1.166030, probability=4.228898, bonus=1.000000, nodes=5)
                              @ 2  java.lang.AbstractStringBuilder.append(char):AbstractStringBuilder (77 bytes)   relevance-based (relevance=1.000000, probability=4.228904, bonus=1.000000, nodes=85 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                  @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                              @ 45  deltablue.Planner$$Lambda/0x00007f8674195918.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                  @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                              @ 101  deltablue.Planner$$Lambda/0x00007f8674195918.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                  @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                              @ 114  deltablue.Planner$$Lambda/0x00007f8674195918.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                  @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                              @ 184  deltablue.Planner$$Lambda/0x00007f8674195918.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                  @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                              @ 218  deltablue.Planner$$Lambda/0x00007f8674195918.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                    @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                  @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                @ 45  deltablue.Planner$$Lambda/0x00007f8674195918.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                    @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                  @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                @ 101  deltablue.Planner$$Lambda/0x00007f8674195918.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                    @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                  @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                @ 114  deltablue.Planner$$Lambda/0x00007f8674195918.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                    @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                  @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                @ 184  deltablue.Planner$$Lambda/0x00007f8674195918.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                    @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                  @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                @ 218  deltablue.Planner$$Lambda/0x00007f8674195918.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                      @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                    @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                  @ 45  deltablue.Planner$$Lambda/0x00007f8674195918.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                      @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                    @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                  @ 101  deltablue.Planner$$Lambda/0x00007f8674195918.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                      @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                    @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                  @ 114  deltablue.Planner$$Lambda/0x00007f8674195918.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                      @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                    @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                  @ 184  deltablue.Planner$$Lambda/0x00007f8674195918.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                      @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                    @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                  @ 218  deltablue.Planner$$Lambda/0x00007f8674195918.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                                                @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining it exceeds the maximum recursive inlining depth
                                                @ 269  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining it exceeds the maximum recursive inlining depth
                                                @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=202 <= 300.000000)
                                              @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=387 > 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 4  som.Vector.<init>():void (7 bytes)   inline method (bytecode parsing)
                              @ 3  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 10  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 14  deltablue.Strength.absoluteWeakest():Strength (4 bytes)   inline method (bytecode parsing)
                                                    @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                            @ 17  deltablue.Variable.setWalkStrength(Strength):void (6 bytes)   inline method (bytecode parsing)
                            @ 22  deltablue.Variable.setStay(boolean):void (6 bytes)   inline method (bytecode parsing)
                                                  @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                @ 45  deltablue.Planner$$Lambda/0x00007f8674195918.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 48  deltablue.Variable.getConstraints():Vector (5 bytes)   inline accessor method (bytecode parsing)
                            @ 52  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.Planner$$Lambda/0x00007f86741952b8.<init>(Vector):void (10 bytes)   inline method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 64  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                                                    @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                                  @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                                @ 101  deltablue.Planner$$Lambda/0x00007f8674195918.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                                @ 16  deltablue.Planner$$Lambda/0x00007f86741954d8.<init>(Vector):void (10 bytes)   inline method (bytecode parsing)
                            @ 76  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object):Object (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.lang.invoke.LambdaForm$MH/0x00007f8674000800.invoke(Object):Object (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                    @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                  @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                                @ 114  deltablue.Planner$$Lambda/0x00007f8674195918.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000124, probability=0.000124, bonus=1.000000, nodes=41 > 0.037287)
                                @ 11  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=35 <= 300.000000)
                                                    @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                  @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                              @ 26  som.Vector.with(Object):Vector (16 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=40 <= 300.000000)
                                                @ 184  deltablue.Planner$$Lambda/0x00007f8674195918.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                              @ 31  som.Vector.isEmpty():boolean (17 bytes)   relevance-based (relevance=1.000037, probability=27341.800000, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 1  som.Vector.size():int (10 bytes)   inline method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                                                    @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                  @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                                                @ 218  deltablue.Planner$$Lambda/0x00007f8674195918.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                      @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.250000, bonus=1.000000, nodes=13 <= 300.000000)
                                    @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.250000, bonus=1.000000, nodes=24 <= 300.000000)
                                  @ 45  deltablue.Planner$$Lambda/0x00007f8674195918.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.250000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                      @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                                                    @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                                                  @ 45  deltablue.Planner$$Lambda/0x00007f8674195918.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                      @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.062500, bonus=1.000000, nodes=13 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                                    @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.062500, bonus=1.000000, nodes=24 <= 300.000000)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 101  deltablue.Planner$$Lambda/0x00007f8674195918.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.062500, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                      @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                    @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                                                  @ 101  deltablue.Planner$$Lambda/0x00007f8674195918.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                      @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.062500, bonus=1.000000, nodes=13 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                                    @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.062500, bonus=1.000000, nodes=24 <= 300.000000)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 114  deltablue.Planner$$Lambda/0x00007f8674195918.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.062500, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                      @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                                                    @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                                                  @ 114  deltablue.Planner$$Lambda/0x00007f8674195918.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                      @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.010417, bonus=1.000000, nodes=13 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                                    @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.010417, bonus=1.000000, nodes=24 <= 300.000000)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 184  deltablue.Planner$$Lambda/0x00007f8674195918.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.010417, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                      @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                    @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                                                  @ 184  deltablue.Planner$$Lambda/0x00007f8674195918.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                      @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.010417, bonus=1.000000, nodes=13 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                                    @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.010417, bonus=1.000000, nodes=24 <= 300.000000)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 218  deltablue.Planner$$Lambda/0x00007f8674195918.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.010417, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                      @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                                                    @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                  @ 218  deltablue.Planner$$Lambda/0x00007f8674195918.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                                                @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining it exceeds the maximum recursive inlining depth
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                                                @ 269  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining it exceeds the maximum recursive inlining depth
                                                @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=202 <= 300.000000)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                                              @ 269  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=387 > 300.000000)
                                            @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   relevance-based (relevance=1.000000, probability=0.000001, bonus=1.000000, nodes=202 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                        @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.003906, bonus=1.000000, nodes=13 <= 300.000000)
                                      @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.003906, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 269  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.000061, bonus=1.000000, nodes=387 > 300.000000)
                                        @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   relevance-based (relevance=1.000000, probability=0.003906, bonus=1.000000, nodes=202 <= 300.000000)
                                    @ 45  deltablue.Planner$$Lambda/0x00007f8674195918.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.003906, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                                      @ 19  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.250000, bonus=1.000000, nodes=387 > 300.000000)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                    @ 81  som.Vector.sort(Comparator):void (23 bytes)   relevance-based (relevance=1.000124, probability=0.500000, bonus=1.000000, nodes=22 <= 300.000000)
                                        @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000977, bonus=1.000000, nodes=13 <= 300.000000)
                                      @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000977, bonus=1.000000, nodes=24 <= 300.000000)
                                    @ 101  deltablue.Planner$$Lambda/0x00007f8674195918.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000977, bonus=1.000000, nodes=30 <= 300.000000)
                                      @ 1  som.Vector.isEmpty():boolean (17 bytes)   relevance-based (relevance=1.000000, probability=14362.947368, bonus=1.000000, nodes=10 <= 300.000000)
                                    @ 38  som.Vector.removeFirst():Object (31 bytes)   relevance-based (relevance=1.000000, probability=14362.947368, bonus=1.000000, nodes=18 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                        @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000977, bonus=1.000000, nodes=13 <= 300.000000)
                                      @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000977, bonus=1.000000, nodes=24 <= 300.000000)
                                    @ 114  deltablue.Planner$$Lambda/0x00007f8674195918.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000977, bonus=1.000000, nodes=30 <= 300.000000)
                                          @ 1  deltablue.BinaryConstraint.isSatisfied():boolean (13 bytes)   relevance-based (relevance=1.000013, probability=120728.824483, bonus=1.000000, nodes=14 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                        @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000163, bonus=1.000000, nodes=13 <= 300.000000)
                                          @ 9  som.Vector.append(Object):void (51 bytes)   not inlining relevance-based (relevance=0.000013, probability=1.510057, bonus=1.000000, nodes=35 > 0.003752)
                                        @ 8  deltablue.Planner.lambda$removePropagateFrom$4(Vector, AbstractConstraint):void (13 bytes)   relevance-based (relevance=1.000000, probability=120728.824483, bonus=1.000000, nodes=36 <= 300.000000)
                                      @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000163, bonus=1.000000, nodes=24 <= 300.000000)
                                      @ 20  deltablue.Planner$$Lambda/0x00007f86741952b8.apply(Object):void (12 bytes)   relevance-based (relevance=1.000000, probability=120728.824483, bonus=1.000000, nodes=43 <= 300.000000)
                                    @ 184  deltablue.Planner$$Lambda/0x00007f8674195918.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000163, bonus=1.000000, nodes=30 <= 300.000000)
                                    @ 57  som.Vector.forEach(ForEachInterface):void (32 bytes)   relevance-based (relevance=1.000000, probability=14362.947368, bonus=1.000000, nodes=56 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                        @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000163, bonus=1.000000, nodes=13 <= 300.000000)
                            @ 1  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 6  deltablue.Variable.getConstraints():Vector (5 bytes)   inline accessor method (bytecode parsing)
                                      @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000163, bonus=1.000000, nodes=24 <= 300.000000)
                            @ 11  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object, Object):Object (10 bytes)   inline method (bytecode parsing)
                                    @ 218  deltablue.Planner$$Lambda/0x00007f8674195918.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000163, bonus=1.000000, nodes=30 <= 300.000000)
                              @ 6  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object, Object):Object (24 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                                      @ 19  deltablue.Planner$$Lambda/0x00007f86741956f8.<init>(AbstractConstraint, ForEachInterface):void (15 bytes)   relevance-based (relevance=1.000000, probability=14362.947368, bonus=1.000000, nodes=11 <= 300.000000)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                                          @ 12  deltablue.Planner.lambda$constraintsConsuming$3(AbstractConstraint, ForEachInterface, AbstractConstraint):void (20 bytes)   not inlining too large previous low-level graph (low-level-nodes: 368, relevance=1.000000, probability=120728.824483, bonus=1.000000, nodes=26)
                                        @ 20  deltablue.Planner$$Lambda/0x00007f86741956f8.apply(Object):void (16 bytes)   relevance-based (relevance=1.000000, probability=120728.824483, bonus=1.000000, nodes=16 <= 300.000000)
                                      @ 16  som.Vector.forEach(ForEachInterface):void (32 bytes)   not inlining callee invoke probability is too high (invokeP=8.405575, relevance=1.000000, probability=14362.947368, bonus=1.000000, nodes=33)
                                    @ 69  deltablue.Planner.constraintsConsuming(Variable, ForEachInterface):void (20 bytes)   relevance-based (relevance=1.000000, probability=14362.947368, bonus=1.000000, nodes=23 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 15  deltablue.Planner.removePropagateFrom(Variable):Vector (86 bytes)   not inlining callee invoke probability is too high (invokeP=28729.414976, relevance=2.000000, probability=0.500000, bonus=1.000000, nodes=202)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000061, bonus=1.000000, nodes=13 <= 300.000000)
                            @ 8  deltablue.Planner.lambda$incrementalRemove$0(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                                        @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000061, bonus=1.000000, nodes=24 <= 300.000000)
                                      @ 45  deltablue.Planner$$Lambda/0x00007f8674195918.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000061, bonus=1.000000, nodes=30 <= 300.000000)
                                        @ 1  deltablue.Planner.newMark():int (15 bytes)   relevance-based (relevance=1.000000, probability=4.202787, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                          @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000015, bonus=1.000000, nodes=13 <= 300.000000)
                                        @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000015, bonus=1.000000, nodes=24 <= 300.000000)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                      @ 101  deltablue.Planner$$Lambda/0x00007f8674195918.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000015, bonus=1.000000, nodes=30 <= 300.000000)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f867403aa08.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000015, bonus=1.000000, nodes=13 <= 300.000000)
                                        @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000015, bonus=1.000000, nodes=24 <= 300.000000)
                                        @ 8  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 690, relevance=1.000000, probability=4.202787, bonus=1.000000, nodes=72)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                      @ 114  deltablue.Planner$$Lambda/0x00007f8674195918.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000015, bonus=1.000000, nodes=30 <= 300.000000)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f867403aa08.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                                          @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000003, bonus=1.000000, nodes=13 <= 300.000000)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                        @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000003, bonus=1.000000, nodes=24 <= 300.000000)
                                      @ 184  deltablue.Planner$$Lambda/0x00007f8674195918.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000003, bonus=1.000000, nodes=30 <= 300.000000)
                                        @ 19  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 690, relevance=1.000000, probability=4.214682, bonus=1.000000, nodes=72)
                                      @ 2  deltablue.Planner.incrementalAdd(AbstractConstraint):void (27 bytes)   relevance-based (relevance=1.000000, probability=4.202787, bonus=1.000000, nodes=28 <= 300.000000)
                                    @ 20  deltablue.Planner$$Lambda/0x00007f8674195ba8.apply(Object):void (12 bytes)   relevance-based (relevance=1.000000, probability=4.202787, bonus=1.000000, nodes=37 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 26  som.Vector.forEach(ForEachInterface):void (32 bytes)   not inlining callee invoke probability is too high (invokeP=16.834938, relevance=2.000000, probability=0.500000, bonus=1.000000, nodes=53)
                                @ 9  deltablue.Planner.incrementalRemove(AbstractConstraint):void (30 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=121 <= 300.000000)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000003, bonus=1.000000, nodes=13 <= 300.000000)
                                        @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000003, bonus=1.000000, nodes=24 <= 300.000000)
                                      @ 218  deltablue.Planner$$Lambda/0x00007f8674195918.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000003, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  som.Vector.capacity():int (6 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 31  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object, Object, Object, Object):Object (13 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                              @ 9  java.lang.invoke.LambdaForm$DMH/0x00007f867412c000.newInvokeSpecial(Object, Object, Object, Object, Object):Object (30 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 7  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                                      @ 24  som.Vector$$Lambda/0x00007f8674195098.<init>(Object, boolean[], Object[], int[]):void (26 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=17 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 17  som.Vector.lambda$remove$0(Object, boolean[], Object[], int[], Object):void (28 bytes)   relevance-based (relevance=1.000000, probability=4.202787, bonus=1.000000, nodes=26 <= 300.000000)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                            @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000001, bonus=1.000000, nodes=13 <= 300.000000)
                                        @ 20  som.Vector$$Lambda/0x00007f8674195098.apply(Object):void (21 bytes)   relevance-based (relevance=1.000000, probability=4.202787, bonus=1.000000, nodes=28 <= 300.000000)
                                          @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000001, bonus=1.000000, nodes=24 <= 300.000000)
                                      @ 36  som.Vector.forEach(ForEachInterface):void (32 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=41 <= 300.000000)
                                        @ 45  deltablue.Planner$$Lambda/0x00007f8674195918.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000001, bonus=1.000000, nodes=30 <= 300.000000)
                                    @ 5  som.Vector.remove(Object):boolean (61 bytes)   relevance-based (relevance=2.000000, probability=0.500000, bonus=1.000000, nodes=73 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 12  deltablue.Variable.removeConstraint(AbstractConstraint):void (23 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=90 <= 300.000000)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                @ 13  deltablue.UnaryConstraint.removeFromGraph():void (21 bytes)   relevance-based (relevance=4.000000, probability=1.000000, bonus=1.000000, nodes=100 <= 300.000000)
                                            @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                          @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                              @ 161  deltablue.AbstractConstraint.destroyConstraint(Planner):void (17 bytes)   relevance-based (relevance=1.000017, probability=1.000000, bonus=1.000000, nodes=224 <= 300.000000)
                                        @ 101  deltablue.Planner$$Lambda/0x00007f8674195918.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                            @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                          @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                        @ 114  deltablue.Planner$$Lambda/0x00007f8674195918.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 4  deltablue.Plan.lambda$execute$0(AbstractConstraint):void (5 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 18  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 21  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                                            @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                            @ 35  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 38  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                                          @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                        @ 184  deltablue.Planner$$Lambda/0x00007f8674195918.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 18  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 25  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 33  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 37  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 51  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 58  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 66  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 70  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                            @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                  @ 1  deltablue.EqualityConstraint.execute():void (42 bytes)   relevance-based (relevance=1.000000, probability=840.557452, bonus=1.000000, nodes=103 <= 300.000000)
                                          @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                        @ 218  deltablue.Planner$$Lambda/0x00007f8674195918.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                                @ 20  deltablue.Plan$$Lambda/0x00007f8674194c88.apply(Object):void (8 bytes)   relevance-based (relevance=1.000000, probability=840.557452, bonus=1.000000, nodes=113 <= 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                              @ 6  som.Vector.forEach(ForEachInterface):void (32 bytes)   relevance-based (relevance=1.000000, probability=100.000000, bonus=1.000000, nodes=127 <= 300.000000)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 45  deltablue.Planner$$Lambda/0x00007f8674195918.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 101  deltablue.Planner$$Lambda/0x00007f8674195918.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 114  deltablue.Planner$$Lambda/0x00007f8674195918.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 184  deltablue.Planner$$Lambda/0x00007f8674195918.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 218  deltablue.Planner$$Lambda/0x00007f8674195918.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 45  deltablue.Planner$$Lambda/0x00007f8674195918.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 101  deltablue.Planner$$Lambda/0x00007f8674195918.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 114  deltablue.Planner$$Lambda/0x00007f8674195918.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 184  deltablue.Planner$$Lambda/0x00007f8674195918.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 218  deltablue.Planner$$Lambda/0x00007f8674195918.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                                          @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining it exceeds the maximum recursive inlining depth
                                          @ 269  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining it exceeds the maximum recursive inlining depth
                                          @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=202 <= 300.000000)
                                        @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=387 > 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 45  deltablue.Planner$$Lambda/0x00007f8674195918.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 101  deltablue.Planner$$Lambda/0x00007f8674195918.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 114  deltablue.Planner$$Lambda/0x00007f8674195918.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 184  deltablue.Planner$$Lambda/0x00007f8674195918.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 218  deltablue.Planner$$Lambda/0x00007f8674195918.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 45  deltablue.Planner$$Lambda/0x00007f8674195918.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 101  deltablue.Planner$$Lambda/0x00007f8674195918.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 114  deltablue.Planner$$Lambda/0x00007f8674195918.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 184  deltablue.Planner$$Lambda/0x00007f8674195918.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 218  deltablue.Planner$$Lambda/0x00007f8674195918.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                                          @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining it exceeds the maximum recursive inlining depth
                                          @ 269  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining it exceeds the maximum recursive inlining depth
                                          @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=202 <= 300.000000)
                                        @ 269  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=387 > 300.000000)
                                      @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   relevance-based (relevance=1.000000, probability=0.000002, bonus=1.000000, nodes=202 <= 300.000000)
                                    @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.000122, bonus=1.000000, nodes=387 > 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000061, bonus=1.000000, nodes=13 <= 300.000000)
                                        @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000061, bonus=1.000000, nodes=24 <= 300.000000)
                                      @ 45  deltablue.Planner$$Lambda/0x00007f8674195918.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000061, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000015, bonus=1.000000, nodes=13 <= 300.000000)
                                        @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000015, bonus=1.000000, nodes=24 <= 300.000000)
                                      @ 101  deltablue.Planner$$Lambda/0x00007f8674195918.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000015, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000015, bonus=1.000000, nodes=13 <= 300.000000)
                                        @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000015, bonus=1.000000, nodes=24 <= 300.000000)
                                      @ 114  deltablue.Planner$$Lambda/0x00007f8674195918.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000015, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000003, bonus=1.000000, nodes=13 <= 300.000000)
                                        @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000003, bonus=1.000000, nodes=24 <= 300.000000)
                                      @ 184  deltablue.Planner$$Lambda/0x00007f8674195918.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000003, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000003, bonus=1.000000, nodes=13 <= 300.000000)
                                        @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000003, bonus=1.000000, nodes=24 <= 300.000000)
                                      @ 218  deltablue.Planner$$Lambda/0x00007f8674195918.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000003, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                            @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000001, bonus=1.000000, nodes=13 <= 300.000000)
                                          @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000001, bonus=1.000000, nodes=24 <= 300.000000)
                                        @ 45  deltablue.Planner$$Lambda/0x00007f8674195918.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000001, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                            @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                          @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                        @ 101  deltablue.Planner$$Lambda/0x00007f8674195918.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                            @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                          @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                        @ 114  deltablue.Planner$$Lambda/0x00007f8674195918.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                            @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                          @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                        @ 184  deltablue.Planner$$Lambda/0x00007f8674195918.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                            @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                          @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                        @ 218  deltablue.Planner$$Lambda/0x00007f8674195918.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 45  deltablue.Planner$$Lambda/0x00007f8674195918.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 101  deltablue.Planner$$Lambda/0x00007f8674195918.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 114  deltablue.Planner$$Lambda/0x00007f8674195918.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 184  deltablue.Planner$$Lambda/0x00007f8674195918.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 218  deltablue.Planner$$Lambda/0x00007f8674195918.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 45  deltablue.Planner$$Lambda/0x00007f8674195918.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 101  deltablue.Planner$$Lambda/0x00007f8674195918.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 114  deltablue.Planner$$Lambda/0x00007f8674195918.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 184  deltablue.Planner$$Lambda/0x00007f8674195918.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 218  deltablue.Planner$$Lambda/0x00007f8674195918.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                                          @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining it exceeds the maximum recursive inlining depth
                                          @ 269  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining it exceeds the maximum recursive inlining depth
                                          @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=202 <= 300.000000)
                                        @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=387 > 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 45  deltablue.Planner$$Lambda/0x00007f8674195918.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 101  deltablue.Planner$$Lambda/0x00007f8674195918.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 114  deltablue.Planner$$Lambda/0x00007f8674195918.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 184  deltablue.Planner$$Lambda/0x00007f8674195918.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 218  deltablue.Planner$$Lambda/0x00007f8674195918.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 45  deltablue.Planner$$Lambda/0x00007f8674195918.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 101  deltablue.Planner$$Lambda/0x00007f8674195918.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 114  deltablue.Planner$$Lambda/0x00007f8674195918.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 184  deltablue.Planner$$Lambda/0x00007f8674195918.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 218  deltablue.Planner$$Lambda/0x00007f8674195918.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                                          @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining it exceeds the maximum recursive inlining depth
                                          @ 269  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining it exceeds the maximum recursive inlining depth
                                          @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=202 <= 300.000000)
                                        @ 269  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=387 > 300.000000)
                                      @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   relevance-based (relevance=1.000000, probability=0.000002, bonus=1.000000, nodes=202 <= 300.000000)
                                    @ 269  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.000122, bonus=1.000000, nodes=387 > 300.000000)
                                  @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   relevance-based (relevance=1.000000, probability=0.007813, bonus=1.000000, nodes=202 <= 300.000000)
                                @ 19  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=387 > 300.000000)
                              @ 81  som.Vector.sort(Comparator):void (23 bytes)   relevance-based (relevance=1.000124, probability=1.000000, bonus=1.000000, nodes=22 <= 300.000000)
                                @ 1  som.Vector.isEmpty():boolean (17 bytes)   relevance-based (relevance=1.000000, probability=27340.800000, bonus=1.000000, nodes=10 <= 300.000000)
                              @ 38  som.Vector.removeFirst():Object (31 bytes)   relevance-based (relevance=1.000000, probability=27340.800000, bonus=1.000000, nodes=18 <= 300.000000)
                                    @ 1  deltablue.BinaryConstraint.isSatisfied():boolean (13 bytes)   relevance-based (relevance=1.000013, probability=229815.131933, bonus=1.000000, nodes=14 <= 300.000000)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                    @ 9  som.Vector.append(Object):void (51 bytes)   not inlining relevance-based (relevance=0.000013, probability=2.874492, bonus=1.000000, nodes=35 > 0.003752)
                                  @ 8  deltablue.Planner.lambda$removePropagateFrom$4(Vector, AbstractConstraint):void (13 bytes)   relevance-based (relevance=1.000000, probability=229815.131933, bonus=1.000000, nodes=36 <= 300.000000)
                                @ 20  deltablue.Planner$$Lambda/0x00007f86741952b8.apply(Object):void (12 bytes)   relevance-based (relevance=1.000000, probability=229815.131933, bonus=1.000000, nodes=43 <= 300.000000)
                              @ 57  som.Vector.forEach(ForEachInterface):void (32 bytes)   relevance-based (relevance=1.000000, probability=27340.800000, bonus=1.000000, nodes=56 <= 300.000000)
                            @ 1  java.util.Objects.requireNonNull(Object):Object (14 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 6  deltablue.Variable.getConstraints():Vector (5 bytes)   inline accessor method (bytecode parsing)
                            @ 11  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object, Object):Object (10 bytes)   inline method (bytecode parsing)
                              @ 6  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object, Object):Object (24 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.Planner.lambda$chainTest$7(int):Variable (8 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                            @ 15  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 27  deltablue.Strength.absoluteWeakest():Strength (4 bytes)   inline method (bytecode parsing)
                                @ 19  deltablue.Planner$$Lambda/0x00007f86741956f8.<init>(AbstractConstraint, ForEachInterface):void (15 bytes)   relevance-based (relevance=1.000000, probability=27340.800000, bonus=1.000000, nodes=11 <= 300.000000)
                                @ 4  deltablue.Variable.<init>():void (44 bytes)   not inlining too large previous low-level graph (low-level-nodes: 356, relevance=1.000000, probability=60245.166667, bonus=1.000000, nodes=27)
                              @ 17  deltablue.Planner$$Lambda/0x00007f867400b7f8.apply(int):Object (5 bytes)   trivial (relevance=1.000000, probability=60245.166667, bonus=1.000000, nodes=9)
                                    @ 12  deltablue.Planner.lambda$constraintsConsuming$3(AbstractConstraint, ForEachInterface, AbstractConstraint):void (20 bytes)   not inlining too large previous low-level graph (low-level-nodes: 368, relevance=1.000000, probability=229815.131933, bonus=1.000000, nodes=26)
                                  @ 20  deltablue.Planner$$Lambda/0x00007f86741956f8.apply(Object):void (16 bytes)   relevance-based (relevance=1.000000, probability=229815.131933, bonus=1.000000, nodes=16 <= 300.000000)
                                @ 16  som.Vector.forEach(ForEachInterface):void (32 bytes)   not inlining callee invoke probability is too high (invokeP=8.405575, relevance=1.000000, probability=27340.800000, bonus=1.000000, nodes=33)
                              @ 69  deltablue.Planner.constraintsConsuming(Variable, ForEachInterface):void (20 bytes)   relevance-based (relevance=1.000000, probability=27340.800000, bonus=1.000000, nodes=23 <= 300.000000)
                            @ 14  java.lang.Math.max(int, int):int (11 bytes)   inline method (bytecode parsing)
                            @ 1  org.graalvm.collections.EconomicMapImpl.size():int (10 bytes)   inline method (bytecode parsing)
                            @ 84  org.graalvm.collections.EconomicMapImpl.getKey(int):Object (9 bytes)   inline method (bytecode parsing)
                              @ 87  org.graalvm.collections.EconomicMapImpl.createHash():void (109 bytes)   not inlining relevance-based (relevance=0.006760, probability=0.006682, bonus=1.000000, nodes=57 > 2.028058)
                            @ 4  deltablue.Planner.<init>():void (10 bytes)   inline method (bytecode parsing)
                            @ 12  som.Vector.<init>():void (7 bytes)   inline method (bytecode parsing)
                              @ 3  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 18  deltablue.Variable.value(int):Variable (15 bytes)   inline method (bytecode parsing)
                              @ 10  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 25  deltablue.Variable.value(int):Variable (15 bytes)   inline method (bytecode parsing)
                              @ 10  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 75  deltablue.StayConstraint.<init>(Variable, Strength$Sym, Planner):void (8 bytes)   inline method (bytecode parsing)
                            @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                              @ 4  deltablue.UnaryConstraint.<init>(Variable, Strength$Sym, Planner):void (16 bytes)   inline method (bytecode parsing)
                                @ 2  deltablue.AbstractConstraint.<init>(Strength$Sym):void (13 bytes)   inline method (bytecode parsing)
                                  @ 6  deltablue.Strength.of(Strength$Sym):Strength (11 bytes)   inline method (bytecode parsing)
                                @ 12  deltablue.AbstractConstraint.addConstraint(Planner):void (10 bytes)   inline method (bytecode parsing)
                            @ 114  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                              @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=14 <= 300.000000)
                            @ 144  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 187  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 248  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 10  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 15  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 27  deltablue.Strength.absoluteWeakest():Strength (4 bytes)   inline method (bytecode parsing)
                                @ 4  deltablue.Variable.<init>():void (44 bytes)   not inlining too large previous low-level graph (low-level-nodes: 356, relevance=1.000000, probability=0.999983, bonus=1.000000, nodes=27)
                              @ 47  deltablue.Variable.value(int):Variable (15 bytes)   relevance-based (relevance=1.000000, probability=0.999983, bonus=1.000000, nodes=11 <= 300.000000)
                            @ 10  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 15  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 27  deltablue.Strength.absoluteWeakest():Strength (4 bytes)   inline method (bytecode parsing)
                                @ 4  deltablue.Variable.<init>():void (44 bytes)   not inlining too large previous low-level graph (low-level-nodes: 356, relevance=1.000000, probability=0.999983, bonus=1.000000, nodes=27)
                              @ 54  deltablue.Variable.value(int):Variable (15 bytes)   relevance-based (relevance=1.000000, probability=0.999983, bonus=1.000000, nodes=11 <= 300.000000)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000124, probability=0.000124, bonus=1.000000, nodes=41 > 0.037287)
                              @ 62  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=0.999983, bonus=1.000000, nodes=35 <= 300.000000)
                                  @ 7  deltablue.Strength$Sym.customHash():int (5 bytes)   trivial (relevance=1.000000, probability=0.999983, bonus=1.000000, nodes=5)
                                @ 1  som.Dictionary.hash(Dictionary$CustomHash):int (20 bytes)   trivial (relevance=1.000000, probability=0.999983, bonus=1.000000, nodes=5)
                            @ 6  som.Dictionary.getBucketIdx(int):int (10 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 6  deltablue.Variable.getConstraints():Vector (5 bytes)   inline accessor method (bytecode parsing)
                            @ 11  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object, Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 7  som.Dictionary.getBucket(int):Dictionary$Entry (11 bytes)   relevance-based (relevance=1.000000, probability=0.999983, bonus=1.000000, nodes=11 <= 300.000000)
                              @ 6  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object, Object):Object (24 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 18  som.IdentityDictionary$IdEntry.match(int, Object):boolean (22 bytes)   relevance-based (relevance=1.000000, probability=0.999983, bonus=1.000000, nodes=13 <= 300.000000)
                              @ 4  som.Dictionary.at(Dictionary$CustomHash):Object (39 bytes)   relevance-based (relevance=1.000124, probability=0.999983, bonus=1.000000, nodes=28 <= 300.000000)
                              @ 19  deltablue.Planner$$Lambda/0x00007f867403ac20.<init>(AbstractConstraint, Vector):void (15 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                            @ 5  deltablue.Variable.addConstraint(AbstractConstraint):void (9 bytes)   inline method (bytecode parsing)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                @ 20  deltablue.Planner$$Lambda/0x00007f867403ac20.apply(Object):void (16 bytes)   not inlining too large previous low-level graph (low-level-nodes: 351, relevance=1.000000, probability=8.405575, bonus=1.000000, nodes=16)
                              @ 16  som.Vector.forEach(ForEachInterface):void (32 bytes)   not inlining callee invoke probability is too high (invokeP=8.405575, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=24)
                                  @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000124, probability=0.000124, bonus=1.000000, nodes=41 > 0.037287)
                                @ 5  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=0.999983, bonus=1.000000, nodes=35 <= 300.000000)
                              @ 1  deltablue.UnaryConstraint.addToGraph():void (14 bytes)   relevance-based (relevance=1.000124, probability=0.999983, bonus=1.000000, nodes=47 <= 300.000000)
                                @ 1  deltablue.Planner.newMark():int (15 bytes)   relevance-based (relevance=1.000000, probability=0.999983, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f867403aa08.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                              @ 31  jdk.internal.util.ArraysSupport.mismatch(byte[], byte[], int):int (73 bytes)   relevance-based (relevance=1.000000, probability=0.840804, bonus=1.000000, nodes=48 <= 300.000000)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                @ 8  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 690, relevance=1.000000, probability=0.999983, bonus=1.000000, nodes=72)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f867403aa08.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                @ 19  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 690, relevance=1.000000, probability=1.002813, bonus=1.000000, nodes=72)
                              @ 6  deltablue.Planner.incrementalAdd(AbstractConstraint):void (27 bytes)   relevance-based (relevance=1.000124, probability=0.999983, bonus=1.000000, nodes=28 <= 300.000000)
                            @ 24  deltablue.AbstractConstraint.addConstraint(Planner):void (10 bytes)   inline method (bytecode parsing)
                              @ 94  deltablue.ScaleConstraint.<init>(Variable, Variable, Variable, Variable, Strength$Sym, Planner):void (28 bytes)   not inlining too large previous low-level graph (low-level-nodes: 1395, relevance=1.000124, probability=0.999983, bonus=1.000000, nodes=25)
                            @ 10  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 15  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 27  deltablue.Strength.absoluteWeakest():Strength (4 bytes)   inline method (bytecode parsing)
                                @ 4  deltablue.Variable.<init>():void (44 bytes)   not inlining too large previous low-level graph (low-level-nodes: 356, relevance=1.000000, probability=59998.000033, bonus=1.000000, nodes=27)
                              @ 47  deltablue.Variable.value(int):Variable (15 bytes)   relevance-based (relevance=1.000000, probability=59998.000033, bonus=1.000000, nodes=11 <= 300.000000)
                            @ 10  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 15  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 27  deltablue.Strength.absoluteWeakest():Strength (4 bytes)   inline method (bytecode parsing)
                                @ 4  deltablue.Variable.<init>():void (44 bytes)   not inlining too large previous low-level graph (low-level-nodes: 356, relevance=1.000000, probability=59998.000033, bonus=1.000000, nodes=27)
                              @ 54  deltablue.Variable.value(int):Variable (15 bytes)   relevance-based (relevance=1.000000, probability=59998.000033, bonus=1.000000, nodes=11 <= 300.000000)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000124, probability=7.456194, bonus=1.000000, nodes=41 > 0.037287)
                              @ 62  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=59998.000033, bonus=1.000000, nodes=35 <= 300.000000)
                                  @ 7  deltablue.Strength$Sym.customHash():int (5 bytes)   trivial (relevance=1.000000, probability=59998.000033, bonus=1.000000, nodes=5)
                                @ 1  som.Dictionary.hash(Dictionary$CustomHash):int (20 bytes)   trivial (relevance=1.000000, probability=59998.000033, bonus=1.000000, nodes=5)
                            @ 6  som.Dictionary.getBucketIdx(int):int (10 bytes)   inline method (bytecode parsing)
                                @ 7  som.Dictionary.getBucket(int):Dictionary$Entry (11 bytes)   relevance-based (relevance=1.000000, probability=59998.000033, bonus=1.000000, nodes=11 <= 300.000000)
                                @ 18  som.IdentityDictionary$IdEntry.match(int, Object):boolean (22 bytes)   relevance-based (relevance=1.000000, probability=59998.000033, bonus=1.000000, nodes=13 <= 300.000000)
                              @ 4  som.Dictionary.at(Dictionary$CustomHash):Object (39 bytes)   relevance-based (relevance=1.000124, probability=59998.000033, bonus=1.000000, nodes=28 <= 300.000000)
                            @ 5  deltablue.Variable.addConstraint(AbstractConstraint):void (9 bytes)   inline method (bytecode parsing)
                              @ 8  jdk.internal.misc.Unsafe.convEndian(boolean, short):short (16 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=20 <= 300.000000)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                  @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000124, probability=7.456194, bonus=1.000000, nodes=41 > 0.037287)
                                @ 5  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=59998.000033, bonus=1.000000, nodes=35 <= 300.000000)
                              @ 1  deltablue.UnaryConstraint.addToGraph():void (14 bytes)   relevance-based (relevance=1.000124, probability=59998.000033, bonus=1.000000, nodes=47 <= 300.000000)
                                @ 1  deltablue.Planner.newMark():int (15 bytes)   relevance-based (relevance=1.000000, probability=59998.000033, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f867403aa08.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                @ 8  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 690, relevance=1.000000, probability=59998.000033, bonus=1.000000, nodes=72)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f867403aa08.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 5  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                @ 19  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 690, relevance=1.000000, probability=60167.802225, bonus=1.000000, nodes=72)
                              @ 6  deltablue.Planner.incrementalAdd(AbstractConstraint):void (27 bytes)   relevance-based (relevance=1.000124, probability=59998.000033, bonus=1.000000, nodes=28 <= 300.000000)
                            @ 24  deltablue.AbstractConstraint.addConstraint(Planner):void (10 bytes)   inline method (bytecode parsing)
                                @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000124, probability=0.000124, bonus=1.000000, nodes=41 > 0.037287)
                              @ 11  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=35 <= 300.000000)
                              @ 94  deltablue.ScaleConstraint.<init>(Variable, Variable, Variable, Variable, Strength$Sym, Planner):void (28 bytes)   not inlining too large previous low-level graph (low-level-nodes: 1395, relevance=1.000124, probability=59998.000033, bonus=1.000000, nodes=25)
                            @ 9  deltablue.EditConstraint.<init>(Variable, Strength$Sym, Planner):void (8 bytes)   inline method (bytecode parsing)
                              @ 4  deltablue.UnaryConstraint.<init>(Variable, Strength$Sym, Planner):void (16 bytes)   inline method (bytecode parsing)
                                @ 2  deltablue.AbstractConstraint.<init>(Strength$Sym):void (13 bytes)   inline method (bytecode parsing)
                                  @ 6  deltablue.Strength.of(Strength$Sym):Strength (11 bytes)   inline method (bytecode parsing)
                                @ 12  deltablue.AbstractConstraint.addConstraint(Planner):void (10 bytes)   inline method (bytecode parsing)
                            @ 39  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 44  deltablue.Plan.execute():void (10 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object):Object (8 bytes)   inline method (bytecode parsing)
                                @ 4  java.lang.invoke.LambdaForm$MH/0x00007f8674000800.invoke(Object):Object (8 bytes)   inline method (bytecode parsing)
                                    @ 7  deltablue.Strength$Sym.customHash():int (5 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                                  @ 1  som.Dictionary.hash(Dictionary$CustomHash):int (20 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                            @ 6  som.Dictionary.getBucketIdx(int):int (10 bytes)   inline method (bytecode parsing)
                                  @ 7  som.Dictionary.getBucket(int):Dictionary$Entry (11 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                                  @ 18  som.IdentityDictionary$IdEntry.match(int, Object):boolean (22 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                @ 4  som.Dictionary.at(Dictionary$CustomHash):Object (39 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=28 <= 300.000000)
                            @ 5  deltablue.Variable.addConstraint(AbstractConstraint):void (9 bytes)   inline method (bytecode parsing)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                            @ 8  java.util.HashMap$EntryIterator.<init>(HashMap):void (6 bytes)   inline method (bytecode parsing)
                                    @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000124, probability=0.000124, bonus=1.000000, nodes=41 > 0.037287)
                                  @ 5  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=35 <= 300.000000)
                              @ 2  java.util.HashMap$HashIterator.<init>(HashMap):void (79 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=58 <= 300.000000)
                                @ 1  deltablue.UnaryConstraint.addToGraph():void (14 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=47 <= 300.000000)
                                  @ 1  deltablue.Planner.newMark():int (15 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f867403aa08.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 8  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 690, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=72)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f867403aa08.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 19  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 690, relevance=1.000000, probability=1.002830, bonus=1.000000, nodes=72)
                                @ 6  deltablue.Planner.incrementalAdd(AbstractConstraint):void (27 bytes)   relevance-based (relevance=1.000124, probability=1.000000, bonus=1.000000, nodes=28 <= 300.000000)
                            @ 5  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                            @ 15  java.util.HashMap$EntrySet.<init>(HashMap):void (10 bytes)   inline method (bytecode parsing)
                              @ 6  java.util.AbstractSet.<init>():void (5 bytes)   inline method (bytecode parsing)
                                @ 1  java.util.AbstractCollection.<init>():void (5 bytes)   inline method (bytecode parsing)
                                    @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000124, probability=0.000124, bonus=1.000000, nodes=41 > 0.037287)
                                  @ 11  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=35 <= 300.000000)
                                @ 14  som.Vector.with(Object):Vector (16 bytes)   relevance-based (relevance=1.000124, probability=1.000000, bonus=1.000000, nodes=40 <= 300.000000)
                            @ 4  som.Vector.<init>():void (7 bytes)   inline method (bytecode parsing)
                              @ 3  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 10  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.Planner$$Lambda/0x00007f8674194000.<init>(Vector):void (10 bytes)   inline method (bytecode parsing)
                                      @ 1  deltablue.AbstractConstraint.isInput():boolean (2 bytes)   not inlining no type profile exists
                                      @ 8  deltablue.AbstractConstraint.isSatisfied():boolean (0 bytes)   not inlining no type profile exists
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                          @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000124, probability=0.000261, bonus=1.000000, nodes=41 > 0.037287)
                                        @ 16  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=2.101394, bonus=1.000000, nodes=35 <= 300.000000)
                                      @ 8  deltablue.Planner.lambda$extractPlanFromConstraints$1(Vector, AbstractConstraint):void (20 bytes)   relevance-based (relevance=1.000000, probability=8.405575, bonus=1.000000, nodes=59 <= 300.000000)
                                    @ 20  deltablue.Planner$$Lambda/0x00007f8674194000.apply(Object):void (12 bytes)   relevance-based (relevance=1.000000, probability=8.405575, bonus=1.000000, nodes=64 <= 300.000000)
                                  @ 15  som.Vector.forEach(ForEachInterface):void (32 bytes)   not inlining callee invoke probability is too high (invokeP=12.608623, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=77)
                            @ 9  deltablue.Plan.<init>():void (7 bytes)   inline method (bytecode parsing)
                              @ 3  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 39  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 67  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                                  @ 20  deltablue.Planner.makePlan(Vector):Plan (86 bytes)   not inlining too large previous low-level graph (low-level-nodes: 817, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=69)
                                @ 22  deltablue.Planner.extractPlanFromConstraints(Vector):Plan (24 bytes)   relevance-based (relevance=1.000124, probability=1.000000, bonus=1.000000, nodes=27 <= 300.000000)
                                  @ 1  deltablue.UnaryConstraint.isSatisfied():boolean (5 bytes)   trivial (relevance=2.000000, probability=1.000000, bonus=1.000000, nodes=5)
                            @ 21  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.Planner$$Lambda/0x00007f8674195ba8.<init>(Planner):void (10 bytes)   inline method (bytecode parsing)
                                    @ 1  deltablue.UnaryConstraint.getOutput():Variable (5 bytes)   trivial (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=5)
                                    @ 6  deltablue.UnaryConstraint.markUnsatisfied():void (6 bytes)   trivial (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=7)
                              @ 25  java.util.ArrayDeque.dec(int, int):int (13 bytes)   relevance-based (relevance=1.002242, probability=1.000000, bonus=1.000000, nodes=18 <= 300.000000)
                            @ 55  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                            @ 1  som.Vector.capacity():int (6 bytes)   inline method (bytecode parsing)
                            @ 31  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object, Object, Object, Object):Object (13 bytes)   inline method (bytecode parsing)
                              @ 9  java.lang.invoke.LambdaForm$DMH/0x00007f867412c000.newInvokeSpecial(Object, Object, Object, Object, Object):Object (30 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 7  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                              @ 47  java.util.ArrayDeque.grow(int):void (165 bytes)   not inlining too large previous low-level graph (low-level-nodes: 1230, relevance=0.003273, probability=0.002237, bonus=1.000000, nodes=75)
                                          @ 24  som.Vector$$Lambda/0x00007f8674195098.<init>(Object, boolean[], Object[], int[]):void (26 bytes)   relevance-based (relevance=1.000000, probability=0.250000, bonus=1.000000, nodes=17 <= 300.000000)
                                              @ 17  som.Vector.lambda$remove$0(Object, boolean[], Object[], int[], Object):void (28 bytes)   relevance-based (relevance=1.000000, probability=2.101394, bonus=1.000000, nodes=26 <= 300.000000)
                                            @ 20  som.Vector$$Lambda/0x00007f8674195098.apply(Object):void (21 bytes)   relevance-based (relevance=1.000000, probability=2.101394, bonus=1.000000, nodes=28 <= 300.000000)
                                          @ 36  som.Vector.forEach(ForEachInterface):void (32 bytes)   relevance-based (relevance=1.000000, probability=0.250000, bonus=1.000000, nodes=41 <= 300.000000)
                                        @ 5  som.Vector.remove(Object):boolean (61 bytes)   relevance-based (relevance=2.000000, probability=0.250000, bonus=1.000000, nodes=73 <= 300.000000)
                                      @ 12  deltablue.Variable.removeConstraint(AbstractConstraint):void (23 bytes)   relevance-based (relevance=1.000000, probability=0.250000, bonus=1.000000, nodes=90 <= 300.000000)
                                    @ 10  deltablue.UnaryConstraint.removeFromGraph():void (21 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=100 <= 300.000000)
                            @ 4  som.Vector.<init>():void (7 bytes)   inline method (bytecode parsing)
                              @ 3  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 10  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 14  deltablue.Strength.absoluteWeakest():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 17  deltablue.Variable.setWalkStrength(Strength):void (6 bytes)   inline method (bytecode parsing)
                            @ 22  deltablue.Variable.setStay(boolean):void (6 bytes)   inline method (bytecode parsing)
                            @ 48  deltablue.Variable.getConstraints():Vector (5 bytes)   inline accessor method (bytecode parsing)
                            @ 52  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.Planner$$Lambda/0x00007f86741952b8.<init>(Vector):void (10 bytes)   inline method (bytecode parsing)
                            @ 64  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.Planner$$Lambda/0x00007f86741954d8.<init>(Vector):void (10 bytes)   inline method (bytecode parsing)
                            @ 76  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object):Object (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.lang.invoke.LambdaForm$MH/0x00007f8674000800.invoke(Object):Object (8 bytes)   inline method (bytecode parsing)
                                    @ 15  deltablue.Planner.removePropagateFrom(Variable):Vector (86 bytes)   not inlining too large previous low-level graph (low-level-nodes: 770, relevance=2.000000, probability=0.500000, bonus=1.000000, nodes=81)
                            @ 8  deltablue.Planner.lambda$incrementalRemove$0(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                                @ 13  java.util.ArrayDeque.sub(int, int, int):int (14 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=18 <= 300.000000)
                              @ 14  java.util.ArrayDeque.size():int (17 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=21 <= 300.000000)
                                          @ 1  deltablue.Planner.newMark():int (15 bytes)   relevance-based (relevance=1.000000, probability=4.202787, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f867403aa08.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 8  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 690, relevance=1.000000, probability=4.202787, bonus=1.000000, nodes=72)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f867403aa08.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 19  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 690, relevance=1.000000, probability=4.214682, bonus=1.000000, nodes=72)
                                        @ 2  deltablue.Planner.incrementalAdd(AbstractConstraint):void (27 bytes)   relevance-based (relevance=1.000000, probability=4.202787, bonus=1.000000, nodes=28 <= 300.000000)
                                      @ 20  deltablue.Planner$$Lambda/0x00007f8674195ba8.apply(Object):void (12 bytes)   relevance-based (relevance=1.000000, probability=4.202787, bonus=1.000000, nodes=37 <= 300.000000)
                                    @ 26  som.Vector.forEach(ForEachInterface):void (32 bytes)   not inlining callee invoke probability is too high (invokeP=16.834938, relevance=2.000000, probability=0.500000, bonus=1.000000, nodes=53)
                                  @ 9  deltablue.Planner.incrementalRemove(AbstractConstraint):void (30 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=121 <= 300.000000)
                            @ 34  org.graalvm.collections.EconomicMapImpl.getKey(int):Object (9 bytes)   inline method (bytecode parsing)
                            @ 1  som.Vector.capacity():int (6 bytes)   inline method (bytecode parsing)
                            @ 31  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object, Object, Object, Object):Object (13 bytes)   inline method (bytecode parsing)
                              @ 9  java.lang.invoke.LambdaForm$DMH/0x00007f867412c000.newInvokeSpecial(Object, Object, Object, Object, Object):Object (30 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 7  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                        @ 24  som.Vector$$Lambda/0x00007f8674195098.<init>(Object, boolean[], Object[], int[]):void (26 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=17 <= 300.000000)
                                            @ 17  som.Vector.lambda$remove$0(Object, boolean[], Object[], int[], Object):void (28 bytes)   relevance-based (relevance=1.000000, probability=4.202787, bonus=1.000000, nodes=26 <= 300.000000)
                                          @ 20  som.Vector$$Lambda/0x00007f8674195098.apply(Object):void (21 bytes)   relevance-based (relevance=1.000000, probability=4.202787, bonus=1.000000, nodes=28 <= 300.000000)
                                        @ 36  som.Vector.forEach(ForEachInterface):void (32 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=41 <= 300.000000)
                                      @ 5  som.Vector.remove(Object):boolean (61 bytes)   relevance-based (relevance=2.000000, probability=0.500000, bonus=1.000000, nodes=73 <= 300.000000)
                                    @ 12  deltablue.Variable.removeConstraint(AbstractConstraint):void (23 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=90 <= 300.000000)
                                  @ 13  deltablue.UnaryConstraint.removeFromGraph():void (21 bytes)   relevance-based (relevance=4.000000, probability=1.000000, bonus=1.000000, nodes=100 <= 300.000000)
                                @ 55  deltablue.AbstractConstraint.destroyConstraint(Planner):void (17 bytes)   relevance-based (relevance=1.000124, probability=1.000000, bonus=1.000000, nodes=224 <= 300.000000)
                              @ 109  deltablue.Planner.change(Variable, int):void (59 bytes)   not inlining relevance-based (relevance=1.000141, probability=1.000000, bonus=1.000000, nodes=415 > 300.000000)
                            @ 9  deltablue.EditConstraint.<init>(Variable, Strength$Sym, Planner):void (8 bytes)   inline method (bytecode parsing)
                            @ 4  deltablue.Planner.<init>():void (10 bytes)   inline method (bytecode parsing)
                              @ 4  deltablue.UnaryConstraint.<init>(Variable, Strength$Sym, Planner):void (16 bytes)   inline method (bytecode parsing)
                                @ 2  deltablue.AbstractConstraint.<init>(Strength$Sym):void (13 bytes)   inline method (bytecode parsing)
                            @ 16  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object):Object (8 bytes)   inline method (bytecode parsing)
                                  @ 6  deltablue.Strength.of(Strength$Sym):Strength (11 bytes)   inline method (bytecode parsing)
                                @ 12  deltablue.AbstractConstraint.addConstraint(Planner):void (10 bytes)   inline method (bytecode parsing)
                              @ 4  java.lang.invoke.LambdaForm$MH/0x00007f8674000800.invoke(Object):Object (8 bytes)   inline method (bytecode parsing)
                            @ 39  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 44  deltablue.Plan.execute():void (10 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object):Object (8 bytes)   inline method (bytecode parsing)
                            @ 55  deltablue.EqualityConstraint.<init>(Variable, Variable, Strength$Sym, Planner):void (16 bytes)   inline method (bytecode parsing)
                                @ 4  java.lang.invoke.LambdaForm$MH/0x00007f8674000800.invoke(Object):Object (8 bytes)   inline method (bytecode parsing)
                              @ 12  deltablue.AbstractConstraint.addConstraint(Planner):void (10 bytes)   inline method (bytecode parsing)
                            @ 76  deltablue.StayConstraint.<init>(Variable, Strength$Sym, Planner):void (8 bytes)   inline method (bytecode parsing)
                              @ 4  deltablue.UnaryConstraint.<init>(Variable, Strength$Sym, Planner):void (16 bytes)   inline method (bytecode parsing)
                                @ 2  deltablue.AbstractConstraint.<init>(Strength$Sym):void (13 bytes)   inline method (bytecode parsing)
                                  @ 6  deltablue.Strength.of(Strength$Sym):Strength (11 bytes)   inline method (bytecode parsing)
                                @ 12  deltablue.AbstractConstraint.addConstraint(Planner):void (10 bytes)   inline method (bytecode parsing)
                            @ 91  deltablue.EditConstraint.<init>(Variable, Strength$Sym, Planner):void (8 bytes)   inline method (bytecode parsing)
                              @ 4  deltablue.UnaryConstraint.<init>(Variable, Strength$Sym, Planner):void (16 bytes)   inline method (bytecode parsing)
                                @ 2  deltablue.AbstractConstraint.<init>(Strength$Sym):void (13 bytes)   inline method (bytecode parsing)
                                  @ 6  deltablue.Strength.of(Strength$Sym):Strength (11 bytes)   inline method (bytecode parsing)
                                @ 12  deltablue.AbstractConstraint.addConstraint(Planner):void (10 bytes)   inline method (bytecode parsing)
                                    @ 7  deltablue.Strength$Sym.customHash():int (5 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                                  @ 1  som.Dictionary.hash(Dictionary$CustomHash):int (20 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                            @ 124  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 129  deltablue.Plan.execute():void (10 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object):Object (8 bytes)   inline method (bytecode parsing)
                            @ 6  som.Dictionary.getBucketIdx(int):int (10 bytes)   inline method (bytecode parsing)
                                @ 4  java.lang.invoke.LambdaForm$MH/0x00007f8674000800.invoke(Object):Object (8 bytes)   inline method (bytecode parsing)
                            @ 135  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 7  som.Dictionary.getBucket(int):Dictionary$Entry (11 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                                  @ 18  som.IdentityDictionary$IdEntry.match(int, Object):boolean (22 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=13 <= 300.000000)
                            @ 1  java.util.Objects.requireNonNull(Object):Object (14 bytes)   inline method (bytecode parsing)
                                @ 4  som.Dictionary.at(Dictionary$CustomHash):Object (39 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=28 <= 300.000000)
                              @ 21  java.util.Arrays.setAll(Object[], IntFunction):void (30 bytes)   not inlining too large previous low-level graph (low-level-nodes: 429, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=24)
                            @ 5  deltablue.Variable.addConstraint(AbstractConstraint):void (9 bytes)   inline method (bytecode parsing)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                  @ 7  deltablue.Strength$Sym.customHash():int (5 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                                @ 1  som.Dictionary.hash(Dictionary$CustomHash):int (20 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                            @ 6  som.Dictionary.getBucketIdx(int):int (10 bytes)   inline method (bytecode parsing)
                                    @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000124, probability=0.000124, bonus=1.000000, nodes=41 > 0.037287)
                                @ 7  som.Dictionary.getBucket(int):Dictionary$Entry (11 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                                  @ 5  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=35 <= 300.000000)
                                @ 1  deltablue.UnaryConstraint.addToGraph():void (14 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=47 <= 300.000000)
                                @ 18  som.IdentityDictionary$IdEntry.match(int, Object):boolean (22 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=13 <= 300.000000)
                              @ 4  som.Dictionary.at(Dictionary$CustomHash):Object (39 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=28 <= 300.000000)
                                  @ 1  deltablue.Planner.newMark():int (15 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 5  deltablue.Variable.addConstraint(AbstractConstraint):void (9 bytes)   inline method (bytecode parsing)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f867403aa08.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                                  @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000124, probability=0.000124, bonus=1.000000, nodes=41 > 0.037287)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                                @ 5  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=35 <= 300.000000)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 1  deltablue.UnaryConstraint.addToGraph():void (14 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=47 <= 300.000000)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 8  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 690, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=72)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                                @ 1  deltablue.Planner.newMark():int (15 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=10 <= 300.000000)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f867403aa08.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f867403aa08.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                                  @ 19  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 690, relevance=1.000000, probability=1.002830, bonus=1.000000, nodes=72)
                                @ 6  deltablue.Planner.incrementalAdd(AbstractConstraint):void (27 bytes)   relevance-based (relevance=1.000124, probability=1.000000, bonus=1.000000, nodes=28 <= 300.000000)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                                @ 8  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 690, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=72)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f867403aa08.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                                    @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000124, probability=0.000124, bonus=1.000000, nodes=41 > 0.037287)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                                  @ 11  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=35 <= 300.000000)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                @ 14  som.Vector.with(Object):Vector (16 bytes)   relevance-based (relevance=1.000124, probability=1.000000, bonus=1.000000, nodes=40 <= 300.000000)
                                @ 19  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 690, relevance=1.000000, probability=1.002830, bonus=1.000000, nodes=72)
                            @ 4  som.Vector.<init>():void (7 bytes)   inline method (bytecode parsing)
                              @ 6  deltablue.Planner.incrementalAdd(AbstractConstraint):void (27 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=28 <= 300.000000)
                              @ 3  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 10  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.Planner$$Lambda/0x00007f8674194000.<init>(Vector):void (10 bytes)   inline method (bytecode parsing)
                                  @ 7  deltablue.Strength$Sym.customHash():int (5 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                                @ 1  som.Dictionary.hash(Dictionary$CustomHash):int (20 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                            @ 6  som.Dictionary.getBucketIdx(int):int (10 bytes)   inline method (bytecode parsing)
                                @ 7  som.Dictionary.getBucket(int):Dictionary$Entry (11 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                                      @ 1  deltablue.AbstractConstraint.isInput():boolean (2 bytes)   not inlining no type profile exists
                                      @ 8  deltablue.AbstractConstraint.isSatisfied():boolean (0 bytes)   not inlining no type profile exists
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                @ 18  som.IdentityDictionary$IdEntry.match(int, Object):boolean (22 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=13 <= 300.000000)
                              @ 4  som.Dictionary.at(Dictionary$CustomHash):Object (39 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=28 <= 300.000000)
                            @ 5  deltablue.Variable.addConstraint(AbstractConstraint):void (9 bytes)   inline method (bytecode parsing)
                                          @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000124, probability=0.000261, bonus=1.000000, nodes=41 > 0.037287)
                                        @ 16  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=2.101394, bonus=1.000000, nodes=35 <= 300.000000)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                      @ 8  deltablue.Planner.lambda$extractPlanFromConstraints$1(Vector, AbstractConstraint):void (20 bytes)   relevance-based (relevance=1.000000, probability=8.405575, bonus=1.000000, nodes=59 <= 300.000000)
                                    @ 20  deltablue.Planner$$Lambda/0x00007f8674194000.apply(Object):void (12 bytes)   relevance-based (relevance=1.000000, probability=8.405575, bonus=1.000000, nodes=64 <= 300.000000)
                                  @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000124, probability=0.000124, bonus=1.000000, nodes=41 > 0.037287)
                                  @ 15  som.Vector.forEach(ForEachInterface):void (32 bytes)   not inlining callee invoke probability is too high (invokeP=12.608623, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=77)
                                @ 5  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=35 <= 300.000000)
                            @ 9  deltablue.Plan.<init>():void (7 bytes)   inline method (bytecode parsing)
                              @ 3  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                              @ 1  deltablue.UnaryConstraint.addToGraph():void (14 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=47 <= 300.000000)
                            @ 39  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 67  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                                @ 1  deltablue.Planner.newMark():int (15 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                                  @ 20  deltablue.Planner.makePlan(Vector):Plan (86 bytes)   not inlining too large previous low-level graph (low-level-nodes: 817, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=69)
                                @ 22  deltablue.Planner.extractPlanFromConstraints(Vector):Plan (24 bytes)   relevance-based (relevance=1.000124, probability=1.000000, bonus=1.000000, nodes=27 <= 300.000000)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f867403aa08.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 1  deltablue.UnaryConstraint.isSatisfied():boolean (5 bytes)   trivial (relevance=2.000000, probability=1.000000, bonus=1.000000, nodes=5)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 21  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.Planner$$Lambda/0x00007f8674195ba8.<init>(Planner):void (10 bytes)   inline method (bytecode parsing)
                                @ 8  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 690, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=72)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                                    @ 1  deltablue.UnaryConstraint.getOutput():Variable (5 bytes)   trivial (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=5)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                    @ 6  deltablue.UnaryConstraint.markUnsatisfied():void (6 bytes)   trivial (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=7)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f867403aa08.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                            @ 1  som.Vector.capacity():int (6 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 31  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object, Object, Object, Object):Object (13 bytes)   inline method (bytecode parsing)
                              @ 9  java.lang.invoke.LambdaForm$DMH/0x00007f867412c000.newInvokeSpecial(Object, Object, Object, Object, Object):Object (30 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 19  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 690, relevance=1.000000, probability=1.002830, bonus=1.000000, nodes=72)
                              @ 6  deltablue.Planner.incrementalAdd(AbstractConstraint):void (27 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=28 <= 300.000000)
                                @ 7  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                            @ 5  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                                          @ 24  som.Vector$$Lambda/0x00007f8674195098.<init>(Object, boolean[], Object[], int[]):void (26 bytes)   relevance-based (relevance=1.000000, probability=0.250000, bonus=1.000000, nodes=17 <= 300.000000)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                              @ 17  som.Vector.lambda$remove$0(Object, boolean[], Object[], int[], Object):void (28 bytes)   relevance-based (relevance=1.000000, probability=2.101394, bonus=1.000000, nodes=26 <= 300.000000)
                                  @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000124, probability=0.000124, bonus=1.000000, nodes=41 > 0.037287)
                                            @ 20  som.Vector$$Lambda/0x00007f8674195098.apply(Object):void (21 bytes)   relevance-based (relevance=1.000000, probability=2.101394, bonus=1.000000, nodes=28 <= 300.000000)
                                @ 11  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=35 <= 300.000000)
                                          @ 36  som.Vector.forEach(ForEachInterface):void (32 bytes)   relevance-based (relevance=1.000000, probability=0.250000, bonus=1.000000, nodes=41 <= 300.000000)
                              @ 96  som.Vector.with(Object):Vector (16 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=40 <= 300.000000)
                                        @ 5  som.Vector.remove(Object):boolean (61 bytes)   relevance-based (relevance=2.000000, probability=0.250000, bonus=1.000000, nodes=73 <= 300.000000)
                            @ 4  som.Vector.<init>():void (7 bytes)   inline method (bytecode parsing)
                              @ 3  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                                      @ 12  deltablue.Variable.removeConstraint(AbstractConstraint):void (23 bytes)   relevance-based (relevance=1.000000, probability=0.250000, bonus=1.000000, nodes=90 <= 300.000000)
                            @ 10  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                    @ 10  deltablue.UnaryConstraint.removeFromGraph():void (21 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=100 <= 300.000000)
                                @ 16  deltablue.Planner$$Lambda/0x00007f8674194000.<init>(Vector):void (10 bytes)   inline method (bytecode parsing)
                            @ 4  som.Vector.<init>():void (7 bytes)   inline method (bytecode parsing)
                              @ 3  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 10  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 14  deltablue.Strength.absoluteWeakest():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 17  deltablue.Variable.setWalkStrength(Strength):void (6 bytes)   inline method (bytecode parsing)
                            @ 22  deltablue.Variable.setStay(boolean):void (6 bytes)   inline method (bytecode parsing)
                                    @ 1  deltablue.AbstractConstraint.isInput():boolean (2 bytes)   not inlining no type profile exists
                                    @ 8  deltablue.AbstractConstraint.isSatisfied():boolean (0 bytes)   not inlining no type profile exists
                            @ 48  deltablue.Variable.getConstraints():Vector (5 bytes)   inline accessor method (bytecode parsing)
                            @ 52  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.Planner$$Lambda/0x00007f86741952b8.<init>(Vector):void (10 bytes)   inline method (bytecode parsing)
                            @ 64  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                        @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000124, probability=0.000261, bonus=1.000000, nodes=41 > 0.037287)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                      @ 16  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=2.101394, bonus=1.000000, nodes=35 <= 300.000000)
                                @ 16  deltablue.Planner$$Lambda/0x00007f86741954d8.<init>(Vector):void (10 bytes)   inline method (bytecode parsing)
                            @ 76  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object):Object (8 bytes)   inline method (bytecode parsing)
                                    @ 8  deltablue.Planner.lambda$extractPlanFromConstraints$1(Vector, AbstractConstraint):void (20 bytes)   relevance-based (relevance=1.000000, probability=8.405575, bonus=1.000000, nodes=59 <= 300.000000)
                              @ 4  java.lang.invoke.LambdaForm$MH/0x00007f8674000800.invoke(Object):Object (8 bytes)   inline method (bytecode parsing)
                                  @ 20  deltablue.Planner$$Lambda/0x00007f8674194000.apply(Object):void (12 bytes)   relevance-based (relevance=1.000000, probability=8.405575, bonus=1.000000, nodes=64 <= 300.000000)
                                    @ 15  deltablue.Planner.removePropagateFrom(Variable):Vector (86 bytes)   not inlining too large previous low-level graph (low-level-nodes: 770, relevance=2.000000, probability=0.500000, bonus=1.000000, nodes=81)
                                @ 15  som.Vector.forEach(ForEachInterface):void (32 bytes)   not inlining callee invoke probability is too high (invokeP=12.608623, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=77)
                            @ 9  deltablue.Plan.<init>():void (7 bytes)   inline method (bytecode parsing)
                              @ 3  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 8  deltablue.Planner.lambda$incrementalRemove$0(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 39  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 67  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                                          @ 1  deltablue.Planner.newMark():int (15 bytes)   relevance-based (relevance=1.000000, probability=4.202787, bonus=1.000000, nodes=10 <= 300.000000)
                                @ 20  deltablue.Planner.makePlan(Vector):Plan (86 bytes)   not inlining too large previous low-level graph (low-level-nodes: 817, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=69)
                              @ 104  deltablue.Planner.extractPlanFromConstraints(Vector):Plan (24 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=27 <= 300.000000)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                              @ 6  deltablue.BinaryConstraint.<init>(Variable, Variable, Strength$Sym, Planner):void (21 bytes)   not inlining too large previous low-level graph (low-level-nodes: 394, relevance=1.000000, probability=60901.000000, bonus=1.000000, nodes=17)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f867403aa08.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 5  deltablue.Variable.addConstraint(AbstractConstraint):void (9 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 13  deltablue.Variable.addConstraint(AbstractConstraint):void (9 bytes)   inline method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                              @ 1  deltablue.BinaryConstraint.addToGraph():void (22 bytes)   not inlining too large previous low-level graph (low-level-nodes: 617, relevance=1.000000, probability=60901.000000, bonus=1.000000, nodes=25)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                @ 1  deltablue.Planner.newMark():int (15 bytes)   relevance-based (relevance=1.000000, probability=60901.000000, bonus=1.000000, nodes=10 <= 300.000000)
                                          @ 8  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 690, relevance=1.000000, probability=4.202787, bonus=1.000000, nodes=72)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f867403aa08.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f867403aa08.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 19  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 690, relevance=1.000000, probability=4.214682, bonus=1.000000, nodes=72)
                                @ 8  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 690, relevance=1.000000, probability=60901.000000, bonus=1.000000, nodes=72)
                                        @ 2  deltablue.Planner.incrementalAdd(AbstractConstraint):void (27 bytes)   relevance-based (relevance=1.000000, probability=4.202787, bonus=1.000000, nodes=28 <= 300.000000)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                                      @ 20  deltablue.Planner$$Lambda/0x00007f8674195ba8.apply(Object):void (12 bytes)   relevance-based (relevance=1.000000, probability=4.202787, bonus=1.000000, nodes=37 <= 300.000000)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                    @ 26  som.Vector.forEach(ForEachInterface):void (32 bytes)   not inlining callee invoke probability is too high (invokeP=16.834938, relevance=2.000000, probability=0.500000, bonus=1.000000, nodes=53)
                                  @ 9  deltablue.Planner.incrementalRemove(AbstractConstraint):void (30 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=121 <= 300.000000)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f867403aa08.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                @ 19  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 690, relevance=1.000000, probability=61073.357800, bonus=1.000000, nodes=72)
                              @ 6  deltablue.Planner.incrementalAdd(AbstractConstraint):void (27 bytes)   relevance-based (relevance=1.000000, probability=60901.000000, bonus=1.000000, nodes=28 <= 300.000000)
                            @ 1  som.Vector.capacity():int (6 bytes)   inline method (bytecode parsing)
                            @ 31  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object, Object, Object, Object):Object (13 bytes)   inline method (bytecode parsing)
                              @ 9  java.lang.invoke.LambdaForm$DMH/0x00007f867412c000.newInvokeSpecial(Object, Object, Object, Object, Object):Object (30 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 7  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 1  deltablue.UnaryConstraint.isSatisfied():boolean (5 bytes)   trivial (relevance=2.000000, probability=1.000000, bonus=1.000000, nodes=5)
                            @ 21  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                                        @ 24  som.Vector$$Lambda/0x00007f8674195098.<init>(Object, boolean[], Object[], int[]):void (26 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=17 <= 300.000000)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.Planner$$Lambda/0x00007f8674195ba8.<init>(Planner):void (10 bytes)   inline method (bytecode parsing)
                                  @ 1  deltablue.UnaryConstraint.getOutput():Variable (5 bytes)   trivial (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=5)
                                            @ 17  som.Vector.lambda$remove$0(Object, boolean[], Object[], int[], Object):void (28 bytes)   relevance-based (relevance=1.000000, probability=4.202787, bonus=1.000000, nodes=26 <= 300.000000)
                                  @ 6  deltablue.UnaryConstraint.markUnsatisfied():void (6 bytes)   trivial (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=7)
                                          @ 20  som.Vector$$Lambda/0x00007f8674195098.apply(Object):void (21 bytes)   relevance-based (relevance=1.000000, probability=4.202787, bonus=1.000000, nodes=28 <= 300.000000)
                                        @ 36  som.Vector.forEach(ForEachInterface):void (32 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=41 <= 300.000000)
                                      @ 5  som.Vector.remove(Object):boolean (61 bytes)   relevance-based (relevance=2.000000, probability=0.500000, bonus=1.000000, nodes=73 <= 300.000000)
                            @ 1  som.Vector.capacity():int (6 bytes)   inline method (bytecode parsing)
                            @ 31  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object, Object, Object, Object):Object (13 bytes)   inline method (bytecode parsing)
                              @ 9  java.lang.invoke.LambdaForm$DMH/0x00007f867412c000.newInvokeSpecial(Object, Object, Object, Object, Object):Object (30 bytes)   inline method (bytecode parsing)
                                    @ 12  deltablue.Variable.removeConstraint(AbstractConstraint):void (23 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=90 <= 300.000000)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 7  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                  @ 13  deltablue.UnaryConstraint.removeFromGraph():void (21 bytes)   relevance-based (relevance=4.000000, probability=1.000000, bonus=1.000000, nodes=100 <= 300.000000)
                                        @ 24  som.Vector$$Lambda/0x00007f8674195098.<init>(Object, boolean[], Object[], int[]):void (26 bytes)   relevance-based (relevance=1.000000, probability=0.250000, bonus=1.000000, nodes=17 <= 300.000000)
                                @ 55  deltablue.AbstractConstraint.destroyConstraint(Planner):void (17 bytes)   relevance-based (relevance=1.000124, probability=1.000000, bonus=1.000000, nodes=224 <= 300.000000)
                                            @ 17  som.Vector.lambda$remove$0(Object, boolean[], Object[], int[], Object):void (28 bytes)   relevance-based (relevance=1.000000, probability=2.101394, bonus=1.000000, nodes=26 <= 300.000000)
                              @ 139  deltablue.Planner.change(Variable, int):void (59 bytes)   not inlining relevance-based (relevance=1.000141, probability=1.000000, bonus=1.000000, nodes=415 > 300.000000)
                                          @ 20  som.Vector$$Lambda/0x00007f8674195098.apply(Object):void (21 bytes)   relevance-based (relevance=1.000000, probability=2.101394, bonus=1.000000, nodes=28 <= 300.000000)
                            @ 9  deltablue.EditConstraint.<init>(Variable, Strength$Sym, Planner):void (8 bytes)   inline method (bytecode parsing)
                              @ 4  deltablue.UnaryConstraint.<init>(Variable, Strength$Sym, Planner):void (16 bytes)   inline method (bytecode parsing)
                                        @ 36  som.Vector.forEach(ForEachInterface):void (32 bytes)   relevance-based (relevance=1.000000, probability=0.250000, bonus=1.000000, nodes=41 <= 300.000000)
                                @ 2  deltablue.AbstractConstraint.<init>(Strength$Sym):void (13 bytes)   inline method (bytecode parsing)
                                  @ 6  deltablue.Strength.of(Strength$Sym):Strength (11 bytes)   inline method (bytecode parsing)
                                      @ 5  som.Vector.remove(Object):boolean (61 bytes)   relevance-based (relevance=2.000000, probability=0.250000, bonus=1.000000, nodes=73 <= 300.000000)
                                @ 12  deltablue.AbstractConstraint.addConstraint(Planner):void (10 bytes)   inline method (bytecode parsing)
                            @ 39  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 44  deltablue.Plan.execute():void (10 bytes)   inline method (bytecode parsing)
                                    @ 12  deltablue.Variable.removeConstraint(AbstractConstraint):void (23 bytes)   relevance-based (relevance=1.000000, probability=0.250000, bonus=1.000000, nodes=90 <= 300.000000)
                              @ 1  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object):Object (8 bytes)   inline method (bytecode parsing)
                                @ 4  java.lang.invoke.LambdaForm$MH/0x00007f8674000800.invoke(Object):Object (8 bytes)   inline method (bytecode parsing)
                                  @ 10  deltablue.UnaryConstraint.removeFromGraph():void (21 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=100 <= 300.000000)
                            @ 4  som.Vector.<init>():void (7 bytes)   inline method (bytecode parsing)
                              @ 3  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 10  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 14  deltablue.Strength.absoluteWeakest():Strength (4 bytes)   inline method (bytecode parsing)
                                    @ 7  deltablue.Strength$Sym.customHash():int (5 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                            @ 17  deltablue.Variable.setWalkStrength(Strength):void (6 bytes)   inline method (bytecode parsing)
                            @ 22  deltablue.Variable.setStay(boolean):void (6 bytes)   inline method (bytecode parsing)
                                  @ 1  som.Dictionary.hash(Dictionary$CustomHash):int (20 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                            @ 48  deltablue.Variable.getConstraints():Vector (5 bytes)   inline accessor method (bytecode parsing)
                            @ 52  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                            @ 6  som.Dictionary.getBucketIdx(int):int (10 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.Planner$$Lambda/0x00007f86741952b8.<init>(Vector):void (10 bytes)   inline method (bytecode parsing)
                            @ 64  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.Planner$$Lambda/0x00007f86741954d8.<init>(Vector):void (10 bytes)   inline method (bytecode parsing)
                                  @ 7  som.Dictionary.getBucket(int):Dictionary$Entry (11 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                            @ 76  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object):Object (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.lang.invoke.LambdaForm$MH/0x00007f8674000800.invoke(Object):Object (8 bytes)   inline method (bytecode parsing)
                                  @ 15  deltablue.Planner.removePropagateFrom(Variable):Vector (86 bytes)   not inlining too large previous low-level graph (low-level-nodes: 770, relevance=2.000000, probability=0.500000, bonus=1.000000, nodes=81)
                                  @ 18  som.IdentityDictionary$IdEntry.match(int, Object):boolean (22 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                @ 4  som.Dictionary.at(Dictionary$CustomHash):Object (39 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=28 <= 300.000000)
                            @ 8  deltablue.Planner.lambda$incrementalRemove$0(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 5  deltablue.Variable.addConstraint(AbstractConstraint):void (9 bytes)   inline method (bytecode parsing)
                                        @ 1  deltablue.Planner.newMark():int (15 bytes)   relevance-based (relevance=1.000000, probability=4.202787, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f867403aa08.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                        @ 8  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 690, relevance=1.000000, probability=4.202787, bonus=1.000000, nodes=72)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f867403aa08.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                        @ 19  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 690, relevance=1.000000, probability=4.214682, bonus=1.000000, nodes=72)
                                      @ 2  deltablue.Planner.incrementalAdd(AbstractConstraint):void (27 bytes)   relevance-based (relevance=1.000000, probability=4.202787, bonus=1.000000, nodes=28 <= 300.000000)
                                    @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000124, probability=0.000124, bonus=1.000000, nodes=41 > 0.037287)
                                    @ 20  deltablue.Planner$$Lambda/0x00007f8674195ba8.apply(Object):void (12 bytes)   relevance-based (relevance=1.000000, probability=4.202787, bonus=1.000000, nodes=37 <= 300.000000)
                                  @ 5  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=35 <= 300.000000)
                                  @ 26  som.Vector.forEach(ForEachInterface):void (32 bytes)   not inlining callee invoke probability is too high (invokeP=16.834938, relevance=2.000000, probability=0.500000, bonus=1.000000, nodes=53)
                                @ 9  deltablue.Planner.incrementalRemove(AbstractConstraint):void (30 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=121 <= 300.000000)
                                @ 1  deltablue.UnaryConstraint.addToGraph():void (14 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=47 <= 300.000000)
                            @ 1  som.Vector.capacity():int (6 bytes)   inline method (bytecode parsing)
                            @ 31  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object, Object, Object, Object):Object (13 bytes)   inline method (bytecode parsing)
                              @ 9  java.lang.invoke.LambdaForm$DMH/0x00007f867412c000.newInvokeSpecial(Object, Object, Object, Object, Object):Object (30 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 7  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                  @ 1  deltablue.Planner.newMark():int (15 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=10 <= 300.000000)
                                      @ 24  som.Vector$$Lambda/0x00007f8674195098.<init>(Object, boolean[], Object[], int[]):void (26 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=17 <= 300.000000)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                          @ 17  som.Vector.lambda$remove$0(Object, boolean[], Object[], int[], Object):void (28 bytes)   relevance-based (relevance=1.000000, probability=4.202787, bonus=1.000000, nodes=26 <= 300.000000)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                        @ 20  som.Vector$$Lambda/0x00007f8674195098.apply(Object):void (21 bytes)   relevance-based (relevance=1.000000, probability=4.202787, bonus=1.000000, nodes=28 <= 300.000000)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f867403aa08.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                                      @ 36  som.Vector.forEach(ForEachInterface):void (32 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=41 <= 300.000000)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                                    @ 5  som.Vector.remove(Object):boolean (61 bytes)   relevance-based (relevance=2.000000, probability=0.500000, bonus=1.000000, nodes=73 <= 300.000000)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                                  @ 12  deltablue.Variable.removeConstraint(AbstractConstraint):void (23 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=90 <= 300.000000)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                                @ 13  deltablue.UnaryConstraint.removeFromGraph():void (21 bytes)   relevance-based (relevance=4.000000, probability=1.000000, bonus=1.000000, nodes=100 <= 300.000000)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                              @ 161  deltablue.AbstractConstraint.destroyConstraint(Planner):void (17 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=224 <= 300.000000)
                                  @ 8  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 690, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=72)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f867403aa08.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                            @ 4  deltablue.Plan.lambda$execute$0(AbstractConstraint):void (5 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 19  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 690, relevance=1.000000, probability=1.002830, bonus=1.000000, nodes=72)
                            @ 18  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                @ 6  deltablue.Planner.incrementalAdd(AbstractConstraint):void (27 bytes)   relevance-based (relevance=1.000124, probability=1.000000, bonus=1.000000, nodes=28 <= 300.000000)
                            @ 21  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 35  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 38  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 5  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 18  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 25  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 33  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 37  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 51  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                            @ 58  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 66  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 70  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                                  @ 1  deltablue.EqualityConstraint.execute():void (42 bytes)   relevance-based (relevance=1.000000, probability=840.557452, bonus=1.000000, nodes=103 <= 300.000000)
                                    @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000124, probability=0.000124, bonus=1.000000, nodes=41 > 0.037287)
                                  @ 11  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=35 <= 300.000000)
                                @ 14  som.Vector.with(Object):Vector (16 bytes)   relevance-based (relevance=1.000124, probability=1.000000, bonus=1.000000, nodes=40 <= 300.000000)
                                @ 20  deltablue.Plan$$Lambda/0x00007f8674194c88.apply(Object):void (8 bytes)   relevance-based (relevance=1.000000, probability=840.557452, bonus=1.000000, nodes=113 <= 300.000000)
                            @ 4  som.Vector.<init>():void (7 bytes)   inline method (bytecode parsing)
                              @ 3  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 10  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 6  som.Vector.forEach(ForEachInterface):void (32 bytes)   relevance-based (relevance=1.000000, probability=100.000000, bonus=1.000000, nodes=127 <= 300.000000)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.Planner$$Lambda/0x00007f8674194000.<init>(Vector):void (10 bytes)   inline method (bytecode parsing)
                                      @ 1  deltablue.AbstractConstraint.isInput():boolean (2 bytes)   not inlining no type profile exists
                                      @ 8  deltablue.AbstractConstraint.isSatisfied():boolean (0 bytes)   not inlining no type profile exists
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                          @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000124, probability=0.000261, bonus=1.000000, nodes=41 > 0.037287)
                                        @ 16  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=2.101394, bonus=1.000000, nodes=35 <= 300.000000)
                                      @ 8  deltablue.Planner.lambda$extractPlanFromConstraints$1(Vector, AbstractConstraint):void (20 bytes)   relevance-based (relevance=1.000000, probability=8.405575, bonus=1.000000, nodes=59 <= 300.000000)
                                    @ 20  deltablue.Planner$$Lambda/0x00007f8674194000.apply(Object):void (12 bytes)   relevance-based (relevance=1.000000, probability=8.405575, bonus=1.000000, nodes=64 <= 300.000000)
                                  @ 15  som.Vector.forEach(ForEachInterface):void (32 bytes)   not inlining callee invoke probability is too high (invokeP=12.608623, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=77)
                            @ 9  deltablue.Plan.<init>():void (7 bytes)   inline method (bytecode parsing)
                              @ 3  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 39  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 67  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                                  @ 20  deltablue.Planner.makePlan(Vector):Plan (86 bytes)   not inlining too large previous low-level graph (low-level-nodes: 817, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=69)
                                @ 22  deltablue.Planner.extractPlanFromConstraints(Vector):Plan (24 bytes)   relevance-based (relevance=1.000124, probability=1.000000, bonus=1.000000, nodes=27 <= 300.000000)
                                  @ 1  deltablue.UnaryConstraint.isSatisfied():boolean (5 bytes)   trivial (relevance=2.000000, probability=1.000000, bonus=1.000000, nodes=5)
                            @ 21  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.Planner$$Lambda/0x00007f8674195ba8.<init>(Planner):void (10 bytes)   inline method (bytecode parsing)
                                    @ 1  deltablue.UnaryConstraint.getOutput():Variable (5 bytes)   trivial (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=5)
                                    @ 6  deltablue.UnaryConstraint.markUnsatisfied():void (6 bytes)   trivial (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=7)
                            @ 1  som.Vector.capacity():int (6 bytes)   inline method (bytecode parsing)
                            @ 31  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object, Object, Object, Object):Object (13 bytes)   inline method (bytecode parsing)
                              @ 9  java.lang.invoke.LambdaForm$DMH/0x00007f867412c000.newInvokeSpecial(Object, Object, Object, Object, Object):Object (30 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 7  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                          @ 24  som.Vector$$Lambda/0x00007f8674195098.<init>(Object, boolean[], Object[], int[]):void (26 bytes)   relevance-based (relevance=1.000000, probability=0.250000, bonus=1.000000, nodes=17 <= 300.000000)
                                              @ 17  som.Vector.lambda$remove$0(Object, boolean[], Object[], int[], Object):void (28 bytes)   relevance-based (relevance=1.000000, probability=2.101394, bonus=1.000000, nodes=26 <= 300.000000)
                                            @ 20  som.Vector$$Lambda/0x00007f8674195098.apply(Object):void (21 bytes)   relevance-based (relevance=1.000000, probability=2.101394, bonus=1.000000, nodes=28 <= 300.000000)
                                          @ 36  som.Vector.forEach(ForEachInterface):void (32 bytes)   relevance-based (relevance=1.000000, probability=0.250000, bonus=1.000000, nodes=41 <= 300.000000)
                                        @ 5  som.Vector.remove(Object):boolean (61 bytes)   relevance-based (relevance=2.000000, probability=0.250000, bonus=1.000000, nodes=73 <= 300.000000)
                                      @ 12  deltablue.Variable.removeConstraint(AbstractConstraint):void (23 bytes)   relevance-based (relevance=1.000000, probability=0.250000, bonus=1.000000, nodes=90 <= 300.000000)
                                    @ 10  deltablue.UnaryConstraint.removeFromGraph():void (21 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=100 <= 300.000000)
                            @ 4  som.Vector.<init>():void (7 bytes)   inline method (bytecode parsing)
                              @ 3  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 10  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 14  deltablue.Strength.absoluteWeakest():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 17  deltablue.Variable.setWalkStrength(Strength):void (6 bytes)   inline method (bytecode parsing)
                            @ 22  deltablue.Variable.setStay(boolean):void (6 bytes)   inline method (bytecode parsing)
                            @ 48  deltablue.Variable.getConstraints():Vector (5 bytes)   inline accessor method (bytecode parsing)
                            @ 52  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.Planner$$Lambda/0x00007f86741952b8.<init>(Vector):void (10 bytes)   inline method (bytecode parsing)
                            @ 64  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.Planner$$Lambda/0x00007f86741954d8.<init>(Vector):void (10 bytes)   inline method (bytecode parsing)
                            @ 76  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object):Object (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.lang.invoke.LambdaForm$MH/0x00007f8674000800.invoke(Object):Object (8 bytes)   inline method (bytecode parsing)
                                    @ 15  deltablue.Planner.removePropagateFrom(Variable):Vector (86 bytes)   not inlining too large previous low-level graph (low-level-nodes: 770, relevance=2.000000, probability=0.500000, bonus=1.000000, nodes=81)
                            @ 8  deltablue.Planner.lambda$incrementalRemove$0(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                                          @ 1  deltablue.Planner.newMark():int (15 bytes)   relevance-based (relevance=1.000000, probability=4.202787, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f867403aa08.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 8  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 690, relevance=1.000000, probability=4.202787, bonus=1.000000, nodes=72)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f867403aa08.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 19  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 690, relevance=1.000000, probability=4.214682, bonus=1.000000, nodes=72)
                                        @ 2  deltablue.Planner.incrementalAdd(AbstractConstraint):void (27 bytes)   relevance-based (relevance=1.000000, probability=4.202787, bonus=1.000000, nodes=28 <= 300.000000)
                                      @ 20  deltablue.Planner$$Lambda/0x00007f8674195ba8.apply(Object):void (12 bytes)   relevance-based (relevance=1.000000, probability=4.202787, bonus=1.000000, nodes=37 <= 300.000000)
                                    @ 26  som.Vector.forEach(ForEachInterface):void (32 bytes)   not inlining callee invoke probability is too high (invokeP=16.834938, relevance=2.000000, probability=0.500000, bonus=1.000000, nodes=53)
                                  @ 9  deltablue.Planner.incrementalRemove(AbstractConstraint):void (30 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=121 <= 300.000000)
                            @ 1  som.Vector.capacity():int (6 bytes)   inline method (bytecode parsing)
                            @ 31  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object, Object, Object, Object):Object (13 bytes)   inline method (bytecode parsing)
                              @ 9  java.lang.invoke.LambdaForm$DMH/0x00007f867412c000.newInvokeSpecial(Object, Object, Object, Object, Object):Object (30 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 7  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                        @ 24  som.Vector$$Lambda/0x00007f8674195098.<init>(Object, boolean[], Object[], int[]):void (26 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=17 <= 300.000000)
                                            @ 17  som.Vector.lambda$remove$0(Object, boolean[], Object[], int[], Object):void (28 bytes)   relevance-based (relevance=1.000000, probability=4.202787, bonus=1.000000, nodes=26 <= 300.000000)
                                          @ 20  som.Vector$$Lambda/0x00007f8674195098.apply(Object):void (21 bytes)   relevance-based (relevance=1.000000, probability=4.202787, bonus=1.000000, nodes=28 <= 300.000000)
                                        @ 36  som.Vector.forEach(ForEachInterface):void (32 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=41 <= 300.000000)
                                      @ 5  som.Vector.remove(Object):boolean (61 bytes)   relevance-based (relevance=2.000000, probability=0.500000, bonus=1.000000, nodes=73 <= 300.000000)
                                    @ 12  deltablue.Variable.removeConstraint(AbstractConstraint):void (23 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=90 <= 300.000000)
                                  @ 13  deltablue.UnaryConstraint.removeFromGraph():void (21 bytes)   relevance-based (relevance=4.000000, probability=1.000000, bonus=1.000000, nodes=100 <= 300.000000)
                                @ 55  deltablue.AbstractConstraint.destroyConstraint(Planner):void (17 bytes)   relevance-based (relevance=1.000124, probability=1.000000, bonus=1.000000, nodes=224 <= 300.000000)
                              @ 164  deltablue.Planner.change(Variable, int):void (59 bytes)   not inlining relevance-based (relevance=1.000141, probability=1.000000, bonus=1.000000, nodes=412 > 300.000000)
                            @ 9  deltablue.EditConstraint.<init>(Variable, Strength$Sym, Planner):void (8 bytes)   inline method (bytecode parsing)
                              @ 4  deltablue.UnaryConstraint.<init>(Variable, Strength$Sym, Planner):void (16 bytes)   inline method (bytecode parsing)
                                @ 2  deltablue.AbstractConstraint.<init>(Strength$Sym):void (13 bytes)   inline method (bytecode parsing)
                                  @ 6  deltablue.Strength.of(Strength$Sym):Strength (11 bytes)   inline method (bytecode parsing)
                                @ 12  deltablue.AbstractConstraint.addConstraint(Planner):void (10 bytes)   inline method (bytecode parsing)
                            @ 39  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 44  deltablue.Plan.execute():void (10 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object):Object (8 bytes)   inline method (bytecode parsing)
                                @ 4  java.lang.invoke.LambdaForm$MH/0x00007f8674000800.invoke(Object):Object (8 bytes)   inline method (bytecode parsing)
                                    @ 7  deltablue.Strength$Sym.customHash():int (5 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                                  @ 1  som.Dictionary.hash(Dictionary$CustomHash):int (20 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                            @ 6  som.Dictionary.getBucketIdx(int):int (10 bytes)   inline method (bytecode parsing)
                                  @ 7  som.Dictionary.getBucket(int):Dictionary$Entry (11 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                                  @ 18  som.IdentityDictionary$IdEntry.match(int, Object):boolean (22 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                @ 4  som.Dictionary.at(Dictionary$CustomHash):Object (39 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=28 <= 300.000000)
                            @ 5  deltablue.Variable.addConstraint(AbstractConstraint):void (9 bytes)   inline method (bytecode parsing)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                    @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000124, probability=0.000124, bonus=1.000000, nodes=41 > 0.037287)
                                  @ 5  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=35 <= 300.000000)
                                @ 1  deltablue.UnaryConstraint.addToGraph():void (14 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=47 <= 300.000000)
                                  @ 1  deltablue.Planner.newMark():int (15 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f867403aa08.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 8  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 690, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=72)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f867403aa08.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 19  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 690, relevance=1.000000, probability=1.002830, bonus=1.000000, nodes=72)
                                @ 6  deltablue.Planner.incrementalAdd(AbstractConstraint):void (27 bytes)   relevance-based (relevance=1.000124, probability=1.000000, bonus=1.000000, nodes=28 <= 300.000000)
                            @ 5  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                    @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000124, probability=0.000124, bonus=1.000000, nodes=41 > 0.037287)
                                  @ 11  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=35 <= 300.000000)
                                @ 14  som.Vector.with(Object):Vector (16 bytes)   relevance-based (relevance=1.000124, probability=1.000000, bonus=1.000000, nodes=40 <= 300.000000)
                            @ 4  som.Vector.<init>():void (7 bytes)   inline method (bytecode parsing)
                              @ 3  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 10  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.Planner$$Lambda/0x00007f8674194000.<init>(Vector):void (10 bytes)   inline method (bytecode parsing)
                                      @ 1  deltablue.AbstractConstraint.isInput():boolean (2 bytes)   not inlining no type profile exists
                                      @ 8  deltablue.AbstractConstraint.isSatisfied():boolean (0 bytes)   not inlining no type profile exists
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                          @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000124, probability=0.000261, bonus=1.000000, nodes=41 > 0.037287)
                                        @ 16  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=2.101394, bonus=1.000000, nodes=35 <= 300.000000)
                                      @ 8  deltablue.Planner.lambda$extractPlanFromConstraints$1(Vector, AbstractConstraint):void (20 bytes)   relevance-based (relevance=1.000000, probability=8.405575, bonus=1.000000, nodes=59 <= 300.000000)
                                    @ 20  deltablue.Planner$$Lambda/0x00007f8674194000.apply(Object):void (12 bytes)   relevance-based (relevance=1.000000, probability=8.405575, bonus=1.000000, nodes=64 <= 300.000000)
                                  @ 15  som.Vector.forEach(ForEachInterface):void (32 bytes)   not inlining callee invoke probability is too high (invokeP=12.608623, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=77)
                            @ 9  deltablue.Plan.<init>():void (7 bytes)   inline method (bytecode parsing)
                              @ 3  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 39  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 67  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                                  @ 20  deltablue.Planner.makePlan(Vector):Plan (86 bytes)   not inlining too large previous low-level graph (low-level-nodes: 817, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=69)
                                @ 22  deltablue.Planner.extractPlanFromConstraints(Vector):Plan (24 bytes)   relevance-based (relevance=1.000124, probability=1.000000, bonus=1.000000, nodes=27 <= 300.000000)
                                  @ 1  deltablue.UnaryConstraint.isSatisfied():boolean (5 bytes)   trivial (relevance=2.000000, probability=1.000000, bonus=1.000000, nodes=5)
                            @ 21  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.Planner$$Lambda/0x00007f8674195ba8.<init>(Planner):void (10 bytes)   inline method (bytecode parsing)
                                    @ 1  deltablue.UnaryConstraint.getOutput():Variable (5 bytes)   trivial (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=5)
                                    @ 6  deltablue.UnaryConstraint.markUnsatisfied():void (6 bytes)   trivial (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=7)
                            @ 1  som.Vector.capacity():int (6 bytes)   inline method (bytecode parsing)
                            @ 31  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object, Object, Object, Object):Object (13 bytes)   inline method (bytecode parsing)
                              @ 9  java.lang.invoke.LambdaForm$DMH/0x00007f867412c000.newInvokeSpecial(Object, Object, Object, Object, Object):Object (30 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 7  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                          @ 24  som.Vector$$Lambda/0x00007f8674195098.<init>(Object, boolean[], Object[], int[]):void (26 bytes)   relevance-based (relevance=1.000000, probability=0.250000, bonus=1.000000, nodes=17 <= 300.000000)
                                              @ 17  som.Vector.lambda$remove$0(Object, boolean[], Object[], int[], Object):void (28 bytes)   relevance-based (relevance=1.000000, probability=2.101394, bonus=1.000000, nodes=26 <= 300.000000)
                                            @ 20  som.Vector$$Lambda/0x00007f8674195098.apply(Object):void (21 bytes)   relevance-based (relevance=1.000000, probability=2.101394, bonus=1.000000, nodes=28 <= 300.000000)
                                          @ 36  som.Vector.forEach(ForEachInterface):void (32 bytes)   relevance-based (relevance=1.000000, probability=0.250000, bonus=1.000000, nodes=41 <= 300.000000)
                                        @ 5  som.Vector.remove(Object):boolean (61 bytes)   relevance-based (relevance=2.000000, probability=0.250000, bonus=1.000000, nodes=73 <= 300.000000)
                                      @ 12  deltablue.Variable.removeConstraint(AbstractConstraint):void (23 bytes)   relevance-based (relevance=1.000000, probability=0.250000, bonus=1.000000, nodes=90 <= 300.000000)
                                    @ 10  deltablue.UnaryConstraint.removeFromGraph():void (21 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=100 <= 300.000000)
                            @ 4  som.Vector.<init>():void (7 bytes)   inline method (bytecode parsing)
                              @ 3  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 10  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 14  deltablue.Strength.absoluteWeakest():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 17  deltablue.Variable.setWalkStrength(Strength):void (6 bytes)   inline method (bytecode parsing)
                            @ 22  deltablue.Variable.setStay(boolean):void (6 bytes)   inline method (bytecode parsing)
                            @ 48  deltablue.Variable.getConstraints():Vector (5 bytes)   inline accessor method (bytecode parsing)
                            @ 52  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.Planner$$Lambda/0x00007f86741952b8.<init>(Vector):void (10 bytes)   inline method (bytecode parsing)
                            @ 64  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.Planner$$Lambda/0x00007f86741954d8.<init>(Vector):void (10 bytes)   inline method (bytecode parsing)
                            @ 76  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object):Object (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.lang.invoke.LambdaForm$MH/0x00007f8674000800.invoke(Object):Object (8 bytes)   inline method (bytecode parsing)
                                    @ 15  deltablue.Planner.removePropagateFrom(Variable):Vector (86 bytes)   not inlining too large previous low-level graph (low-level-nodes: 770, relevance=2.000000, probability=0.500000, bonus=1.000000, nodes=81)
                            @ 8  deltablue.Planner.lambda$incrementalRemove$0(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                                          @ 1  deltablue.Planner.newMark():int (15 bytes)   relevance-based (relevance=1.000000, probability=4.202787, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f867403aa08.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 8  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 690, relevance=1.000000, probability=4.202787, bonus=1.000000, nodes=72)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f867403aa08.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 19  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 690, relevance=1.000000, probability=4.214682, bonus=1.000000, nodes=72)
                                        @ 2  deltablue.Planner.incrementalAdd(AbstractConstraint):void (27 bytes)   relevance-based (relevance=1.000000, probability=4.202787, bonus=1.000000, nodes=28 <= 300.000000)
                                      @ 20  deltablue.Planner$$Lambda/0x00007f8674195ba8.apply(Object):void (12 bytes)   relevance-based (relevance=1.000000, probability=4.202787, bonus=1.000000, nodes=37 <= 300.000000)
                                    @ 26  som.Vector.forEach(ForEachInterface):void (32 bytes)   not inlining callee invoke probability is too high (invokeP=16.834938, relevance=2.000000, probability=0.500000, bonus=1.000000, nodes=53)
                                  @ 9  deltablue.Planner.incrementalRemove(AbstractConstraint):void (30 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=121 <= 300.000000)
                            @ 1  som.Vector.capacity():int (6 bytes)   inline method (bytecode parsing)
                            @ 31  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object, Object, Object, Object):Object (13 bytes)   inline method (bytecode parsing)
                              @ 9  java.lang.invoke.LambdaForm$DMH/0x00007f867412c000.newInvokeSpecial(Object, Object, Object, Object, Object):Object (30 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 7  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                        @ 24  som.Vector$$Lambda/0x00007f8674195098.<init>(Object, boolean[], Object[], int[]):void (26 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=17 <= 300.000000)
                                            @ 17  som.Vector.lambda$remove$0(Object, boolean[], Object[], int[], Object):void (28 bytes)   relevance-based (relevance=1.000000, probability=4.202787, bonus=1.000000, nodes=26 <= 300.000000)
                                          @ 20  som.Vector$$Lambda/0x00007f8674195098.apply(Object):void (21 bytes)   relevance-based (relevance=1.000000, probability=4.202787, bonus=1.000000, nodes=28 <= 300.000000)
                                        @ 36  som.Vector.forEach(ForEachInterface):void (32 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=41 <= 300.000000)
                                      @ 5  som.Vector.remove(Object):boolean (61 bytes)   relevance-based (relevance=2.000000, probability=0.500000, bonus=1.000000, nodes=73 <= 300.000000)
                                    @ 12  deltablue.Variable.removeConstraint(AbstractConstraint):void (23 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=90 <= 300.000000)
                                  @ 13  deltablue.UnaryConstraint.removeFromGraph():void (21 bytes)   relevance-based (relevance=4.000000, probability=1.000000, bonus=1.000000, nodes=100 <= 300.000000)
                                @ 55  deltablue.AbstractConstraint.destroyConstraint(Planner):void (17 bytes)   relevance-based (relevance=1.000124, probability=1.000000, bonus=1.000000, nodes=224 <= 300.000000)
                              @ 225  deltablue.Planner.change(Variable, int):void (59 bytes)   not inlining relevance-based (relevance=1.000141, probability=1.000000, bonus=1.000000, nodes=412 > 300.000000)
                              @ 181  som.Vector.at(int):Object (18 bytes)   relevance-based (relevance=1.000000, probability=59990.250000, bonus=1.000000, nodes=10 <= 300.000000)
                              @ 242  som.Vector.at(int):Object (18 bytes)   relevance-based (relevance=1.000000, probability=62551.000000, bonus=1.000000, nodes=10 <= 300.000000)
                                @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.999675, bonus=1.000000, nodes=5)
                              @ 6  java.lang.String.length():int (11 bytes)   trivial (relevance=1.006864, probability=0.999675, bonus=1.000000, nodes=8)
                                @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.999675, bonus=1.000000, nodes=5)
                              @ 10  java.lang.String.length():int (11 bytes)   trivial (relevance=1.006864, probability=0.999675, bonus=1.000000, nodes=8)
                              @ 39  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.992861, bonus=1.000000, nodes=5)
                              @ 47  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.992861, bonus=1.000000, nodes=5)
                              @ 70  jdk.internal.util.ArraysSupport.mismatch(byte[], int, byte[], int, int):int (103 bytes)   relevance-based (relevance=1.000000, probability=0.992861, bonus=1.000000, nodes=62 <= 300.000000)
                                  @ 13  java.util.ArrayDeque.sub(int, int, int):int (14 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=18 <= 300.000000)
                                @ 14  java.util.ArrayDeque.size():int (17 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=21 <= 300.000000)
                              @ 5  java.util.ArrayDeque$DeqIterator.<init>(ArrayDeque):void (34 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=38 <= 300.000000)
                            @ 58  java.util.Formatter$Flags.contains(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                                @ 89  java.lang.String.toString():String (2 bytes)   trivial (relevance=0.651006, probability=0.216732, bonus=1.000000, nodes=4)
                            @ 34  java.util.Formatter$Flags.contains(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                                @ 93  java.util.Formatter$FormatSpecifier.print(Formatter, String, Locale):void (57 bytes)   not inlining too large previous low-level graph (low-level-nodes: 368, relevance=0.651006, probability=0.216732, bonus=1.000000, nodes=19)
                              @ 176  java.util.Formatter$FormatSpecifier.printString(Formatter, Object, Locale):void (97 bytes)   relevance-based (relevance=0.651006, probability=0.216732, bonus=1.000000, nodes=27 <= 195.301910)
                              @ 146  java.util.Formatter$FormatSpecifier.printFloat(Formatter, Object, Locale):void (91 bytes)   not inlining too large previous low-level graph (low-level-nodes: 592, relevance=1.000000, probability=0.332919, bonus=1.000000, nodes=23)
                            @ 4  java.lang.StringBuilder.<init>():void (7 bytes)   inline method (bytecode parsing)
                                    @ 3  java.lang.AbstractStringBuilder.<init>(int):void (39 bytes)   relevance-based (relevance=0.447840, probability=0.149095, bonus=1.000000, nodes=11 <= 134.352063)
                            @ 28  java.lang.String.<init>(byte[], byte):void (15 bytes)   inline method (bytecode parsing)
                                        @ 1  java.lang.Long.stringSize(long):int (55 bytes)   relevance-based (relevance=0.447840, probability=0.149095, bonus=1.000000, nodes=34 <= 134.352063)
                                        @ 18  java.lang.Long.getChars(long, int, byte[]):int (195 bytes)   relevance-based (relevance=0.447840, probability=0.149095, bonus=1.000000, nodes=61 <= 134.352063)
                                      @ 21  java.lang.Long.toString(long):String (55 bytes)   relevance-based (relevance=0.447840, probability=0.149095, bonus=1.000000, nodes=95 <= 134.352063)
                                    @ 34  java.lang.Long.toString(long, int):String (139 bytes)   relevance-based (relevance=0.447840, probability=0.149095, bonus=1.000000, nodes=97 <= 134.352063)
                            @ 10  java.util.Formatter$Flags.contains(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 32  java.util.Formatter$Flags.contains(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                                    @ 44  java.util.Formatter$FormatSpecifier.leadingSign(StringBuilder, boolean):StringBuilder (80 bytes)   relevance-based (relevance=0.447840, probability=0.149095, bonus=1.000000, nodes=13 <= 134.352063)
                                    @ 79  java.util.Formatter$FormatSpecifier.adjustWidth(int, int, boolean):int (29 bytes)   trivial (relevance=0.447840, probability=0.149095, bonus=1.000000, nodes=9)
                            @ 13  java.lang.StringBuilder.length():int (5 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.AbstractStringBuilder.length():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 101  java.util.Formatter$Flags.contains(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 261  java.lang.StringBuilder.append(char):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 291  java.lang.StringBuilder.append(char):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 337  java.lang.StringBuilder.length():int (5 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.AbstractStringBuilder.length():int (5 bytes)   inline accessor method (bytecode parsing)
                                    @ 84  java.util.Formatter$FormatSpecifier.localizedMagnitude(Formatter, StringBuilder, CharSequence, int, int, int, Locale):StringBuilder (381 bytes)   not inlining too large previous low-level graph (low-level-nodes: 981, relevance=0.447840, probability=0.149095, bonus=1.000000, nodes=94)
                                    @ 93  java.util.Formatter$FormatSpecifier.trailingSign(StringBuilder, boolean):StringBuilder (26 bytes)   trivial (relevance=0.447840, probability=0.149095, bonus=1.000000, nodes=6)
                            @ 2  java.lang.StringBuilder.append(CharSequence):StringBuilder (8 bytes)   inline method (bytecode parsing)
                                          @ 37  java.lang.AbstractStringBuilder.append(AbstractStringBuilder):AbstractStringBuilder (70 bytes)   not inlining too large previous low-level graph (low-level-nodes: 352, relevance=0.447840, probability=0.149095, bonus=1.000000, nodes=31)
                                        @ 2  java.lang.AbstractStringBuilder.append(CharSequence):AbstractStringBuilder (54 bytes)   trivial (relevance=0.447840, probability=0.149095, bonus=1.000000, nodes=8)
                                      @ 10  java.lang.StringBuilder.append(CharSequence):Appendable (6 bytes)   relevance-based (relevance=0.447840, probability=0.149095, bonus=1.000000, nodes=10 <= 134.352063)
                                    @ 353  java.util.Formatter$FormatSpecifier.appendJustified(Appendable, CharSequence):void (89 bytes)   relevance-based (relevance=0.447840, probability=0.149095, bonus=1.000000, nodes=24 <= 134.352063)
                                  @ 62  java.util.Formatter$FormatSpecifier.print(Formatter, long, Locale):void (357 bytes)   not inlining relevance-based (relevance=0.447840, probability=0.149095, bonus=1.000000, nodes=145 > 134.352063)
                                @ 78  java.util.Formatter$FormatSpecifier.print(Formatter, int, Locale):void (66 bytes)   relevance-based (relevance=0.447840, probability=0.149095, bonus=1.000000, nodes=14 <= 134.352063)
                              @ 136  java.util.Formatter$FormatSpecifier.printInteger(Formatter, Object, Locale):void (137 bytes)   relevance-based (relevance=0.447840, probability=0.149095, bonus=1.000000, nodes=30 <= 134.352063)
                            @ 27  java.lang.Character.toString():String (8 bytes)   inline method (bytecode parsing)
                            @ 18  java.lang.StringLatin1.toBytes(char):byte[] (9 bytes)   inline method (bytecode parsing)
                            @ 22  java.lang.String.<init>(byte[], byte):void (15 bytes)   inline method (bytecode parsing)
                                  @ 7  java.lang.StringLatin1.canEncode(int):boolean (13 bytes)   trivial (relevance=0.904887, probability=0.301254, bonus=1.000000, nodes=8)
                                @ 4  java.lang.String.valueOf(char):String (39 bytes)   relevance-based (relevance=0.904887, probability=0.301254, bonus=1.000000, nodes=22 <= 271.466203)
                            @ 34  java.util.Formatter$Flags.contains(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                                @ 211  java.util.Formatter$FormatSpecifier.print(Formatter, String, Locale):void (57 bytes)   not inlining too large previous low-level graph (low-level-nodes: 368, relevance=0.904887, probability=0.301254, bonus=1.000000, nodes=19)
                              @ 156  java.util.Formatter$FormatSpecifier.printCharacter(Formatter, Object, Locale):void (215 bytes)   relevance-based (relevance=0.904887, probability=0.301254, bonus=1.000000, nodes=41 <= 271.466203)
                            @ 17  java.lang.Enum.ordinal():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 4  java.util.BitSet.wordIndex(int):int (5 bytes)   inline method (bytecode parsing)
                                @ 2  java.util.EnumSet.typeCheck(Enum):void (59 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=9)
                              @ 5  java.util.RegularEnumSet.add(Enum):boolean (40 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=20 <= 300.000000)
                            @ 4  java.util.BitSet.wordIndex(int):int (5 bytes)   inline method (bytecode parsing)
                            @ 5  java.util.Objects.checkIndex(int, int):int (7 bytes)   inline method (bytecode parsing)
                              @ 47  java.util.BitSet.initWords(int):void (15 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=14 <= 300.000000)
                            @ 11  java.util.ArrayList.elementData(int):Object (7 bytes)   inline method (bytecode parsing)
                                  @ 25  java.lang.Math.min(int, int):int (11 bytes)   trivial (relevance=0.406041, probability=0.246474, bonus=1.000000, nodes=7)
                                @ 21  java.util.Arrays.copyOf(long[], int):long[] (33 bytes)   relevance-based (relevance=0.406037, probability=0.246474, bonus=1.000000, nodes=21 <= 121.811100)
                                @ 28  java.util.BitSet.checkInvariants():void (111 bytes)   trivial (relevance=0.406033, probability=0.246472, bonus=1.000000, nodes=4)
                              @ 8  java.util.BitSet.trimToSize():void (32 bytes)   relevance-based (relevance=1.000000, probability=0.853498, bonus=1.000000, nodes=34 <= 300.000000)
                              @ 34  java.util.BitSet.checkInvariants():void (111 bytes)   trivial (relevance=1.647378, probability=0.999998, bonus=1.000000, nodes=4)
                                @ 37  java.lang.AbstractStringBuilder.append(AbstractStringBuilder):AbstractStringBuilder (70 bytes)   not inlining too large previous low-level graph (low-level-nodes: 352, relevance=1.000000, probability=0.555973, bonus=1.000000, nodes=31)
                            @ 2  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                                      @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=0.798647, probability=0.444027, bonus=1.000000, nodes=5)
                                    @ 10  java.lang.String.length():int (11 bytes)   trivial (relevance=0.798647, probability=0.444027, bonus=1.000000, nodes=8)
                            @ 5  jdk.graal.compiler.nodes.java.NewArrayNode.newUninitializedArray(Class, int):Object (7 bytes)   inline method (bytecode parsing)
                            @ 27  jdk.graal.compiler.replacements.arraycopy.ArrayCopyCallNode.disjointArraycopy(Object, int, Object, int, int, JavaKind, int):void (17 bytes)   inline method (bytecode parsing)
                                          @ 3  java.lang.Math.max(int, int):int (11 bytes)   trivial (relevance=0.132601, probability=0.063225, bonus=1.000000, nodes=7)
                                        @ 29  jdk.internal.util.ArraysSupport.newLength(int, int, int):int (27 bytes)   relevance-based (relevance=0.132601, probability=0.063225, bonus=1.000000, nodes=15 <= 39.780203)
                                      @ 24  java.lang.AbstractStringBuilder.newCapacity(int):int (59 bytes)   relevance-based (relevance=0.132601, probability=0.063225, bonus=1.000000, nodes=27 <= 39.780203)
                                        @ 25  java.lang.Math.min(int, int):int (11 bytes)   trivial (relevance=0.132602, probability=0.063217, bonus=1.000000, nodes=7)
                                      @ 32  java.util.Arrays.copyOf(byte[], int):byte[] (33 bytes)   relevance-based (relevance=0.132601, probability=0.063225, bonus=1.000000, nodes=28 <= 39.780203)
                                    @ 21  java.lang.AbstractStringBuilder.ensureCapacityInternal(int):void (39 bytes)   relevance-based (relevance=0.798647, probability=0.444027, bonus=1.000000, nodes=72 <= 239.594111)
                                        @ 11  java.lang.String.coder():byte (15 bytes)   trivial (relevance=0.931246, probability=0.444026, bonus=1.000000, nodes=5)
                                      @ 2  java.lang.AbstractStringBuilder.inflateIfNeededFor(String):void (22 bytes)   relevance-based (relevance=0.931246, probability=0.444026, bonus=1.000000, nodes=12 <= 279.373916)
                            @ 23  jdk.graal.compiler.replacements.AllocationSnippets.allocateArrayImpl(Word, int, int, int, AllocationSnippets$FillContent, int, boolean, boolean, boolean, boolean, AllocationSnippets$AllocationProfilingData):Object (178 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getTLABInfo():Word (5 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getThread():Word (8 bytes)   inline method (bytecode parsing)
                                  @ 4  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.registerAsWord(Register):Word (7 bytes)   inline method (bytecode parsing)
                              @ 9  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.readTlabTop(Word):Word (5 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.readTlabTop(Word):Word (17 bytes)   inline method (bytecode parsing)
                                        @ 1  java.lang.String.coder():byte (15 bytes)   trivial (relevance=0.931256, probability=0.444026, bonus=1.000000, nodes=5)
                              @ 17  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.readTlabEnd(Word):Word (5 bytes)   inline method (bytecode parsing)
                                      @ 15  java.lang.String.getBytes(byte[], int, byte):void (44 bytes)   relevance-based (relevance=0.931246, probability=0.444026, bonus=1.000000, nodes=26 <= 279.373916)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.readTlabEnd(Word):Word (17 bytes)   inline method (bytecode parsing)
                                    @ 30  java.lang.AbstractStringBuilder.putStringAt(int, String):void (19 bytes)   relevance-based (relevance=0.931246, probability=0.444026, bonus=1.000000, nodes=37 <= 279.373916)
                              @ 36  jdk.graal.compiler.replacements.ReplacementsUtil.dynamicAssert(boolean, String):void (12 bytes)   inline method (bytecode parsing)
                                  @ 2  java.lang.AbstractStringBuilder.append(String):AbstractStringBuilder (45 bytes)   relevance-based (relevance=0.798647, probability=0.444027, bonus=1.000000, nodes=118 <= 239.594111)
                              @ 44  jdk.graal.compiler.replacements.AllocationSnippets.arrayAllocationSize(int, int, int):UnsignedWord (18 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.objectAlignment():int (7 bytes)   inline method (bytecode parsing)
                                @ 11  jdk.graal.compiler.replacements.AllocationSnippets.arrayAllocationSize(int, int, int, int):long (32 bytes)   inline method (bytecode parsing)
                              @ 59  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.useTLAB():boolean (7 bytes)   inline method (bytecode parsing)
                                @ 21  java.lang.StringBuilder.append(String):AbstractStringBuilder (6 bytes)   relevance-based (relevance=0.798647, probability=0.444027, bonus=1.000000, nodes=120 <= 239.594111)
                              @ 72  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.shouldAllocateInTLAB(UnsignedWord, boolean):boolean (33 bytes)   inline method (bytecode parsing)
                              @ 102  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.writeTlabTop(Word, Word):void (6 bytes)   inline method (bytecode parsing)
                                @ 2  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.writeTlabTop(Word, Word):void (15 bytes)   inline method (bytecode parsing)
                              @ 109  jdk.graal.compiler.replacements.AllocationSnippets.emitPrefetchAllocate(Word, boolean):void (61 bytes)   inline method (bytecode parsing)
                              @ 2  java.lang.AbstractStringBuilder.append(CharSequence):AbstractStringBuilder (54 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=140 <= 300.000000)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getPrefetchStyle():int (7 bytes)   inline method (bytecode parsing)
                                @ 9  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getPrefetchLines(boolean):int (18 bytes)   inline method (bytecode parsing)
                                @ 14  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getPrefetchStepSize():int (7 bytes)   inline method (bytecode parsing)
                                @ 20  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getPrefetchDistance():int (7 bytes)   inline method (bytecode parsing)
                              @ 136  jdk.graal.compiler.replacements.AllocationSnippets.formatArray(Word, UnsignedWord, int, Word, AllocationSnippets$FillContent, boolean, int, boolean, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):Object (53 bytes)   inline method (bytecode parsing)
                                @ 5  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.initializeObjectHeader(Word, Word, boolean):void (29 bytes)   inline method (bytecode parsing)
                                  @ 25  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.initializeObjectHeader(Word, Word, KlassPointer):void (20 bytes)   inline method (bytecode parsing)
                                @ 11  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.arrayLengthOffset():int (7 bytes)   inline method (bytecode parsing)
                                @ 15  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                                @ 38  jdk.graal.compiler.replacements.AllocationSnippets.fillContents(Word, AllocationSnippets$FillContent, int, UnsignedWord, boolean, boolean, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):void (58 bytes)   inline method (bytecode parsing)
                                @ 44  jdk.graal.compiler.replacements.AllocationSnippets.emitMemoryBarrierIf(boolean):void (14 bytes)   inline method (bytecode parsing)
                                  @ 7  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                              @ 152  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                              @ 158  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.callNewArrayStub(Word, int):Object (35 bytes)   inline method (bytecode parsing)
                                @ 22  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.nonNullOrDeopt(Object):Object (27 bytes)   inline method (bytecode parsing)
                              @ 168  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.profileAllocation(AllocationSnippets$AllocationProfilingData, UnsignedWord):void (51 bytes)   inline method (bytecode parsing)
                              @ 174  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.verifyOop(Object):Object (5 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.verifyOop(Object):Object (19 bytes)   inline method (bytecode parsing)
                              @ 51  jdk.internal.misc.Unsafe.allocateUninitializedArray0(Class, int):Object (90 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=9)
                                @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                              @ 2  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=8)
                                @ 1  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000010, probability=1.000000, bonus=1.000000, nodes=5)
                              @ 21  java.lang.String.getBytes(byte[], int, byte):void (44 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=24 <= 300.000000)
                            @ 2  java.lang.StringBuilder.append(CharSequence):StringBuilder (8 bytes)   inline method (bytecode parsing)
                                @ 37  java.lang.AbstractStringBuilder.append(AbstractStringBuilder):AbstractStringBuilder (70 bytes)   not inlining too large previous low-level graph (low-level-nodes: 352, relevance=1.000000, probability=0.556776, bonus=1.000000, nodes=31)
                            @ 2  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                                      @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=0.796053, probability=0.443224, bonus=1.000000, nodes=5)
                                    @ 10  java.lang.String.length():int (11 bytes)   trivial (relevance=0.796053, probability=0.443224, bonus=1.000000, nodes=8)
                            @ 2  java.lang.StringBuilder.append(CharSequence):StringBuilder (8 bytes)   inline method (bytecode parsing)
                                  @ 37  java.lang.AbstractStringBuilder.append(AbstractStringBuilder):AbstractStringBuilder (70 bytes)   not inlining too large previous low-level graph (low-level-nodes: 352, relevance=1.000000, probability=0.556776, bonus=1.000000, nodes=31)
                                          @ 3  java.lang.Math.max(int, int):int (11 bytes)   trivial (relevance=0.132170, probability=0.063111, bonus=1.000000, nodes=7)
                            @ 2  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                                        @ 29  jdk.internal.util.ArraysSupport.newLength(int, int, int):int (27 bytes)   relevance-based (relevance=0.132170, probability=0.063111, bonus=1.000000, nodes=15 <= 39.651018)
                                      @ 24  java.lang.AbstractStringBuilder.newCapacity(int):int (59 bytes)   relevance-based (relevance=0.132170, probability=0.063111, bonus=1.000000, nodes=27 <= 39.651018)
                                        @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=0.796053, probability=0.443224, bonus=1.000000, nodes=5)
                                      @ 10  java.lang.String.length():int (11 bytes)   trivial (relevance=0.796053, probability=0.443224, bonus=1.000000, nodes=8)
                                        @ 25  java.lang.Math.min(int, int):int (11 bytes)   trivial (relevance=0.132171, probability=0.063102, bonus=1.000000, nodes=7)
                                      @ 32  java.util.Arrays.copyOf(byte[], int):byte[] (33 bytes)   relevance-based (relevance=0.132170, probability=0.063111, bonus=1.000000, nodes=28 <= 39.651018)
                                    @ 21  java.lang.AbstractStringBuilder.ensureCapacityInternal(int):void (39 bytes)   relevance-based (relevance=0.796053, probability=0.443224, bonus=1.000000, nodes=72 <= 238.816034)
                                            @ 3  java.lang.Math.max(int, int):int (11 bytes)   trivial (relevance=0.132170, probability=0.063111, bonus=1.000000, nodes=7)
                                          @ 29  jdk.internal.util.ArraysSupport.newLength(int, int, int):int (27 bytes)   relevance-based (relevance=0.132170, probability=0.063111, bonus=1.000000, nodes=15 <= 39.651018)
                                        @ 24  java.lang.AbstractStringBuilder.newCapacity(int):int (59 bytes)   relevance-based (relevance=0.132170, probability=0.063111, bonus=1.000000, nodes=27 <= 39.651018)
                                        @ 11  java.lang.String.coder():byte (15 bytes)   trivial (relevance=0.928222, probability=0.443223, bonus=1.000000, nodes=5)
                                      @ 2  java.lang.AbstractStringBuilder.inflateIfNeededFor(String):void (22 bytes)   relevance-based (relevance=0.928222, probability=0.443223, bonus=1.000000, nodes=12 <= 278.466655)
                                          @ 25  java.lang.Math.min(int, int):int (11 bytes)   trivial (relevance=0.132171, probability=0.063102, bonus=1.000000, nodes=7)
                                        @ 1  java.lang.String.coder():byte (15 bytes)   trivial (relevance=0.928231, probability=0.443223, bonus=1.000000, nodes=5)
                                        @ 32  java.util.Arrays.copyOf(byte[], int):byte[] (33 bytes)   relevance-based (relevance=0.132170, probability=0.063111, bonus=1.000000, nodes=28 <= 39.651018)
                                      @ 15  java.lang.String.getBytes(byte[], int, byte):void (44 bytes)   relevance-based (relevance=0.928222, probability=0.443223, bonus=1.000000, nodes=26 <= 278.466655)
                                    @ 30  java.lang.AbstractStringBuilder.putStringAt(int, String):void (19 bytes)   relevance-based (relevance=0.928222, probability=0.443223, bonus=1.000000, nodes=37 <= 278.466655)
                                      @ 21  java.lang.AbstractStringBuilder.ensureCapacityInternal(int):void (39 bytes)   relevance-based (relevance=0.796053, probability=0.443224, bonus=1.000000, nodes=72 <= 238.816034)
                                  @ 2  java.lang.AbstractStringBuilder.append(String):AbstractStringBuilder (45 bytes)   relevance-based (relevance=0.796053, probability=0.443224, bonus=1.000000, nodes=118 <= 238.816034)
                                @ 21  java.lang.StringBuilder.append(String):AbstractStringBuilder (6 bytes)   relevance-based (relevance=0.796053, probability=0.443224, bonus=1.000000, nodes=120 <= 238.816034)
                                          @ 11  java.lang.String.coder():byte (15 bytes)   trivial (relevance=0.928222, probability=0.443223, bonus=1.000000, nodes=5)
                                        @ 2  java.lang.AbstractStringBuilder.inflateIfNeededFor(String):void (22 bytes)   relevance-based (relevance=0.928222, probability=0.443223, bonus=1.000000, nodes=12 <= 278.466655)
                              @ 2  java.lang.AbstractStringBuilder.append(CharSequence):AbstractStringBuilder (54 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=140 <= 300.000000)
                                          @ 1  java.lang.String.coder():byte (15 bytes)   trivial (relevance=0.928231, probability=0.443223, bonus=1.000000, nodes=5)
                                        @ 15  java.lang.String.getBytes(byte[], int, byte):void (44 bytes)   relevance-based (relevance=0.928222, probability=0.443223, bonus=1.000000, nodes=26 <= 278.466655)
                                      @ 30  java.lang.AbstractStringBuilder.putStringAt(int, String):void (19 bytes)   relevance-based (relevance=0.928222, probability=0.443223, bonus=1.000000, nodes=37 <= 278.466655)
                                    @ 2  java.lang.AbstractStringBuilder.append(String):AbstractStringBuilder (45 bytes)   relevance-based (relevance=0.796053, probability=0.443224, bonus=1.000000, nodes=118 <= 238.816034)
                                  @ 21  java.lang.StringBuilder.append(String):AbstractStringBuilder (6 bytes)   relevance-based (relevance=0.796053, probability=0.443224, bonus=1.000000, nodes=120 <= 238.816034)
                                @ 2  java.lang.AbstractStringBuilder.append(CharSequence):AbstractStringBuilder (54 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=140 <= 300.000000)
                              @ 10  java.lang.StringBuilder.append(CharSequence):Appendable (6 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=146 <= 300.000000)
                            @ 4  deltablue.Planner.<init>():void (10 bytes)   inline method (bytecode parsing)
                            @ 12  som.Vector.<init>():void (7 bytes)   inline method (bytecode parsing)
                              @ 3  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 18  deltablue.Variable.value(int):Variable (15 bytes)   inline method (bytecode parsing)
                              @ 10  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 25  deltablue.Variable.value(int):Variable (15 bytes)   inline method (bytecode parsing)
                              @ 10  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 75  deltablue.StayConstraint.<init>(Variable, Strength$Sym, Planner):void (8 bytes)   inline method (bytecode parsing)
                              @ 4  deltablue.UnaryConstraint.<init>(Variable, Strength$Sym, Planner):void (16 bytes)   inline method (bytecode parsing)
                                @ 2  deltablue.AbstractConstraint.<init>(Strength$Sym):void (13 bytes)   inline method (bytecode parsing)
                                  @ 6  deltablue.Strength.of(Strength$Sym):Strength (11 bytes)   inline method (bytecode parsing)
                                @ 12  deltablue.AbstractConstraint.addConstraint(Planner):void (10 bytes)   inline method (bytecode parsing)
                            @ 114  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 144  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 187  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 248  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 15  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 27  deltablue.Strength.absoluteWeakest():Strength (4 bytes)   inline method (bytecode parsing)
                              @ 4  deltablue.Variable.<init>():void (44 bytes)   not inlining too large previous low-level graph (low-level-nodes: 356, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=27)
                            @ 15  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 27  deltablue.Strength.absoluteWeakest():Strength (4 bytes)   inline method (bytecode parsing)
                              @ 4  deltablue.Variable.<init>():void (44 bytes)   not inlining too large previous low-level graph (low-level-nodes: 356, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=27)
                            @ 10  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 15  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                              @ 37  java.lang.AbstractStringBuilder.append(AbstractStringBuilder):AbstractStringBuilder (70 bytes)   not inlining too large previous low-level graph (low-level-nodes: 352, relevance=1.000000, probability=0.556776, bonus=1.000000, nodes=31)
                            @ 27  deltablue.Strength.absoluteWeakest():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 2  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                                @ 4  deltablue.Variable.<init>():void (44 bytes)   not inlining too large previous low-level graph (low-level-nodes: 356, relevance=1.000000, probability=64055.555556, bonus=1.000000, nodes=27)
                              @ 47  deltablue.Variable.value(int):Variable (15 bytes)   relevance-based (relevance=1.000000, probability=64055.555556, bonus=1.000000, nodes=11 <= 300.000000)
                            @ 10  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 15  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 27  deltablue.Strength.absoluteWeakest():Strength (4 bytes)   inline method (bytecode parsing)
                                    @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=0.796053, probability=0.443224, bonus=1.000000, nodes=5)
                                @ 4  deltablue.Variable.<init>():void (44 bytes)   not inlining too large previous low-level graph (low-level-nodes: 356, relevance=1.000000, probability=64055.555556, bonus=1.000000, nodes=27)
                              @ 54  deltablue.Variable.value(int):Variable (15 bytes)   relevance-based (relevance=1.000000, probability=64055.555556, bonus=1.000000, nodes=11 <= 300.000000)
                                  @ 10  java.lang.String.length():int (11 bytes)   trivial (relevance=0.796053, probability=0.443224, bonus=1.000000, nodes=8)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000124, probability=7.960443, bonus=1.000000, nodes=41 > 0.037287)
                                        @ 3  java.lang.Math.max(int, int):int (11 bytes)   trivial (relevance=0.132170, probability=0.063111, bonus=1.000000, nodes=7)
                              @ 62  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=64055.555556, bonus=1.000000, nodes=35 <= 300.000000)
                                      @ 29  jdk.internal.util.ArraysSupport.newLength(int, int, int):int (27 bytes)   relevance-based (relevance=0.132170, probability=0.063111, bonus=1.000000, nodes=15 <= 39.651018)
                                    @ 24  java.lang.AbstractStringBuilder.newCapacity(int):int (59 bytes)   relevance-based (relevance=0.132170, probability=0.063111, bonus=1.000000, nodes=27 <= 39.651018)
                                      @ 25  java.lang.Math.min(int, int):int (11 bytes)   trivial (relevance=0.132171, probability=0.063102, bonus=1.000000, nodes=7)
                                    @ 32  java.util.Arrays.copyOf(byte[], int):byte[] (33 bytes)   relevance-based (relevance=0.132170, probability=0.063111, bonus=1.000000, nodes=28 <= 39.651018)
                                  @ 7  deltablue.Strength$Sym.customHash():int (5 bytes)   trivial (relevance=1.000000, probability=64055.555556, bonus=1.000000, nodes=5)
                                  @ 21  java.lang.AbstractStringBuilder.ensureCapacityInternal(int):void (39 bytes)   relevance-based (relevance=0.796053, probability=0.443224, bonus=1.000000, nodes=72 <= 238.816034)
                                @ 1  som.Dictionary.hash(Dictionary$CustomHash):int (20 bytes)   trivial (relevance=1.000000, probability=64055.555556, bonus=1.000000, nodes=5)
                            @ 6  som.Dictionary.getBucketIdx(int):int (10 bytes)   inline method (bytecode parsing)
                                @ 7  som.Dictionary.getBucket(int):Dictionary$Entry (11 bytes)   relevance-based (relevance=1.000000, probability=64055.555556, bonus=1.000000, nodes=11 <= 300.000000)
                                      @ 11  java.lang.String.coder():byte (15 bytes)   trivial (relevance=0.928222, probability=0.443223, bonus=1.000000, nodes=5)
                                    @ 2  java.lang.AbstractStringBuilder.inflateIfNeededFor(String):void (22 bytes)   relevance-based (relevance=0.928222, probability=0.443223, bonus=1.000000, nodes=12 <= 278.466655)
                                @ 18  som.IdentityDictionary$IdEntry.match(int, Object):boolean (22 bytes)   relevance-based (relevance=1.000000, probability=64055.555556, bonus=1.000000, nodes=13 <= 300.000000)
                                      @ 1  java.lang.String.coder():byte (15 bytes)   trivial (relevance=0.928231, probability=0.443223, bonus=1.000000, nodes=5)
                                    @ 15  java.lang.String.getBytes(byte[], int, byte):void (44 bytes)   relevance-based (relevance=0.928222, probability=0.443223, bonus=1.000000, nodes=26 <= 278.466655)
                              @ 4  som.Dictionary.at(Dictionary$CustomHash):Object (39 bytes)   relevance-based (relevance=1.000124, probability=64055.555556, bonus=1.000000, nodes=28 <= 300.000000)
                                  @ 30  java.lang.AbstractStringBuilder.putStringAt(int, String):void (19 bytes)   relevance-based (relevance=0.928222, probability=0.443223, bonus=1.000000, nodes=37 <= 278.466655)
                                @ 2  java.lang.AbstractStringBuilder.append(String):AbstractStringBuilder (45 bytes)   relevance-based (relevance=0.796053, probability=0.443224, bonus=1.000000, nodes=118 <= 238.816034)
                            @ 5  deltablue.Variable.addConstraint(AbstractConstraint):void (9 bytes)   inline method (bytecode parsing)
                              @ 21  java.lang.StringBuilder.append(String):AbstractStringBuilder (6 bytes)   relevance-based (relevance=0.796053, probability=0.443224, bonus=1.000000, nodes=120 <= 238.816034)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                  @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000124, probability=7.960443, bonus=1.000000, nodes=41 > 0.037287)
                                @ 5  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=64055.555556, bonus=1.000000, nodes=35 <= 300.000000)
                              @ 1  deltablue.UnaryConstraint.addToGraph():void (14 bytes)   relevance-based (relevance=1.000124, probability=64055.555556, bonus=1.000000, nodes=47 <= 300.000000)
                                @ 1  deltablue.Planner.newMark():int (15 bytes)   relevance-based (relevance=1.000000, probability=64055.555556, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f867403aa08.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                @ 8  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 690, relevance=1.000000, probability=64055.555556, bonus=1.000000, nodes=72)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f867403aa08.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                @ 19  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 690, relevance=1.000000, probability=64236.841160, bonus=1.000000, nodes=72)
                              @ 6  deltablue.Planner.incrementalAdd(AbstractConstraint):void (27 bytes)   relevance-based (relevance=1.000124, probability=64055.555556, bonus=1.000000, nodes=28 <= 300.000000)
                            @ 24  deltablue.AbstractConstraint.addConstraint(Planner):void (10 bytes)   inline method (bytecode parsing)
                              @ 94  deltablue.ScaleConstraint.<init>(Variable, Variable, Variable, Variable, Strength$Sym, Planner):void (28 bytes)   not inlining too large previous low-level graph (low-level-nodes: 1395, relevance=1.000124, probability=64055.555556, bonus=1.000000, nodes=25)
                            @ 9  deltablue.EditConstraint.<init>(Variable, Strength$Sym, Planner):void (8 bytes)   inline method (bytecode parsing)
                              @ 4  deltablue.UnaryConstraint.<init>(Variable, Strength$Sym, Planner):void (16 bytes)   inline method (bytecode parsing)
                                @ 2  deltablue.AbstractConstraint.<init>(Strength$Sym):void (13 bytes)   inline method (bytecode parsing)
                                  @ 6  deltablue.Strength.of(Strength$Sym):Strength (11 bytes)   inline method (bytecode parsing)
                                @ 12  deltablue.AbstractConstraint.addConstraint(Planner):void (10 bytes)   inline method (bytecode parsing)
                            @ 39  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 44  deltablue.Plan.execute():void (10 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object):Object (8 bytes)   inline method (bytecode parsing)
                                @ 4  java.lang.invoke.LambdaForm$MH/0x00007f8674000800.invoke(Object):Object (8 bytes)   inline method (bytecode parsing)
                                    @ 7  deltablue.Strength$Sym.customHash():int (5 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                                  @ 1  som.Dictionary.hash(Dictionary$CustomHash):int (20 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                            @ 6  som.Dictionary.getBucketIdx(int):int (10 bytes)   inline method (bytecode parsing)
                                  @ 7  som.Dictionary.getBucket(int):Dictionary$Entry (11 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                                  @ 18  som.IdentityDictionary$IdEntry.match(int, Object):boolean (22 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                @ 4  som.Dictionary.at(Dictionary$CustomHash):Object (39 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=28 <= 300.000000)
                            @ 5  deltablue.Variable.addConstraint(AbstractConstraint):void (9 bytes)   inline method (bytecode parsing)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                    @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000124, probability=0.000124, bonus=1.000000, nodes=41 > 0.037287)
                                  @ 5  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=35 <= 300.000000)
                                @ 1  deltablue.UnaryConstraint.addToGraph():void (14 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=47 <= 300.000000)
                                  @ 1  deltablue.Planner.newMark():int (15 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f867403aa08.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 8  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 690, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=72)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f867403aa08.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 19  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 690, relevance=1.000000, probability=1.002830, bonus=1.000000, nodes=72)
                                @ 6  deltablue.Planner.incrementalAdd(AbstractConstraint):void (27 bytes)   relevance-based (relevance=1.000124, probability=1.000000, bonus=1.000000, nodes=28 <= 300.000000)
                            @ 5  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                    @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000124, probability=0.000124, bonus=1.000000, nodes=41 > 0.037287)
                                  @ 11  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=35 <= 300.000000)
                                @ 14  som.Vector.with(Object):Vector (16 bytes)   relevance-based (relevance=1.000124, probability=1.000000, bonus=1.000000, nodes=40 <= 300.000000)
                            @ 4  som.Vector.<init>():void (7 bytes)   inline method (bytecode parsing)
                              @ 3  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 10  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.Planner$$Lambda/0x00007f8674194000.<init>(Vector):void (10 bytes)   inline method (bytecode parsing)
                                      @ 1  deltablue.AbstractConstraint.isInput():boolean (2 bytes)   not inlining no type profile exists
                                      @ 8  deltablue.AbstractConstraint.isSatisfied():boolean (0 bytes)   not inlining no type profile exists
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                          @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000124, probability=0.000261, bonus=1.000000, nodes=41 > 0.037287)
                                        @ 16  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=2.101394, bonus=1.000000, nodes=35 <= 300.000000)
                                      @ 8  deltablue.Planner.lambda$extractPlanFromConstraints$1(Vector, AbstractConstraint):void (20 bytes)   relevance-based (relevance=1.000000, probability=8.405575, bonus=1.000000, nodes=59 <= 300.000000)
                                    @ 20  deltablue.Planner$$Lambda/0x00007f8674194000.apply(Object):void (12 bytes)   relevance-based (relevance=1.000000, probability=8.405575, bonus=1.000000, nodes=64 <= 300.000000)
                                  @ 15  som.Vector.forEach(ForEachInterface):void (32 bytes)   not inlining callee invoke probability is too high (invokeP=12.608623, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=77)
                            @ 9  deltablue.Plan.<init>():void (7 bytes)   inline method (bytecode parsing)
                              @ 3  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 39  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 67  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                                  @ 20  deltablue.Planner.makePlan(Vector):Plan (86 bytes)   not inlining too large previous low-level graph (low-level-nodes: 817, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=69)
                                @ 22  deltablue.Planner.extractPlanFromConstraints(Vector):Plan (24 bytes)   relevance-based (relevance=1.000124, probability=1.000000, bonus=1.000000, nodes=27 <= 300.000000)
                                  @ 1  deltablue.UnaryConstraint.isSatisfied():boolean (5 bytes)   trivial (relevance=2.000000, probability=1.000000, bonus=1.000000, nodes=5)
                            @ 21  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.Planner$$Lambda/0x00007f8674195ba8.<init>(Planner):void (10 bytes)   inline method (bytecode parsing)
                                    @ 1  deltablue.UnaryConstraint.getOutput():Variable (5 bytes)   trivial (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=5)
                                    @ 6  deltablue.UnaryConstraint.markUnsatisfied():void (6 bytes)   trivial (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=7)
                            @ 1  som.Vector.capacity():int (6 bytes)   inline method (bytecode parsing)
                            @ 31  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object, Object, Object, Object):Object (13 bytes)   inline method (bytecode parsing)
                              @ 9  java.lang.invoke.LambdaForm$DMH/0x00007f867412c000.newInvokeSpecial(Object, Object, Object, Object, Object):Object (30 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 7  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                          @ 24  som.Vector$$Lambda/0x00007f8674195098.<init>(Object, boolean[], Object[], int[]):void (26 bytes)   relevance-based (relevance=1.000000, probability=0.250000, bonus=1.000000, nodes=17 <= 300.000000)
                                              @ 17  som.Vector.lambda$remove$0(Object, boolean[], Object[], int[], Object):void (28 bytes)   relevance-based (relevance=1.000000, probability=2.101394, bonus=1.000000, nodes=26 <= 300.000000)
                                            @ 20  som.Vector$$Lambda/0x00007f8674195098.apply(Object):void (21 bytes)   relevance-based (relevance=1.000000, probability=2.101394, bonus=1.000000, nodes=28 <= 300.000000)
                                          @ 36  som.Vector.forEach(ForEachInterface):void (32 bytes)   relevance-based (relevance=1.000000, probability=0.250000, bonus=1.000000, nodes=41 <= 300.000000)
                                        @ 5  som.Vector.remove(Object):boolean (61 bytes)   relevance-based (relevance=2.000000, probability=0.250000, bonus=1.000000, nodes=73 <= 300.000000)
                                      @ 12  deltablue.Variable.removeConstraint(AbstractConstraint):void (23 bytes)   relevance-based (relevance=1.000000, probability=0.250000, bonus=1.000000, nodes=90 <= 300.000000)
                                    @ 10  deltablue.UnaryConstraint.removeFromGraph():void (21 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=100 <= 300.000000)
                            @ 4  som.Vector.<init>():void (7 bytes)   inline method (bytecode parsing)
                              @ 3  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 10  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 14  deltablue.Strength.absoluteWeakest():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 17  deltablue.Variable.setWalkStrength(Strength):void (6 bytes)   inline method (bytecode parsing)
                            @ 22  deltablue.Variable.setStay(boolean):void (6 bytes)   inline method (bytecode parsing)
                            @ 48  deltablue.Variable.getConstraints():Vector (5 bytes)   inline accessor method (bytecode parsing)
                            @ 52  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.Planner$$Lambda/0x00007f86741952b8.<init>(Vector):void (10 bytes)   inline method (bytecode parsing)
                            @ 64  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.Planner$$Lambda/0x00007f86741954d8.<init>(Vector):void (10 bytes)   inline method (bytecode parsing)
                            @ 76  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object):Object (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.lang.invoke.LambdaForm$MH/0x00007f8674000800.invoke(Object):Object (8 bytes)   inline method (bytecode parsing)
                                    @ 15  deltablue.Planner.removePropagateFrom(Variable):Vector (86 bytes)   not inlining too large previous low-level graph (low-level-nodes: 770, relevance=2.000000, probability=0.500000, bonus=1.000000, nodes=81)
                            @ 8  deltablue.Planner.lambda$incrementalRemove$0(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                                          @ 1  deltablue.Planner.newMark():int (15 bytes)   relevance-based (relevance=1.000000, probability=4.202787, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f867403aa08.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 8  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 690, relevance=1.000000, probability=4.202787, bonus=1.000000, nodes=72)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f867403aa08.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 19  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 690, relevance=1.000000, probability=4.214682, bonus=1.000000, nodes=72)
                                        @ 2  deltablue.Planner.incrementalAdd(AbstractConstraint):void (27 bytes)   relevance-based (relevance=1.000000, probability=4.202787, bonus=1.000000, nodes=28 <= 300.000000)
                                      @ 20  deltablue.Planner$$Lambda/0x00007f8674195ba8.apply(Object):void (12 bytes)   relevance-based (relevance=1.000000, probability=4.202787, bonus=1.000000, nodes=37 <= 300.000000)
                                    @ 26  som.Vector.forEach(ForEachInterface):void (32 bytes)   not inlining callee invoke probability is too high (invokeP=16.834938, relevance=2.000000, probability=0.500000, bonus=1.000000, nodes=53)
                                  @ 9  deltablue.Planner.incrementalRemove(AbstractConstraint):void (30 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=121 <= 300.000000)
                            @ 1  som.Vector.capacity():int (6 bytes)   inline method (bytecode parsing)
                            @ 31  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object, Object, Object, Object):Object (13 bytes)   inline method (bytecode parsing)
                              @ 9  java.lang.invoke.LambdaForm$DMH/0x00007f867412c000.newInvokeSpecial(Object, Object, Object, Object, Object):Object (30 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 7  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                        @ 24  som.Vector$$Lambda/0x00007f8674195098.<init>(Object, boolean[], Object[], int[]):void (26 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=17 <= 300.000000)
                 n            @ 9  java.lang.Object.hashCode():int (0 bytes)   not inlining no methods remaining after filtering less frequent methods (7 methods previously)
                              @ 23  java.util.HashMap.hash(Object):int (20 bytes)   relevance-based (relevance=1.741173, probability=0.908663, bonus=1.000000, nodes=12 <= 300.000000)
                              @ 95  java.util.HashMap$TreeNode.getTreeNode(int, Object):HashMap$TreeNode (22 bytes)   not inlining relevance-based (relevance=0.034795, probability=0.018158, bonus=1.000000, nodes=13 > 10.438507)
                                            @ 17  som.Vector.lambda$remove$0(Object, boolean[], Object[], int[], Object):void (28 bytes)   relevance-based (relevance=1.000000, probability=4.202787, bonus=1.000000, nodes=26 <= 300.000000)
                                          @ 20  som.Vector$$Lambda/0x00007f8674195098.apply(Object):void (21 bytes)   relevance-based (relevance=1.000000, probability=4.202787, bonus=1.000000, nodes=28 <= 300.000000)
                                        @ 36  som.Vector.forEach(ForEachInterface):void (32 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=41 <= 300.000000)
                                      @ 5  som.Vector.remove(Object):boolean (61 bytes)   relevance-based (relevance=2.000000, probability=0.500000, bonus=1.000000, nodes=73 <= 300.000000)
                                    @ 12  deltablue.Variable.removeConstraint(AbstractConstraint):void (23 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=90 <= 300.000000)
                                  @ 13  deltablue.UnaryConstraint.removeFromGraph():void (21 bytes)   relevance-based (relevance=4.000000, probability=1.000000, bonus=1.000000, nodes=100 <= 300.000000)
                                @ 55  deltablue.AbstractConstraint.destroyConstraint(Planner):void (17 bytes)   relevance-based (relevance=1.000124, probability=1.000000, bonus=1.000000, nodes=224 <= 300.000000)
                              @ 29  java.nio.file.attribute.BasicFileAttributes.lastModifiedTime():FileTime (0 bytes)   not inlining no type profile exists
                              @ 38  java.nio.file.attribute.BasicFileAttributes.lastModifiedTime():FileTime (0 bytes)   not inlining no type profile exists
                              @ 109  deltablue.Planner.change(Variable, int):void (59 bytes)   not inlining relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=415 > 300.000000)
                            @ 9  deltablue.EditConstraint.<init>(Variable, Strength$Sym, Planner):void (8 bytes)   inline method (bytecode parsing)
                              @ 4  deltablue.UnaryConstraint.<init>(Variable, Strength$Sym, Planner):void (16 bytes)   inline method (bytecode parsing)
                                @ 2  deltablue.AbstractConstraint.<init>(Strength$Sym):void (13 bytes)   inline method (bytecode parsing)
                                @ 43  java.nio.file.attribute.FileTime.equals(Object):boolean (28 bytes)   not inlining relevance-based (relevance=0.000133, probability=0.000004, bonus=1.000000, nodes=21 > 0.039880)
                                  @ 6  deltablue.Strength.of(Strength$Sym):Strength (11 bytes)   inline method (bytecode parsing)
                              @ 55  java.nio.file.attribute.BasicFileAttributes.fileKey():Object (0 bytes)   not inlining no type profile exists
                              @ 70  java.nio.file.attribute.BasicFileAttributes.fileKey():Object (0 bytes)   not inlining no type profile exists
                              @ 75  java.lang.Object.equals(Object):boolean (11 bytes)   not inlining no type profile exists
                                @ 12  deltablue.AbstractConstraint.addConstraint(Planner):void (10 bytes)   inline method (bytecode parsing)
                            @ 14  java.io.File.compareTo(File):int (9 bytes)   inline method (bytecode parsing)
                            @ 39  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                              @ 5  java.io.UnixFileSystem.compare(File, File):int (12 bytes)   inline method (bytecode parsing)
                            @ 44  deltablue.Plan.execute():void (10 bytes)   inline method (bytecode parsing)
                                @ 1  java.io.File.getPath():String (5 bytes)   inline accessor method (bytecode parsing)
                              @ 1  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object):Object (8 bytes)   inline method (bytecode parsing)
                                @ 5  java.io.File.getPath():String (5 bytes)   inline accessor method (bytecode parsing)
                                @ 4  java.lang.invoke.LambdaForm$MH/0x00007f8674000800.invoke(Object):Object (8 bytes)   inline method (bytecode parsing)
                                @ 87  java.io.File.equals(Object):boolean (28 bytes)   not inlining relevance-based (relevance=0.000033, probability=0.000001, bonus=1.000000, nodes=23 > 0.009970)
                            @ 17  java.lang.NullPointerException.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  java.lang.RuntimeException.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                                @ 2  java.lang.Exception.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                                    @ 7  deltablue.Strength$Sym.customHash():int (5 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                                  @ 1  som.Dictionary.hash(Dictionary$CustomHash):int (20 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                                      @ 4  jdk.vm.ci.hotspot.HotSpotResolvedJavaMethodImpl.getMetadataHandle():long (5 bytes)   trivial (relevance=0.256830, probability=0.000981, bonus=1.000000, nodes=5)
                                    @ 1  jdk.vm.ci.hotspot.MetaspaceHandleObject.getMetaspacePointer():long (13 bytes)   trivial (relevance=0.256830, probability=0.000981, bonus=1.000000, nodes=6)
                            @ 6  som.Dictionary.getBucketIdx(int):int (10 bytes)   inline method (bytecode parsing)
                                  @ 7  som.Dictionary.getBucket(int):Dictionary$Entry (11 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                                  @ 18  som.IdentityDictionary$IdEntry.match(int, Object):boolean (22 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=13 <= 300.000000)
                 n                    @ 25  java.lang.NullPointerException.getExtendedNPEMessage():String (0 bytes)   not inlining it is a non-intrinsic native method
                                @ 4  som.Dictionary.at(Dictionary$CustomHash):Object (39 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=28 <= 300.000000)
                            @ 5  deltablue.Variable.addConstraint(AbstractConstraint):void (9 bytes)   inline method (bytecode parsing)
                 n                      @ 16  java.lang.Throwable.fillInStackTrace(int):Throwable (0 bytes)   not inlining it is a non-intrinsic native method
              s                         @ 37  java.lang.Throwable.fillInStackTrace():Throwable (29 bytes)   relevance-based (relevance=0.513659, probability=0.000491, bonus=1.000000, nodes=34 <= 154.097707)
              s                       @ 24  java.lang.NullPointerException.fillInStackTrace():Throwable (41 bytes)   not inlining relevance-based (relevance=0.128415, probability=0.000491, bonus=1.000000, nodes=65 > 38.524427)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                    @ 2  java.lang.Throwable.<init>(String):void (34 bytes)   relevance-based (relevance=0.128415, probability=0.000491, bonus=1.000000, nodes=18 <= 38.524427)
                                  @ 20  jdk.vm.ci.hotspot.HotSpotResolvedJavaMethodImpl.getMethodPointer():long (23 bytes)   relevance-based (relevance=0.128415, probability=0.000981, bonus=1.000000, nodes=31 <= 38.524427)
                                @ 22  jdk.vm.ci.hotspot.HotSpotResolvedJavaMethodImpl.equals(Object):boolean (39 bytes)   not inlining relevance-based (relevance=0.128415, probability=0.003925, bonus=1.000000, nodes=56 > 38.524427)
                              @ 88  java.lang.Object.equals(Object):boolean (11 bytes)   not inlining no type profile exists
                              @ 63  java.lang.Long.equals(Object):boolean (30 bytes)   relevance-based (relevance=1.000000, probability=0.521868, bonus=1.000000, nodes=237 <= 300.000000)
                                    @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000124, probability=0.000124, bonus=1.000000, nodes=41 > 0.037287)
                                  @ 5  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=35 <= 300.000000)
                                @ 1  deltablue.UnaryConstraint.addToGraph():void (14 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=47 <= 300.000000)
                                  @ 1  deltablue.Planner.newMark():int (15 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f867403aa08.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 8  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 690, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=72)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 128  java.lang.Long.equals(Object):boolean (30 bytes)   not inlining relevance-based (relevance=0.480256, probability=0.215839, bonus=1.000000, nodes=160 > 144.076712)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f867403aa08.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 19  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 690, relevance=1.000000, probability=1.002830, bonus=1.000000, nodes=72)
                                @ 6  deltablue.Planner.incrementalAdd(AbstractConstraint):void (27 bytes)   relevance-based (relevance=1.000124, probability=1.000000, bonus=1.000000, nodes=28 <= 300.000000)
                            @ 5  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                    @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000124, probability=0.000124, bonus=1.000000, nodes=41 > 0.037287)
                                  @ 11  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=35 <= 300.000000)
                                @ 14  som.Vector.with(Object):Vector (16 bytes)   relevance-based (relevance=1.000124, probability=1.000000, bonus=1.000000, nodes=40 <= 300.000000)
                            @ 4  som.Vector.<init>():void (7 bytes)   inline method (bytecode parsing)
                              @ 3  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 10  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.Planner$$Lambda/0x00007f8674194000.<init>(Vector):void (10 bytes)   inline method (bytecode parsing)
                                      @ 1  deltablue.AbstractConstraint.isInput():boolean (2 bytes)   not inlining no type profile exists
                                      @ 8  deltablue.AbstractConstraint.isSatisfied():boolean (0 bytes)   not inlining no type profile exists
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                          @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000124, probability=0.000261, bonus=1.000000, nodes=41 > 0.037287)
                                        @ 16  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=2.101394, bonus=1.000000, nodes=35 <= 300.000000)
                                      @ 8  deltablue.Planner.lambda$extractPlanFromConstraints$1(Vector, AbstractConstraint):void (20 bytes)   relevance-based (relevance=1.000000, probability=8.405575, bonus=1.000000, nodes=59 <= 300.000000)
                                    @ 20  deltablue.Planner$$Lambda/0x00007f8674194000.apply(Object):void (12 bytes)   relevance-based (relevance=1.000000, probability=8.405575, bonus=1.000000, nodes=64 <= 300.000000)
                                  @ 15  som.Vector.forEach(ForEachInterface):void (32 bytes)   not inlining callee invoke probability is too high (invokeP=12.608623, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=77)
                            @ 9  deltablue.Plan.<init>():void (7 bytes)   inline method (bytecode parsing)
                              @ 3  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 39  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 67  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                                  @ 20  deltablue.Planner.makePlan(Vector):Plan (86 bytes)   not inlining too large previous low-level graph (low-level-nodes: 817, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=69)
                                @ 22  deltablue.Planner.extractPlanFromConstraints(Vector):Plan (24 bytes)   relevance-based (relevance=1.000124, probability=1.000000, bonus=1.000000, nodes=27 <= 300.000000)
                                  @ 1  deltablue.UnaryConstraint.isSatisfied():boolean (5 bytes)   trivial (relevance=2.000000, probability=1.000000, bonus=1.000000, nodes=5)
                            @ 21  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.Planner$$Lambda/0x00007f8674195ba8.<init>(Planner):void (10 bytes)   inline method (bytecode parsing)
                                    @ 1  deltablue.UnaryConstraint.getOutput():Variable (5 bytes)   trivial (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=5)
                                    @ 6  deltablue.UnaryConstraint.markUnsatisfied():void (6 bytes)   trivial (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=7)
                            @ 1  som.Vector.capacity():int (6 bytes)   inline method (bytecode parsing)
                            @ 31  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object, Object, Object, Object):Object (13 bytes)   inline method (bytecode parsing)
                              @ 9  java.lang.invoke.LambdaForm$DMH/0x00007f867412c000.newInvokeSpecial(Object, Object, Object, Object, Object):Object (30 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 7  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                          @ 24  som.Vector$$Lambda/0x00007f8674195098.<init>(Object, boolean[], Object[], int[]):void (26 bytes)   relevance-based (relevance=1.000000, probability=0.250000, bonus=1.000000, nodes=17 <= 300.000000)
                                              @ 17  som.Vector.lambda$remove$0(Object, boolean[], Object[], int[], Object):void (28 bytes)   relevance-based (relevance=1.000000, probability=2.101394, bonus=1.000000, nodes=26 <= 300.000000)
                                            @ 20  som.Vector$$Lambda/0x00007f8674195098.apply(Object):void (21 bytes)   relevance-based (relevance=1.000000, probability=2.101394, bonus=1.000000, nodes=28 <= 300.000000)
                                          @ 36  som.Vector.forEach(ForEachInterface):void (32 bytes)   relevance-based (relevance=1.000000, probability=0.250000, bonus=1.000000, nodes=41 <= 300.000000)
                                        @ 5  som.Vector.remove(Object):boolean (61 bytes)   relevance-based (relevance=2.000000, probability=0.250000, bonus=1.000000, nodes=73 <= 300.000000)
                                      @ 12  deltablue.Variable.removeConstraint(AbstractConstraint):void (23 bytes)   relevance-based (relevance=1.000000, probability=0.250000, bonus=1.000000, nodes=90 <= 300.000000)
                                    @ 10  deltablue.UnaryConstraint.removeFromGraph():void (21 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=100 <= 300.000000)
                            @ 4  som.Vector.<init>():void (7 bytes)   inline method (bytecode parsing)
                              @ 3  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 10  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 14  deltablue.Strength.absoluteWeakest():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 17  deltablue.Variable.setWalkStrength(Strength):void (6 bytes)   inline method (bytecode parsing)
                            @ 22  deltablue.Variable.setStay(boolean):void (6 bytes)   inline method (bytecode parsing)
                            @ 48  deltablue.Variable.getConstraints():Vector (5 bytes)   inline accessor method (bytecode parsing)
                            @ 52  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.Planner$$Lambda/0x00007f86741952b8.<init>(Vector):void (10 bytes)   inline method (bytecode parsing)
                            @ 64  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.Planner$$Lambda/0x00007f86741954d8.<init>(Vector):void (10 bytes)   inline method (bytecode parsing)
                            @ 76  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object):Object (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.lang.invoke.LambdaForm$MH/0x00007f8674000800.invoke(Object):Object (8 bytes)   inline method (bytecode parsing)
                                    @ 15  deltablue.Planner.removePropagateFrom(Variable):Vector (86 bytes)   not inlining too large previous low-level graph (low-level-nodes: 770, relevance=2.000000, probability=0.500000, bonus=1.000000, nodes=81)
                            @ 8  deltablue.Planner.lambda$incrementalRemove$0(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                                          @ 1  deltablue.Planner.newMark():int (15 bytes)   relevance-based (relevance=1.000000, probability=4.202787, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f867403aa08.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 8  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 690, relevance=1.000000, probability=4.202787, bonus=1.000000, nodes=72)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f867403aa08.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 19  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 690, relevance=1.000000, probability=4.214682, bonus=1.000000, nodes=72)
                                        @ 2  deltablue.Planner.incrementalAdd(AbstractConstraint):void (27 bytes)   relevance-based (relevance=1.000000, probability=4.202787, bonus=1.000000, nodes=28 <= 300.000000)
                                      @ 20  deltablue.Planner$$Lambda/0x00007f8674195ba8.apply(Object):void (12 bytes)   relevance-based (relevance=1.000000, probability=4.202787, bonus=1.000000, nodes=37 <= 300.000000)
                                    @ 26  som.Vector.forEach(ForEachInterface):void (32 bytes)   not inlining callee invoke probability is too high (invokeP=16.834938, relevance=2.000000, probability=0.500000, bonus=1.000000, nodes=53)
                                  @ 9  deltablue.Planner.incrementalRemove(AbstractConstraint):void (30 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=121 <= 300.000000)
                            @ 1  som.Vector.capacity():int (6 bytes)   inline method (bytecode parsing)
                            @ 31  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object, Object, Object, Object):Object (13 bytes)   inline method (bytecode parsing)
                              @ 9  java.lang.invoke.LambdaForm$DMH/0x00007f867412c000.newInvokeSpecial(Object, Object, Object, Object, Object):Object (30 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 7  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                        @ 24  som.Vector$$Lambda/0x00007f8674195098.<init>(Object, boolean[], Object[], int[]):void (26 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=17 <= 300.000000)
                              @ 6  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.001541, probability=0.997334, bonus=1.000000, nodes=9)
                                            @ 17  som.Vector.lambda$remove$0(Object, boolean[], Object[], int[], Object):void (28 bytes)   relevance-based (relevance=1.000000, probability=4.202787, bonus=1.000000, nodes=26 <= 300.000000)
                                          @ 20  som.Vector$$Lambda/0x00007f8674195098.apply(Object):void (21 bytes)   relevance-based (relevance=1.000000, probability=4.202787, bonus=1.000000, nodes=28 <= 300.000000)
                                        @ 36  som.Vector.forEach(ForEachInterface):void (32 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=41 <= 300.000000)
                            @ 49  java.lang.StringConcatHelper.newArray(long):byte[] (40 bytes)   inline method (bytecode parsing)
                                      @ 5  som.Vector.remove(Object):boolean (61 bytes)   relevance-based (relevance=2.000000, probability=0.500000, bonus=1.000000, nodes=73 <= 300.000000)
                            @ 123  java.lang.String.<init>(byte[], byte):void (15 bytes)   inline method (bytecode parsing)
                                    @ 12  deltablue.Variable.removeConstraint(AbstractConstraint):void (23 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=90 <= 300.000000)
                                  @ 13  deltablue.UnaryConstraint.removeFromGraph():void (21 bytes)   relevance-based (relevance=4.000000, probability=1.000000, bonus=1.000000, nodes=100 <= 300.000000)
                                @ 1  java.lang.StringLatin1.canEncode(int):boolean (13 bytes)   trivial (relevance=1.000000, probability=0.997334, bonus=1.000000, nodes=8)
                                @ 41  java.lang.StringLatin1.canEncode(int):boolean (13 bytes)   trivial (relevance=0.995922, probability=0.993267, bonus=1.000000, nodes=8)
                                @ 55  deltablue.AbstractConstraint.destroyConstraint(Planner):void (17 bytes)   relevance-based (relevance=1.000124, probability=1.000000, bonus=1.000000, nodes=224 <= 300.000000)
                                  @ 51  jdk.internal.misc.Unsafe.allocateUninitializedArray0(Class, int):Object (90 bytes)   trivial (relevance=0.995922, probability=0.993267, bonus=1.000000, nodes=6)
                                @ 33  jdk.internal.misc.Unsafe.allocateUninitializedArray(Class, int):Object (55 bytes)   trivial (relevance=0.995922, probability=0.993267, bonus=1.000000, nodes=7)
                              @ 139  deltablue.Planner.change(Variable, int):void (59 bytes)   not inlining relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=415 > 300.000000)
                              @ 18  java.lang.StringLatin1.replace(byte[], char, char):String (198 bytes)   relevance-based (relevance=1.001541, probability=0.997334, bonus=1.000000, nodes=94 <= 300.000000)
                            @ 9  deltablue.EditConstraint.<init>(Variable, Strength$Sym, Planner):void (8 bytes)   inline method (bytecode parsing)
                              @ 4  deltablue.UnaryConstraint.<init>(Variable, Strength$Sym, Planner):void (16 bytes)   inline method (bytecode parsing)
                                @ 2  deltablue.AbstractConstraint.<init>(Strength$Sym):void (13 bytes)   inline method (bytecode parsing)
                                  @ 6  deltablue.Strength.of(Strength$Sym):Strength (11 bytes)   inline method (bytecode parsing)
                                @ 12  deltablue.AbstractConstraint.addConstraint(Planner):void (10 bytes)   inline method (bytecode parsing)
                            @ 39  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 44  deltablue.Plan.execute():void (10 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object):Object (8 bytes)   inline method (bytecode parsing)
                                @ 4  java.lang.invoke.LambdaForm$MH/0x00007f8674000800.invoke(Object):Object (8 bytes)   inline method (bytecode parsing)
                                    @ 7  deltablue.Strength$Sym.customHash():int (5 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                                  @ 1  som.Dictionary.hash(Dictionary$CustomHash):int (20 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                            @ 6  som.Dictionary.getBucketIdx(int):int (10 bytes)   inline method (bytecode parsing)
                                  @ 7  som.Dictionary.getBucket(int):Dictionary$Entry (11 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                                  @ 18  som.IdentityDictionary$IdEntry.match(int, Object):boolean (22 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                @ 4  som.Dictionary.at(Dictionary$CustomHash):Object (39 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=28 <= 300.000000)
                            @ 5  deltablue.Variable.addConstraint(AbstractConstraint):void (9 bytes)   inline method (bytecode parsing)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                    @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000124, probability=0.000124, bonus=1.000000, nodes=41 > 0.037287)
                                  @ 5  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=35 <= 300.000000)
                                @ 1  deltablue.UnaryConstraint.addToGraph():void (14 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=47 <= 300.000000)
                                  @ 1  deltablue.Planner.newMark():int (15 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f867403aa08.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 8  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 690, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=72)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f867403aa08.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 19  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 690, relevance=1.000000, probability=1.002830, bonus=1.000000, nodes=72)
                                @ 6  deltablue.Planner.incrementalAdd(AbstractConstraint):void (27 bytes)   relevance-based (relevance=1.000124, probability=1.000000, bonus=1.000000, nodes=28 <= 300.000000)
                            @ 5  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                    @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000124, probability=0.000124, bonus=1.000000, nodes=41 > 0.037287)
                                  @ 11  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=35 <= 300.000000)
                                @ 14  som.Vector.with(Object):Vector (16 bytes)   relevance-based (relevance=1.000124, probability=1.000000, bonus=1.000000, nodes=40 <= 300.000000)
                            @ 4  som.Vector.<init>():void (7 bytes)   inline method (bytecode parsing)
                              @ 3  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 10  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.Planner$$Lambda/0x00007f8674194000.<init>(Vector):void (10 bytes)   inline method (bytecode parsing)
                                      @ 1  deltablue.AbstractConstraint.isInput():boolean (2 bytes)   not inlining no type profile exists
                                      @ 8  deltablue.AbstractConstraint.isSatisfied():boolean (0 bytes)   not inlining no type profile exists
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                          @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000124, probability=0.000261, bonus=1.000000, nodes=41 > 0.037287)
                                        @ 16  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=2.101394, bonus=1.000000, nodes=35 <= 300.000000)
                                      @ 8  deltablue.Planner.lambda$extractPlanFromConstraints$1(Vector, AbstractConstraint):void (20 bytes)   relevance-based (relevance=1.000000, probability=8.405575, bonus=1.000000, nodes=59 <= 300.000000)
                                    @ 20  deltablue.Planner$$Lambda/0x00007f8674194000.apply(Object):void (12 bytes)   relevance-based (relevance=1.000000, probability=8.405575, bonus=1.000000, nodes=64 <= 300.000000)
                                  @ 15  som.Vector.forEach(ForEachInterface):void (32 bytes)   not inlining callee invoke probability is too high (invokeP=12.608623, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=77)
                            @ 9  deltablue.Plan.<init>():void (7 bytes)   inline method (bytecode parsing)
                              @ 3  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 39  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 67  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                                  @ 20  deltablue.Planner.makePlan(Vector):Plan (86 bytes)   not inlining too large previous low-level graph (low-level-nodes: 817, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=69)
                                @ 22  deltablue.Planner.extractPlanFromConstraints(Vector):Plan (24 bytes)   relevance-based (relevance=1.000124, probability=1.000000, bonus=1.000000, nodes=27 <= 300.000000)
                            @ 28  java.lang.String.<init>(byte[], byte):void (15 bytes)   inline method (bytecode parsing)
                                  @ 1  deltablue.UnaryConstraint.isSatisfied():boolean (5 bytes)   trivial (relevance=2.000000, probability=1.000000, bonus=1.000000, nodes=5)
                                @ 1  java.lang.Long.stringSize(long):int (55 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=34 <= 300.000000)
                            @ 21  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.Planner$$Lambda/0x00007f8674195ba8.<init>(Planner):void (10 bytes)   inline method (bytecode parsing)
                                @ 18  java.lang.Long.getChars(long, int, byte[]):int (195 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=64 <= 300.000000)
                                    @ 1  deltablue.UnaryConstraint.getOutput():Variable (5 bytes)   trivial (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=5)
                                    @ 6  deltablue.UnaryConstraint.markUnsatisfied():void (6 bytes)   trivial (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=7)
                              @ 21  java.lang.Long.toString(long):String (55 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=98 <= 300.000000)
                            @ 1  som.Vector.capacity():int (6 bytes)   inline method (bytecode parsing)
                            @ 31  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object, Object, Object, Object):Object (13 bytes)   inline method (bytecode parsing)
                              @ 9  java.lang.invoke.LambdaForm$DMH/0x00007f867412c000.newInvokeSpecial(Object, Object, Object, Object, Object):Object (30 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 7  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                          @ 24  som.Vector$$Lambda/0x00007f8674195098.<init>(Object, boolean[], Object[], int[]):void (26 bytes)   relevance-based (relevance=1.000000, probability=0.250000, bonus=1.000000, nodes=17 <= 300.000000)
                                              @ 17  som.Vector.lambda$remove$0(Object, boolean[], Object[], int[], Object):void (28 bytes)   relevance-based (relevance=1.000000, probability=2.101394, bonus=1.000000, nodes=26 <= 300.000000)
                                            @ 20  som.Vector$$Lambda/0x00007f8674195098.apply(Object):void (21 bytes)   relevance-based (relevance=1.000000, probability=2.101394, bonus=1.000000, nodes=28 <= 300.000000)
                                          @ 36  som.Vector.forEach(ForEachInterface):void (32 bytes)   relevance-based (relevance=1.000000, probability=0.250000, bonus=1.000000, nodes=41 <= 300.000000)
                                        @ 5  som.Vector.remove(Object):boolean (61 bytes)   relevance-based (relevance=2.000000, probability=0.250000, bonus=1.000000, nodes=73 <= 300.000000)
                                      @ 12  deltablue.Variable.removeConstraint(AbstractConstraint):void (23 bytes)   relevance-based (relevance=1.000000, probability=0.250000, bonus=1.000000, nodes=90 <= 300.000000)
                                    @ 10  deltablue.UnaryConstraint.removeFromGraph():void (21 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=100 <= 300.000000)
                            @ 4  som.Vector.<init>():void (7 bytes)   inline method (bytecode parsing)
                              @ 3  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 10  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 14  deltablue.Strength.absoluteWeakest():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 17  deltablue.Variable.setWalkStrength(Strength):void (6 bytes)   inline method (bytecode parsing)
                            @ 22  deltablue.Variable.setStay(boolean):void (6 bytes)   inline method (bytecode parsing)
                            @ 48  deltablue.Variable.getConstraints():Vector (5 bytes)   inline accessor method (bytecode parsing)
                            @ 52  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.Planner$$Lambda/0x00007f86741952b8.<init>(Vector):void (10 bytes)   inline method (bytecode parsing)
                            @ 64  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.Planner$$Lambda/0x00007f86741954d8.<init>(Vector):void (10 bytes)   inline method (bytecode parsing)
                            @ 76  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object):Object (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.lang.invoke.LambdaForm$MH/0x00007f8674000800.invoke(Object):Object (8 bytes)   inline method (bytecode parsing)
                                    @ 15  deltablue.Planner.removePropagateFrom(Variable):Vector (86 bytes)   not inlining too large previous low-level graph (low-level-nodes: 770, relevance=2.000000, probability=0.500000, bonus=1.000000, nodes=81)
                            @ 8  deltablue.Planner.lambda$incrementalRemove$0(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                                          @ 1  deltablue.Planner.newMark():int (15 bytes)   relevance-based (relevance=1.000000, probability=4.202787, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f867403aa08.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 8  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 690, relevance=1.000000, probability=4.202787, bonus=1.000000, nodes=72)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f867403aa08.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 19  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 690, relevance=1.000000, probability=4.214682, bonus=1.000000, nodes=72)
                                        @ 2  deltablue.Planner.incrementalAdd(AbstractConstraint):void (27 bytes)   relevance-based (relevance=1.000000, probability=4.202787, bonus=1.000000, nodes=28 <= 300.000000)
                                      @ 20  deltablue.Planner$$Lambda/0x00007f8674195ba8.apply(Object):void (12 bytes)   relevance-based (relevance=1.000000, probability=4.202787, bonus=1.000000, nodes=37 <= 300.000000)
                                    @ 26  som.Vector.forEach(ForEachInterface):void (32 bytes)   not inlining callee invoke probability is too high (invokeP=16.834938, relevance=2.000000, probability=0.500000, bonus=1.000000, nodes=53)
                                  @ 9  deltablue.Planner.incrementalRemove(AbstractConstraint):void (30 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=121 <= 300.000000)
                            @ 1  som.Vector.capacity():int (6 bytes)   inline method (bytecode parsing)
                            @ 31  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object, Object, Object, Object):Object (13 bytes)   inline method (bytecode parsing)
                              @ 9  java.lang.invoke.LambdaForm$DMH/0x00007f867412c000.newInvokeSpecial(Object, Object, Object, Object, Object):Object (30 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 7  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                        @ 24  som.Vector$$Lambda/0x00007f8674195098.<init>(Object, boolean[], Object[], int[]):void (26 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=17 <= 300.000000)
                                            @ 17  som.Vector.lambda$remove$0(Object, boolean[], Object[], int[], Object):void (28 bytes)   relevance-based (relevance=1.000000, probability=4.202787, bonus=1.000000, nodes=26 <= 300.000000)
                                          @ 20  som.Vector$$Lambda/0x00007f8674195098.apply(Object):void (21 bytes)   relevance-based (relevance=1.000000, probability=4.202787, bonus=1.000000, nodes=28 <= 300.000000)
                                        @ 36  som.Vector.forEach(ForEachInterface):void (32 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=41 <= 300.000000)
                                      @ 5  som.Vector.remove(Object):boolean (61 bytes)   relevance-based (relevance=2.000000, probability=0.500000, bonus=1.000000, nodes=73 <= 300.000000)
                                    @ 12  deltablue.Variable.removeConstraint(AbstractConstraint):void (23 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=90 <= 300.000000)
                                  @ 13  deltablue.UnaryConstraint.removeFromGraph():void (21 bytes)   relevance-based (relevance=4.000000, probability=1.000000, bonus=1.000000, nodes=100 <= 300.000000)
                                @ 55  deltablue.AbstractConstraint.destroyConstraint(Planner):void (17 bytes)   relevance-based (relevance=1.000124, probability=1.000000, bonus=1.000000, nodes=224 <= 300.000000)
                              @ 164  deltablue.Planner.change(Variable, int):void (59 bytes)   not inlining relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=412 > 300.000000)
                            @ 9  deltablue.EditConstraint.<init>(Variable, Strength$Sym, Planner):void (8 bytes)   inline method (bytecode parsing)
                              @ 4  deltablue.UnaryConstraint.<init>(Variable, Strength$Sym, Planner):void (16 bytes)   inline method (bytecode parsing)
                                @ 2  deltablue.AbstractConstraint.<init>(Strength$Sym):void (13 bytes)   inline method (bytecode parsing)
                                  @ 6  deltablue.Strength.of(Strength$Sym):Strength (11 bytes)   inline method (bytecode parsing)
                                @ 12  deltablue.AbstractConstraint.addConstraint(Planner):void (10 bytes)   inline method (bytecode parsing)
                            @ 39  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 44  deltablue.Plan.execute():void (10 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object):Object (8 bytes)   inline method (bytecode parsing)
                                @ 4  java.lang.invoke.LambdaForm$MH/0x00007f8674000800.invoke(Object):Object (8 bytes)   inline method (bytecode parsing)
                                    @ 7  deltablue.Strength$Sym.customHash():int (5 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                                  @ 1  som.Dictionary.hash(Dictionary$CustomHash):int (20 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                            @ 6  som.Dictionary.getBucketIdx(int):int (10 bytes)   inline method (bytecode parsing)
                                  @ 7  som.Dictionary.getBucket(int):Dictionary$Entry (11 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                                  @ 18  som.IdentityDictionary$IdEntry.match(int, Object):boolean (22 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                @ 4  som.Dictionary.at(Dictionary$CustomHash):Object (39 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=28 <= 300.000000)
                            @ 5  deltablue.Variable.addConstraint(AbstractConstraint):void (9 bytes)   inline method (bytecode parsing)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                    @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000124, probability=0.000124, bonus=1.000000, nodes=41 > 0.037287)
                                  @ 5  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=35 <= 300.000000)
                                @ 1  deltablue.UnaryConstraint.addToGraph():void (14 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=47 <= 300.000000)
                              @ 8  jdk.internal.misc.Unsafe.convEndian(boolean, int):int (16 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=16 <= 300.000000)
                                  @ 1  deltablue.Planner.newMark():int (15 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f867403aa08.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                 n            @ 9  java.lang.Object.hashCode():int (0 bytes)   not inlining no methods remaining after filtering less frequent methods (7 methods previously)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 2  java.util.HashMap.hash(Object):int (20 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=12 <= 300.000000)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 8  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 690, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=72)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f867403aa08.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                              @ 9  java.util.HashMap.putVal(int, Object, Object, boolean, boolean):Object (300 bytes)   not inlining too large previous low-level graph (low-level-nodes: 1128, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=166)
                                  @ 19  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 690, relevance=1.000000, probability=1.002830, bonus=1.000000, nodes=72)
                                @ 6  deltablue.Planner.incrementalAdd(AbstractConstraint):void (27 bytes)   relevance-based (relevance=1.000124, probability=1.000000, bonus=1.000000, nodes=28 <= 300.000000)
                            @ 5  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                    @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000124, probability=0.000124, bonus=1.000000, nodes=41 > 0.037287)
                                  @ 11  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=35 <= 300.000000)
                                @ 14  som.Vector.with(Object):Vector (16 bytes)   relevance-based (relevance=1.000124, probability=1.000000, bonus=1.000000, nodes=40 <= 300.000000)
                            @ 4  som.Vector.<init>():void (7 bytes)   inline method (bytecode parsing)
                              @ 3  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 10  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.Planner$$Lambda/0x00007f8674194000.<init>(Vector):void (10 bytes)   inline method (bytecode parsing)
                                      @ 1  deltablue.AbstractConstraint.isInput():boolean (2 bytes)   not inlining no type profile exists
                                      @ 8  deltablue.AbstractConstraint.isSatisfied():boolean (0 bytes)   not inlining no type profile exists
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                              @ 6  jdk.internal.util.Preconditions.checkFromToIndex(int, int, int, BiFunction):int (24 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=14 <= 300.000000)
                                          @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000124, probability=0.000261, bonus=1.000000, nodes=41 > 0.037287)
                                        @ 16  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=2.101394, bonus=1.000000, nodes=35 <= 300.000000)
                                      @ 8  deltablue.Planner.lambda$extractPlanFromConstraints$1(Vector, AbstractConstraint):void (20 bytes)   relevance-based (relevance=1.000000, probability=8.405575, bonus=1.000000, nodes=59 <= 300.000000)
                                    @ 20  deltablue.Planner$$Lambda/0x00007f8674194000.apply(Object):void (12 bytes)   relevance-based (relevance=1.000000, probability=8.405575, bonus=1.000000, nodes=64 <= 300.000000)
                                  @ 15  som.Vector.forEach(ForEachInterface):void (32 bytes)   not inlining callee invoke probability is too high (invokeP=12.608623, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=77)
                            @ 9  deltablue.Plan.<init>():void (7 bytes)   inline method (bytecode parsing)
                              @ 3  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 49  java.lang.Math.max(int, int):int (11 bytes)   inline method (bytecode parsing)
                            @ 37  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                            @ 39  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 67  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                              @ 7  java.util.ArrayList.grow(int):Object[] (60 bytes)   not inlining too large previous low-level graph (low-level-nodes: 533, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=46)
                                  @ 20  deltablue.Planner.makePlan(Vector):Plan (86 bytes)   not inlining too large previous low-level graph (low-level-nodes: 817, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=69)
                                @ 22  deltablue.Planner.extractPlanFromConstraints(Vector):Plan (24 bytes)   relevance-based (relevance=1.000124, probability=1.000000, bonus=1.000000, nodes=27 <= 300.000000)
                                  @ 1  deltablue.UnaryConstraint.isSatisfied():boolean (5 bytes)   trivial (relevance=2.000000, probability=1.000000, bonus=1.000000, nodes=5)
                            @ 21  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.Planner$$Lambda/0x00007f8674195ba8.<init>(Planner):void (10 bytes)   inline method (bytecode parsing)
                              @ 17  java.lang.Math.max(int, int):int (11 bytes)   trivial (relevance=0.449918, probability=0.310306, bonus=1.000000, nodes=7)
                                    @ 1  deltablue.UnaryConstraint.getOutput():Variable (5 bytes)   trivial (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=5)
                                @ 25  java.lang.Math.min(int, int):int (11 bytes)   trivial (relevance=0.449923, probability=0.310306, bonus=1.000000, nodes=7)
                                    @ 6  deltablue.UnaryConstraint.markUnsatisfied():void (6 bytes)   trivial (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=7)
                              @ 27  java.util.Arrays.copyOf(long[], int):long[] (33 bytes)   relevance-based (relevance=0.449918, probability=0.310306, bonus=1.000000, nodes=21 <= 134.975508)
                            @ 1  som.Vector.capacity():int (6 bytes)   inline method (bytecode parsing)
                            @ 31  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object, Object, Object, Object):Object (13 bytes)   inline method (bytecode parsing)
                              @ 9  java.lang.invoke.LambdaForm$DMH/0x00007f867412c000.newInvokeSpecial(Object, Object, Object, Object, Object):Object (30 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 7  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                          @ 24  som.Vector$$Lambda/0x00007f8674195098.<init>(Object, boolean[], Object[], int[]):void (26 bytes)   relevance-based (relevance=1.000000, probability=0.250000, bonus=1.000000, nodes=17 <= 300.000000)
                                              @ 17  som.Vector.lambda$remove$0(Object, boolean[], Object[], int[], Object):void (28 bytes)   relevance-based (relevance=1.000000, probability=2.101394, bonus=1.000000, nodes=26 <= 300.000000)
                                            @ 20  som.Vector$$Lambda/0x00007f8674195098.apply(Object):void (21 bytes)   relevance-based (relevance=1.000000, probability=2.101394, bonus=1.000000, nodes=28 <= 300.000000)
                                          @ 36  som.Vector.forEach(ForEachInterface):void (32 bytes)   relevance-based (relevance=1.000000, probability=0.250000, bonus=1.000000, nodes=41 <= 300.000000)
                                        @ 5  som.Vector.remove(Object):boolean (61 bytes)   relevance-based (relevance=2.000000, probability=0.250000, bonus=1.000000, nodes=73 <= 300.000000)
                                      @ 12  deltablue.Variable.removeConstraint(AbstractConstraint):void (23 bytes)   relevance-based (relevance=1.000000, probability=0.250000, bonus=1.000000, nodes=90 <= 300.000000)
                                    @ 10  deltablue.UnaryConstraint.removeFromGraph():void (21 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=100 <= 300.000000)
                            @ 4  som.Vector.<init>():void (7 bytes)   inline method (bytecode parsing)
                              @ 3  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 10  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 14  deltablue.Strength.absoluteWeakest():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 17  deltablue.Variable.setWalkStrength(Strength):void (6 bytes)   inline method (bytecode parsing)
                            @ 22  deltablue.Variable.setStay(boolean):void (6 bytes)   inline method (bytecode parsing)
                            @ 48  deltablue.Variable.getConstraints():Vector (5 bytes)   inline accessor method (bytecode parsing)
                            @ 52  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.Planner$$Lambda/0x00007f86741952b8.<init>(Vector):void (10 bytes)   inline method (bytecode parsing)
                            @ 64  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.Planner$$Lambda/0x00007f86741954d8.<init>(Vector):void (10 bytes)   inline method (bytecode parsing)
                            @ 76  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object):Object (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.lang.invoke.LambdaForm$MH/0x00007f8674000800.invoke(Object):Object (8 bytes)   inline method (bytecode parsing)
                                    @ 15  deltablue.Planner.removePropagateFrom(Variable):Vector (86 bytes)   not inlining too large previous low-level graph (low-level-nodes: 770, relevance=2.000000, probability=0.500000, bonus=1.000000, nodes=81)
                            @ 8  deltablue.Planner.lambda$incrementalRemove$0(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                                          @ 1  deltablue.Planner.newMark():int (15 bytes)   relevance-based (relevance=1.000000, probability=4.202787, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f867403aa08.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 8  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 690, relevance=1.000000, probability=4.202787, bonus=1.000000, nodes=72)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 54  java.lang.Object.equals(Object):boolean (11 bytes)   trivial (relevance=1.141290, probability=5.336770, bonus=1.000000, nodes=9)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f867403aa08.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 19  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 690, relevance=1.000000, probability=4.214682, bonus=1.000000, nodes=72)
                                        @ 2  deltablue.Planner.incrementalAdd(AbstractConstraint):void (27 bytes)   relevance-based (relevance=1.000000, probability=4.202787, bonus=1.000000, nodes=28 <= 300.000000)
                                      @ 20  deltablue.Planner$$Lambda/0x00007f8674195ba8.apply(Object):void (12 bytes)   relevance-based (relevance=1.000000, probability=4.202787, bonus=1.000000, nodes=37 <= 300.000000)
                                    @ 26  som.Vector.forEach(ForEachInterface):void (32 bytes)   not inlining callee invoke probability is too high (invokeP=16.834938, relevance=2.000000, probability=0.500000, bonus=1.000000, nodes=53)
                                  @ 9  deltablue.Planner.incrementalRemove(AbstractConstraint):void (30 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=121 <= 300.000000)
                            @ 1  som.Vector.capacity():int (6 bytes)   inline method (bytecode parsing)
                            @ 31  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object, Object, Object, Object):Object (13 bytes)   inline method (bytecode parsing)
                              @ 9  java.lang.invoke.LambdaForm$DMH/0x00007f867412c000.newInvokeSpecial(Object, Object, Object, Object, Object):Object (30 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 7  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                        @ 24  som.Vector$$Lambda/0x00007f8674195098.<init>(Object, boolean[], Object[], int[]):void (26 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=17 <= 300.000000)
                                            @ 17  som.Vector.lambda$remove$0(Object, boolean[], Object[], int[], Object):void (28 bytes)   relevance-based (relevance=1.000000, probability=4.202787, bonus=1.000000, nodes=26 <= 300.000000)
                                          @ 20  som.Vector$$Lambda/0x00007f8674195098.apply(Object):void (21 bytes)   relevance-based (relevance=1.000000, probability=4.202787, bonus=1.000000, nodes=28 <= 300.000000)
                                        @ 36  som.Vector.forEach(ForEachInterface):void (32 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=41 <= 300.000000)
                                      @ 5  som.Vector.remove(Object):boolean (61 bytes)   relevance-based (relevance=2.000000, probability=0.500000, bonus=1.000000, nodes=73 <= 300.000000)
                                    @ 12  deltablue.Variable.removeConstraint(AbstractConstraint):void (23 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=90 <= 300.000000)
                                  @ 13  deltablue.UnaryConstraint.removeFromGraph():void (21 bytes)   relevance-based (relevance=4.000000, probability=1.000000, bonus=1.000000, nodes=100 <= 300.000000)
                                @ 55  deltablue.AbstractConstraint.destroyConstraint(Planner):void (17 bytes)   relevance-based (relevance=1.000124, probability=1.000000, bonus=1.000000, nodes=224 <= 300.000000)
                              @ 225  deltablue.Planner.change(Variable, int):void (59 bytes)   not inlining relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=412 > 300.000000)
                              @ 181  som.Vector.at(int):Object (18 bytes)   relevance-based (relevance=1.000000, probability=59992.000000, bonus=1.000000, nodes=10 <= 300.000000)
                              @ 242  som.Vector.at(int):Object (18 bytes)   relevance-based (relevance=1.000000, probability=63384.000000, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 2  java.nio.CharBuffer.limit(int):CharBuffer (8 bytes)   inline method (bytecode parsing)
                            @ 2  java.nio.MappedByteBuffer.limit(int):MappedByteBuffer (8 bytes)   inline method (bytecode parsing)
                              @ 2  java.nio.ByteBuffer.limit(int):ByteBuffer (8 bytes)   inline method (bytecode parsing)
                            @ 2  java.nio.IntBuffer.limit(int):IntBuffer (8 bytes)   inline method (bytecode parsing)
                                @ 2  java.nio.Buffer.limit(int):Buffer (65 bytes)   not inlining relevance-based (relevance=0.000123, probability=0.000075, bonus=1.000000, nodes=27 > 0.036837)
                                  @ 2  java.nio.Buffer.limit(int):Buffer (65 bytes)   relevance-based (relevance=0.316798, probability=0.193128, bonus=1.000000, nodes=27 <= 95.039293)
                                @ 2  java.nio.ByteBuffer.limit(int):ByteBuffer (8 bytes)   relevance-based (relevance=0.316798, probability=0.193128, bonus=1.000000, nodes=28 <= 95.039293)
                                @ 2  java.nio.Buffer.limit(int):Buffer (65 bytes)   relevance-based (relevance=0.323428, probability=0.197170, bonus=1.000000, nodes=27 <= 97.028487)
                                @ 2  java.nio.Buffer.limit(int):Buffer (65 bytes)   relevance-based (relevance=1.000000, probability=0.609626, bonus=1.000000, nodes=27 <= 300.000000)
                              @ 39  java.nio.CharBuffer.limit(int):Buffer (6 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=102 <= 300.000000)
                            @ 2  java.nio.CharBuffer.position(int):CharBuffer (8 bytes)   inline method (bytecode parsing)
                            @ 2  java.nio.MappedByteBuffer.position(int):MappedByteBuffer (8 bytes)   inline method (bytecode parsing)
                              @ 2  java.nio.ByteBuffer.position(int):ByteBuffer (8 bytes)   inline method (bytecode parsing)
                            @ 2  java.nio.IntBuffer.position(int):IntBuffer (8 bytes)   inline method (bytecode parsing)
                                @ 2  java.nio.Buffer.position(int):Buffer (52 bytes)   not inlining relevance-based (relevance=0.000216, probability=0.000075, bonus=1.000000, nodes=16 > 0.064865)
                                  @ 2  java.nio.Buffer.position(int):Buffer (52 bytes)   relevance-based (relevance=0.557835, probability=0.193128, bonus=1.000000, nodes=16 <= 167.350419)
                                @ 2  java.nio.ByteBuffer.position(int):ByteBuffer (8 bytes)   relevance-based (relevance=0.557835, probability=0.193128, bonus=1.000000, nodes=17 <= 167.350419)
                                @ 2  java.nio.Buffer.position(int):Buffer (52 bytes)   relevance-based (relevance=0.569510, probability=0.197170, bonus=1.000000, nodes=16 <= 170.853102)
                                @ 2  java.nio.Buffer.position(int):Buffer (52 bytes)   relevance-based (relevance=1.000000, probability=0.609626, bonus=1.000000, nodes=16 <= 300.000000)
                              @ 45  java.nio.CharBuffer.position(int):Buffer (6 bytes)   relevance-based (relevance=1.760855, probability=1.000000, bonus=1.000000, nodes=69 <= 300.000000)
                            @ 4  jdk.vm.ci.hotspot.HotSpotResolvedJavaType.hashCode():int (8 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.vm.ci.hotspot.HotSpotJavaType.getName():String (5 bytes)   inline accessor method (bytecode parsing)
                            @ 4  java.lang.Byte.hashCode(byte):int (2 bytes)   inline method (bytecode parsing)
                                @ 17  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=0.005055, probability=0.003535, bonus=1.000000, nodes=9)
                                @ 27  java.lang.StringLatin1.hashCode(byte[]):int (52 bytes)   not inlining relevance-based (relevance=0.005055, probability=0.003535, bonus=1.000000, nodes=22 > 1.516581)
                                @ 4  java.lang.Boolean.hashCode(boolean):int (14 bytes)   trivial (relevance=1.000000, probability=0.979704, bonus=1.000000, nodes=9)
                                  @ 17  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=0.398774, probability=0.278846, bonus=1.000000, nodes=9)
                                  @ 27  java.lang.StringLatin1.hashCode(byte[]):int (52 bytes)   relevance-based (relevance=0.398774, probability=0.278846, bonus=1.000000, nodes=22 <= 119.632312)
                                @ 4  java.lang.String.hashCode():int (60 bytes)   relevance-based (relevance=1.000000, probability=0.979704, bonus=1.000000, nodes=47 <= 300.000000)
                              @ 43  jdk.vm.ci.hotspot.HotSpotResolvedJavaFieldImpl.hashCode():int (13 bytes)   relevance-based (relevance=1.000000, probability=2.010542, bonus=1.000000, nodes=150 <= 300.000000)
                            @ 1  java.util.Objects.requireNonNull(Object):Object (14 bytes)   inline method (bytecode parsing)
                              @ 8  jdk.graal.compiler.graph.iterators.NodeIterable.iterator():Iterator (10 bytes)   not inlining no type profile exists
                            @ 1  jdk.graal.compiler.graph.iterators.NodeIterator.<init>():void (5 bytes)   inline method (bytecode parsing)
                                @ 17  jdk.graal.compiler.graph.iterators.PredicatedProxyNodeIterator.<init>(Iterator, NodePredicate):void (15 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                              @ 6  jdk.graal.compiler.graph.iterators.FilteredNodeIterable.iterator():Iterator (21 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=16 <= 300.000000)
                            @ 8  org.graalvm.collections.EconomicMapImpl.getKey(int):Object (9 bytes)   inline method (bytecode parsing)
                                  @ 11  jdk.graal.compiler.graph.Node.isAlive():boolean (13 bytes)   trivial (relevance=4.000000, probability=1.346016, bonus=1.000000, nodes=9)
                                @ 25  jdk.graal.compiler.graph.iterators.NodePredicate.apply(Node):boolean (0 bytes)   not inlining no type profile exists
                                @ 37  java.util.Iterator.hasNext():boolean (0 bytes)   not inlining no type profile exists
                                @ 50  java.util.Iterator.next():Object (0 bytes)   not inlining no type profile exists
                                  @ 75  jdk.graal.compiler.graph.Node.isAlive():boolean (13 bytes)   trivial (relevance=0.500000, probability=0.757134, bonus=1.000000, nodes=9)
                                @ 89  jdk.graal.compiler.graph.iterators.NodePredicate.apply(Node):boolean (0 bytes)   not inlining no type profile exists
                                @ 1  jdk.graal.compiler.graph.iterators.PredicatedProxyNodeIterator.forward():void (103 bytes)   relevance-based (relevance=1.000000, probability=1.514268, bonus=1.000000, nodes=93 <= 300.000000)
                              @ 13  jdk.graal.compiler.graph.iterators.NodeIterator.hasNext():boolean (17 bytes)   relevance-based (relevance=1.514268, probability=1.514268, bonus=1.000000, nodes=98 <= 300.000000)
                                    @ 11  jdk.graal.compiler.graph.Node.isAlive():boolean (13 bytes)   trivial (relevance=2.716919, probability=0.457127, bonus=1.000000, nodes=9)
                                  @ 25  jdk.graal.compiler.graph.iterators.NodePredicate.apply(Node):boolean (0 bytes)   not inlining no type profile exists
                                  @ 37  java.util.Iterator.hasNext():boolean (0 bytes)   not inlining no type profile exists
                                  @ 50  java.util.Iterator.next():Object (0 bytes)   not inlining no type profile exists
                                    @ 75  jdk.graal.compiler.graph.Node.isAlive():boolean (13 bytes)   trivial (relevance=0.339615, probability=0.257134, bonus=1.000000, nodes=9)
                                  @ 89  jdk.graal.compiler.graph.iterators.NodePredicate.apply(Node):boolean (0 bytes)   not inlining no type profile exists
                                  @ 1  jdk.graal.compiler.graph.iterators.PredicatedProxyNodeIterator.forward():void (103 bytes)   relevance-based (relevance=0.679230, probability=0.514268, bonus=1.000000, nodes=93 <= 203.768927)
                                @ 17  java.util.Arrays.rangeCheck(int, int, int):void (74 bytes)   relevance-based (relevance=1.000000, probability=0.943211, bonus=1.000000, nodes=10 <= 300.000000)
                                @ 1  jdk.graal.compiler.graph.iterators.NodeIterator.next():Node (31 bytes)   not inlining relevance-based (relevance=0.339615, probability=0.514268, bonus=1.000000, nodes=105 > 101.884463)
                              @ 22  jdk.graal.compiler.graph.iterators.NodeIterator.next():Object (5 bytes)   trivial (relevance=0.339615, probability=0.514268, bonus=1.000000, nodes=7)
                            @ 8  jdk.graal.compiler.phases.common.inlining.walker.ComputeInliningRelevance$Scope.lambda$process$0(NodeWorkList, LoopExitNode):void (9 bytes)   inline method (bytecode parsing)
                              @ 2  jdk.graal.compiler.nodes.FixedWithNextNode.next():FixedNode (5 bytes)   inline accessor method (bytecode parsing)
                                @ 43  java.util.TimSort.sort(Object[], int, int, Comparator, Object[], int, int):void (229 bytes)   not inlining too large previous low-level graph (low-level-nodes: 1189, relevance=1.000000, probability=0.943211, bonus=1.000000, nodes=75)
                              @ 5  jdk.graal.compiler.graph.NodeWorkList.add(Node):void (0 bytes)   not inlining no type profile exists
                            @ 2  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                  @ 4  java.util.Arrays.rangeCheck(int, int, int):void (74 bytes)   relevance-based (relevance=0.060208, probability=0.056789, bonus=1.000000, nodes=10 <= 18.062314)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  jdk.graal.compiler.nodes.loop.LoopFragment$$Lambda/0x00007f86742edee8.<init>(NodeBitMap):void (10 bytes)   inline method (bytecode parsing)
                                  @ 28  java.util.ComparableTimSort.sort(Object[], int, int, Object[], int, int):void (219 bytes)   not inlining relevance-based (relevance=0.060208, probability=0.056789, bonus=1.000000, nodes=22 > 18.062314)
                                @ 7  java.util.Arrays.sort(Object[], int, int):void (32 bytes)   relevance-based (relevance=0.060208, probability=0.056789, bonus=1.000000, nodes=15 <= 18.062314)
                            @ 18  jdk.graal.compiler.graph.NodeList.iterator():Iterator (10 bytes)   inline method (bytecode parsing)
                              @ 15  java.util.Arrays.sort(Object[], int, int, Comparator):void (47 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=28 <= 300.000000)
                            @ 32  jdk.graal.compiler.graph.NodeList$NodeListIterator.next():Object (5 bytes)   inline method (bytecode parsing)
                            @ 43  jdk.graal.compiler.nodes.virtual.EscapeObjectState.applyToVirtual(VirtualState$VirtualClosure):void (8 bytes)   inline method (bytecode parsing)
                            @ 50  jdk.graal.compiler.nodes.FrameState.outerFrameState():FrameState (5 bytes)   inline accessor method (bytecode parsing)
                            @ 57  jdk.graal.compiler.nodes.FrameState.outerFrameState():FrameState (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  jdk.graal.compiler.nodes.loop.LoopFragment.lambda$computeNodes$0(NodeBitMap, VirtualState):void (6 bytes)   inline method (bytecode parsing)
                            @ 33  jdk.graal.compiler.graph.Node.toString():String (8 bytes)   inline method (bytecode parsing)
                            @ 41  jdk.graal.compiler.graph.Node.id():int (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 22  jdk.graal.compiler.graph.Node.isAlive():boolean (13 bytes)   trivial (relevance=1.358460, probability=0.368224, bonus=1.000000, nodes=9)
                                        @ 25  jdk.graal.compiler.graph.NodeIdAccessor.getNodeId(Node):int (45 bytes)   relevance-based (relevance=0.679230, probability=0.368224, bonus=1.000000, nodes=14 <= 203.768927)
                                      @ 2  jdk.graal.compiler.graph.NodeBitMap.mark(Node):void (45 bytes)   relevance-based (relevance=0.679230, probability=0.368224, bonus=1.000000, nodes=23 <= 203.768927)
                              @ 57  jdk.internal.math.MathUtils.flog10pow2(int):int (11 bytes)   relevance-based (relevance=1.000000, probability=0.844888, bonus=1.000000, nodes=10 <= 300.000000)
                                    @ 2  jdk.graal.compiler.nodes.loop.LoopFragment$$Lambda/0x00007f86742edee8.apply(VirtualState):void (9 bytes)   relevance-based (relevance=0.679230, probability=0.368224, bonus=1.000000, nodes=29 <= 203.768927)
                              @ 72  jdk.internal.math.MathUtils.flog10threeQuartersPow2(int):int (15 bytes)   relevance-based (relevance=0.183589, probability=0.155112, bonus=1.000000, nodes=12 <= 55.076591)
                            @ 11  jdk.graal.compiler.graph.NodeList.access$000(NodeList):int (5 bytes)   inline method (bytecode parsing)
                              @ 81  jdk.internal.math.MathUtils.flog2pow10(int):int (11 bytes)   relevance-based (relevance=1.183589, probability=1.000000, bonus=1.000000, nodes=10 <= 300.000000)
                                    @ 6  jdk.graal.compiler.graph.NodeList$NodeListIterator.<init>(NodeList, int):void (23 bytes)   relevance-based (relevance=0.339615, probability=0.184112, bonus=1.000000, nodes=14 <= 101.884463)
                              @ 91  jdk.internal.math.MathUtils.g1(int):long (12 bytes)   relevance-based (relevance=1.183589, probability=1.000000, bonus=1.000000, nodes=10 <= 300.000000)
                                    @ 23  jdk.graal.compiler.graph.NodeList$NodeListIterator.hasNext():boolean (72 bytes)   relevance-based (relevance=0.679230, probability=0.368224, bonus=1.000000, nodes=11 <= 203.768927)
                              @ 98  jdk.internal.math.MathUtils.g0(int):long (14 bytes)   relevance-based (relevance=1.183589, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                                    @ 1  jdk.graal.compiler.graph.NodeList$NodeListIterator.next():Node (72 bytes)   relevance-based (relevance=0.339615, probability=0.184112, bonus=1.000000, nodes=12 <= 101.884463)
                            @ 5  jdk.graal.compiler.nodes.loop.LoopFragment.lambda$computeNodes$0(NodeBitMap, VirtualState):void (6 bytes)   inline method (bytecode parsing)
                              @ 112  jdk.internal.math.DoubleToDecimal.rop(long, long, long):long (58 bytes)   relevance-based (relevance=1.183589, probability=1.000000, bonus=1.000000, nodes=20 <= 300.000000)
                              @ 126  jdk.internal.math.DoubleToDecimal.rop(long, long, long):long (58 bytes)   relevance-based (relevance=1.183589, probability=1.000000, bonus=1.000000, nodes=20 <= 300.000000)
                            @ 33  jdk.graal.compiler.graph.Node.toString():String (8 bytes)   inline method (bytecode parsing)
                            @ 41  jdk.graal.compiler.graph.Node.id():int (5 bytes)   inline accessor method (bytecode parsing)
                              @ 140  jdk.internal.math.DoubleToDecimal.rop(long, long, long):long (58 bytes)   relevance-based (relevance=1.183589, probability=1.000000, bonus=1.000000, nodes=20 <= 300.000000)
                                          @ 22  jdk.graal.compiler.graph.Node.isAlive():boolean (13 bytes)   trivial (relevance=0.679230, probability=0.184112, bonus=1.000000, nodes=9)
                                        @ 25  jdk.graal.compiler.graph.NodeIdAccessor.getNodeId(Node):int (45 bytes)   relevance-based (relevance=0.339615, probability=0.184112, bonus=1.000000, nodes=14 <= 101.884463)
                            @ 15  jdk.internal.math.MathUtils.pow10(int):long (6 bytes)   inline method (bytecode parsing)
                                      @ 2  jdk.graal.compiler.graph.NodeBitMap.mark(Node):void (45 bytes)   relevance-based (relevance=0.339615, probability=0.184112, bonus=1.000000, nodes=23 <= 101.884463)
                                    @ 2  jdk.graal.compiler.nodes.loop.LoopFragment$$Lambda/0x00007f86742edee8.apply(VirtualState):void (9 bytes)   relevance-based (relevance=0.339615, probability=0.184112, bonus=1.000000, nodes=29 <= 101.884463)
                                  @ 7  jdk.graal.compiler.nodes.FrameState.applyToVirtual(VirtualState$VirtualClosure):void (65 bytes)   not inlining relevance-based (relevance=0.339615, probability=0.368224, bonus=1.000000, nodes=115 > 101.884463)
                                @ 8  jdk.graal.compiler.nodes.loop.LoopFragment.lambda$computeNodes$1(NodeBitMap, FrameState):void (11 bytes)   relevance-based (relevance=0.339615, probability=0.368224, bonus=1.000000, nodes=17 <= 101.884463)
                              @ 30  jdk.graal.compiler.nodes.loop.LoopFragment$$Lambda/0x00007f86742edac0.accept(Object):void (12 bytes)   relevance-based (relevance=0.339615, probability=0.514268, bonus=1.000000, nodes=39 <= 101.884463)
                                @ 7  jdk.internal.math.MathUtils.flog10pow2(int):int (11 bytes)   relevance-based (relevance=0.479878, probability=0.383495, bonus=1.000000, nodes=10 <= 143.963297)
                                @ 36  jdk.internal.math.FormattedFPDecimal.set(long, int, int):void (17 bytes)   relevance-based (relevance=0.479878, probability=0.383495, bonus=1.000000, nodes=13 <= 143.963297)
                              @ 248  jdk.internal.math.DoubleToDecimal.toChars(long, int, FormattedFPDecimal):int (161 bytes)   relevance-based (relevance=0.453900, probability=0.383495, bonus=1.000000, nodes=41 <= 136.170037)
                            @ 15  jdk.internal.math.MathUtils.pow10(int):long (6 bytes)   inline method (bytecode parsing)
                                @ 7  jdk.internal.math.MathUtils.flog10pow2(int):int (11 bytes)   relevance-based (relevance=0.256906, probability=0.205307, bonus=1.000000, nodes=10 <= 77.071753)
                                @ 36  jdk.internal.math.FormattedFPDecimal.set(long, int, int):void (17 bytes)   relevance-based (relevance=0.256906, probability=0.205307, bonus=1.000000, nodes=13 <= 77.071753)
                              @ 327  jdk.internal.math.DoubleToDecimal.toChars(long, int, FormattedFPDecimal):int (161 bytes)   relevance-based (relevance=0.242999, probability=0.205307, bonus=1.000000, nodes=41 <= 72.899577)
                            @ 15  jdk.internal.math.MathUtils.pow10(int):long (6 bytes)   inline method (bytecode parsing)
                                @ 7  jdk.internal.math.MathUtils.flog10pow2(int):int (11 bytes)   relevance-based (relevance=0.514544, probability=0.411199, bonus=1.000000, nodes=10 <= 154.363223)
                                @ 36  jdk.internal.math.FormattedFPDecimal.set(long, int, int):void (17 bytes)   relevance-based (relevance=0.514544, probability=0.411199, bonus=1.000000, nodes=13 <= 154.363223)
                              @ 381  jdk.internal.math.DoubleToDecimal.toChars(long, int, FormattedFPDecimal):int (161 bytes)   relevance-based (relevance=0.486690, probability=0.411199, bonus=1.000000, nodes=41 <= 146.006977)
                            @ 4  deltablue.Planner.<init>():void (10 bytes)   inline method (bytecode parsing)
                            @ 12  som.Vector.<init>():void (7 bytes)   inline method (bytecode parsing)
                              @ 3  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 18  deltablue.Variable.value(int):Variable (15 bytes)   inline method (bytecode parsing)
                              @ 10  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 25  deltablue.Variable.value(int):Variable (15 bytes)   inline method (bytecode parsing)
                              @ 10  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 75  deltablue.StayConstraint.<init>(Variable, Strength$Sym, Planner):void (8 bytes)   inline method (bytecode parsing)
                              @ 4  deltablue.UnaryConstraint.<init>(Variable, Strength$Sym, Planner):void (16 bytes)   inline method (bytecode parsing)
                                @ 2  deltablue.AbstractConstraint.<init>(Strength$Sym):void (13 bytes)   inline method (bytecode parsing)
                                  @ 6  deltablue.Strength.of(Strength$Sym):Strength (11 bytes)   inline method (bytecode parsing)
                                @ 12  deltablue.AbstractConstraint.addConstraint(Planner):void (10 bytes)   inline method (bytecode parsing)
                            @ 114  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 144  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 187  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 248  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                              @ 181  som.Vector.at(int):Object (18 bytes)   relevance-based (relevance=1.000000, probability=0.999984, bonus=1.000000, nodes=10 <= 300.000000)
                              @ 181  som.Vector.at(int):Object (18 bytes)   relevance-based (relevance=1.000000, probability=62590.909123, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 9  deltablue.EditConstraint.<init>(Variable, Strength$Sym, Planner):void (8 bytes)   inline method (bytecode parsing)
                              @ 4  deltablue.UnaryConstraint.<init>(Variable, Strength$Sym, Planner):void (16 bytes)   inline method (bytecode parsing)
                                @ 2  deltablue.AbstractConstraint.<init>(Strength$Sym):void (13 bytes)   inline method (bytecode parsing)
                                  @ 6  deltablue.Strength.of(Strength$Sym):Strength (11 bytes)   inline method (bytecode parsing)
                                @ 12  deltablue.AbstractConstraint.addConstraint(Planner):void (10 bytes)   inline method (bytecode parsing)
                            @ 39  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 44  deltablue.Plan.execute():void (10 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object):Object (8 bytes)   inline method (bytecode parsing)
                                @ 4  java.lang.invoke.LambdaForm$MH/0x00007f8674000800.invoke(Object):Object (8 bytes)   inline method (bytecode parsing)
                                    @ 7  deltablue.Strength$Sym.customHash():int (5 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                                  @ 1  som.Dictionary.hash(Dictionary$CustomHash):int (20 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                            @ 6  som.Dictionary.getBucketIdx(int):int (10 bytes)   inline method (bytecode parsing)
                                  @ 7  som.Dictionary.getBucket(int):Dictionary$Entry (11 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                                  @ 18  som.IdentityDictionary$IdEntry.match(int, Object):boolean (22 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                @ 4  som.Dictionary.at(Dictionary$CustomHash):Object (39 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=28 <= 300.000000)
                            @ 5  deltablue.Variable.addConstraint(AbstractConstraint):void (9 bytes)   inline method (bytecode parsing)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                            @ 4  java.lang.StringBuilder.<init>():void (7 bytes)   inline method (bytecode parsing)
                                    @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000124, probability=0.000124, bonus=1.000000, nodes=41 > 0.037287)
                                  @ 5  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=35 <= 300.000000)
                              @ 3  java.lang.AbstractStringBuilder.<init>(int):void (39 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                                @ 1  deltablue.UnaryConstraint.addToGraph():void (14 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=47 <= 300.000000)
                              @ 34  java.lang.Long.toString(long, int):String (139 bytes)   not inlining too large previous low-level graph (low-level-nodes: 421, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=8)
                            @ 10  java.util.Formatter$Flags.contains(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 32  java.util.Formatter$Flags.contains(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                              @ 44  java.util.Formatter$FormatSpecifier.leadingSign(StringBuilder, boolean):StringBuilder (80 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                  @ 1  deltablue.Planner.newMark():int (15 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=10 <= 300.000000)
                              @ 79  java.util.Formatter$FormatSpecifier.adjustWidth(int, int, boolean):int (29 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=9)
                            @ 13  java.lang.StringBuilder.length():int (5 bytes)   inline method (bytecode parsing)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.AbstractStringBuilder.length():int (5 bytes)   inline accessor method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                            @ 101  java.util.Formatter$Flags.contains(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                            @ 261  java.lang.StringBuilder.append(char):StringBuilder (8 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f867403aa08.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 291  java.lang.StringBuilder.append(char):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 337  java.lang.StringBuilder.length():int (5 bytes)   inline method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.AbstractStringBuilder.length():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                              @ 84  java.util.Formatter$FormatSpecifier.localizedMagnitude(Formatter, StringBuilder, CharSequence, int, int, int, Locale):StringBuilder (381 bytes)   not inlining too large previous low-level graph (low-level-nodes: 981, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=94)
                              @ 93  java.util.Formatter$FormatSpecifier.trailingSign(StringBuilder, boolean):StringBuilder (26 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=6)
                                  @ 8  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 690, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=72)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 353  java.util.Formatter$FormatSpecifier.appendJustified(Appendable, CharSequence):void (89 bytes)   not inlining too large previous low-level graph (low-level-nodes: 367, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=13)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f867403aa08.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 19  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 690, relevance=1.000000, probability=1.002830, bonus=1.000000, nodes=72)
                                @ 6  deltablue.Planner.incrementalAdd(AbstractConstraint):void (27 bytes)   relevance-based (relevance=1.000124, probability=1.000000, bonus=1.000000, nodes=28 <= 300.000000)
                            @ 5  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                    @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000124, probability=0.000124, bonus=1.000000, nodes=41 > 0.037287)
                                  @ 11  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=35 <= 300.000000)
                                @ 14  som.Vector.with(Object):Vector (16 bytes)   relevance-based (relevance=1.000124, probability=1.000000, bonus=1.000000, nodes=40 <= 300.000000)
                            @ 4  som.Vector.<init>():void (7 bytes)   inline method (bytecode parsing)
                              @ 3  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 10  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.Planner$$Lambda/0x00007f8674194000.<init>(Vector):void (10 bytes)   inline method (bytecode parsing)
                                      @ 1  deltablue.AbstractConstraint.isInput():boolean (2 bytes)   not inlining no type profile exists
                                      @ 8  deltablue.AbstractConstraint.isSatisfied():boolean (0 bytes)   not inlining no type profile exists
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                          @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000124, probability=0.000261, bonus=1.000000, nodes=41 > 0.037287)
                                @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                                        @ 16  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=2.101394, bonus=1.000000, nodes=35 <= 300.000000)
                              @ 2  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=8)
                                      @ 8  deltablue.Planner.lambda$extractPlanFromConstraints$1(Vector, AbstractConstraint):void (20 bytes)   relevance-based (relevance=1.000000, probability=8.405575, bonus=1.000000, nodes=59 <= 300.000000)
                              @ 9  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                              @ 23  java.lang.StringConcatHelper.checkOverflow(long):long (17 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=8)
                                    @ 20  deltablue.Planner$$Lambda/0x00007f8674194000.apply(Object):void (12 bytes)   relevance-based (relevance=1.000000, probability=8.405575, bonus=1.000000, nodes=64 <= 300.000000)
                                  @ 15  som.Vector.forEach(ForEachInterface):void (32 bytes)   not inlining callee invoke probability is too high (invokeP=12.608623, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=77)
                            @ 9  deltablue.Plan.<init>():void (7 bytes)   inline method (bytecode parsing)
                              @ 3  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 39  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 67  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                                  @ 20  deltablue.Planner.makePlan(Vector):Plan (86 bytes)   not inlining too large previous low-level graph (low-level-nodes: 817, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=69)
                                @ 22  deltablue.Planner.extractPlanFromConstraints(Vector):Plan (24 bytes)   relevance-based (relevance=1.000124, probability=1.000000, bonus=1.000000, nodes=27 <= 300.000000)
                                  @ 1  deltablue.UnaryConstraint.isSatisfied():boolean (5 bytes)   trivial (relevance=2.000000, probability=1.000000, bonus=1.000000, nodes=5)
                                @ 2  org.graalvm.collections.EconomicMapImpl.getRawValue(int):Object (11 bytes)   relevance-based (relevance=1.046404, probability=1.000000, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 21  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 8  org.graalvm.collections.EconomicMapImpl.getValue(int):Object (23 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=19 <= 300.000000)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.Planner$$Lambda/0x00007f8674195ba8.<init>(Planner):void (10 bytes)   inline method (bytecode parsing)
                                    @ 1  deltablue.UnaryConstraint.getOutput():Variable (5 bytes)   trivial (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=5)
                                    @ 6  deltablue.UnaryConstraint.markUnsatisfied():void (6 bytes)   trivial (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=7)
                            @ 1  som.Vector.capacity():int (6 bytes)   inline method (bytecode parsing)
                            @ 31  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object, Object, Object, Object):Object (13 bytes)   inline method (bytecode parsing)
                              @ 9  java.lang.invoke.LambdaForm$DMH/0x00007f867412c000.newInvokeSpecial(Object, Object, Object, Object, Object):Object (30 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 7  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                          @ 24  som.Vector$$Lambda/0x00007f8674195098.<init>(Object, boolean[], Object[], int[]):void (26 bytes)   relevance-based (relevance=1.000000, probability=0.250000, bonus=1.000000, nodes=17 <= 300.000000)
                              @ 8  org.graalvm.word.LocationIdentity$AnyLocationIdentity.isImmutable():boolean (2 bytes)   relevance-based (relevance=2.602451, probability=0.987394, bonus=1.000000, nodes=14 <= 300.000000)
                                              @ 17  som.Vector.lambda$remove$0(Object, boolean[], Object[], int[], Object):void (28 bytes)   relevance-based (relevance=1.000000, probability=2.101394, bonus=1.000000, nodes=26 <= 300.000000)
                              @ 15  jdk.graal.compiler.nodes.FieldLocationIdentity.isImmutable():boolean (5 bytes)   relevance-based (relevance=1.775560, probability=0.981241, bonus=1.000000, nodes=10 <= 300.000000)
                                            @ 20  som.Vector$$Lambda/0x00007f8674195098.apply(Object):void (21 bytes)   relevance-based (relevance=1.000000, probability=2.101394, bonus=1.000000, nodes=28 <= 300.000000)
                                          @ 36  som.Vector.forEach(ForEachInterface):void (32 bytes)   relevance-based (relevance=1.000000, probability=0.250000, bonus=1.000000, nodes=41 <= 300.000000)
                              @ 24  org.graalvm.word.LocationIdentity.isAny():boolean (13 bytes)   trivial (relevance=1.198191, probability=0.662165, bonus=1.000000, nodes=9)
                                        @ 5  som.Vector.remove(Object):boolean (61 bytes)   relevance-based (relevance=2.000000, probability=0.250000, bonus=1.000000, nodes=73 <= 300.000000)
                              @ 31  org.graalvm.word.LocationIdentity.isAny():boolean (13 bytes)   trivial (relevance=1.198191, probability=0.662165, bonus=1.000000, nodes=9)
                                      @ 12  deltablue.Variable.removeConstraint(AbstractConstraint):void (23 bytes)   relevance-based (relevance=1.000000, probability=0.250000, bonus=1.000000, nodes=90 <= 300.000000)
                                    @ 10  deltablue.UnaryConstraint.removeFromGraph():void (21 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=100 <= 300.000000)
                            @ 31  jdk.vm.ci.meta.ModifiersProvider.isStatic():boolean (10 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.vm.ci.hotspot.HotSpotResolvedJavaFieldImpl.getModifiers():int (9 bytes)   inline method (bytecode parsing)
                            @ 35  jdk.vm.ci.meta.ModifiersProvider.isStatic():boolean (10 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.vm.ci.hotspot.HotSpotResolvedJavaFieldImpl.getModifiers():int (9 bytes)   inline method (bytecode parsing)
                            @ 4  som.Vector.<init>():void (7 bytes)   inline method (bytecode parsing)
                              @ 3  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 10  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 14  deltablue.Strength.absoluteWeakest():Strength (4 bytes)   inline method (bytecode parsing)
                                  @ 4  jdk.vm.ci.hotspot.HotSpotModifiers.jvmFieldModifiers():int (12 bytes)   trivial (relevance=2.000000, probability=0.007349, bonus=1.000000, nodes=4)
                            @ 17  deltablue.Variable.setWalkStrength(Strength):void (6 bytes)   inline method (bytecode parsing)
                            @ 22  deltablue.Variable.setStay(boolean):void (6 bytes)   inline method (bytecode parsing)
                                  @ 6  java.lang.reflect.Modifier.isStatic(int):boolean (13 bytes)   trivial (relevance=2.000000, probability=0.007349, bonus=1.000000, nodes=9)
                            @ 48  deltablue.Variable.getConstraints():Vector (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 4  jdk.vm.ci.hotspot.HotSpotModifiers.jvmFieldModifiers():int (12 bytes)   trivial (relevance=2.000000, probability=0.007349, bonus=1.000000, nodes=4)
                            @ 52  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                  @ 6  java.lang.reflect.Modifier.isStatic(int):boolean (13 bytes)   trivial (relevance=2.000000, probability=0.007349, bonus=1.000000, nodes=9)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.Planner$$Lambda/0x00007f86741952b8.<init>(Vector):void (10 bytes)   inline method (bytecode parsing)
                            @ 1  jdk.vm.ci.hotspot.HotSpotResolvedObjectTypeImpl.getMetaspacePointer():long (5 bytes)   inline accessor method (bytecode parsing)
                            @ 64  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                            @ 17  java.lang.NullPointerException.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                              @ 2  java.lang.RuntimeException.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 2  java.lang.Exception.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.Planner$$Lambda/0x00007f86741954d8.<init>(Vector):void (10 bytes)   inline method (bytecode parsing)
                            @ 76  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object):Object (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.lang.invoke.LambdaForm$MH/0x00007f8674000800.invoke(Object):Object (8 bytes)   inline method (bytecode parsing)
                 n                      @ 25  java.lang.NullPointerException.getExtendedNPEMessage():String (0 bytes)   not inlining it is a non-intrinsic native method
                                    @ 15  deltablue.Planner.removePropagateFrom(Variable):Vector (86 bytes)   not inlining too large previous low-level graph (low-level-nodes: 770, relevance=2.000000, probability=0.500000, bonus=1.000000, nodes=81)
                 n                        @ 16  java.lang.Throwable.fillInStackTrace(int):Throwable (0 bytes)   not inlining it is a non-intrinsic native method
              s                           @ 37  java.lang.Throwable.fillInStackTrace():Throwable (29 bytes)   relevance-based (relevance=4.000000, probability=0.000459, bonus=1.000000, nodes=34 <= 300.000000)
              s                         @ 24  java.lang.NullPointerException.fillInStackTrace():Throwable (41 bytes)   relevance-based (relevance=1.000000, probability=0.000459, bonus=1.000000, nodes=65 <= 300.000000)
                            @ 8  deltablue.Planner.lambda$incrementalRemove$0(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                                      @ 2  java.lang.Throwable.<init>(String):void (34 bytes)   relevance-based (relevance=1.000000, probability=0.000459, bonus=1.000000, nodes=76 <= 300.000000)
                                    @ 22  jdk.vm.ci.hotspot.HotSpotResolvedObjectTypeImpl.getKlassPointer():long (23 bytes)   relevance-based (relevance=1.000000, probability=0.000919, bonus=1.000000, nodes=88 <= 300.000000)
                                          @ 1  deltablue.Planner.newMark():int (15 bytes)   relevance-based (relevance=1.000000, probability=4.202787, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 1  jdk.vm.ci.hotspot.HotSpotResolvedObjectTypeImpl.getMetaspacePointer():long (5 bytes)   inline accessor method (bytecode parsing)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                            @ 17  java.lang.NullPointerException.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  java.lang.RuntimeException.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 2  java.lang.Exception.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f867403aa08.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                 n                      @ 25  java.lang.NullPointerException.getExtendedNPEMessage():String (0 bytes)   not inlining it is a non-intrinsic native method
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                 n                        @ 16  java.lang.Throwable.fillInStackTrace(int):Throwable (0 bytes)   not inlining it is a non-intrinsic native method
              s                           @ 37  java.lang.Throwable.fillInStackTrace():Throwable (29 bytes)   relevance-based (relevance=4.000000, probability=0.000230, bonus=1.000000, nodes=34 <= 300.000000)
                                          @ 8  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 690, relevance=1.000000, probability=4.202787, bonus=1.000000, nodes=72)
              s                         @ 24  java.lang.NullPointerException.fillInStackTrace():Throwable (41 bytes)   relevance-based (relevance=1.000000, probability=0.000230, bonus=1.000000, nodes=65 <= 300.000000)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                                      @ 2  java.lang.Throwable.<init>(String):void (34 bytes)   relevance-based (relevance=1.000000, probability=0.000230, bonus=1.000000, nodes=76 <= 300.000000)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                    @ 26  jdk.vm.ci.hotspot.HotSpotResolvedObjectTypeImpl.getKlassPointer():long (23 bytes)   relevance-based (relevance=4.000000, probability=0.000459, bonus=1.000000, nodes=88 <= 300.000000)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f867403aa08.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                                  @ 51  jdk.vm.ci.hotspot.HotSpotResolvedObjectTypeImpl.equals(Object):boolean (39 bytes)   relevance-based (relevance=1.000000, probability=0.003675, bonus=1.000000, nodes=182 <= 300.000000)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                @ 27  jdk.vm.ci.hotspot.HotSpotResolvedJavaFieldImpl.equals(Object):boolean (61 bytes)   relevance-based (relevance=1.023296, probability=0.058795, bonus=1.000000, nodes=233 <= 300.000000)
                                          @ 19  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 690, relevance=1.000000, probability=4.214682, bonus=1.000000, nodes=72)
                                        @ 2  deltablue.Planner.incrementalAdd(AbstractConstraint):void (27 bytes)   relevance-based (relevance=1.000000, probability=4.202787, bonus=1.000000, nodes=28 <= 300.000000)
                                      @ 20  deltablue.Planner$$Lambda/0x00007f8674195ba8.apply(Object):void (12 bytes)   relevance-based (relevance=1.000000, probability=4.202787, bonus=1.000000, nodes=37 <= 300.000000)
                              @ 39  jdk.graal.compiler.nodes.FieldLocationIdentity.equals(Object):boolean (54 bytes)   not inlining relevance-based (relevance=0.511648, probability=0.282756, bonus=1.000000, nodes=271 > 153.494426)
                                    @ 26  som.Vector.forEach(ForEachInterface):void (32 bytes)   not inlining callee invoke probability is too high (invokeP=16.834938, relevance=2.000000, probability=0.500000, bonus=1.000000, nodes=53)
                                  @ 9  deltablue.Planner.incrementalRemove(AbstractConstraint):void (30 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=121 <= 300.000000)
                            @ 1  som.Vector.capacity():int (6 bytes)   inline method (bytecode parsing)
                            @ 31  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object, Object, Object, Object):Object (13 bytes)   inline method (bytecode parsing)
                              @ 9  java.lang.invoke.LambdaForm$DMH/0x00007f867412c000.newInvokeSpecial(Object, Object, Object, Object, Object):Object (30 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 7  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                        @ 24  som.Vector$$Lambda/0x00007f8674195098.<init>(Object, boolean[], Object[], int[]):void (26 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=17 <= 300.000000)
                                            @ 17  som.Vector.lambda$remove$0(Object, boolean[], Object[], int[], Object):void (28 bytes)   relevance-based (relevance=1.000000, probability=4.202787, bonus=1.000000, nodes=26 <= 300.000000)
                                          @ 20  som.Vector$$Lambda/0x00007f8674195098.apply(Object):void (21 bytes)   relevance-based (relevance=1.000000, probability=4.202787, bonus=1.000000, nodes=28 <= 300.000000)
                                        @ 36  som.Vector.forEach(ForEachInterface):void (32 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=41 <= 300.000000)
                                      @ 5  som.Vector.remove(Object):boolean (61 bytes)   relevance-based (relevance=2.000000, probability=0.500000, bonus=1.000000, nodes=73 <= 300.000000)
                                    @ 12  deltablue.Variable.removeConstraint(AbstractConstraint):void (23 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=90 <= 300.000000)
                                  @ 13  deltablue.UnaryConstraint.removeFromGraph():void (21 bytes)   relevance-based (relevance=4.000000, probability=1.000000, bonus=1.000000, nodes=100 <= 300.000000)
                              @ 5  org.graalvm.collections.EconomicMapImpl$2.<init>(EconomicMapImpl):void (15 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                                @ 55  deltablue.AbstractConstraint.destroyConstraint(Planner):void (17 bytes)   relevance-based (relevance=1.000124, probability=1.000000, bonus=1.000000, nodes=224 <= 300.000000)
                              @ 225  deltablue.Planner.change(Variable, int):void (59 bytes)   not inlining relevance-based (relevance=1.000016, probability=1.000000, bonus=1.000000, nodes=412 > 300.000000)
                              @ 242  som.Vector.at(int):Object (18 bytes)   relevance-based (relevance=1.000000, probability=63800.500000, bonus=1.000000, nodes=10 <= 300.000000)
                              @ 17  java.util.Arrays.rangeCheck(int, int, int):void (74 bytes)   relevance-based (relevance=1.000000, probability=0.943243, bonus=1.000000, nodes=13 <= 300.000000)
                              @ 43  java.util.TimSort.sort(Object[], int, int, Comparator, Object[], int, int):void (229 bytes)   not inlining too large previous low-level graph (low-level-nodes: 1189, relevance=1.000000, probability=0.943243, bonus=1.000000, nodes=78)
                                @ 4  java.util.Arrays.rangeCheck(int, int, int):void (74 bytes)   relevance-based (relevance=0.060173, probability=0.056757, bonus=1.000000, nodes=13 <= 18.051826)
                                @ 28  java.util.ComparableTimSort.sort(Object[], int, int, Object[], int, int):void (219 bytes)   not inlining relevance-based (relevance=0.060173, probability=0.056757, bonus=1.000000, nodes=25 > 18.051826)
                              @ 7  java.util.Arrays.sort(Object[], int, int):void (32 bytes)   relevance-based (relevance=0.060173, probability=0.056757, bonus=1.000000, nodes=18 <= 18.051826)
                            @ 12  java.lang.String.<init>(byte[], byte):void (15 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.CharacterData.of(int):CharacterData (136 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=8)
                                @ 2  java.lang.CharacterDataLatin1.getPropertiesEx(int):int (11 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=8)
                              @ 5  java.lang.CharacterDataLatin1.isUpperCase(int):boolean (16 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=13 <= 300.000000)
                            @ 1  java.lang.Character.isUpperCase(int):boolean (9 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.CharacterData.of(int):CharacterData (136 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=8)
                                @ 2  java.lang.CharacterDataLatin1.getPropertiesEx(int):int (11 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=8)
                              @ 5  java.lang.CharacterDataLatin1.isUpperCase(int):boolean (16 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=13 <= 300.000000)
                              @ 2  java.lang.CharacterDataLatin1.getPropertiesEx(int):int (11 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=8)
                            @ 35  java.lang.Character.isUpperCase(char):boolean (5 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.Character.isUpperCase(int):boolean (9 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.CharacterData.of(int):CharacterData (136 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=8)
                                @ 2  java.lang.CharacterDataLatin1.getPropertiesEx(int):int (11 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=8)
                              @ 5  java.lang.CharacterDataLatin1.isUpperCase(int):boolean (16 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=13 <= 300.000000)
                              @ 3  java.lang.Math.max(int, int):int (11 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=7)
                              @ 55  java.util.Formatter$Conversion.isText(char):boolean (34 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=9)
                                @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                              @ 4  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=8)
                            @ 23  jdk.internal.misc.InternalLock.lock():void (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.util.concurrent.locks.ReentrantLock.lock():void (8 bytes)   inline method (bytecode parsing)
                            @ 35  jdk.internal.misc.InternalLock.unlock():void (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.util.concurrent.locks.ReentrantLock.unlock():void (10 bytes)   inline method (bytecode parsing)
                                @ 5  java.util.concurrent.locks.AbstractQueuedSynchronizer.release(int):boolean (19 bytes)   inline method (bytecode parsing)
                            @ 9  java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(int):void (20 bytes)   inline method (bytecode parsing)
                            @ 7  java.util.concurrent.locks.AbstractQueuedSynchronizer.compareAndSetState(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 15  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                            @ 21  java.util.concurrent.locks.AbstractOwnableSynchronizer.getExclusiveOwnerThread():Thread (5 bytes)   inline accessor method (bytecode parsing)
                            @ 29  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 51  java.util.concurrent.locks.AbstractQueuedSynchronizer.setState(int):void (6 bytes)   inline method (bytecode parsing)
                                  @ 1  java.util.concurrent.locks.ReentrantLock$NonfairSync.initialTryLock():boolean (58 bytes)   relevance-based (relevance=1.005333, probability=1.000000, bonus=1.000000, nodes=40 <= 300.000000)
                            @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 10  java.util.concurrent.locks.AbstractQueuedSynchronizer.compareAndSetState(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 20  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                                  @ 2  java.util.concurrent.locks.ReentrantLock$NonfairSync.tryAcquire(int):boolean (27 bytes)   not inlining relevance-based (relevance=0.005049, probability=0.004464, bonus=1.000000, nodes=36 > 1.514719)
                            @ 108  java.util.concurrent.locks.AbstractQueuedSynchronizer.tryAcquireShared(int):int (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.lang.UnsupportedOperationException.<init>():void (5 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.RuntimeException.<init>():void (5 bytes)   inline method (bytecode parsing)
                                  @ 1  java.lang.Exception.<init>():void (5 bytes)   inline method (bytecode parsing)
                            @ 245  java.util.concurrent.locks.AbstractQueuedSynchronizer$ExclusiveNode.<init>():void (5 bytes)   inline method (bytecode parsing)
                              @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer$Node.<init>():void (5 bytes)   inline method (bytecode parsing)
                            @ 290  java.util.concurrent.locks.AbstractQueuedSynchronizer$Node.setPrevRelaxed(AbstractQueuedSynchronizer$Node):void (12 bytes)   inline method (bytecode parsing)
                            @ 393  java.lang.Thread.interrupted():boolean (7 bytes)   inline method (bytecode parsing)
                                  @ 15  java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer$Node, int, boolean, boolean, boolean, long):int (424 bytes)   not inlining relevance-based (relevance=0.002525, probability=0.002232, bonus=1.000000, nodes=226 > 0.757359)
                                @ 4  java.util.concurrent.locks.ReentrantLock$Sync.lock():void (13 bytes)   relevance-based (relevance=1.138144, probability=1.000000, bonus=1.000000, nodes=57 <= 300.000000)
                            @ 39  java.io.BufferedWriter.min(int, int):int (9 bytes)   inline method (bytecode parsing)
                                  @ 1  java.io.BufferedWriter.ensureOpen():void (18 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=7)
                                  @ 6  java.io.BufferedWriter.growIfNeeded(int):void (63 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=15 <= 300.000000)
                            @ 16  java.lang.String.checkBoundsOffCount(int, int, int):int (10 bytes)   inline method (bytecode parsing)
                                      @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                                    @ 3  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=8)
                                      @ 6  jdk.internal.util.Preconditions.checkFromToIndex(int, int, int, BiFunction):int (24 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                                    @ 6  java.lang.String.checkBoundsBeginEnd(int, int, int):void (11 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=10 <= 300.000000)
                                    @ 6  jdk.internal.util.Preconditions.checkFromIndexSize(int, int, int, BiFunction):int (25 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=15 <= 300.000000)
                                    @ 21  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=9)
                                    @ 36  java.lang.StringLatin1.getChars(byte[], int, int, char[], int):void (12 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=38 <= 300.000000)
                                  @ 60  java.lang.String.getChars(int, int, char[], int):void (55 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=58 <= 300.000000)
                                @ 30  java.io.BufferedWriter.implWrite(String, int, int):void (100 bytes)   relevance-based (relevance=1.131007, probability=1.000000, bonus=1.000000, nodes=96 <= 300.000000)
                            @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 8  java.util.concurrent.locks.AbstractOwnableSynchronizer.getExclusiveOwnerThread():Thread (5 bytes)   inline accessor method (bytecode parsing)
                            @ 41  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                            @ 46  java.util.concurrent.locks.AbstractQueuedSynchronizer.setState(int):void (6 bytes)   inline method (bytecode parsing)
                                @ 2  java.util.concurrent.locks.ReentrantLock$Sync.tryRelease(int):boolean (51 bytes)   relevance-based (relevance=1.131007, probability=1.000000, bonus=1.000000, nodes=37 <= 300.000000)
                            @ 22  java.util.concurrent.locks.AbstractQueuedSynchronizer$Node.getAndUnsetStatus(int):int (14 bytes)   inline method (bytecode parsing)
                              @ 10  jdk.internal.misc.Unsafe.getAndBitwiseAndInt(Object, long, int):int (27 bytes)   inline method (bytecode parsing)
                            @ 5  java.lang.Thread.isVirtual():boolean (5 bytes)   inline method (bytecode parsing)
                                  @ 30  java.util.concurrent.locks.LockSupport.unpark(Thread):void (26 bytes)   not inlining relevance-based (relevance=0.006471, probability=0.004168, bonus=1.000000, nodes=23 > 1.941336)
                                @ 12  java.util.concurrent.locks.AbstractQueuedSynchronizer.signalNext(AbstractQueuedSynchronizer$Node):void (34 bytes)   relevance-based (relevance=0.993730, probability=0.878624, bonus=1.000000, nodes=56 <= 298.118920)
                              @ 7  java.io.BufferedWriter.write(String, int, int):void (82 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=265 <= 300.000000)
                              @ 217  java.util.HashMap$TreeNode.split(HashMap, HashMap$Node[], int, int):void (218 bytes)   not inlining relevance-based (relevance=0.000258, probability=0.002602, bonus=1.000000, nodes=119 > 0.077372)
                            @ 12  java.util.LinkedList$Node.<init>(LinkedList$Node, Object, LinkedList$Node):void (20 bytes)   inline method (bytecode parsing)
                            @ 8  jdk.graal.compiler.lir.stackslotalloc.LSStackSlotAllocator$Allocator.lambda$new$0(StackInterval, StackInterval):int (10 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.lir.stackslotalloc.StackInterval.from():int (5 bytes)   inline accessor method (bytecode parsing)
                              @ 5  jdk.graal.compiler.lir.stackslotalloc.StackInterval.from():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 8  jdk.graal.compiler.lir.stackslotalloc.LSStackSlotAllocator$Allocator.lambda$new$1(StackInterval, StackInterval):int (10 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.lir.stackslotalloc.StackInterval.to():int (5 bytes)   inline accessor method (bytecode parsing)
                              @ 5  jdk.graal.compiler.lir.stackslotalloc.StackInterval.to():int (5 bytes)   inline accessor method (bytecode parsing)
                                @ 1  jdk.graal.compiler.core.common.cfg.BasicBlock.getRelativeFrequency():double (0 bytes)   not inlining no type profile exists
                                @ 12  jdk.graal.compiler.core.common.cfg.BasicBlock.getRelativeFrequency():double (0 bytes)   not inlining no type profile exists
                                @ 23  jdk.graal.compiler.core.common.cfg.BasicBlock.getLoopDepth():int (0 bytes)   not inlining no type profile exists
                                @ 27  jdk.graal.compiler.core.common.cfg.BasicBlock.getLoopDepth():int (0 bytes)   not inlining no type profile exists
                                @ 39  jdk.graal.compiler.core.common.cfg.BasicBlock.getRelativeFrequency():double (0 bytes)   not inlining no type profile exists
                                @ 43  jdk.graal.compiler.core.common.cfg.BasicBlock.getRelativeFrequency():double (0 bytes)   not inlining no type profile exists
                                @ 9  jdk.graal.compiler.core.common.alloc.BasicBlockOrderUtils$BlockOrderComparator.compare(BasicBlock, BasicBlock):int (54 bytes)   relevance-based (relevance=1.000000, probability=2.010546, bonus=1.000000, nodes=47 <= 300.000000)
                              @ 44  jdk.graal.compiler.core.common.alloc.BasicBlockOrderUtils$BlockOrderComparator.compare(Object, Object):int (13 bytes)   relevance-based (relevance=1.552889, probability=2.138869, bonus=1.000000, nodes=99 <= 300.000000)
                            @ 8  jdk.graal.compiler.lir.stackslotalloc.LSStackSlotAllocator$Allocator.lambda$new$0(StackInterval, StackInterval):int (10 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.lir.stackslotalloc.StackInterval.from():int (5 bytes)   inline accessor method (bytecode parsing)
                              @ 5  jdk.graal.compiler.lir.stackslotalloc.StackInterval.from():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 8  jdk.graal.compiler.lir.stackslotalloc.LSStackSlotAllocator$Allocator.lambda$new$1(StackInterval, StackInterval):int (10 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.lir.stackslotalloc.StackInterval.to():int (5 bytes)   inline accessor method (bytecode parsing)
                              @ 5  jdk.graal.compiler.lir.stackslotalloc.StackInterval.to():int (5 bytes)   inline accessor method (bytecode parsing)
                                @ 1  jdk.graal.compiler.core.common.cfg.BasicBlock.getRelativeFrequency():double (0 bytes)   not inlining no type profile exists
                                @ 12  jdk.graal.compiler.core.common.cfg.BasicBlock.getRelativeFrequency():double (0 bytes)   not inlining no type profile exists
                                @ 23  jdk.graal.compiler.core.common.cfg.BasicBlock.getLoopDepth():int (0 bytes)   not inlining no type profile exists
                                @ 27  jdk.graal.compiler.core.common.cfg.BasicBlock.getLoopDepth():int (0 bytes)   not inlining no type profile exists
                                @ 39  jdk.graal.compiler.core.common.cfg.BasicBlock.getRelativeFrequency():double (0 bytes)   not inlining no type profile exists
                                @ 43  jdk.graal.compiler.core.common.cfg.BasicBlock.getRelativeFrequency():double (0 bytes)   not inlining no type profile exists
                                @ 9  jdk.graal.compiler.core.common.alloc.BasicBlockOrderUtils$BlockOrderComparator.compare(BasicBlock, BasicBlock):int (54 bytes)   relevance-based (relevance=1.000000, probability=2.198688, bonus=1.000000, nodes=47 <= 300.000000)
                              @ 66  jdk.graal.compiler.core.common.alloc.BasicBlockOrderUtils$BlockOrderComparator.compare(Object, Object):int (13 bytes)   relevance-based (relevance=9.384405, probability=2.358472, bonus=1.000000, nodes=99 <= 300.000000)
                            @ 8  jdk.graal.compiler.lir.stackslotalloc.LSStackSlotAllocator$Allocator.lambda$new$0(StackInterval, StackInterval):int (10 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.lir.stackslotalloc.StackInterval.from():int (5 bytes)   inline accessor method (bytecode parsing)
                              @ 5  jdk.graal.compiler.lir.stackslotalloc.StackInterval.from():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 8  jdk.graal.compiler.lir.stackslotalloc.LSStackSlotAllocator$Allocator.lambda$new$1(StackInterval, StackInterval):int (10 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.lir.stackslotalloc.StackInterval.to():int (5 bytes)   inline accessor method (bytecode parsing)
                              @ 5  jdk.graal.compiler.lir.stackslotalloc.StackInterval.to():int (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 1  jdk.graal.compiler.core.common.cfg.BasicBlock.getRelativeFrequency():double (0 bytes)   not inlining no type profile exists
                                  @ 12  jdk.graal.compiler.core.common.cfg.BasicBlock.getRelativeFrequency():double (0 bytes)   not inlining no type profile exists
                                  @ 23  jdk.graal.compiler.core.common.cfg.BasicBlock.getLoopDepth():int (0 bytes)   not inlining no type profile exists
                                  @ 27  jdk.graal.compiler.core.common.cfg.BasicBlock.getLoopDepth():int (0 bytes)   not inlining no type profile exists
                                  @ 39  jdk.graal.compiler.core.common.cfg.BasicBlock.getRelativeFrequency():double (0 bytes)   not inlining no type profile exists
                                  @ 43  jdk.graal.compiler.core.common.cfg.BasicBlock.getRelativeFrequency():double (0 bytes)   not inlining no type profile exists
                                  @ 9  jdk.graal.compiler.core.common.alloc.BasicBlockOrderUtils$BlockOrderComparator.compare(BasicBlock, BasicBlock):int (54 bytes)   relevance-based (relevance=1.000000, probability=1.741140, bonus=1.000000, nodes=47 <= 300.000000)
                                @ 44  jdk.graal.compiler.core.common.alloc.BasicBlockOrderUtils$BlockOrderComparator.compare(Object, Object):int (13 bytes)   relevance-based (relevance=1.553398, probability=1.852146, bonus=1.000000, nodes=99 <= 300.000000)
                            @ 8  jdk.graal.compiler.lir.stackslotalloc.LSStackSlotAllocator$Allocator.lambda$new$0(StackInterval, StackInterval):int (10 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.lir.stackslotalloc.StackInterval.from():int (5 bytes)   inline accessor method (bytecode parsing)
                              @ 5  jdk.graal.compiler.lir.stackslotalloc.StackInterval.from():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 8  jdk.graal.compiler.lir.stackslotalloc.LSStackSlotAllocator$Allocator.lambda$new$1(StackInterval, StackInterval):int (10 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.lir.stackslotalloc.StackInterval.to():int (5 bytes)   inline accessor method (bytecode parsing)
                              @ 5  jdk.graal.compiler.lir.stackslotalloc.StackInterval.to():int (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 1  jdk.graal.compiler.core.common.cfg.BasicBlock.getRelativeFrequency():double (0 bytes)   not inlining no type profile exists
                                  @ 12  jdk.graal.compiler.core.common.cfg.BasicBlock.getRelativeFrequency():double (0 bytes)   not inlining no type profile exists
                                  @ 23  jdk.graal.compiler.core.common.cfg.BasicBlock.getLoopDepth():int (0 bytes)   not inlining no type profile exists
                                  @ 27  jdk.graal.compiler.core.common.cfg.BasicBlock.getLoopDepth():int (0 bytes)   not inlining no type profile exists
                                  @ 39  jdk.graal.compiler.core.common.cfg.BasicBlock.getRelativeFrequency():double (0 bytes)   not inlining no type profile exists
                                  @ 43  jdk.graal.compiler.core.common.cfg.BasicBlock.getRelativeFrequency():double (0 bytes)   not inlining no type profile exists
                                  @ 9  jdk.graal.compiler.core.common.alloc.BasicBlockOrderUtils$BlockOrderComparator.compare(BasicBlock, BasicBlock):int (54 bytes)   relevance-based (relevance=1.000000, probability=1.905042, bonus=1.000000, nodes=47 <= 300.000000)
                                @ 66  jdk.graal.compiler.core.common.alloc.BasicBlockOrderUtils$BlockOrderComparator.compare(Object, Object):int (13 bytes)   relevance-based (relevance=9.388165, probability=2.043263, bonus=1.000000, nodes=99 <= 300.000000)
                              @ 76  java.util.PriorityQueue.siftDownUsingComparator(int, Object, Object[], int, Comparator):void (93 bytes)   not inlining callee invoke probability is too high (invokeP=15.751788, relevance=1.000000, probability=0.868040, bonus=1.000000, nodes=243)
                            @ 7  jdk.internal.org.objectweb.asm.Symbol.<init>(int, int, String, String, String, long):void (38 bytes)   inline method (bytecode parsing)
                            @ 17  java.lang.Enum.ordinal():int (5 bytes)   inline accessor method (bytecode parsing)
                              @ 2  java.util.EnumMap.isValidKey(Object):boolean (36 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=18 <= 300.000000)
                              @ 21  java.util.EnumMap.unmaskNull(Object):Object (13 bytes)   trivial (relevance=1.000084, probability=1.000000, bonus=1.000000, nodes=7)
                            @ 8  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                            @ 32  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                            @ 9  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.001173, probability=0.000442, bonus=1.000000, nodes=41 > 0.352041)
                                @ 11  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.014082, probability=0.005307, bonus=1.000000, nodes=21 > 4.224486)
                              @ 1  java.util.AbstractCollection.size():int (0 bytes)   not inlining no type profile exists
                              @ 9  java.util.AbstractCollection.iterator():Iterator (0 bytes)   not inlining no type profile exists
                              @ 52  java.util.Iterator.hasNext():boolean (0 bytes)   not inlining no type profile exists
                            @ 32  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                            @ 62  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                @ 62  java.util.AbstractCollection.finishToArray(Object[], Iterator):Object[] (66 bytes)   not inlining relevance-based (relevance=0.094660, probability=0.035677, bonus=1.000000, nodes=72 > 28.397934)
                              @ 22  java.util.Iterator.hasNext():boolean (0 bytes)   not inlining no type profile exists
                              @ 39  java.util.Iterator.next():Object (0 bytes)   not inlining no type profile exists
                                  @ 32  java.lang.Math.min(int, int):int (11 bytes)   trivial (relevance=0.094661, probability=0.035677, bonus=1.000000, nodes=7)
                                @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   relevance-based (relevance=0.094660, probability=0.035677, bonus=1.000000, nodes=17 <= 28.397934)
                              @ 4  java.util.Collection.toArray():Object[] (0 bytes)   not inlining no type profile exists
                                  @ 14  java.lang.Class.getComponentType():Class (14 bytes)   trivial (relevance=0.282835, probability=0.146406, bonus=1.000000, nodes=7)
                                  @ 32  java.lang.Math.min(int, int):int (11 bytes)   trivial (relevance=1.282835, probability=0.664042, bonus=1.000000, nodes=7)
                                @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   relevance-based (relevance=1.000000, probability=0.664042, bonus=1.000000, nodes=40 <= 300.000000)
                              @ 1  java.util.ArrayList.toArray():Object[] (12 bytes)   not inlining callee invoke probability is too high (invokeP=7.000000, relevance=1.761845, probability=1.000000, bonus=1.000000, nodes=169)
                            @ 49  java.lang.Math.max(int, int):int (11 bytes)   inline method (bytecode parsing)
                            @ 37  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                              @ 51  java.util.ArrayList.grow(int):Object[] (60 bytes)   not inlining too large previous low-level graph (low-level-nodes: 533, relevance=1.000000, probability=0.567587, bonus=1.000000, nodes=46)
                                @ 4  java.util.AbstractList$ListItr.nextIndex():int (5 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                              @ 1  java.util.AbstractList$SubList$1.nextIndex():int (18 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=17 <= 300.000000)
                            @ 36  java.util.Collections$UnmodifiableRandomAccessList.<init>(List):void (6 bytes)   inline method (bytecode parsing)
                                @ 2  java.util.Collections$UnmodifiableCollection.<init>(Collection):void (22 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=10 <= 300.000000)
                              @ 2  java.util.Collections$UnmodifiableList.<init>(List):void (11 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=14 <= 300.000000)
                              @ 1  java.util.ArrayList$SubList.checkForComodification():void (23 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=9)
                              @ 5  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                                @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                              @ 9  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=8)
                                @ 7  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                                  @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                                @ 13  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=8)
                            @ 5  java.util.Objects.checkIndex(int, int):int (7 bytes)   inline method (bytecode parsing)
                            @ 23  java.util.ArrayList.elementData(int):Object (7 bytes)   inline method (bytecode parsing)
                                @ 68  java.lang.StringLatin1.lastIndexOf(byte[], int, byte[], int, int):int (125 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=39 <= 300.000000)
                              @ 14  java.lang.String.lastIndexOf(byte[], byte, int, String, int):int (104 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=64 <= 300.000000)
                              @ 10  java.util.ArrayList$SubList.checkForComodification():void (23 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=9)
                            @ 1  org.graalvm.collections.EconomicMapImpl.size():int (10 bytes)   inline method (bytecode parsing)
                            @ 4  java.util.concurrent.locks.ReentrantLock.lock():void (8 bytes)   inline method (bytecode parsing)
                            @ 9  java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(int):void (20 bytes)   inline method (bytecode parsing)
                            @ 7  java.util.concurrent.locks.AbstractQueuedSynchronizer.compareAndSetState(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 15  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                            @ 21  java.util.concurrent.locks.AbstractOwnableSynchronizer.getExclusiveOwnerThread():Thread (5 bytes)   inline accessor method (bytecode parsing)
                            @ 29  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 51  java.util.concurrent.locks.AbstractQueuedSynchronizer.setState(int):void (6 bytes)   inline method (bytecode parsing)
                                @ 1  java.util.concurrent.locks.ReentrantLock$NonfairSync.initialTryLock():boolean (58 bytes)   relevance-based (relevance=1.005203, probability=1.000000, bonus=1.000000, nodes=40 <= 300.000000)
                            @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 10  java.util.concurrent.locks.AbstractQueuedSynchronizer.compareAndSetState(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 20  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                                @ 2  java.util.concurrent.locks.ReentrantLock$NonfairSync.tryAcquire(int):boolean (27 bytes)   not inlining relevance-based (relevance=0.005049, probability=0.004464, bonus=1.000000, nodes=36 > 1.514719)
                            @ 108  java.util.concurrent.locks.AbstractQueuedSynchronizer.tryAcquireShared(int):int (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.lang.UnsupportedOperationException.<init>():void (5 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.RuntimeException.<init>():void (5 bytes)   inline method (bytecode parsing)
                                  @ 1  java.lang.Exception.<init>():void (5 bytes)   inline method (bytecode parsing)
                            @ 245  java.util.concurrent.locks.AbstractQueuedSynchronizer$ExclusiveNode.<init>():void (5 bytes)   inline method (bytecode parsing)
                              @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer$Node.<init>():void (5 bytes)   inline method (bytecode parsing)
                            @ 290  java.util.concurrent.locks.AbstractQueuedSynchronizer$Node.setPrevRelaxed(AbstractQueuedSynchronizer$Node):void (12 bytes)   inline method (bytecode parsing)
                            @ 393  java.lang.Thread.interrupted():boolean (7 bytes)   inline method (bytecode parsing)
                                @ 15  java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer$Node, int, boolean, boolean, boolean, long):int (424 bytes)   not inlining relevance-based (relevance=0.002525, probability=0.002232, bonus=1.000000, nodes=226 > 0.757359)
                              @ 4  java.util.concurrent.locks.ReentrantLock$Sync.lock():void (13 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=57 <= 300.000000)
                            @ 4  java.util.concurrent.locks.ReentrantLock.unlock():void (10 bytes)   inline method (bytecode parsing)
                              @ 5  java.util.concurrent.locks.AbstractQueuedSynchronizer.release(int):boolean (19 bytes)   inline method (bytecode parsing)
                            @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 8  java.util.concurrent.locks.AbstractOwnableSynchronizer.getExclusiveOwnerThread():Thread (5 bytes)   inline accessor method (bytecode parsing)
                            @ 41  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                            @ 46  java.util.concurrent.locks.AbstractQueuedSynchronizer.setState(int):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  java.util.concurrent.locks.ReentrantLock$Sync.tryRelease(int):boolean (51 bytes)   relevance-based (relevance=1.137985, probability=1.000000, bonus=1.000000, nodes=37 <= 300.000000)
                            @ 22  java.util.concurrent.locks.AbstractQueuedSynchronizer$Node.getAndUnsetStatus(int):int (14 bytes)   inline method (bytecode parsing)
                              @ 10  jdk.internal.misc.Unsafe.getAndBitwiseAndInt(Object, long, int):int (27 bytes)   inline method (bytecode parsing)
                            @ 5  java.lang.Thread.isVirtual():boolean (5 bytes)   inline method (bytecode parsing)
                                @ 30  java.util.concurrent.locks.LockSupport.unpark(Thread):void (26 bytes)   not inlining relevance-based (relevance=0.006441, probability=0.004168, bonus=1.000000, nodes=23 > 1.932383)
                              @ 12  java.util.concurrent.locks.AbstractQueuedSynchronizer.signalNext(AbstractQueuedSynchronizer$Node):void (34 bytes)   relevance-based (relevance=0.989147, probability=0.878746, bonus=1.000000, nodes=56 <= 296.744194)
                            @ 13  java.util.concurrent.locks.ReentrantLock.lock():void (8 bytes)   inline method (bytecode parsing)
                            @ 25  java.util.concurrent.locks.ReentrantLock.unlock():void (10 bytes)   inline method (bytecode parsing)
                              @ 5  java.util.concurrent.locks.AbstractQueuedSynchronizer.release(int):boolean (19 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.ref.ReferenceQueue.headIsNull():boolean (13 bytes)   relevance-based (relevance=1.196309, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                            @ 9  java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(int):void (20 bytes)   inline method (bytecode parsing)
                            @ 7  java.util.concurrent.locks.AbstractQueuedSynchronizer.compareAndSetState(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 15  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                            @ 21  java.util.concurrent.locks.AbstractOwnableSynchronizer.getExclusiveOwnerThread():Thread (5 bytes)   inline accessor method (bytecode parsing)
                            @ 29  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 51  java.util.concurrent.locks.AbstractQueuedSynchronizer.setState(int):void (6 bytes)   inline method (bytecode parsing)
                                @ 1  java.util.concurrent.locks.ReentrantLock$NonfairSync.initialTryLock():boolean (58 bytes)   relevance-based (relevance=0.197327, probability=0.164096, bonus=1.000000, nodes=40 <= 59.198125)
                            @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 10  java.util.concurrent.locks.AbstractQueuedSynchronizer.compareAndSetState(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 20  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                                @ 2  java.util.concurrent.locks.ReentrantLock$NonfairSync.tryAcquire(int):boolean (27 bytes)   not inlining relevance-based (relevance=0.000991, probability=0.000733, bonus=1.000000, nodes=36 > 0.297353)
                            @ 108  java.util.concurrent.locks.AbstractQueuedSynchronizer.tryAcquireShared(int):int (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.lang.UnsupportedOperationException.<init>():void (5 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.RuntimeException.<init>():void (5 bytes)   inline method (bytecode parsing)
                                  @ 1  java.lang.Exception.<init>():void (5 bytes)   inline method (bytecode parsing)
                            @ 245  java.util.concurrent.locks.AbstractQueuedSynchronizer$ExclusiveNode.<init>():void (5 bytes)   inline method (bytecode parsing)
                              @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer$Node.<init>():void (5 bytes)   inline method (bytecode parsing)
                            @ 290  java.util.concurrent.locks.AbstractQueuedSynchronizer$Node.setPrevRelaxed(AbstractQueuedSynchronizer$Node):void (12 bytes)   inline method (bytecode parsing)
                            @ 393  java.lang.Thread.interrupted():boolean (7 bytes)   inline method (bytecode parsing)
                                @ 15  java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer$Node, int, boolean, boolean, boolean, long):int (424 bytes)   not inlining relevance-based (relevance=0.000496, probability=0.000366, bonus=1.000000, nodes=226 > 0.148677)
                              @ 4  java.util.concurrent.locks.ReentrantLock$Sync.lock():void (13 bytes)   relevance-based (relevance=0.196309, probability=0.164096, bonus=1.000000, nodes=57 <= 58.892778)
                              @ 17  java.lang.ref.ReferenceQueue.poll0():Reference (65 bytes)   relevance-based (relevance=0.196309, probability=0.164096, bonus=1.000000, nodes=41 <= 58.892778)
                            @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 8  java.util.concurrent.locks.AbstractOwnableSynchronizer.getExclusiveOwnerThread():Thread (5 bytes)   inline accessor method (bytecode parsing)
                            @ 41  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                            @ 46  java.util.concurrent.locks.AbstractQueuedSynchronizer.setState(int):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  java.util.concurrent.locks.ReentrantLock$Sync.tryRelease(int):boolean (51 bytes)   relevance-based (relevance=0.196309, probability=0.164096, bonus=1.000000, nodes=37 <= 58.892778)
                            @ 22  java.util.concurrent.locks.AbstractQueuedSynchronizer$Node.getAndUnsetStatus(int):int (14 bytes)   inline method (bytecode parsing)
                              @ 10  jdk.internal.misc.Unsafe.getAndBitwiseAndInt(Object, long, int):int (27 bytes)   inline method (bytecode parsing)
                              @ 12  java.util.concurrent.locks.AbstractQueuedSynchronizer.signalNext(AbstractQueuedSynchronizer$Node):void (34 bytes)   not inlining relevance-based (relevance=0.172501, probability=0.144194, bonus=1.000000, nodes=56 > 51.750190)
                            @ 34  java.lang.ref.Reference.refersTo(Object):boolean (6 bytes)   inline method (bytecode parsing)
                              @ 2  java.lang.ref.Reference.refersToImpl(Object):boolean (6 bytes)   relevance-based (relevance=1.000000, probability=0.999888, bonus=1.000000, nodes=12 <= 300.000000)
                            @ 2  java.lang.ref.WeakReference.<init>(Object):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  java.lang.ref.Reference.<init>(Object):void (7 bytes)   inline method (bytecode parsing)
                              @ 91  java.lang.ThreadLocal$ThreadLocalMap$Entry.<init>(ThreadLocal, Object):void (11 bytes)   not inlining relevance-based (relevance=0.000112, probability=0.000112, bonus=1.000000, nodes=14 > 0.033506)
                            @ 34  java.lang.ref.Reference.refersTo(Object):boolean (6 bytes)   inline method (bytecode parsing)
                              @ 2  java.lang.ref.Reference.refersToImpl(Object):boolean (6 bytes)   inline method (bytecode parsing)
                              @ 113  java.lang.ThreadLocal$ThreadLocalMap.cleanSomeSlots(int, int):boolean (61 bytes)   not inlining relevance-based (relevance=0.000112, probability=0.000112, bonus=1.000000, nodes=55 > 0.033506)
                            @ 18  jdk.graal.compiler.replacements.AllocationSnippets.allocateInstanceImpl(Word, UnsignedWord, boolean, AllocationSnippets$FillContent, boolean, boolean, AllocationSnippets$AllocationProfilingData):Object (143 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getTLABInfo():Word (5 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getThread():Word (8 bytes)   inline method (bytecode parsing)
                                  @ 4  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.registerAsWord(Register):Word (7 bytes)   inline method (bytecode parsing)
                              @ 9  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.readTlabTop(Word):Word (5 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.readTlabTop(Word):Word (17 bytes)   inline method (bytecode parsing)
                              @ 17  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.readTlabEnd(Word):Word (5 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.readTlabEnd(Word):Word (17 bytes)   inline method (bytecode parsing)
                              @ 35  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.useTLAB():boolean (7 bytes)   inline method (bytecode parsing)
                              @ 47  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.shouldAllocateInTLAB(UnsignedWord, boolean):boolean (33 bytes)   inline method (bytecode parsing)
                              @ 77  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.writeTlabTop(Word, Word):void (6 bytes)   inline method (bytecode parsing)
                                @ 2  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.writeTlabTop(Word, Word):void (15 bytes)   inline method (bytecode parsing)
                              @ 84  jdk.graal.compiler.replacements.AllocationSnippets.emitPrefetchAllocate(Word, boolean):void (61 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getPrefetchStyle():int (7 bytes)   inline method (bytecode parsing)
                                @ 9  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getPrefetchLines(boolean):int (18 bytes)   inline method (bytecode parsing)
                                @ 14  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getPrefetchStepSize():int (7 bytes)   inline method (bytecode parsing)
                                @ 20  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getPrefetchDistance():int (7 bytes)   inline method (bytecode parsing)
                              @ 103  jdk.graal.compiler.replacements.AllocationSnippets.formatObject(Word, UnsignedWord, Word, AllocationSnippets$FillContent, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):Object (41 bytes)   inline method (bytecode parsing)
                                @ 4  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.initializeObjectHeader(Word, Word, boolean):void (29 bytes)   inline method (bytecode parsing)
                                  @ 25  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.initializeObjectHeader(Word, Word, KlassPointer):void (20 bytes)   inline method (bytecode parsing)
                                @ 8  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.instanceHeaderSize():int (7 bytes)   inline method (bytecode parsing)
                                @ 27  jdk.graal.compiler.replacements.AllocationSnippets.fillContents(Word, AllocationSnippets$FillContent, int, UnsignedWord, boolean, boolean, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):void (58 bytes)   inline method (bytecode parsing)
                                  @ 22  jdk.graal.compiler.replacements.AllocationSnippets.zeroMemory(Word, int, UnsignedWord, boolean, boolean, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):void (19 bytes)   inline method (bytecode parsing)
                                    @ 15  jdk.graal.compiler.replacements.AllocationSnippets.fillMemory(long, Word, int, UnsignedWord, boolean, boolean, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):void (194 bytes)   inline method (bytecode parsing)
                                      @ 17  jdk.graal.compiler.replacements.ReplacementsUtil.dynamicAssert(boolean, String):void (12 bytes)   inline method (bytecode parsing)
                                      @ 56  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                                      @ 89  jdk.graal.compiler.replacements.ReplacementsUtil.dynamicAssert(boolean, String):void (12 bytes)   inline method (bytecode parsing)
                                      @ 153  jdk.graal.compiler.replacements.ReplacementsUtil.staticAssert(boolean, String):void (12 bytes)   inline method (bytecode parsing)
                                      @ 167  jdk.graal.compiler.replacements.AllocationSnippets.fillMemoryAlignedUnrollable(long, Word, UnsignedWord, UnsignedWord, boolean, AllocationSnippets$AllocationSnippetCounters):void (68 bytes)   inline method (bytecode parsing)
                                        @ 5  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                          @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                                        @ 44  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                                      @ 190  jdk.graal.compiler.replacements.AllocationSnippets.fillMemoryAligned(long, Word, UnsignedWord, UnsignedWord, boolean, UnsignedWord, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):void (155 bytes)   inline method (bytecode parsing)
                                        @ 91  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                          @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                                        @ 105  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                          @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                                        @ 134  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                                @ 33  jdk.graal.compiler.replacements.AllocationSnippets.emitMemoryBarrierIf(boolean):void (14 bytes)   inline method (bytecode parsing)
                                  @ 7  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                              @ 119  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                              @ 124  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.callNewInstanceStub(Word):Object (33 bytes)   inline method (bytecode parsing)
                                @ 21  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.nonNullOrDeopt(Object):Object (27 bytes)   inline method (bytecode parsing)
                              @ 133  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.profileAllocation(AllocationSnippets$AllocationProfilingData, UnsignedWord):void (51 bytes)   inline method (bytecode parsing)
                              @ 139  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.verifyOop(Object):Object (5 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.verifyOop(Object):Object (19 bytes)   inline method (bytecode parsing)
                            @ 8  jdk.graal.compiler.lir.stackslotalloc.LSStackSlotAllocator$Allocator.lambda$new$1(StackInterval, StackInterval):int (10 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.lir.stackslotalloc.StackInterval.to():int (5 bytes)   inline accessor method (bytecode parsing)
                              @ 5  jdk.graal.compiler.lir.stackslotalloc.StackInterval.to():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 8  jdk.graal.compiler.lir.stackslotalloc.LSStackSlotAllocator$Allocator.lambda$new$0(StackInterval, StackInterval):int (10 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.lir.stackslotalloc.StackInterval.from():int (5 bytes)   inline accessor method (bytecode parsing)
                              @ 5  jdk.graal.compiler.lir.stackslotalloc.StackInterval.from():int (5 bytes)   inline accessor method (bytecode parsing)
                                @ 1  jdk.graal.compiler.core.common.cfg.BasicBlock.getRelativeFrequency():double (0 bytes)   not inlining no type profile exists
                                @ 12  jdk.graal.compiler.core.common.cfg.BasicBlock.getRelativeFrequency():double (0 bytes)   not inlining no type profile exists
                                @ 23  jdk.graal.compiler.core.common.cfg.BasicBlock.getLoopDepth():int (0 bytes)   not inlining no type profile exists
                                @ 27  jdk.graal.compiler.core.common.cfg.BasicBlock.getLoopDepth():int (0 bytes)   not inlining no type profile exists
                                @ 39  jdk.graal.compiler.core.common.cfg.BasicBlock.getRelativeFrequency():double (0 bytes)   not inlining no type profile exists
                                @ 43  jdk.graal.compiler.core.common.cfg.BasicBlock.getRelativeFrequency():double (0 bytes)   not inlining no type profile exists
                                @ 9  jdk.graal.compiler.core.common.alloc.BasicBlockOrderUtils$BlockOrderComparator.compare(BasicBlock, BasicBlock):int (54 bytes)   relevance-based (relevance=1.000000, probability=1.465016, bonus=1.000000, nodes=47 <= 300.000000)
                              @ 21  jdk.graal.compiler.core.common.alloc.BasicBlockOrderUtils$BlockOrderComparator.compare(Object, Object):int (13 bytes)   relevance-based (relevance=1.605784, probability=1.644886, bonus=1.000000, nodes=99 <= 300.000000)
                              @ 2  java.nio.Buffer.position(int):Buffer (52 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=16 <= 300.000000)
                              @ 6  java.util.AbstractList.subListRangeCheck(int, int, int):void (110 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=13 <= 300.000000)
                            @ 1  java.util.AbstractList.<init>():void (10 bytes)   inline method (bytecode parsing)
                              @ 1  java.util.AbstractCollection.<init>():void (5 bytes)   inline method (bytecode parsing)
                              @ 16  java.util.ArrayList$SubList.<init>(ArrayList, int, int):void (35 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=25 <= 300.000000)
                              @ 20  java.util.HashMap.resize():HashMap$Node[] (356 bytes)   not inlining too large previous low-level graph (low-level-nodes: 972, relevance=0.255953, probability=0.203792, bonus=1.000000, nodes=188)
                            @ 4  java.lang.Class.getComponentType():Class (14 bytes)   inline method (bytecode parsing)
                              @ 123  java.util.HashMap$TreeNode.putTreeVal(HashMap, HashMap$Node[], int, Object, Object):HashMap$TreeNode (314 bytes)   not inlining relevance-based (relevance=0.002970, probability=0.002365, bonus=1.000000, nodes=219 > 0.891128)
                            @ 18  jdk.graal.compiler.nodes.java.DynamicNewArrayNode.newArray(Class, int, JavaKind):Object (8 bytes)   inline method (bytecode parsing)
                            @ 40  jdk.graal.compiler.replacements.arraycopy.ArrayCopyCallNode.disjointUninitializedArraycopy(Object, int, Object, int, int, JavaKind, int):void (17 bytes)   inline method (bytecode parsing)
                              @ 91  java.lang.String.equals(Object):boolean (56 bytes)   not inlining relevance-based (relevance=0.128719, probability=0.102487, bonus=1.000000, nodes=188 > 38.615556)
                            @ 9  java.util.LinkedHashMap$Entry.<init>(int, Object, Object, HashMap$Node):void (10 bytes)   inline method (bytecode parsing)
                            @ 15  jdk.graal.compiler.replacements.ReplacementsUtil.staticAssert(boolean, String):void (12 bytes)   inline method (bytecode parsing)
                                @ 6  java.util.HashMap$Node.<init>(int, Object, Object, HashMap$Node):void (26 bytes)   relevance-based (relevance=0.178279, probability=0.115337, bonus=1.000000, nodes=17 <= 53.483708)
                            @ 86  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.loadKlassFromObject(Object, int, LocationIdentity):KlassPointer (32 bytes)   inline method (bytecode parsing)
                              @ 18  jdk.graal.compiler.replacements.ReplacementsUtil.staticAssert(boolean, String):void (12 bytes)   inline method (bytecode parsing)
                            @ 117  jdk.graal.compiler.hotspot.replacements.ClassGetHubNode.piCastNonNull(KlassPointer, GuardingNode):KlassPointer (9 bytes)   inline method (bytecode parsing)
                                @ 17  java.util.LinkedHashMap.linkNodeAtEnd(LinkedHashMap$Entry):void (76 bytes)   relevance-based (relevance=0.178279, probability=0.115337, bonus=1.000000, nodes=26 <= 53.483708)
                            @ 182  jdk.graal.compiler.replacements.ReplacementsUtil.dynamicAssert(boolean, String):void (12 bytes)   inline method (bytecode parsing)
                                @ 9  java.util.HashMap$Node.<init>(int, Object, Object, HashMap$Node):void (26 bytes)   relevance-based (relevance=0.772717, probability=0.499906, bonus=1.000000, nodes=17 <= 231.814967)
                            @ 249  jdk.graal.compiler.replacements.AllocationSnippets.allocateArrayImpl(Word, int, int, int, AllocationSnippets$FillContent, int, boolean, boolean, boolean, boolean, AllocationSnippets$AllocationProfilingData):Object (178 bytes)   inline method (bytecode parsing)
                              @ 56  java.util.HashMap.newNode(int, Object, Object, HashMap$Node):HashMap$Node (13 bytes)   relevance-based (relevance=0.772717, probability=0.615243, bonus=1.000000, nodes=60 <= 231.814967)
                              @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getTLABInfo():Word (5 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getThread():Word (8 bytes)   inline method (bytecode parsing)
                                  @ 4  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.registerAsWord(Register):Word (7 bytes)   inline method (bytecode parsing)
                              @ 9  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.readTlabTop(Word):Word (5 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.readTlabTop(Word):Word (17 bytes)   inline method (bytecode parsing)
                              @ 17  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.readTlabEnd(Word):Word (5 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.readTlabEnd(Word):Word (17 bytes)   inline method (bytecode parsing)
                              @ 36  jdk.graal.compiler.replacements.ReplacementsUtil.dynamicAssert(boolean, String):void (12 bytes)   inline method (bytecode parsing)
                              @ 44  jdk.graal.compiler.replacements.AllocationSnippets.arrayAllocationSize(int, int, int):UnsignedWord (18 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.objectAlignment():int (7 bytes)   inline method (bytecode parsing)
                                @ 11  jdk.graal.compiler.replacements.AllocationSnippets.arrayAllocationSize(int, int, int, int):long (32 bytes)   inline method (bytecode parsing)
                              @ 59  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.useTLAB():boolean (7 bytes)   inline method (bytecode parsing)
                              @ 72  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.shouldAllocateInTLAB(UnsignedWord, boolean):boolean (33 bytes)   inline method (bytecode parsing)
                              @ 102  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.writeTlabTop(Word, Word):void (6 bytes)   inline method (bytecode parsing)
                                @ 2  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.writeTlabTop(Word, Word):void (15 bytes)   inline method (bytecode parsing)
                              @ 109  jdk.graal.compiler.replacements.AllocationSnippets.emitPrefetchAllocate(Word, boolean):void (61 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getPrefetchStyle():int (7 bytes)   inline method (bytecode parsing)
                                @ 9  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getPrefetchLines(boolean):int (18 bytes)   inline method (bytecode parsing)
                                @ 14  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getPrefetchStepSize():int (7 bytes)   inline method (bytecode parsing)
                                @ 20  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getPrefetchDistance():int (7 bytes)   inline method (bytecode parsing)
                              @ 136  jdk.graal.compiler.replacements.AllocationSnippets.formatArray(Word, UnsignedWord, int, Word, AllocationSnippets$FillContent, boolean, int, boolean, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):Object (53 bytes)   inline method (bytecode parsing)
                                @ 5  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.initializeObjectHeader(Word, Word, boolean):void (29 bytes)   inline method (bytecode parsing)
                                  @ 25  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.initializeObjectHeader(Word, Word, KlassPointer):void (20 bytes)   inline method (bytecode parsing)
                                @ 11  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.arrayLengthOffset():int (7 bytes)   inline method (bytecode parsing)
                              @ 203  java.lang.Long.equals(Object):boolean (30 bytes)   not inlining relevance-based (relevance=0.018209, probability=0.013740, bonus=1.000000, nodes=169 > 5.462778)
                                @ 15  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                                @ 38  jdk.graal.compiler.replacements.AllocationSnippets.fillContents(Word, AllocationSnippets$FillContent, int, UnsignedWord, boolean, boolean, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):void (58 bytes)   inline method (bytecode parsing)
                                  @ 22  jdk.graal.compiler.replacements.AllocationSnippets.zeroMemory(Word, int, UnsignedWord, boolean, boolean, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):void (19 bytes)   inline method (bytecode parsing)
                                    @ 15  jdk.graal.compiler.replacements.AllocationSnippets.fillMemory(long, Word, int, UnsignedWord, boolean, boolean, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):void (194 bytes)   inline method (bytecode parsing)
                            @ 9  java.util.LinkedHashMap$Entry.<init>(int, Object, Object, HashMap$Node):void (10 bytes)   inline method (bytecode parsing)
                                      @ 17  jdk.graal.compiler.replacements.ReplacementsUtil.dynamicAssert(boolean, String):void (12 bytes)   inline method (bytecode parsing)
                                @ 6  java.util.HashMap$Node.<init>(int, Object, Object, HashMap$Node):void (26 bytes)   not inlining relevance-based (relevance=0.051762, probability=0.035584, bonus=1.000000, nodes=17 > 15.528627)
                                      @ 56  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                                      @ 89  jdk.graal.compiler.replacements.ReplacementsUtil.dynamicAssert(boolean, String):void (12 bytes)   inline method (bytecode parsing)
                                @ 17  java.util.LinkedHashMap.linkNodeAtEnd(LinkedHashMap$Entry):void (76 bytes)   not inlining relevance-based (relevance=0.051762, probability=0.035584, bonus=1.000000, nodes=26 > 15.528627)
                                      @ 153  jdk.graal.compiler.replacements.ReplacementsUtil.staticAssert(boolean, String):void (12 bytes)   inline method (bytecode parsing)
                                      @ 167  jdk.graal.compiler.replacements.AllocationSnippets.fillMemoryAlignedUnrollable(long, Word, UnsignedWord, UnsignedWord, boolean, AllocationSnippets$AllocationSnippetCounters):void (68 bytes)   inline method (bytecode parsing)
                                @ 9  java.util.HashMap$Node.<init>(int, Object, Object, HashMap$Node):void (26 bytes)   relevance-based (relevance=0.327171, probability=0.224913, bonus=1.000000, nodes=17 <= 98.151407)
                                        @ 5  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                          @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                              @ 152  java.util.HashMap.newNode(int, Object, Object, HashMap$Node):HashMap$Node (13 bytes)   relevance-based (relevance=0.327171, probability=0.260496, bonus=1.000000, nodes=34 <= 98.151407)
                                        @ 44  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                                      @ 190  jdk.graal.compiler.replacements.AllocationSnippets.fillMemoryAligned(long, Word, UnsignedWord, UnsignedWord, boolean, UnsignedWord, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):void (155 bytes)   inline method (bytecode parsing)
                                        @ 17  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getMinimalBulkZeroingSize():int (7 bytes)   inline method (bytecode parsing)
                                        @ 36  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                          @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                                        @ 53  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                                        @ 105  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                          @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                                        @ 134  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                                @ 44  jdk.graal.compiler.replacements.AllocationSnippets.emitMemoryBarrierIf(boolean):void (14 bytes)   inline method (bytecode parsing)
                                  @ 7  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                              @ 152  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                              @ 169  java.util.HashMap.treeifyBin(HashMap$Node[], int):void (110 bytes)   not inlining relevance-based (relevance=0.001320, probability=0.001051, bonus=1.000000, nodes=77 > 0.396000)
                                @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                              @ 158  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.callNewArrayStub(Word, int):Object (35 bytes)   inline method (bytecode parsing)
                                @ 22  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.nonNullOrDeopt(Object):Object (27 bytes)   inline method (bytecode parsing)
                              @ 168  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.profileAllocation(AllocationSnippets$AllocationProfilingData, UnsignedWord):void (51 bytes)   inline method (bytecode parsing)
                              @ 174  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.verifyOop(Object):Object (5 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.verifyOop(Object):Object (19 bytes)   inline method (bytecode parsing)
                              @ 253  java.util.HashMap.afterNodeAccess(HashMap$Node):void (1 bytes)   not inlining relevance-based (relevance=0.153335, probability=0.122087, bonus=1.000000, nodes=75 > 46.000549)
                              @ 288  java.util.HashMap.resize():HashMap$Node[] (356 bytes)   not inlining too large previous low-level graph (low-level-nodes: 972, relevance=0.039696, probability=0.031606, bonus=1.000000, nodes=188)
                            @ 1  java.util.HashMap.size():int (5 bytes)   inline accessor method (bytecode parsing)
                                @ 15  java.util.LinkedHashMap.removeEldestEntry(Map$Entry):boolean (2 bytes)   relevance-based (relevance=0.100528, probability=0.046054, bonus=1.000000, nodes=14 <= 30.158438)
                              @ 295  java.util.HashMap.afterNodeInsertion(boolean):void (1 bytes)   relevance-based (relevance=1.102618, probability=0.877913, bonus=1.000000, nodes=40 <= 300.000000)
                            @ 81  java.lang.Integer.rotateLeft(int, int):int (9 bytes)   inline method (bytecode parsing)
                            @ 142  java.lang.Integer.rotateLeft(int, int):int (9 bytes)   inline method (bytecode parsing)
                            @ 187  java.lang.Integer.rotateLeft(int, int):int (9 bytes)   inline method (bytecode parsing)
                            @ 217  java.lang.Integer.rotateLeft(int, int):int (9 bytes)   inline method (bytecode parsing)
                            @ 257  java.lang.Integer.rotateLeft(int, int):int (9 bytes)   inline method (bytecode parsing)
                            @ 287  java.lang.Integer.rotateLeft(int, int):int (9 bytes)   inline method (bytecode parsing)
                            @ 336  java.lang.Integer.rotateLeft(int, int):int (9 bytes)   inline method (bytecode parsing)
                            @ 366  java.lang.Integer.rotateLeft(int, int):int (9 bytes)   inline method (bytecode parsing)
                            @ 406  java.lang.Integer.rotateLeft(int, int):int (9 bytes)   inline method (bytecode parsing)
                            @ 4  java.util.Objects.checkFromIndexSize(int, int, int):int (8 bytes)   inline method (bytecode parsing)
                              @ 4  jdk.internal.util.Preconditions.checkFromIndexSize(int, int, int, BiFunction):int (25 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=15 <= 300.000000)
                            @ 4  java.util.Objects.checkFromIndexSize(int, int, int):int (8 bytes)   inline method (bytecode parsing)
                            @ 11  jdk.internal.misc.InternalLock.lock():void (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.util.concurrent.locks.ReentrantLock.lock():void (8 bytes)   inline method (bytecode parsing)
                            @ 27  jdk.internal.misc.InternalLock.unlock():void (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.util.concurrent.locks.ReentrantLock.unlock():void (10 bytes)   inline method (bytecode parsing)
                                @ 5  java.util.concurrent.locks.AbstractQueuedSynchronizer.release(int):boolean (19 bytes)   inline method (bytecode parsing)
                            @ 9  java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(int):void (20 bytes)   inline method (bytecode parsing)
                            @ 7  java.util.concurrent.locks.AbstractQueuedSynchronizer.compareAndSetState(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 15  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                            @ 21  java.util.concurrent.locks.AbstractOwnableSynchronizer.getExclusiveOwnerThread():Thread (5 bytes)   inline accessor method (bytecode parsing)
                            @ 29  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 51  java.util.concurrent.locks.AbstractQueuedSynchronizer.setState(int):void (6 bytes)   inline method (bytecode parsing)
                                  @ 1  java.util.concurrent.locks.ReentrantLock$NonfairSync.initialTryLock():boolean (58 bytes)   relevance-based (relevance=0.158565, probability=0.121416, bonus=1.000000, nodes=40 <= 47.569394)
                                @ 4  java.util.concurrent.locks.ReentrantLock$Sync.lock():void (13 bytes)   not inlining relevance-based (relevance=0.157739, probability=0.121416, bonus=1.000000, nodes=57 > 47.321680)
                            @ 4  java.util.Objects.checkFromIndexSize(int, int, int):int (8 bytes)   inline method (bytecode parsing)
                                @ 18  java.io.BufferedInputStream.implRead(byte[], int, int):int (112 bytes)   not inlining relevance-based (relevance=0.157739, probability=0.121416, bonus=1.000000, nodes=57 > 47.321680)
                            @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 8  java.util.concurrent.locks.AbstractOwnableSynchronizer.getExclusiveOwnerThread():Thread (5 bytes)   inline accessor method (bytecode parsing)
                              @ 4  jdk.internal.util.Preconditions.checkFromIndexSize(int, int, int, BiFunction):int (25 bytes)   relevance-based (relevance=1.000010, probability=1.000000, bonus=1.000000, nodes=15 <= 300.000000)
                            @ 41  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                            @ 46  java.util.concurrent.locks.AbstractQueuedSynchronizer.setState(int):void (6 bytes)   inline method (bytecode parsing)
                                @ 2  java.util.concurrent.locks.ReentrantLock$Sync.tryRelease(int):boolean (51 bytes)   relevance-based (relevance=0.157739, probability=0.121416, bonus=1.000000, nodes=37 <= 47.321680)
                            @ 22  java.util.concurrent.locks.AbstractQueuedSynchronizer$Node.getAndUnsetStatus(int):int (14 bytes)   inline method (bytecode parsing)
                              @ 10  jdk.internal.misc.Unsafe.getAndBitwiseAndInt(Object, long, int):int (27 bytes)   inline method (bytecode parsing)
                                @ 12  java.util.concurrent.locks.AbstractQueuedSynchronizer.signalNext(AbstractQueuedSynchronizer$Node):void (34 bytes)   not inlining relevance-based (relevance=0.136967, probability=0.106639, bonus=1.000000, nodes=56 > 41.090172)
                                @ 4  jdk.internal.util.Preconditions.checkFromIndexSize(int, int, int, BiFunction):int (25 bytes)   relevance-based (relevance=0.982227, probability=0.860801, bonus=1.000000, nodes=15 <= 294.668078)
              s               @ 30  java.io.ByteArrayInputStream.read(byte[], int, int):int (73 bytes)   relevance-based (relevance=0.982217, probability=0.982217, bonus=1.000000, nodes=138 <= 294.665131)
                            @ 15  jdk.internal.util.ByteArray.getUnsignedShort(byte[], int):int (12 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.VarHandleGuards.guard_LI_I(VarHandle, Object, int, VarHandle$AccessDescriptor):int (78 bytes)   inline method (bytecode parsing)
                                @ 2  java.lang.invoke.VarHandle.checkAccessModeThenIsDirect(VarHandle$AccessDescriptor):boolean (29 bytes)   inline method (bytecode parsing)
                                @ 42  java.lang.invoke.VarForm.getMemberName(int):MemberName (31 bytes)   inline method (bytecode parsing)
                                @ 45  java.lang.invoke.VarHandleByteArrayAsShorts$ArrayHandle.get(VarHandle, Object, int):short (36 bytes)   inline method (bytecode parsing)
                                  @ 19  java.lang.invoke.VarHandleByteArrayAsShorts$ArrayHandle.index(byte[], int):int (12 bytes)   inline method (bytecode parsing)
                                  @ 32  jdk.internal.misc.Unsafe.getShortUnaligned(Object, long, boolean):short (12 bytes)   inline method (bytecode parsing)
                                    @ 8  jdk.internal.misc.Unsafe.convEndian(boolean, short):short (16 bytes)   inline method (bytecode parsing)
                              @ 8  java.lang.Short.toUnsignedInt(short):int (5 bytes)   inline method (bytecode parsing)
                            @ 4  java.util.Objects.checkFromIndexSize(int, int, int):int (8 bytes)   inline method (bytecode parsing)
                                @ 4  jdk.internal.util.Preconditions.checkFromIndexSize(int, int, int, BiFunction):int (25 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=9)
                            @ 4  java.util.Objects.checkFromIndexSize(int, int, int):int (8 bytes)   inline method (bytecode parsing)
                            @ 11  jdk.internal.misc.InternalLock.lock():void (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.util.concurrent.locks.ReentrantLock.lock():void (8 bytes)   inline method (bytecode parsing)
                            @ 27  jdk.internal.misc.InternalLock.unlock():void (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.util.concurrent.locks.ReentrantLock.unlock():void (10 bytes)   inline method (bytecode parsing)
                                @ 5  java.util.concurrent.locks.AbstractQueuedSynchronizer.release(int):boolean (19 bytes)   inline method (bytecode parsing)
                            @ 9  java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(int):void (20 bytes)   inline method (bytecode parsing)
                            @ 7  java.util.concurrent.locks.AbstractQueuedSynchronizer.compareAndSetState(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 15  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                            @ 21  java.util.concurrent.locks.AbstractOwnableSynchronizer.getExclusiveOwnerThread():Thread (5 bytes)   inline accessor method (bytecode parsing)
                            @ 29  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 51  java.util.concurrent.locks.AbstractQueuedSynchronizer.setState(int):void (6 bytes)   inline method (bytecode parsing)
                                    @ 1  java.util.concurrent.locks.ReentrantLock$NonfairSync.initialTryLock():boolean (58 bytes)   relevance-based (relevance=0.158575, probability=0.121416, bonus=1.000000, nodes=40 <= 47.572616)
                                  @ 4  java.util.concurrent.locks.ReentrantLock$Sync.lock():void (13 bytes)   not inlining relevance-based (relevance=0.157753, probability=0.121416, bonus=1.000000, nodes=57 > 47.325774)
                                  @ 18  java.io.BufferedInputStream.implRead(byte[], int, int):int (112 bytes)   not inlining relevance-based (relevance=0.157753, probability=0.121416, bonus=1.000000, nodes=57 > 47.325774)
                            @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 8  java.util.concurrent.locks.AbstractOwnableSynchronizer.getExclusiveOwnerThread():Thread (5 bytes)   inline accessor method (bytecode parsing)
                            @ 41  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                            @ 46  java.util.concurrent.locks.AbstractQueuedSynchronizer.setState(int):void (6 bytes)   inline method (bytecode parsing)
                                  @ 2  java.util.concurrent.locks.ReentrantLock$Sync.tryRelease(int):boolean (51 bytes)   relevance-based (relevance=0.157753, probability=0.121416, bonus=1.000000, nodes=37 <= 47.325774)
                            @ 22  java.util.concurrent.locks.AbstractQueuedSynchronizer$Node.getAndUnsetStatus(int):int (14 bytes)   inline method (bytecode parsing)
                              @ 10  jdk.internal.misc.Unsafe.getAndBitwiseAndInt(Object, long, int):int (27 bytes)   inline method (bytecode parsing)
                                  @ 12  java.util.concurrent.locks.AbstractQueuedSynchronizer.signalNext(AbstractQueuedSynchronizer$Node):void (34 bytes)   not inlining relevance-based (relevance=0.136955, probability=0.106629, bonus=1.000000, nodes=56 > 41.086618)
                                  @ 4  jdk.internal.util.Preconditions.checkFromIndexSize(int, int, int, BiFunction):int (25 bytes)   relevance-based (relevance=0.982227, probability=0.860801, bonus=1.000000, nodes=15 <= 294.668078)
              s                 @ 30  java.io.ByteArrayInputStream.read(byte[], int, int):int (73 bytes)   relevance-based (relevance=0.982217, probability=0.982217, bonus=1.000000, nodes=138 <= 294.665131)
                              @ 7  java.io.DataInputStream.readFully(byte[], int, int):void (59 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=164 <= 300.000000)
                                @ 2  java.nio.Buffer.position(int):Buffer (52 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=16 <= 300.000000)
                              @ 2  java.nio.ByteBuffer.position(int):ByteBuffer (8 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=17 <= 300.000000)
                                  @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                                @ 2  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=8)
                                  @ 1  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000010, probability=1.000000, bonus=1.000000, nodes=5)
                                @ 21  java.lang.String.getBytes(byte[], int, byte):void (44 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=24 <= 300.000000)
                              @ 3  java.lang.StringConcatHelper.prepend(long, byte[], String):long (37 bytes)   relevance-based (relevance=1.003144, probability=1.000000, bonus=1.000000, nodes=40 <= 300.000000)
                              @ 16  java.lang.StringConcatHelper.prepend(long, byte[], String):long (37 bytes)   not inlining relevance-based (relevance=0.003144, probability=0.003134, bonus=1.000000, nodes=19 > 0.943285)
                            @ 1  java.lang.reflect.Method.getName():String (5 bytes)   inline accessor method (bytecode parsing)
                            @ 7  java.lang.reflect.Method.getParameterCount():int (6 bytes)   inline method (bytecode parsing)
                                @ 2  java.util.HashMap.getNode(Object):HashMap$Node (150 bytes)   not inlining too large previous low-level graph (low-level-nodes: 440, relevance=1.786725, probability=0.556156, bonus=1.000000, nodes=108)
                                @ 21  java.util.LinkedHashMap.afterNodeAccess(HashMap$Node):void (266 bytes)   not inlining relevance-based (relevance=0.234061, probability=0.072856, bonus=1.000000, nodes=72 > 70.218341)
                              @ 105  java.util.LinkedHashMap.get(Object):Object (29 bytes)   relevance-based (relevance=1.162737, probability=0.556156, bonus=1.000000, nodes=28 <= 300.000000)
                              @ 174  sun.reflect.annotation.AnnotationInvocationHandler.cloneArray(Object):Object (143 bytes)   not inlining relevance-based (relevance=0.141876, probability=0.044162, bonus=1.000000, nodes=119 > 42.562941)
                            @ 5  jdk.graal.compiler.hotspot.replacements.HotSpotIsArraySnippets.classIsArray(Class):boolean (33 bytes)   inline method (bytecode parsing)
                              @ 24  jdk.graal.compiler.hotspot.replacements.ClassGetHubNode.piCastNonNull(KlassPointer, GuardingNode):KlassPointer (9 bytes)   inline method (bytecode parsing)
                              @ 29  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.klassIsArray(KlassPointer):boolean (23 bytes)   inline method (bytecode parsing)
                            @ 6  jdk.internal.misc.Blocker.currentCarrierThread():Thread (9 bytes)   inline method (bytecode parsing)
                              @ 3  java.lang.System$2.currentCarrierThread():Thread (4 bytes)   inline method (bytecode parsing)
                              @ 0  jdk.internal.misc.VM.isBooted():boolean (13 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=10 <= 300.000000)
                              @ 1  java.nio.Buffer.flip():Buffer (20 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=13 <= 300.000000)
                            @ 12  java.nio.CharBuffer.<init>(int, int, int, int, char[], int, MemorySegment):void (24 bytes)   inline method (bytecode parsing)
                            @ 2  java.nio.CharBuffer.limit(int):CharBuffer (8 bytes)   inline method (bytecode parsing)
                                    @ 2  java.nio.Buffer.limit(int):Buffer (65 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=27 <= 300.000000)
                                  @ 39  java.nio.CharBuffer.limit(int):Buffer (6 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=29 <= 300.000000)
                            @ 2  java.nio.CharBuffer.position(int):CharBuffer (8 bytes)   inline method (bytecode parsing)
                                    @ 2  java.nio.Buffer.position(int):Buffer (52 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=16 <= 300.000000)
                                  @ 45  java.nio.CharBuffer.position(int):Buffer (6 bytes)   relevance-based (relevance=1.073464, probability=1.000000, bonus=1.000000, nodes=18 <= 300.000000)
                                @ 8  java.nio.Buffer.<init>(int, int, int, int, MemorySegment):void (105 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=56 <= 300.000000)
                              @ 8  java.nio.HeapCharBuffer.<init>(char[], int, int, MemorySegment):void (23 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=68 <= 300.000000)
                            @ 18  jdk.graal.compiler.replacements.AllocationSnippets.allocateInstanceImpl(Word, UnsignedWord, boolean, AllocationSnippets$FillContent, boolean, boolean, AllocationSnippets$AllocationProfilingData):Object (143 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getTLABInfo():Word (5 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getThread():Word (8 bytes)   inline method (bytecode parsing)
                                  @ 4  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.registerAsWord(Register):Word (7 bytes)   inline method (bytecode parsing)
                              @ 9  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.readTlabTop(Word):Word (5 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.readTlabTop(Word):Word (17 bytes)   inline method (bytecode parsing)
                              @ 17  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.readTlabEnd(Word):Word (5 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.readTlabEnd(Word):Word (17 bytes)   inline method (bytecode parsing)
                              @ 35  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.useTLAB():boolean (7 bytes)   inline method (bytecode parsing)
                              @ 47  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.shouldAllocateInTLAB(UnsignedWord, boolean):boolean (33 bytes)   inline method (bytecode parsing)
                              @ 77  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.writeTlabTop(Word, Word):void (6 bytes)   inline method (bytecode parsing)
                                @ 2  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.writeTlabTop(Word, Word):void (15 bytes)   inline method (bytecode parsing)
                              @ 84  jdk.graal.compiler.replacements.AllocationSnippets.emitPrefetchAllocate(Word, boolean):void (61 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getPrefetchStyle():int (7 bytes)   inline method (bytecode parsing)
                                @ 9  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getPrefetchLines(boolean):int (18 bytes)   inline method (bytecode parsing)
                                @ 14  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getPrefetchStepSize():int (7 bytes)   inline method (bytecode parsing)
                                @ 20  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getPrefetchDistance():int (7 bytes)   inline method (bytecode parsing)
                              @ 103  jdk.graal.compiler.replacements.AllocationSnippets.formatObject(Word, UnsignedWord, Word, AllocationSnippets$FillContent, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):Object (41 bytes)   inline method (bytecode parsing)
                                @ 4  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.initializeObjectHeader(Word, Word, boolean):void (29 bytes)   inline method (bytecode parsing)
                                  @ 25  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.initializeObjectHeader(Word, Word, KlassPointer):void (20 bytes)   inline method (bytecode parsing)
                                @ 8  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.instanceHeaderSize():int (7 bytes)   inline method (bytecode parsing)
                                @ 27  jdk.graal.compiler.replacements.AllocationSnippets.fillContents(Word, AllocationSnippets$FillContent, int, UnsignedWord, boolean, boolean, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):void (58 bytes)   inline method (bytecode parsing)
                                  @ 22  jdk.graal.compiler.replacements.AllocationSnippets.zeroMemory(Word, int, UnsignedWord, boolean, boolean, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):void (19 bytes)   inline method (bytecode parsing)
                                    @ 15  jdk.graal.compiler.replacements.AllocationSnippets.fillMemory(long, Word, int, UnsignedWord, boolean, boolean, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):void (194 bytes)   inline method (bytecode parsing)
                                      @ 17  jdk.graal.compiler.replacements.ReplacementsUtil.dynamicAssert(boolean, String):void (12 bytes)   inline method (bytecode parsing)
                                      @ 56  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                                      @ 89  jdk.graal.compiler.replacements.ReplacementsUtil.dynamicAssert(boolean, String):void (12 bytes)   inline method (bytecode parsing)
                                      @ 153  jdk.graal.compiler.replacements.ReplacementsUtil.staticAssert(boolean, String):void (12 bytes)   inline method (bytecode parsing)
                                      @ 167  jdk.graal.compiler.replacements.AllocationSnippets.fillMemoryAlignedUnrollable(long, Word, UnsignedWord, UnsignedWord, boolean, AllocationSnippets$AllocationSnippetCounters):void (68 bytes)   inline method (bytecode parsing)
                                        @ 5  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                          @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                                        @ 44  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                                      @ 190  jdk.graal.compiler.replacements.AllocationSnippets.fillMemoryAligned(long, Word, UnsignedWord, UnsignedWord, boolean, UnsignedWord, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):void (155 bytes)   inline method (bytecode parsing)
                                        @ 91  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                          @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                                        @ 105  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                          @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                                        @ 134  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                                @ 33  jdk.graal.compiler.replacements.AllocationSnippets.emitMemoryBarrierIf(boolean):void (14 bytes)   inline method (bytecode parsing)
                              @ 119  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                              @ 124  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.callNewInstanceStub(Word):Object (33 bytes)   inline method (bytecode parsing)
                                @ 21  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.nonNullOrDeopt(Object):Object (27 bytes)   inline method (bytecode parsing)
                              @ 133  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.profileAllocation(AllocationSnippets$AllocationProfilingData, UnsignedWord):void (51 bytes)   inline method (bytecode parsing)
                              @ 139  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.verifyOop(Object):Object (5 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.verifyOop(Object):Object (19 bytes)   inline method (bytecode parsing)
                            @ 12  java.nio.CharBuffer.<init>(int, int, int, int, char[], int, MemorySegment):void (24 bytes)   inline method (bytecode parsing)
                              @ 2  java.util.HashMap.getNode(Object):HashMap$Node (150 bytes)   not inlining too large previous low-level graph (low-level-nodes: 440, relevance=1.790451, probability=1.000000, bonus=1.000000, nodes=108)
                            @ 2  java.nio.CharBuffer.limit(int):CharBuffer (8 bytes)   inline method (bytecode parsing)
                              @ 21  java.util.LinkedHashMap.afterNodeAccess(HashMap$Node):void (266 bytes)   not inlining relevance-based (relevance=0.232986, probability=0.130127, bonus=1.000000, nodes=72 > 69.895833)
                                  @ 2  java.nio.Buffer.limit(int):Buffer (65 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=27 <= 300.000000)
                                @ 39  java.nio.CharBuffer.limit(int):Buffer (6 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=29 <= 300.000000)
                            @ 2  java.nio.CharBuffer.position(int):CharBuffer (8 bytes)   inline method (bytecode parsing)
                                  @ 2  java.nio.Buffer.position(int):Buffer (52 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=16 <= 300.000000)
                                @ 45  java.nio.CharBuffer.position(int):Buffer (6 bytes)   relevance-based (relevance=1.073464, probability=1.000000, bonus=1.000000, nodes=18 <= 300.000000)
                              @ 8  java.nio.Buffer.<init>(int, int, int, int, MemorySegment):void (105 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=56 <= 300.000000)
                            @ 23  jdk.internal.misc.InternalLock.lock():void (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.util.concurrent.locks.ReentrantLock.lock():void (8 bytes)   inline method (bytecode parsing)
                            @ 35  jdk.internal.misc.InternalLock.unlock():void (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.util.concurrent.locks.ReentrantLock.unlock():void (10 bytes)   inline method (bytecode parsing)
                                @ 5  java.util.concurrent.locks.AbstractQueuedSynchronizer.release(int):boolean (19 bytes)   inline method (bytecode parsing)
                            @ 9  java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(int):void (20 bytes)   inline method (bytecode parsing)
                            @ 7  java.util.concurrent.locks.AbstractQueuedSynchronizer.compareAndSetState(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 15  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                            @ 21  java.util.concurrent.locks.AbstractOwnableSynchronizer.getExclusiveOwnerThread():Thread (5 bytes)   inline accessor method (bytecode parsing)
                            @ 29  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 51  java.util.concurrent.locks.AbstractQueuedSynchronizer.setState(int):void (6 bytes)   inline method (bytecode parsing)
                                @ 1  java.util.concurrent.locks.ReentrantLock$NonfairSync.initialTryLock():boolean (58 bytes)   relevance-based (relevance=1.005155, probability=1.000000, bonus=1.000000, nodes=40 <= 300.000000)
                            @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 10  java.util.concurrent.locks.AbstractQueuedSynchronizer.compareAndSetState(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 20  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                                @ 2  java.util.concurrent.locks.ReentrantLock$NonfairSync.tryAcquire(int):boolean (27 bytes)   not inlining relevance-based (relevance=0.005049, probability=0.004464, bonus=1.000000, nodes=36 > 1.514719)
                            @ 108  java.util.concurrent.locks.AbstractQueuedSynchronizer.tryAcquireShared(int):int (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.lang.UnsupportedOperationException.<init>():void (5 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.RuntimeException.<init>():void (5 bytes)   inline method (bytecode parsing)
                                  @ 1  java.lang.Exception.<init>():void (5 bytes)   inline method (bytecode parsing)
                            @ 245  java.util.concurrent.locks.AbstractQueuedSynchronizer$ExclusiveNode.<init>():void (5 bytes)   inline method (bytecode parsing)
                              @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer$Node.<init>():void (5 bytes)   inline method (bytecode parsing)
                            @ 290  java.util.concurrent.locks.AbstractQueuedSynchronizer$Node.setPrevRelaxed(AbstractQueuedSynchronizer$Node):void (12 bytes)   inline method (bytecode parsing)
                            @ 393  java.lang.Thread.interrupted():boolean (7 bytes)   inline method (bytecode parsing)
                                @ 15  java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer$Node, int, boolean, boolean, boolean, long):int (424 bytes)   not inlining relevance-based (relevance=0.002525, probability=0.002232, bonus=1.000000, nodes=226 > 0.757359)
                              @ 4  java.util.concurrent.locks.ReentrantLock$Sync.lock():void (13 bytes)   relevance-based (relevance=1.138711, probability=1.000000, bonus=1.000000, nodes=57 <= 300.000000)
                            @ 2  java.nio.CharBuffer.limit(int):CharBuffer (8 bytes)   inline method (bytecode parsing)
                                @ 1  sun.nio.cs.StreamEncoder.ensureOpen():void (18 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=10 <= 300.000000)
                                  @ 2  java.nio.Buffer.limit(int):Buffer (65 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=27 <= 300.000000)
                                @ 39  java.nio.CharBuffer.limit(int):Buffer (6 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=29 <= 300.000000)
                            @ 12  java.nio.CharBuffer.<init>(int, int, int, int, char[], int, MemorySegment):void (24 bytes)   inline method (bytecode parsing)
                            @ 2  java.nio.CharBuffer.position(int):CharBuffer (8 bytes)   inline method (bytecode parsing)
                                  @ 2  java.nio.Buffer.position(int):Buffer (52 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=16 <= 300.000000)
                            @ 2  java.nio.CharBuffer.limit(int):CharBuffer (8 bytes)   inline method (bytecode parsing)
                                @ 45  java.nio.CharBuffer.position(int):Buffer (6 bytes)   relevance-based (relevance=1.073464, probability=1.000000, bonus=1.000000, nodes=18 <= 300.000000)
                              @ 8  java.nio.Buffer.<init>(int, int, int, int, MemorySegment):void (105 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=61 <= 300.000000)
                                          @ 2  java.nio.Buffer.limit(int):Buffer (65 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=27 <= 300.000000)
                                        @ 39  java.nio.CharBuffer.limit(int):Buffer (6 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=29 <= 300.000000)
                            @ 2  java.nio.CharBuffer.position(int):CharBuffer (8 bytes)   inline method (bytecode parsing)
                                          @ 2  java.nio.Buffer.position(int):Buffer (52 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=16 <= 300.000000)
                                        @ 45  java.nio.CharBuffer.position(int):Buffer (6 bytes)   relevance-based (relevance=1.073464, probability=1.000000, bonus=1.000000, nodes=18 <= 300.000000)
                                      @ 8  java.nio.Buffer.<init>(int, int, int, int, MemorySegment):void (105 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=56 <= 300.000000)
                                    @ 8  java.nio.HeapCharBuffer.<init>(char[], int, int, MemorySegment):void (23 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=68 <= 300.000000)
                                  @ 3  java.nio.CharBuffer.wrap(char[], int, int):CharBuffer (21 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=69 <= 300.000000)
                                    @ 15  java.nio.Buffer.remaining():int (20 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                            @ 4  java.nio.Buffer.capacity():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 21  java.nio.charset.CharsetEncoder.maxBytesPerChar():float (5 bytes)   inline accessor method (bytecode parsing)
                                      @ 34  java.lang.Math.min(int, int):int (11 bytes)   trivial (relevance=1.000412, probability=1.000000, bonus=1.000000, nodes=7)
                            @ 4  java.nio.Buffer.position():int (5 bytes)   inline accessor method (bytecode parsing)
                                      @ 46  sun.nio.cs.StreamEncoder.implFlushBuffer():void (15 bytes)   not inlining relevance-based (relevance=0.000412, probability=0.000412, bonus=1.000000, nodes=21 > 0.123728)
                                      @ 52  java.nio.ByteBuffer.allocate(int):ByteBuffer (20 bytes)   not inlining relevance-based (relevance=0.000412, probability=0.000412, bonus=1.000000, nodes=21 > 0.123728)
                                    @ 18  sun.nio.cs.StreamEncoder.growByteBufferIfNeeded(int):void (59 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=38 <= 300.000000)
                            @ 7  java.nio.Buffer.checkIndex(int):int (12 bytes)   inline method (bytecode parsing)
                                    @ 22  java.nio.Buffer.hasRemaining():boolean (17 bytes)   trivial (relevance=1.000412, probability=1.000000, bonus=1.000000, nodes=9)
                            @ 10  java.nio.HeapByteBuffer.ix(int):int (7 bytes)   inline method (bytecode parsing)
                                        @ 1  java.nio.CharBuffer.hasArray():boolean (20 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=12 <= 300.000000)
                                        @ 8  java.nio.ByteBuffer.hasArray():boolean (20 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=12 <= 300.000000)
                            @ 10  java.nio.Buffer.position():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 21  java.nio.Buffer.limit():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 38  java.nio.Buffer.position():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 49  java.nio.Buffer.limit():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 78  java.lang.System$2.encodeASCII(char[], int, byte[], int, int):int (11 bytes)   inline method (bytecode parsing)
                            @ 11  jdk.internal.misc.InternalLock.lock():void (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.util.concurrent.locks.ReentrantLock.lock():void (8 bytes)   inline method (bytecode parsing)
                            @ 22  jdk.internal.misc.InternalLock.unlock():void (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.util.concurrent.locks.ReentrantLock.unlock():void (10 bytes)   inline method (bytecode parsing)
                                @ 5  java.util.concurrent.locks.AbstractQueuedSynchronizer.release(int):boolean (19 bytes)   inline method (bytecode parsing)
                                          @ 1  java.nio.CharBuffer.array():char[] (35 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                                          @ 6  java.nio.CharBuffer.arrayOffset():int (35 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=12 <= 300.000000)
                            @ 9  java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(int):void (20 bytes)   inline method (bytecode parsing)
                                          @ 17  java.nio.CharBuffer.arrayOffset():int (35 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=12 <= 300.000000)
                            @ 7  java.util.concurrent.locks.AbstractQueuedSynchronizer.compareAndSetState(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                                          @ 28  java.nio.ByteBuffer.array():byte[] (35 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                            @ 15  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                                          @ 34  java.nio.ByteBuffer.arrayOffset():int (35 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=12 <= 300.000000)
                            @ 21  java.util.concurrent.locks.AbstractOwnableSynchronizer.getExclusiveOwnerThread():Thread (5 bytes)   inline accessor method (bytecode parsing)
                            @ 29  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 51  java.util.concurrent.locks.AbstractQueuedSynchronizer.setState(int):void (6 bytes)   inline method (bytecode parsing)
                                          @ 45  java.nio.ByteBuffer.arrayOffset():int (35 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=12 <= 300.000000)
                                @ 1  java.util.concurrent.locks.ReentrantLock$NonfairSync.initialTryLock():boolean (58 bytes)   relevance-based (relevance=1.005151, probability=1.000000, bonus=1.000000, nodes=40 <= 300.000000)
                                          @ 75  java.lang.Math.min(int, int):int (11 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=7)
                            @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                                            @ 3  java.nio.CharBuffer.arrayOffset():int (35 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=12 <= 300.000000)
                            @ 10  java.util.concurrent.locks.AbstractQueuedSynchronizer.compareAndSetState(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 2  java.nio.CharBuffer.position(int):CharBuffer (8 bytes)   inline method (bytecode parsing)
                            @ 20  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                                              @ 2  java.nio.Buffer.position(int):Buffer (52 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=16 <= 300.000000)
                                @ 2  java.util.concurrent.locks.ReentrantLock$NonfairSync.tryAcquire(int):boolean (27 bytes)   not inlining relevance-based (relevance=0.005049, probability=0.004464, bonus=1.000000, nodes=36 > 1.514719)
                                            @ 7  java.nio.CharBuffer.position(int):Buffer (6 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=18 <= 300.000000)
                                            @ 14  java.nio.ByteBuffer.arrayOffset():int (35 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=12 <= 300.000000)
                            @ 108  java.util.concurrent.locks.AbstractQueuedSynchronizer.tryAcquireShared(int):int (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.lang.UnsupportedOperationException.<init>():void (5 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.RuntimeException.<init>():void (5 bytes)   inline method (bytecode parsing)
                                  @ 1  java.lang.Exception.<init>():void (5 bytes)   inline method (bytecode parsing)
                                                @ 2  java.nio.Buffer.position(int):Buffer (52 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=16 <= 300.000000)
                            @ 245  java.util.concurrent.locks.AbstractQueuedSynchronizer$ExclusiveNode.<init>():void (5 bytes)   inline method (bytecode parsing)
                                              @ 2  java.nio.ByteBuffer.position(int):ByteBuffer (8 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=17 <= 300.000000)
                              @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer$Node.<init>():void (5 bytes)   inline method (bytecode parsing)
                            @ 290  java.util.concurrent.locks.AbstractQueuedSynchronizer$Node.setPrevRelaxed(AbstractQueuedSynchronizer$Node):void (12 bytes)   inline method (bytecode parsing)
                                            @ 18  java.nio.ByteBuffer.position(int):Buffer (6 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=23 <= 300.000000)
                                          @ 130  sun.nio.cs.UTF_8.updatePositions(Buffer, int, Buffer, int):void (23 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=60 <= 300.000000)
                            @ 393  java.lang.Thread.interrupted():boolean (7 bytes)   inline method (bytecode parsing)
                                        @ 17  sun.nio.cs.UTF_8$Encoder.encodeArrayLoop(CharBuffer, ByteBuffer):CoderResult (137 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=137 <= 300.000000)
                                      @ 57  sun.nio.cs.UTF_8$Encoder.encodeLoop(CharBuffer, ByteBuffer):CoderResult (28 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=152 <= 300.000000)
                                @ 15  java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer$Node, int, boolean, boolean, boolean, long):int (424 bytes)   not inlining relevance-based (relevance=0.002525, probability=0.002232, bonus=1.000000, nodes=226 > 0.757359)
                              @ 4  java.util.concurrent.locks.ReentrantLock$Sync.lock():void (13 bytes)   relevance-based (relevance=1.138868, probability=1.000000, bonus=1.000000, nodes=57 <= 300.000000)
                                      @ 79  java.nio.charset.CoderResult.isOverflow():boolean (14 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                                      @ 90  java.nio.charset.CoderResult.isUnderflow():boolean (13 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                                @ 1  java.io.PrintStream.ensureOpen():void (18 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=7)
                                    @ 38  java.nio.charset.CharsetEncoder.encode(CharBuffer, ByteBuffer, boolean):CoderResult (273 bytes)   relevance-based (relevance=1.000412, probability=1.000000, bonus=1.000000, nodes=160 <= 300.000000)
                                    @ 43  java.nio.charset.CoderResult.isUnderflow():boolean (13 bytes)   trivial (relevance=1.000412, probability=1.000000, bonus=1.000000, nodes=5)
                                    @ 76  java.nio.Buffer.remaining():int (20 bytes)   relevance-based (relevance=1.000412, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                                  @ 11  sun.nio.cs.StreamEncoder.implWrite(CharBuffer):void (145 bytes)   relevance-based (relevance=1.073464, probability=1.000000, bonus=1.000000, nodes=217 <= 300.000000)
                            @ 157  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 49  sun.nio.cs.StreamEncoder.implWrite(char[], int, int):void (15 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=282 <= 300.000000)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  jdk.graal.compiler.hotspot.HotSpotTTYStreamProvider$LogStreamOptionKey$DelayedOutputStream$$Lambda/0x00007f8674264b28.<init>(String):void (10 bytes)   inline method (bytecode parsing)
                            @ 210  jdk.vm.ci.hotspot.HotSpotJVMCIRuntime.getLogStream():OutputStream (9 bytes)   inline method (bytecode parsing)
                              @ 30  sun.nio.cs.StreamEncoder.lockedWrite(char[], int, int):void (53 bytes)   relevance-based (relevance=1.131007, probability=1.000000, bonus=1.000000, nodes=300 <= 300.000000)
                            @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 8  java.util.concurrent.locks.AbstractOwnableSynchronizer.getExclusiveOwnerThread():Thread (5 bytes)   inline accessor method (bytecode parsing)
                            @ 41  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                            @ 46  java.util.concurrent.locks.AbstractQueuedSynchronizer.setState(int):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  java.util.concurrent.locks.ReentrantLock$Sync.tryRelease(int):boolean (51 bytes)   relevance-based (relevance=1.131007, probability=1.000000, bonus=1.000000, nodes=37 <= 300.000000)
                            @ 22  java.util.concurrent.locks.AbstractQueuedSynchronizer$Node.getAndUnsetStatus(int):int (14 bytes)   inline method (bytecode parsing)
                              @ 10  jdk.internal.misc.Unsafe.getAndBitwiseAndInt(Object, long, int):int (27 bytes)   inline method (bytecode parsing)
                            @ 5  java.lang.Thread.isVirtual():boolean (5 bytes)   inline method (bytecode parsing)
                                @ 30  java.util.concurrent.locks.LockSupport.unpark(Thread):void (26 bytes)   not inlining relevance-based (relevance=0.006468, probability=0.004166, bonus=1.000000, nodes=23 > 1.940368)
                              @ 12  java.util.concurrent.locks.AbstractQueuedSynchronizer.signalNext(AbstractQueuedSynchronizer$Node):void (34 bytes)   relevance-based (relevance=0.993234, probability=0.878186, bonus=1.000000, nodes=56 <= 297.970290)
                            @ 0  jdk.graal.compiler.options.OptionValues.newOptionMap():EconomicMap (7 bytes)   inline method (bytecode parsing)
                              @ 3  org.graalvm.collections.EconomicMap.create(Equivalence):EconomicMap (6 bytes)   inline method (bytecode parsing)
                                @ 2  org.graalvm.collections.EconomicMapImpl.create(Equivalence, boolean):EconomicMapImpl (13 bytes)   inline method (bytecode parsing)
                                  @ 6  org.graalvm.collections.EconomicMapImpl.<init>(Equivalence, boolean):void (30 bytes)   inline method (bytecode parsing)
                                  @ 9  org.graalvm.collections.EconomicMapImpl.intercept(EconomicMapImpl):EconomicMapImpl (2 bytes)   inline method (bytecode parsing)
                            @ 6  jdk.vm.ci.common.InitTimer.timer(String):InitTimer (19 bytes)   inline method (bytecode parsing)
                            @ 239  org.graalvm.collections.EconomicMap.create():EconomicMap (7 bytes)   inline method (bytecode parsing)
                              @ 3  org.graalvm.collections.EconomicMap.create(Equivalence):EconomicMap (6 bytes)   inline method (bytecode parsing)
                                @ 2  org.graalvm.collections.EconomicMapImpl.create(Equivalence, boolean):EconomicMapImpl (13 bytes)   inline method (bytecode parsing)
                                  @ 6  org.graalvm.collections.EconomicMapImpl.<init>(Equivalence, boolean):void (30 bytes)   inline method (bytecode parsing)
                                  @ 9  org.graalvm.collections.EconomicMapImpl.intercept(EconomicMapImpl):EconomicMapImpl (2 bytes)   inline method (bytecode parsing)
                            @ 295  java.lang.String.startsWith(String):boolean (7 bytes)   inline method (bytecode parsing)
                            @ 305  java.lang.String.length():int (11 bytes)   inline method (bytecode parsing)
                              @ 6  java.lang.String.coder():byte (15 bytes)   inline method (bytecode parsing)
                            @ 308  java.lang.String.substring(int):String (10 bytes)   inline method (bytecode parsing)
                            @ 311  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.LambdaForm$MH/0x00007f8674002400.invoke(Object, Object):Object (25 bytes)   inline method (bytecode parsing)
                                @ 21  java.lang.invoke.DirectMethodHandle$Holder.invokeStatic(Object, Object, Object):Object (15 bytes)   inline method (bytecode parsing)
                                  @ 1  java.lang.invoke.DirectMethodHandle.internalMemberName(Object):Object (8 bytes)   inline method (bytecode parsing)
                                  @ 11  java.lang.StringConcatHelper.simpleConcat(Object, Object):String (94 bytes)   inline method (bytecode parsing)
                                    @ 1  java.lang.StringConcatHelper.stringOf(Object):String (20 bytes)   inline method (bytecode parsing)
                                      @ 5  java.lang.String.toString():String (2 bytes)   inline method (bytecode parsing)
                                    @ 11  java.lang.String.isEmpty():boolean (14 bytes)   inline method (bytecode parsing)
                                    @ 61  java.lang.StringConcatHelper.newArray(long):byte[] (40 bytes)   inline method (bytecode parsing)
                            @ 322  java.lang.String.startsWith(String):boolean (7 bytes)   inline method (bytecode parsing)
                            @ 359  java.lang.String.length():int (11 bytes)   inline method (bytecode parsing)
                              @ 6  java.lang.String.coder():byte (15 bytes)   inline method (bytecode parsing)
                            @ 362  java.lang.String.substring(int):String (10 bytes)   inline method (bytecode parsing)
                            @ 8  jdk.vm.ci.services.Services.getSavedProperty(String):String (13 bytes)   inline method (bytecode parsing)
                            @ 11  java.lang.Boolean.parseBoolean(String):boolean (7 bytes)   inline method (bytecode parsing)
                            @ 24  java.util.concurrent.atomic.AtomicInteger.<init>():void (5 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.Number.<init>():void (5 bytes)   inline method (bytecode parsing)
                                              @ 0  jdk.vm.ci.services.Services.checkJVMCIEnabled():void (17 bytes)   trivial (relevance=4.000000, probability=0.031250, bonus=1.000000, nodes=3)
                                                @ 0  java.lang.System.allowSecurityManager():boolean (13 bytes)   trivial (relevance=1.000892, probability=0.007813, bonus=1.000000, nodes=8)
                                              @ 42  java.lang.System.getSecurityManager():SecurityManager (12 bytes)   relevance-based (relevance=1.000000, probability=0.007813, bonus=1.000000, nodes=14 <= 300.000000)
                            @ 12  java.lang.IllegalStateException.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  java.lang.RuntimeException.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                                @ 2  java.lang.Exception.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                            @ 12  java.lang.NullPointerException.<init>():void (5 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.RuntimeException.<init>():void (5 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.Exception.<init>():void (5 bytes)   inline method (bytecode parsing)
                 n                                    @ 25  java.lang.NullPointerException.getExtendedNPEMessage():String (0 bytes)   not inlining it is a non-intrinsic native method
                 n                                      @ 16  java.lang.Throwable.fillInStackTrace(int):Throwable (0 bytes)   not inlining it is a non-intrinsic native method
              s                                         @ 37  java.lang.Throwable.fillInStackTrace():Throwable (29 bytes)   relevance-based (relevance=4.000000, probability=0.000977, bonus=1.000000, nodes=34 <= 300.000000)
              s                                       @ 24  java.lang.NullPointerException.fillInStackTrace():Throwable (41 bytes)   relevance-based (relevance=1.000000, probability=0.000977, bonus=1.000000, nodes=65 <= 300.000000)
                                                    @ 1  java.lang.Throwable.<init>():void (29 bytes)   relevance-based (relevance=1.000000, probability=0.000977, bonus=1.000000, nodes=73 <= 300.000000)
                                                  @ 18  java.util.Collections$UnmodifiableMap.<init>(Map):void (22 bytes)   relevance-based (relevance=1.000000, probability=0.001953, bonus=1.000000, nodes=87 <= 300.000000)
                                                @ 19  java.util.Collections.unmodifiableMap(Map):Map (22 bytes)   relevance-based (relevance=1.000000, probability=0.003906, bonus=1.000000, nodes=95 <= 300.000000)
                 n                                @ 16  java.lang.Throwable.fillInStackTrace(int):Throwable (0 bytes)   not inlining it is a non-intrinsic native method
              s                                   @ 24  java.lang.Throwable.fillInStackTrace():Throwable (29 bytes)   relevance-based (relevance=1.000000, probability=0.003906, bonus=1.000000, nodes=34 <= 300.000000)
                                                @ 2  java.lang.Throwable.<init>(String):void (34 bytes)   relevance-based (relevance=16.000000, probability=0.003906, bonus=1.000000, nodes=45 <= 300.000000)
                                              @ 61  jdk.internal.misc.VM.getSavedProperties():Map (23 bytes)   relevance-based (relevance=1.000892, probability=0.007813, bonus=1.000000, nodes=147 <= 300.000000)
                                            @ 0  jdk.vm.ci.services.Services.getSavedProperties():Map (81 bytes)   relevance-based (relevance=1.000000, probability=0.031250, bonus=1.000000, nodes=201 <= 300.000000)
                                          @ 4  java.util.Map.get(Object):Object (0 bytes)   not inlining no type profile exists
                                                @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.006592, bonus=1.000000, nodes=5)
                                              @ 14  java.lang.String.length():int (11 bytes)   trivial (relevance=2.000000, probability=0.006592, bonus=1.000000, nodes=8)
                                                @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.006592, bonus=1.000000, nodes=5)
                                              @ 18  java.lang.String.length():int (11 bytes)   trivial (relevance=2.000000, probability=0.006592, bonus=1.000000, nodes=5)
                                                @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.003296, bonus=1.000000, nodes=5)
                                              @ 30  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000000, probability=0.003296, bonus=1.000000, nodes=5)
                            @ 146  java.lang.StringUTF16.regionMatchesCI_Latin1(byte[], int, byte[], int, int):boolean (10 bytes)   inline method (bytecode parsing)
                                                  @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.003296, bonus=1.000000, nodes=5)
                                                @ 27  java.lang.String.length():int (11 bytes)   trivial (relevance=16.000000, probability=0.003296, bonus=1.000000, nodes=5)
                                                  @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.003296, bonus=1.000000, nodes=5)
                                                @ 43  java.lang.String.length():int (11 bytes)   trivial (relevance=16.000000, probability=0.003296, bonus=1.000000, nodes=8)
                                                @ 70  java.lang.String.coder():byte (15 bytes)   trivial (relevance=4.000000, probability=0.000824, bonus=1.000000, nodes=5)
                                                @ 78  java.lang.String.coder():byte (15 bytes)   trivial (relevance=2.000000, probability=0.000824, bonus=1.000000, nodes=5)
                            @ 58  java.lang.Character.toUpperCase(char):char (6 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.Character.toUpperCase(int):int (9 bytes)   inline method (bytecode parsing)
                            @ 75  java.lang.Character.toLowerCase(char):char (6 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.Character.toLowerCase(int):int (9 bytes)   inline method (bytecode parsing)
                            @ 80  java.lang.Character.toLowerCase(char):char (6 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.Character.toLowerCase(int):int (9 bytes)   inline method (bytecode parsing)
                                                  @ 50  java.lang.CharacterDataLatin1.toUpperCase(int):int (67 bytes)   relevance-based (relevance=4.000000, probability=0.000183, bonus=1.000000, nodes=52 <= 300.000000)
                                                  @ 1  java.lang.CharacterData.of(int):CharacterData (136 bytes)   trivial (relevance=32.000000, probability=0.000183, bonus=1.000000, nodes=8)
                                                  @ 5  java.lang.CharacterDataLatin1.toUpperCase(int):int (67 bytes)   relevance-based (relevance=32.000000, probability=0.000183, bonus=1.000000, nodes=52 <= 300.000000)
                                                  @ 1  java.lang.CharacterData.of(int):CharacterData (136 bytes)   trivial (relevance=16.000000, probability=0.000092, bonus=1.000000, nodes=8)
                                                  @ 5  java.lang.CharacterDataLatin1.toLowerCase(int):int (44 bytes)   relevance-based (relevance=16.000000, probability=0.000092, bonus=1.000000, nodes=38 <= 300.000000)
                                                  @ 1  java.lang.CharacterData.of(int):CharacterData (136 bytes)   trivial (relevance=16.000000, probability=0.000092, bonus=1.000000, nodes=8)
                                                  @ 5  java.lang.CharacterDataLatin1.toLowerCase(int):int (44 bytes)   relevance-based (relevance=16.000000, probability=0.000092, bonus=1.000000, nodes=38 <= 300.000000)
                                                @ 131  java.lang.StringLatin1.regionMatchesCI_UTF16(byte[], int, byte[], int, int):boolean (93 bytes)   relevance-based (relevance=1.000000, probability=0.000412, bonus=1.000000, nodes=206 <= 300.000000)
                            @ 9  java.nio.Buffer.limit():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 1  java.nio.Buffer.limit():int (5 bytes)   inline accessor method (bytecode parsing)
                                                  @ 32  java.lang.CharacterDataLatin1.equalsIgnoreCase(byte, byte):boolean (63 bytes)   relevance-based (relevance=2.000000, probability=0.000275, bonus=1.000000, nodes=42 <= 300.000000)
                                  @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                                @ 10  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=8)
                                                @ 98  java.lang.StringLatin1.regionMatchesCI(byte[], int, byte[], int, int):boolean (45 bytes)   relevance-based (relevance=1.000000, probability=0.000412, bonus=1.000000, nodes=64 <= 300.000000)
                            @ 4  java.nio.Buffer.session():MemorySessionImpl (20 bytes)   inline method (bytecode parsing)
                            @ 11  java.nio.Buffer.checkIndex(int):int (12 bytes)   inline method (bytecode parsing)
                                              @ 33  java.lang.String.regionMatches(boolean, int, String, int, int):boolean (150 bytes)   relevance-based (relevance=1.000000, probability=0.003296, bonus=1.000000, nodes=285 <= 300.000000)
                            @ 14  java.nio.DirectByteBuffer.ix(int):long (10 bytes)   inline method (bytecode parsing)
                            @ 17  jdk.internal.misc.ScopedMemoryAccess.getByte(MemorySessionImpl, Object, long):byte (16 bytes)   inline method (bytecode parsing)
                              @ 4  jdk.internal.misc.ScopedMemoryAccess.getByteInternal(MemorySessionImpl, Object, long):byte (34 bytes)   inline method (bytecode parsing)
                                @ 25  java.nio.DirectByteBuffer.get(int):byte (34 bytes)   relevance-based (relevance=1.049648, probability=21.141921, bonus=1.000000, nodes=23 <= 300.000000)
                                  @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=20.145688, bonus=1.000000, nodes=9)
                                            @ 3  java.lang.String.equalsIgnoreCase(String):boolean (45 bytes)   not inlining relevance-based (relevance=3.378011, probability=0.026367, bonus=1.000000, nodes=302 > 300.000000)
                                          @ 0  jdk.vm.ci.common.InitTimer.isEnabled():boolean (37 bytes)   relevance-based (relevance=2.000000, probability=0.062500, bonus=1.000000, nodes=237 <= 300.000000)
                            @ 3  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                                  @ 12  java.lang.StringLatin1.charAt(byte[], int):char (15 bytes)   relevance-based (relevance=1.000000, probability=20.145688, bonus=1.000000, nodes=11 <= 300.000000)
                                @ 53  java.lang.String.charAt(int):char (25 bytes)   relevance-based (relevance=1.000187, probability=20.145688, bonus=1.000000, nodes=16 <= 300.000000)
                              @ 33  jdk.internal.jimage.ImageStringsReader.stringFromByteBufferMatches(ByteBuffer, int, String, int):int (138 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=94 <= 300.000000)
                                        @ 4  jdk.graal.compiler.hotspot.HotSpotGraalOptionValues.parseOptions():EconomicMap (417 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.062500, bonus=1.000000, nodes=496 > 300.000000)
                            @ 4  jdk.graal.compiler.options.OptionValues.newOptionMap():EconomicMap (7 bytes)   inline method (bytecode parsing)
                              @ 3  org.graalvm.collections.EconomicMap.create(Equivalence):EconomicMap (6 bytes)   inline method (bytecode parsing)
                                @ 2  org.graalvm.collections.EconomicMapImpl.create(Equivalence, boolean):EconomicMapImpl (13 bytes)   inline method (bytecode parsing)
                                  @ 6  org.graalvm.collections.EconomicMapImpl.<init>(Equivalence, boolean):void (30 bytes)   inline method (bytecode parsing)
                                  @ 9  org.graalvm.collections.EconomicMapImpl.intercept(EconomicMapImpl):EconomicMapImpl (2 bytes)   inline method (bytecode parsing)
                                          @ 1  org.graalvm.collections.UnmodifiableEconomicMap.getEntries():UnmodifiableMapCursor (0 bytes)   not inlining no type profile exists
                                          @ 8  org.graalvm.collections.UnmodifiableMapCursor.advance():boolean (0 bytes)   not inlining no type profile exists
                                          @ 18  org.graalvm.collections.UnmodifiableMapCursor.getKey():Object (0 bytes)   not inlining no type profile exists
                                          @ 27  org.graalvm.collections.UnmodifiableMapCursor.getValue():Object (0 bytes)   not inlining no type profile exists
                                            @ 32  jdk.graal.compiler.options.OptionValues.encodeNull(Object):Object (12 bytes)   relevance-based (relevance=1.000000, probability=0.062500, bonus=1.000000, nodes=14 <= 300.000000)
                            @ 111  org.graalvm.collections.EconomicMapImpl.setKey(int, Object):void (10 bytes)   inline method (bytecode parsing)
                            @ 143  org.graalvm.collections.EconomicMapImpl.size():int (10 bytes)   inline method (bytecode parsing)
                            @ 147  org.graalvm.collections.EconomicMapImpl.size():int (10 bytes)   inline method (bytecode parsing)
                                            @ 35  org.graalvm.collections.EconomicMapImpl.put(Object, Object):Object (192 bytes)   not inlining too large previous low-level graph (low-level-nodes: 1279, relevance=1.000000, probability=0.062500, bonus=1.000000, nodes=101)
                                          @ 10  jdk.graal.compiler.options.OptionValues.initMap(EconomicMap, UnmodifiableEconomicMap):void (45 bytes)   not inlining callee invoke probability is too high (invokeP=6.000000, relevance=1.000000, probability=0.062500, bonus=1.000000, nodes=44)
                                        @ 7  jdk.graal.compiler.options.OptionValues.<init>(UnmodifiableEconomicMap):void (19 bytes)   relevance-based (relevance=1.000000, probability=0.062500, bonus=1.000000, nodes=24 <= 300.000000)
                                      @ 21  jdk.graal.compiler.hotspot.HotSpotGraalOptionValues.initializeOptions():OptionValues (11 bytes)   relevance-based (relevance=1.000000, probability=0.062500, bonus=1.000000, nodes=27 <= 300.000000)
                                    @ 22  jdk.graal.compiler.hotspot.HotSpotGraalOptionValues.defaultOptions():OptionValues (41 bytes)   relevance-based (relevance=6.183661, probability=0.250000, bonus=1.000000, nodes=60 <= 300.000000)
                            @ 23  jdk.graal.compiler.options.OptionValues.get(OptionKey):Object (9 bytes)   inline method (bytecode parsing)
                            @ 13  jdk.graal.compiler.options.OptionKey.getDefaultValue():Object (5 bytes)   inline accessor method (bytecode parsing)
                                      @ 2  org.graalvm.collections.UnmodifiableEconomicMap.get(Object):Object (0 bytes)   not inlining no type profile exists
                                        @ 18  jdk.graal.compiler.options.OptionValues.decodeNull(Object):Object (13 bytes)   relevance-based (relevance=1.000000, probability=0.125000, bonus=1.000000, nodes=15 <= 300.000000)
                                      @ 5  jdk.graal.compiler.options.OptionValues.get(UnmodifiableEconomicMap, OptionKey):Object (22 bytes)   relevance-based (relevance=1.000000, probability=0.250000, bonus=1.000000, nodes=26 <= 300.000000)
                                    @ 25  jdk.graal.compiler.options.OptionKey.getValue(OptionValues):Object (27 bytes)   relevance-based (relevance=4.000000, probability=0.250000, bonus=1.000000, nodes=31 <= 300.000000)
                            @ 5  java.lang.String.contains(CharSequence):boolean (19 bytes)   inline method (bytecode parsing)
                              @ 2  java.lang.String.toString():String (2 bytes)   inline method (bytecode parsing)
                            @ 24  java.lang.String.contains(CharSequence):boolean (19 bytes)   inline method (bytecode parsing)
                              @ 2  java.lang.String.toString():String (2 bytes)   inline method (bytecode parsing)
                            @ 44  java.lang.String.contains(CharSequence):boolean (19 bytes)   inline method (bytecode parsing)
                              @ 2  java.lang.String.toString():String (2 bytes)   inline method (bytecode parsing)
                            @ 64  java.lang.String.contains(CharSequence):boolean (19 bytes)   inline method (bytecode parsing)
                              @ 2  java.lang.String.toString():String (2 bytes)   inline method (bytecode parsing)
                            @ 76  java.lang.String.valueOf(long):String (5 bytes)   inline method (bytecode parsing)
                                        @ 1  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.125000, bonus=1.000000, nodes=5)
                                        @ 7  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.125000, bonus=1.000000, nodes=5)
                                        @ 14  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=0.125000, bonus=1.000000, nodes=9)
                                        @ 28  java.lang.StringLatin1.indexOf(byte[], byte[]):int (25 bytes)   relevance-based (relevance=1.000000, probability=0.125000, bonus=1.000000, nodes=16 <= 300.000000)
                                      @ 7  java.lang.String.indexOf(String):int (64 bytes)   relevance-based (relevance=2.000000, probability=0.125000, bonus=1.000000, nodes=25 <= 300.000000)
                                      @ 14  jdk.graal.compiler.serviceprovider.GraalServices.getExecutionID():String (12 bytes)   trivial (relevance=1.000000, probability=0.062500, bonus=1.000000, nodes=3)
                                        @ 1  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.062500, bonus=1.000000, nodes=5)
                                        @ 7  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.062500, bonus=1.000000, nodes=5)
                                        @ 14  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=0.062500, bonus=1.000000, nodes=9)
                            @ 8  java.util.Arrays$ArrayItr.<init>(Object[]):void (10 bytes)   inline method (bytecode parsing)
                                        @ 28  java.lang.StringLatin1.indexOf(byte[], byte[]):int (25 bytes)   relevance-based (relevance=1.000000, probability=0.062500, bonus=1.000000, nodes=16 <= 300.000000)
                                      @ 7  java.lang.String.indexOf(String):int (64 bytes)   relevance-based (relevance=1.000000, probability=0.062500, bonus=1.000000, nodes=25 <= 300.000000)
                                  @ 5  java.util.ArrayList$Itr.<init>(ArrayList):void (26 bytes)   relevance-based (relevance=1.000000, probability=0.947425, bonus=1.000000, nodes=15 <= 300.000000)
                                @ 17  java.util.ArrayList.iterator():Iterator (9 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=26 <= 300.000000)
                                        @ 1  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.125000, bonus=1.000000, nodes=5)
                                        @ 7  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.125000, bonus=1.000000, nodes=5)
                              @ 5  java.util.Collections$UnmodifiableCollection$1.<init>(Collections$UnmodifiableCollection):void (26 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=49 <= 300.000000)
                                        @ 14  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=0.125000, bonus=1.000000, nodes=9)
                                        @ 28  java.lang.StringLatin1.indexOf(byte[], byte[]):int (25 bytes)   relevance-based (relevance=1.000000, probability=0.125000, bonus=1.000000, nodes=16 <= 300.000000)
                                      @ 7  java.lang.String.indexOf(String):int (64 bytes)   relevance-based (relevance=2.000020, probability=0.125000, bonus=1.000000, nodes=25 <= 300.000000)
                                        @ 1  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.125000, bonus=1.000000, nodes=5)
                                        @ 7  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.125000, bonus=1.000000, nodes=5)
                                        @ 14  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=0.125000, bonus=1.000000, nodes=9)
                                        @ 28  java.lang.StringLatin1.indexOf(byte[], byte[]):int (25 bytes)   relevance-based (relevance=1.000000, probability=0.125000, bonus=1.000000, nodes=16 <= 300.000000)
                                      @ 7  java.lang.String.indexOf(String):int (64 bytes)   relevance-based (relevance=2.000020, probability=0.125000, bonus=1.000000, nodes=25 <= 300.000000)
                            @ 28  java.lang.String.<init>(byte[], byte):void (15 bytes)   inline method (bytecode parsing)
                                        @ 1  java.lang.Long.stringSize(long):int (55 bytes)   relevance-based (relevance=1.000000, probability=0.062500, bonus=1.000000, nodes=34 <= 300.000000)
                                        @ 18  java.lang.Long.getChars(long, int, byte[]):int (195 bytes)   relevance-based (relevance=1.000000, probability=0.062500, bonus=1.000000, nodes=64 <= 300.000000)
                                      @ 1  java.lang.Long.toString(long):String (55 bytes)   relevance-based (relevance=1.000010, probability=0.062500, bonus=1.000000, nodes=98 <= 300.000000)
                            @ 11  jdk.internal.misc.InternalLock.lock():void (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.util.concurrent.locks.ReentrantLock.lock():void (8 bytes)   inline method (bytecode parsing)
                            @ 23  jdk.internal.misc.InternalLock.unlock():void (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.util.concurrent.locks.ReentrantLock.unlock():void (10 bytes)   inline method (bytecode parsing)
                                @ 5  java.util.concurrent.locks.AbstractQueuedSynchronizer.release(int):boolean (19 bytes)   inline method (bytecode parsing)
                            @ 9  java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(int):void (20 bytes)   inline method (bytecode parsing)
                            @ 7  java.util.concurrent.locks.AbstractQueuedSynchronizer.compareAndSetState(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 15  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                            @ 21  java.util.concurrent.locks.AbstractOwnableSynchronizer.getExclusiveOwnerThread():Thread (5 bytes)   inline accessor method (bytecode parsing)
                            @ 29  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 51  java.util.concurrent.locks.AbstractQueuedSynchronizer.setState(int):void (6 bytes)   inline method (bytecode parsing)
                                @ 1  java.util.concurrent.locks.ReentrantLock$NonfairSync.initialTryLock():boolean (58 bytes)   relevance-based (relevance=1.005231, probability=1.000000, bonus=1.000000, nodes=40 <= 300.000000)
                            @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 10  java.util.concurrent.locks.AbstractQueuedSynchronizer.compareAndSetState(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 20  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                                @ 2  java.util.concurrent.locks.ReentrantLock$NonfairSync.tryAcquire(int):boolean (27 bytes)   not inlining relevance-based (relevance=0.005049, probability=0.004464, bonus=1.000000, nodes=36 > 1.514719)
                            @ 108  java.util.concurrent.locks.AbstractQueuedSynchronizer.tryAcquireShared(int):int (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.lang.UnsupportedOperationException.<init>():void (5 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.RuntimeException.<init>():void (5 bytes)   inline method (bytecode parsing)
                                  @ 1  java.lang.Exception.<init>():void (5 bytes)   inline method (bytecode parsing)
                            @ 245  java.util.concurrent.locks.AbstractQueuedSynchronizer$ExclusiveNode.<init>():void (5 bytes)   inline method (bytecode parsing)
                              @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer$Node.<init>():void (5 bytes)   inline method (bytecode parsing)
                            @ 290  java.util.concurrent.locks.AbstractQueuedSynchronizer$Node.setPrevRelaxed(AbstractQueuedSynchronizer$Node):void (12 bytes)   inline method (bytecode parsing)
                            @ 393  java.lang.Thread.interrupted():boolean (7 bytes)   inline method (bytecode parsing)
                                @ 15  java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer$Node, int, boolean, boolean, boolean, long):int (424 bytes)   not inlining relevance-based (relevance=0.002525, probability=0.002232, bonus=1.000000, nodes=226 > 0.757359)
                              @ 4  java.util.concurrent.locks.ReentrantLock$Sync.lock():void (13 bytes)   relevance-based (relevance=1.139625, probability=1.000000, bonus=1.000000, nodes=57 <= 300.000000)
                            @ 23  java.io.OutputStreamWriter.flushBuffer():void (8 bytes)   inline method (bytecode parsing)
                                @ 1  java.io.PrintStream.ensureOpen():void (18 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=7)
                                @ 9  java.io.Writer.write(String):void (11 bytes)   not inlining too large previous low-level graph (low-level-nodes: 445, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=12)
                            @ 18  jdk.internal.misc.InternalLock.lock():void (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.util.concurrent.locks.ReentrantLock.lock():void (8 bytes)   inline method (bytecode parsing)
                            @ 26  jdk.internal.misc.InternalLock.unlock():void (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.util.concurrent.locks.ReentrantLock.unlock():void (10 bytes)   inline method (bytecode parsing)
                                @ 5  java.util.concurrent.locks.AbstractQueuedSynchronizer.release(int):boolean (19 bytes)   inline method (bytecode parsing)
                            @ 9  java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(int):void (20 bytes)   inline method (bytecode parsing)
                            @ 7  java.util.concurrent.locks.AbstractQueuedSynchronizer.compareAndSetState(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 15  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                            @ 21  java.util.concurrent.locks.AbstractOwnableSynchronizer.getExclusiveOwnerThread():Thread (5 bytes)   inline accessor method (bytecode parsing)
                            @ 29  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 51  java.util.concurrent.locks.AbstractQueuedSynchronizer.setState(int):void (6 bytes)   inline method (bytecode parsing)
                                    @ 1  java.util.concurrent.locks.ReentrantLock$NonfairSync.initialTryLock():boolean (58 bytes)   relevance-based (relevance=1.005231, probability=1.000000, bonus=1.000000, nodes=40 <= 300.000000)
                            @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 10  java.util.concurrent.locks.AbstractQueuedSynchronizer.compareAndSetState(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 20  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                                    @ 2  java.util.concurrent.locks.ReentrantLock$NonfairSync.tryAcquire(int):boolean (27 bytes)   not inlining relevance-based (relevance=0.005049, probability=0.004464, bonus=1.000000, nodes=36 > 1.514719)
                            @ 206  java.lang.StringBuilder.<init>(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 108  java.util.concurrent.locks.AbstractQueuedSynchronizer.tryAcquireShared(int):int (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.lang.UnsupportedOperationException.<init>():void (5 bytes)   inline method (bytecode parsing)
                            @ 215  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.RuntimeException.<init>():void (5 bytes)   inline method (bytecode parsing)
                                  @ 1  java.lang.Exception.<init>():void (5 bytes)   inline method (bytecode parsing)
                            @ 237  java.lang.StringBuilder.append(char):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 242  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 245  java.util.concurrent.locks.AbstractQueuedSynchronizer$ExclusiveNode.<init>():void (5 bytes)   inline method (bytecode parsing)
                              @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer$Node.<init>():void (5 bytes)   inline method (bytecode parsing)
                            @ 254  java.lang.StringBuilder.toString():String (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.String.<init>(StringBuilder):void (7 bytes)   inline method (bytecode parsing)
                            @ 290  java.util.concurrent.locks.AbstractQueuedSynchronizer$Node.setPrevRelaxed(AbstractQueuedSynchronizer$Node):void (12 bytes)   inline method (bytecode parsing)
                            @ 393  java.lang.Thread.interrupted():boolean (7 bytes)   inline method (bytecode parsing)
                                        @ 1  java.lang.String.toString():String (2 bytes)   trivial (relevance=8.000000, probability=0.062500, bonus=1.000000, nodes=4)
                                        @ 8  java.lang.String.toString():String (2 bytes)   trivial (relevance=8.000000, probability=0.062500, bonus=1.000000, nodes=4)
                                          @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.062500, bonus=1.000000, nodes=5)
                                        @ 16  java.lang.String.length():int (11 bytes)   trivial (relevance=8.000000, probability=0.062500, bonus=1.000000, nodes=8)
                                    @ 15  java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer$Node, int, boolean, boolean, boolean, long):int (424 bytes)   not inlining relevance-based (relevance=0.002525, probability=0.002232, bonus=1.000000, nodes=226 > 0.757359)
                                  @ 4  java.util.concurrent.locks.ReentrantLock$Sync.lock():void (13 bytes)   relevance-based (relevance=1.139625, probability=1.000000, bonus=1.000000, nodes=57 <= 300.000000)
                                          @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.062500, bonus=1.000000, nodes=5)
                                        @ 22  java.lang.String.length():int (11 bytes)   trivial (relevance=8.000000, probability=0.062500, bonus=1.000000, nodes=5)
                                    @ 1  java.io.BufferedWriter.ensureOpen():void (18 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=7)
                                          @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.062500, bonus=1.000000, nodes=5)
                                        @ 29  java.lang.String.length():int (11 bytes)   trivial (relevance=21.333333, probability=0.062500, bonus=1.000000, nodes=8)
                                        @ 68  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=21.333333, probability=0.062500, bonus=1.000000, nodes=9)
                            @ 23  jdk.internal.misc.InternalLock.lock():void (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.util.concurrent.locks.ReentrantLock.lock():void (8 bytes)   inline method (bytecode parsing)
                                        @ 74  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=21.333333, probability=0.062500, bonus=1.000000, nodes=5)
                            @ 35  jdk.internal.misc.InternalLock.unlock():void (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.util.concurrent.locks.ReentrantLock.unlock():void (10 bytes)   inline method (bytecode parsing)
                                @ 5  java.util.concurrent.locks.AbstractQueuedSynchronizer.release(int):boolean (19 bytes)   inline method (bytecode parsing)
                                        @ 81  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=21.333333, probability=0.062500, bonus=1.000000, nodes=9)
                                      @ 7  sun.nio.cs.StreamEncoder.write(char[], int, int):void (82 bytes)   not inlining too large previous low-level graph (low-level-nodes: 614, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=60)
                                    @ 25  java.io.OutputStreamWriter.write(char[], int, int):void (11 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                                  @ 22  java.io.BufferedWriter.implFlushBuffer():void (34 bytes)   relevance-based (relevance=1.131007, probability=1.000000, bonus=1.000000, nodes=28 <= 300.000000)
                            @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 162  java.lang.StringConcatHelper.newArray(long):byte[] (40 bytes)   inline method (bytecode parsing)
                            @ 8  java.util.concurrent.locks.AbstractOwnableSynchronizer.getExclusiveOwnerThread():Thread (5 bytes)   inline accessor method (bytecode parsing)
                            @ 41  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                            @ 46  java.util.concurrent.locks.AbstractQueuedSynchronizer.setState(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 287  java.lang.String.<init>(byte[], byte):void (15 bytes)   inline method (bytecode parsing)
                                  @ 2  java.util.concurrent.locks.ReentrantLock$Sync.tryRelease(int):boolean (51 bytes)   relevance-based (relevance=1.131007, probability=1.000000, bonus=1.000000, nodes=37 <= 300.000000)
                            @ 22  java.util.concurrent.locks.AbstractQueuedSynchronizer$Node.getAndUnsetStatus(int):int (14 bytes)   inline method (bytecode parsing)
                              @ 10  jdk.internal.misc.Unsafe.getAndBitwiseAndInt(Object, long, int):int (27 bytes)   inline method (bytecode parsing)
                            @ 5  java.lang.Thread.isVirtual():boolean (5 bytes)   inline method (bytecode parsing)
                                    @ 30  java.util.concurrent.locks.LockSupport.unpark(Thread):void (26 bytes)   not inlining relevance-based (relevance=0.006463, probability=0.004162, bonus=1.000000, nodes=23 > 1.938812)
                                  @ 12  java.util.concurrent.locks.AbstractQueuedSynchronizer.signalNext(AbstractQueuedSynchronizer$Node):void (34 bytes)   relevance-based (relevance=0.992438, probability=0.877482, bonus=1.000000, nodes=56 <= 297.731395)
                                            @ 3  java.lang.Math.max(int, int):int (11 bytes)   trivial (relevance=0.500000, probability=0.000366, bonus=1.000000, nodes=8)
                                          @ 94  jdk.internal.util.ArraysSupport.newLength(int, int, int):int (27 bytes)   relevance-based (relevance=0.500000, probability=0.000366, bonus=1.000000, nodes=15 <= 150.000000)
                                @ 16  java.io.BufferedWriter.flushBuffer():void (63 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=199 <= 300.000000)
                                            @ 25  java.lang.Math.min(int, int):int (11 bytes)   trivial (relevance=0.500005, probability=0.000357, bonus=1.000000, nodes=7)
                                          @ 97  java.util.Arrays.copyOf(int[], int):int[] (33 bytes)   relevance-based (relevance=0.500000, probability=0.000366, bonus=1.000000, nodes=28 <= 150.000000)
                            @ 18  jdk.internal.misc.InternalLock.lock():void (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.util.concurrent.locks.ReentrantLock.lock():void (8 bytes)   inline method (bytecode parsing)
                            @ 26  jdk.internal.misc.InternalLock.unlock():void (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.util.concurrent.locks.ReentrantLock.unlock():void (10 bytes)   inline method (bytecode parsing)
                                @ 5  java.util.concurrent.locks.AbstractQueuedSynchronizer.release(int):boolean (19 bytes)   inline method (bytecode parsing)
                            @ 9  java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(int):void (20 bytes)   inline method (bytecode parsing)
                                            @ 51  jdk.internal.misc.Unsafe.allocateUninitializedArray0(Class, int):Object (90 bytes)   trivial (relevance=0.499990, probability=0.000366, bonus=1.000000, nodes=6)
                                          @ 33  jdk.internal.misc.Unsafe.allocateUninitializedArray(Class, int):Object (55 bytes)   relevance-based (relevance=0.499990, probability=0.000366, bonus=1.000000, nodes=10 <= 149.997000)
                                        @ 120  java.lang.StringLatin1.replace(byte[], int, byte[], int, byte[], int):String (291 bytes)   relevance-based (relevance=1.000000, probability=0.002930, bonus=1.000000, nodes=208 <= 300.000000)
                            @ 7  java.util.concurrent.locks.AbstractQueuedSynchronizer.compareAndSetState(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 15  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                            @ 21  java.util.concurrent.locks.AbstractOwnableSynchronizer.getExclusiveOwnerThread():Thread (5 bytes)   inline accessor method (bytecode parsing)
                            @ 29  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 51  java.util.concurrent.locks.AbstractQueuedSynchronizer.setState(int):void (6 bytes)   inline method (bytecode parsing)
                                    @ 1  java.util.concurrent.locks.ReentrantLock$NonfairSync.initialTryLock():boolean (58 bytes)   relevance-based (relevance=1.005231, probability=1.000000, bonus=1.000000, nodes=40 <= 300.000000)
                            @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 10  java.util.concurrent.locks.AbstractQueuedSynchronizer.compareAndSetState(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 20  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                                    @ 2  java.util.concurrent.locks.ReentrantLock$NonfairSync.tryAcquire(int):boolean (27 bytes)   not inlining relevance-based (relevance=0.005049, probability=0.004464, bonus=1.000000, nodes=36 > 1.514719)
                            @ 108  java.util.concurrent.locks.AbstractQueuedSynchronizer.tryAcquireShared(int):int (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.lang.UnsupportedOperationException.<init>():void (5 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.RuntimeException.<init>():void (5 bytes)   inline method (bytecode parsing)
                                  @ 1  java.lang.Exception.<init>():void (5 bytes)   inline method (bytecode parsing)
                            @ 588  java.lang.StringUTF16.compress(byte[], int, int):byte[] (20 bytes)   inline method (bytecode parsing)
                            @ 245  java.util.concurrent.locks.AbstractQueuedSynchronizer$ExclusiveNode.<init>():void (5 bytes)   inline method (bytecode parsing)
                              @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer$Node.<init>():void (5 bytes)   inline method (bytecode parsing)
                            @ 290  java.util.concurrent.locks.AbstractQueuedSynchronizer$Node.setPrevRelaxed(AbstractQueuedSynchronizer$Node):void (12 bytes)   inline method (bytecode parsing)
                            @ 605  java.lang.String.<init>(byte[], byte):void (15 bytes)   inline method (bytecode parsing)
                            @ 616  java.lang.String.<init>(byte[], byte):void (15 bytes)   inline method (bytecode parsing)
                            @ 393  java.lang.Thread.interrupted():boolean (7 bytes)   inline method (bytecode parsing)
                                    @ 15  java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer$Node, int, boolean, boolean, boolean, long):int (424 bytes)   not inlining relevance-based (relevance=0.002525, probability=0.002232, bonus=1.000000, nodes=226 > 0.757359)
                                  @ 4  java.util.concurrent.locks.ReentrantLock$Sync.lock():void (13 bytes)   relevance-based (relevance=1.139625, probability=1.000000, bonus=1.000000, nodes=57 <= 300.000000)
                                          @ 76  java.lang.StringLatin1.indexOf(byte[], byte[]):int (25 bytes)   relevance-based (relevance=1.000000, probability=0.010254, bonus=1.000000, nodes=16 <= 300.000000)
                                    @ 1  sun.nio.cs.StreamEncoder.isOpen():boolean (13 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                            @ 4  java.nio.Buffer.position():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 8  java.lang.StringUTF16.length(byte[]):int (5 bytes)   inline method (bytecode parsing)
                            @ 20  java.lang.StringUTF16.length(byte[]):int (5 bytes)   inline method (bytecode parsing)
                            @ 12  java.nio.Buffer.limit():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 20  java.nio.Buffer.position():int (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 95  java.lang.StringUTF16.indexOfLatin1(byte[], byte[]):int (31 bytes)   relevance-based (relevance=1.000010, probability=0.010254, bonus=1.000000, nodes=22 <= 300.000000)
                            @ 4  java.lang.StringUTF16.checkBoundsBeginEnd(int, int, byte[]):void (10 bytes)   inline method (bytecode parsing)
                                          @ 1  java.nio.Buffer.flip():Buffer (20 bytes)   relevance-based (relevance=1.000000, probability=0.999609, bonus=1.000000, nodes=13 <= 300.000000)
                              @ 3  java.lang.StringUTF16.length(byte[]):int (5 bytes)   inline method (bytecode parsing)
                                        @ 4  java.nio.ByteBuffer.flip():ByteBuffer (7 bytes)   relevance-based (relevance=1.000000, probability=0.999609, bonus=1.000000, nodes=14 <= 300.000000)
                            @ 11  java.lang.String.checkBoundsBeginEnd(int, int, int):void (11 bytes)   inline method (bytecode parsing)
                              @ 6  jdk.internal.util.Preconditions.checkFromToIndex(int, int, int, BiFunction):int (24 bytes)   inline method (bytecode parsing)
                                        @ 114  java.nio.ByteBuffer.array():byte[] (35 bytes)   relevance-based (relevance=1.000000, probability=0.999609, bonus=1.000000, nodes=11 <= 300.000000)
                                        @ 121  java.nio.ByteBuffer.arrayOffset():int (35 bytes)   relevance-based (relevance=1.000000, probability=0.999609, bonus=1.000000, nodes=12 <= 300.000000)
                                              @ 6  jdk.internal.util.Preconditions.checkFromToIndex(int, int, int, BiFunction):int (24 bytes)   relevance-based (relevance=1.000000, probability=0.010254, bonus=1.000000, nodes=14 <= 300.000000)
                                            @ 6  java.lang.String.checkBoundsBeginEnd(int, int, int):void (11 bytes)   relevance-based (relevance=1.000010, probability=0.010254, bonus=1.000000, nodes=13 <= 300.000000)
                            @ 11  jdk.internal.misc.InternalLock.lock():void (8 bytes)   inline method (bytecode parsing)
                                          @ 178  java.lang.StringUTF16.indexOfLatin1(byte[], int, byte[], int, int):int (24 bytes)   relevance-based (relevance=1.000010, probability=0.010254, bonus=1.000000, nodes=24 <= 300.000000)
                              @ 4  java.util.concurrent.locks.ReentrantLock.lock():void (8 bytes)   inline method (bytecode parsing)
                            @ 25  jdk.internal.misc.InternalLock.unlock():void (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.util.concurrent.locks.ReentrantLock.unlock():void (10 bytes)   inline method (bytecode parsing)
                                        @ 151  java.lang.StringUTF16.replace(byte[], int, boolean, byte[], int, boolean, byte[], int, boolean):String (620 bytes)   not inlining relevance-based (relevance=28.000280, probability=0.020508, bonus=1.000000, nodes=311 > 300.000000)
                                @ 5  java.util.concurrent.locks.AbstractQueuedSynchronizer.release(int):boolean (19 bytes)   inline method (bytecode parsing)
                                      @ 79  java.lang.String.replace(CharSequence, CharSequence):String (258 bytes)   relevance-based (relevance=1.000010, probability=0.062500, bonus=1.000000, nodes=234 <= 300.000000)
                            @ 9  java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(int):void (20 bytes)   inline method (bytecode parsing)
                            @ 7  java.util.concurrent.locks.AbstractQueuedSynchronizer.compareAndSetState(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 15  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                            @ 21  java.util.concurrent.locks.AbstractOwnableSynchronizer.getExclusiveOwnerThread():Thread (5 bytes)   inline accessor method (bytecode parsing)
                            @ 29  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 51  java.util.concurrent.locks.AbstractQueuedSynchronizer.setState(int):void (6 bytes)   inline method (bytecode parsing)
                                            @ 1  java.util.concurrent.locks.ReentrantLock$NonfairSync.initialTryLock():boolean (58 bytes)   relevance-based (relevance=1.005231, probability=0.999609, bonus=1.000000, nodes=40 <= 300.000000)
                                    @ 37  jdk.graal.compiler.hotspot.HotSpotTTYStreamProvider$LogStreamOptionKey.makeFilename(String):String (157 bytes)   not inlining relevance-based (relevance=2.000000, probability=0.125000, bonus=1.000000, nodes=520 > 300.000000)
                            @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 10  java.util.concurrent.locks.AbstractQueuedSynchronizer.compareAndSetState(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 20  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                                            @ 2  java.util.concurrent.locks.ReentrantLock$NonfairSync.tryAcquire(int):boolean (27 bytes)   not inlining relevance-based (relevance=0.005049, probability=0.004462, bonus=1.000000, nodes=36 > 1.514719)
                                      @ 17  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=0.398774, probability=0.035578, bonus=1.000000, nodes=9)
                            @ 108  java.util.concurrent.locks.AbstractQueuedSynchronizer.tryAcquireShared(int):int (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.lang.UnsupportedOperationException.<init>():void (5 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.RuntimeException.<init>():void (5 bytes)   inline method (bytecode parsing)
                                  @ 1  java.lang.Exception.<init>():void (5 bytes)   inline method (bytecode parsing)
                            @ 245  java.util.concurrent.locks.AbstractQueuedSynchronizer$ExclusiveNode.<init>():void (5 bytes)   inline method (bytecode parsing)
                              @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer$Node.<init>():void (5 bytes)   inline method (bytecode parsing)
                                      @ 27  java.lang.StringLatin1.hashCode(byte[]):int (52 bytes)   relevance-based (relevance=0.398774, probability=0.035578, bonus=1.000000, nodes=22 <= 119.632312)
                            @ 290  java.util.concurrent.locks.AbstractQueuedSynchronizer$Node.setPrevRelaxed(AbstractQueuedSynchronizer$Node):void (12 bytes)   inline method (bytecode parsing)
                                    @ 49  java.lang.String.hashCode():int (60 bytes)   relevance-based (relevance=2.000000, probability=0.125000, bonus=1.000000, nodes=47 <= 300.000000)
                                  @ 1  jdk.graal.compiler.hotspot.HotSpotTTYStreamProvider$LogStreamOptionKey$DelayedOutputStream.lazy():OutputStream (266 bytes)   not inlining relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=307 > 300.000000)
                            @ 393  java.lang.Thread.interrupted():boolean (7 bytes)   inline method (bytecode parsing)
                                @ 4  java.io.OutputStream.flush():void (1 bytes)   not inlining no type profile exists
                                @ 8  jdk.graal.compiler.hotspot.HotSpotTTYStreamProvider$LogStreamOptionKey$DelayedOutputStream.flush():void (8 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=10 <= 300.000000)
                              @ 15  java.io.PrintStream.implFlush():void (21 bytes)   relevance-based (relevance=1.131007, probability=1.000000, bonus=1.000000, nodes=23 <= 300.000000)
                            @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 8  java.util.concurrent.locks.AbstractOwnableSynchronizer.getExclusiveOwnerThread():Thread (5 bytes)   inline accessor method (bytecode parsing)
                            @ 41  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                            @ 46  java.util.concurrent.locks.AbstractQueuedSynchronizer.setState(int):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  java.util.concurrent.locks.ReentrantLock$Sync.tryRelease(int):boolean (51 bytes)   relevance-based (relevance=1.131007, probability=1.000000, bonus=1.000000, nodes=37 <= 300.000000)
                            @ 22  java.util.concurrent.locks.AbstractQueuedSynchronizer$Node.getAndUnsetStatus(int):int (14 bytes)   inline method (bytecode parsing)
                                            @ 15  java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer$Node, int, boolean, boolean, boolean, long):int (424 bytes)   not inlining relevance-based (relevance=0.002525, probability=0.002231, bonus=1.000000, nodes=226 > 0.757359)
                                          @ 4  java.util.concurrent.locks.ReentrantLock$Sync.lock():void (13 bytes)   relevance-based (relevance=1.139625, probability=0.999609, bonus=1.000000, nodes=57 <= 300.000000)
                              @ 10  jdk.internal.misc.Unsafe.getAndBitwiseAndInt(Object, long, int):int (27 bytes)   inline method (bytecode parsing)
                            @ 5  java.lang.Thread.isVirtual():boolean (5 bytes)   inline method (bytecode parsing)
                                            @ 1  java.io.PrintStream.ensureOpen():void (18 bytes)   trivial (relevance=1.013927, probability=0.999609, bonus=1.000000, nodes=7)
                                @ 30  java.util.concurrent.locks.LockSupport.unpark(Thread):void (26 bytes)   not inlining relevance-based (relevance=0.006467, probability=0.004165, bonus=1.000000, nodes=23 > 1.940101)
                              @ 12  java.util.concurrent.locks.AbstractQueuedSynchronizer.signalNext(AbstractQueuedSynchronizer$Node):void (34 bytes)   relevance-based (relevance=0.993098, probability=0.878065, bonus=1.000000, nodes=56 <= 297.929287)
                            @ 11  jdk.internal.misc.InternalLock.lock():void (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.util.concurrent.locks.ReentrantLock.lock():void (8 bytes)   inline method (bytecode parsing)
                            @ 25  jdk.internal.misc.InternalLock.unlock():void (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.util.concurrent.locks.ReentrantLock.unlock():void (10 bytes)   inline method (bytecode parsing)
                                @ 5  java.util.concurrent.locks.AbstractQueuedSynchronizer.release(int):boolean (19 bytes)   inline method (bytecode parsing)
                            @ 9  java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(int):void (20 bytes)   inline method (bytecode parsing)
                                              @ 4  java.util.concurrent.locks.ReentrantLock$Sync.lock():void (13 bytes)   not inlining relevance-based (relevance=0.016093, probability=0.006865, bonus=1.000000, nodes=31 > 4.827854)
                                              @ 18  java.io.BufferedOutputStream.implWrite(byte[], int, int):void (71 bytes)   not inlining relevance-based (relevance=0.016093, probability=0.006865, bonus=1.000000, nodes=55 > 4.827854)
                            @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 8  java.util.concurrent.locks.AbstractOwnableSynchronizer.getExclusiveOwnerThread():Thread (5 bytes)   inline accessor method (bytecode parsing)
                            @ 41  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                            @ 46  java.util.concurrent.locks.AbstractQueuedSynchronizer.setState(int):void (6 bytes)   inline method (bytecode parsing)
                                              @ 2  java.util.concurrent.locks.ReentrantLock$Sync.tryRelease(int):boolean (51 bytes)   not inlining relevance-based (relevance=0.016093, probability=0.006865, bonus=1.000000, nodes=37 > 4.827854)
                            @ 22  java.util.concurrent.locks.AbstractQueuedSynchronizer$Node.getAndUnsetStatus(int):int (14 bytes)   inline method (bytecode parsing)
                              @ 10  jdk.internal.misc.Unsafe.getAndBitwiseAndInt(Object, long, int):int (27 bytes)   inline method (bytecode parsing)
                                              @ 12  java.util.concurrent.locks.AbstractQueuedSynchronizer.signalNext(AbstractQueuedSynchronizer$Node):void (34 bytes)   not inlining relevance-based (relevance=0.014121, probability=0.006024, bonus=1.000000, nodes=56 > 4.236353)
                                              @ 55  java.io.BufferedOutputStream.implWrite(byte[], int, int):void (71 bytes)   not inlining relevance-based (relevance=0.016093, probability=0.006865, bonus=1.000000, nodes=55 > 4.827854)
                            @ 157  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  jdk.graal.compiler.hotspot.HotSpotTTYStreamProvider$LogStreamOptionKey$DelayedOutputStream$$Lambda/0x00007f8674264b28.<init>(String):void (10 bytes)   inline method (bytecode parsing)
                            @ 210  jdk.vm.ci.hotspot.HotSpotJVMCIRuntime.getLogStream():OutputStream (9 bytes)   inline method (bytecode parsing)
                            @ 0  jdk.graal.compiler.options.OptionValues.newOptionMap():EconomicMap (7 bytes)   inline method (bytecode parsing)
                              @ 3  org.graalvm.collections.EconomicMap.create(Equivalence):EconomicMap (6 bytes)   inline method (bytecode parsing)
                                @ 2  org.graalvm.collections.EconomicMapImpl.create(Equivalence, boolean):EconomicMapImpl (13 bytes)   inline method (bytecode parsing)
                                  @ 6  org.graalvm.collections.EconomicMapImpl.<init>(Equivalence, boolean):void (30 bytes)   inline method (bytecode parsing)
                                  @ 9  org.graalvm.collections.EconomicMapImpl.intercept(EconomicMapImpl):EconomicMapImpl (2 bytes)   inline method (bytecode parsing)
                            @ 6  jdk.vm.ci.common.InitTimer.timer(String):InitTimer (19 bytes)   inline method (bytecode parsing)
                            @ 239  org.graalvm.collections.EconomicMap.create():EconomicMap (7 bytes)   inline method (bytecode parsing)
                              @ 3  org.graalvm.collections.EconomicMap.create(Equivalence):EconomicMap (6 bytes)   inline method (bytecode parsing)
                                @ 2  org.graalvm.collections.EconomicMapImpl.create(Equivalence, boolean):EconomicMapImpl (13 bytes)   inline method (bytecode parsing)
                                  @ 6  org.graalvm.collections.EconomicMapImpl.<init>(Equivalence, boolean):void (30 bytes)   inline method (bytecode parsing)
                                  @ 9  org.graalvm.collections.EconomicMapImpl.intercept(EconomicMapImpl):EconomicMapImpl (2 bytes)   inline method (bytecode parsing)
                            @ 295  java.lang.String.startsWith(String):boolean (7 bytes)   inline method (bytecode parsing)
                            @ 305  java.lang.String.length():int (11 bytes)   inline method (bytecode parsing)
                              @ 6  java.lang.String.coder():byte (15 bytes)   inline method (bytecode parsing)
                            @ 308  java.lang.String.substring(int):String (10 bytes)   inline method (bytecode parsing)
                            @ 311  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.LambdaForm$MH/0x00007f8674002400.invoke(Object, Object):Object (25 bytes)   inline method (bytecode parsing)
                                @ 21  java.lang.invoke.DirectMethodHandle$Holder.invokeStatic(Object, Object, Object):Object (15 bytes)   inline method (bytecode parsing)
                                  @ 1  java.lang.invoke.DirectMethodHandle.internalMemberName(Object):Object (8 bytes)   inline method (bytecode parsing)
                                  @ 11  java.lang.StringConcatHelper.simpleConcat(Object, Object):String (94 bytes)   inline method (bytecode parsing)
                                    @ 1  java.lang.StringConcatHelper.stringOf(Object):String (20 bytes)   inline method (bytecode parsing)
                                      @ 5  java.lang.String.toString():String (2 bytes)   inline method (bytecode parsing)
                                    @ 11  java.lang.String.isEmpty():boolean (14 bytes)   inline method (bytecode parsing)
                                    @ 61  java.lang.StringConcatHelper.newArray(long):byte[] (40 bytes)   inline method (bytecode parsing)
                            @ 322  java.lang.String.startsWith(String):boolean (7 bytes)   inline method (bytecode parsing)
                            @ 359  java.lang.String.length():int (11 bytes)   inline method (bytecode parsing)
                              @ 6  java.lang.String.coder():byte (15 bytes)   inline method (bytecode parsing)
                            @ 362  java.lang.String.substring(int):String (10 bytes)   inline method (bytecode parsing)
                            @ 8  jdk.vm.ci.services.Services.getSavedProperty(String):String (13 bytes)   inline method (bytecode parsing)
                            @ 11  java.lang.Boolean.parseBoolean(String):boolean (7 bytes)   inline method (bytecode parsing)
                            @ 24  java.util.concurrent.atomic.AtomicInteger.<init>():void (5 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.Number.<init>():void (5 bytes)   inline method (bytecode parsing)
                                                          @ 0  jdk.vm.ci.services.Services.checkJVMCIEnabled():void (17 bytes)   trivial (relevance=4.000000, probability=0.030809, bonus=1.000000, nodes=3)
                                                            @ 0  java.lang.System.allowSecurityManager():boolean (13 bytes)   trivial (relevance=1.000883, probability=0.007702, bonus=1.000000, nodes=8)
                                                          @ 42  java.lang.System.getSecurityManager():SecurityManager (12 bytes)   relevance-based (relevance=1.000000, probability=0.007702, bonus=1.000000, nodes=14 <= 300.000000)
                            @ 12  java.lang.IllegalStateException.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  java.lang.RuntimeException.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                                @ 2  java.lang.Exception.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                            @ 12  java.lang.NullPointerException.<init>():void (5 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.RuntimeException.<init>():void (5 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.Exception.<init>():void (5 bytes)   inline method (bytecode parsing)
                            @ 81  java.lang.Integer.rotateLeft(int, int):int (9 bytes)   inline method (bytecode parsing)
                            @ 142  java.lang.Integer.rotateLeft(int, int):int (9 bytes)   inline method (bytecode parsing)
                 n                                                @ 25  java.lang.NullPointerException.getExtendedNPEMessage():String (0 bytes)   not inlining it is a non-intrinsic native method
                            @ 187  java.lang.Integer.rotateLeft(int, int):int (9 bytes)   inline method (bytecode parsing)
                            @ 217  java.lang.Integer.rotateLeft(int, int):int (9 bytes)   inline method (bytecode parsing)
                 n                                                  @ 16  java.lang.Throwable.fillInStackTrace(int):Throwable (0 bytes)   not inlining it is a non-intrinsic native method
                            @ 257  java.lang.Integer.rotateLeft(int, int):int (9 bytes)   inline method (bytecode parsing)
              s                                                     @ 37  java.lang.Throwable.fillInStackTrace():Throwable (29 bytes)   relevance-based (relevance=4.000000, probability=0.000963, bonus=1.000000, nodes=34 <= 300.000000)
                            @ 287  java.lang.Integer.rotateLeft(int, int):int (9 bytes)   inline method (bytecode parsing)
                            @ 336  java.lang.Integer.rotateLeft(int, int):int (9 bytes)   inline method (bytecode parsing)
              s                                                   @ 24  java.lang.NullPointerException.fillInStackTrace():Throwable (41 bytes)   relevance-based (relevance=1.000000, probability=0.000963, bonus=1.000000, nodes=65 <= 300.000000)
                            @ 366  java.lang.Integer.rotateLeft(int, int):int (9 bytes)   inline method (bytecode parsing)
                            @ 406  java.lang.Integer.rotateLeft(int, int):int (9 bytes)   inline method (bytecode parsing)
                                                                @ 1  java.lang.Throwable.<init>():void (29 bytes)   relevance-based (relevance=1.000000, probability=0.000963, bonus=1.000000, nodes=73 <= 300.000000)
                                                              @ 18  java.util.Collections$UnmodifiableMap.<init>(Map):void (22 bytes)   relevance-based (relevance=1.000000, probability=0.001926, bonus=1.000000, nodes=87 <= 300.000000)
                                                            @ 19  java.util.Collections.unmodifiableMap(Map):Map (22 bytes)   relevance-based (relevance=1.000000, probability=0.003851, bonus=1.000000, nodes=95 <= 300.000000)
                            @ 7  java.lang.invoke.VarHandleGuards.guard_LI_I(VarHandle, Object, int, VarHandle$AccessDescriptor):int (78 bytes)   inline method (bytecode parsing)
                              @ 2  java.lang.invoke.VarHandle.checkAccessModeThenIsDirect(VarHandle$AccessDescriptor):boolean (29 bytes)   inline method (bytecode parsing)
                                @ 12  java.lang.invoke.VarHandle.accessModeType(int):MethodType (41 bytes)   inline method (bytecode parsing)
                 n                                            @ 16  java.lang.Throwable.fillInStackTrace(int):Throwable (0 bytes)   not inlining it is a non-intrinsic native method
              s                                               @ 24  java.lang.Throwable.fillInStackTrace():Throwable (29 bytes)   relevance-based (relevance=1.000000, probability=0.003851, bonus=1.000000, nodes=34 <= 300.000000)
                              @ 42  java.lang.invoke.VarForm.getMemberName(int):MemberName (31 bytes)   inline method (bytecode parsing)
                                                            @ 2  java.lang.Throwable.<init>(String):void (34 bytes)   relevance-based (relevance=16.000000, probability=0.003851, bonus=1.000000, nodes=45 <= 300.000000)
                              @ 45  java.lang.invoke.VarHandleByteArrayAsInts$ArrayHandle.get(VarHandle, Object, int):int (36 bytes)   inline method (bytecode parsing)
                                                          @ 61  jdk.internal.misc.VM.getSavedProperties():Map (23 bytes)   relevance-based (relevance=1.000883, probability=0.007702, bonus=1.000000, nodes=147 <= 300.000000)
                                @ 19  java.lang.invoke.VarHandleByteArrayAsInts$ArrayHandle.index(byte[], int):int (12 bytes)   inline method (bytecode parsing)
                                @ 32  jdk.internal.misc.Unsafe.getIntUnaligned(Object, long, boolean):int (12 bytes)   inline method (bytecode parsing)
                                  @ 8  jdk.internal.misc.Unsafe.convEndian(boolean, int):int (16 bytes)   inline method (bytecode parsing)
                                                        @ 0  jdk.vm.ci.services.Services.getSavedProperties():Map (81 bytes)   relevance-based (relevance=1.000000, probability=0.030809, bonus=1.000000, nodes=201 <= 300.000000)
                            @ 20  java.lang.invoke.VarHandleGuards.guard_LI_I(VarHandle, Object, int, VarHandle$AccessDescriptor):int (78 bytes)   inline method (bytecode parsing)
                              @ 2  java.lang.invoke.VarHandle.checkAccessModeThenIsDirect(VarHandle$AccessDescriptor):boolean (29 bytes)   inline method (bytecode parsing)
                                @ 12  java.lang.invoke.VarHandle.accessModeType(int):MethodType (41 bytes)   inline method (bytecode parsing)
                              @ 42  java.lang.invoke.VarForm.getMemberName(int):MemberName (31 bytes)   inline method (bytecode parsing)
                                                      @ 4  java.util.Map.get(Object):Object (0 bytes)   not inlining no type profile exists
                              @ 45  java.lang.invoke.VarHandleByteArrayAsInts$ArrayHandle.get(VarHandle, Object, int):int (36 bytes)   inline method (bytecode parsing)
                                @ 19  java.lang.invoke.VarHandleByteArrayAsInts$ArrayHandle.index(byte[], int):int (12 bytes)   inline method (bytecode parsing)
                                @ 32  jdk.internal.misc.Unsafe.getIntUnaligned(Object, long, boolean):int (12 bytes)   inline method (bytecode parsing)
                                  @ 8  jdk.internal.misc.Unsafe.convEndian(boolean, int):int (16 bytes)   inline method (bytecode parsing)
                            @ 34  java.lang.invoke.VarHandleGuards.guard_LI_I(VarHandle, Object, int, VarHandle$AccessDescriptor):int (78 bytes)   inline method (bytecode parsing)
                              @ 2  java.lang.invoke.VarHandle.checkAccessModeThenIsDirect(VarHandle$AccessDescriptor):boolean (29 bytes)   inline method (bytecode parsing)
                                                            @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.006499, bonus=1.000000, nodes=5)
                                                          @ 14  java.lang.String.length():int (11 bytes)   trivial (relevance=2.000000, probability=0.006499, bonus=1.000000, nodes=8)
                                @ 12  java.lang.invoke.VarHandle.accessModeType(int):MethodType (41 bytes)   inline method (bytecode parsing)
                              @ 42  java.lang.invoke.VarForm.getMemberName(int):MemberName (31 bytes)   inline method (bytecode parsing)
                              @ 45  java.lang.invoke.VarHandleByteArrayAsInts$ArrayHandle.get(VarHandle, Object, int):int (36 bytes)   inline method (bytecode parsing)
                                                            @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.006499, bonus=1.000000, nodes=5)
                                @ 19  java.lang.invoke.VarHandleByteArrayAsInts$ArrayHandle.index(byte[], int):int (12 bytes)   inline method (bytecode parsing)
                                                          @ 18  java.lang.String.length():int (11 bytes)   trivial (relevance=2.000000, probability=0.006499, bonus=1.000000, nodes=5)
                                @ 32  jdk.internal.misc.Unsafe.getIntUnaligned(Object, long, boolean):int (12 bytes)   inline method (bytecode parsing)
                                  @ 8  jdk.internal.misc.Unsafe.convEndian(boolean, int):int (16 bytes)   inline method (bytecode parsing)
                            @ 48  java.lang.invoke.VarHandleGuards.guard_LI_I(VarHandle, Object, int, VarHandle$AccessDescriptor):int (78 bytes)   inline method (bytecode parsing)
                                                            @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.003249, bonus=1.000000, nodes=5)
                              @ 2  java.lang.invoke.VarHandle.checkAccessModeThenIsDirect(VarHandle$AccessDescriptor):boolean (29 bytes)   inline method (bytecode parsing)
                                                          @ 30  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000000, probability=0.003249, bonus=1.000000, nodes=5)
                                @ 12  java.lang.invoke.VarHandle.accessModeType(int):MethodType (41 bytes)   inline method (bytecode parsing)
                              @ 42  java.lang.invoke.VarForm.getMemberName(int):MemberName (31 bytes)   inline method (bytecode parsing)
                              @ 45  java.lang.invoke.VarHandleByteArrayAsInts$ArrayHandle.get(VarHandle, Object, int):int (36 bytes)   inline method (bytecode parsing)
                            @ 146  java.lang.StringUTF16.regionMatchesCI_Latin1(byte[], int, byte[], int, int):boolean (10 bytes)   inline method (bytecode parsing)
                                @ 19  java.lang.invoke.VarHandleByteArrayAsInts$ArrayHandle.index(byte[], int):int (12 bytes)   inline method (bytecode parsing)
                                @ 32  jdk.internal.misc.Unsafe.getIntUnaligned(Object, long, boolean):int (12 bytes)   inline method (bytecode parsing)
                                  @ 8  jdk.internal.misc.Unsafe.convEndian(boolean, int):int (16 bytes)   inline method (bytecode parsing)
                            @ 62  java.lang.invoke.VarHandleGuards.guard_LI_I(VarHandle, Object, int, VarHandle$AccessDescriptor):int (78 bytes)   inline method (bytecode parsing)
                              @ 2  java.lang.invoke.VarHandle.checkAccessModeThenIsDirect(VarHandle$AccessDescriptor):boolean (29 bytes)   inline method (bytecode parsing)
                                @ 12  java.lang.invoke.VarHandle.accessModeType(int):MethodType (41 bytes)   inline method (bytecode parsing)
                                                              @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.003249, bonus=1.000000, nodes=5)
                              @ 42  java.lang.invoke.VarForm.getMemberName(int):MemberName (31 bytes)   inline method (bytecode parsing)
                                                            @ 27  java.lang.String.length():int (11 bytes)   trivial (relevance=16.000000, probability=0.003249, bonus=1.000000, nodes=5)
                              @ 45  java.lang.invoke.VarHandleByteArrayAsInts$ArrayHandle.get(VarHandle, Object, int):int (36 bytes)   inline method (bytecode parsing)
                                @ 19  java.lang.invoke.VarHandleByteArrayAsInts$ArrayHandle.index(byte[], int):int (12 bytes)   inline method (bytecode parsing)
                                @ 32  jdk.internal.misc.Unsafe.getIntUnaligned(Object, long, boolean):int (12 bytes)   inline method (bytecode parsing)
                                                              @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.003249, bonus=1.000000, nodes=5)
                                  @ 8  jdk.internal.misc.Unsafe.convEndian(boolean, int):int (16 bytes)   inline method (bytecode parsing)
                                                            @ 43  java.lang.String.length():int (11 bytes)   trivial (relevance=16.000000, probability=0.003249, bonus=1.000000, nodes=8)
                            @ 76  java.lang.invoke.VarHandleGuards.guard_LI_I(VarHandle, Object, int, VarHandle$AccessDescriptor):int (78 bytes)   inline method (bytecode parsing)
                              @ 2  java.lang.invoke.VarHandle.checkAccessModeThenIsDirect(VarHandle$AccessDescriptor):boolean (29 bytes)   inline method (bytecode parsing)
                                                            @ 70  java.lang.String.coder():byte (15 bytes)   trivial (relevance=4.000000, probability=0.000812, bonus=1.000000, nodes=5)
                                @ 12  java.lang.invoke.VarHandle.accessModeType(int):MethodType (41 bytes)   inline method (bytecode parsing)
                              @ 42  java.lang.invoke.VarForm.getMemberName(int):MemberName (31 bytes)   inline method (bytecode parsing)
                                                            @ 78  java.lang.String.coder():byte (15 bytes)   trivial (relevance=2.000000, probability=0.000812, bonus=1.000000, nodes=5)
                              @ 45  java.lang.invoke.VarHandleByteArrayAsInts$ArrayHandle.get(VarHandle, Object, int):int (36 bytes)   inline method (bytecode parsing)
                                @ 19  java.lang.invoke.VarHandleByteArrayAsInts$ArrayHandle.index(byte[], int):int (12 bytes)   inline method (bytecode parsing)
                                @ 32  jdk.internal.misc.Unsafe.getIntUnaligned(Object, long, boolean):int (12 bytes)   inline method (bytecode parsing)
                            @ 58  java.lang.Character.toUpperCase(char):char (6 bytes)   inline method (bytecode parsing)
                                  @ 8  jdk.internal.misc.Unsafe.convEndian(boolean, int):int (16 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.Character.toUpperCase(int):int (9 bytes)   inline method (bytecode parsing)
                            @ 91  java.lang.invoke.VarHandleGuards.guard_LI_I(VarHandle, Object, int, VarHandle$AccessDescriptor):int (78 bytes)   inline method (bytecode parsing)
                            @ 75  java.lang.Character.toLowerCase(char):char (6 bytes)   inline method (bytecode parsing)
                              @ 2  java.lang.invoke.VarHandle.checkAccessModeThenIsDirect(VarHandle$AccessDescriptor):boolean (29 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.Character.toLowerCase(int):int (9 bytes)   inline method (bytecode parsing)
                                @ 12  java.lang.invoke.VarHandle.accessModeType(int):MethodType (41 bytes)   inline method (bytecode parsing)
                            @ 80  java.lang.Character.toLowerCase(char):char (6 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.Character.toLowerCase(int):int (9 bytes)   inline method (bytecode parsing)
                              @ 42  java.lang.invoke.VarForm.getMemberName(int):MemberName (31 bytes)   inline method (bytecode parsing)
                              @ 45  java.lang.invoke.VarHandleByteArrayAsInts$ArrayHandle.get(VarHandle, Object, int):int (36 bytes)   inline method (bytecode parsing)
                                @ 19  java.lang.invoke.VarHandleByteArrayAsInts$ArrayHandle.index(byte[], int):int (12 bytes)   inline method (bytecode parsing)
                                @ 32  jdk.internal.misc.Unsafe.getIntUnaligned(Object, long, boolean):int (12 bytes)   inline method (bytecode parsing)
                                  @ 8  jdk.internal.misc.Unsafe.convEndian(boolean, int):int (16 bytes)   inline method (bytecode parsing)
                                                              @ 50  java.lang.CharacterDataLatin1.toUpperCase(int):int (67 bytes)   relevance-based (relevance=4.000000, probability=0.000181, bonus=1.000000, nodes=52 <= 300.000000)
                            @ 106  java.lang.invoke.VarHandleGuards.guard_LI_I(VarHandle, Object, int, VarHandle$AccessDescriptor):int (78 bytes)   inline method (bytecode parsing)
                              @ 2  java.lang.invoke.VarHandle.checkAccessModeThenIsDirect(VarHandle$AccessDescriptor):boolean (29 bytes)   inline method (bytecode parsing)
                                @ 12  java.lang.invoke.VarHandle.accessModeType(int):MethodType (41 bytes)   inline method (bytecode parsing)
                              @ 42  java.lang.invoke.VarForm.getMemberName(int):MemberName (31 bytes)   inline method (bytecode parsing)
                              @ 45  java.lang.invoke.VarHandleByteArrayAsInts$ArrayHandle.get(VarHandle, Object, int):int (36 bytes)   inline method (bytecode parsing)
                                @ 19  java.lang.invoke.VarHandleByteArrayAsInts$ArrayHandle.index(byte[], int):int (12 bytes)   inline method (bytecode parsing)
                                                              @ 1  java.lang.CharacterData.of(int):CharacterData (136 bytes)   trivial (relevance=32.000000, probability=0.000181, bonus=1.000000, nodes=8)
                                @ 32  jdk.internal.misc.Unsafe.getIntUnaligned(Object, long, boolean):int (12 bytes)   inline method (bytecode parsing)
                                  @ 8  jdk.internal.misc.Unsafe.convEndian(boolean, int):int (16 bytes)   inline method (bytecode parsing)
                            @ 121  java.lang.invoke.VarHandleGuards.guard_LI_I(VarHandle, Object, int, VarHandle$AccessDescriptor):int (78 bytes)   inline method (bytecode parsing)
                              @ 2  java.lang.invoke.VarHandle.checkAccessModeThenIsDirect(VarHandle$AccessDescriptor):boolean (29 bytes)   inline method (bytecode parsing)
                                                              @ 5  java.lang.CharacterDataLatin1.toUpperCase(int):int (67 bytes)   relevance-based (relevance=32.000000, probability=0.000181, bonus=1.000000, nodes=52 <= 300.000000)
                                @ 12  java.lang.invoke.VarHandle.accessModeType(int):MethodType (41 bytes)   inline method (bytecode parsing)
                              @ 42  java.lang.invoke.VarForm.getMemberName(int):MemberName (31 bytes)   inline method (bytecode parsing)
                              @ 45  java.lang.invoke.VarHandleByteArrayAsInts$ArrayHandle.get(VarHandle, Object, int):int (36 bytes)   inline method (bytecode parsing)
                                @ 19  java.lang.invoke.VarHandleByteArrayAsInts$ArrayHandle.index(byte[], int):int (12 bytes)   inline method (bytecode parsing)
                                                              @ 1  java.lang.CharacterData.of(int):CharacterData (136 bytes)   trivial (relevance=16.000000, probability=0.000090, bonus=1.000000, nodes=8)
                                @ 32  jdk.internal.misc.Unsafe.getIntUnaligned(Object, long, boolean):int (12 bytes)   inline method (bytecode parsing)
                                  @ 8  jdk.internal.misc.Unsafe.convEndian(boolean, int):int (16 bytes)   inline method (bytecode parsing)
                            @ 136  java.lang.invoke.VarHandleGuards.guard_LI_I(VarHandle, Object, int, VarHandle$AccessDescriptor):int (78 bytes)   inline method (bytecode parsing)
                              @ 2  java.lang.invoke.VarHandle.checkAccessModeThenIsDirect(VarHandle$AccessDescriptor):boolean (29 bytes)   inline method (bytecode parsing)
                                @ 12  java.lang.invoke.VarHandle.accessModeType(int):MethodType (41 bytes)   inline method (bytecode parsing)
                                                              @ 5  java.lang.CharacterDataLatin1.toLowerCase(int):int (44 bytes)   relevance-based (relevance=16.000000, probability=0.000090, bonus=1.000000, nodes=38 <= 300.000000)
                              @ 42  java.lang.invoke.VarForm.getMemberName(int):MemberName (31 bytes)   inline method (bytecode parsing)
                              @ 45  java.lang.invoke.VarHandleByteArrayAsInts$ArrayHandle.get(VarHandle, Object, int):int (36 bytes)   inline method (bytecode parsing)
                                @ 19  java.lang.invoke.VarHandleByteArrayAsInts$ArrayHandle.index(byte[], int):int (12 bytes)   inline method (bytecode parsing)
                                @ 32  jdk.internal.misc.Unsafe.getIntUnaligned(Object, long, boolean):int (12 bytes)   inline method (bytecode parsing)
                                                              @ 1  java.lang.CharacterData.of(int):CharacterData (136 bytes)   trivial (relevance=16.000000, probability=0.000090, bonus=1.000000, nodes=8)
                                  @ 8  jdk.internal.misc.Unsafe.convEndian(boolean, int):int (16 bytes)   inline method (bytecode parsing)
                            @ 151  java.lang.invoke.VarHandleGuards.guard_LI_I(VarHandle, Object, int, VarHandle$AccessDescriptor):int (78 bytes)   inline method (bytecode parsing)
                              @ 2  java.lang.invoke.VarHandle.checkAccessModeThenIsDirect(VarHandle$AccessDescriptor):boolean (29 bytes)   inline method (bytecode parsing)
                                @ 12  java.lang.invoke.VarHandle.accessModeType(int):MethodType (41 bytes)   inline method (bytecode parsing)
                                                              @ 5  java.lang.CharacterDataLatin1.toLowerCase(int):int (44 bytes)   relevance-based (relevance=16.000000, probability=0.000090, bonus=1.000000, nodes=38 <= 300.000000)
                              @ 42  java.lang.invoke.VarForm.getMemberName(int):MemberName (31 bytes)   inline method (bytecode parsing)
                              @ 45  java.lang.invoke.VarHandleByteArrayAsInts$ArrayHandle.get(VarHandle, Object, int):int (36 bytes)   inline method (bytecode parsing)
                                @ 19  java.lang.invoke.VarHandleByteArrayAsInts$ArrayHandle.index(byte[], int):int (12 bytes)   inline method (bytecode parsing)
                                                            @ 131  java.lang.StringLatin1.regionMatchesCI_UTF16(byte[], int, byte[], int, int):boolean (93 bytes)   relevance-based (relevance=1.000000, probability=0.000406, bonus=1.000000, nodes=206 <= 300.000000)
                                @ 32  jdk.internal.misc.Unsafe.getIntUnaligned(Object, long, boolean):int (12 bytes)   inline method (bytecode parsing)
                                  @ 8  jdk.internal.misc.Unsafe.convEndian(boolean, int):int (16 bytes)   inline method (bytecode parsing)
                            @ 166  java.lang.invoke.VarHandleGuards.guard_LI_I(VarHandle, Object, int, VarHandle$AccessDescriptor):int (78 bytes)   inline method (bytecode parsing)
                              @ 2  java.lang.invoke.VarHandle.checkAccessModeThenIsDirect(VarHandle$AccessDescriptor):boolean (29 bytes)   inline method (bytecode parsing)
                                @ 12  java.lang.invoke.VarHandle.accessModeType(int):MethodType (41 bytes)   inline method (bytecode parsing)
                              @ 42  java.lang.invoke.VarForm.getMemberName(int):MemberName (31 bytes)   inline method (bytecode parsing)
                              @ 45  java.lang.invoke.VarHandleByteArrayAsInts$ArrayHandle.get(VarHandle, Object, int):int (36 bytes)   inline method (bytecode parsing)
                                @ 19  java.lang.invoke.VarHandleByteArrayAsInts$ArrayHandle.index(byte[], int):int (12 bytes)   inline method (bytecode parsing)
                                @ 32  jdk.internal.misc.Unsafe.getIntUnaligned(Object, long, boolean):int (12 bytes)   inline method (bytecode parsing)
                                  @ 8  jdk.internal.misc.Unsafe.convEndian(boolean, int):int (16 bytes)   inline method (bytecode parsing)
                            @ 181  java.lang.invoke.VarHandleGuards.guard_LI_I(VarHandle, Object, int, VarHandle$AccessDescriptor):int (78 bytes)   inline method (bytecode parsing)
                              @ 2  java.lang.invoke.VarHandle.checkAccessModeThenIsDirect(VarHandle$AccessDescriptor):boolean (29 bytes)   inline method (bytecode parsing)
                                @ 12  java.lang.invoke.VarHandle.accessModeType(int):MethodType (41 bytes)   inline method (bytecode parsing)
                                                              @ 32  java.lang.CharacterDataLatin1.equalsIgnoreCase(byte, byte):boolean (63 bytes)   relevance-based (relevance=2.000000, probability=0.000271, bonus=1.000000, nodes=42 <= 300.000000)
                              @ 42  java.lang.invoke.VarForm.getMemberName(int):MemberName (31 bytes)   inline method (bytecode parsing)
                              @ 45  java.lang.invoke.VarHandleByteArrayAsInts$ArrayHandle.get(VarHandle, Object, int):int (36 bytes)   inline method (bytecode parsing)
                                                            @ 98  java.lang.StringLatin1.regionMatchesCI(byte[], int, byte[], int, int):boolean (45 bytes)   relevance-based (relevance=1.000000, probability=0.000406, bonus=1.000000, nodes=64 <= 300.000000)
                                @ 19  java.lang.invoke.VarHandleByteArrayAsInts$ArrayHandle.index(byte[], int):int (12 bytes)   inline method (bytecode parsing)
                                @ 32  jdk.internal.misc.Unsafe.getIntUnaligned(Object, long, boolean):int (12 bytes)   inline method (bytecode parsing)
                                  @ 8  jdk.internal.misc.Unsafe.convEndian(boolean, int):int (16 bytes)   inline method (bytecode parsing)
                                                          @ 33  java.lang.String.regionMatches(boolean, int, String, int, int):boolean (150 bytes)   relevance-based (relevance=1.000000, probability=0.003249, bonus=1.000000, nodes=285 <= 300.000000)
                            @ 196  java.lang.invoke.VarHandleGuards.guard_LI_I(VarHandle, Object, int, VarHandle$AccessDescriptor):int (78 bytes)   inline method (bytecode parsing)
                              @ 2  java.lang.invoke.VarHandle.checkAccessModeThenIsDirect(VarHandle$AccessDescriptor):boolean (29 bytes)   inline method (bytecode parsing)
                                @ 12  java.lang.invoke.VarHandle.accessModeType(int):MethodType (41 bytes)   inline method (bytecode parsing)
                              @ 42  java.lang.invoke.VarForm.getMemberName(int):MemberName (31 bytes)   inline method (bytecode parsing)
                              @ 45  java.lang.invoke.VarHandleByteArrayAsInts$ArrayHandle.get(VarHandle, Object, int):int (36 bytes)   inline method (bytecode parsing)
                                @ 19  java.lang.invoke.VarHandleByteArrayAsInts$ArrayHandle.index(byte[], int):int (12 bytes)   inline method (bytecode parsing)
                                @ 32  jdk.internal.misc.Unsafe.getIntUnaligned(Object, long, boolean):int (12 bytes)   inline method (bytecode parsing)
                                  @ 8  jdk.internal.misc.Unsafe.convEndian(boolean, int):int (16 bytes)   inline method (bytecode parsing)
                                                        @ 3  java.lang.String.equalsIgnoreCase(String):boolean (45 bytes)   not inlining relevance-based (relevance=3.377981, probability=0.025995, bonus=1.000000, nodes=302 > 300.000000)
                            @ 211  java.lang.invoke.VarHandleGuards.guard_LI_I(VarHandle, Object, int, VarHandle$AccessDescriptor):int (78 bytes)   inline method (bytecode parsing)
                                                      @ 0  jdk.vm.ci.common.InitTimer.isEnabled():boolean (37 bytes)   relevance-based (relevance=2.000000, probability=0.061617, bonus=1.000000, nodes=237 <= 300.000000)
                              @ 2  java.lang.invoke.VarHandle.checkAccessModeThenIsDirect(VarHandle$AccessDescriptor):boolean (29 bytes)   inline method (bytecode parsing)
                                @ 12  java.lang.invoke.VarHandle.accessModeType(int):MethodType (41 bytes)   inline method (bytecode parsing)
                              @ 42  java.lang.invoke.VarForm.getMemberName(int):MemberName (31 bytes)   inline method (bytecode parsing)
                              @ 45  java.lang.invoke.VarHandleByteArrayAsInts$ArrayHandle.get(VarHandle, Object, int):int (36 bytes)   inline method (bytecode parsing)
                                @ 19  java.lang.invoke.VarHandleByteArrayAsInts$ArrayHandle.index(byte[], int):int (12 bytes)   inline method (bytecode parsing)
                                @ 32  jdk.internal.misc.Unsafe.getIntUnaligned(Object, long, boolean):int (12 bytes)   inline method (bytecode parsing)
                                  @ 8  jdk.internal.misc.Unsafe.convEndian(boolean, int):int (16 bytes)   inline method (bytecode parsing)
                                                    @ 4  jdk.graal.compiler.hotspot.HotSpotGraalOptionValues.parseOptions():EconomicMap (417 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.061617, bonus=1.000000, nodes=496 > 300.000000)
                            @ 226  java.lang.invoke.VarHandleGuards.guard_LI_I(VarHandle, Object, int, VarHandle$AccessDescriptor):int (78 bytes)   inline method (bytecode parsing)
                              @ 2  java.lang.invoke.VarHandle.checkAccessModeThenIsDirect(VarHandle$AccessDescriptor):boolean (29 bytes)   inline method (bytecode parsing)
                            @ 4  jdk.graal.compiler.options.OptionValues.newOptionMap():EconomicMap (7 bytes)   inline method (bytecode parsing)
                                @ 12  java.lang.invoke.VarHandle.accessModeType(int):MethodType (41 bytes)   inline method (bytecode parsing)
                              @ 3  org.graalvm.collections.EconomicMap.create(Equivalence):EconomicMap (6 bytes)   inline method (bytecode parsing)
                                @ 2  org.graalvm.collections.EconomicMapImpl.create(Equivalence, boolean):EconomicMapImpl (13 bytes)   inline method (bytecode parsing)
                                  @ 6  org.graalvm.collections.EconomicMapImpl.<init>(Equivalence, boolean):void (30 bytes)   inline method (bytecode parsing)
                              @ 42  java.lang.invoke.VarForm.getMemberName(int):MemberName (31 bytes)   inline method (bytecode parsing)
                                  @ 9  org.graalvm.collections.EconomicMapImpl.intercept(EconomicMapImpl):EconomicMapImpl (2 bytes)   inline method (bytecode parsing)
                              @ 45  java.lang.invoke.VarHandleByteArrayAsInts$ArrayHandle.get(VarHandle, Object, int):int (36 bytes)   inline method (bytecode parsing)
                                @ 19  java.lang.invoke.VarHandleByteArrayAsInts$ArrayHandle.index(byte[], int):int (12 bytes)   inline method (bytecode parsing)
                                @ 32  jdk.internal.misc.Unsafe.getIntUnaligned(Object, long, boolean):int (12 bytes)   inline method (bytecode parsing)
                                  @ 8  jdk.internal.misc.Unsafe.convEndian(boolean, int):int (16 bytes)   inline method (bytecode parsing)
                                                      @ 1  org.graalvm.collections.UnmodifiableEconomicMap.getEntries():UnmodifiableMapCursor (0 bytes)   not inlining no type profile exists
                                                      @ 8  org.graalvm.collections.UnmodifiableMapCursor.advance():boolean (0 bytes)   not inlining no type profile exists
                                                      @ 18  org.graalvm.collections.UnmodifiableMapCursor.getKey():Object (0 bytes)   not inlining no type profile exists
                                                      @ 27  org.graalvm.collections.UnmodifiableMapCursor.getValue():Object (0 bytes)   not inlining no type profile exists
                                                        @ 32  jdk.graal.compiler.options.OptionValues.encodeNull(Object):Object (12 bytes)   relevance-based (relevance=1.000000, probability=0.061617, bonus=1.000000, nodes=14 <= 300.000000)
                            @ 111  org.graalvm.collections.EconomicMapImpl.setKey(int, Object):void (10 bytes)   inline method (bytecode parsing)
                            @ 143  org.graalvm.collections.EconomicMapImpl.size():int (10 bytes)   inline method (bytecode parsing)
                            @ 147  org.graalvm.collections.EconomicMapImpl.size():int (10 bytes)   inline method (bytecode parsing)
                              @ 21  sun.security.provider.ByteArrayAccess.b2iBig64(byte[], int, int[]):void (231 bytes)   relevance-based (relevance=1.362745, probability=1.000000, bonus=1.000000, nodes=230 <= 300.000000)
                                                        @ 35  org.graalvm.collections.EconomicMapImpl.put(Object, Object):Object (192 bytes)   not inlining too large previous low-level graph (low-level-nodes: 1279, relevance=1.000000, probability=0.061617, bonus=1.000000, nodes=101)
                                                      @ 10  jdk.graal.compiler.options.OptionValues.initMap(EconomicMap, UnmodifiableEconomicMap):void (45 bytes)   not inlining callee invoke probability is too high (invokeP=6.000000, relevance=1.000000, probability=0.061617, bonus=1.000000, nodes=44)
                                                    @ 7  jdk.graal.compiler.options.OptionValues.<init>(UnmodifiableEconomicMap):void (19 bytes)   relevance-based (relevance=1.000000, probability=0.061617, bonus=1.000000, nodes=24 <= 300.000000)
                                                  @ 21  jdk.graal.compiler.hotspot.HotSpotGraalOptionValues.initializeOptions():OptionValues (11 bytes)   relevance-based (relevance=1.000000, probability=0.061617, bonus=1.000000, nodes=27 <= 300.000000)
                                                @ 22  jdk.graal.compiler.hotspot.HotSpotGraalOptionValues.defaultOptions():OptionValues (41 bytes)   relevance-based (relevance=6.183661, probability=0.246470, bonus=1.000000, nodes=60 <= 300.000000)
                            @ 23  jdk.graal.compiler.options.OptionValues.get(OptionKey):Object (9 bytes)   inline method (bytecode parsing)
                            @ 13  jdk.graal.compiler.options.OptionKey.getDefaultValue():Object (5 bytes)   inline accessor method (bytecode parsing)
                                                  @ 2  org.graalvm.collections.UnmodifiableEconomicMap.get(Object):Object (0 bytes)   not inlining no type profile exists
                                                    @ 18  jdk.graal.compiler.options.OptionValues.decodeNull(Object):Object (13 bytes)   relevance-based (relevance=1.000000, probability=0.123235, bonus=1.000000, nodes=15 <= 300.000000)
                                                  @ 5  jdk.graal.compiler.options.OptionValues.get(UnmodifiableEconomicMap, OptionKey):Object (22 bytes)   relevance-based (relevance=1.000000, probability=0.246470, bonus=1.000000, nodes=26 <= 300.000000)
                                                @ 25  jdk.graal.compiler.options.OptionKey.getValue(OptionValues):Object (27 bytes)   relevance-based (relevance=4.000000, probability=0.246470, bonus=1.000000, nodes=31 <= 300.000000)
                            @ 5  java.lang.String.contains(CharSequence):boolean (19 bytes)   inline method (bytecode parsing)
                              @ 2  java.lang.String.toString():String (2 bytes)   inline method (bytecode parsing)
                            @ 24  java.lang.String.contains(CharSequence):boolean (19 bytes)   inline method (bytecode parsing)
                              @ 2  java.lang.String.toString():String (2 bytes)   inline method (bytecode parsing)
                            @ 44  java.lang.String.contains(CharSequence):boolean (19 bytes)   inline method (bytecode parsing)
                              @ 2  java.lang.String.toString():String (2 bytes)   inline method (bytecode parsing)
                            @ 64  java.lang.String.contains(CharSequence):boolean (19 bytes)   inline method (bytecode parsing)
                              @ 2  java.lang.String.toString():String (2 bytes)   inline method (bytecode parsing)
                            @ 76  java.lang.String.valueOf(long):String (5 bytes)   inline method (bytecode parsing)
                                                    @ 1  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.123235, bonus=1.000000, nodes=5)
                                                    @ 7  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.123235, bonus=1.000000, nodes=5)
                                                    @ 14  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=0.123235, bonus=1.000000, nodes=9)
                                                    @ 28  java.lang.StringLatin1.indexOf(byte[], byte[]):int (25 bytes)   relevance-based (relevance=1.000000, probability=0.123235, bonus=1.000000, nodes=16 <= 300.000000)
                                                  @ 7  java.lang.String.indexOf(String):int (64 bytes)   relevance-based (relevance=2.000000, probability=0.123235, bonus=1.000000, nodes=25 <= 300.000000)
                                                  @ 14  jdk.graal.compiler.serviceprovider.GraalServices.getExecutionID():String (12 bytes)   trivial (relevance=1.000000, probability=0.061617, bonus=1.000000, nodes=3)
                                                    @ 1  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.061617, bonus=1.000000, nodes=5)
                                                    @ 7  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.061617, bonus=1.000000, nodes=5)
                                                    @ 14  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=0.061617, bonus=1.000000, nodes=9)
                                                    @ 28  java.lang.StringLatin1.indexOf(byte[], byte[]):int (25 bytes)   relevance-based (relevance=1.000000, probability=0.061617, bonus=1.000000, nodes=16 <= 300.000000)
                                                  @ 7  java.lang.String.indexOf(String):int (64 bytes)   relevance-based (relevance=1.000000, probability=0.061617, bonus=1.000000, nodes=25 <= 300.000000)
                                                    @ 1  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.123235, bonus=1.000000, nodes=5)
                                                    @ 7  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.123235, bonus=1.000000, nodes=5)
                                                    @ 14  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=0.123235, bonus=1.000000, nodes=9)
                                                    @ 28  java.lang.StringLatin1.indexOf(byte[], byte[]):int (25 bytes)   relevance-based (relevance=1.000000, probability=0.123235, bonus=1.000000, nodes=16 <= 300.000000)
                                                  @ 7  java.lang.String.indexOf(String):int (64 bytes)   relevance-based (relevance=2.000020, probability=0.123235, bonus=1.000000, nodes=25 <= 300.000000)
                                                    @ 1  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.123235, bonus=1.000000, nodes=5)
                                                    @ 7  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.123235, bonus=1.000000, nodes=5)
                                                    @ 14  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=0.123235, bonus=1.000000, nodes=9)
                                                    @ 28  java.lang.StringLatin1.indexOf(byte[], byte[]):int (25 bytes)   relevance-based (relevance=1.000000, probability=0.123235, bonus=1.000000, nodes=16 <= 300.000000)
                                                  @ 7  java.lang.String.indexOf(String):int (64 bytes)   relevance-based (relevance=2.000020, probability=0.123235, bonus=1.000000, nodes=25 <= 300.000000)
                            @ 28  java.lang.String.<init>(byte[], byte):void (15 bytes)   inline method (bytecode parsing)
                                                    @ 1  java.lang.Long.stringSize(long):int (55 bytes)   relevance-based (relevance=1.000000, probability=0.061617, bonus=1.000000, nodes=34 <= 300.000000)
                                                    @ 18  java.lang.Long.getChars(long, int, byte[]):int (195 bytes)   relevance-based (relevance=1.000000, probability=0.061617, bonus=1.000000, nodes=64 <= 300.000000)
                                                  @ 1  java.lang.Long.toString(long):String (55 bytes)   relevance-based (relevance=1.000010, probability=0.061617, bonus=1.000000, nodes=98 <= 300.000000)
                            @ 206  java.lang.StringBuilder.<init>(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 215  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 237  java.lang.StringBuilder.append(char):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 242  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 254  java.lang.StringBuilder.toString():String (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.String.<init>(StringBuilder):void (7 bytes)   inline method (bytecode parsing)
                                                    @ 1  java.lang.String.toString():String (2 bytes)   trivial (relevance=8.000000, probability=0.061617, bonus=1.000000, nodes=4)
                                                    @ 8  java.lang.String.toString():String (2 bytes)   trivial (relevance=8.000000, probability=0.061617, bonus=1.000000, nodes=4)
                                                      @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.061617, bonus=1.000000, nodes=5)
                                                    @ 16  java.lang.String.length():int (11 bytes)   trivial (relevance=8.000000, probability=0.061617, bonus=1.000000, nodes=8)
                                                      @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.061617, bonus=1.000000, nodes=5)
                                                    @ 22  java.lang.String.length():int (11 bytes)   trivial (relevance=8.000000, probability=0.061617, bonus=1.000000, nodes=5)
                                                      @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.061617, bonus=1.000000, nodes=5)
                                                    @ 29  java.lang.String.length():int (11 bytes)   trivial (relevance=21.333333, probability=0.061617, bonus=1.000000, nodes=8)
                                                    @ 68  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=21.333333, probability=0.061617, bonus=1.000000, nodes=9)
                                                    @ 74  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=21.333333, probability=0.061617, bonus=1.000000, nodes=5)
                                                    @ 81  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=21.333333, probability=0.061617, bonus=1.000000, nodes=9)
                            @ 162  java.lang.StringConcatHelper.newArray(long):byte[] (40 bytes)   inline method (bytecode parsing)
                            @ 287  java.lang.String.<init>(byte[], byte):void (15 bytes)   inline method (bytecode parsing)
                                                        @ 3  java.lang.Math.max(int, int):int (11 bytes)   trivial (relevance=0.500000, probability=0.000361, bonus=1.000000, nodes=8)
                                                      @ 94  jdk.internal.util.ArraysSupport.newLength(int, int, int):int (27 bytes)   relevance-based (relevance=0.500000, probability=0.000361, bonus=1.000000, nodes=15 <= 150.000000)
                                                        @ 25  java.lang.Math.min(int, int):int (11 bytes)   trivial (relevance=0.500005, probability=0.000352, bonus=1.000000, nodes=7)
                                                      @ 97  java.util.Arrays.copyOf(int[], int):int[] (33 bytes)   relevance-based (relevance=0.500000, probability=0.000361, bonus=1.000000, nodes=28 <= 150.000000)
                                                        @ 51  jdk.internal.misc.Unsafe.allocateUninitializedArray0(Class, int):Object (90 bytes)   trivial (relevance=0.499990, probability=0.000361, bonus=1.000000, nodes=6)
                                                      @ 33  jdk.internal.misc.Unsafe.allocateUninitializedArray(Class, int):Object (55 bytes)   relevance-based (relevance=0.499990, probability=0.000361, bonus=1.000000, nodes=10 <= 149.997000)
                                                    @ 120  java.lang.StringLatin1.replace(byte[], int, byte[], int, byte[], int):String (291 bytes)   relevance-based (relevance=1.000000, probability=0.002888, bonus=1.000000, nodes=208 <= 300.000000)
                            @ 588  java.lang.StringUTF16.compress(byte[], int, int):byte[] (20 bytes)   inline method (bytecode parsing)
                            @ 605  java.lang.String.<init>(byte[], byte):void (15 bytes)   inline method (bytecode parsing)
                            @ 616  java.lang.String.<init>(byte[], byte):void (15 bytes)   inline method (bytecode parsing)
                                                      @ 76  java.lang.StringLatin1.indexOf(byte[], byte[]):int (25 bytes)   relevance-based (relevance=1.000000, probability=0.010109, bonus=1.000000, nodes=16 <= 300.000000)
                            @ 8  java.lang.StringUTF16.length(byte[]):int (5 bytes)   inline method (bytecode parsing)
                            @ 20  java.lang.StringUTF16.length(byte[]):int (5 bytes)   inline method (bytecode parsing)
                                                      @ 95  java.lang.StringUTF16.indexOfLatin1(byte[], byte[]):int (31 bytes)   relevance-based (relevance=1.000010, probability=0.010109, bonus=1.000000, nodes=22 <= 300.000000)
                            @ 4  java.lang.StringUTF16.checkBoundsBeginEnd(int, int, byte[]):void (10 bytes)   inline method (bytecode parsing)
                              @ 3  java.lang.StringUTF16.length(byte[]):int (5 bytes)   inline method (bytecode parsing)
                            @ 11  java.lang.String.checkBoundsBeginEnd(int, int, int):void (11 bytes)   inline method (bytecode parsing)
                              @ 6  jdk.internal.util.Preconditions.checkFromToIndex(int, int, int, BiFunction):int (24 bytes)   inline method (bytecode parsing)
                                                          @ 6  jdk.internal.util.Preconditions.checkFromToIndex(int, int, int, BiFunction):int (24 bytes)   relevance-based (relevance=1.000000, probability=0.010109, bonus=1.000000, nodes=14 <= 300.000000)
                                                        @ 6  java.lang.String.checkBoundsBeginEnd(int, int, int):void (11 bytes)   relevance-based (relevance=1.000010, probability=0.010109, bonus=1.000000, nodes=13 <= 300.000000)
                                                      @ 178  java.lang.StringUTF16.indexOfLatin1(byte[], int, byte[], int, int):int (24 bytes)   relevance-based (relevance=1.000010, probability=0.010109, bonus=1.000000, nodes=24 <= 300.000000)
                                                    @ 151  java.lang.StringUTF16.replace(byte[], int, boolean, byte[], int, boolean, byte[], int, boolean):String (620 bytes)   not inlining relevance-based (relevance=28.000280, probability=0.020218, bonus=1.000000, nodes=311 > 300.000000)
                                                  @ 79  java.lang.String.replace(CharSequence, CharSequence):String (258 bytes)   relevance-based (relevance=1.000010, probability=0.061617, bonus=1.000000, nodes=234 <= 300.000000)
                                                @ 37  jdk.graal.compiler.hotspot.HotSpotTTYStreamProvider$LogStreamOptionKey.makeFilename(String):String (157 bytes)   not inlining relevance-based (relevance=2.000000, probability=0.123235, bonus=1.000000, nodes=520 > 300.000000)
                                                  @ 17  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=0.398774, probability=0.035075, bonus=1.000000, nodes=9)
                                                  @ 27  java.lang.StringLatin1.hashCode(byte[]):int (52 bytes)   relevance-based (relevance=0.398774, probability=0.035075, bonus=1.000000, nodes=22 <= 119.632312)
                                                @ 49  java.lang.String.hashCode():int (60 bytes)   relevance-based (relevance=2.000000, probability=0.123235, bonus=1.000000, nodes=47 <= 300.000000)
                                              @ 1  jdk.graal.compiler.hotspot.HotSpotTTYStreamProvider$LogStreamOptionKey$DelayedOutputStream.lazy():OutputStream (266 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.985878, bonus=1.000000, nodes=307 > 300.000000)
                                            @ 7  java.io.OutputStream.write(byte[], int, int):void (34 bytes)   not inlining no type profile exists
                                            @ 11  jdk.graal.compiler.hotspot.HotSpotTTYStreamProvider$LogStreamOptionKey$DelayedOutputStream.write(byte[], int, int):void (11 bytes)   relevance-based (relevance=1.013927, probability=0.999609, bonus=1.000000, nodes=84 <= 300.000000)
                            @ 11  jdk.internal.misc.InternalLock.lock():void (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.util.concurrent.locks.ReentrantLock.lock():void (8 bytes)   inline method (bytecode parsing)
                            @ 22  jdk.internal.misc.InternalLock.unlock():void (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.util.concurrent.locks.ReentrantLock.unlock():void (10 bytes)   inline method (bytecode parsing)
                                @ 5  java.util.concurrent.locks.AbstractQueuedSynchronizer.release(int):boolean (19 bytes)   inline method (bytecode parsing)
                                            @ 25  java.io.BufferedOutputStream.flush():void (60 bytes)   not inlining relevance-based (relevance=0.013927, probability=0.013731, bonus=1.000000, nodes=68 > 4.178163)
                                          @ 18  java.io.PrintStream.implWrite(byte[], int, int):void (29 bytes)   relevance-based (relevance=1.131007, probability=0.999609, bonus=1.000000, nodes=109 <= 300.000000)
                            @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 8  java.util.concurrent.locks.AbstractOwnableSynchronizer.getExclusiveOwnerThread():Thread (5 bytes)   inline accessor method (bytecode parsing)
                            @ 41  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                            @ 46  java.util.concurrent.locks.AbstractQueuedSynchronizer.setState(int):void (6 bytes)   inline method (bytecode parsing)
                                          @ 2  java.util.concurrent.locks.ReentrantLock$Sync.tryRelease(int):boolean (51 bytes)   relevance-based (relevance=1.131007, probability=0.999609, bonus=1.000000, nodes=37 <= 300.000000)
                            @ 22  java.util.concurrent.locks.AbstractQueuedSynchronizer$Node.getAndUnsetStatus(int):int (14 bytes)   inline method (bytecode parsing)
                              @ 10  jdk.internal.misc.Unsafe.getAndBitwiseAndInt(Object, long, int):int (27 bytes)   inline method (bytecode parsing)
                            @ 5  java.lang.Thread.isVirtual():boolean (5 bytes)   inline method (bytecode parsing)
                                            @ 30  java.util.concurrent.locks.LockSupport.unpark(Thread):void (26 bytes)   not inlining relevance-based (relevance=0.006463, probability=0.004161, bonus=1.000000, nodes=23 > 1.938812)
                                          @ 12  java.util.concurrent.locks.AbstractQueuedSynchronizer.signalNext(AbstractQueuedSynchronizer$Node):void (34 bytes)   relevance-based (relevance=0.992438, probability=0.877138, bonus=1.000000, nodes=56 <= 297.731395)
                                        @ 127  java.io.PrintStream.write(byte[], int, int):void (94 bytes)   relevance-based (relevance=1.000000, probability=0.999609, bonus=1.000000, nodes=278 <= 300.000000)
                                      @ 11  sun.nio.cs.StreamEncoder.writeBytes():void (139 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.999609, bonus=1.000000, nodes=343 > 300.000000)
                                    @ 8  sun.nio.cs.StreamEncoder.implFlushBuffer():void (15 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=21 <= 300.000000)
                                  @ 22  sun.nio.cs.StreamEncoder.lockedFlushBuffer():void (25 bytes)   relevance-based (relevance=1.131007, probability=1.000000, bonus=1.000000, nodes=29 <= 300.000000)
                            @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 8  java.util.concurrent.locks.AbstractOwnableSynchronizer.getExclusiveOwnerThread():Thread (5 bytes)   inline accessor method (bytecode parsing)
                            @ 41  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                            @ 46  java.util.concurrent.locks.AbstractQueuedSynchronizer.setState(int):void (6 bytes)   inline method (bytecode parsing)
                                  @ 2  java.util.concurrent.locks.ReentrantLock$Sync.tryRelease(int):boolean (51 bytes)   relevance-based (relevance=1.131007, probability=1.000000, bonus=1.000000, nodes=37 <= 300.000000)
                            @ 22  java.util.concurrent.locks.AbstractQueuedSynchronizer$Node.getAndUnsetStatus(int):int (14 bytes)   inline method (bytecode parsing)
                              @ 10  jdk.internal.misc.Unsafe.getAndBitwiseAndInt(Object, long, int):int (27 bytes)   inline method (bytecode parsing)
                            @ 5  java.lang.Thread.isVirtual():boolean (5 bytes)   inline method (bytecode parsing)
                                    @ 30  java.util.concurrent.locks.LockSupport.unpark(Thread):void (26 bytes)   not inlining relevance-based (relevance=0.006463, probability=0.004162, bonus=1.000000, nodes=23 > 1.938812)
                                  @ 12  java.util.concurrent.locks.AbstractQueuedSynchronizer.signalNext(AbstractQueuedSynchronizer$Node):void (34 bytes)   relevance-based (relevance=0.992438, probability=0.877482, bonus=1.000000, nodes=56 <= 297.731395)
                                @ 4  sun.nio.cs.StreamEncoder.flushBuffer():void (63 bytes)   relevance-based (relevance=1.131007, probability=1.000000, bonus=1.000000, nodes=199 <= 300.000000)
                              @ 16  java.io.PrintStream.implWrite(String):void (50 bytes)   not inlining relevance-based (relevance=1.131007, probability=1.000000, bonus=1.000000, nodes=408 > 300.000000)
                            @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 8  java.util.concurrent.locks.AbstractOwnableSynchronizer.getExclusiveOwnerThread():Thread (5 bytes)   inline accessor method (bytecode parsing)
                            @ 41  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                            @ 46  java.util.concurrent.locks.AbstractQueuedSynchronizer.setState(int):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  java.util.concurrent.locks.ReentrantLock$Sync.tryRelease(int):boolean (51 bytes)   relevance-based (relevance=1.131007, probability=1.000000, bonus=1.000000, nodes=37 <= 300.000000)
                            @ 22  java.util.concurrent.locks.AbstractQueuedSynchronizer$Node.getAndUnsetStatus(int):int (14 bytes)   inline method (bytecode parsing)
                              @ 10  jdk.internal.misc.Unsafe.getAndBitwiseAndInt(Object, long, int):int (27 bytes)   inline method (bytecode parsing)
                            @ 5  java.lang.Thread.isVirtual():boolean (5 bytes)   inline method (bytecode parsing)
                                @ 30  java.util.concurrent.locks.LockSupport.unpark(Thread):void (26 bytes)   not inlining relevance-based (relevance=0.006463, probability=0.004162, bonus=1.000000, nodes=23 > 1.938812)
                              @ 12  java.util.concurrent.locks.AbstractQueuedSynchronizer.signalNext(AbstractQueuedSynchronizer$Node):void (34 bytes)   relevance-based (relevance=0.992438, probability=0.877482, bonus=1.000000, nodes=56 <= 297.731395)
                            @ 21  org.graalvm.collections.EconomicMapImpl.getKey(int):Object (9 bytes)   inline method (bytecode parsing)
                            @ 4  jdk.graal.compiler.graph.Node.getNodeClass():NodeClass (5 bytes)   inline accessor method (bytecode parsing)
                                @ 40  jdk.graal.compiler.graph.Graph$1.hashCode(Object):int (15 bytes)   not inlining relevance-based (relevance=0.035789, probability=0.030373, bonus=1.000000, nodes=14 > 10.736669)
                 n              @ 48  java.lang.Object.hashCode():int (0 bytes)   trivial (relevance=1.142530, probability=0.969627, bonus=1.000000, nodes=5)
                                @ 61  org.graalvm.collections.EconomicMapImpl.getHashTableSize():int (43 bytes)   relevance-based (relevance=1.178319, probability=1.000000, bonus=1.000000, nodes=21 <= 300.000000)
                              @ 2  org.graalvm.collections.EconomicMapImpl.getHashIndex(Object):int (68 bytes)   relevance-based (relevance=1.203861, probability=1.000000, bonus=1.000000, nodes=76 <= 300.000000)
                              @ 8  org.graalvm.collections.EconomicMapImpl.getHashArray(int):int (126 bytes)   relevance-based (relevance=1.178319, probability=1.000000, bonus=1.000000, nodes=31 <= 300.000000)
                            @ 49  jdk.graal.compiler.graph.Node.valueEquals(Node):boolean (10 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.graph.Node.getNodeClass():NodeClass (5 bytes)   inline accessor method (bytecode parsing)
                            @ 59  jdk.graal.compiler.core.common.Fields.getCount():int (6 bytes)   inline method (bytecode parsing)
                            @ 70  jdk.graal.compiler.core.common.Fields.getType(int):Class (7 bytes)   inline method (bytecode parsing)
                                  @ 6  jdk.graal.compiler.graph.NodeClass.dataEquals(Node, Node):boolean (546 bytes)   not inlining relevance-based (relevance=0.093801, probability=0.020430, bonus=1.000000, nodes=248 > 28.140425)
                                @ 46  jdk.graal.compiler.graph.Graph$1.equals(Object, Object):boolean (53 bytes)   relevance-based (relevance=0.093801, probability=0.040861, bonus=1.000000, nodes=25 <= 28.140425)
                              @ 36  java.lang.Object.equals(Object):boolean (11 bytes)   not inlining no methods remaining after filtering less frequent methods (7 methods previously)
                              @ 30  org.graalvm.collections.EconomicMapImpl.compareKeys(Object, Object):boolean (52 bytes)   relevance-based (relevance=1.178130, probability=0.999839, bonus=1.000000, nodes=66 <= 300.000000)
                              @ 38  org.graalvm.collections.EconomicMapImpl.getRawValue(int):Object (11 bytes)   relevance-based (relevance=1.075194, probability=0.912481, bonus=1.000000, nodes=10 <= 300.000000)
                              @ 81  org.graalvm.collections.EconomicMapImpl.getRawValue(int):Object (11 bytes)   relevance-based (relevance=0.102936, probability=0.087358, bonus=1.000000, nodes=10 <= 30.880800)
                            @ 20  org.graalvm.collections.EconomicMapImpl.getKey(int):Object (9 bytes)   inline method (bytecode parsing)
                              @ 102  org.graalvm.collections.EconomicMapImpl.findAndRemoveWithCollision(Object, EconomicMapImpl$CollisionLink, int):int (137 bytes)   not inlining relevance-based (relevance=0.102841, probability=0.087278, bonus=1.000000, nodes=73 > 30.852391)
                              @ 74  org.graalvm.collections.EconomicMapImpl.setHashArray(int, int):void (112 bytes)   relevance-based (relevance=1.075194, probability=0.912481, bonus=1.000000, nodes=37 <= 300.000000)
                                @ 2  org.graalvm.collections.EconomicMapImpl.getRawValue(int):Object (11 bytes)   relevance-based (relevance=1.045654, probability=1.000000, bonus=1.000000, nodes=10 <= 300.000000)
                              @ 11  org.graalvm.collections.EconomicMapImpl.getValue(int):Object (23 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=19 <= 300.000000)
                            @ 23  java.io.OutputStreamWriter.flushBuffer():void (8 bytes)   inline method (bytecode parsing)
                              @ 1  java.io.PrintStream.ensureOpen():void (18 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=7)
                              @ 9  java.io.Writer.write(String):void (11 bytes)   not inlining too large previous low-level graph (low-level-nodes: 445, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=12)
                            @ 18  jdk.internal.misc.InternalLock.lock():void (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.util.concurrent.locks.ReentrantLock.lock():void (8 bytes)   inline method (bytecode parsing)
                            @ 26  jdk.internal.misc.InternalLock.unlock():void (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.util.concurrent.locks.ReentrantLock.unlock():void (10 bytes)   inline method (bytecode parsing)
                                @ 5  java.util.concurrent.locks.AbstractQueuedSynchronizer.release(int):boolean (19 bytes)   inline method (bytecode parsing)
                            @ 9  java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(int):void (20 bytes)   inline method (bytecode parsing)
                            @ 7  java.util.concurrent.locks.AbstractQueuedSynchronizer.compareAndSetState(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 15  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                            @ 21  java.util.concurrent.locks.AbstractOwnableSynchronizer.getExclusiveOwnerThread():Thread (5 bytes)   inline accessor method (bytecode parsing)
                            @ 29  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 51  java.util.concurrent.locks.AbstractQueuedSynchronizer.setState(int):void (6 bytes)   inline method (bytecode parsing)
                                  @ 1  java.util.concurrent.locks.ReentrantLock$NonfairSync.initialTryLock():boolean (58 bytes)   relevance-based (relevance=1.005454, probability=1.000000, bonus=1.000000, nodes=40 <= 300.000000)
                            @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 10  java.util.concurrent.locks.AbstractQueuedSynchronizer.compareAndSetState(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 20  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                                  @ 2  java.util.concurrent.locks.ReentrantLock$NonfairSync.tryAcquire(int):boolean (27 bytes)   not inlining relevance-based (relevance=0.005049, probability=0.004464, bonus=1.000000, nodes=36 > 1.514719)
                            @ 108  java.util.concurrent.locks.AbstractQueuedSynchronizer.tryAcquireShared(int):int (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.lang.UnsupportedOperationException.<init>():void (5 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.RuntimeException.<init>():void (5 bytes)   inline method (bytecode parsing)
                                  @ 1  java.lang.Exception.<init>():void (5 bytes)   inline method (bytecode parsing)
                            @ 245  java.util.concurrent.locks.AbstractQueuedSynchronizer$ExclusiveNode.<init>():void (5 bytes)   inline method (bytecode parsing)
                              @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer$Node.<init>():void (5 bytes)   inline method (bytecode parsing)
                            @ 290  java.util.concurrent.locks.AbstractQueuedSynchronizer$Node.setPrevRelaxed(AbstractQueuedSynchronizer$Node):void (12 bytes)   inline method (bytecode parsing)
                            @ 393  java.lang.Thread.interrupted():boolean (7 bytes)   inline method (bytecode parsing)
                                  @ 15  java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer$Node, int, boolean, boolean, boolean, long):int (424 bytes)   not inlining relevance-based (relevance=0.002525, probability=0.002232, bonus=1.000000, nodes=226 > 0.757359)
                                @ 4  java.util.concurrent.locks.ReentrantLock$Sync.lock():void (13 bytes)   relevance-based (relevance=1.143082, probability=1.000000, bonus=1.000000, nodes=57 <= 300.000000)
                                  @ 1  java.io.BufferedWriter.ensureOpen():void (18 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=7)
                            @ 23  jdk.internal.misc.InternalLock.lock():void (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.util.concurrent.locks.ReentrantLock.lock():void (8 bytes)   inline method (bytecode parsing)
                            @ 35  jdk.internal.misc.InternalLock.unlock():void (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.util.concurrent.locks.ReentrantLock.unlock():void (10 bytes)   inline method (bytecode parsing)
                                @ 5  java.util.concurrent.locks.AbstractQueuedSynchronizer.release(int):boolean (19 bytes)   inline method (bytecode parsing)
                                    @ 7  sun.nio.cs.StreamEncoder.write(char[], int, int):void (82 bytes)   not inlining too large previous low-level graph (low-level-nodes: 614, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=60)
                                  @ 25  java.io.OutputStreamWriter.write(char[], int, int):void (11 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                                @ 22  java.io.BufferedWriter.implFlushBuffer():void (34 bytes)   relevance-based (relevance=1.131007, probability=1.000000, bonus=1.000000, nodes=28 <= 300.000000)
                            @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 8  java.util.concurrent.locks.AbstractOwnableSynchronizer.getExclusiveOwnerThread():Thread (5 bytes)   inline accessor method (bytecode parsing)
                            @ 41  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                            @ 46  java.util.concurrent.locks.AbstractQueuedSynchronizer.setState(int):void (6 bytes)   inline method (bytecode parsing)
                                @ 2  java.util.concurrent.locks.ReentrantLock$Sync.tryRelease(int):boolean (51 bytes)   relevance-based (relevance=1.131007, probability=1.000000, bonus=1.000000, nodes=37 <= 300.000000)
                            @ 22  java.util.concurrent.locks.AbstractQueuedSynchronizer$Node.getAndUnsetStatus(int):int (14 bytes)   inline method (bytecode parsing)
                              @ 10  jdk.internal.misc.Unsafe.getAndBitwiseAndInt(Object, long, int):int (27 bytes)   inline method (bytecode parsing)
                            @ 5  java.lang.Thread.isVirtual():boolean (5 bytes)   inline method (bytecode parsing)
                                  @ 30  java.util.concurrent.locks.LockSupport.unpark(Thread):void (26 bytes)   not inlining relevance-based (relevance=0.006443, probability=0.004150, bonus=1.000000, nodes=23 > 1.932948)
                                @ 12  java.util.concurrent.locks.AbstractQueuedSynchronizer.signalNext(AbstractQueuedSynchronizer$Node):void (34 bytes)   relevance-based (relevance=0.989436, probability=0.874827, bonus=1.000000, nodes=56 <= 296.830824)
                                @ 12  java.lang.Integer.getChars(int, int, byte[]):int (121 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=59 <= 300.000000)
                              @ 16  java.io.BufferedWriter.flushBuffer():void (63 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=199 <= 300.000000)
                              @ 3  java.lang.StringConcatHelper.prepend(long, byte[], int):long (30 bytes)   relevance-based (relevance=1.012389, probability=1.000000, bonus=1.000000, nodes=65 <= 300.000000)
                            @ 18  jdk.internal.misc.InternalLock.lock():void (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.util.concurrent.locks.ReentrantLock.lock():void (8 bytes)   inline method (bytecode parsing)
                            @ 26  jdk.internal.misc.InternalLock.unlock():void (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.util.concurrent.locks.ReentrantLock.unlock():void (10 bytes)   inline method (bytecode parsing)
                                @ 5  java.util.concurrent.locks.AbstractQueuedSynchronizer.release(int):boolean (19 bytes)   inline method (bytecode parsing)
                                  @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=0.987763, probability=0.987763, bonus=1.000000, nodes=5)
                                @ 2  java.lang.String.length():int (11 bytes)   trivial (relevance=0.987763, probability=0.987763, bonus=1.000000, nodes=8)
                            @ 9  java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(int):void (20 bytes)   inline method (bytecode parsing)
                            @ 7  java.util.concurrent.locks.AbstractQueuedSynchronizer.compareAndSetState(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                                  @ 1  java.lang.String.coder():byte (15 bytes)   trivial (relevance=0.987772, probability=0.987763, bonus=1.000000, nodes=5)
                                @ 21  java.lang.String.getBytes(byte[], int, byte):void (44 bytes)   relevance-based (relevance=0.987763, probability=0.987763, bonus=1.000000, nodes=24 <= 296.328785)
                            @ 15  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                            @ 21  java.util.concurrent.locks.AbstractOwnableSynchronizer.getExclusiveOwnerThread():Thread (5 bytes)   inline accessor method (bytecode parsing)
                            @ 29  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                              @ 16  java.lang.StringConcatHelper.prepend(long, byte[], String):long (37 bytes)   relevance-based (relevance=0.987763, probability=0.987763, bonus=1.000000, nodes=37 <= 296.328785)
                            @ 51  java.util.concurrent.locks.AbstractQueuedSynchronizer.setState(int):void (6 bytes)   inline method (bytecode parsing)
                                  @ 1  java.util.concurrent.locks.ReentrantLock$NonfairSync.initialTryLock():boolean (58 bytes)   relevance-based (relevance=1.005454, probability=1.000000, bonus=1.000000, nodes=40 <= 300.000000)
                            @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 10  java.util.concurrent.locks.AbstractQueuedSynchronizer.compareAndSetState(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 20  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                                  @ 2  java.util.concurrent.locks.ReentrantLock$NonfairSync.tryAcquire(int):boolean (27 bytes)   not inlining relevance-based (relevance=0.005049, probability=0.004464, bonus=1.000000, nodes=36 > 1.514719)
                            @ 108  java.util.concurrent.locks.AbstractQueuedSynchronizer.tryAcquireShared(int):int (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.lang.UnsupportedOperationException.<init>():void (5 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.RuntimeException.<init>():void (5 bytes)   inline method (bytecode parsing)
                                  @ 1  java.lang.Exception.<init>():void (5 bytes)   inline method (bytecode parsing)
                            @ 245  java.util.concurrent.locks.AbstractQueuedSynchronizer$ExclusiveNode.<init>():void (5 bytes)   inline method (bytecode parsing)
                              @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer$Node.<init>():void (5 bytes)   inline method (bytecode parsing)
                            @ 290  java.util.concurrent.locks.AbstractQueuedSynchronizer$Node.setPrevRelaxed(AbstractQueuedSynchronizer$Node):void (12 bytes)   inline method (bytecode parsing)
                            @ 393  java.lang.Thread.interrupted():boolean (7 bytes)   inline method (bytecode parsing)
                                  @ 15  java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer$Node, int, boolean, boolean, boolean, long):int (424 bytes)   not inlining relevance-based (relevance=0.002525, probability=0.002232, bonus=1.000000, nodes=226 > 0.757359)
                                @ 4  java.util.concurrent.locks.ReentrantLock$Sync.lock():void (13 bytes)   relevance-based (relevance=1.143082, probability=1.000000, bonus=1.000000, nodes=57 <= 300.000000)
                                  @ 1  sun.nio.cs.StreamEncoder.isOpen():boolean (13 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                            @ 4  java.nio.Buffer.position():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 12  java.nio.Buffer.limit():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 20  java.nio.Buffer.position():int (5 bytes)   inline accessor method (bytecode parsing)
                                        @ 1  java.nio.Buffer.flip():Buffer (20 bytes)   relevance-based (relevance=1.000000, probability=0.999636, bonus=1.000000, nodes=13 <= 300.000000)
                                      @ 4  java.nio.ByteBuffer.flip():ByteBuffer (7 bytes)   relevance-based (relevance=1.000000, probability=0.999636, bonus=1.000000, nodes=14 <= 300.000000)
                                      @ 114  java.nio.ByteBuffer.array():byte[] (35 bytes)   relevance-based (relevance=1.000000, probability=0.999636, bonus=1.000000, nodes=11 <= 300.000000)
                                      @ 121  java.nio.ByteBuffer.arrayOffset():int (35 bytes)   relevance-based (relevance=1.000000, probability=0.999636, bonus=1.000000, nodes=12 <= 300.000000)
                            @ 11  jdk.internal.misc.InternalLock.lock():void (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.util.concurrent.locks.ReentrantLock.lock():void (8 bytes)   inline method (bytecode parsing)
                            @ 25  jdk.internal.misc.InternalLock.unlock():void (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.util.concurrent.locks.ReentrantLock.unlock():void (10 bytes)   inline method (bytecode parsing)
                                @ 5  java.util.concurrent.locks.AbstractQueuedSynchronizer.release(int):boolean (19 bytes)   inline method (bytecode parsing)
                            @ 9  java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(int):void (20 bytes)   inline method (bytecode parsing)
                            @ 7  java.util.concurrent.locks.AbstractQueuedSynchronizer.compareAndSetState(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 15  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                            @ 21  java.util.concurrent.locks.AbstractOwnableSynchronizer.getExclusiveOwnerThread():Thread (5 bytes)   inline accessor method (bytecode parsing)
                            @ 29  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 51  java.util.concurrent.locks.AbstractQueuedSynchronizer.setState(int):void (6 bytes)   inline method (bytecode parsing)
                                          @ 1  java.util.concurrent.locks.ReentrantLock$NonfairSync.initialTryLock():boolean (58 bytes)   relevance-based (relevance=1.005454, probability=0.999636, bonus=1.000000, nodes=40 <= 300.000000)
                            @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 10  java.util.concurrent.locks.AbstractQueuedSynchronizer.compareAndSetState(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 20  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                                          @ 2  java.util.concurrent.locks.ReentrantLock$NonfairSync.tryAcquire(int):boolean (27 bytes)   not inlining relevance-based (relevance=0.005049, probability=0.004463, bonus=1.000000, nodes=36 > 1.514719)
                            @ 108  java.util.concurrent.locks.AbstractQueuedSynchronizer.tryAcquireShared(int):int (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.lang.UnsupportedOperationException.<init>():void (5 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.RuntimeException.<init>():void (5 bytes)   inline method (bytecode parsing)
                                  @ 1  java.lang.Exception.<init>():void (5 bytes)   inline method (bytecode parsing)
                            @ 245  java.util.concurrent.locks.AbstractQueuedSynchronizer$ExclusiveNode.<init>():void (5 bytes)   inline method (bytecode parsing)
                              @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer$Node.<init>():void (5 bytes)   inline method (bytecode parsing)
                            @ 290  java.util.concurrent.locks.AbstractQueuedSynchronizer$Node.setPrevRelaxed(AbstractQueuedSynchronizer$Node):void (12 bytes)   inline method (bytecode parsing)
                            @ 393  java.lang.Thread.interrupted():boolean (7 bytes)   inline method (bytecode parsing)
                                          @ 15  java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer$Node, int, boolean, boolean, boolean, long):int (424 bytes)   not inlining relevance-based (relevance=0.002525, probability=0.002231, bonus=1.000000, nodes=226 > 0.757359)
                                        @ 4  java.util.concurrent.locks.ReentrantLock$Sync.lock():void (13 bytes)   relevance-based (relevance=1.143082, probability=0.999636, bonus=1.000000, nodes=57 <= 300.000000)
                            @ 12  java.nio.Buffer.limit():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 20  java.nio.Buffer.position():int (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 1  java.io.PrintStream.ensureOpen():void (18 bytes)   trivial (relevance=1.013124, probability=0.999636, bonus=1.000000, nodes=7)
                            @ 11  jdk.internal.misc.InternalLock.lock():void (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.util.concurrent.locks.ReentrantLock.lock():void (8 bytes)   inline method (bytecode parsing)
                                @ 1  java.nio.Buffer.flip():Buffer (20 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=13 <= 300.000000)
                            @ 25  jdk.internal.misc.InternalLock.unlock():void (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.util.concurrent.locks.ReentrantLock.unlock():void (10 bytes)   inline method (bytecode parsing)
                              @ 4  java.nio.ByteBuffer.flip():ByteBuffer (7 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=14 <= 300.000000)
                                @ 5  java.util.concurrent.locks.AbstractQueuedSynchronizer.release(int):boolean (19 bytes)   inline method (bytecode parsing)
                              @ 114  java.nio.ByteBuffer.array():byte[] (35 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                            @ 9  java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(int):void (20 bytes)   inline method (bytecode parsing)
                              @ 121  java.nio.ByteBuffer.arrayOffset():int (35 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=12 <= 300.000000)
                                            @ 4  java.util.concurrent.locks.ReentrantLock$Sync.lock():void (13 bytes)   not inlining relevance-based (relevance=0.015199, probability=0.006475, bonus=1.000000, nodes=31 > 4.559611)
                            @ 11  jdk.internal.misc.InternalLock.lock():void (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.util.concurrent.locks.ReentrantLock.lock():void (8 bytes)   inline method (bytecode parsing)
                                            @ 18  java.io.BufferedOutputStream.implWrite(byte[], int, int):void (71 bytes)   not inlining relevance-based (relevance=0.015199, probability=0.006475, bonus=1.000000, nodes=55 > 4.559611)
                            @ 25  jdk.internal.misc.InternalLock.unlock():void (8 bytes)   inline method (bytecode parsing)
                            @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                              @ 4  java.util.concurrent.locks.ReentrantLock.unlock():void (10 bytes)   inline method (bytecode parsing)
                            @ 8  java.util.concurrent.locks.AbstractOwnableSynchronizer.getExclusiveOwnerThread():Thread (5 bytes)   inline accessor method (bytecode parsing)
                                @ 5  java.util.concurrent.locks.AbstractQueuedSynchronizer.release(int):boolean (19 bytes)   inline method (bytecode parsing)
                            @ 41  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                            @ 46  java.util.concurrent.locks.AbstractQueuedSynchronizer.setState(int):void (6 bytes)   inline method (bytecode parsing)
                                            @ 2  java.util.concurrent.locks.ReentrantLock$Sync.tryRelease(int):boolean (51 bytes)   not inlining relevance-based (relevance=0.015199, probability=0.006475, bonus=1.000000, nodes=37 > 4.559611)
                            @ 9  java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(int):void (20 bytes)   inline method (bytecode parsing)
                            @ 22  java.util.concurrent.locks.AbstractQueuedSynchronizer$Node.getAndUnsetStatus(int):int (14 bytes)   inline method (bytecode parsing)
                              @ 10  jdk.internal.misc.Unsafe.getAndBitwiseAndInt(Object, long, int):int (27 bytes)   inline method (bytecode parsing)
                            @ 7  java.util.concurrent.locks.AbstractQueuedSynchronizer.compareAndSetState(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                                            @ 12  java.util.concurrent.locks.AbstractQueuedSynchronizer.signalNext(AbstractQueuedSynchronizer$Node):void (34 bytes)   not inlining relevance-based (relevance=0.013296, probability=0.005664, bonus=1.000000, nodes=56 > 3.988873)
                            @ 15  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                            @ 21  java.util.concurrent.locks.AbstractOwnableSynchronizer.getExclusiveOwnerThread():Thread (5 bytes)   inline accessor method (bytecode parsing)
                            @ 29  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 51  java.util.concurrent.locks.AbstractQueuedSynchronizer.setState(int):void (6 bytes)   inline method (bytecode parsing)
                                            @ 55  java.io.BufferedOutputStream.implWrite(byte[], int, int):void (71 bytes)   not inlining relevance-based (relevance=0.015199, probability=0.006475, bonus=1.000000, nodes=55 > 4.559611)
                                  @ 1  java.util.concurrent.locks.ReentrantLock$NonfairSync.initialTryLock():boolean (58 bytes)   relevance-based (relevance=1.005418, probability=1.000000, bonus=1.000000, nodes=40 <= 300.000000)
                            @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 10  java.util.concurrent.locks.AbstractQueuedSynchronizer.compareAndSetState(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 20  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                            @ 157  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                                  @ 2  java.util.concurrent.locks.ReentrantLock$NonfairSync.tryAcquire(int):boolean (27 bytes)   not inlining relevance-based (relevance=0.005049, probability=0.004464, bonus=1.000000, nodes=36 > 1.514719)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  jdk.graal.compiler.hotspot.HotSpotTTYStreamProvider$LogStreamOptionKey$DelayedOutputStream$$Lambda/0x00007f8674264b28.<init>(String):void (10 bytes)   inline method (bytecode parsing)
                            @ 108  java.util.concurrent.locks.AbstractQueuedSynchronizer.tryAcquireShared(int):int (8 bytes)   inline method (bytecode parsing)
                            @ 210  jdk.vm.ci.hotspot.HotSpotJVMCIRuntime.getLogStream():OutputStream (9 bytes)   inline method (bytecode parsing)
                              @ 4  java.lang.UnsupportedOperationException.<init>():void (5 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.RuntimeException.<init>():void (5 bytes)   inline method (bytecode parsing)
                                  @ 1  java.lang.Exception.<init>():void (5 bytes)   inline method (bytecode parsing)
                            @ 245  java.util.concurrent.locks.AbstractQueuedSynchronizer$ExclusiveNode.<init>():void (5 bytes)   inline method (bytecode parsing)
                              @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer$Node.<init>():void (5 bytes)   inline method (bytecode parsing)
                            @ 290  java.util.concurrent.locks.AbstractQueuedSynchronizer$Node.setPrevRelaxed(AbstractQueuedSynchronizer$Node):void (12 bytes)   inline method (bytecode parsing)
                            @ 393  java.lang.Thread.interrupted():boolean (7 bytes)   inline method (bytecode parsing)
                            @ 0  jdk.graal.compiler.options.OptionValues.newOptionMap():EconomicMap (7 bytes)   inline method (bytecode parsing)
                              @ 3  org.graalvm.collections.EconomicMap.create(Equivalence):EconomicMap (6 bytes)   inline method (bytecode parsing)
                                @ 2  org.graalvm.collections.EconomicMapImpl.create(Equivalence, boolean):EconomicMapImpl (13 bytes)   inline method (bytecode parsing)
                                  @ 6  org.graalvm.collections.EconomicMapImpl.<init>(Equivalence, boolean):void (30 bytes)   inline method (bytecode parsing)
                                  @ 9  org.graalvm.collections.EconomicMapImpl.intercept(EconomicMapImpl):EconomicMapImpl (2 bytes)   inline method (bytecode parsing)
                            @ 6  jdk.vm.ci.common.InitTimer.timer(String):InitTimer (19 bytes)   inline method (bytecode parsing)
                            @ 239  org.graalvm.collections.EconomicMap.create():EconomicMap (7 bytes)   inline method (bytecode parsing)
                              @ 3  org.graalvm.collections.EconomicMap.create(Equivalence):EconomicMap (6 bytes)   inline method (bytecode parsing)
                                @ 2  org.graalvm.collections.EconomicMapImpl.create(Equivalence, boolean):EconomicMapImpl (13 bytes)   inline method (bytecode parsing)
                                  @ 6  org.graalvm.collections.EconomicMapImpl.<init>(Equivalence, boolean):void (30 bytes)   inline method (bytecode parsing)
                                  @ 9  org.graalvm.collections.EconomicMapImpl.intercept(EconomicMapImpl):EconomicMapImpl (2 bytes)   inline method (bytecode parsing)
                            @ 295  java.lang.String.startsWith(String):boolean (7 bytes)   inline method (bytecode parsing)
                            @ 305  java.lang.String.length():int (11 bytes)   inline method (bytecode parsing)
                              @ 6  java.lang.String.coder():byte (15 bytes)   inline method (bytecode parsing)
                            @ 308  java.lang.String.substring(int):String (10 bytes)   inline method (bytecode parsing)
                            @ 311  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                                  @ 15  java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer$Node, int, boolean, boolean, boolean, long):int (424 bytes)   not inlining relevance-based (relevance=0.002525, probability=0.002232, bonus=1.000000, nodes=226 > 0.757359)
                              @ 5  java.lang.invoke.LambdaForm$MH/0x00007f8674002400.invoke(Object, Object):Object (25 bytes)   inline method (bytecode parsing)
                                @ 4  java.util.concurrent.locks.ReentrantLock$Sync.lock():void (13 bytes)   relevance-based (relevance=1.144139, probability=1.000000, bonus=1.000000, nodes=57 <= 300.000000)
                                @ 21  java.lang.invoke.DirectMethodHandle$Holder.invokeStatic(Object, Object, Object):Object (15 bytes)   inline method (bytecode parsing)
                                  @ 1  java.lang.invoke.DirectMethodHandle.internalMemberName(Object):Object (8 bytes)   inline method (bytecode parsing)
                                  @ 11  java.lang.StringConcatHelper.simpleConcat(Object, Object):String (94 bytes)   inline method (bytecode parsing)
                                    @ 1  java.lang.StringConcatHelper.stringOf(Object):String (20 bytes)   inline method (bytecode parsing)
                                      @ 5  java.lang.String.toString():String (2 bytes)   inline method (bytecode parsing)
                                    @ 11  java.lang.String.isEmpty():boolean (14 bytes)   inline method (bytecode parsing)
                                    @ 61  java.lang.StringConcatHelper.newArray(long):byte[] (40 bytes)   inline method (bytecode parsing)
                                  @ 1  java.io.PrintStream.ensureOpen():void (18 bytes)   trivial (relevance=1.013001, probability=1.000000, bonus=1.000000, nodes=7)
                            @ 322  java.lang.String.startsWith(String):boolean (7 bytes)   inline method (bytecode parsing)
                            @ 359  java.lang.String.length():int (11 bytes)   inline method (bytecode parsing)
                              @ 6  java.lang.String.coder():byte (15 bytes)   inline method (bytecode parsing)
                            @ 11  jdk.internal.misc.InternalLock.lock():void (8 bytes)   inline method (bytecode parsing)
                            @ 362  java.lang.String.substring(int):String (10 bytes)   inline method (bytecode parsing)
                              @ 4  java.util.concurrent.locks.ReentrantLock.lock():void (8 bytes)   inline method (bytecode parsing)
                            @ 25  jdk.internal.misc.InternalLock.unlock():void (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.util.concurrent.locks.ReentrantLock.unlock():void (10 bytes)   inline method (bytecode parsing)
                                @ 5  java.util.concurrent.locks.AbstractQueuedSynchronizer.release(int):boolean (19 bytes)   inline method (bytecode parsing)
                            @ 9  java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(int):void (20 bytes)   inline method (bytecode parsing)
                            @ 8  jdk.vm.ci.services.Services.getSavedProperty(String):String (13 bytes)   inline method (bytecode parsing)
                                    @ 4  java.util.concurrent.locks.ReentrantLock$Sync.lock():void (13 bytes)   not inlining relevance-based (relevance=0.015069, probability=0.006417, bonus=1.000000, nodes=31 > 4.520579)
                            @ 11  java.lang.Boolean.parseBoolean(String):boolean (7 bytes)   inline method (bytecode parsing)
                            @ 24  java.util.concurrent.atomic.AtomicInteger.<init>():void (5 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.Number.<init>():void (5 bytes)   inline method (bytecode parsing)
                                    @ 18  java.io.BufferedOutputStream.implWrite(byte[], int, int):void (71 bytes)   not inlining relevance-based (relevance=0.015069, probability=0.006417, bonus=1.000000, nodes=55 > 4.520579)
                            @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 8  java.util.concurrent.locks.AbstractOwnableSynchronizer.getExclusiveOwnerThread():Thread (5 bytes)   inline accessor method (bytecode parsing)
                            @ 41  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                            @ 46  java.util.concurrent.locks.AbstractQueuedSynchronizer.setState(int):void (6 bytes)   inline method (bytecode parsing)
                                                        @ 0  jdk.vm.ci.services.Services.checkJVMCIEnabled():void (17 bytes)   trivial (relevance=4.000000, probability=0.030834, bonus=1.000000, nodes=3)
                                    @ 2  java.util.concurrent.locks.ReentrantLock$Sync.tryRelease(int):boolean (51 bytes)   not inlining relevance-based (relevance=0.015069, probability=0.006417, bonus=1.000000, nodes=37 > 4.520579)
                                                          @ 0  java.lang.System.allowSecurityManager():boolean (13 bytes)   trivial (relevance=1.000883, probability=0.007708, bonus=1.000000, nodes=8)
                            @ 22  java.util.concurrent.locks.AbstractQueuedSynchronizer$Node.getAndUnsetStatus(int):int (14 bytes)   inline method (bytecode parsing)
                                                        @ 42  java.lang.System.getSecurityManager():SecurityManager (12 bytes)   relevance-based (relevance=1.000000, probability=0.007708, bonus=1.000000, nodes=14 <= 300.000000)
                              @ 10  jdk.internal.misc.Unsafe.getAndBitwiseAndInt(Object, long, int):int (27 bytes)   inline method (bytecode parsing)
                            @ 12  java.lang.IllegalStateException.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  java.lang.RuntimeException.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                                @ 2  java.lang.Exception.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                                    @ 12  java.util.concurrent.locks.AbstractQueuedSynchronizer.signalNext(AbstractQueuedSynchronizer$Node):void (34 bytes)   not inlining relevance-based (relevance=0.013170, probability=0.005609, bonus=1.000000, nodes=56 > 3.951074)
                            @ 12  java.lang.NullPointerException.<init>():void (5 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.RuntimeException.<init>():void (5 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.Exception.<init>():void (5 bytes)   inline method (bytecode parsing)
                                    @ 55  java.io.BufferedOutputStream.implWrite(byte[], int, int):void (71 bytes)   not inlining relevance-based (relevance=0.015069, probability=0.006417, bonus=1.000000, nodes=55 > 4.520579)
                 n                                              @ 25  java.lang.NullPointerException.getExtendedNPEMessage():String (0 bytes)   not inlining it is a non-intrinsic native method
                 n                                                @ 16  java.lang.Throwable.fillInStackTrace(int):Throwable (0 bytes)   not inlining it is a non-intrinsic native method
              s                                                   @ 37  java.lang.Throwable.fillInStackTrace():Throwable (29 bytes)   relevance-based (relevance=4.000000, probability=0.000964, bonus=1.000000, nodes=34 <= 300.000000)
                            @ 157  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
              s                                                 @ 24  java.lang.NullPointerException.fillInStackTrace():Throwable (41 bytes)   relevance-based (relevance=1.000000, probability=0.000964, bonus=1.000000, nodes=65 <= 300.000000)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                                              @ 1  java.lang.Throwable.<init>():void (29 bytes)   relevance-based (relevance=1.000000, probability=0.000964, bonus=1.000000, nodes=73 <= 300.000000)
                                @ 16  jdk.graal.compiler.hotspot.HotSpotTTYStreamProvider$LogStreamOptionKey$DelayedOutputStream$$Lambda/0x00007f8674264b28.<init>(String):void (10 bytes)   inline method (bytecode parsing)
                                                            @ 18  java.util.Collections$UnmodifiableMap.<init>(Map):void (22 bytes)   relevance-based (relevance=1.000000, probability=0.001927, bonus=1.000000, nodes=87 <= 300.000000)
                            @ 210  jdk.vm.ci.hotspot.HotSpotJVMCIRuntime.getLogStream():OutputStream (9 bytes)   inline method (bytecode parsing)
                                                          @ 19  java.util.Collections.unmodifiableMap(Map):Map (22 bytes)   relevance-based (relevance=1.000000, probability=0.003854, bonus=1.000000, nodes=95 <= 300.000000)
                 n                                          @ 16  java.lang.Throwable.fillInStackTrace(int):Throwable (0 bytes)   not inlining it is a non-intrinsic native method
              s                                             @ 24  java.lang.Throwable.fillInStackTrace():Throwable (29 bytes)   relevance-based (relevance=1.000000, probability=0.003854, bonus=1.000000, nodes=34 <= 300.000000)
                                                          @ 2  java.lang.Throwable.<init>(String):void (34 bytes)   relevance-based (relevance=16.000000, probability=0.003854, bonus=1.000000, nodes=45 <= 300.000000)
                                                        @ 61  jdk.internal.misc.VM.getSavedProperties():Map (23 bytes)   relevance-based (relevance=1.000883, probability=0.007708, bonus=1.000000, nodes=147 <= 300.000000)
                            @ 0  jdk.graal.compiler.options.OptionValues.newOptionMap():EconomicMap (7 bytes)   inline method (bytecode parsing)
                              @ 3  org.graalvm.collections.EconomicMap.create(Equivalence):EconomicMap (6 bytes)   inline method (bytecode parsing)
                                @ 2  org.graalvm.collections.EconomicMapImpl.create(Equivalence, boolean):EconomicMapImpl (13 bytes)   inline method (bytecode parsing)
                                  @ 6  org.graalvm.collections.EconomicMapImpl.<init>(Equivalence, boolean):void (30 bytes)   inline method (bytecode parsing)
                                                      @ 0  jdk.vm.ci.services.Services.getSavedProperties():Map (81 bytes)   relevance-based (relevance=1.000000, probability=0.030834, bonus=1.000000, nodes=201 <= 300.000000)
                                  @ 9  org.graalvm.collections.EconomicMapImpl.intercept(EconomicMapImpl):EconomicMapImpl (2 bytes)   inline method (bytecode parsing)
                            @ 6  jdk.vm.ci.common.InitTimer.timer(String):InitTimer (19 bytes)   inline method (bytecode parsing)
                            @ 239  org.graalvm.collections.EconomicMap.create():EconomicMap (7 bytes)   inline method (bytecode parsing)
                                                    @ 4  java.util.Map.get(Object):Object (0 bytes)   not inlining no type profile exists
                              @ 3  org.graalvm.collections.EconomicMap.create(Equivalence):EconomicMap (6 bytes)   inline method (bytecode parsing)
                                @ 2  org.graalvm.collections.EconomicMapImpl.create(Equivalence, boolean):EconomicMapImpl (13 bytes)   inline method (bytecode parsing)
                                  @ 6  org.graalvm.collections.EconomicMapImpl.<init>(Equivalence, boolean):void (30 bytes)   inline method (bytecode parsing)
                                  @ 9  org.graalvm.collections.EconomicMapImpl.intercept(EconomicMapImpl):EconomicMapImpl (2 bytes)   inline method (bytecode parsing)
                            @ 295  java.lang.String.startsWith(String):boolean (7 bytes)   inline method (bytecode parsing)
                            @ 305  java.lang.String.length():int (11 bytes)   inline method (bytecode parsing)
                                                          @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.006504, bonus=1.000000, nodes=5)
                              @ 6  java.lang.String.coder():byte (15 bytes)   inline method (bytecode parsing)
                                                        @ 14  java.lang.String.length():int (11 bytes)   trivial (relevance=2.000000, probability=0.006504, bonus=1.000000, nodes=8)
                            @ 308  java.lang.String.substring(int):String (10 bytes)   inline method (bytecode parsing)
                            @ 311  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.LambdaForm$MH/0x00007f8674002400.invoke(Object, Object):Object (25 bytes)   inline method (bytecode parsing)
                                                          @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.006504, bonus=1.000000, nodes=5)
                                @ 21  java.lang.invoke.DirectMethodHandle$Holder.invokeStatic(Object, Object, Object):Object (15 bytes)   inline method (bytecode parsing)
                                                        @ 18  java.lang.String.length():int (11 bytes)   trivial (relevance=2.000000, probability=0.006504, bonus=1.000000, nodes=5)
                                  @ 1  java.lang.invoke.DirectMethodHandle.internalMemberName(Object):Object (8 bytes)   inline method (bytecode parsing)
                                  @ 11  java.lang.StringConcatHelper.simpleConcat(Object, Object):String (94 bytes)   inline method (bytecode parsing)
                                    @ 1  java.lang.StringConcatHelper.stringOf(Object):String (20 bytes)   inline method (bytecode parsing)
                                      @ 5  java.lang.String.toString():String (2 bytes)   inline method (bytecode parsing)
                                                          @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.003252, bonus=1.000000, nodes=5)
                                    @ 11  java.lang.String.isEmpty():boolean (14 bytes)   inline method (bytecode parsing)
                                                        @ 30  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000000, probability=0.003252, bonus=1.000000, nodes=5)
                                    @ 61  java.lang.StringConcatHelper.newArray(long):byte[] (40 bytes)   inline method (bytecode parsing)
                            @ 146  java.lang.StringUTF16.regionMatchesCI_Latin1(byte[], int, byte[], int, int):boolean (10 bytes)   inline method (bytecode parsing)
                            @ 322  java.lang.String.startsWith(String):boolean (7 bytes)   inline method (bytecode parsing)
                            @ 359  java.lang.String.length():int (11 bytes)   inline method (bytecode parsing)
                              @ 6  java.lang.String.coder():byte (15 bytes)   inline method (bytecode parsing)
                                                            @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.003252, bonus=1.000000, nodes=5)
                            @ 362  java.lang.String.substring(int):String (10 bytes)   inline method (bytecode parsing)
                                                          @ 27  java.lang.String.length():int (11 bytes)   trivial (relevance=16.000000, probability=0.003252, bonus=1.000000, nodes=5)
                                                            @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.003252, bonus=1.000000, nodes=5)
                                                          @ 43  java.lang.String.length():int (11 bytes)   trivial (relevance=16.000000, probability=0.003252, bonus=1.000000, nodes=8)
                                                          @ 70  java.lang.String.coder():byte (15 bytes)   trivial (relevance=4.000000, probability=0.000813, bonus=1.000000, nodes=5)
                                                          @ 78  java.lang.String.coder():byte (15 bytes)   trivial (relevance=2.000000, probability=0.000813, bonus=1.000000, nodes=5)
                            @ 58  java.lang.Character.toUpperCase(char):char (6 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.Character.toUpperCase(int):int (9 bytes)   inline method (bytecode parsing)
                            @ 8  jdk.vm.ci.services.Services.getSavedProperty(String):String (13 bytes)   inline method (bytecode parsing)
                            @ 75  java.lang.Character.toLowerCase(char):char (6 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.Character.toLowerCase(int):int (9 bytes)   inline method (bytecode parsing)
                            @ 11  java.lang.Boolean.parseBoolean(String):boolean (7 bytes)   inline method (bytecode parsing)
                            @ 80  java.lang.Character.toLowerCase(char):char (6 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.Character.toLowerCase(int):int (9 bytes)   inline method (bytecode parsing)
                            @ 24  java.util.concurrent.atomic.AtomicInteger.<init>():void (5 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.Number.<init>():void (5 bytes)   inline method (bytecode parsing)
                                                            @ 50  java.lang.CharacterDataLatin1.toUpperCase(int):int (67 bytes)   relevance-based (relevance=4.000000, probability=0.000181, bonus=1.000000, nodes=52 <= 300.000000)
                                                @ 0  jdk.vm.ci.services.Services.checkJVMCIEnabled():void (17 bytes)   trivial (relevance=4.000000, probability=0.030849, bonus=1.000000, nodes=3)
                                                            @ 1  java.lang.CharacterData.of(int):CharacterData (136 bytes)   trivial (relevance=32.000000, probability=0.000181, bonus=1.000000, nodes=8)
                                                  @ 0  java.lang.System.allowSecurityManager():boolean (13 bytes)   trivial (relevance=1.000883, probability=0.007712, bonus=1.000000, nodes=8)
                                                @ 42  java.lang.System.getSecurityManager():SecurityManager (12 bytes)   relevance-based (relevance=1.000000, probability=0.007712, bonus=1.000000, nodes=14 <= 300.000000)
                            @ 12  java.lang.IllegalStateException.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                                                            @ 5  java.lang.CharacterDataLatin1.toUpperCase(int):int (67 bytes)   relevance-based (relevance=32.000000, probability=0.000181, bonus=1.000000, nodes=52 <= 300.000000)
                              @ 2  java.lang.RuntimeException.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                                @ 2  java.lang.Exception.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                                                            @ 1  java.lang.CharacterData.of(int):CharacterData (136 bytes)   trivial (relevance=16.000000, probability=0.000090, bonus=1.000000, nodes=8)
                            @ 12  java.lang.NullPointerException.<init>():void (5 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.RuntimeException.<init>():void (5 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.Exception.<init>():void (5 bytes)   inline method (bytecode parsing)
                                                            @ 5  java.lang.CharacterDataLatin1.toLowerCase(int):int (44 bytes)   relevance-based (relevance=16.000000, probability=0.000090, bonus=1.000000, nodes=38 <= 300.000000)
                                                            @ 1  java.lang.CharacterData.of(int):CharacterData (136 bytes)   trivial (relevance=16.000000, probability=0.000090, bonus=1.000000, nodes=8)
                 n                                      @ 25  java.lang.NullPointerException.getExtendedNPEMessage():String (0 bytes)   not inlining it is a non-intrinsic native method
                                                            @ 5  java.lang.CharacterDataLatin1.toLowerCase(int):int (44 bytes)   relevance-based (relevance=16.000000, probability=0.000090, bonus=1.000000, nodes=38 <= 300.000000)
                 n                                        @ 16  java.lang.Throwable.fillInStackTrace(int):Throwable (0 bytes)   not inlining it is a non-intrinsic native method
              s                                           @ 37  java.lang.Throwable.fillInStackTrace():Throwable (29 bytes)   relevance-based (relevance=4.000000, probability=0.000964, bonus=1.000000, nodes=34 <= 300.000000)
                                                          @ 131  java.lang.StringLatin1.regionMatchesCI_UTF16(byte[], int, byte[], int, int):boolean (93 bytes)   relevance-based (relevance=1.000000, probability=0.000407, bonus=1.000000, nodes=206 <= 300.000000)
              s                                         @ 24  java.lang.NullPointerException.fillInStackTrace():Throwable (41 bytes)   relevance-based (relevance=1.000000, probability=0.000964, bonus=1.000000, nodes=65 <= 300.000000)
                                                      @ 1  java.lang.Throwable.<init>():void (29 bytes)   relevance-based (relevance=1.000000, probability=0.000964, bonus=1.000000, nodes=73 <= 300.000000)
                                                    @ 18  java.util.Collections$UnmodifiableMap.<init>(Map):void (22 bytes)   relevance-based (relevance=1.000000, probability=0.001928, bonus=1.000000, nodes=87 <= 300.000000)
                                                  @ 19  java.util.Collections.unmodifiableMap(Map):Map (22 bytes)   relevance-based (relevance=1.000000, probability=0.003856, bonus=1.000000, nodes=95 <= 300.000000)
                                                            @ 32  java.lang.CharacterDataLatin1.equalsIgnoreCase(byte, byte):boolean (63 bytes)   relevance-based (relevance=2.000000, probability=0.000271, bonus=1.000000, nodes=42 <= 300.000000)
                                                          @ 98  java.lang.StringLatin1.regionMatchesCI(byte[], int, byte[], int, int):boolean (45 bytes)   relevance-based (relevance=1.000000, probability=0.000407, bonus=1.000000, nodes=64 <= 300.000000)
                                                        @ 33  java.lang.String.regionMatches(boolean, int, String, int, int):boolean (150 bytes)   relevance-based (relevance=1.000000, probability=0.003252, bonus=1.000000, nodes=285 <= 300.000000)
                 n                                  @ 16  java.lang.Throwable.fillInStackTrace(int):Throwable (0 bytes)   not inlining it is a non-intrinsic native method
              s                                     @ 24  java.lang.Throwable.fillInStackTrace():Throwable (29 bytes)   relevance-based (relevance=1.000000, probability=0.003856, bonus=1.000000, nodes=34 <= 300.000000)
                                                  @ 2  java.lang.Throwable.<init>(String):void (34 bytes)   relevance-based (relevance=16.000000, probability=0.003856, bonus=1.000000, nodes=45 <= 300.000000)
                                                @ 61  jdk.internal.misc.VM.getSavedProperties():Map (23 bytes)   relevance-based (relevance=1.000883, probability=0.007712, bonus=1.000000, nodes=147 <= 300.000000)
                                                      @ 3  java.lang.String.equalsIgnoreCase(String):boolean (45 bytes)   not inlining relevance-based (relevance=3.377981, probability=0.026016, bonus=1.000000, nodes=302 > 300.000000)
                                                    @ 0  jdk.vm.ci.common.InitTimer.isEnabled():boolean (37 bytes)   relevance-based (relevance=2.000000, probability=0.061668, bonus=1.000000, nodes=237 <= 300.000000)
                                              @ 0  jdk.vm.ci.services.Services.getSavedProperties():Map (81 bytes)   relevance-based (relevance=1.000000, probability=0.030849, bonus=1.000000, nodes=201 <= 300.000000)
                                                  @ 4  jdk.graal.compiler.hotspot.HotSpotGraalOptionValues.parseOptions():EconomicMap (417 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.061668, bonus=1.000000, nodes=496 > 300.000000)
                                            @ 4  java.util.Map.get(Object):Object (0 bytes)   not inlining no type profile exists
                            @ 4  jdk.graal.compiler.options.OptionValues.newOptionMap():EconomicMap (7 bytes)   inline method (bytecode parsing)
                              @ 3  org.graalvm.collections.EconomicMap.create(Equivalence):EconomicMap (6 bytes)   inline method (bytecode parsing)
                                @ 2  org.graalvm.collections.EconomicMapImpl.create(Equivalence, boolean):EconomicMapImpl (13 bytes)   inline method (bytecode parsing)
                                  @ 6  org.graalvm.collections.EconomicMapImpl.<init>(Equivalence, boolean):void (30 bytes)   inline method (bytecode parsing)
                                  @ 9  org.graalvm.collections.EconomicMapImpl.intercept(EconomicMapImpl):EconomicMapImpl (2 bytes)   inline method (bytecode parsing)
                                                  @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.006507, bonus=1.000000, nodes=5)
                                                    @ 1  org.graalvm.collections.UnmodifiableEconomicMap.getEntries():UnmodifiableMapCursor (0 bytes)   not inlining no type profile exists
                                                    @ 8  org.graalvm.collections.UnmodifiableMapCursor.advance():boolean (0 bytes)   not inlining no type profile exists
                                                @ 14  java.lang.String.length():int (11 bytes)   trivial (relevance=2.000000, probability=0.006507, bonus=1.000000, nodes=8)
                                                    @ 18  org.graalvm.collections.UnmodifiableMapCursor.getKey():Object (0 bytes)   not inlining no type profile exists
                                                    @ 27  org.graalvm.collections.UnmodifiableMapCursor.getValue():Object (0 bytes)   not inlining no type profile exists
                                                      @ 32  jdk.graal.compiler.options.OptionValues.encodeNull(Object):Object (12 bytes)   relevance-based (relevance=1.000000, probability=0.061668, bonus=1.000000, nodes=14 <= 300.000000)
                                                  @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.006507, bonus=1.000000, nodes=5)
                                                @ 18  java.lang.String.length():int (11 bytes)   trivial (relevance=2.000000, probability=0.006507, bonus=1.000000, nodes=5)
                            @ 111  org.graalvm.collections.EconomicMapImpl.setKey(int, Object):void (10 bytes)   inline method (bytecode parsing)
                            @ 143  org.graalvm.collections.EconomicMapImpl.size():int (10 bytes)   inline method (bytecode parsing)
                            @ 147  org.graalvm.collections.EconomicMapImpl.size():int (10 bytes)   inline method (bytecode parsing)
                                                  @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.003254, bonus=1.000000, nodes=5)
                                                @ 30  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000000, probability=0.003254, bonus=1.000000, nodes=5)
                                                      @ 35  org.graalvm.collections.EconomicMapImpl.put(Object, Object):Object (192 bytes)   not inlining too large previous low-level graph (low-level-nodes: 1279, relevance=1.000000, probability=0.061668, bonus=1.000000, nodes=101)
                                                    @ 10  jdk.graal.compiler.options.OptionValues.initMap(EconomicMap, UnmodifiableEconomicMap):void (45 bytes)   not inlining callee invoke probability is too high (invokeP=6.000000, relevance=1.000000, probability=0.061668, bonus=1.000000, nodes=44)
                                                  @ 7  jdk.graal.compiler.options.OptionValues.<init>(UnmodifiableEconomicMap):void (19 bytes)   relevance-based (relevance=1.000000, probability=0.061668, bonus=1.000000, nodes=24 <= 300.000000)
                            @ 146  java.lang.StringUTF16.regionMatchesCI_Latin1(byte[], int, byte[], int, int):boolean (10 bytes)   inline method (bytecode parsing)
                                                @ 21  jdk.graal.compiler.hotspot.HotSpotGraalOptionValues.initializeOptions():OptionValues (11 bytes)   relevance-based (relevance=1.000000, probability=0.061668, bonus=1.000000, nodes=27 <= 300.000000)
                                              @ 22  jdk.graal.compiler.hotspot.HotSpotGraalOptionValues.defaultOptions():OptionValues (41 bytes)   relevance-based (relevance=6.183661, probability=0.246672, bonus=1.000000, nodes=60 <= 300.000000)
                            @ 23  jdk.graal.compiler.options.OptionValues.get(OptionKey):Object (9 bytes)   inline method (bytecode parsing)
                                                    @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.003254, bonus=1.000000, nodes=5)
                            @ 13  jdk.graal.compiler.options.OptionKey.getDefaultValue():Object (5 bytes)   inline accessor method (bytecode parsing)
                                                  @ 27  java.lang.String.length():int (11 bytes)   trivial (relevance=16.000000, probability=0.003254, bonus=1.000000, nodes=5)
                                                @ 2  org.graalvm.collections.UnmodifiableEconomicMap.get(Object):Object (0 bytes)   not inlining no type profile exists
                                                  @ 18  jdk.graal.compiler.options.OptionValues.decodeNull(Object):Object (13 bytes)   relevance-based (relevance=1.000000, probability=0.123336, bonus=1.000000, nodes=15 <= 300.000000)
                                                    @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.003254, bonus=1.000000, nodes=5)
                                                @ 5  jdk.graal.compiler.options.OptionValues.get(UnmodifiableEconomicMap, OptionKey):Object (22 bytes)   relevance-based (relevance=1.000000, probability=0.246672, bonus=1.000000, nodes=26 <= 300.000000)
                                                  @ 43  java.lang.String.length():int (11 bytes)   trivial (relevance=16.000000, probability=0.003254, bonus=1.000000, nodes=8)
                                              @ 25  jdk.graal.compiler.options.OptionKey.getValue(OptionValues):Object (27 bytes)   relevance-based (relevance=4.000000, probability=0.246672, bonus=1.000000, nodes=31 <= 300.000000)
                                                  @ 70  java.lang.String.coder():byte (15 bytes)   trivial (relevance=4.000000, probability=0.000813, bonus=1.000000, nodes=5)
                            @ 5  java.lang.String.contains(CharSequence):boolean (19 bytes)   inline method (bytecode parsing)
                              @ 2  java.lang.String.toString():String (2 bytes)   inline method (bytecode parsing)
                                                  @ 78  java.lang.String.coder():byte (15 bytes)   trivial (relevance=2.000000, probability=0.000813, bonus=1.000000, nodes=5)
                            @ 24  java.lang.String.contains(CharSequence):boolean (19 bytes)   inline method (bytecode parsing)
                              @ 2  java.lang.String.toString():String (2 bytes)   inline method (bytecode parsing)
                            @ 44  java.lang.String.contains(CharSequence):boolean (19 bytes)   inline method (bytecode parsing)
                              @ 2  java.lang.String.toString():String (2 bytes)   inline method (bytecode parsing)
                            @ 58  java.lang.Character.toUpperCase(char):char (6 bytes)   inline method (bytecode parsing)
                            @ 64  java.lang.String.contains(CharSequence):boolean (19 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.Character.toUpperCase(int):int (9 bytes)   inline method (bytecode parsing)
                              @ 2  java.lang.String.toString():String (2 bytes)   inline method (bytecode parsing)
                            @ 75  java.lang.Character.toLowerCase(char):char (6 bytes)   inline method (bytecode parsing)
                            @ 76  java.lang.String.valueOf(long):String (5 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.Character.toLowerCase(int):int (9 bytes)   inline method (bytecode parsing)
                            @ 80  java.lang.Character.toLowerCase(char):char (6 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.Character.toLowerCase(int):int (9 bytes)   inline method (bytecode parsing)
                                                    @ 50  java.lang.CharacterDataLatin1.toUpperCase(int):int (67 bytes)   relevance-based (relevance=4.000000, probability=0.000181, bonus=1.000000, nodes=52 <= 300.000000)
                                                  @ 1  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.123336, bonus=1.000000, nodes=5)
                                                  @ 7  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.123336, bonus=1.000000, nodes=5)
                                                  @ 14  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=0.123336, bonus=1.000000, nodes=9)
                                                    @ 1  java.lang.CharacterData.of(int):CharacterData (136 bytes)   trivial (relevance=32.000000, probability=0.000181, bonus=1.000000, nodes=8)
                                                  @ 28  java.lang.StringLatin1.indexOf(byte[], byte[]):int (25 bytes)   relevance-based (relevance=1.000000, probability=0.123336, bonus=1.000000, nodes=16 <= 300.000000)
                                                @ 7  java.lang.String.indexOf(String):int (64 bytes)   relevance-based (relevance=2.000000, probability=0.123336, bonus=1.000000, nodes=25 <= 300.000000)
                                                    @ 5  java.lang.CharacterDataLatin1.toUpperCase(int):int (67 bytes)   relevance-based (relevance=32.000000, probability=0.000181, bonus=1.000000, nodes=52 <= 300.000000)
                                                @ 14  jdk.graal.compiler.serviceprovider.GraalServices.getExecutionID():String (12 bytes)   trivial (relevance=1.000000, probability=0.061668, bonus=1.000000, nodes=3)
                                                    @ 1  java.lang.CharacterData.of(int):CharacterData (136 bytes)   trivial (relevance=16.000000, probability=0.000090, bonus=1.000000, nodes=8)
                                                  @ 1  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.061668, bonus=1.000000, nodes=5)
                                                  @ 7  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.061668, bonus=1.000000, nodes=5)
                                                    @ 5  java.lang.CharacterDataLatin1.toLowerCase(int):int (44 bytes)   relevance-based (relevance=16.000000, probability=0.000090, bonus=1.000000, nodes=38 <= 300.000000)
                                                  @ 14  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=0.061668, bonus=1.000000, nodes=9)
                                                  @ 28  java.lang.StringLatin1.indexOf(byte[], byte[]):int (25 bytes)   relevance-based (relevance=1.000000, probability=0.061668, bonus=1.000000, nodes=16 <= 300.000000)
                                                    @ 1  java.lang.CharacterData.of(int):CharacterData (136 bytes)   trivial (relevance=16.000000, probability=0.000090, bonus=1.000000, nodes=8)
                                                @ 7  java.lang.String.indexOf(String):int (64 bytes)   relevance-based (relevance=1.000000, probability=0.061668, bonus=1.000000, nodes=25 <= 300.000000)
                                                    @ 5  java.lang.CharacterDataLatin1.toLowerCase(int):int (44 bytes)   relevance-based (relevance=16.000000, probability=0.000090, bonus=1.000000, nodes=38 <= 300.000000)
                                                  @ 1  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.123336, bonus=1.000000, nodes=5)
                                                  @ 131  java.lang.StringLatin1.regionMatchesCI_UTF16(byte[], int, byte[], int, int):boolean (93 bytes)   relevance-based (relevance=1.000000, probability=0.000407, bonus=1.000000, nodes=206 <= 300.000000)
                                                  @ 7  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.123336, bonus=1.000000, nodes=5)
                                                  @ 14  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=0.123336, bonus=1.000000, nodes=9)
                                                  @ 28  java.lang.StringLatin1.indexOf(byte[], byte[]):int (25 bytes)   relevance-based (relevance=1.000000, probability=0.123336, bonus=1.000000, nodes=16 <= 300.000000)
                                                @ 7  java.lang.String.indexOf(String):int (64 bytes)   relevance-based (relevance=2.000020, probability=0.123336, bonus=1.000000, nodes=25 <= 300.000000)
                                                  @ 1  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.123336, bonus=1.000000, nodes=5)
                                                    @ 32  java.lang.CharacterDataLatin1.equalsIgnoreCase(byte, byte):boolean (63 bytes)   relevance-based (relevance=2.000000, probability=0.000271, bonus=1.000000, nodes=42 <= 300.000000)
                                                  @ 7  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.123336, bonus=1.000000, nodes=5)
                                                  @ 14  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=0.123336, bonus=1.000000, nodes=9)
                                                  @ 98  java.lang.StringLatin1.regionMatchesCI(byte[], int, byte[], int, int):boolean (45 bytes)   relevance-based (relevance=1.000000, probability=0.000407, bonus=1.000000, nodes=64 <= 300.000000)
                                                @ 33  java.lang.String.regionMatches(boolean, int, String, int, int):boolean (150 bytes)   relevance-based (relevance=1.000000, probability=0.003254, bonus=1.000000, nodes=285 <= 300.000000)
                                                  @ 28  java.lang.StringLatin1.indexOf(byte[], byte[]):int (25 bytes)   relevance-based (relevance=1.000000, probability=0.123336, bonus=1.000000, nodes=16 <= 300.000000)
                                                @ 7  java.lang.String.indexOf(String):int (64 bytes)   relevance-based (relevance=2.000020, probability=0.123336, bonus=1.000000, nodes=25 <= 300.000000)
                            @ 28  java.lang.String.<init>(byte[], byte):void (15 bytes)   inline method (bytecode parsing)
                                              @ 3  java.lang.String.equalsIgnoreCase(String):boolean (45 bytes)   not inlining relevance-based (relevance=3.377981, probability=0.026029, bonus=1.000000, nodes=302 > 300.000000)
                                                  @ 1  java.lang.Long.stringSize(long):int (55 bytes)   relevance-based (relevance=1.000000, probability=0.061668, bonus=1.000000, nodes=34 <= 300.000000)
                                            @ 0  jdk.vm.ci.common.InitTimer.isEnabled():boolean (37 bytes)   relevance-based (relevance=2.000000, probability=0.061698, bonus=1.000000, nodes=237 <= 300.000000)
                                                  @ 18  java.lang.Long.getChars(long, int, byte[]):int (195 bytes)   relevance-based (relevance=1.000000, probability=0.061668, bonus=1.000000, nodes=64 <= 300.000000)
                                          @ 4  jdk.graal.compiler.hotspot.HotSpotGraalOptionValues.parseOptions():EconomicMap (417 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.061698, bonus=1.000000, nodes=496 > 300.000000)
                                                @ 1  java.lang.Long.toString(long):String (55 bytes)   relevance-based (relevance=1.000010, probability=0.061668, bonus=1.000000, nodes=98 <= 300.000000)
                            @ 4  jdk.graal.compiler.options.OptionValues.newOptionMap():EconomicMap (7 bytes)   inline method (bytecode parsing)
                              @ 3  org.graalvm.collections.EconomicMap.create(Equivalence):EconomicMap (6 bytes)   inline method (bytecode parsing)
                                @ 2  org.graalvm.collections.EconomicMapImpl.create(Equivalence, boolean):EconomicMapImpl (13 bytes)   inline method (bytecode parsing)
                                  @ 6  org.graalvm.collections.EconomicMapImpl.<init>(Equivalence, boolean):void (30 bytes)   inline method (bytecode parsing)
                                  @ 9  org.graalvm.collections.EconomicMapImpl.intercept(EconomicMapImpl):EconomicMapImpl (2 bytes)   inline method (bytecode parsing)
                            @ 206  java.lang.StringBuilder.<init>(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 215  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                                            @ 1  org.graalvm.collections.UnmodifiableEconomicMap.getEntries():UnmodifiableMapCursor (0 bytes)   not inlining no type profile exists
                            @ 237  java.lang.StringBuilder.append(char):StringBuilder (8 bytes)   inline method (bytecode parsing)
                                            @ 8  org.graalvm.collections.UnmodifiableMapCursor.advance():boolean (0 bytes)   not inlining no type profile exists
                                            @ 18  org.graalvm.collections.UnmodifiableMapCursor.getKey():Object (0 bytes)   not inlining no type profile exists
                            @ 242  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                                            @ 27  org.graalvm.collections.UnmodifiableMapCursor.getValue():Object (0 bytes)   not inlining no type profile exists
                            @ 254  java.lang.StringBuilder.toString():String (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.String.<init>(StringBuilder):void (7 bytes)   inline method (bytecode parsing)
                                              @ 32  jdk.graal.compiler.options.OptionValues.encodeNull(Object):Object (12 bytes)   relevance-based (relevance=1.000000, probability=0.061698, bonus=1.000000, nodes=14 <= 300.000000)
                                                  @ 1  java.lang.String.toString():String (2 bytes)   trivial (relevance=8.000000, probability=0.061668, bonus=1.000000, nodes=4)
                            @ 111  org.graalvm.collections.EconomicMapImpl.setKey(int, Object):void (10 bytes)   inline method (bytecode parsing)
                            @ 143  org.graalvm.collections.EconomicMapImpl.size():int (10 bytes)   inline method (bytecode parsing)
                                                  @ 8  java.lang.String.toString():String (2 bytes)   trivial (relevance=8.000000, probability=0.061668, bonus=1.000000, nodes=4)
                            @ 147  org.graalvm.collections.EconomicMapImpl.size():int (10 bytes)   inline method (bytecode parsing)
                                                    @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.061668, bonus=1.000000, nodes=5)
                                                  @ 16  java.lang.String.length():int (11 bytes)   trivial (relevance=8.000000, probability=0.061668, bonus=1.000000, nodes=8)
                                              @ 35  org.graalvm.collections.EconomicMapImpl.put(Object, Object):Object (192 bytes)   not inlining too large previous low-level graph (low-level-nodes: 1279, relevance=1.000000, probability=0.061698, bonus=1.000000, nodes=101)
                                            @ 10  jdk.graal.compiler.options.OptionValues.initMap(EconomicMap, UnmodifiableEconomicMap):void (45 bytes)   not inlining callee invoke probability is too high (invokeP=6.000000, relevance=1.000000, probability=0.061698, bonus=1.000000, nodes=44)
                                          @ 7  jdk.graal.compiler.options.OptionValues.<init>(UnmodifiableEconomicMap):void (19 bytes)   relevance-based (relevance=1.000000, probability=0.061698, bonus=1.000000, nodes=24 <= 300.000000)
                                        @ 21  jdk.graal.compiler.hotspot.HotSpotGraalOptionValues.initializeOptions():OptionValues (11 bytes)   relevance-based (relevance=1.000000, probability=0.061698, bonus=1.000000, nodes=27 <= 300.000000)
                                      @ 22  jdk.graal.compiler.hotspot.HotSpotGraalOptionValues.defaultOptions():OptionValues (41 bytes)   relevance-based (relevance=6.183661, probability=0.246791, bonus=1.000000, nodes=60 <= 300.000000)
                                                    @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.061668, bonus=1.000000, nodes=5)
                                                  @ 22  java.lang.String.length():int (11 bytes)   trivial (relevance=8.000000, probability=0.061668, bonus=1.000000, nodes=5)
                            @ 23  jdk.graal.compiler.options.OptionValues.get(OptionKey):Object (9 bytes)   inline method (bytecode parsing)
                                                    @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.061668, bonus=1.000000, nodes=5)
                                                  @ 29  java.lang.String.length():int (11 bytes)   trivial (relevance=21.333333, probability=0.061668, bonus=1.000000, nodes=8)
                            @ 13  jdk.graal.compiler.options.OptionKey.getDefaultValue():Object (5 bytes)   inline accessor method (bytecode parsing)
                                                  @ 68  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=21.333333, probability=0.061668, bonus=1.000000, nodes=9)
                                        @ 2  org.graalvm.collections.UnmodifiableEconomicMap.get(Object):Object (0 bytes)   not inlining no type profile exists
                                          @ 18  jdk.graal.compiler.options.OptionValues.decodeNull(Object):Object (13 bytes)   relevance-based (relevance=1.000000, probability=0.123396, bonus=1.000000, nodes=15 <= 300.000000)
                                                  @ 74  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=21.333333, probability=0.061668, bonus=1.000000, nodes=5)
                                        @ 5  jdk.graal.compiler.options.OptionValues.get(UnmodifiableEconomicMap, OptionKey):Object (22 bytes)   relevance-based (relevance=1.000000, probability=0.246791, bonus=1.000000, nodes=26 <= 300.000000)
                                                  @ 81  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=21.333333, probability=0.061668, bonus=1.000000, nodes=9)
                                      @ 25  jdk.graal.compiler.options.OptionKey.getValue(OptionValues):Object (27 bytes)   relevance-based (relevance=4.000000, probability=0.246791, bonus=1.000000, nodes=31 <= 300.000000)
                            @ 5  java.lang.String.contains(CharSequence):boolean (19 bytes)   inline method (bytecode parsing)
                              @ 2  java.lang.String.toString():String (2 bytes)   inline method (bytecode parsing)
                            @ 162  java.lang.StringConcatHelper.newArray(long):byte[] (40 bytes)   inline method (bytecode parsing)
                            @ 24  java.lang.String.contains(CharSequence):boolean (19 bytes)   inline method (bytecode parsing)
                              @ 2  java.lang.String.toString():String (2 bytes)   inline method (bytecode parsing)
                            @ 44  java.lang.String.contains(CharSequence):boolean (19 bytes)   inline method (bytecode parsing)
                            @ 287  java.lang.String.<init>(byte[], byte):void (15 bytes)   inline method (bytecode parsing)
                              @ 2  java.lang.String.toString():String (2 bytes)   inline method (bytecode parsing)
                            @ 64  java.lang.String.contains(CharSequence):boolean (19 bytes)   inline method (bytecode parsing)
                              @ 2  java.lang.String.toString():String (2 bytes)   inline method (bytecode parsing)
                            @ 76  java.lang.String.valueOf(long):String (5 bytes)   inline method (bytecode parsing)
                                                      @ 3  java.lang.Math.max(int, int):int (11 bytes)   trivial (relevance=0.500000, probability=0.000361, bonus=1.000000, nodes=8)
                                                    @ 94  jdk.internal.util.ArraysSupport.newLength(int, int, int):int (27 bytes)   relevance-based (relevance=0.500000, probability=0.000361, bonus=1.000000, nodes=15 <= 150.000000)
                                          @ 1  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.123396, bonus=1.000000, nodes=5)
                                                      @ 25  java.lang.Math.min(int, int):int (11 bytes)   trivial (relevance=0.500005, probability=0.000352, bonus=1.000000, nodes=7)
                                          @ 7  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.123396, bonus=1.000000, nodes=5)
                                                    @ 97  java.util.Arrays.copyOf(int[], int):int[] (33 bytes)   relevance-based (relevance=0.500000, probability=0.000361, bonus=1.000000, nodes=28 <= 150.000000)
                                          @ 14  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=0.123396, bonus=1.000000, nodes=9)
                                          @ 28  java.lang.StringLatin1.indexOf(byte[], byte[]):int (25 bytes)   relevance-based (relevance=1.000000, probability=0.123396, bonus=1.000000, nodes=16 <= 300.000000)
                                        @ 7  java.lang.String.indexOf(String):int (64 bytes)   relevance-based (relevance=2.000000, probability=0.123396, bonus=1.000000, nodes=25 <= 300.000000)
                                                      @ 51  jdk.internal.misc.Unsafe.allocateUninitializedArray0(Class, int):Object (90 bytes)   trivial (relevance=0.499990, probability=0.000361, bonus=1.000000, nodes=6)
                                                    @ 33  jdk.internal.misc.Unsafe.allocateUninitializedArray(Class, int):Object (55 bytes)   relevance-based (relevance=0.499990, probability=0.000361, bonus=1.000000, nodes=10 <= 149.997000)
                                        @ 14  jdk.graal.compiler.serviceprovider.GraalServices.getExecutionID():String (12 bytes)   trivial (relevance=1.000000, probability=0.061698, bonus=1.000000, nodes=3)
                                                  @ 120  java.lang.StringLatin1.replace(byte[], int, byte[], int, byte[], int):String (291 bytes)   relevance-based (relevance=1.000000, probability=0.002891, bonus=1.000000, nodes=208 <= 300.000000)
                                          @ 1  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.061698, bonus=1.000000, nodes=5)
                                          @ 7  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.061698, bonus=1.000000, nodes=5)
                                          @ 14  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=0.061698, bonus=1.000000, nodes=9)
                                          @ 28  java.lang.StringLatin1.indexOf(byte[], byte[]):int (25 bytes)   relevance-based (relevance=1.000000, probability=0.061698, bonus=1.000000, nodes=16 <= 300.000000)
                                        @ 7  java.lang.String.indexOf(String):int (64 bytes)   relevance-based (relevance=1.000000, probability=0.061698, bonus=1.000000, nodes=25 <= 300.000000)
                                          @ 1  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.123396, bonus=1.000000, nodes=5)
                            @ 588  java.lang.StringUTF16.compress(byte[], int, int):byte[] (20 bytes)   inline method (bytecode parsing)
                                          @ 7  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.123396, bonus=1.000000, nodes=5)
                            @ 605  java.lang.String.<init>(byte[], byte):void (15 bytes)   inline method (bytecode parsing)
                                          @ 14  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=0.123396, bonus=1.000000, nodes=9)
                            @ 616  java.lang.String.<init>(byte[], byte):void (15 bytes)   inline method (bytecode parsing)
                                          @ 28  java.lang.StringLatin1.indexOf(byte[], byte[]):int (25 bytes)   relevance-based (relevance=1.000000, probability=0.123396, bonus=1.000000, nodes=16 <= 300.000000)
                                        @ 7  java.lang.String.indexOf(String):int (64 bytes)   relevance-based (relevance=2.000020, probability=0.123396, bonus=1.000000, nodes=25 <= 300.000000)
                                          @ 1  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.123396, bonus=1.000000, nodes=5)
                                          @ 7  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.123396, bonus=1.000000, nodes=5)
                                          @ 14  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=0.123396, bonus=1.000000, nodes=9)
                                                    @ 76  java.lang.StringLatin1.indexOf(byte[], byte[]):int (25 bytes)   relevance-based (relevance=1.000000, probability=0.010117, bonus=1.000000, nodes=16 <= 300.000000)
                                          @ 28  java.lang.StringLatin1.indexOf(byte[], byte[]):int (25 bytes)   relevance-based (relevance=1.000000, probability=0.123396, bonus=1.000000, nodes=16 <= 300.000000)
                                        @ 7  java.lang.String.indexOf(String):int (64 bytes)   relevance-based (relevance=2.000020, probability=0.123396, bonus=1.000000, nodes=25 <= 300.000000)
                            @ 8  java.lang.StringUTF16.length(byte[]):int (5 bytes)   inline method (bytecode parsing)
                            @ 20  java.lang.StringUTF16.length(byte[]):int (5 bytes)   inline method (bytecode parsing)
                            @ 28  java.lang.String.<init>(byte[], byte):void (15 bytes)   inline method (bytecode parsing)
                                                    @ 95  java.lang.StringUTF16.indexOfLatin1(byte[], byte[]):int (31 bytes)   relevance-based (relevance=1.000010, probability=0.010117, bonus=1.000000, nodes=22 <= 300.000000)
                            @ 4  java.lang.StringUTF16.checkBoundsBeginEnd(int, int, byte[]):void (10 bytes)   inline method (bytecode parsing)
                              @ 3  java.lang.StringUTF16.length(byte[]):int (5 bytes)   inline method (bytecode parsing)
                            @ 11  java.lang.String.checkBoundsBeginEnd(int, int, int):void (11 bytes)   inline method (bytecode parsing)
                                          @ 1  java.lang.Long.stringSize(long):int (55 bytes)   relevance-based (relevance=1.000000, probability=0.061698, bonus=1.000000, nodes=34 <= 300.000000)
                              @ 6  jdk.internal.util.Preconditions.checkFromToIndex(int, int, int, BiFunction):int (24 bytes)   inline method (bytecode parsing)
                                                        @ 6  jdk.internal.util.Preconditions.checkFromToIndex(int, int, int, BiFunction):int (24 bytes)   relevance-based (relevance=1.000000, probability=0.010117, bonus=1.000000, nodes=14 <= 300.000000)
                                                      @ 6  java.lang.String.checkBoundsBeginEnd(int, int, int):void (11 bytes)   relevance-based (relevance=1.000010, probability=0.010117, bonus=1.000000, nodes=13 <= 300.000000)
                                                    @ 178  java.lang.StringUTF16.indexOfLatin1(byte[], int, byte[], int, int):int (24 bytes)   relevance-based (relevance=1.000010, probability=0.010117, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 18  java.lang.Long.getChars(long, int, byte[]):int (195 bytes)   relevance-based (relevance=1.000000, probability=0.061698, bonus=1.000000, nodes=64 <= 300.000000)
                                                  @ 151  java.lang.StringUTF16.replace(byte[], int, boolean, byte[], int, boolean, byte[], int, boolean):String (620 bytes)   not inlining relevance-based (relevance=28.000280, probability=0.020235, bonus=1.000000, nodes=311 > 300.000000)
                                                @ 79  java.lang.String.replace(CharSequence, CharSequence):String (258 bytes)   relevance-based (relevance=1.000010, probability=0.061668, bonus=1.000000, nodes=234 <= 300.000000)
                                        @ 1  java.lang.Long.toString(long):String (55 bytes)   relevance-based (relevance=1.000010, probability=0.061698, bonus=1.000000, nodes=98 <= 300.000000)
                                              @ 37  jdk.graal.compiler.hotspot.HotSpotTTYStreamProvider$LogStreamOptionKey.makeFilename(String):String (157 bytes)   not inlining relevance-based (relevance=2.000000, probability=0.123336, bonus=1.000000, nodes=520 > 300.000000)
                            @ 206  java.lang.StringBuilder.<init>(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 215  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 237  java.lang.StringBuilder.append(char):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 242  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 254  java.lang.StringBuilder.toString():String (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.String.<init>(StringBuilder):void (7 bytes)   inline method (bytecode parsing)
                                                @ 17  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=0.398774, probability=0.035104, bonus=1.000000, nodes=9)
                                                @ 27  java.lang.StringLatin1.hashCode(byte[]):int (52 bytes)   relevance-based (relevance=0.398774, probability=0.035104, bonus=1.000000, nodes=22 <= 119.632312)
                                          @ 1  java.lang.String.toString():String (2 bytes)   trivial (relevance=8.000000, probability=0.061698, bonus=1.000000, nodes=4)
                                              @ 49  java.lang.String.hashCode():int (60 bytes)   relevance-based (relevance=2.000000, probability=0.123336, bonus=1.000000, nodes=47 <= 300.000000)
                                          @ 8  java.lang.String.toString():String (2 bytes)   trivial (relevance=8.000000, probability=0.061698, bonus=1.000000, nodes=4)
                                            @ 1  jdk.graal.compiler.hotspot.HotSpotTTYStreamProvider$LogStreamOptionKey$DelayedOutputStream.lazy():OutputStream (266 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.986686, bonus=1.000000, nodes=307 > 300.000000)
                                          @ 7  java.io.OutputStream.write(byte[], int, int):void (34 bytes)   not inlining no type profile exists
                                          @ 11  jdk.graal.compiler.hotspot.HotSpotTTYStreamProvider$LogStreamOptionKey$DelayedOutputStream.write(byte[], int, int):void (11 bytes)   relevance-based (relevance=1.013124, probability=0.999636, bonus=1.000000, nodes=84 <= 300.000000)
                                            @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.061698, bonus=1.000000, nodes=5)
                                          @ 16  java.lang.String.length():int (11 bytes)   trivial (relevance=8.000000, probability=0.061698, bonus=1.000000, nodes=8)
                            @ 11  jdk.internal.misc.InternalLock.lock():void (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.util.concurrent.locks.ReentrantLock.lock():void (8 bytes)   inline method (bytecode parsing)
                            @ 22  jdk.internal.misc.InternalLock.unlock():void (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.util.concurrent.locks.ReentrantLock.unlock():void (10 bytes)   inline method (bytecode parsing)
                                            @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.061698, bonus=1.000000, nodes=5)
                                @ 5  java.util.concurrent.locks.AbstractQueuedSynchronizer.release(int):boolean (19 bytes)   inline method (bytecode parsing)
                                          @ 22  java.lang.String.length():int (11 bytes)   trivial (relevance=8.000000, probability=0.061698, bonus=1.000000, nodes=5)
                                          @ 25  java.io.BufferedOutputStream.flush():void (60 bytes)   not inlining relevance-based (relevance=0.013124, probability=0.012949, bonus=1.000000, nodes=68 > 3.937201)
                                        @ 18  java.io.PrintStream.implWrite(byte[], int, int):void (29 bytes)   relevance-based (relevance=1.131007, probability=0.999636, bonus=1.000000, nodes=109 <= 300.000000)
                                            @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.061698, bonus=1.000000, nodes=5)
                                          @ 29  java.lang.String.length():int (11 bytes)   trivial (relevance=21.333333, probability=0.061698, bonus=1.000000, nodes=8)
                                          @ 68  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=21.333333, probability=0.061698, bonus=1.000000, nodes=9)
                            @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 8  java.util.concurrent.locks.AbstractOwnableSynchronizer.getExclusiveOwnerThread():Thread (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 74  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=21.333333, probability=0.061698, bonus=1.000000, nodes=5)
                            @ 41  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                            @ 46  java.util.concurrent.locks.AbstractQueuedSynchronizer.setState(int):void (6 bytes)   inline method (bytecode parsing)
                                          @ 81  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=21.333333, probability=0.061698, bonus=1.000000, nodes=9)
                                        @ 2  java.util.concurrent.locks.ReentrantLock$Sync.tryRelease(int):boolean (51 bytes)   relevance-based (relevance=1.131007, probability=0.999636, bonus=1.000000, nodes=37 <= 300.000000)
                            @ 22  java.util.concurrent.locks.AbstractQueuedSynchronizer$Node.getAndUnsetStatus(int):int (14 bytes)   inline method (bytecode parsing)
                              @ 10  jdk.internal.misc.Unsafe.getAndBitwiseAndInt(Object, long, int):int (27 bytes)   inline method (bytecode parsing)
                            @ 162  java.lang.StringConcatHelper.newArray(long):byte[] (40 bytes)   inline method (bytecode parsing)
                            @ 5  java.lang.Thread.isVirtual():boolean (5 bytes)   inline method (bytecode parsing)
                            @ 287  java.lang.String.<init>(byte[], byte):void (15 bytes)   inline method (bytecode parsing)
                                          @ 30  java.util.concurrent.locks.LockSupport.unpark(Thread):void (26 bytes)   not inlining relevance-based (relevance=0.006443, probability=0.004148, bonus=1.000000, nodes=23 > 1.932948)
                                        @ 12  java.util.concurrent.locks.AbstractQueuedSynchronizer.signalNext(AbstractQueuedSynchronizer$Node):void (34 bytes)   relevance-based (relevance=0.989436, probability=0.874509, bonus=1.000000, nodes=56 <= 296.830824)
                                      @ 127  java.io.PrintStream.write(byte[], int, int):void (94 bytes)   relevance-based (relevance=1.000000, probability=0.999636, bonus=1.000000, nodes=278 <= 300.000000)
                                              @ 3  java.lang.Math.max(int, int):int (11 bytes)   trivial (relevance=0.500000, probability=0.000362, bonus=1.000000, nodes=8)
                                    @ 11  sun.nio.cs.StreamEncoder.writeBytes():void (139 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.999636, bonus=1.000000, nodes=343 > 300.000000)
                                            @ 94  jdk.internal.util.ArraysSupport.newLength(int, int, int):int (27 bytes)   relevance-based (relevance=0.500000, probability=0.000362, bonus=1.000000, nodes=15 <= 150.000000)
                                  @ 8  sun.nio.cs.StreamEncoder.implFlushBuffer():void (15 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=21 <= 300.000000)
                                @ 22  sun.nio.cs.StreamEncoder.lockedFlushBuffer():void (25 bytes)   relevance-based (relevance=1.131007, probability=1.000000, bonus=1.000000, nodes=29 <= 300.000000)
                            @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 8  java.util.concurrent.locks.AbstractOwnableSynchronizer.getExclusiveOwnerThread():Thread (5 bytes)   inline accessor method (bytecode parsing)
                            @ 41  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                            @ 46  java.util.concurrent.locks.AbstractQueuedSynchronizer.setState(int):void (6 bytes)   inline method (bytecode parsing)
                                              @ 25  java.lang.Math.min(int, int):int (11 bytes)   trivial (relevance=0.500005, probability=0.000352, bonus=1.000000, nodes=7)
                                @ 2  java.util.concurrent.locks.ReentrantLock$Sync.tryRelease(int):boolean (51 bytes)   relevance-based (relevance=1.131007, probability=1.000000, bonus=1.000000, nodes=37 <= 300.000000)
                                            @ 97  java.util.Arrays.copyOf(int[], int):int[] (33 bytes)   relevance-based (relevance=0.500000, probability=0.000362, bonus=1.000000, nodes=28 <= 150.000000)
                            @ 22  java.util.concurrent.locks.AbstractQueuedSynchronizer$Node.getAndUnsetStatus(int):int (14 bytes)   inline method (bytecode parsing)
                              @ 10  jdk.internal.misc.Unsafe.getAndBitwiseAndInt(Object, long, int):int (27 bytes)   inline method (bytecode parsing)
                            @ 5  java.lang.Thread.isVirtual():boolean (5 bytes)   inline method (bytecode parsing)
                                  @ 30  java.util.concurrent.locks.LockSupport.unpark(Thread):void (26 bytes)   not inlining relevance-based (relevance=0.006443, probability=0.004150, bonus=1.000000, nodes=23 > 1.932948)
                                              @ 51  jdk.internal.misc.Unsafe.allocateUninitializedArray0(Class, int):Object (90 bytes)   trivial (relevance=0.499990, probability=0.000362, bonus=1.000000, nodes=6)
                                @ 12  java.util.concurrent.locks.AbstractQueuedSynchronizer.signalNext(AbstractQueuedSynchronizer$Node):void (34 bytes)   relevance-based (relevance=0.989436, probability=0.874827, bonus=1.000000, nodes=56 <= 296.830824)
                                            @ 33  jdk.internal.misc.Unsafe.allocateUninitializedArray(Class, int):Object (55 bytes)   relevance-based (relevance=0.499990, probability=0.000362, bonus=1.000000, nodes=10 <= 149.997000)
                                          @ 120  java.lang.StringLatin1.replace(byte[], int, byte[], int, byte[], int):String (291 bytes)   relevance-based (relevance=1.000000, probability=0.002892, bonus=1.000000, nodes=208 <= 300.000000)
                              @ 4  sun.nio.cs.StreamEncoder.flushBuffer():void (63 bytes)   relevance-based (relevance=1.131007, probability=1.000000, bonus=1.000000, nodes=199 <= 300.000000)
                            @ 588  java.lang.StringUTF16.compress(byte[], int, int):byte[] (20 bytes)   inline method (bytecode parsing)
                            @ 605  java.lang.String.<init>(byte[], byte):void (15 bytes)   inline method (bytecode parsing)
                            @ 616  java.lang.String.<init>(byte[], byte):void (15 bytes)   inline method (bytecode parsing)
                                            @ 76  java.lang.StringLatin1.indexOf(byte[], byte[]):int (25 bytes)   relevance-based (relevance=1.000000, probability=0.010122, bonus=1.000000, nodes=16 <= 300.000000)
                            @ 8  java.lang.StringUTF16.length(byte[]):int (5 bytes)   inline method (bytecode parsing)
                            @ 20  java.lang.StringUTF16.length(byte[]):int (5 bytes)   inline method (bytecode parsing)
                                            @ 95  java.lang.StringUTF16.indexOfLatin1(byte[], byte[]):int (31 bytes)   relevance-based (relevance=1.000010, probability=0.010122, bonus=1.000000, nodes=22 <= 300.000000)
                            @ 4  java.lang.StringUTF16.checkBoundsBeginEnd(int, int, byte[]):void (10 bytes)   inline method (bytecode parsing)
                              @ 3  java.lang.StringUTF16.length(byte[]):int (5 bytes)   inline method (bytecode parsing)
                            @ 11  java.lang.String.checkBoundsBeginEnd(int, int, int):void (11 bytes)   inline method (bytecode parsing)
                              @ 6  jdk.internal.util.Preconditions.checkFromToIndex(int, int, int, BiFunction):int (24 bytes)   inline method (bytecode parsing)
                                                @ 6  jdk.internal.util.Preconditions.checkFromToIndex(int, int, int, BiFunction):int (24 bytes)   relevance-based (relevance=1.000000, probability=0.010122, bonus=1.000000, nodes=14 <= 300.000000)
                                              @ 6  java.lang.String.checkBoundsBeginEnd(int, int, int):void (11 bytes)   relevance-based (relevance=1.000010, probability=0.010122, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 178  java.lang.StringUTF16.indexOfLatin1(byte[], int, byte[], int, int):int (24 bytes)   relevance-based (relevance=1.000010, probability=0.010122, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 151  java.lang.StringUTF16.replace(byte[], int, boolean, byte[], int, boolean, byte[], int, boolean):String (620 bytes)   not inlining relevance-based (relevance=28.000280, probability=0.020245, bonus=1.000000, nodes=311 > 300.000000)
                                        @ 79  java.lang.String.replace(CharSequence, CharSequence):String (258 bytes)   relevance-based (relevance=1.000010, probability=0.061698, bonus=1.000000, nodes=234 <= 300.000000)
                                      @ 37  jdk.graal.compiler.hotspot.HotSpotTTYStreamProvider$LogStreamOptionKey.makeFilename(String):String (157 bytes)   not inlining relevance-based (relevance=2.000000, probability=0.123396, bonus=1.000000, nodes=520 > 300.000000)
                                        @ 17  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=0.398774, probability=0.035121, bonus=1.000000, nodes=9)
                                        @ 27  java.lang.StringLatin1.hashCode(byte[]):int (52 bytes)   relevance-based (relevance=0.398774, probability=0.035121, bonus=1.000000, nodes=22 <= 119.632312)
                                      @ 49  java.lang.String.hashCode():int (60 bytes)   relevance-based (relevance=2.000000, probability=0.123396, bonus=1.000000, nodes=47 <= 300.000000)
                                    @ 1  jdk.graal.compiler.hotspot.HotSpotTTYStreamProvider$LogStreamOptionKey$DelayedOutputStream.lazy():OutputStream (266 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.987166, bonus=1.000000, nodes=307 > 300.000000)
                                  @ 7  java.io.OutputStream.write(byte[], int, int):void (34 bytes)   not inlining no type profile exists
                                  @ 11  jdk.graal.compiler.hotspot.HotSpotTTYStreamProvider$LogStreamOptionKey$DelayedOutputStream.write(byte[], int, int):void (11 bytes)   relevance-based (relevance=1.013001, probability=1.000000, bonus=1.000000, nodes=84 <= 300.000000)
                            @ 11  jdk.internal.misc.InternalLock.lock():void (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.util.concurrent.locks.ReentrantLock.lock():void (8 bytes)   inline method (bytecode parsing)
                            @ 22  jdk.internal.misc.InternalLock.unlock():void (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.util.concurrent.locks.ReentrantLock.unlock():void (10 bytes)   inline method (bytecode parsing)
                                @ 5  java.util.concurrent.locks.AbstractQueuedSynchronizer.release(int):boolean (19 bytes)   inline method (bytecode parsing)
                                  @ 25  java.io.BufferedOutputStream.flush():void (60 bytes)   not inlining relevance-based (relevance=0.013001, probability=0.012834, bonus=1.000000, nodes=68 > 3.900365)
                                @ 18  java.io.PrintStream.implWrite(byte[], int, int):void (29 bytes)   relevance-based (relevance=1.131007, probability=1.000000, bonus=1.000000, nodes=109 <= 300.000000)
                            @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 8  java.util.concurrent.locks.AbstractOwnableSynchronizer.getExclusiveOwnerThread():Thread (5 bytes)   inline accessor method (bytecode parsing)
                            @ 41  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                            @ 46  java.util.concurrent.locks.AbstractQueuedSynchronizer.setState(int):void (6 bytes)   inline method (bytecode parsing)
                                @ 2  java.util.concurrent.locks.ReentrantLock$Sync.tryRelease(int):boolean (51 bytes)   relevance-based (relevance=1.131007, probability=1.000000, bonus=1.000000, nodes=37 <= 300.000000)
                            @ 22  java.util.concurrent.locks.AbstractQueuedSynchronizer$Node.getAndUnsetStatus(int):int (14 bytes)   inline method (bytecode parsing)
                              @ 10  jdk.internal.misc.Unsafe.getAndBitwiseAndInt(Object, long, int):int (27 bytes)   inline method (bytecode parsing)
                            @ 5  java.lang.Thread.isVirtual():boolean (5 bytes)   inline method (bytecode parsing)
                                  @ 30  java.util.concurrent.locks.LockSupport.unpark(Thread):void (26 bytes)   not inlining relevance-based (relevance=0.006437, probability=0.004146, bonus=1.000000, nodes=23 > 1.931162)
                                @ 12  java.util.concurrent.locks.AbstractQueuedSynchronizer.signalNext(AbstractQueuedSynchronizer$Node):void (34 bytes)   relevance-based (relevance=0.988522, probability=0.874020, bonus=1.000000, nodes=56 <= 296.556683)
                              @ 127  java.io.PrintStream.write(byte[], int, int):void (94 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=278 <= 300.000000)
                                @ 1  java.nio.Buffer.clear():Buffer (20 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=13 <= 300.000000)
                              @ 134  java.nio.ByteBuffer.clear():ByteBuffer (7 bytes)   relevance-based (relevance=1.131007, probability=1.000000, bonus=1.000000, nodes=14 <= 300.000000)
                            @ 11  jdk.internal.misc.InternalLock.lock():void (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.util.concurrent.locks.ReentrantLock.lock():void (8 bytes)   inline method (bytecode parsing)
                            @ 25  jdk.internal.misc.InternalLock.unlock():void (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.util.concurrent.locks.ReentrantLock.unlock():void (10 bytes)   inline method (bytecode parsing)
                                @ 5  java.util.concurrent.locks.AbstractQueuedSynchronizer.release(int):boolean (19 bytes)   inline method (bytecode parsing)
                            @ 9  java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(int):void (20 bytes)   inline method (bytecode parsing)
                            @ 7  java.util.concurrent.locks.AbstractQueuedSynchronizer.compareAndSetState(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 15  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                            @ 21  java.util.concurrent.locks.AbstractOwnableSynchronizer.getExclusiveOwnerThread():Thread (5 bytes)   inline accessor method (bytecode parsing)
                            @ 29  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 51  java.util.concurrent.locks.AbstractQueuedSynchronizer.setState(int):void (6 bytes)   inline method (bytecode parsing)
                                @ 1  java.util.concurrent.locks.ReentrantLock$NonfairSync.initialTryLock():boolean (58 bytes)   relevance-based (relevance=1.005281, probability=1.000000, bonus=1.000000, nodes=40 <= 300.000000)
                            @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 10  java.util.concurrent.locks.AbstractQueuedSynchronizer.compareAndSetState(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 20  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                                @ 2  java.util.concurrent.locks.ReentrantLock$NonfairSync.tryAcquire(int):boolean (27 bytes)   not inlining relevance-based (relevance=0.005049, probability=0.004464, bonus=1.000000, nodes=36 > 1.514719)
                            @ 108  java.util.concurrent.locks.AbstractQueuedSynchronizer.tryAcquireShared(int):int (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.lang.UnsupportedOperationException.<init>():void (5 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.RuntimeException.<init>():void (5 bytes)   inline method (bytecode parsing)
                                  @ 1  java.lang.Exception.<init>():void (5 bytes)   inline method (bytecode parsing)
                            @ 245  java.util.concurrent.locks.AbstractQueuedSynchronizer$ExclusiveNode.<init>():void (5 bytes)   inline method (bytecode parsing)
                              @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer$Node.<init>():void (5 bytes)   inline method (bytecode parsing)
                            @ 290  java.util.concurrent.locks.AbstractQueuedSynchronizer$Node.setPrevRelaxed(AbstractQueuedSynchronizer$Node):void (12 bytes)   inline method (bytecode parsing)
                            @ 393  java.lang.Thread.interrupted():boolean (7 bytes)   inline method (bytecode parsing)
                                @ 15  java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer$Node, int, boolean, boolean, boolean, long):int (424 bytes)   not inlining relevance-based (relevance=0.002525, probability=0.002232, bonus=1.000000, nodes=226 > 0.757359)
                              @ 4  java.util.concurrent.locks.ReentrantLock$Sync.lock():void (13 bytes)   relevance-based (relevance=1.147897, probability=1.000000, bonus=1.000000, nodes=57 <= 300.000000)
                                @ 1  java.io.PrintStream.ensureOpen():void (18 bytes)   trivial (relevance=1.012418, probability=1.000000, bonus=1.000000, nodes=7)
                            @ 11  jdk.internal.misc.InternalLock.lock():void (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.util.concurrent.locks.ReentrantLock.lock():void (8 bytes)   inline method (bytecode parsing)
                            @ 25  jdk.internal.misc.InternalLock.unlock():void (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.util.concurrent.locks.ReentrantLock.unlock():void (10 bytes)   inline method (bytecode parsing)
                                @ 5  java.util.concurrent.locks.AbstractQueuedSynchronizer.release(int):boolean (19 bytes)   inline method (bytecode parsing)
                            @ 9  java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(int):void (20 bytes)   inline method (bytecode parsing)
                                  @ 4  java.util.concurrent.locks.ReentrantLock$Sync.lock():void (13 bytes)   not inlining relevance-based (relevance=0.014432, probability=0.006133, bonus=1.000000, nodes=31 > 4.329507)
                                  @ 18  java.io.BufferedOutputStream.implWrite(byte[], int, int):void (71 bytes)   not inlining relevance-based (relevance=0.014432, probability=0.006133, bonus=1.000000, nodes=55 > 4.329507)
                            @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 8  java.util.concurrent.locks.AbstractOwnableSynchronizer.getExclusiveOwnerThread():Thread (5 bytes)   inline accessor method (bytecode parsing)
                            @ 41  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                            @ 46  java.util.concurrent.locks.AbstractQueuedSynchronizer.setState(int):void (6 bytes)   inline method (bytecode parsing)
                                  @ 2  java.util.concurrent.locks.ReentrantLock$Sync.tryRelease(int):boolean (51 bytes)   not inlining relevance-based (relevance=0.014432, probability=0.006133, bonus=1.000000, nodes=37 > 4.329507)
                            @ 22  java.util.concurrent.locks.AbstractQueuedSynchronizer$Node.getAndUnsetStatus(int):int (14 bytes)   inline method (bytecode parsing)
                              @ 10  jdk.internal.misc.Unsafe.getAndBitwiseAndInt(Object, long, int):int (27 bytes)   inline method (bytecode parsing)
                                  @ 12  java.util.concurrent.locks.AbstractQueuedSynchronizer.signalNext(AbstractQueuedSynchronizer$Node):void (34 bytes)   not inlining relevance-based (relevance=0.012572, probability=0.005343, bonus=1.000000, nodes=56 > 3.771685)
                                  @ 55  java.io.BufferedOutputStream.implWrite(byte[], int, int):void (71 bytes)   not inlining relevance-based (relevance=0.014432, probability=0.006133, bonus=1.000000, nodes=55 > 4.329507)
                              @ 5  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                                @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                              @ 9  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=8)
                            @ 157  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  jdk.graal.compiler.hotspot.HotSpotTTYStreamProvider$LogStreamOptionKey$DelayedOutputStream$$Lambda/0x00007f8674264b28.<init>(String):void (10 bytes)   inline method (bytecode parsing)
                                  @ 41  java.lang.Math.max(long, long):long (12 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=7)
                            @ 210  jdk.vm.ci.hotspot.HotSpotJVMCIRuntime.getLogStream():OutputStream (9 bytes)   inline method (bytecode parsing)
                                  @ 44  java.lang.Math.min(long, long):long (12 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=7)
                                @ 5  java.lang.Math.clamp(long, int, int):int (49 bytes)   relevance-based (relevance=1.000010, probability=1.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                  @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                                @ 11  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000010, probability=1.000000, bonus=1.000000, nodes=8)
                                @ 42  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000010, probability=1.000000, bonus=1.000000, nodes=5)
                              @ 14  java.lang.String.indexOf(byte[], byte, int, String, int):int (101 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=43 <= 300.000000)
                            @ 0  jdk.graal.compiler.options.OptionValues.newOptionMap():EconomicMap (7 bytes)   inline method (bytecode parsing)
                              @ 3  org.graalvm.collections.EconomicMap.create(Equivalence):EconomicMap (6 bytes)   inline method (bytecode parsing)
                                @ 2  org.graalvm.collections.EconomicMapImpl.create(Equivalence, boolean):EconomicMapImpl (13 bytes)   inline method (bytecode parsing)
                                  @ 6  org.graalvm.collections.EconomicMapImpl.<init>(Equivalence, boolean):void (30 bytes)   inline method (bytecode parsing)
                                  @ 9  org.graalvm.collections.EconomicMapImpl.intercept(EconomicMapImpl):EconomicMapImpl (2 bytes)   inline method (bytecode parsing)
                            @ 6  jdk.vm.ci.common.InitTimer.timer(String):InitTimer (19 bytes)   inline method (bytecode parsing)
                            @ 239  org.graalvm.collections.EconomicMap.create():EconomicMap (7 bytes)   inline method (bytecode parsing)
                              @ 3  org.graalvm.collections.EconomicMap.create(Equivalence):EconomicMap (6 bytes)   inline method (bytecode parsing)
                                @ 2  org.graalvm.collections.EconomicMapImpl.create(Equivalence, boolean):EconomicMapImpl (13 bytes)   inline method (bytecode parsing)
                                  @ 6  org.graalvm.collections.EconomicMapImpl.<init>(Equivalence, boolean):void (30 bytes)   inline method (bytecode parsing)
                                  @ 9  org.graalvm.collections.EconomicMapImpl.intercept(EconomicMapImpl):EconomicMapImpl (2 bytes)   inline method (bytecode parsing)
                            @ 295  java.lang.String.startsWith(String):boolean (7 bytes)   inline method (bytecode parsing)
                            @ 305  java.lang.String.length():int (11 bytes)   inline method (bytecode parsing)
                            @ 12  jdk.graal.compiler.replacements.ReplacementsUtil.dynamicAssert(boolean, String):void (12 bytes)   inline method (bytecode parsing)
                              @ 6  java.lang.String.coder():byte (15 bytes)   inline method (bytecode parsing)
                            @ 26  jdk.graal.compiler.replacements.ReplacementsUtil.dynamicAssert(boolean, String):void (12 bytes)   inline method (bytecode parsing)
                            @ 308  java.lang.String.substring(int):String (10 bytes)   inline method (bytecode parsing)
                            @ 311  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                            @ 83  jdk.graal.compiler.replacements.StringLatin1Snippets.byteArrayOffset(long):long (17 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.LambdaForm$MH/0x00007f8674002400.invoke(Object, Object):Object (25 bytes)   inline method (bytecode parsing)
                                @ 21  java.lang.invoke.DirectMethodHandle$Holder.invokeStatic(Object, Object, Object):Object (15 bytes)   inline method (bytecode parsing)
                                  @ 1  java.lang.invoke.DirectMethodHandle.internalMemberName(Object):Object (8 bytes)   inline method (bytecode parsing)
                                  @ 11  java.lang.StringConcatHelper.simpleConcat(Object, Object):String (94 bytes)   inline method (bytecode parsing)
                                    @ 1  java.lang.StringConcatHelper.stringOf(Object):String (20 bytes)   inline method (bytecode parsing)
                                      @ 5  java.lang.String.toString():String (2 bytes)   inline method (bytecode parsing)
                            @ 94  java.lang.Byte.toUnsignedInt(byte):int (6 bytes)   inline method (bytecode parsing)
                                    @ 11  java.lang.String.isEmpty():boolean (14 bytes)   inline method (bytecode parsing)
                                    @ 61  java.lang.StringConcatHelper.newArray(long):byte[] (40 bytes)   inline method (bytecode parsing)
                            @ 158  jdk.graal.compiler.replacements.StringLatin1Snippets.byteArrayOffset(long):long (17 bytes)   inline method (bytecode parsing)
                            @ 167  java.lang.Byte.toUnsignedInt(byte):int (6 bytes)   inline method (bytecode parsing)
                            @ 172  java.lang.Byte.toUnsignedInt(byte):int (6 bytes)   inline method (bytecode parsing)
                            @ 322  java.lang.String.startsWith(String):boolean (7 bytes)   inline method (bytecode parsing)
                            @ 234  jdk.graal.compiler.replacements.StringLatin1Snippets.byteArrayOffset(long):long (17 bytes)   inline method (bytecode parsing)
                            @ 239  jdk.graal.compiler.replacements.StringLatin1Snippets.byteArrayOffset(long):long (17 bytes)   inline method (bytecode parsing)
                            @ 359  java.lang.String.length():int (11 bytes)   inline method (bytecode parsing)
                              @ 6  java.lang.String.coder():byte (15 bytes)   inline method (bytecode parsing)
                            @ 362  java.lang.String.substring(int):String (10 bytes)   inline method (bytecode parsing)
                            @ 8  jdk.vm.ci.services.Services.getSavedProperty(String):String (13 bytes)   inline method (bytecode parsing)
                            @ 11  java.lang.Boolean.parseBoolean(String):boolean (7 bytes)   inline method (bytecode parsing)
                            @ 24  java.util.concurrent.atomic.AtomicInteger.<init>():void (5 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.Number.<init>():void (5 bytes)   inline method (bytecode parsing)
                                              @ 0  jdk.vm.ci.services.Services.checkJVMCIEnabled():void (17 bytes)   trivial (relevance=4.000000, probability=0.030867, bonus=1.000000, nodes=3)
                                                @ 0  java.lang.System.allowSecurityManager():boolean (13 bytes)   trivial (relevance=1.000882, probability=0.007717, bonus=1.000000, nodes=8)
                                              @ 42  java.lang.System.getSecurityManager():SecurityManager (12 bytes)   relevance-based (relevance=1.000000, probability=0.007717, bonus=1.000000, nodes=14 <= 300.000000)
                            @ 12  java.lang.IllegalStateException.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  java.lang.RuntimeException.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                                @ 2  java.lang.Exception.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                            @ 12  java.lang.NullPointerException.<init>():void (5 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.RuntimeException.<init>():void (5 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.Exception.<init>():void (5 bytes)   inline method (bytecode parsing)
                 n                                    @ 25  java.lang.NullPointerException.getExtendedNPEMessage():String (0 bytes)   not inlining it is a non-intrinsic native method
                 n                                      @ 16  java.lang.Throwable.fillInStackTrace(int):Throwable (0 bytes)   not inlining it is a non-intrinsic native method
              s                                         @ 37  java.lang.Throwable.fillInStackTrace():Throwable (29 bytes)   relevance-based (relevance=4.000000, probability=0.000965, bonus=1.000000, nodes=34 <= 300.000000)
              s                                       @ 24  java.lang.NullPointerException.fillInStackTrace():Throwable (41 bytes)   relevance-based (relevance=1.000000, probability=0.000965, bonus=1.000000, nodes=65 <= 300.000000)
                                                    @ 1  java.lang.Throwable.<init>():void (29 bytes)   relevance-based (relevance=1.000000, probability=0.000965, bonus=1.000000, nodes=73 <= 300.000000)
                                                  @ 18  java.util.Collections$UnmodifiableMap.<init>(Map):void (22 bytes)   relevance-based (relevance=1.000000, probability=0.001929, bonus=1.000000, nodes=87 <= 300.000000)
                                                @ 19  java.util.Collections.unmodifiableMap(Map):Map (22 bytes)   relevance-based (relevance=1.000000, probability=0.003858, bonus=1.000000, nodes=95 <= 300.000000)
                 n                                @ 16  java.lang.Throwable.fillInStackTrace(int):Throwable (0 bytes)   not inlining it is a non-intrinsic native method
                            @ 34  jdk.internal.logger.SurrogateLogger.isFilteredFrame(StackWalker$StackFrame):boolean (5 bytes)   inline method (bytecode parsing)
              s                                   @ 24  java.lang.Throwable.fillInStackTrace():Throwable (29 bytes)   relevance-based (relevance=1.000000, probability=0.003858, bonus=1.000000, nodes=34 <= 300.000000)
                                @ 5  java.util.logging.LogRecord$CallerFinder.test(StackWalker$StackFrame):boolean (46 bytes)   not inlining relevance-based (relevance=0.001581, probability=0.001252, bonus=1.000000, nodes=30 > 0.474434)
                            @ 2  java.lang.module.ModuleDescriptor.name():String (5 bytes)   inline accessor method (bytecode parsing)
                                @ 8  jdk.internal.module.DefaultRoots.lambda$compute$1(ModuleFinder, ModuleDescriptor):boolean (29 bytes)   not inlining relevance-based (relevance=0.005271, probability=0.004173, bonus=1.000000, nodes=28 > 1.581447)
                            @ 11  jdk.internal.module.ModuleReferenceImpl.moduleResolution():ModuleResolution (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 1  jdk.internal.module.ModuleResolution.doNotResolveByDefault(ModuleReference):boolean (26 bytes)   not inlining relevance-based (relevance=0.005271, probability=0.004173, bonus=1.000000, nodes=24 > 1.581447)
                                @ 4  jdk.internal.module.DefaultRoots.lambda$compute$0(ModuleReference):boolean (13 bytes)   trivial (relevance=0.005271, probability=0.004173, bonus=1.000000, nodes=9)
                                                @ 2  java.lang.Throwable.<init>(String):void (34 bytes)   relevance-based (relevance=16.000000, probability=0.003858, bonus=1.000000, nodes=45 <= 300.000000)
                                  @ 1  java.lang.module.ModuleDescriptor$Exports.isQualified():boolean (18 bytes)   not inlining relevance-based (relevance=0.005930, probability=0.004695, bonus=1.000000, nodes=10 > 1.779128)
                                @ 4  jdk.internal.module.DefaultRoots.lambda$exportsAPI$2(ModuleDescriptor$Exports):boolean (13 bytes)   trivial (relevance=0.005930, probability=0.004695, bonus=1.000000, nodes=9)
                                @ 1  sun.management.spi.PlatformMBeanProvider$PlatformComponent.mbeanInterfaceNames():Set (0 bytes)   not inlining no methods remaining after filtering less frequent methods (8 methods previously)
                                              @ 61  jdk.internal.misc.VM.getSavedProperties():Map (23 bytes)   relevance-based (relevance=1.000882, probability=0.007717, bonus=1.000000, nodes=147 <= 300.000000)
                            @ 41  java.lang.Enum.ordinal():int (5 bytes)   inline accessor method (bytecode parsing)
                                            @ 0  jdk.vm.ci.services.Services.getSavedProperties():Map (81 bytes)   relevance-based (relevance=1.000000, probability=0.030867, bonus=1.000000, nodes=201 <= 300.000000)
                                          @ 4  java.util.Map.get(Object):Object (0 bytes)   not inlining no type profile exists
                                        @ 2  java.util.HashMap.getNode(Object):HashMap$Node (150 bytes)   not inlining too large previous low-level graph (low-level-nodes: 440, relevance=0.272232, probability=0.118031, bonus=1.000000, nodes=108)
                                      @ 5  java.util.HashMap.containsKey(Object):boolean (14 bytes)   relevance-based (relevance=0.272232, probability=0.118031, bonus=1.000000, nodes=12 <= 81.669487)
                                    @ 5  java.util.HashSet.contains(Object):boolean (9 bytes)   relevance-based (relevance=0.272232, probability=0.196857, bonus=1.000000, nodes=29 <= 81.669487)
                                                @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.006511, bonus=1.000000, nodes=5)
                                              @ 14  java.lang.String.length():int (11 bytes)   trivial (relevance=2.000000, probability=0.006511, bonus=1.000000, nodes=8)
                                      @ 18  java.lang.String.equals(Object):boolean (56 bytes)   relevance-based (relevance=1.000000, probability=0.582984, bonus=1.000000, nodes=50 <= 300.000000)
                                    @ 5  java.util.Collections.eq(Object, Object):boolean (22 bytes)   relevance-based (relevance=1.000000, probability=0.723122, bonus=1.000000, nodes=60 <= 300.000000)
                                                @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.006511, bonus=1.000000, nodes=5)
                                              @ 18  java.lang.String.length():int (11 bytes)   trivial (relevance=2.000000, probability=0.006511, bonus=1.000000, nodes=5)
                                  @ 7  java.util.Collections$SingletonSet.contains(Object):boolean (9 bytes)   relevance-based (relevance=1.000000, probability=0.919979, bonus=1.000000, nodes=101 <= 300.000000)
                                                @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.003255, bonus=1.000000, nodes=5)
                                @ 8  java.lang.management.ManagementFactory$PlatformMBeanFinder.lambda$findSingleton$1(String, PlatformMBeanProvider$PlatformComponent):boolean (13 bytes)   relevance-based (relevance=1.000000, probability=0.919979, bonus=1.000000, nodes=108 <= 300.000000)
                                              @ 30  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000000, probability=0.003255, bonus=1.000000, nodes=5)
                              @ 8  java.lang.management.ManagementFactory$PlatformMBeanFinder$$Lambda/0x00007f867414c650.test(Object):boolean (12 bytes)   not inlining callee invoke probability is too high (invokeP=5.128298, relevance=1.162100, probability=1.000000, bonus=1.000000, nodes=177)
                            @ 146  java.lang.StringUTF16.regionMatchesCI_Latin1(byte[], int, byte[], int, int):boolean (10 bytes)   inline method (bytecode parsing)
                              @ 21  java.util.stream.ReferencePipeline$3$1.accept(Object):void (23 bytes)   not inlining relevance-based (relevance=0.162100, probability=0.139489, bonus=1.000000, nodes=60 > 48.629971)
                                                  @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.003255, bonus=1.000000, nodes=5)
                                                @ 27  java.lang.String.length():int (11 bytes)   trivial (relevance=16.000000, probability=0.003255, bonus=1.000000, nodes=5)
                                                  @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.003255, bonus=1.000000, nodes=5)
                                                @ 43  java.lang.String.length():int (11 bytes)   trivial (relevance=16.000000, probability=0.003255, bonus=1.000000, nodes=8)
                                                @ 70  java.lang.String.coder():byte (15 bytes)   trivial (relevance=4.000000, probability=0.000814, bonus=1.000000, nodes=5)
                                                @ 78  java.lang.String.coder():byte (15 bytes)   trivial (relevance=2.000000, probability=0.000814, bonus=1.000000, nodes=5)
                            @ 58  java.lang.Character.toUpperCase(char):char (6 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.Character.toUpperCase(int):int (9 bytes)   inline method (bytecode parsing)
                            @ 75  java.lang.Character.toLowerCase(char):char (6 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.Character.toLowerCase(int):int (9 bytes)   inline method (bytecode parsing)
                            @ 80  java.lang.Character.toLowerCase(char):char (6 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.Character.toLowerCase(int):int (9 bytes)   inline method (bytecode parsing)
                            @ 17  java.lang.Enum.ordinal():int (5 bytes)   inline accessor method (bytecode parsing)
                                                  @ 50  java.lang.CharacterDataLatin1.toUpperCase(int):int (67 bytes)   relevance-based (relevance=4.000000, probability=0.000181, bonus=1.000000, nodes=52 <= 300.000000)
                              @ 2  java.util.EnumSet.typeCheck(Enum):void (59 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=12 <= 300.000000)
                                                  @ 1  java.lang.CharacterData.of(int):CharacterData (136 bytes)   trivial (relevance=32.000000, probability=0.000181, bonus=1.000000, nodes=8)
                                                  @ 5  java.lang.CharacterDataLatin1.toUpperCase(int):int (67 bytes)   relevance-based (relevance=32.000000, probability=0.000181, bonus=1.000000, nodes=52 <= 300.000000)
                                                  @ 1  java.lang.CharacterData.of(int):CharacterData (136 bytes)   trivial (relevance=16.000000, probability=0.000090, bonus=1.000000, nodes=8)
                                                  @ 5  java.lang.CharacterDataLatin1.toLowerCase(int):int (44 bytes)   relevance-based (relevance=16.000000, probability=0.000090, bonus=1.000000, nodes=38 <= 300.000000)
                            @ 8  java.util.HashMap.put(Object, Object):Object (13 bytes)   inline method (bytecode parsing)
                                                  @ 1  java.lang.CharacterData.of(int):CharacterData (136 bytes)   trivial (relevance=16.000000, probability=0.000090, bonus=1.000000, nodes=8)
                 n            @ 9  java.lang.Object.hashCode():int (0 bytes)   not inlining no methods remaining after filtering less frequent methods (7 methods previously)
                              @ 2  java.util.HashMap.hash(Object):int (20 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=12 <= 300.000000)
                                                  @ 5  java.lang.CharacterDataLatin1.toLowerCase(int):int (44 bytes)   relevance-based (relevance=16.000000, probability=0.000090, bonus=1.000000, nodes=38 <= 300.000000)
                                                @ 131  java.lang.StringLatin1.regionMatchesCI_UTF16(byte[], int, byte[], int, int):boolean (93 bytes)   relevance-based (relevance=1.000000, probability=0.000407, bonus=1.000000, nodes=206 <= 300.000000)
                              @ 9  java.util.HashMap.putVal(int, Object, Object, boolean, boolean):Object (300 bytes)   not inlining too large previous low-level graph (low-level-nodes: 1128, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=166)
                                                  @ 32  java.lang.CharacterDataLatin1.equalsIgnoreCase(byte, byte):boolean (63 bytes)   relevance-based (relevance=2.000000, probability=0.000271, bonus=1.000000, nodes=42 <= 300.000000)
                                                @ 98  java.lang.StringLatin1.regionMatchesCI(byte[], int, byte[], int, int):boolean (45 bytes)   relevance-based (relevance=1.000000, probability=0.000407, bonus=1.000000, nodes=64 <= 300.000000)
                                              @ 33  java.lang.String.regionMatches(boolean, int, String, int, int):boolean (150 bytes)   relevance-based (relevance=1.000000, probability=0.003255, bonus=1.000000, nodes=285 <= 300.000000)
                                            @ 3  java.lang.String.equalsIgnoreCase(String):boolean (45 bytes)   not inlining relevance-based (relevance=3.377978, probability=0.026044, bonus=1.000000, nodes=302 > 300.000000)
                                          @ 0  jdk.vm.ci.common.InitTimer.isEnabled():boolean (37 bytes)   relevance-based (relevance=2.000000, probability=0.061733, bonus=1.000000, nodes=237 <= 300.000000)
                                        @ 4  jdk.graal.compiler.hotspot.HotSpotGraalOptionValues.parseOptions():EconomicMap (417 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.061733, bonus=1.000000, nodes=496 > 300.000000)
                            @ 4  jdk.graal.compiler.options.OptionValues.newOptionMap():EconomicMap (7 bytes)   inline method (bytecode parsing)
                              @ 3  org.graalvm.collections.EconomicMap.create(Equivalence):EconomicMap (6 bytes)   inline method (bytecode parsing)
                                @ 2  org.graalvm.collections.EconomicMapImpl.create(Equivalence, boolean):EconomicMapImpl (13 bytes)   inline method (bytecode parsing)
                                  @ 6  org.graalvm.collections.EconomicMapImpl.<init>(Equivalence, boolean):void (30 bytes)   inline method (bytecode parsing)
                                  @ 9  org.graalvm.collections.EconomicMapImpl.intercept(EconomicMapImpl):EconomicMapImpl (2 bytes)   inline method (bytecode parsing)
                                          @ 1  org.graalvm.collections.UnmodifiableEconomicMap.getEntries():UnmodifiableMapCursor (0 bytes)   not inlining no type profile exists
                                          @ 8  org.graalvm.collections.UnmodifiableMapCursor.advance():boolean (0 bytes)   not inlining no type profile exists
                                          @ 18  org.graalvm.collections.UnmodifiableMapCursor.getKey():Object (0 bytes)   not inlining no type profile exists
                                          @ 27  org.graalvm.collections.UnmodifiableMapCursor.getValue():Object (0 bytes)   not inlining no type profile exists
                                            @ 32  jdk.graal.compiler.options.OptionValues.encodeNull(Object):Object (12 bytes)   relevance-based (relevance=1.000000, probability=0.061733, bonus=1.000000, nodes=14 <= 300.000000)
                            @ 111  org.graalvm.collections.EconomicMapImpl.setKey(int, Object):void (10 bytes)   inline method (bytecode parsing)
                            @ 143  org.graalvm.collections.EconomicMapImpl.size():int (10 bytes)   inline method (bytecode parsing)
                            @ 147  org.graalvm.collections.EconomicMapImpl.size():int (10 bytes)   inline method (bytecode parsing)
                                            @ 35  org.graalvm.collections.EconomicMapImpl.put(Object, Object):Object (192 bytes)   not inlining too large previous low-level graph (low-level-nodes: 1279, relevance=1.000000, probability=0.061733, bonus=1.000000, nodes=101)
                                          @ 10  jdk.graal.compiler.options.OptionValues.initMap(EconomicMap, UnmodifiableEconomicMap):void (45 bytes)   not inlining callee invoke probability is too high (invokeP=6.000000, relevance=1.000000, probability=0.061733, bonus=1.000000, nodes=44)
                                        @ 7  jdk.graal.compiler.options.OptionValues.<init>(UnmodifiableEconomicMap):void (19 bytes)   relevance-based (relevance=1.000000, probability=0.061733, bonus=1.000000, nodes=24 <= 300.000000)
                                      @ 21  jdk.graal.compiler.hotspot.HotSpotGraalOptionValues.initializeOptions():OptionValues (11 bytes)   relevance-based (relevance=1.000000, probability=0.061733, bonus=1.000000, nodes=27 <= 300.000000)
                                    @ 22  jdk.graal.compiler.hotspot.HotSpotGraalOptionValues.defaultOptions():OptionValues (41 bytes)   relevance-based (relevance=6.183661, probability=0.246934, bonus=1.000000, nodes=60 <= 300.000000)
                            @ 23  jdk.graal.compiler.options.OptionValues.get(OptionKey):Object (9 bytes)   inline method (bytecode parsing)
                            @ 13  jdk.graal.compiler.options.OptionKey.getDefaultValue():Object (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 4  java.util.AbstractList$ListItr.nextIndex():int (5 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                                      @ 2  org.graalvm.collections.UnmodifiableEconomicMap.get(Object):Object (0 bytes)   not inlining no type profile exists
                                @ 1  java.util.AbstractList$SubList$1.nextIndex():int (18 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=17 <= 300.000000)
                              @ 1  java.util.AbstractList$SubList$1.hasNext():boolean (20 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=23 <= 300.000000)
                                        @ 18  jdk.graal.compiler.options.OptionValues.decodeNull(Object):Object (13 bytes)   relevance-based (relevance=1.000000, probability=0.123467, bonus=1.000000, nodes=15 <= 300.000000)
                                      @ 5  jdk.graal.compiler.options.OptionValues.get(UnmodifiableEconomicMap, OptionKey):Object (22 bytes)   relevance-based (relevance=1.000000, probability=0.246934, bonus=1.000000, nodes=26 <= 300.000000)
                                    @ 25  jdk.graal.compiler.options.OptionKey.getValue(OptionValues):Object (27 bytes)   relevance-based (relevance=4.000000, probability=0.246934, bonus=1.000000, nodes=31 <= 300.000000)
                                @ 1  java.util.AbstractList$Itr.checkForComodification():void (23 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=9)
                            @ 5  java.lang.String.contains(CharSequence):boolean (19 bytes)   inline method (bytecode parsing)
                              @ 2  java.lang.String.toString():String (2 bytes)   inline method (bytecode parsing)
                                  @ 2  jdk.graal.compiler.graph.NodeList.get(int):Node (29 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=7)
                                @ 14  jdk.graal.compiler.graph.NodeList.get(int):Object (6 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=7)
                            @ 24  java.lang.String.contains(CharSequence):boolean (19 bytes)   inline method (bytecode parsing)
                              @ 11  java.util.AbstractList$Itr.next():Object (46 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=27 <= 300.000000)
                              @ 2  java.lang.String.toString():String (2 bytes)   inline method (bytecode parsing)
                            @ 44  java.lang.String.contains(CharSequence):boolean (19 bytes)   inline method (bytecode parsing)
                              @ 2  java.lang.String.toString():String (2 bytes)   inline method (bytecode parsing)
                            @ 64  java.lang.String.contains(CharSequence):boolean (19 bytes)   inline method (bytecode parsing)
                              @ 2  java.lang.String.toString():String (2 bytes)   inline method (bytecode parsing)
                            @ 76  java.lang.String.valueOf(long):String (5 bytes)   inline method (bytecode parsing)
                                        @ 1  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.123467, bonus=1.000000, nodes=5)
                                        @ 7  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.123467, bonus=1.000000, nodes=5)
                                        @ 14  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=0.123467, bonus=1.000000, nodes=9)
                                        @ 28  java.lang.StringLatin1.indexOf(byte[], byte[]):int (25 bytes)   relevance-based (relevance=1.000000, probability=0.123467, bonus=1.000000, nodes=16 <= 300.000000)
                                      @ 7  java.lang.String.indexOf(String):int (64 bytes)   relevance-based (relevance=2.000000, probability=0.123467, bonus=1.000000, nodes=25 <= 300.000000)
                                      @ 14  jdk.graal.compiler.serviceprovider.GraalServices.getExecutionID():String (12 bytes)   trivial (relevance=1.000000, probability=0.061733, bonus=1.000000, nodes=3)
                                        @ 1  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.061733, bonus=1.000000, nodes=5)
                                        @ 7  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.061733, bonus=1.000000, nodes=5)
                                        @ 14  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=0.061733, bonus=1.000000, nodes=9)
                                        @ 28  java.lang.StringLatin1.indexOf(byte[], byte[]):int (25 bytes)   relevance-based (relevance=1.000000, probability=0.061733, bonus=1.000000, nodes=16 <= 300.000000)
                                      @ 7  java.lang.String.indexOf(String):int (64 bytes)   relevance-based (relevance=1.000000, probability=0.061733, bonus=1.000000, nodes=25 <= 300.000000)
                                        @ 1  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.123467, bonus=1.000000, nodes=5)
                                        @ 7  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.123467, bonus=1.000000, nodes=5)
                                        @ 14  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=0.123467, bonus=1.000000, nodes=9)
                                        @ 28  java.lang.StringLatin1.indexOf(byte[], byte[]):int (25 bytes)   relevance-based (relevance=1.000000, probability=0.123467, bonus=1.000000, nodes=16 <= 300.000000)
                                      @ 7  java.lang.String.indexOf(String):int (64 bytes)   relevance-based (relevance=2.000020, probability=0.123467, bonus=1.000000, nodes=25 <= 300.000000)
                                        @ 1  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.123467, bonus=1.000000, nodes=5)
                                        @ 7  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.123467, bonus=1.000000, nodes=5)
                                        @ 14  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=0.123467, bonus=1.000000, nodes=9)
                                        @ 28  java.lang.StringLatin1.indexOf(byte[], byte[]):int (25 bytes)   relevance-based (relevance=1.000000, probability=0.123467, bonus=1.000000, nodes=16 <= 300.000000)
                                      @ 7  java.lang.String.indexOf(String):int (64 bytes)   relevance-based (relevance=2.000020, probability=0.123467, bonus=1.000000, nodes=25 <= 300.000000)
                            @ 28  java.lang.String.<init>(byte[], byte):void (15 bytes)   inline method (bytecode parsing)
                                        @ 1  java.lang.Long.stringSize(long):int (55 bytes)   relevance-based (relevance=1.000000, probability=0.061733, bonus=1.000000, nodes=34 <= 300.000000)
                                        @ 18  java.lang.Long.getChars(long, int, byte[]):int (195 bytes)   relevance-based (relevance=1.000000, probability=0.061733, bonus=1.000000, nodes=64 <= 300.000000)
                                      @ 1  java.lang.Long.toString(long):String (55 bytes)   relevance-based (relevance=1.000010, probability=0.061733, bonus=1.000000, nodes=98 <= 300.000000)
                            @ 206  java.lang.StringBuilder.<init>(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 215  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 237  java.lang.StringBuilder.append(char):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 242  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 254  java.lang.StringBuilder.toString():String (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.String.<init>(StringBuilder):void (7 bytes)   inline method (bytecode parsing)
                                        @ 1  java.lang.String.toString():String (2 bytes)   trivial (relevance=8.000000, probability=0.061733, bonus=1.000000, nodes=4)
                                        @ 8  java.lang.String.toString():String (2 bytes)   trivial (relevance=8.000000, probability=0.061733, bonus=1.000000, nodes=4)
                                          @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.061733, bonus=1.000000, nodes=5)
                                        @ 16  java.lang.String.length():int (11 bytes)   trivial (relevance=8.000000, probability=0.061733, bonus=1.000000, nodes=8)
                                          @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.061733, bonus=1.000000, nodes=5)
                                        @ 22  java.lang.String.length():int (11 bytes)   trivial (relevance=8.000000, probability=0.061733, bonus=1.000000, nodes=5)
                                          @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.061733, bonus=1.000000, nodes=5)
                                        @ 29  java.lang.String.length():int (11 bytes)   trivial (relevance=21.333333, probability=0.061733, bonus=1.000000, nodes=8)
                                        @ 68  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=21.333333, probability=0.061733, bonus=1.000000, nodes=9)
                                        @ 74  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=21.333333, probability=0.061733, bonus=1.000000, nodes=5)
                                        @ 81  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=21.333333, probability=0.061733, bonus=1.000000, nodes=9)
                            @ 162  java.lang.StringConcatHelper.newArray(long):byte[] (40 bytes)   inline method (bytecode parsing)
                            @ 287  java.lang.String.<init>(byte[], byte):void (15 bytes)   inline method (bytecode parsing)
                                            @ 3  java.lang.Math.max(int, int):int (11 bytes)   trivial (relevance=0.500000, probability=0.000362, bonus=1.000000, nodes=8)
                                          @ 94  jdk.internal.util.ArraysSupport.newLength(int, int, int):int (27 bytes)   relevance-based (relevance=0.500000, probability=0.000362, bonus=1.000000, nodes=15 <= 150.000000)
                                            @ 25  java.lang.Math.min(int, int):int (11 bytes)   trivial (relevance=0.500005, probability=0.000351, bonus=1.000000, nodes=7)
                                          @ 97  java.util.Arrays.copyOf(int[], int):int[] (33 bytes)   relevance-based (relevance=0.500000, probability=0.000362, bonus=1.000000, nodes=28 <= 150.000000)
                              @ 7  jdk.internal.misc.Unsafe.convEndian(boolean, long):long (16 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=16 <= 300.000000)
                                            @ 51  jdk.internal.misc.Unsafe.allocateUninitializedArray0(Class, int):Object (90 bytes)   trivial (relevance=0.499990, probability=0.000362, bonus=1.000000, nodes=6)
                                          @ 33  jdk.internal.misc.Unsafe.allocateUninitializedArray(Class, int):Object (55 bytes)   relevance-based (relevance=0.499990, probability=0.000362, bonus=1.000000, nodes=10 <= 149.997000)
                                        @ 120  java.lang.StringLatin1.replace(byte[], int, byte[], int, byte[], int):String (291 bytes)   relevance-based (relevance=1.000000, probability=0.002894, bonus=1.000000, nodes=208 <= 300.000000)
                            @ 588  java.lang.StringUTF16.compress(byte[], int, int):byte[] (20 bytes)   inline method (bytecode parsing)
                            @ 605  java.lang.String.<init>(byte[], byte):void (15 bytes)   inline method (bytecode parsing)
                            @ 616  java.lang.String.<init>(byte[], byte):void (15 bytes)   inline method (bytecode parsing)
                                          @ 76  java.lang.StringLatin1.indexOf(byte[], byte[]):int (25 bytes)   relevance-based (relevance=1.000000, probability=0.010128, bonus=1.000000, nodes=16 <= 300.000000)
                            @ 8  java.lang.StringUTF16.length(byte[]):int (5 bytes)   inline method (bytecode parsing)
                            @ 20  java.lang.StringUTF16.length(byte[]):int (5 bytes)   inline method (bytecode parsing)
                                          @ 95  java.lang.StringUTF16.indexOfLatin1(byte[], byte[]):int (31 bytes)   relevance-based (relevance=1.000010, probability=0.010128, bonus=1.000000, nodes=22 <= 300.000000)
                            @ 4  java.lang.StringUTF16.checkBoundsBeginEnd(int, int, byte[]):void (10 bytes)   inline method (bytecode parsing)
                              @ 3  java.lang.StringUTF16.length(byte[]):int (5 bytes)   inline method (bytecode parsing)
                            @ 11  java.lang.String.checkBoundsBeginEnd(int, int, int):void (11 bytes)   inline method (bytecode parsing)
                              @ 6  jdk.internal.util.Preconditions.checkFromToIndex(int, int, int, BiFunction):int (24 bytes)   inline method (bytecode parsing)
                                              @ 6  jdk.internal.util.Preconditions.checkFromToIndex(int, int, int, BiFunction):int (24 bytes)   relevance-based (relevance=1.000000, probability=0.010128, bonus=1.000000, nodes=14 <= 300.000000)
                                            @ 6  java.lang.String.checkBoundsBeginEnd(int, int, int):void (11 bytes)   relevance-based (relevance=1.000010, probability=0.010128, bonus=1.000000, nodes=13 <= 300.000000)
                                          @ 178  java.lang.StringUTF16.indexOfLatin1(byte[], int, byte[], int, int):int (24 bytes)   relevance-based (relevance=1.000010, probability=0.010128, bonus=1.000000, nodes=24 <= 300.000000)
                                        @ 151  java.lang.StringUTF16.replace(byte[], int, boolean, byte[], int, boolean, byte[], int, boolean):String (620 bytes)   not inlining relevance-based (relevance=28.000280, probability=0.020256, bonus=1.000000, nodes=311 > 300.000000)
                                      @ 79  java.lang.String.replace(CharSequence, CharSequence):String (258 bytes)   relevance-based (relevance=1.000010, probability=0.061733, bonus=1.000000, nodes=234 <= 300.000000)
                                    @ 37  jdk.graal.compiler.hotspot.HotSpotTTYStreamProvider$LogStreamOptionKey.makeFilename(String):String (157 bytes)   not inlining relevance-based (relevance=2.000000, probability=0.123467, bonus=1.000000, nodes=520 > 300.000000)
                                      @ 17  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=0.398774, probability=0.035141, bonus=1.000000, nodes=9)
                                      @ 27  java.lang.StringLatin1.hashCode(byte[]):int (52 bytes)   relevance-based (relevance=0.398774, probability=0.035141, bonus=1.000000, nodes=22 <= 119.632312)
                                    @ 49  java.lang.String.hashCode():int (60 bytes)   relevance-based (relevance=2.000000, probability=0.123467, bonus=1.000000, nodes=47 <= 300.000000)
                                  @ 1  jdk.graal.compiler.hotspot.HotSpotTTYStreamProvider$LogStreamOptionKey$DelayedOutputStream.lazy():OutputStream (266 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.987734, bonus=1.000000, nodes=307 > 300.000000)
                                @ 7  java.io.OutputStream.write(byte[], int, int):void (34 bytes)   not inlining no type profile exists
                                @ 11  jdk.graal.compiler.hotspot.HotSpotTTYStreamProvider$LogStreamOptionKey$DelayedOutputStream.write(byte[], int, int):void (11 bytes)   relevance-based (relevance=1.012418, probability=1.000000, bonus=1.000000, nodes=84 <= 300.000000)
                            @ 11  jdk.internal.misc.InternalLock.lock():void (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.util.concurrent.locks.ReentrantLock.lock():void (8 bytes)   inline method (bytecode parsing)
                            @ 22  jdk.internal.misc.InternalLock.unlock():void (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.util.concurrent.locks.ReentrantLock.unlock():void (10 bytes)   inline method (bytecode parsing)
                                @ 5  java.util.concurrent.locks.AbstractQueuedSynchronizer.release(int):boolean (19 bytes)   inline method (bytecode parsing)
                                @ 25  java.io.BufferedOutputStream.flush():void (60 bytes)   not inlining relevance-based (relevance=0.012418, probability=0.012266, bonus=1.000000, nodes=68 > 3.725423)
                              @ 18  java.io.PrintStream.implWrite(byte[], int, int):void (29 bytes)   relevance-based (relevance=1.131007, probability=1.000000, bonus=1.000000, nodes=109 <= 300.000000)
                            @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 8  java.util.concurrent.locks.AbstractOwnableSynchronizer.getExclusiveOwnerThread():Thread (5 bytes)   inline accessor method (bytecode parsing)
                            @ 41  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                            @ 46  java.util.concurrent.locks.AbstractQueuedSynchronizer.setState(int):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  java.util.concurrent.locks.ReentrantLock$Sync.tryRelease(int):boolean (51 bytes)   relevance-based (relevance=1.131007, probability=1.000000, bonus=1.000000, nodes=37 <= 300.000000)
                            @ 22  java.util.concurrent.locks.AbstractQueuedSynchronizer$Node.getAndUnsetStatus(int):int (14 bytes)   inline method (bytecode parsing)
                              @ 10  jdk.internal.misc.Unsafe.getAndBitwiseAndInt(Object, long, int):int (27 bytes)   inline method (bytecode parsing)
                            @ 5  java.lang.Thread.isVirtual():boolean (5 bytes)   inline method (bytecode parsing)
                                @ 30  java.util.concurrent.locks.LockSupport.unpark(Thread):void (26 bytes)   not inlining relevance-based (relevance=0.006416, probability=0.004132, bonus=1.000000, nodes=23 > 1.924840)
                              @ 12  java.util.concurrent.locks.AbstractQueuedSynchronizer.signalNext(AbstractQueuedSynchronizer$Node):void (34 bytes)   relevance-based (relevance=0.985286, probability=0.871158, bonus=1.000000, nodes=56 <= 295.585768)
                            @ 1  java.util.Objects.requireNonNull(Object):Object (14 bytes)   inline method (bytecode parsing)
                                  @ 18  java.lang.Object.equals(Object):boolean (11 bytes)   trivial (relevance=1.000000, probability=3.262571, bonus=1.000000, nodes=9)
                                @ 5  java.util.Collections.eq(Object, Object):boolean (22 bytes)   relevance-based (relevance=1.000000, probability=4.046829, bonus=1.000000, nodes=36 <= 300.000000)
                              @ 29  java.util.Collections$SingletonSet.contains(Object):boolean (9 bytes)   relevance-based (relevance=1.328210, probability=4.046829, bonus=1.000000, nodes=33 <= 300.000000)
                              @ 116  java.util.ArrayList.shiftTailOverGap(Object[], int, int):void (53 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=38 <= 300.000000)
                                  @ 18  java.lang.Object.equals(Object):boolean (11 bytes)   trivial (relevance=1.000000, probability=4.311030, bonus=1.000000, nodes=9)
                                @ 5  java.util.Collections.eq(Object, Object):boolean (22 bytes)   relevance-based (relevance=1.000000, probability=5.347317, bonus=1.000000, nodes=36 <= 300.000000)
                              @ 70  java.util.Collections$SingletonSet.contains(Object):boolean (9 bytes)   relevance-based (relevance=1.390194, probability=5.347317, bonus=1.000000, nodes=33 <= 300.000000)
                            @ 4  java.util.concurrent.locks.ReentrantLock.lock():void (8 bytes)   inline method (bytecode parsing)
                            @ 17  java.util.concurrent.locks.ReentrantLock.unlock():void (10 bytes)   inline method (bytecode parsing)
                              @ 5  java.util.concurrent.locks.AbstractQueuedSynchronizer.release(int):boolean (19 bytes)   inline method (bytecode parsing)
                                  @ 93  java.lang.ref.NativeReferenceQueue.signal():void (8 bytes)   relevance-based (relevance=0.170940, probability=0.089994, bonus=1.000000, nodes=10 <= 51.282098)
                                @ 9  java.lang.ref.ReferenceQueue.enqueue0(Reference):boolean (98 bytes)   relevance-based (relevance=0.168174, probability=0.089994, bonus=1.000000, nodes=50 <= 50.452080)
                            @ 9  java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(int):void (20 bytes)   inline method (bytecode parsing)
                            @ 7  java.util.concurrent.locks.AbstractQueuedSynchronizer.compareAndSetState(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 15  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                            @ 21  java.util.concurrent.locks.AbstractOwnableSynchronizer.getExclusiveOwnerThread():Thread (5 bytes)   inline accessor method (bytecode parsing)
                            @ 29  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 51  java.util.concurrent.locks.AbstractQueuedSynchronizer.setState(int):void (6 bytes)   inline method (bytecode parsing)
                                  @ 1  java.util.concurrent.locks.ReentrantLock$NonfairSync.initialTryLock():boolean (58 bytes)   relevance-based (relevance=1.005253, probability=0.535127, bonus=1.000000, nodes=40 <= 300.000000)
                            @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 10  java.util.concurrent.locks.AbstractQueuedSynchronizer.compareAndSetState(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 20  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                                  @ 2  java.util.concurrent.locks.ReentrantLock$NonfairSync.tryAcquire(int):boolean (27 bytes)   not inlining relevance-based (relevance=0.005049, probability=0.002389, bonus=1.000000, nodes=36 > 1.514719)
                            @ 108  java.util.concurrent.locks.AbstractQueuedSynchronizer.tryAcquireShared(int):int (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.lang.UnsupportedOperationException.<init>():void (5 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.RuntimeException.<init>():void (5 bytes)   inline method (bytecode parsing)
                                  @ 1  java.lang.Exception.<init>():void (5 bytes)   inline method (bytecode parsing)
                            @ 245  java.util.concurrent.locks.AbstractQueuedSynchronizer$ExclusiveNode.<init>():void (5 bytes)   inline method (bytecode parsing)
                              @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer$Node.<init>():void (5 bytes)   inline method (bytecode parsing)
                            @ 290  java.util.concurrent.locks.AbstractQueuedSynchronizer$Node.setPrevRelaxed(AbstractQueuedSynchronizer$Node):void (12 bytes)   inline method (bytecode parsing)
                            @ 393  java.lang.Thread.interrupted():boolean (7 bytes)   inline method (bytecode parsing)
                                  @ 15  java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer$Node, int, boolean, boolean, boolean, long):int (424 bytes)   not inlining relevance-based (relevance=0.002525, probability=0.001194, bonus=1.000000, nodes=226 > 0.757359)
                                @ 4  java.util.concurrent.locks.ReentrantLock$Sync.lock():void (13 bytes)   relevance-based (relevance=1.147619, probability=0.535127, bonus=1.000000, nodes=57 <= 300.000000)
                            @ 1  java.util.concurrent.locks.AbstractOwnableSynchronizer.getExclusiveOwnerThread():Thread (5 bytes)   inline accessor method (bytecode parsing)
                                      @ 9  java.util.concurrent.locks.ReentrantLock$Sync.isHeldExclusively():boolean (16 bytes)   relevance-based (relevance=1.002845, probability=0.469573, bonus=1.000000, nodes=15 <= 300.000000)
                            @ 25  java.util.concurrent.locks.AbstractQueuedSynchronizer$Node.getAndUnsetStatus(int):int (14 bytes)   inline method (bytecode parsing)
                              @ 10  jdk.internal.misc.Unsafe.getAndBitwiseAndInt(Object, long, int):int (27 bytes)   inline method (bytecode parsing)
                                      @ 30  java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.doSignal(AbstractQueuedSynchronizer$ConditionNode, boolean):void (54 bytes)   not inlining relevance-based (relevance=0.002845, probability=0.001332, bonus=1.000000, nodes=63 > 0.853485)
                                    @ 4  java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.signalAll():void (34 bytes)   relevance-based (relevance=1.000000, probability=0.469573, bonus=1.000000, nodes=31 <= 300.000000)
                                  @ 93  java.lang.ref.ReferenceQueue.signal():void (10 bytes)   relevance-based (relevance=1.016452, probability=0.535127, bonus=1.000000, nodes=46 <= 300.000000)
                                @ 9  java.lang.ref.ReferenceQueue.enqueue0(Reference):boolean (98 bytes)   relevance-based (relevance=1.131007, probability=0.535127, bonus=1.000000, nodes=92 <= 300.000000)
                            @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 8  java.util.concurrent.locks.AbstractOwnableSynchronizer.getExclusiveOwnerThread():Thread (5 bytes)   inline accessor method (bytecode parsing)
                            @ 41  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                            @ 46  java.util.concurrent.locks.AbstractQueuedSynchronizer.setState(int):void (6 bytes)   inline method (bytecode parsing)
                                @ 2  java.util.concurrent.locks.ReentrantLock$Sync.tryRelease(int):boolean (51 bytes)   relevance-based (relevance=1.131007, probability=0.535127, bonus=1.000000, nodes=37 <= 300.000000)
                            @ 22  java.util.concurrent.locks.AbstractQueuedSynchronizer$Node.getAndUnsetStatus(int):int (14 bytes)   inline method (bytecode parsing)
                              @ 10  jdk.internal.misc.Unsafe.getAndBitwiseAndInt(Object, long, int):int (27 bytes)   inline method (bytecode parsing)
                            @ 5  java.lang.Thread.isVirtual():boolean (5 bytes)   inline method (bytecode parsing)
                                  @ 30  java.util.concurrent.locks.LockSupport.unpark(Thread):void (26 bytes)   not inlining relevance-based (relevance=0.006418, probability=0.002212, bonus=1.000000, nodes=23 > 1.925307)
                                @ 12  java.util.concurrent.locks.AbstractQueuedSynchronizer.signalNext(AbstractQueuedSynchronizer$Node):void (34 bytes)   relevance-based (relevance=0.985525, probability=0.466293, bonus=1.000000, nodes=56 <= 295.657533)
                              @ 14  java.lang.ref.ReferenceQueue.enqueue(Reference):boolean (32 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.625121, bonus=1.000000, nodes=304 > 300.000000)
                              @ 5  java.lang.String.toString():String (2 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=4)
                            @ 7  java.io.FileDescriptor$1.getAppend(FileDescriptor):boolean (5 bytes)   inline method (bytecode parsing)
                            @ 6  jdk.internal.misc.Blocker.currentCarrierThread():Thread (9 bytes)   inline method (bytecode parsing)
                              @ 3  java.lang.System$2.currentCarrierThread():Thread (4 bytes)   inline method (bytecode parsing)
                                @ 0  jdk.internal.misc.VM.isBooted():boolean (13 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=10 <= 300.000000)
                              @ 14  jdk.internal.misc.Blocker.begin():long (97 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=20 <= 300.000000)
                 n          @ 25  java.io.FileOutputStream.writeBytes(byte[], int, int, boolean):void (0 bytes)   not inlining it is a non-intrinsic native method
                              @ 30  jdk.internal.misc.Blocker.end(long):void (71 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=4)
                              @ 2235  jdk.internal.org.objectweb.asm.Frame.pop():int (42 bytes)   relevance-based (relevance=0.381994, probability=0.091263, bonus=1.000000, nodes=28 <= 114.598169)
                                @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=0.381994, probability=0.091263, bonus=1.000000, nodes=9)
                            @ 3  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                                @ 12  java.lang.StringLatin1.charAt(byte[], int):char (15 bytes)   relevance-based (relevance=0.381994, probability=0.091263, bonus=1.000000, nodes=11 <= 114.598169)
                              @ 2242  java.lang.String.charAt(int):char (25 bytes)   relevance-based (relevance=0.381994, probability=0.091263, bonus=1.000000, nodes=15 <= 114.598169)
                            @ 4  jdk.internal.org.objectweb.asm.SymbolTable.hash(int, String):int (10 bytes)   inline method (bytecode parsing)
                            @ 74  jdk.internal.org.objectweb.asm.SymbolTable$Entry.<init>(int, int, String, int):void (17 bytes)   inline method (bytecode parsing)
                              @ 7  jdk.internal.org.objectweb.asm.Symbol.<init>(int, int, String, String, String, long):void (38 bytes)   inline method (bytecode parsing)
                              @ 2268  jdk.internal.org.objectweb.asm.SymbolTable.addType(String):int (81 bytes)   not inlining relevance-based (relevance=0.377962, probability=0.090299, bonus=1.000000, nodes=123 > 113.388690)
                                @ 38  java.lang.Math.max(int, int):int (11 bytes)   trivial (relevance=0.000119, probability=0.000025, bonus=1.000000, nodes=7)
                              @ 2272  jdk.internal.org.objectweb.asm.Frame.push(int):void (109 bytes)   relevance-based (relevance=0.377962, probability=0.090299, bonus=1.000000, nodes=74 <= 113.388690)
                              @ 2255  jdk.internal.org.objectweb.asm.Frame.push(SymbolTable, String):void (59 bytes)   not inlining relevance-based (relevance=0.004032, probability=0.000963, bonus=1.000000, nodes=56 > 1.209479)
                              @ 2167  jdk.internal.org.objectweb.asm.Frame.pop():int (42 bytes)   not inlining relevance-based (relevance=0.062564, probability=0.014947, bonus=1.000000, nodes=28 > 18.769074)
                                @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=0.062564, probability=0.014947, bonus=1.000000, nodes=9)
                            @ 3  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                                @ 12  java.lang.StringLatin1.charAt(byte[], int):char (15 bytes)   relevance-based (relevance=0.062564, probability=0.014947, bonus=1.000000, nodes=11 <= 18.769074)
                              @ 2174  java.lang.String.charAt(int):char (25 bytes)   relevance-based (relevance=0.062564, probability=0.014947, bonus=1.000000, nodes=15 <= 18.769074)
                            @ 4  jdk.internal.org.objectweb.asm.SymbolTable.hash(int, String):int (10 bytes)   inline method (bytecode parsing)
                            @ 74  jdk.internal.org.objectweb.asm.SymbolTable$Entry.<init>(int, int, String, int):void (17 bytes)   inline method (bytecode parsing)
                              @ 7  jdk.internal.org.objectweb.asm.Symbol.<init>(int, int, String, String, String, long):void (38 bytes)   inline method (bytecode parsing)
                              @ 2218  jdk.internal.org.objectweb.asm.SymbolTable.addType(String):int (81 bytes)   not inlining relevance-based (relevance=0.062564, probability=0.014947, bonus=1.000000, nodes=123 > 18.769074)
                              @ 2222  jdk.internal.org.objectweb.asm.Frame.push(int):void (109 bytes)   not inlining relevance-based (relevance=0.062564, probability=0.014947, bonus=1.000000, nodes=75 > 18.769074)
                            @ 5  jdk.internal.org.objectweb.asm.SymbolTable.hash(int, String, int):int (12 bytes)   inline method (bytecode parsing)
