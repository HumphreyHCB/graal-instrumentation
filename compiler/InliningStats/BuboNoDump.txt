VM Arguments: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:-UnlockExperimentalVMOptions -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -Djdk.graal.CompilationFailureAction=Diagnose -Djdk.graal.DumpOnError=true -Djdk.graal.ShowDumpFiles=true -Djdk.graal.PrintGraph=Network -Djdk.graal.ObjdumpExecutables=objdump,gobjdump -Dgraalvm.locatorDisabled=true -XX:+UseJVMCICompiler -Dgraal.EnableProfiler=true -Dgraal.MinGraphSize=80 -Dgraal.CountCompiledMethods=false -Dgraal.BuboDebugMode=false -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -Dgraal.CompilationFailureAction=Diagnose -XX:+UseJVMCICompiler -Dgraal.HotSpotPrintInlining=true -Djdk.graal.LogFile=BuboNoDump.txt --add-exports=jdk.graal.compiler/jdk.graal.compiler.hotspot.meta.Bubo=ALL-UNNAMED -javaagent:/home/hburchell/Repos/graal-dev/graal-instrumentation/Bubo-Agent/target/JavaAgent-1.0-SNAPSHOT-jar-with-dependencies.jar
sun.java.command=Harness DeltaBlue 300 60000
                            @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.registerAsWord(Register):Word (7 bytes)   inline method (bytecode parsing)
                            @ 14  jdk.graal.compiler.hotspot.stubs.ExceptionHandlerStub.checkNoExceptionInThread(Word, boolean):void (62 bytes)   inline method (bytecode parsing)
                            @ 24  jdk.graal.compiler.hotspot.stubs.ExceptionHandlerStub.checkExceptionNotNull(boolean, Object):void (14 bytes)   inline method (bytecode parsing)
                            @ 30  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.writeExceptionOop(Word, Object):void (15 bytes)   inline method (bytecode parsing)
                            @ 36  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.writeExceptionPc(Word, Word):void (15 bytes)   inline method (bytecode parsing)
                            @ 26  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 4  deltablue.Plan.lambda$execute$0(AbstractConstraint):void (5 bytes)   inline method (bytecode parsing)
                            @ 5  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 8  deltablue.Planner.lambda$incrementalRemove$0(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                @ 2  deltablue.Planner.incrementalAdd(AbstractConstraint):void (27 bytes)   not inlining relevance-based (relevance=0.000000, probability=0.000002, bonus=1.000000, nodes=24 > 0.000050)
                                @ 8  deltablue.Planner.lambda$extractPlanFromConstraints$1(Vector, AbstractConstraint):void (20 bytes)   not inlining relevance-based (relevance=0.000000, probability=0.000002, bonus=1.000000, nodes=28 > 0.000050)
                                @ 17  som.Vector.lambda$remove$0(Object, boolean[], Object[], int[], Object):void (28 bytes)   not inlining relevance-based (relevance=0.000000, probability=0.000006, bonus=1.000000, nodes=26 > 0.000150)
                                @ 12  deltablue.Planner.lambda$constraintsConsuming$3(AbstractConstraint, ForEachInterface, AbstractConstraint):void (20 bytes)   not inlining relevance-based (relevance=0.020000, probability=0.254870, bonus=1.000000, nodes=26 > 5.999950)
                                  @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000099, probability=0.000099, bonus=1.000000, nodes=41 > 0.029556)
                                @ 11  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=35 <= 300.000000)
                                @ 8  deltablue.Planner.lambda$removePropagateFrom$4(Vector, AbstractConstraint):void (13 bytes)   not inlining relevance-based (relevance=0.020000, probability=0.254870, bonus=1.000000, nodes=20 > 5.999950)
                              @ 1  som.Vector.with(Object):Vector (16 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=40 <= 300.000000)
                              @ 6  som.Vector.isEmpty():boolean (17 bytes)   relevance-based (relevance=1.999997, probability=2.000003, bonus=1.000000, nodes=10 <= 300.000000)
                                  @ 6  deltablue.BinaryConstraint.isSatisfied():boolean (13 bytes)   relevance-based (relevance=0.064576, probability=0.497143, bonus=1.000000, nodes=14 <= 19.372822)
                                @ 12  deltablue.Planner.lambda$addConstraintsConsumingTo$2(AbstractConstraint, Vector, AbstractConstraint):void (18 bytes)   not inlining relevance-based (relevance=0.098541, probability=1.255768, bonus=1.000000, nodes=42 > 29.562357)
                                @ 1  som.Vector.isEmpty():boolean (17 bytes)   relevance-based (relevance=1.000000, probability=1.000003, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 18  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                              @ 13  som.Vector.removeFirst():Object (31 bytes)   relevance-based (relevance=1.000000, probability=1.000003, bonus=1.000000, nodes=18 <= 300.000000)
                            @ 21  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 35  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 38  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                                @ 1  deltablue.EqualityConstraint.execute():void (42 bytes)   relevance-based (relevance=1.000000, probability=12.743582, bonus=1.000000, nodes=41 <= 300.000000)
                              @ 23  deltablue.BinaryConstraint.getOutput():Variable (22 bytes)   relevance-based (relevance=1.000000, probability=1.000003, bonus=1.000000, nodes=22 <= 300.000000)
                              @ 20  deltablue.Plan$$Lambda/0x00007f2ce003f1c8.apply(Object):void (8 bytes)   not inlining callee invoke probability is too high (invokeP=6.000000, relevance=1.000000, probability=14.509100, bonus=1.000000, nodes=142)
                            @ 39  deltablue.Variable.getWalkStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 45  deltablue.Variable.setWalkStrength(Strength):void (6 bytes)   inline method (bytecode parsing)
                            @ 50  deltablue.Variable.getStay():boolean (5 bytes)   inline accessor method (bytecode parsing)
                            @ 53  deltablue.Variable.setStay(boolean):void (6 bytes)   inline method (bytecode parsing)
                            @ 57  deltablue.Variable.getStay():boolean (5 bytes)   inline accessor method (bytecode parsing)
                            @ 39  deltablue.Variable.getWalkStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 45  deltablue.Variable.setWalkStrength(Strength):void (6 bytes)   inline method (bytecode parsing)
                            @ 50  deltablue.Variable.getStay():boolean (5 bytes)   inline accessor method (bytecode parsing)
                            @ 60  deltablue.Variable.getStay():boolean (5 bytes)   inline accessor method (bytecode parsing)
                            @ 70  deltablue.Variable.getStay():boolean (5 bytes)   inline accessor method (bytecode parsing)
                            @ 81  deltablue.Variable.setStay(boolean):void (6 bytes)   inline method (bytecode parsing)
                            @ 85  deltablue.Variable.getStay():boolean (5 bytes)   inline accessor method (bytecode parsing)
                            @ 8  deltablue.Variable.setWalkStrength(Strength):void (6 bytes)   inline method (bytecode parsing)
                            @ 27  deltablue.Variable.setStay(boolean):void (6 bytes)   inline method (bytecode parsing)
                            @ 34  deltablue.Variable.getStay():boolean (5 bytes)   inline accessor method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint.isInput():boolean (2 bytes)   trivial (relevance=0.191834, probability=0.093700, bonus=1.000000, nodes=4)
                                @ 41  deltablue.StayConstraint.execute():void (1 bytes)   trivial (relevance=0.191834, probability=0.093700, bonus=1.000000, nodes=3)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 2  deltablue.Strength.weaker(Strength):boolean (17 bytes)   relevance-based (relevance=0.191834, probability=0.093700, bonus=1.000000, nodes=11 <= 57.550275)
                                @ 42  deltablue.Strength.weakest(Strength):Strength (14 bytes)   relevance-based (relevance=0.191834, probability=0.093700, bonus=1.000000, nodes=12 <= 57.550275)
                            @ 18  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 25  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 33  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 37  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                                @ 92  deltablue.ScaleConstraint.execute():void (74 bytes)   relevance-based (relevance=0.191834, probability=0.093700, bonus=1.000000, nodes=32 <= 57.550275)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 2  deltablue.Strength.weaker(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.812604, bonus=1.000000, nodes=11 <= 300.000000)
                                @ 42  deltablue.Strength.weakest(Strength):Strength (14 bytes)   relevance-based (relevance=1.668565, probability=0.812604, bonus=1.000000, nodes=12 <= 300.000000)
                            @ 18  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 21  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 35  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 38  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                                @ 64  deltablue.EqualityConstraint.execute():void (42 bytes)   relevance-based (relevance=1.334282, probability=0.649806, bonus=1.000000, nodes=38 <= 300.000000)
                              @ 42  deltablue.BinaryConstraint.recalculate():void (68 bytes)   relevance-based (relevance=1.663668, probability=1.000003, bonus=1.000000, nodes=206 <= 300.000000)
                              @ 48  deltablue.BinaryConstraint.getOutput():Variable (22 bytes)   relevance-based (relevance=1.663668, probability=1.000003, bonus=1.000000, nodes=22 <= 300.000000)
                            @ 1  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 6  deltablue.Variable.getConstraints():Vector (5 bytes)   inline accessor method (bytecode parsing)
                            @ 11  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object, Object):Object (10 bytes)   inline method (bytecode parsing)
                              @ 6  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object, Object):Object (24 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 19  deltablue.Planner$$Lambda/0x00007f2ce003d968.<init>(AbstractConstraint, Vector):void (15 bytes)   relevance-based (relevance=1.000000, probability=1.000003, bonus=1.000000, nodes=11 <= 300.000000)
                                      @ 6  deltablue.BinaryConstraint.isSatisfied():boolean (13 bytes)   relevance-based (relevance=0.598864, probability=4.959077, bonus=1.000000, nodes=14 <= 179.659249)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                        @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000015, probability=0.000122, bonus=1.000000, nodes=41 > 0.004425)
                                      @ 14  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=0.149715, probability=1.239759, bonus=1.000000, nodes=35 <= 44.914438)
                                    @ 12  deltablue.Planner.lambda$addConstraintsConsumingTo$2(AbstractConstraint, Vector, AbstractConstraint):void (18 bytes)   relevance-based (relevance=1.000000, probability=13.239883, bonus=1.000000, nodes=72 <= 300.000000)
                                  @ 20  deltablue.Planner$$Lambda/0x00007f2ce003d968.apply(Object):void (16 bytes)   relevance-based (relevance=1.000000, probability=13.239883, bonus=1.000000, nodes=79 <= 300.000000)
                                @ 16  som.Vector.forEach(ForEachInterface):void (32 bytes)   relevance-based (relevance=1.000000, probability=1.000003, bonus=1.000000, nodes=92 <= 300.000000)
                              @ 52  deltablue.Planner.addConstraintsConsumingTo(Variable, Vector):void (20 bytes)   relevance-based (relevance=1.663668, probability=1.000003, bonus=1.000000, nodes=111 <= 300.000000)
                              @ 1  deltablue.Planner.newMark():int (15 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f2ce003d750.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 4  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 15  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 30  deltablue.Variable.getWalkStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 65  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 76  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 91  deltablue.Variable.getWalkStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 126  deltablue.Variable.getWalkStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 133  deltablue.Variable.getWalkStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 189  deltablue.Variable.getWalkStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 23  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                            @ 5  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 20  deltablue.Variable.getWalkStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 37  jdk.graal.compiler.nodes.PiNode.piCastNonNull(Object, GuardingNode):Object (9 bytes)   inline method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 23  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=0.400188, probability=0.166923, bonus=1.000000, nodes=13 <= 120.056336)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 72  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                  @ 136  deltablue.Strength.weaker(Strength):boolean (17 bytes)   relevance-based (relevance=0.995733, probability=0.332374, bonus=1.000000, nodes=14 <= 298.720011)
                              @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                            @ 83  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 192  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=0.995733, probability=0.332374, bonus=1.000000, nodes=13 <= 298.720011)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 94  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.333798, bonus=1.000000, nodes=13 <= 300.000000)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 33  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=0.500004, probability=0.166900, bonus=1.000000, nodes=13 <= 150.001250)
                                @ 2  deltablue.BinaryConstraint.chooseMethod(int):Direction (220 bytes)   relevance-based (relevance=1.997178, probability=1.000000, bonus=1.000000, nodes=138 <= 300.000000)
                            @ 23  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                                @ 7  deltablue.BinaryConstraint.isSatisfied():boolean (13 bytes)   relevance-based (relevance=2.995825, probability=1.000000, bonus=1.000000, nodes=14 <= 300.000000)
                            @ 43  jdk.graal.compiler.nodes.PiNode.piCastNonNull(Object, GuardingNode):Object (9 bytes)   inline method (bytecode parsing)
                            @ 117  jdk.graal.compiler.hotspot.replacements.TypeCheckSnippetUtils.checkUnknownSubType(KlassPointer, KlassPointer, TypeCheckSnippetUtils$Counters):boolean (91 bytes)   inline method (bytecode parsing)
                              @ 55  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                              @ 65  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                              @ 79  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                            @ 8  deltablue.AbstractConstraint.lambda$satisfy$1(int, Variable):void (6 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                              @ 2  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                              @ 87  jdk.graal.compiler.hotspot.replacements.TypeCheckSnippetUtils.checkSelfAndSupers(KlassPointer, KlassPointer, TypeCheckSnippetUtils$Counters):boolean (113 bytes)   inline method (bytecode parsing)
                                @ 12  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                  @ 48  deltablue.AbstractConstraint$$Lambda/0x00007f2ce003d750.apply(Object):void (12 bytes)   not inlining relevance-based (relevance=0.000013, probability=0.000003, bonus=1.000000, nodes=13 > 0.003802)
                                  @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                            @ 8  deltablue.AbstractConstraint.lambda$satisfy$1(int, Variable):void (6 bytes)   inline method (bytecode parsing)
                                @ 63  jdk.graal.compiler.hotspot.replacements.TypeCheckSnippetUtils.loadSecondarySupersElement(Word, int):KlassPointer (26 bytes)   inline method (bytecode parsing)
                              @ 2  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                                  @ 58  deltablue.AbstractConstraint$$Lambda/0x00007f2ce003d750.apply(Object):void (12 bytes)   not inlining relevance-based (relevance=0.000013, probability=0.000003, bonus=1.000000, nodes=13 > 0.003802)
                            @ 8  deltablue.AbstractConstraint.lambda$satisfy$1(int, Variable):void (6 bytes)   inline method (bytecode parsing)
                                @ 93  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                              @ 2  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                                  @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                                @ 108  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                  @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                                  @ 68  deltablue.AbstractConstraint$$Lambda/0x00007f2ce003d750.apply(Object):void (12 bytes)   not inlining relevance-based (relevance=0.000013, probability=0.000003, bonus=1.000000, nodes=13 > 0.003802)
                            @ 8  deltablue.AbstractConstraint.lambda$satisfy$1(int, Variable):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                                  @ 15  deltablue.AbstractConstraint$$Lambda/0x00007f2ce003d750.apply(Object):void (12 bytes)   relevance-based (relevance=0.750573, probability=0.166900, bonus=1.000000, nodes=13 <= 225.171921)
                            @ 8  deltablue.AbstractConstraint.lambda$satisfy$1(int, Variable):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                                  @ 25  deltablue.AbstractConstraint$$Lambda/0x00007f2ce003d750.apply(Object):void (12 bytes)   relevance-based (relevance=0.750573, probability=0.166900, bonus=1.000000, nodes=13 <= 225.171921)
                            @ 8  deltablue.AbstractConstraint.lambda$satisfy$1(int, Variable):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                                  @ 35  deltablue.AbstractConstraint$$Lambda/0x00007f2ce003d750.apply(Object):void (12 bytes)   relevance-based (relevance=0.750573, probability=0.166900, bonus=1.000000, nodes=13 <= 225.171921)
                            @ 8  deltablue.AbstractConstraint.lambda$satisfy$1(int, Variable):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                                  @ 28  deltablue.AbstractConstraint$$Lambda/0x00007f2ce003d750.apply(Object):void (12 bytes)   relevance-based (relevance=1.000000, probability=0.333795, bonus=1.000000, nodes=13 <= 300.000000)
                            @ 8  deltablue.AbstractConstraint.lambda$satisfy$1(int, Variable):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                                  @ 15  deltablue.AbstractConstraint$$Lambda/0x00007f2ce003d750.apply(Object):void (12 bytes)   relevance-based (relevance=0.995742, probability=0.332374, bonus=1.000000, nodes=13 <= 298.722500)
                                @ 20  deltablue.BinaryConstraint.inputsDo(ForEachInterface):void (34 bytes)   relevance-based (relevance=2.995800, probability=0.999992, bonus=1.000000, nodes=95 <= 300.000000)
                              @ 8  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=312 > 300.000000)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f2ce003d750.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 4  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 15  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 30  deltablue.Variable.getWalkStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 65  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 76  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 91  deltablue.Variable.getWalkStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 126  deltablue.Variable.getWalkStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 133  deltablue.Variable.getWalkStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 189  deltablue.Variable.getWalkStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 20  deltablue.Variable.getWalkStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 23  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=0.400188, probability=0.167395, bonus=1.000000, nodes=13 <= 120.056336)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 136  deltablue.Strength.weaker(Strength):boolean (17 bytes)   relevance-based (relevance=0.995733, probability=0.333314, bonus=1.000000, nodes=14 <= 298.720011)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 192  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=0.995733, probability=0.333314, bonus=1.000000, nodes=13 <= 298.720011)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 94  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.334743, bonus=1.000000, nodes=13 <= 300.000000)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 33  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=0.500004, probability=0.167373, bonus=1.000000, nodes=13 <= 150.001250)
                                @ 2  deltablue.BinaryConstraint.chooseMethod(int):Direction (220 bytes)   relevance-based (relevance=1.997178, probability=1.002830, bonus=1.000000, nodes=138 <= 300.000000)
                            @ 23  jdk.graal.compiler.replacements.AllocationSnippets.allocateArrayImpl(Word, int, int, int, AllocationSnippets$FillContent, int, boolean, boolean, boolean, boolean, AllocationSnippets$AllocationProfilingData):Object (178 bytes)   inline method (bytecode parsing)
                                @ 7  deltablue.BinaryConstraint.isSatisfied():boolean (13 bytes)   relevance-based (relevance=2.995825, probability=1.002830, bonus=1.000000, nodes=14 <= 300.000000)
                              @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getTLABInfo():Word (5 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getThread():Word (8 bytes)   inline method (bytecode parsing)
                                  @ 4  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.registerAsWord(Register):Word (7 bytes)   inline method (bytecode parsing)
                              @ 9  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.readTlabTop(Word):Word (5 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.readTlabTop(Word):Word (17 bytes)   inline method (bytecode parsing)
                              @ 17  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.readTlabEnd(Word):Word (5 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.readTlabEnd(Word):Word (17 bytes)   inline method (bytecode parsing)
                            @ 8  deltablue.AbstractConstraint.lambda$satisfy$1(int, Variable):void (6 bytes)   inline method (bytecode parsing)
                              @ 36  jdk.graal.compiler.replacements.ReplacementsUtil.dynamicAssert(boolean, String):void (12 bytes)   inline method (bytecode parsing)
                              @ 2  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                              @ 44  jdk.graal.compiler.replacements.AllocationSnippets.arrayAllocationSize(int, int, int):UnsignedWord (18 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.objectAlignment():int (7 bytes)   inline method (bytecode parsing)
                                @ 11  jdk.graal.compiler.replacements.AllocationSnippets.arrayAllocationSize(int, int, int, int):long (32 bytes)   inline method (bytecode parsing)
                                  @ 48  deltablue.AbstractConstraint$$Lambda/0x00007f2ce003d750.apply(Object):void (12 bytes)   not inlining relevance-based (relevance=0.000013, probability=0.000003, bonus=1.000000, nodes=13 > 0.003802)
                            @ 8  deltablue.AbstractConstraint.lambda$satisfy$1(int, Variable):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                                  @ 58  deltablue.AbstractConstraint$$Lambda/0x00007f2ce003d750.apply(Object):void (12 bytes)   not inlining relevance-based (relevance=0.000013, probability=0.000003, bonus=1.000000, nodes=13 > 0.003802)
                            @ 8  deltablue.AbstractConstraint.lambda$satisfy$1(int, Variable):void (6 bytes)   inline method (bytecode parsing)
                              @ 59  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.useTLAB():boolean (7 bytes)   inline method (bytecode parsing)
                              @ 2  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                              @ 72  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.shouldAllocateInTLAB(UnsignedWord, boolean):boolean (33 bytes)   inline method (bytecode parsing)
                                  @ 68  deltablue.AbstractConstraint$$Lambda/0x00007f2ce003d750.apply(Object):void (12 bytes)   not inlining relevance-based (relevance=0.000013, probability=0.000003, bonus=1.000000, nodes=13 > 0.003802)
                              @ 102  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.writeTlabTop(Word, Word):void (6 bytes)   inline method (bytecode parsing)
                                @ 2  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.writeTlabTop(Word, Word):void (15 bytes)   inline method (bytecode parsing)
                            @ 8  deltablue.AbstractConstraint.lambda$satisfy$1(int, Variable):void (6 bytes)   inline method (bytecode parsing)
                              @ 109  jdk.graal.compiler.replacements.AllocationSnippets.emitPrefetchAllocate(Word, boolean):void (61 bytes)   inline method (bytecode parsing)
                              @ 2  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getPrefetchStyle():int (7 bytes)   inline method (bytecode parsing)
                                @ 9  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getPrefetchLines(boolean):int (18 bytes)   inline method (bytecode parsing)
                                @ 14  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getPrefetchStepSize():int (7 bytes)   inline method (bytecode parsing)
                                  @ 15  deltablue.AbstractConstraint$$Lambda/0x00007f2ce003d750.apply(Object):void (12 bytes)   relevance-based (relevance=0.750573, probability=0.167373, bonus=1.000000, nodes=13 <= 225.171921)
                                @ 20  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getPrefetchDistance():int (7 bytes)   inline method (bytecode parsing)
                            @ 8  deltablue.AbstractConstraint.lambda$satisfy$1(int, Variable):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                              @ 136  jdk.graal.compiler.replacements.AllocationSnippets.formatArray(Word, UnsignedWord, int, Word, AllocationSnippets$FillContent, boolean, int, boolean, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):Object (53 bytes)   inline method (bytecode parsing)
                                  @ 25  deltablue.AbstractConstraint$$Lambda/0x00007f2ce003d750.apply(Object):void (12 bytes)   relevance-based (relevance=0.750573, probability=0.167373, bonus=1.000000, nodes=13 <= 225.171921)
                                @ 5  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.initializeObjectHeader(Word, Word, boolean):void (29 bytes)   inline method (bytecode parsing)
                                  @ 25  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.initializeObjectHeader(Word, Word, KlassPointer):void (20 bytes)   inline method (bytecode parsing)
                            @ 8  deltablue.AbstractConstraint.lambda$satisfy$1(int, Variable):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                                @ 11  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.arrayLengthOffset():int (7 bytes)   inline method (bytecode parsing)
                                @ 15  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                                  @ 35  deltablue.AbstractConstraint$$Lambda/0x00007f2ce003d750.apply(Object):void (12 bytes)   relevance-based (relevance=0.750573, probability=0.167373, bonus=1.000000, nodes=13 <= 225.171921)
                                @ 38  jdk.graal.compiler.replacements.AllocationSnippets.fillContents(Word, AllocationSnippets$FillContent, int, UnsignedWord, boolean, boolean, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):void (58 bytes)   inline method (bytecode parsing)
                                  @ 22  jdk.graal.compiler.replacements.AllocationSnippets.zeroMemory(Word, int, UnsignedWord, boolean, boolean, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):void (19 bytes)   inline method (bytecode parsing)
                                    @ 15  jdk.graal.compiler.replacements.AllocationSnippets.fillMemory(long, Word, int, UnsignedWord, boolean, boolean, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):void (194 bytes)   inline method (bytecode parsing)
                            @ 8  deltablue.AbstractConstraint.lambda$satisfy$1(int, Variable):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                                      @ 17  jdk.graal.compiler.replacements.ReplacementsUtil.dynamicAssert(boolean, String):void (12 bytes)   inline method (bytecode parsing)
                                      @ 56  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                                  @ 28  deltablue.AbstractConstraint$$Lambda/0x00007f2ce003d750.apply(Object):void (12 bytes)   relevance-based (relevance=1.000000, probability=0.334740, bonus=1.000000, nodes=13 <= 300.000000)
                                      @ 89  jdk.graal.compiler.replacements.ReplacementsUtil.dynamicAssert(boolean, String):void (12 bytes)   inline method (bytecode parsing)
                            @ 8  deltablue.AbstractConstraint.lambda$satisfy$1(int, Variable):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                                  @ 15  deltablue.AbstractConstraint$$Lambda/0x00007f2ce003d750.apply(Object):void (12 bytes)   relevance-based (relevance=0.995742, probability=0.333314, bonus=1.000000, nodes=13 <= 298.722500)
                                @ 20  deltablue.BinaryConstraint.inputsDo(ForEachInterface):void (34 bytes)   relevance-based (relevance=2.995800, probability=1.002822, bonus=1.000000, nodes=95 <= 300.000000)
                                      @ 153  jdk.graal.compiler.replacements.ReplacementsUtil.staticAssert(boolean, String):void (12 bytes)   inline method (bytecode parsing)
                                      @ 167  jdk.graal.compiler.replacements.AllocationSnippets.fillMemoryAlignedUnrollable(long, Word, UnsignedWord, UnsignedWord, boolean, AllocationSnippets$AllocationSnippetCounters):void (68 bytes)   inline method (bytecode parsing)
                                        @ 5  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                          @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                              @ 19  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining relevance-based (relevance=1.000000, probability=1.002830, bonus=1.000000, nodes=312 > 300.000000)
                                        @ 44  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                                      @ 190  jdk.graal.compiler.replacements.AllocationSnippets.fillMemoryAligned(long, Word, UnsignedWord, UnsignedWord, boolean, UnsignedWord, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):void (155 bytes)   inline method (bytecode parsing)
                                        @ 17  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getMinimalBulkZeroingSize():int (7 bytes)   inline method (bytecode parsing)
                                        @ 36  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                          @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                                        @ 53  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                                        @ 105  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                          @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                                        @ 134  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                                @ 44  jdk.graal.compiler.replacements.AllocationSnippets.emitMemoryBarrierIf(boolean):void (14 bytes)   inline method (bytecode parsing)
                              @ 152  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                              @ 158  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.callNewArrayStub(Word, int):Object (35 bytes)   inline method (bytecode parsing)
                                @ 22  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.nonNullOrDeopt(Object):Object (27 bytes)   inline method (bytecode parsing)
                              @ 168  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.profileAllocation(AllocationSnippets$AllocationProfilingData, UnsignedWord):void (51 bytes)   inline method (bytecode parsing)
                              @ 174  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.verifyOop(Object):Object (5 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.verifyOop(Object):Object (19 bytes)   inline method (bytecode parsing)
                            @ 4  deltablue.Plan.lambda$execute$0(AbstractConstraint):void (5 bytes)   inline method (bytecode parsing)
                            @ 8  deltablue.Planner.lambda$incrementalRemove$0(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                                @ 2  deltablue.Planner.incrementalAdd(AbstractConstraint):void (27 bytes)   not inlining relevance-based (relevance=0.000000, probability=0.000000, bonus=1.000000, nodes=24 > 0.000050)
                            @ 12  jdk.graal.compiler.replacements.gc.G1WriteBarrierSnippets.satbBarrier(AddressNode$Address, Object, Object, boolean, boolean, int, G1WriteBarrierSnippets$Counters):void (417 bytes)   inline method (bytecode parsing)
                                @ 8  deltablue.Planner.lambda$extractPlanFromConstraints$1(Vector, AbstractConstraint):void (20 bytes)   not inlining relevance-based (relevance=0.000000, probability=0.000000, bonus=1.000000, nodes=28 > 0.000050)
                              @ 10  jdk.graal.compiler.hotspot.replacements.HotSpotG1WriteBarrierSnippets.getThread():Word (8 bytes)   inline method (bytecode parsing)
                                @ 4  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.registerAsWord(Register):Word (7 bytes)   inline method (bytecode parsing)
                              @ 17  jdk.graal.compiler.replacements.gc.G1WriteBarrierSnippets.verifyOop(Object):void (17 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotG1WriteBarrierSnippets.verifyOops():boolean (7 bytes)   inline method (bytecode parsing)
                              @ 29  jdk.graal.compiler.hotspot.replacements.HotSpotG1WriteBarrierSnippets.satbQueueMarkingActiveOffset():int (7 bytes)   inline method (bytecode parsing)
                                @ 17  som.Vector.lambda$remove$0(Object, boolean[], Object[], int[], Object):void (28 bytes)   not inlining relevance-based (relevance=0.000000, probability=0.000000, bonus=1.000000, nodes=26 > 0.000150)
                              @ 43  jdk.graal.compiler.replacements.gc.G1WriteBarrierSnippets.isTracingActive(int):boolean (30 bytes)   inline method (bytecode parsing)
                              @ 198  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                                @ 8  deltablue.Planner.lambda$removePropagateFrom$4(Vector, AbstractConstraint):void (13 bytes)   not inlining relevance-based (relevance=0.020000, probability=0.015794, bonus=1.000000, nodes=20 > 5.999950)
                              @ 231  org.graalvm.word.LocationIdentity.any():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                              @ 288  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                              @ 315  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                              @ 321  jdk.graal.compiler.hotspot.replacements.HotSpotG1WriteBarrierSnippets.satbQueueIndexOffset():int (7 bytes)   inline method (bytecode parsing)
                                @ 12  deltablue.Planner.lambda$constraintsConsuming$3(AbstractConstraint, ForEachInterface, AbstractConstraint):void (20 bytes)   not inlining relevance-based (relevance=0.040000, probability=0.031589, bonus=1.000000, nodes=26 > 12.000150)
                              @ 353  jdk.graal.compiler.hotspot.replacements.HotSpotG1WriteBarrierSnippets.satbQueueBufferOffset():int (7 bytes)   inline method (bytecode parsing)
                              @ 370  jdk.graal.compiler.hotspot.replacements.HotSpotG1WriteBarrierSnippets.wordSize():int (4 bytes)   inline method (bytecode parsing)
                              @ 396  jdk.graal.compiler.hotspot.replacements.HotSpotG1WriteBarrierSnippets.satbQueueIndexOffset():int (7 bytes)   inline method (bytecode parsing)
                              @ 413  jdk.graal.compiler.replacements.gc.G1WriteBarrierSnippets.g1PreBarrierStub(Object):void (9 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotG1WriteBarrierSnippets.preWriteBarrierCallDescriptor():ForeignCallDescriptor (4 bytes)   inline method (bytecode parsing)
                                  @ 6  deltablue.BinaryConstraint.isSatisfied():boolean (13 bytes)   relevance-based (relevance=0.082801, probability=0.037031, bonus=1.000000, nodes=14 <= 24.840169)
                                @ 12  deltablue.Planner.lambda$addConstraintsConsumingTo$2(AbstractConstraint, Vector, AbstractConstraint):void (18 bytes)   not inlining relevance-based (relevance=0.108126, probability=0.085389, bonus=1.000000, nodes=42 > 32.437709)
                            @ 18  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 21  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 35  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 38  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotG1WriteBarrierSnippets.getThread():Word (8 bytes)   inline method (bytecode parsing)
                              @ 4  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.registerAsWord(Register):Word (7 bytes)   inline method (bytecode parsing)
                            @ 14  jdk.graal.compiler.replacements.gc.G1WriteBarrierSnippets.verifyOop(Object):void (17 bytes)   inline method (bytecode parsing)
                            @ 18  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                              @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotG1WriteBarrierSnippets.verifyOops():boolean (7 bytes)   inline method (bytecode parsing)
                            @ 25  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 20  jdk.graal.compiler.replacements.gc.G1WriteBarrierSnippets.verifyOop(Object):void (17 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotG1WriteBarrierSnippets.verifyOops():boolean (7 bytes)   inline method (bytecode parsing)
                            @ 33  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 27  jdk.graal.compiler.replacements.gc.G1WriteBarrierSnippets.validateObject(Object, Object):void (52 bytes)   inline method (bytecode parsing)
                            @ 37  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotG1WriteBarrierSnippets.verifyOops():boolean (7 bytes)   inline method (bytecode parsing)
                            @ 45  jdk.graal.compiler.hotspot.replacements.HotSpotG1WriteBarrierSnippets.verifyBarrier():boolean (21 bytes)   inline method (bytecode parsing)
                            @ 51  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 58  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 64  jdk.graal.compiler.replacements.gc.G1WriteBarrierSnippets.isTracingActive(int):boolean (30 bytes)   inline method (bytecode parsing)
                            @ 66  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 156  jdk.graal.compiler.hotspot.replacements.HotSpotG1WriteBarrierSnippets.logOfHeapRegionGrainBytes():int (7 bytes)   inline method (bytecode parsing)
                            @ 70  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 184  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                            @ 209  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                                @ 1  deltablue.EqualityConstraint.execute():void (42 bytes)   relevance-based (relevance=1.000000, probability=0.789720, bonus=1.000000, nodes=103 <= 300.000000)
                            @ 232  jdk.graal.compiler.hotspot.replacements.HotSpotG1WriteBarrierSnippets.cardTableAddress(Pointer):Word (32 bytes)   inline method (bytecode parsing)
                            @ 253  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                            @ 262  jdk.graal.compiler.hotspot.replacements.HotSpotG1WriteBarrierSnippets.youngCardValue():byte (7 bytes)   inline method (bytecode parsing)
                              @ 20  deltablue.Plan$$Lambda/0x00007f2ce003f1c8.apply(Object):void (8 bytes)   not inlining callee invoke probability is too high (invokeP=6.000000, relevance=1.000000, probability=0.922494, bonus=1.000000, nodes=200)
                            @ 305  jdk.graal.compiler.hotspot.replacements.HotSpotG1WriteBarrierSnippets.dirtyCardValue():byte (7 bytes)   inline method (bytecode parsing)
                            @ 4  deltablue.Plan.lambda$execute$0(AbstractConstraint):void (5 bytes)   inline method (bytecode parsing)
                            @ 345  jdk.graal.compiler.replacements.gc.G1WriteBarrierSnippets.log(boolean, String, long, long, long):void (21 bytes)   inline method (bytecode parsing)
                            @ 352  jdk.graal.compiler.hotspot.replacements.HotSpotG1WriteBarrierSnippets.dirtyCardValue():byte (7 bytes)   inline method (bytecode parsing)
                            @ 366  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                            @ 372  jdk.graal.compiler.hotspot.replacements.HotSpotG1WriteBarrierSnippets.cardQueueIndexOffset():int (7 bytes)   inline method (bytecode parsing)
                            @ 404  jdk.graal.compiler.hotspot.replacements.HotSpotG1WriteBarrierSnippets.cardQueueBufferOffset():int (7 bytes)   inline method (bytecode parsing)
                            @ 421  jdk.graal.compiler.hotspot.replacements.HotSpotG1WriteBarrierSnippets.wordSize():int (4 bytes)   inline method (bytecode parsing)
                            @ 444  jdk.graal.compiler.hotspot.replacements.HotSpotG1WriteBarrierSnippets.cardQueueIndexOffset():int (7 bytes)   inline method (bytecode parsing)
                            @ 461  jdk.graal.compiler.replacements.gc.G1WriteBarrierSnippets.g1PostBarrierStub(Word):void (9 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotG1WriteBarrierSnippets.postWriteBarrierCallDescriptor():ForeignCallDescriptor (4 bytes)   inline method (bytecode parsing)
                            @ 8  deltablue.Planner.lambda$incrementalRemove$0(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                                @ 2  deltablue.Planner.incrementalAdd(AbstractConstraint):void (27 bytes)   not inlining relevance-based (relevance=0.000000, probability=0.000001, bonus=1.000000, nodes=24 > 0.000050)
                                @ 8  deltablue.Planner.lambda$extractPlanFromConstraints$1(Vector, AbstractConstraint):void (20 bytes)   not inlining relevance-based (relevance=0.000000, probability=0.000001, bonus=1.000000, nodes=28 > 0.000050)
                                @ 17  som.Vector.lambda$remove$0(Object, boolean[], Object[], int[], Object):void (28 bytes)   not inlining relevance-based (relevance=0.000000, probability=0.000004, bonus=1.000000, nodes=26 > 0.000150)
                            @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotG1WriteBarrierSnippets.getThread():Word (8 bytes)   inline method (bytecode parsing)
                              @ 4  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.registerAsWord(Register):Word (7 bytes)   inline method (bytecode parsing)
                                @ 8  deltablue.Planner.lambda$removePropagateFrom$4(Vector, AbstractConstraint):void (13 bytes)   not inlining relevance-based (relevance=0.020000, probability=0.172192, bonus=1.000000, nodes=20 > 5.999950)
                            @ 14  jdk.graal.compiler.replacements.gc.G1WriteBarrierSnippets.verifyOop(Object):void (17 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotG1WriteBarrierSnippets.verifyOops():boolean (7 bytes)   inline method (bytecode parsing)
                            @ 20  jdk.graal.compiler.replacements.gc.G1WriteBarrierSnippets.verifyOop(Object):void (17 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotG1WriteBarrierSnippets.verifyOops():boolean (7 bytes)   inline method (bytecode parsing)
                            @ 27  jdk.graal.compiler.replacements.gc.G1WriteBarrierSnippets.validateObject(Object, Object):void (52 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotG1WriteBarrierSnippets.verifyOops():boolean (7 bytes)   inline method (bytecode parsing)
                                @ 12  deltablue.Planner.lambda$constraintsConsuming$3(AbstractConstraint, ForEachInterface, AbstractConstraint):void (20 bytes)   not inlining relevance-based (relevance=0.040000, probability=0.344391, bonus=1.000000, nodes=26 > 12.000150)
                            @ 64  jdk.graal.compiler.replacements.gc.G1WriteBarrierSnippets.isTracingActive(int):boolean (30 bytes)   inline method (bytecode parsing)
                            @ 156  jdk.graal.compiler.hotspot.replacements.HotSpotG1WriteBarrierSnippets.logOfHeapRegionGrainBytes():int (7 bytes)   inline method (bytecode parsing)
                            @ 184  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                            @ 209  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                            @ 232  jdk.graal.compiler.hotspot.replacements.HotSpotG1WriteBarrierSnippets.cardTableAddress(Pointer):Word (32 bytes)   inline method (bytecode parsing)
                            @ 253  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                                  @ 6  deltablue.BinaryConstraint.isSatisfied():boolean (13 bytes)   relevance-based (relevance=0.082801, probability=0.403722, bonus=1.000000, nodes=14 <= 24.840169)
                            @ 262  jdk.graal.compiler.hotspot.replacements.HotSpotG1WriteBarrierSnippets.youngCardValue():byte (7 bytes)   inline method (bytecode parsing)
                                @ 12  deltablue.Planner.lambda$addConstraintsConsumingTo$2(AbstractConstraint, Vector, AbstractConstraint):void (18 bytes)   not inlining relevance-based (relevance=0.108126, probability=0.930926, bonus=1.000000, nodes=42 > 32.437709)
                            @ 305  jdk.graal.compiler.hotspot.replacements.HotSpotG1WriteBarrierSnippets.dirtyCardValue():byte (7 bytes)   inline method (bytecode parsing)
                            @ 345  jdk.graal.compiler.replacements.gc.G1WriteBarrierSnippets.log(boolean, String, long, long, long):void (21 bytes)   inline method (bytecode parsing)
                            @ 352  jdk.graal.compiler.hotspot.replacements.HotSpotG1WriteBarrierSnippets.dirtyCardValue():byte (7 bytes)   inline method (bytecode parsing)
                            @ 18  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 366  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                            @ 21  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 372  jdk.graal.compiler.hotspot.replacements.HotSpotG1WriteBarrierSnippets.cardQueueIndexOffset():int (7 bytes)   inline method (bytecode parsing)
                            @ 35  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 38  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 404  jdk.graal.compiler.hotspot.replacements.HotSpotG1WriteBarrierSnippets.cardQueueBufferOffset():int (7 bytes)   inline method (bytecode parsing)
                            @ 421  jdk.graal.compiler.hotspot.replacements.HotSpotG1WriteBarrierSnippets.wordSize():int (4 bytes)   inline method (bytecode parsing)
                            @ 18  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 444  jdk.graal.compiler.hotspot.replacements.HotSpotG1WriteBarrierSnippets.cardQueueIndexOffset():int (7 bytes)   inline method (bytecode parsing)
                            @ 25  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 461  jdk.graal.compiler.replacements.gc.G1WriteBarrierSnippets.g1PostBarrierStub(Word):void (9 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotG1WriteBarrierSnippets.postWriteBarrierCallDescriptor():ForeignCallDescriptor (4 bytes)   inline method (bytecode parsing)
                            @ 33  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 37  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 51  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 58  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 66  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 70  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                                @ 1  deltablue.EqualityConstraint.execute():void (42 bytes)   relevance-based (relevance=1.000000, probability=8.609666, bonus=1.000000, nodes=103 <= 300.000000)
                              @ 20  deltablue.Plan$$Lambda/0x00007f2ce003f1c8.apply(Object):void (8 bytes)   not inlining callee invoke probability is too high (invokeP=6.000000, relevance=1.000000, probability=10.057182, bonus=1.000000, nodes=200)
                            @ 5  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.clearPendingException(Word):Object (30 bytes)   inline method (bytecode parsing)
                            @ 16  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.getPendingException(Word):Object (14 bytes)   inline method (bytecode parsing)
                            @ 27  jdk.graal.compiler.hotspot.stubs.ForeignCallSnippets.getAndClearObjectResult(Word):Object (30 bytes)   inline method (bytecode parsing)
                            @ 26  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                            @ 36  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.StringLatin1.canEncode(int):boolean (13 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=8)
                              @ 14  java.lang.Math.min(int, int):int (11 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=7)
                                @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                              @ 1  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=8)
                                @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=41.131773, bonus=1.000000, nodes=9)
                            @ 3  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                                @ 12  java.lang.StringLatin1.charAt(byte[], int):char (15 bytes)   relevance-based (relevance=1.000000, probability=41.131773, bonus=1.000000, nodes=11 <= 300.000000)
                              @ 19  java.lang.String.charAt(int):char (25 bytes)   relevance-based (relevance=1.000000, probability=41.131773, bonus=1.000000, nodes=16 <= 300.000000)
                            @ 1  java.nio.Buffer.limit():int (5 bytes)   inline accessor method (bytecode parsing)
                                @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                              @ 10  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=8)
                            @ 4  java.nio.Buffer.session():MemorySessionImpl (20 bytes)   inline method (bytecode parsing)
                            @ 11  java.nio.Buffer.checkIndex(int):int (12 bytes)   inline method (bytecode parsing)
                            @ 14  java.nio.DirectByteBuffer.ix(int):long (10 bytes)   inline method (bytecode parsing)
                            @ 17  jdk.internal.misc.ScopedMemoryAccess.getByte(MemorySessionImpl, Object, long):byte (16 bytes)   inline method (bytecode parsing)
                              @ 4  jdk.internal.misc.ScopedMemoryAccess.getByteInternal(MemorySessionImpl, Object, long):byte (34 bytes)   inline method (bytecode parsing)
                              @ 25  java.nio.DirectByteBuffer.get(int):byte (34 bytes)   relevance-based (relevance=1.049646, probability=21.142546, bonus=1.000000, nodes=23 <= 300.000000)
                                @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=20.146400, bonus=1.000000, nodes=9)
                            @ 3  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                                @ 12  java.lang.StringLatin1.charAt(byte[], int):char (15 bytes)   relevance-based (relevance=1.000000, probability=20.146400, bonus=1.000000, nodes=11 <= 300.000000)
                              @ 53  java.lang.String.charAt(int):char (25 bytes)   relevance-based (relevance=1.000191, probability=20.146400, bonus=1.000000, nodes=16 <= 300.000000)
                            @ 4  deltablue.Plan.lambda$execute$0(AbstractConstraint):void (5 bytes)   inline method (bytecode parsing)
                            @ 18  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 21  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 35  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 38  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 18  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 25  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 33  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 37  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 51  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 58  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                              @ 20  java.util.HashMap.resize():HashMap$Node[] (356 bytes)   not inlining relevance-based (relevance=0.142848, probability=0.124993, bonus=1.000000, nodes=188 > 42.854485)
                            @ 66  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 70  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                              @ 1  deltablue.EqualityConstraint.execute():void (42 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=103 <= 300.000000)
                              @ 123  java.util.HashMap$TreeNode.putTreeVal(HashMap, HashMap$Node[], int, Object, Object):HashMap$TreeNode (314 bytes)   not inlining relevance-based (relevance=0.004279, probability=0.003744, bonus=1.000000, nodes=219 > 1.283748)
                              @ 91  java.lang.String.equals(Object):boolean (56 bytes)   not inlining relevance-based (relevance=0.034797, probability=0.030448, bonus=1.000000, nodes=117 > 10.439151)
                            @ 9  java.util.LinkedHashMap$Entry.<init>(int, Object, Object, HashMap$Node):void (10 bytes)   inline method (bytecode parsing)
                                @ 6  java.util.HashMap$Node.<init>(int, Object, Object, HashMap$Node):void (26 bytes)   relevance-based (relevance=0.170884, probability=0.121085, bonus=1.000000, nodes=17 <= 51.265126)
                                @ 17  java.util.LinkedHashMap.linkNodeAtEnd(LinkedHashMap$Entry):void (76 bytes)   relevance-based (relevance=0.170884, probability=0.121085, bonus=1.000000, nodes=26 <= 51.265126)
                                @ 9  java.util.HashMap$Node.<init>(int, Object, Object, HashMap$Node):void (26 bytes)   relevance-based (relevance=0.727577, probability=0.515550, bonus=1.000000, nodes=17 <= 218.273167)
                              @ 56  java.util.HashMap.newNode(int, Object, Object, HashMap$Node):HashMap$Node (13 bytes)   relevance-based (relevance=0.727577, probability=0.636635, bonus=1.000000, nodes=60 <= 218.273167)
                              @ 203  java.lang.String.equals(Object):boolean (56 bytes)   not inlining relevance-based (relevance=0.004655, probability=0.004016, bonus=1.000000, nodes=68 > 1.396542)
                            @ 9  java.util.LinkedHashMap$Entry.<init>(int, Object, Object, HashMap$Node):void (10 bytes)   inline method (bytecode parsing)
                            @ 18  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 21  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                                @ 6  java.util.HashMap$Node.<init>(int, Object, Object, HashMap$Node):void (26 bytes)   not inlining relevance-based (relevance=0.053993, probability=0.041187, bonus=1.000000, nodes=17 > 16.197965)
                            @ 35  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 38  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                                @ 17  java.util.LinkedHashMap.linkNodeAtEnd(LinkedHashMap$Entry):void (76 bytes)   not inlining relevance-based (relevance=0.053993, probability=0.041187, bonus=1.000000, nodes=26 > 16.197965)
                                @ 9  java.util.HashMap$Node.<init>(int, Object, Object, HashMap$Node):void (26 bytes)   relevance-based (relevance=0.367140, probability=0.280062, bonus=1.000000, nodes=17 <= 110.141893)
                              @ 152  java.util.HashMap.newNode(int, Object, Object, HashMap$Node):HashMap$Node (13 bytes)   relevance-based (relevance=0.367140, probability=0.321250, bonus=1.000000, nodes=34 <= 110.141893)
                              @ 169  java.util.HashMap.treeifyBin(HashMap$Node[], int):void (110 bytes)   not inlining relevance-based (relevance=0.000992, probability=0.000868, bonus=1.000000, nodes=77 > 0.297681)
                              @ 253  java.util.LinkedHashMap.afterNodeAccess(HashMap$Node):void (266 bytes)   not inlining relevance-based (relevance=0.043847, probability=0.038366, bonus=1.000000, nodes=154 > 13.153971)
                              @ 288  java.util.HashMap.resize():HashMap$Node[] (356 bytes)   not inlining relevance-based (relevance=0.022450, probability=0.019644, bonus=1.000000, nodes=188 > 6.735037)
                            @ 1  java.util.HashMap.size():int (5 bytes)   inline accessor method (bytecode parsing)
                                @ 15  java.util.LinkedHashMap.removeEldestEntry(Map$Entry):boolean (2 bytes)   relevance-based (relevance=0.092054, probability=0.047398, bonus=1.000000, nodes=14 <= 27.616305)
                              @ 295  java.util.HashMap.afterNodeInsertion(boolean):void (1 bytes)   relevance-based (relevance=1.099002, probability=0.961634, bonus=1.000000, nodes=40 <= 300.000000)
                            @ 29  jdk.graal.compiler.nodes.PiNode.piCastNonNullClass(Class, GuardingNode):Class (9 bytes)   inline method (bytecode parsing)
                            @ 37  jdk.graal.compiler.nodes.java.DynamicNewInstanceNode.throwsInstantiationExceptionInjectedProbability(double, Class, Class):boolean (70 bytes)   inline method (bytecode parsing)
                              @ 38  java.lang.reflect.Modifier.isAbstract(int):boolean (14 bytes)   inline method (bytecode parsing)
                            @ 2  jdk.graal.compiler.hotspot.replacements.HotSpotIsArraySnippets.classIsArray(Class):boolean (33 bytes)   inline method (bytecode parsing)
                              @ 24  jdk.graal.compiler.hotspot.replacements.ClassGetHubNode.piCastNonNull(KlassPointer, GuardingNode):KlassPointer (9 bytes)   inline method (bytecode parsing)
                              @ 29  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.klassIsArray(KlassPointer):boolean (23 bytes)   inline method (bytecode parsing)
                            @ 33  jdk.graal.compiler.hotspot.replacements.ClassGetHubNode.piCastNonNull(KlassPointer, GuardingNode):KlassPointer (9 bytes)   inline method (bytecode parsing)
                            @ 43  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.isInstanceKlassFullyInitialized(KlassPointer):boolean (19 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.readInstanceKlassInitState(KlassPointer):byte (14 bytes)   inline method (bytecode parsing)
                            @ 101  jdk.graal.compiler.replacements.AllocationSnippets.allocateInstanceImpl(Word, UnsignedWord, boolean, AllocationSnippets$FillContent, boolean, boolean, AllocationSnippets$AllocationProfilingData):Object (143 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getTLABInfo():Word (5 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getThread():Word (8 bytes)   inline method (bytecode parsing)
                                  @ 4  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.registerAsWord(Register):Word (7 bytes)   inline method (bytecode parsing)
                              @ 9  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.readTlabTop(Word):Word (5 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.readTlabTop(Word):Word (17 bytes)   inline method (bytecode parsing)
                              @ 17  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.readTlabEnd(Word):Word (5 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.readTlabEnd(Word):Word (17 bytes)   inline method (bytecode parsing)
                              @ 35  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.useTLAB():boolean (7 bytes)   inline method (bytecode parsing)
                              @ 47  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.shouldAllocateInTLAB(UnsignedWord, boolean):boolean (33 bytes)   inline method (bytecode parsing)
                              @ 77  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.writeTlabTop(Word, Word):void (6 bytes)   inline method (bytecode parsing)
                                @ 2  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.writeTlabTop(Word, Word):void (15 bytes)   inline method (bytecode parsing)
                            @ 18  jdk.graal.compiler.replacements.AllocationSnippets.allocateInstanceImpl(Word, UnsignedWord, boolean, AllocationSnippets$FillContent, boolean, boolean, AllocationSnippets$AllocationProfilingData):Object (143 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getTLABInfo():Word (5 bytes)   inline method (bytecode parsing)
                              @ 84  jdk.graal.compiler.replacements.AllocationSnippets.emitPrefetchAllocate(Word, boolean):void (61 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getThread():Word (8 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getPrefetchStyle():int (7 bytes)   inline method (bytecode parsing)
                                  @ 4  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.registerAsWord(Register):Word (7 bytes)   inline method (bytecode parsing)
                                @ 9  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getPrefetchLines(boolean):int (18 bytes)   inline method (bytecode parsing)
                              @ 9  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.readTlabTop(Word):Word (5 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.readTlabTop(Word):Word (17 bytes)   inline method (bytecode parsing)
                                @ 14  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getPrefetchStepSize():int (7 bytes)   inline method (bytecode parsing)
                              @ 17  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.readTlabEnd(Word):Word (5 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.readTlabEnd(Word):Word (17 bytes)   inline method (bytecode parsing)
                                @ 20  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getPrefetchDistance():int (7 bytes)   inline method (bytecode parsing)
                              @ 103  jdk.graal.compiler.replacements.AllocationSnippets.formatObject(Word, UnsignedWord, Word, AllocationSnippets$FillContent, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):Object (41 bytes)   inline method (bytecode parsing)
                                @ 4  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.initializeObjectHeader(Word, Word, boolean):void (29 bytes)   inline method (bytecode parsing)
                              @ 35  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.useTLAB():boolean (7 bytes)   inline method (bytecode parsing)
                              @ 47  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.shouldAllocateInTLAB(UnsignedWord, boolean):boolean (33 bytes)   inline method (bytecode parsing)
                                  @ 25  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.initializeObjectHeader(Word, Word, KlassPointer):void (20 bytes)   inline method (bytecode parsing)
                                @ 8  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.instanceHeaderSize():int (7 bytes)   inline method (bytecode parsing)
                              @ 77  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.writeTlabTop(Word, Word):void (6 bytes)   inline method (bytecode parsing)
                                @ 27  jdk.graal.compiler.replacements.AllocationSnippets.fillContents(Word, AllocationSnippets$FillContent, int, UnsignedWord, boolean, boolean, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):void (58 bytes)   inline method (bytecode parsing)
                                @ 2  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.writeTlabTop(Word, Word):void (15 bytes)   inline method (bytecode parsing)
                                  @ 22  jdk.graal.compiler.replacements.AllocationSnippets.zeroMemory(Word, int, UnsignedWord, boolean, boolean, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):void (19 bytes)   inline method (bytecode parsing)
                              @ 84  jdk.graal.compiler.replacements.AllocationSnippets.emitPrefetchAllocate(Word, boolean):void (61 bytes)   inline method (bytecode parsing)
                                    @ 15  jdk.graal.compiler.replacements.AllocationSnippets.fillMemory(long, Word, int, UnsignedWord, boolean, boolean, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):void (194 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getPrefetchStyle():int (7 bytes)   inline method (bytecode parsing)
                                      @ 17  jdk.graal.compiler.replacements.ReplacementsUtil.dynamicAssert(boolean, String):void (12 bytes)   inline method (bytecode parsing)
                                @ 9  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getPrefetchLines(boolean):int (18 bytes)   inline method (bytecode parsing)
                                      @ 56  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                                @ 14  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getPrefetchStepSize():int (7 bytes)   inline method (bytecode parsing)
                                @ 20  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getPrefetchDistance():int (7 bytes)   inline method (bytecode parsing)
                                      @ 89  jdk.graal.compiler.replacements.ReplacementsUtil.dynamicAssert(boolean, String):void (12 bytes)   inline method (bytecode parsing)
                              @ 103  jdk.graal.compiler.replacements.AllocationSnippets.formatObject(Word, UnsignedWord, Word, AllocationSnippets$FillContent, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):Object (41 bytes)   inline method (bytecode parsing)
                                @ 4  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.initializeObjectHeader(Word, Word, boolean):void (29 bytes)   inline method (bytecode parsing)
                                      @ 153  jdk.graal.compiler.replacements.ReplacementsUtil.staticAssert(boolean, String):void (12 bytes)   inline method (bytecode parsing)
                                  @ 25  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.initializeObjectHeader(Word, Word, KlassPointer):void (20 bytes)   inline method (bytecode parsing)
                                      @ 167  jdk.graal.compiler.replacements.AllocationSnippets.fillMemoryAlignedUnrollable(long, Word, UnsignedWord, UnsignedWord, boolean, AllocationSnippets$AllocationSnippetCounters):void (68 bytes)   inline method (bytecode parsing)
                                        @ 5  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                @ 8  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.instanceHeaderSize():int (7 bytes)   inline method (bytecode parsing)
                                          @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                                @ 27  jdk.graal.compiler.replacements.AllocationSnippets.fillContents(Word, AllocationSnippets$FillContent, int, UnsignedWord, boolean, boolean, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):void (58 bytes)   inline method (bytecode parsing)
                                  @ 22  jdk.graal.compiler.replacements.AllocationSnippets.zeroMemory(Word, int, UnsignedWord, boolean, boolean, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):void (19 bytes)   inline method (bytecode parsing)
                                        @ 44  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                                    @ 15  jdk.graal.compiler.replacements.AllocationSnippets.fillMemory(long, Word, int, UnsignedWord, boolean, boolean, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):void (194 bytes)   inline method (bytecode parsing)
                                      @ 190  jdk.graal.compiler.replacements.AllocationSnippets.fillMemoryAligned(long, Word, UnsignedWord, UnsignedWord, boolean, UnsignedWord, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):void (155 bytes)   inline method (bytecode parsing)
                                      @ 17  jdk.graal.compiler.replacements.ReplacementsUtil.dynamicAssert(boolean, String):void (12 bytes)   inline method (bytecode parsing)
                                        @ 105  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                          @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                                      @ 56  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                                        @ 134  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                                @ 33  jdk.graal.compiler.replacements.AllocationSnippets.emitMemoryBarrierIf(boolean):void (14 bytes)   inline method (bytecode parsing)
                                      @ 89  jdk.graal.compiler.replacements.ReplacementsUtil.dynamicAssert(boolean, String):void (12 bytes)   inline method (bytecode parsing)
                                  @ 7  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                                      @ 153  jdk.graal.compiler.replacements.ReplacementsUtil.staticAssert(boolean, String):void (12 bytes)   inline method (bytecode parsing)
                              @ 119  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                                      @ 167  jdk.graal.compiler.replacements.AllocationSnippets.fillMemoryAlignedUnrollable(long, Word, UnsignedWord, UnsignedWord, boolean, AllocationSnippets$AllocationSnippetCounters):void (68 bytes)   inline method (bytecode parsing)
                              @ 124  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.callNewInstanceStub(Word):Object (33 bytes)   inline method (bytecode parsing)
                                        @ 5  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                          @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                                @ 21  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.nonNullOrDeopt(Object):Object (27 bytes)   inline method (bytecode parsing)
                                        @ 44  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                              @ 133  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.profileAllocation(AllocationSnippets$AllocationProfilingData, UnsignedWord):void (51 bytes)   inline method (bytecode parsing)
                                      @ 190  jdk.graal.compiler.replacements.AllocationSnippets.fillMemoryAligned(long, Word, UnsignedWord, UnsignedWord, boolean, UnsignedWord, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):void (155 bytes)   inline method (bytecode parsing)
                              @ 139  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.verifyOop(Object):Object (5 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.verifyOop(Object):Object (19 bytes)   inline method (bytecode parsing)
                                        @ 91  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                          @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                            @ 118  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.dynamicNewInstanceStub(Class):Object (28 bytes)   inline method (bytecode parsing)
                                        @ 105  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                              @ 16  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.nonNullOrDeopt(Object):Object (27 bytes)   inline method (bytecode parsing)
                                          @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                                        @ 134  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                                @ 33  jdk.graal.compiler.replacements.AllocationSnippets.emitMemoryBarrierIf(boolean):void (14 bytes)   inline method (bytecode parsing)
                              @ 119  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                              @ 124  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.callNewInstanceStub(Word):Object (33 bytes)   inline method (bytecode parsing)
                                @ 21  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.nonNullOrDeopt(Object):Object (27 bytes)   inline method (bytecode parsing)
                              @ 133  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.profileAllocation(AllocationSnippets$AllocationProfilingData, UnsignedWord):void (51 bytes)   inline method (bytecode parsing)
                              @ 139  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.verifyOop(Object):Object (5 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.verifyOop(Object):Object (19 bytes)   inline method (bytecode parsing)
                            @ 18  jdk.graal.compiler.replacements.AllocationSnippets.allocateInstanceImpl(Word, UnsignedWord, boolean, AllocationSnippets$FillContent, boolean, boolean, AllocationSnippets$AllocationProfilingData):Object (143 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getTLABInfo():Word (5 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getThread():Word (8 bytes)   inline method (bytecode parsing)
                                  @ 4  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.registerAsWord(Register):Word (7 bytes)   inline method (bytecode parsing)
                              @ 9  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.readTlabTop(Word):Word (5 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.readTlabTop(Word):Word (17 bytes)   inline method (bytecode parsing)
                              @ 17  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.readTlabEnd(Word):Word (5 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.readTlabEnd(Word):Word (17 bytes)   inline method (bytecode parsing)
                              @ 35  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.useTLAB():boolean (7 bytes)   inline method (bytecode parsing)
                            @ 5  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.clearPendingException(Word):Object (30 bytes)   inline method (bytecode parsing)
                              @ 47  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.shouldAllocateInTLAB(UnsignedWord, boolean):boolean (33 bytes)   inline method (bytecode parsing)
                              @ 77  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.writeTlabTop(Word, Word):void (6 bytes)   inline method (bytecode parsing)
                            @ 16  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.getPendingException(Word):Object (14 bytes)   inline method (bytecode parsing)
                                @ 2  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.writeTlabTop(Word, Word):void (15 bytes)   inline method (bytecode parsing)
                            @ 27  jdk.graal.compiler.hotspot.stubs.ForeignCallSnippets.getAndClearObjectResult(Word):Object (30 bytes)   inline method (bytecode parsing)
                              @ 84  jdk.graal.compiler.replacements.AllocationSnippets.emitPrefetchAllocate(Word, boolean):void (61 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getPrefetchStyle():int (7 bytes)   inline method (bytecode parsing)
                                @ 9  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getPrefetchLines(boolean):int (18 bytes)   inline method (bytecode parsing)
                                @ 14  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getPrefetchStepSize():int (7 bytes)   inline method (bytecode parsing)
                                @ 20  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getPrefetchDistance():int (7 bytes)   inline method (bytecode parsing)
                              @ 103  jdk.graal.compiler.replacements.AllocationSnippets.formatObject(Word, UnsignedWord, Word, AllocationSnippets$FillContent, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):Object (41 bytes)   inline method (bytecode parsing)
                                @ 4  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.initializeObjectHeader(Word, Word, boolean):void (29 bytes)   inline method (bytecode parsing)
                                  @ 25  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.initializeObjectHeader(Word, Word, KlassPointer):void (20 bytes)   inline method (bytecode parsing)
                                @ 8  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.instanceHeaderSize():int (7 bytes)   inline method (bytecode parsing)
                                @ 27  jdk.graal.compiler.replacements.AllocationSnippets.fillContents(Word, AllocationSnippets$FillContent, int, UnsignedWord, boolean, boolean, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):void (58 bytes)   inline method (bytecode parsing)
                                  @ 22  jdk.graal.compiler.replacements.AllocationSnippets.zeroMemory(Word, int, UnsignedWord, boolean, boolean, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):void (19 bytes)   inline method (bytecode parsing)
                                    @ 15  jdk.graal.compiler.replacements.AllocationSnippets.fillMemory(long, Word, int, UnsignedWord, boolean, boolean, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):void (194 bytes)   inline method (bytecode parsing)
                                      @ 17  jdk.graal.compiler.replacements.ReplacementsUtil.dynamicAssert(boolean, String):void (12 bytes)   inline method (bytecode parsing)
                                      @ 56  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                                      @ 89  jdk.graal.compiler.replacements.ReplacementsUtil.dynamicAssert(boolean, String):void (12 bytes)   inline method (bytecode parsing)
                                      @ 153  jdk.graal.compiler.replacements.ReplacementsUtil.staticAssert(boolean, String):void (12 bytes)   inline method (bytecode parsing)
                                      @ 167  jdk.graal.compiler.replacements.AllocationSnippets.fillMemoryAlignedUnrollable(long, Word, UnsignedWord, UnsignedWord, boolean, AllocationSnippets$AllocationSnippetCounters):void (68 bytes)   inline method (bytecode parsing)
                                        @ 5  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                          @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                            @ 5  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.clearPendingException(Word):Object (30 bytes)   inline method (bytecode parsing)
                                        @ 44  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                            @ 16  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.getPendingException(Word):Object (14 bytes)   inline method (bytecode parsing)
                                      @ 190  jdk.graal.compiler.replacements.AllocationSnippets.fillMemoryAligned(long, Word, UnsignedWord, UnsignedWord, boolean, UnsignedWord, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):void (155 bytes)   inline method (bytecode parsing)
                            @ 27  jdk.graal.compiler.hotspot.stubs.ForeignCallSnippets.getAndClearObjectResult(Word):Object (30 bytes)   inline method (bytecode parsing)
                                        @ 91  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                          @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                                        @ 105  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                          @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                                        @ 134  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                                @ 33  jdk.graal.compiler.replacements.AllocationSnippets.emitMemoryBarrierIf(boolean):void (14 bytes)   inline method (bytecode parsing)
                              @ 119  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                              @ 124  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.callNewInstanceStub(Word):Object (33 bytes)   inline method (bytecode parsing)
                                @ 21  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.nonNullOrDeopt(Object):Object (27 bytes)   inline method (bytecode parsing)
                              @ 133  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.profileAllocation(AllocationSnippets$AllocationProfilingData, UnsignedWord):void (51 bytes)   inline method (bytecode parsing)
                              @ 139  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.verifyOop(Object):Object (5 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.verifyOop(Object):Object (19 bytes)   inline method (bytecode parsing)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                              @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000121, probability=0.000121, bonus=1.000000, nodes=41 > 0.036324)
                                @ 6  deltablue.BinaryConstraint.isSatisfied():boolean (13 bytes)   relevance-based (relevance=0.768714, probability=0.434617, bonus=1.000000, nodes=14 <= 230.614073)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                  @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000059, probability=0.000033, bonus=1.000000, nodes=41 > 0.017716)
                                @ 14  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=0.461223, probability=0.260767, bonus=1.000000, nodes=35 <= 138.366752)
                              @ 12  deltablue.Planner.lambda$addConstraintsConsumingTo$2(AbstractConstraint, Vector, AbstractConstraint):void (18 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=72 <= 300.000000)
                              @ 6  deltablue.BinaryConstraint.isSatisfied():boolean (13 bytes)   relevance-based (relevance=0.768714, probability=0.434617, bonus=1.000000, nodes=14 <= 230.614073)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000059, probability=0.000033, bonus=1.000000, nodes=41 > 0.017716)
                              @ 14  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=0.461223, probability=0.260767, bonus=1.000000, nodes=35 <= 138.366752)
                            @ 18  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 25  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 33  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 37  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 51  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 58  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 66  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 70  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=9)
                            @ 3  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                              @ 12  java.lang.StringLatin1.charAt(byte[], int):char (15 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                            @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                            @ 26  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                              @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=14 <= 300.000000)
                            @ 5  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                  @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000128, probability=0.000128, bonus=1.000000, nodes=41 > 0.038411)
                                @ 11  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=35 <= 300.000000)
                              @ 1  som.Vector.with(Object):Vector (16 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=40 <= 300.000000)
                              @ 6  som.Vector.isEmpty():boolean (17 bytes)   relevance-based (relevance=1.792559, probability=2.261736, bonus=1.000000, nodes=10 <= 300.000000)
                                @ 1  som.Vector.isEmpty():boolean (17 bytes)   relevance-based (relevance=1.000000, probability=1.261736, bonus=1.000000, nodes=10 <= 300.000000)
                              @ 13  som.Vector.removeFirst():Object (31 bytes)   relevance-based (relevance=1.000000, probability=1.261736, bonus=1.000000, nodes=18 <= 300.000000)
                              @ 23  deltablue.BinaryConstraint.getOutput():Variable (22 bytes)   relevance-based (relevance=1.000000, probability=1.261736, bonus=1.000000, nodes=22 <= 300.000000)
                            @ 39  deltablue.Variable.getWalkStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 45  deltablue.Variable.setWalkStrength(Strength):void (6 bytes)   inline method (bytecode parsing)
                            @ 50  deltablue.Variable.getStay():boolean (5 bytes)   inline accessor method (bytecode parsing)
                            @ 53  deltablue.Variable.setStay(boolean):void (6 bytes)   inline method (bytecode parsing)
                            @ 57  deltablue.Variable.getStay():boolean (5 bytes)   inline accessor method (bytecode parsing)
                            @ 39  deltablue.Variable.getWalkStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 45  deltablue.Variable.setWalkStrength(Strength):void (6 bytes)   inline method (bytecode parsing)
                            @ 50  deltablue.Variable.getStay():boolean (5 bytes)   inline accessor method (bytecode parsing)
                            @ 60  deltablue.Variable.getStay():boolean (5 bytes)   inline accessor method (bytecode parsing)
                            @ 70  deltablue.Variable.getStay():boolean (5 bytes)   inline accessor method (bytecode parsing)
                            @ 81  deltablue.Variable.setStay(boolean):void (6 bytes)   inline method (bytecode parsing)
                            @ 85  deltablue.Variable.getStay():boolean (5 bytes)   inline accessor method (bytecode parsing)
                              @ 1  som.Vector.isEmpty():boolean (17 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 8  deltablue.Variable.setWalkStrength(Strength):void (6 bytes)   inline method (bytecode parsing)
                            @ 27  deltablue.Variable.setStay(boolean):void (6 bytes)   inline method (bytecode parsing)
                            @ 34  deltablue.Variable.getStay():boolean (5 bytes)   inline accessor method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint.isInput():boolean (2 bytes)   trivial (relevance=0.246420, probability=0.130713, bonus=1.000000, nodes=8)
                                @ 41  deltablue.StayConstraint.execute():void (1 bytes)   trivial (relevance=0.246399, probability=0.130702, bonus=1.000000, nodes=3)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 2  deltablue.Strength.weaker(Strength):boolean (17 bytes)   relevance-based (relevance=0.739084, probability=0.392075, bonus=1.000000, nodes=11 <= 221.725141)
                                @ 42  deltablue.Strength.weakest(Strength):Strength (14 bytes)   relevance-based (relevance=0.739084, probability=0.392075, bonus=1.000000, nodes=12 <= 221.725141)
                            @ 1  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 6  deltablue.Variable.getConstraints():Vector (5 bytes)   inline accessor method (bytecode parsing)
                            @ 11  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object, Object):Object (10 bytes)   inline method (bytecode parsing)
                            @ 18  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                              @ 6  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object, Object):Object (24 bytes)   inline method (bytecode parsing)
                            @ 25  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                            @ 33  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 37  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                            @ 51  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 58  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 66  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 70  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                                @ 92  deltablue.ScaleConstraint.execute():void (74 bytes)   relevance-based (relevance=0.442632, probability=0.234811, bonus=1.000000, nodes=62 <= 132.789627)
                              @ 19  deltablue.Planner$$Lambda/0x00007f2ce003d968.<init>(AbstractConstraint, Vector):void (15 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 2  deltablue.Strength.weaker(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.738949, bonus=1.000000, nodes=11 <= 300.000000)
                                @ 20  deltablue.Planner$$Lambda/0x00007f2ce003d968.apply(Object):void (16 bytes)   not inlining too large previous low-level graph (low-level-nodes: 372, relevance=1.000000, probability=10.147594, bonus=1.000000, nodes=16)
                                @ 42  deltablue.Strength.weakest(Strength):Strength (14 bytes)   relevance-based (relevance=1.582585, probability=0.738949, bonus=1.000000, nodes=12 <= 300.000000)
                              @ 16  som.Vector.forEach(ForEachInterface):void (32 bytes)   not inlining callee invoke probability is too high (invokeP=10.147594, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=24)
                            @ 18  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 21  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 35  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 38  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                                @ 64  deltablue.EqualityConstraint.execute():void (42 bytes)   relevance-based (relevance=1.184353, probability=0.553004, bonus=1.000000, nodes=38 <= 300.000000)
                              @ 42  deltablue.BinaryConstraint.recalculate():void (68 bytes)   relevance-based (relevance=1.392952, probability=1.261736, bonus=1.000000, nodes=271 <= 300.000000)
                            @ 18  jdk.graal.compiler.replacements.AllocationSnippets.allocateInstanceImpl(Word, UnsignedWord, boolean, AllocationSnippets$FillContent, boolean, boolean, AllocationSnippets$AllocationProfilingData):Object (143 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getTLABInfo():Word (5 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getThread():Word (8 bytes)   inline method (bytecode parsing)
                                  @ 4  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.registerAsWord(Register):Word (7 bytes)   inline method (bytecode parsing)
                              @ 9  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.readTlabTop(Word):Word (5 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.readTlabTop(Word):Word (17 bytes)   inline method (bytecode parsing)
                              @ 17  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.readTlabEnd(Word):Word (5 bytes)   inline method (bytecode parsing)
                              @ 48  deltablue.BinaryConstraint.getOutput():Variable (22 bytes)   relevance-based (relevance=1.392952, probability=1.261736, bonus=1.000000, nodes=22 <= 300.000000)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.readTlabEnd(Word):Word (17 bytes)   inline method (bytecode parsing)
                              @ 35  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.useTLAB():boolean (7 bytes)   inline method (bytecode parsing)
                              @ 47  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.shouldAllocateInTLAB(UnsignedWord, boolean):boolean (33 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 6  deltablue.Variable.getConstraints():Vector (5 bytes)   inline accessor method (bytecode parsing)
                            @ 11  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object, Object):Object (10 bytes)   inline method (bytecode parsing)
                              @ 77  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.writeTlabTop(Word, Word):void (6 bytes)   inline method (bytecode parsing)
                                @ 2  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.writeTlabTop(Word, Word):void (15 bytes)   inline method (bytecode parsing)
                              @ 6  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object, Object):Object (24 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                              @ 84  jdk.graal.compiler.replacements.AllocationSnippets.emitPrefetchAllocate(Word, boolean):void (61 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getPrefetchStyle():int (7 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 9  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getPrefetchLines(boolean):int (18 bytes)   inline method (bytecode parsing)
                                @ 14  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getPrefetchStepSize():int (7 bytes)   inline method (bytecode parsing)
                                @ 20  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getPrefetchDistance():int (7 bytes)   inline method (bytecode parsing)
                              @ 103  jdk.graal.compiler.replacements.AllocationSnippets.formatObject(Word, UnsignedWord, Word, AllocationSnippets$FillContent, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):Object (41 bytes)   inline method (bytecode parsing)
                                @ 4  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.initializeObjectHeader(Word, Word, boolean):void (29 bytes)   inline method (bytecode parsing)
                                @ 19  deltablue.Planner$$Lambda/0x00007f2ce003d968.<init>(AbstractConstraint, Vector):void (15 bytes)   relevance-based (relevance=1.000000, probability=1.261736, bonus=1.000000, nodes=11 <= 300.000000)
                                  @ 25  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.initializeObjectHeader(Word, Word, KlassPointer):void (20 bytes)   inline method (bytecode parsing)
                                @ 8  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.instanceHeaderSize():int (7 bytes)   inline method (bytecode parsing)
                                @ 27  jdk.graal.compiler.replacements.AllocationSnippets.fillContents(Word, AllocationSnippets$FillContent, int, UnsignedWord, boolean, boolean, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):void (58 bytes)   inline method (bytecode parsing)
                                  @ 22  jdk.graal.compiler.replacements.AllocationSnippets.zeroMemory(Word, int, UnsignedWord, boolean, boolean, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):void (19 bytes)   inline method (bytecode parsing)
                                    @ 15  jdk.graal.compiler.replacements.AllocationSnippets.fillMemory(long, Word, int, UnsignedWord, boolean, boolean, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):void (194 bytes)   inline method (bytecode parsing)
                                      @ 17  jdk.graal.compiler.replacements.ReplacementsUtil.dynamicAssert(boolean, String):void (12 bytes)   inline method (bytecode parsing)
                                  @ 20  deltablue.Planner$$Lambda/0x00007f2ce003d968.apply(Object):void (16 bytes)   not inlining too large previous low-level graph (low-level-nodes: 372, relevance=1.000000, probability=12.803586, bonus=1.000000, nodes=16)
                                @ 16  som.Vector.forEach(ForEachInterface):void (32 bytes)   not inlining callee invoke probability is too high (invokeP=10.147594, relevance=1.000000, probability=1.261736, bonus=1.000000, nodes=24)
                                      @ 56  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                              @ 52  deltablue.Planner.addConstraintsConsumingTo(Variable, Vector):void (20 bytes)   relevance-based (relevance=1.392952, probability=1.261736, bonus=1.000000, nodes=23 <= 300.000000)
                                      @ 89  jdk.graal.compiler.replacements.ReplacementsUtil.dynamicAssert(boolean, String):void (12 bytes)   inline method (bytecode parsing)
                                      @ 153  jdk.graal.compiler.replacements.ReplacementsUtil.staticAssert(boolean, String):void (12 bytes)   inline method (bytecode parsing)
                                      @ 167  jdk.graal.compiler.replacements.AllocationSnippets.fillMemoryAlignedUnrollable(long, Word, UnsignedWord, UnsignedWord, boolean, AllocationSnippets$AllocationSnippetCounters):void (68 bytes)   inline method (bytecode parsing)
                                        @ 5  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                          @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                                        @ 44  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                                      @ 190  jdk.graal.compiler.replacements.AllocationSnippets.fillMemoryAligned(long, Word, UnsignedWord, UnsignedWord, boolean, UnsignedWord, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):void (155 bytes)   inline method (bytecode parsing)
                                        @ 91  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                          @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                                        @ 105  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                          @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                                        @ 134  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                                @ 33  jdk.graal.compiler.replacements.AllocationSnippets.emitMemoryBarrierIf(boolean):void (14 bytes)   inline method (bytecode parsing)
                              @ 119  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                              @ 124  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.callNewInstanceStub(Word):Object (33 bytes)   inline method (bytecode parsing)
                                @ 21  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.nonNullOrDeopt(Object):Object (27 bytes)   inline method (bytecode parsing)
                              @ 133  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.profileAllocation(AllocationSnippets$AllocationProfilingData, UnsignedWord):void (51 bytes)   inline method (bytecode parsing)
                              @ 139  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.verifyOop(Object):Object (5 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.verifyOop(Object):Object (19 bytes)   inline method (bytecode parsing)
                            @ 49  java.lang.StringConcatHelper.newArray(long):byte[] (40 bytes)   inline method (bytecode parsing)
                            @ 123  java.lang.String.<init>(byte[], byte):void (15 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.StringLatin1.canEncode(int):boolean (13 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=8)
                              @ 41  java.lang.StringLatin1.canEncode(int):boolean (13 bytes)   trivial (relevance=0.995769, probability=0.995769, bonus=1.000000, nodes=8)
                                @ 51  jdk.internal.misc.Unsafe.allocateUninitializedArray0(Class, int):Object (90 bytes)   trivial (relevance=0.995769, probability=0.995769, bonus=1.000000, nodes=6)
                              @ 33  jdk.internal.misc.Unsafe.allocateUninitializedArray(Class, int):Object (55 bytes)   trivial (relevance=0.995769, probability=0.995769, bonus=1.000000, nodes=7)
                            @ 23  jdk.graal.compiler.replacements.AllocationSnippets.allocateArrayImpl(Word, int, int, int, AllocationSnippets$FillContent, int, boolean, boolean, boolean, boolean, AllocationSnippets$AllocationProfilingData):Object (178 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getTLABInfo():Word (5 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getThread():Word (8 bytes)   inline method (bytecode parsing)
                                  @ 4  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.registerAsWord(Register):Word (7 bytes)   inline method (bytecode parsing)
                              @ 9  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.readTlabTop(Word):Word (5 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.readTlabTop(Word):Word (17 bytes)   inline method (bytecode parsing)
                              @ 17  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.readTlabEnd(Word):Word (5 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.readTlabEnd(Word):Word (17 bytes)   inline method (bytecode parsing)
                              @ 36  jdk.graal.compiler.replacements.ReplacementsUtil.dynamicAssert(boolean, String):void (12 bytes)   inline method (bytecode parsing)
                              @ 44  jdk.graal.compiler.replacements.AllocationSnippets.arrayAllocationSize(int, int, int):UnsignedWord (18 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.objectAlignment():int (7 bytes)   inline method (bytecode parsing)
                                @ 11  jdk.graal.compiler.replacements.AllocationSnippets.arrayAllocationSize(int, int, int, int):long (32 bytes)   inline method (bytecode parsing)
                              @ 59  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.useTLAB():boolean (7 bytes)   inline method (bytecode parsing)
                              @ 72  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.shouldAllocateInTLAB(UnsignedWord, boolean):boolean (33 bytes)   inline method (bytecode parsing)
                              @ 102  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.writeTlabTop(Word, Word):void (6 bytes)   inline method (bytecode parsing)
                                @ 2  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.writeTlabTop(Word, Word):void (15 bytes)   inline method (bytecode parsing)
                              @ 109  jdk.graal.compiler.replacements.AllocationSnippets.emitPrefetchAllocate(Word, boolean):void (61 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getPrefetchStyle():int (7 bytes)   inline method (bytecode parsing)
                                @ 9  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getPrefetchLines(boolean):int (18 bytes)   inline method (bytecode parsing)
                                @ 14  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getPrefetchStepSize():int (7 bytes)   inline method (bytecode parsing)
                                @ 20  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getPrefetchDistance():int (7 bytes)   inline method (bytecode parsing)
                              @ 136  jdk.graal.compiler.replacements.AllocationSnippets.formatArray(Word, UnsignedWord, int, Word, AllocationSnippets$FillContent, boolean, int, boolean, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):Object (53 bytes)   inline method (bytecode parsing)
                                @ 5  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.initializeObjectHeader(Word, Word, boolean):void (29 bytes)   inline method (bytecode parsing)
                                  @ 25  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.initializeObjectHeader(Word, Word, KlassPointer):void (20 bytes)   inline method (bytecode parsing)
                                @ 11  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.arrayLengthOffset():int (7 bytes)   inline method (bytecode parsing)
                                @ 15  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                                @ 38  jdk.graal.compiler.replacements.AllocationSnippets.fillContents(Word, AllocationSnippets$FillContent, int, UnsignedWord, boolean, boolean, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):void (58 bytes)   inline method (bytecode parsing)
                                  @ 22  jdk.graal.compiler.replacements.AllocationSnippets.zeroMemory(Word, int, UnsignedWord, boolean, boolean, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):void (19 bytes)   inline method (bytecode parsing)
                                    @ 15  jdk.graal.compiler.replacements.AllocationSnippets.fillMemory(long, Word, int, UnsignedWord, boolean, boolean, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):void (194 bytes)   inline method (bytecode parsing)
                                      @ 17  jdk.graal.compiler.replacements.ReplacementsUtil.dynamicAssert(boolean, String):void (12 bytes)   inline method (bytecode parsing)
                                      @ 56  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                                      @ 89  jdk.graal.compiler.replacements.ReplacementsUtil.dynamicAssert(boolean, String):void (12 bytes)   inline method (bytecode parsing)
                                      @ 153  jdk.graal.compiler.replacements.ReplacementsUtil.staticAssert(boolean, String):void (12 bytes)   inline method (bytecode parsing)
                                      @ 167  jdk.graal.compiler.replacements.AllocationSnippets.fillMemoryAlignedUnrollable(long, Word, UnsignedWord, UnsignedWord, boolean, AllocationSnippets$AllocationSnippetCounters):void (68 bytes)   inline method (bytecode parsing)
                                        @ 5  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                          @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                                        @ 44  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                                      @ 190  jdk.graal.compiler.replacements.AllocationSnippets.fillMemoryAligned(long, Word, UnsignedWord, UnsignedWord, boolean, UnsignedWord, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):void (155 bytes)   inline method (bytecode parsing)
                                        @ 17  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getMinimalBulkZeroingSize():int (7 bytes)   inline method (bytecode parsing)
                                        @ 36  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                          @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                                        @ 53  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                                        @ 105  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                          @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                                        @ 134  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                                @ 44  jdk.graal.compiler.replacements.AllocationSnippets.emitMemoryBarrierIf(boolean):void (14 bytes)   inline method (bytecode parsing)
                                  @ 7  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                              @ 152  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                              @ 158  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.callNewArrayStub(Word, int):Object (35 bytes)   inline method (bytecode parsing)
                                @ 22  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.nonNullOrDeopt(Object):Object (27 bytes)   inline method (bytecode parsing)
                              @ 168  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.profileAllocation(AllocationSnippets$AllocationProfilingData, UnsignedWord):void (51 bytes)   inline method (bytecode parsing)
                              @ 174  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.verifyOop(Object):Object (5 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.verifyOop(Object):Object (19 bytes)   inline method (bytecode parsing)
                            @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=14 <= 300.000000)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                              @ 2  deltablue.Strength.weaker(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                            @ 23  jdk.graal.compiler.replacements.AllocationSnippets.allocateArrayImpl(Word, int, int, int, AllocationSnippets$FillContent, int, boolean, boolean, boolean, boolean, AllocationSnippets$AllocationProfilingData):Object (178 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getTLABInfo():Word (5 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getThread():Word (8 bytes)   inline method (bytecode parsing)
                                  @ 4  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.registerAsWord(Register):Word (7 bytes)   inline method (bytecode parsing)
                              @ 9  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.readTlabTop(Word):Word (5 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.readTlabTop(Word):Word (17 bytes)   inline method (bytecode parsing)
                              @ 17  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.readTlabEnd(Word):Word (5 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.readTlabEnd(Word):Word (17 bytes)   inline method (bytecode parsing)
                              @ 36  jdk.graal.compiler.replacements.ReplacementsUtil.dynamicAssert(boolean, String):void (12 bytes)   inline method (bytecode parsing)
                              @ 44  jdk.graal.compiler.replacements.AllocationSnippets.arrayAllocationSize(int, int, int):UnsignedWord (18 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.objectAlignment():int (7 bytes)   inline method (bytecode parsing)
                                @ 11  jdk.graal.compiler.replacements.AllocationSnippets.arrayAllocationSize(int, int, int, int):long (32 bytes)   inline method (bytecode parsing)
                              @ 59  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.useTLAB():boolean (7 bytes)   inline method (bytecode parsing)
                              @ 72  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.shouldAllocateInTLAB(UnsignedWord, boolean):boolean (33 bytes)   inline method (bytecode parsing)
                              @ 102  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.writeTlabTop(Word, Word):void (6 bytes)   inline method (bytecode parsing)
                                @ 2  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.writeTlabTop(Word, Word):void (15 bytes)   inline method (bytecode parsing)
                              @ 109  jdk.graal.compiler.replacements.AllocationSnippets.emitPrefetchAllocate(Word, boolean):void (61 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getPrefetchStyle():int (7 bytes)   inline method (bytecode parsing)
                                @ 9  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getPrefetchLines(boolean):int (18 bytes)   inline method (bytecode parsing)
                                @ 14  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getPrefetchStepSize():int (7 bytes)   inline method (bytecode parsing)
                                @ 20  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getPrefetchDistance():int (7 bytes)   inline method (bytecode parsing)
                              @ 136  jdk.graal.compiler.replacements.AllocationSnippets.formatArray(Word, UnsignedWord, int, Word, AllocationSnippets$FillContent, boolean, int, boolean, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):Object (53 bytes)   inline method (bytecode parsing)
                            @ 8  deltablue.AbstractConstraint.lambda$satisfy$1(int, Variable):void (6 bytes)   inline method (bytecode parsing)
                                @ 5  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.initializeObjectHeader(Word, Word, boolean):void (29 bytes)   inline method (bytecode parsing)
                                  @ 25  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.initializeObjectHeader(Word, Word, KlassPointer):void (20 bytes)   inline method (bytecode parsing)
                              @ 2  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                                @ 11  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.arrayLengthOffset():int (7 bytes)   inline method (bytecode parsing)
                                @ 15  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                                @ 38  jdk.graal.compiler.replacements.AllocationSnippets.fillContents(Word, AllocationSnippets$FillContent, int, UnsignedWord, boolean, boolean, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):void (58 bytes)   inline method (bytecode parsing)
                                  @ 22  jdk.graal.compiler.replacements.AllocationSnippets.zeroMemory(Word, int, UnsignedWord, boolean, boolean, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):void (19 bytes)   inline method (bytecode parsing)
                                    @ 15  jdk.graal.compiler.replacements.AllocationSnippets.fillMemory(long, Word, int, UnsignedWord, boolean, boolean, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):void (194 bytes)   inline method (bytecode parsing)
                                      @ 17  jdk.graal.compiler.replacements.ReplacementsUtil.dynamicAssert(boolean, String):void (12 bytes)   inline method (bytecode parsing)
                                      @ 56  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                                      @ 89  jdk.graal.compiler.replacements.ReplacementsUtil.dynamicAssert(boolean, String):void (12 bytes)   inline method (bytecode parsing)
                                      @ 153  jdk.graal.compiler.replacements.ReplacementsUtil.staticAssert(boolean, String):void (12 bytes)   inline method (bytecode parsing)
                                      @ 167  jdk.graal.compiler.replacements.AllocationSnippets.fillMemoryAlignedUnrollable(long, Word, UnsignedWord, UnsignedWord, boolean, AllocationSnippets$AllocationSnippetCounters):void (68 bytes)   inline method (bytecode parsing)
                                        @ 5  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                          @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                                        @ 44  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                                      @ 190  jdk.graal.compiler.replacements.AllocationSnippets.fillMemoryAligned(long, Word, UnsignedWord, UnsignedWord, boolean, UnsignedWord, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):void (155 bytes)   inline method (bytecode parsing)
                                        @ 17  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getMinimalBulkZeroingSize():int (7 bytes)   inline method (bytecode parsing)
                                        @ 36  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                          @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                                        @ 53  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                                        @ 105  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                          @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                                        @ 134  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                                @ 44  jdk.graal.compiler.replacements.AllocationSnippets.emitMemoryBarrierIf(boolean):void (14 bytes)   inline method (bytecode parsing)
                                  @ 7  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                              @ 152  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                              @ 158  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.callNewArrayStub(Word, int):Object (35 bytes)   inline method (bytecode parsing)
                                @ 22  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.nonNullOrDeopt(Object):Object (27 bytes)   inline method (bytecode parsing)
                              @ 168  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.profileAllocation(AllocationSnippets$AllocationProfilingData, UnsignedWord):void (51 bytes)   inline method (bytecode parsing)
                              @ 174  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.verifyOop(Object):Object (5 bytes)   inline method (bytecode parsing)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.verifyOop(Object):Object (19 bytes)   inline method (bytecode parsing)
                                @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000128, probability=0.000128, bonus=1.000000, nodes=41 > 0.038411)
                              @ 5  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=35 <= 300.000000)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f2ce003d750.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 4  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 15  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 30  deltablue.Variable.getWalkStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 65  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 76  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 91  deltablue.Variable.getWalkStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 126  deltablue.Variable.getWalkStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 133  deltablue.Variable.getWalkStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 189  deltablue.Variable.getWalkStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 20  deltablue.Variable.getWalkStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                @ 23  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=0.400135, probability=0.166804, bonus=1.000000, nodes=13 <= 120.040420)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                @ 136  deltablue.Strength.weaker(Strength):boolean (17 bytes)   relevance-based (relevance=0.997863, probability=0.332847, bonus=1.000000, nodes=14 <= 299.358755)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                @ 192  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=0.997863, probability=0.332847, bonus=1.000000, nodes=13 <= 299.358755)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                @ 94  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.333560, bonus=1.000000, nodes=13 <= 300.000000)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                @ 33  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=0.500004, probability=0.166782, bonus=1.000000, nodes=13 <= 150.001250)
                              @ 2  deltablue.BinaryConstraint.chooseMethod(int):Direction (220 bytes)   relevance-based (relevance=1.998600, probability=1.000000, bonus=1.000000, nodes=138 <= 300.000000)
                              @ 7  deltablue.BinaryConstraint.isSatisfied():boolean (13 bytes)   relevance-based (relevance=2.997958, probability=1.000000, bonus=1.000000, nodes=14 <= 300.000000)
                            @ 8  deltablue.AbstractConstraint.lambda$satisfy$1(int, Variable):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                                @ 48  deltablue.AbstractConstraint$$Lambda/0x00007f2ce003d750.apply(Object):void (12 bytes)   not inlining relevance-based (relevance=0.000013, probability=0.000003, bonus=1.000000, nodes=13 > 0.003776)
                            @ 8  deltablue.AbstractConstraint.lambda$satisfy$1(int, Variable):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                                @ 58  deltablue.AbstractConstraint$$Lambda/0x00007f2ce003d750.apply(Object):void (12 bytes)   not inlining relevance-based (relevance=0.000013, probability=0.000003, bonus=1.000000, nodes=13 > 0.003776)
                            @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                            @ 8  deltablue.AbstractConstraint.lambda$satisfy$1(int, Variable):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                                @ 68  deltablue.AbstractConstraint$$Lambda/0x00007f2ce003d750.apply(Object):void (12 bytes)   not inlining relevance-based (relevance=0.000013, probability=0.000003, bonus=1.000000, nodes=13 > 0.003776)
                            @ 8  deltablue.AbstractConstraint.lambda$satisfy$1(int, Variable):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=14 <= 300.000000)
                                @ 15  deltablue.AbstractConstraint$$Lambda/0x00007f2ce003d750.apply(Object):void (12 bytes)   relevance-based (relevance=0.750307, probability=0.166782, bonus=1.000000, nodes=13 <= 225.092125)
                            @ 8  deltablue.AbstractConstraint.lambda$satisfy$1(int, Variable):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                                @ 25  deltablue.AbstractConstraint$$Lambda/0x00007f2ce003d750.apply(Object):void (12 bytes)   relevance-based (relevance=0.750307, probability=0.166782, bonus=1.000000, nodes=13 <= 225.092125)
                            @ 8  deltablue.AbstractConstraint.lambda$satisfy$1(int, Variable):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                                @ 35  deltablue.AbstractConstraint$$Lambda/0x00007f2ce003d750.apply(Object):void (12 bytes)   relevance-based (relevance=0.750307, probability=0.166782, bonus=1.000000, nodes=13 <= 225.092125)
                            @ 8  deltablue.AbstractConstraint.lambda$satisfy$1(int, Variable):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                                @ 28  deltablue.AbstractConstraint$$Lambda/0x00007f2ce003d750.apply(Object):void (12 bytes)   relevance-based (relevance=1.000000, probability=0.333558, bonus=1.000000, nodes=13 <= 300.000000)
                            @ 8  deltablue.AbstractConstraint.lambda$satisfy$1(int, Variable):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                                @ 15  deltablue.AbstractConstraint$$Lambda/0x00007f2ce003d750.apply(Object):void (12 bytes)   relevance-based (relevance=0.997871, probability=0.332847, bonus=1.000000, nodes=13 <= 299.361250)
                              @ 20  deltablue.BinaryConstraint.inputsDo(ForEachInterface):void (34 bytes)   relevance-based (relevance=2.997933, probability=0.999992, bonus=1.000000, nodes=95 <= 300.000000)
                              @ 24  deltablue.BinaryConstraint.getOutput():Variable (22 bytes)   relevance-based (relevance=2.997933, probability=0.999992, bonus=1.000000, nodes=22 <= 300.000000)
                              @ 40  deltablue.BinaryConstraint.markUnsatisfied():void (6 bytes)   relevance-based (relevance=1.500029, probability=0.500350, bonus=1.000000, nodes=14 <= 300.000000)
                            @ 26  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                              @ 52  deltablue.Planner.addPropagate(AbstractConstraint, int):boolean (60 bytes)   not inlining too large previous low-level graph (low-level-nodes: 1416, relevance=2.997933, probability=0.999992, bonus=1.000000, nodes=53)
                            @ 5  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000128, probability=0.000128, bonus=1.000000, nodes=41 > 0.038411)
                              @ 11  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=35 <= 300.000000)
                            @ 18  jdk.graal.compiler.replacements.AllocationSnippets.allocateInstanceImpl(Word, UnsignedWord, boolean, AllocationSnippets$FillContent, boolean, boolean, AllocationSnippets$AllocationProfilingData):Object (143 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getTLABInfo():Word (5 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getThread():Word (8 bytes)   inline method (bytecode parsing)
                                  @ 4  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.registerAsWord(Register):Word (7 bytes)   inline method (bytecode parsing)
                              @ 9  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.readTlabTop(Word):Word (5 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.readTlabTop(Word):Word (17 bytes)   inline method (bytecode parsing)
                              @ 17  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.readTlabEnd(Word):Word (5 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.readTlabEnd(Word):Word (17 bytes)   inline method (bytecode parsing)
                              @ 35  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.useTLAB():boolean (7 bytes)   inline method (bytecode parsing)
                              @ 47  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.shouldAllocateInTLAB(UnsignedWord, boolean):boolean (33 bytes)   inline method (bytecode parsing)
                              @ 77  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.writeTlabTop(Word, Word):void (6 bytes)   inline method (bytecode parsing)
                                @ 2  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.writeTlabTop(Word, Word):void (15 bytes)   inline method (bytecode parsing)
                              @ 84  jdk.graal.compiler.replacements.AllocationSnippets.emitPrefetchAllocate(Word, boolean):void (61 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getPrefetchStyle():int (7 bytes)   inline method (bytecode parsing)
                                @ 9  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getPrefetchLines(boolean):int (18 bytes)   inline method (bytecode parsing)
                                @ 14  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getPrefetchStepSize():int (7 bytes)   inline method (bytecode parsing)
                                @ 20  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getPrefetchDistance():int (7 bytes)   inline method (bytecode parsing)
                              @ 103  jdk.graal.compiler.replacements.AllocationSnippets.formatObject(Word, UnsignedWord, Word, AllocationSnippets$FillContent, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):Object (41 bytes)   inline method (bytecode parsing)
                                @ 4  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.initializeObjectHeader(Word, Word, boolean):void (29 bytes)   inline method (bytecode parsing)
                                  @ 25  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.initializeObjectHeader(Word, Word, KlassPointer):void (20 bytes)   inline method (bytecode parsing)
                                @ 8  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.instanceHeaderSize():int (7 bytes)   inline method (bytecode parsing)
                                @ 27  jdk.graal.compiler.replacements.AllocationSnippets.fillContents(Word, AllocationSnippets$FillContent, int, UnsignedWord, boolean, boolean, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):void (58 bytes)   inline method (bytecode parsing)
                                  @ 22  jdk.graal.compiler.replacements.AllocationSnippets.zeroMemory(Word, int, UnsignedWord, boolean, boolean, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):void (19 bytes)   inline method (bytecode parsing)
                                    @ 15  jdk.graal.compiler.replacements.AllocationSnippets.fillMemory(long, Word, int, UnsignedWord, boolean, boolean, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):void (194 bytes)   inline method (bytecode parsing)
                                      @ 17  jdk.graal.compiler.replacements.ReplacementsUtil.dynamicAssert(boolean, String):void (12 bytes)   inline method (bytecode parsing)
                                      @ 56  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                                      @ 89  jdk.graal.compiler.replacements.ReplacementsUtil.dynamicAssert(boolean, String):void (12 bytes)   inline method (bytecode parsing)
                                      @ 153  jdk.graal.compiler.replacements.ReplacementsUtil.staticAssert(boolean, String):void (12 bytes)   inline method (bytecode parsing)
                                @ 1  deltablue.BinaryConstraint.isSatisfied():boolean (13 bytes)   relevance-based (relevance=1.000010, probability=1.000000, bonus=1.000000, nodes=14 <= 300.000000)
                                      @ 167  jdk.graal.compiler.replacements.AllocationSnippets.fillMemoryAlignedUnrollable(long, Word, UnsignedWord, UnsignedWord, boolean, AllocationSnippets$AllocationSnippetCounters):void (68 bytes)   inline method (bytecode parsing)
                                        @ 5  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                          @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                                        @ 44  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                      @ 190  jdk.graal.compiler.replacements.AllocationSnippets.fillMemoryAligned(long, Word, UnsignedWord, UnsignedWord, boolean, UnsignedWord, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):void (155 bytes)   inline method (bytecode parsing)
                                        @ 91  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                          @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                                @ 9  som.Vector.append(Object):void (51 bytes)   not inlining relevance-based (relevance=0.000010, probability=0.000010, bonus=1.000000, nodes=35 > 0.003008)
                                        @ 105  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                          @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                              @ 8  deltablue.Planner.lambda$removePropagateFrom$4(Vector, AbstractConstraint):void (13 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=36 <= 300.000000)
                                        @ 134  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                                @ 33  jdk.graal.compiler.replacements.AllocationSnippets.emitMemoryBarrierIf(boolean):void (14 bytes)   inline method (bytecode parsing)
                              @ 119  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                              @ 124  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.callNewInstanceStub(Word):Object (33 bytes)   inline method (bytecode parsing)
                                @ 21  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.nonNullOrDeopt(Object):Object (27 bytes)   inline method (bytecode parsing)
                              @ 133  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.profileAllocation(AllocationSnippets$AllocationProfilingData, UnsignedWord):void (51 bytes)   inline method (bytecode parsing)
                              @ 139  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.verifyOop(Object):Object (5 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.verifyOop(Object):Object (19 bytes)   inline method (bytecode parsing)
                                @ 6  deltablue.BinaryConstraint.isSatisfied():boolean (13 bytes)   relevance-based (relevance=1.000017, probability=0.537210, bonus=1.000000, nodes=14 <= 300.000000)
                            @ 39  deltablue.Variable.getWalkStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 45  deltablue.Variable.setWalkStrength(Strength):void (6 bytes)   inline method (bytecode parsing)
                            @ 50  deltablue.Variable.getStay():boolean (5 bytes)   inline accessor method (bytecode parsing)
                            @ 60  deltablue.Variable.getStay():boolean (5 bytes)   inline accessor method (bytecode parsing)
                            @ 70  deltablue.Variable.getStay():boolean (5 bytes)   inline accessor method (bytecode parsing)
                            @ 81  deltablue.Variable.setStay(boolean):void (6 bytes)   inline method (bytecode parsing)
                            @ 85  deltablue.Variable.getStay():boolean (5 bytes)   inline accessor method (bytecode parsing)
                            @ 39  deltablue.Variable.getWalkStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 45  deltablue.Variable.setWalkStrength(Strength):void (6 bytes)   inline method (bytecode parsing)
                            @ 50  deltablue.Variable.getStay():boolean (5 bytes)   inline accessor method (bytecode parsing)
                            @ 53  deltablue.Variable.setStay(boolean):void (6 bytes)   inline method (bytecode parsing)
                            @ 57  deltablue.Variable.getStay():boolean (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                        @ 2  deltablue.Strength.weaker(Strength):boolean (17 bytes)   relevance-based (relevance=0.788714, probability=0.177452, bonus=1.000000, nodes=11 <= 236.614126)
                                      @ 42  deltablue.Strength.weakest(Strength):Strength (14 bytes)   relevance-based (relevance=0.788714, probability=0.177452, bonus=1.000000, nodes=12 <= 236.614126)
                            @ 18  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 21  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 35  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 38  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                                      @ 64  deltablue.EqualityConstraint.execute():void (42 bytes)   relevance-based (relevance=0.591749, probability=0.133137, bonus=1.000000, nodes=38 <= 177.524731)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                        @ 2  deltablue.Strength.weaker(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.359749, bonus=1.000000, nodes=11 <= 300.000000)
                                      @ 42  deltablue.Strength.weakest(Strength):Strength (14 bytes)   relevance-based (relevance=1.000007, probability=0.359749, bonus=1.000000, nodes=12 <= 300.000000)
                            @ 18  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 25  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 33  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 37  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 51  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 58  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 66  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 70  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                                      @ 92  deltablue.ScaleConstraint.execute():void (74 bytes)   relevance-based (relevance=0.666159, probability=0.239648, bonus=1.000000, nodes=62 <= 199.847731)
                                    @ 1  deltablue.ScaleConstraint.recalculate():void (96 bytes)   relevance-based (relevance=1.000000, probability=0.537201, bonus=1.000000, nodes=223 <= 300.000000)
                                    @ 6  deltablue.BinaryConstraint.getOutput():Variable (22 bytes)   relevance-based (relevance=1.493278, probability=0.537201, bonus=1.000000, nodes=17 <= 300.000000)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                            @ 4  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 15  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                                      @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000128, probability=0.000069, bonus=1.000000, nodes=41 > 0.038411)
                            @ 30  deltablue.Variable.getWalkStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                                    @ 9  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.493278, probability=0.537201, bonus=1.000000, nodes=35 <= 300.000000)
                            @ 65  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 76  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 91  deltablue.Variable.getWalkStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 8  deltablue.Planner.lambda$removePropagateFrom$5(Vector, AbstractConstraint):void (13 bytes)   relevance-based (relevance=1.000000, probability=0.537201, bonus=1.000000, nodes=274 <= 300.000000)
                            @ 126  deltablue.Variable.getWalkStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 133  deltablue.Variable.getWalkStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 189  deltablue.Variable.getWalkStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                                @ 14  deltablue.Planner$$Lambda/0x00007f2ce01f6220.apply(Object):void (12 bytes)   relevance-based (relevance=1.000000, probability=0.537201, bonus=1.000000, nodes=275 <= 300.000000)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                              @ 136  deltablue.Strength.weaker(Strength):boolean (17 bytes)   relevance-based (relevance=0.997863, probability=0.399486, bonus=1.000000, nodes=14 <= 299.358755)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                              @ 12  deltablue.Planner.lambda$constraintsConsuming$3(AbstractConstraint, ForEachInterface, AbstractConstraint):void (20 bytes)   not inlining relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=315 > 300.000000)
                              @ 192  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=0.997863, probability=0.399486, bonus=1.000000, nodes=13 <= 299.358755)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                              @ 94  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.400342, bonus=1.000000, nodes=13 <= 300.000000)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                              @ 33  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=0.500004, probability=0.200172, bonus=1.000000, nodes=13 <= 150.001250)
                            @ 39  deltablue.Variable.getWalkStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 45  deltablue.Variable.setWalkStrength(Strength):void (6 bytes)   inline method (bytecode parsing)
                            @ 50  deltablue.Variable.getStay():boolean (5 bytes)   inline accessor method (bytecode parsing)
                            @ 60  deltablue.Variable.getStay():boolean (5 bytes)   inline accessor method (bytecode parsing)
                            @ 70  deltablue.Variable.getStay():boolean (5 bytes)   inline accessor method (bytecode parsing)
                            @ 81  deltablue.Variable.setStay(boolean):void (6 bytes)   inline method (bytecode parsing)
                            @ 85  deltablue.Variable.getStay():boolean (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                @ 2  deltablue.Strength.weaker(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                              @ 42  deltablue.Strength.weakest(Strength):Strength (14 bytes)   relevance-based (relevance=1.000007, probability=1.000000, bonus=1.000000, nodes=12 <= 300.000000)
                            @ 18  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 25  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 33  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 37  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 51  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 58  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 66  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 70  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                              @ 92  deltablue.ScaleConstraint.execute():void (74 bytes)   relevance-based (relevance=0.666159, probability=0.666154, bonus=1.000000, nodes=62 <= 199.847731)
                            @ 49  jdk.graal.compiler.graph.Node.valueEquals(Node):boolean (10 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.graph.Node.getNodeClass():NodeClass (5 bytes)   inline accessor method (bytecode parsing)
                            @ 59  jdk.graal.compiler.core.common.Fields.getCount():int (6 bytes)   inline method (bytecode parsing)
                            @ 70  jdk.graal.compiler.core.common.Fields.getType(int):Class (7 bytes)   inline method (bytecode parsing)
                                  @ 6  jdk.graal.compiler.graph.NodeClass.dataEquals(Node, Node):boolean (546 bytes)   not inlining relevance-based (relevance=0.094963, probability=0.040887, bonus=1.000000, nodes=248 > 28.488884)
                                @ 46  jdk.graal.compiler.graph.Graph$1.equals(Object, Object):boolean (53 bytes)   relevance-based (relevance=0.094963, probability=0.081774, bonus=1.000000, nodes=25 <= 28.488884)
                              @ 36  java.lang.Object.equals(Object):boolean (11 bytes)   not inlining no methods remaining after filtering less frequent methods (8 methods previously)
                              @ 26  org.graalvm.collections.EconomicMapImpl.compareKeys(Object, Object):boolean (52 bytes)   relevance-based (relevance=1.188249, probability=1.922820, bonus=1.000000, nodes=66 <= 300.000000)
                              @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                            @ 39  deltablue.Variable.getWalkStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 45  deltablue.Variable.setWalkStrength(Strength):void (6 bytes)   inline method (bytecode parsing)
                            @ 50  deltablue.Variable.getStay():boolean (5 bytes)   inline accessor method (bytecode parsing)
                            @ 53  deltablue.Variable.setStay(boolean):void (6 bytes)   inline method (bytecode parsing)
                            @ 57  deltablue.Variable.getStay():boolean (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                @ 2  deltablue.Strength.weaker(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                              @ 42  deltablue.Strength.weakest(Strength):Strength (14 bytes)   relevance-based (relevance=1.598960, probability=1.000000, bonus=1.000000, nodes=12 <= 300.000000)
                            @ 18  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 21  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 35  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 38  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                              @ 64  deltablue.EqualityConstraint.execute():void (42 bytes)   relevance-based (relevance=1.199653, probability=0.750271, bonus=1.000000, nodes=38 <= 300.000000)
                            @ 4  jdk.graal.compiler.graph.Node.getNodeClass():NodeClass (5 bytes)   inline accessor method (bytecode parsing)
                              @ 40  jdk.graal.compiler.graph.Graph$1.hashCode(Object):int (15 bytes)   not inlining relevance-based (relevance=0.043546, probability=0.036411, bonus=1.000000, nodes=14 > 13.063822)
                 n            @ 48  java.lang.Object.hashCode():int (0 bytes)   trivial (relevance=1.152401, probability=0.963589, bonus=1.000000, nodes=5)
                              @ 61  org.graalvm.collections.EconomicMapImpl.getHashTableSize():int (43 bytes)   relevance-based (relevance=1.195947, probability=1.000000, bonus=1.000000, nodes=21 <= 300.000000)
                            @ 22  jdk.graal.compiler.hotspot.replacements.HotSpotHashCodeSnippets.computeIdentityHashCode(Object):int (127 bytes)   inline method (bytecode parsing)
                              @ 7  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.loadWordFromObject(Object, int):Word (34 bytes)   inline method (bytecode parsing)
                                @ 18  jdk.graal.compiler.replacements.ReplacementsUtil.staticAssert(boolean, String):void (12 bytes)   inline method (bytecode parsing)
                                @ 24  org.graalvm.word.LocationIdentity.any():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                            @ 8  deltablue.AbstractConstraint.lambda$satisfy$1(int, Variable):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                              @ 28  deltablue.AbstractConstraint$$Lambda/0x00007f2ce003d750.apply(Object):void (12 bytes)   relevance-based (relevance=1.000000, probability=0.500534, bonus=1.000000, nodes=13 <= 300.000000)
                            @ 8  deltablue.AbstractConstraint.lambda$satisfy$1(int, Variable):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                              @ 15  deltablue.AbstractConstraint$$Lambda/0x00007f2ce003d750.apply(Object):void (12 bytes)   relevance-based (relevance=0.997867, probability=0.499466, bonus=1.000000, nodes=13 <= 299.360005)
                            @ 5  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.clearPendingException(Word):Object (30 bytes)   inline method (bytecode parsing)
                            @ 16  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.getPendingException(Word):Object (14 bytes)   inline method (bytecode parsing)
                            @ 27  jdk.graal.compiler.hotspot.stubs.ForeignCallSnippets.getAndClearObjectResult(Word):Object (30 bytes)   inline method (bytecode parsing)
                              @ 6  deltablue.BinaryConstraint.isSatisfied():boolean (13 bytes)   relevance-based (relevance=1.000016, probability=0.500004, bonus=1.000000, nodes=14 <= 300.000000)
                            @ 39  deltablue.Variable.getWalkStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 45  deltablue.Variable.setWalkStrength(Strength):void (6 bytes)   inline method (bytecode parsing)
                            @ 50  deltablue.Variable.getStay():boolean (5 bytes)   inline accessor method (bytecode parsing)
                            @ 60  deltablue.Variable.getStay():boolean (5 bytes)   inline accessor method (bytecode parsing)
                            @ 70  deltablue.Variable.getStay():boolean (5 bytes)   inline accessor method (bytecode parsing)
                            @ 81  deltablue.Variable.setStay(boolean):void (6 bytes)   inline method (bytecode parsing)
                            @ 85  deltablue.Variable.getStay():boolean (5 bytes)   inline accessor method (bytecode parsing)
                            @ 39  deltablue.Variable.getWalkStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 45  deltablue.Variable.setWalkStrength(Strength):void (6 bytes)   inline method (bytecode parsing)
                            @ 50  deltablue.Variable.getStay():boolean (5 bytes)   inline accessor method (bytecode parsing)
                            @ 53  deltablue.Variable.setStay(boolean):void (6 bytes)   inline method (bytecode parsing)
                            @ 57  deltablue.Variable.getStay():boolean (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 1  deltablue.ScaleConstraint.recalculate():void (96 bytes)   not inlining too large previous low-level graph (low-level-nodes: 407, relevance=1.000000, probability=0.499996, bonus=1.000000, nodes=124)
                                  @ 6  deltablue.BinaryConstraint.getOutput():Variable (22 bytes)   relevance-based (relevance=1.000000, probability=0.499996, bonus=1.000000, nodes=17 <= 300.000000)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                              @ 1  org.graalvm.collections.EconomicMapImpl.hasHashArray():boolean (13 bytes)   trivial (relevance=1.250791, probability=1.000000, bonus=1.000000, nodes=9)
                                    @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000128, probability=0.000064, bonus=1.000000, nodes=41 > 0.038411)
                                  @ 9  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.248536, probability=0.499996, bonus=1.000000, nodes=35 <= 300.000000)
                                @ 8  deltablue.Planner.lambda$removePropagateFrom$5(Vector, AbstractConstraint):void (13 bytes)   relevance-based (relevance=1.000000, probability=0.499996, bonus=1.000000, nodes=62 <= 300.000000)
                            @ 19  org.graalvm.collections.EconomicMapImpl.getKey(int):Object (9 bytes)   inline method (bytecode parsing)
                              @ 14  deltablue.Planner$$Lambda/0x00007f2ce01f6220.apply(Object):void (12 bytes)   relevance-based (relevance=1.000000, probability=0.499996, bonus=1.000000, nodes=67 <= 300.000000)
                            @ 4  jdk.graal.compiler.graph.Node.getNodeClass():NodeClass (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 40  jdk.graal.compiler.graph.Graph$1.hashCode(Object):int (15 bytes)   not inlining relevance-based (relevance=0.044069, probability=0.029470, bonus=1.000000, nodes=14 > 13.220799)
                 n                @ 48  java.lang.Object.hashCode():int (0 bytes)   trivial (relevance=1.151491, probability=0.770024, bonus=1.000000, nodes=5)
                                  @ 61  org.graalvm.collections.EconomicMapImpl.getHashTableSize():int (43 bytes)   relevance-based (relevance=1.195561, probability=0.799494, bonus=1.000000, nodes=21 <= 300.000000)
                                @ 3  org.graalvm.collections.EconomicMapImpl.getHashIndex(Object):int (68 bytes)   relevance-based (relevance=1.457400, probability=0.799494, bonus=1.000000, nodes=76 <= 300.000000)
                                @ 6  org.graalvm.collections.EconomicMapImpl.getHashArray(int):int (126 bytes)   relevance-based (relevance=1.195561, probability=0.799494, bonus=1.000000, nodes=31 <= 300.000000)
                            @ 49  jdk.graal.compiler.graph.Node.valueEquals(Node):boolean (10 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.graph.Node.getNodeClass():NodeClass (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 46  jdk.graal.compiler.graph.Graph$1.equals(Object, Object):boolean (53 bytes)   not inlining relevance-based (relevance=0.036001, probability=0.010734, bonus=1.000000, nodes=25 > 10.800201)
                                @ 36  java.lang.Object.equals(Object):boolean (11 bytes)   not inlining no methods remaining after filtering less frequent methods (8 methods previously)
                                @ 26  org.graalvm.collections.EconomicMapImpl.compareKeys(Object, Object):boolean (52 bytes)   relevance-based (relevance=0.375223, probability=0.250919, bonus=1.000000, nodes=40 <= 112.566816)
                                @ 36  org.graalvm.collections.EconomicMapImpl.getRawValue(int):Object (11 bytes)   relevance-based (relevance=0.082301, probability=0.055036, bonus=1.000000, nodes=10 <= 24.690406)
                            @ 15  org.graalvm.collections.EconomicMapImpl.getKey(int):Object (9 bytes)   inline method (bytecode parsing)
                                @ 56  org.graalvm.collections.EconomicMapImpl.findWithCollision(Object, EconomicMapImpl$CollisionLink):int (65 bytes)   not inlining relevance-based (relevance=0.017703, probability=0.011838, bonus=1.000000, nodes=42 > 5.310794)
                              @ 9  org.graalvm.collections.EconomicMapImpl.findHash(Object):int (62 bytes)   relevance-based (relevance=1.000000, probability=0.799494, bonus=1.000000, nodes=163 <= 300.000000)
                            @ 49  jdk.graal.compiler.graph.Node.valueEquals(Node):boolean (10 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.graph.Node.getNodeClass():NodeClass (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 46  jdk.graal.compiler.graph.Graph$1.equals(Object, Object):boolean (53 bytes)   not inlining relevance-based (relevance=0.034213, probability=0.016513, bonus=1.000000, nodes=25 > 10.263806)
                                @ 36  java.lang.Object.equals(Object):boolean (11 bytes)   not inlining no methods remaining after filtering less frequent methods (8 methods previously)
                                @ 26  org.graalvm.collections.EconomicMapImpl.compareKeys(Object, Object):boolean (52 bytes)   relevance-based (relevance=0.356587, probability=0.385990, bonus=1.000000, nodes=40 <= 106.976154)
                              @ 15  org.graalvm.collections.EconomicMapImpl.findLinear(Object):int (42 bytes)   relevance-based (relevance=0.299835, probability=0.200506, bonus=1.000000, nodes=66 <= 89.950609)
                                @ 7  deltablue.Strength$Sym.customHash():int (5 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                              @ 1  som.Dictionary.hash(Dictionary$CustomHash):int (20 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=13 <= 300.000000)
                            @ 6  som.Dictionary.getBucketIdx(int):int (10 bytes)   inline method (bytecode parsing)
                              @ 7  som.Dictionary.getBucket(int):Dictionary$Entry (11 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                              @ 18  som.IdentityDictionary$IdEntry.match(int, Object):boolean (22 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=13 <= 300.000000)
                            @ 5  deltablue.Variable.addConstraint(AbstractConstraint):void (9 bytes)   inline method (bytecode parsing)
                            @ 5  deltablue.Variable.addConstraint(AbstractConstraint):void (9 bytes)   inline method (bytecode parsing)
                            @ 13  deltablue.Variable.addConstraint(AbstractConstraint):void (9 bytes)   inline method (bytecode parsing)
                            @ 5  deltablue.Variable.addConstraint(AbstractConstraint):void (9 bytes)   inline method (bytecode parsing)
                            @ 13  deltablue.Variable.addConstraint(AbstractConstraint):void (9 bytes)   inline method (bytecode parsing)
                            @ 21  deltablue.Variable.addConstraint(AbstractConstraint):void (9 bytes)   inline method (bytecode parsing)
                            @ 29  deltablue.Variable.addConstraint(AbstractConstraint):void (9 bytes)   inline method (bytecode parsing)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                @ 5  som.Vector.append(Object):void (51 bytes)   not inlining relevance-based (relevance=0.000212, probability=0.000091, bonus=1.000000, nodes=35 > 0.063493)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                            @ 15  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                                @ 5  som.Vector.append(Object):void (51 bytes)   not inlining relevance-based (relevance=0.000212, probability=0.000091, bonus=1.000000, nodes=35 > 0.063493)
                            @ 27  deltablue.Strength.absoluteWeakest():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                @ 5  som.Vector.append(Object):void (51 bytes)   not inlining relevance-based (relevance=0.000212, probability=0.000091, bonus=1.000000, nodes=35 > 0.063493)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                @ 5  som.Vector.append(Object):void (51 bytes)   not inlining relevance-based (relevance=0.000212, probability=0.000091, bonus=1.000000, nodes=35 > 0.063493)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                  @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000042, probability=0.000018, bonus=1.000000, nodes=41 > 0.012727)
                                @ 5  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=0.331326, probability=0.142214, bonus=1.000000, nodes=35 <= 99.397933)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                  @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000042, probability=0.000018, bonus=1.000000, nodes=41 > 0.012728)
                                @ 5  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=0.331369, probability=0.142214, bonus=1.000000, nodes=35 <= 99.410659)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                  @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000128, probability=0.000055, bonus=1.000000, nodes=41 > 0.038411)
                                @ 5  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=0.429225, bonus=1.000000, nodes=35 <= 300.000000)
                              @ 1  deltablue.UnaryConstraint.addToGraph():void (14 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=176 <= 300.000000)
                                @ 1  deltablue.Planner.newMark():int (15 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f2ce003d750.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                @ 8  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 713, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=72)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f2ce003d750.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 2  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 19  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 713, relevance=1.000000, probability=1.002830, bonus=1.000000, nodes=72)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f2ce003e8b8.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                              @ 6  deltablue.Planner.incrementalAdd(AbstractConstraint):void (27 bytes)   relevance-based (relevance=1.331709, probability=1.000000, bonus=1.000000, nodes=28 <= 300.000000)
                            @ 1  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 9  deltablue.Variable.getStay():boolean (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 8  deltablue.AbstractConstraint.lambda$inputsKnown$0(int, Variable):boolean (28 bytes)   not inlining relevance-based (relevance=0.000006, probability=0.000006, bonus=1.000000, nodes=21 > 0.001877)
                                @ 26  deltablue.AbstractConstraint$$Lambda/0x00007f2ce003e8b8.test(Object):boolean (12 bytes)   trivial (relevance=0.000006, probability=0.000006, bonus=1.000000, nodes=9)
                            @ 1  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 9  deltablue.Variable.getStay():boolean (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 8  deltablue.AbstractConstraint.lambda$inputsKnown$0(int, Variable):boolean (28 bytes)   relevance-based (relevance=1.000000, probability=0.999967, bonus=1.000000, nodes=21 <= 300.000000)
                                @ 15  deltablue.AbstractConstraint$$Lambda/0x00007f2ce003e8b8.test(Object):boolean (12 bytes)   relevance-based (relevance=1.000000, probability=0.999967, bonus=1.000000, nodes=23 <= 300.000000)
                              @ 7  deltablue.BinaryConstraint.inputsHasOne(TestInterface):boolean (32 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=42 <= 300.000000)
                            @ 1  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 9  deltablue.Variable.getStay():boolean (5 bytes)   inline accessor method (bytecode parsing)
                                @ 8  deltablue.AbstractConstraint.lambda$inputsKnown$0(int, Variable):boolean (28 bytes)   not inlining relevance-based (relevance=0.000006, probability=0.000006, bonus=1.000000, nodes=21 > 0.001877)
                              @ 26  deltablue.AbstractConstraint$$Lambda/0x00007f2ce003e8b8.test(Object):boolean (12 bytes)   trivial (relevance=0.000006, probability=0.000006, bonus=1.000000, nodes=9)
                            @ 1  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 9  deltablue.Variable.getStay():boolean (5 bytes)   inline accessor method (bytecode parsing)
                                @ 8  deltablue.AbstractConstraint.lambda$inputsKnown$0(int, Variable):boolean (28 bytes)   relevance-based (relevance=1.000000, probability=0.999994, bonus=1.000000, nodes=21 <= 300.000000)
                              @ 15  deltablue.AbstractConstraint$$Lambda/0x00007f2ce003e8b8.test(Object):boolean (12 bytes)   relevance-based (relevance=1.000000, probability=0.999994, bonus=1.000000, nodes=23 <= 300.000000)
                            @ 1  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 6  deltablue.Variable.getConstraints():Vector (5 bytes)   inline accessor method (bytecode parsing)
                            @ 11  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object, Object):Object (10 bytes)   inline method (bytecode parsing)
                              @ 6  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object, Object):Object (24 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                              @ 1  java.util.ArrayList$Itr.checkForComodification():void (23 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=9)
                              @ 19  deltablue.Planner$$Lambda/0x00007f2ce01f6440.<init>(AbstractConstraint, ForEachInterface):void (15 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                                  @ 12  deltablue.Planner.lambda$constraintsConsuming$3(AbstractConstraint, ForEachInterface, AbstractConstraint):void (20 bytes)   not inlining too large previous low-level graph (low-level-nodes: 391, relevance=1.000000, probability=7.920556, bonus=1.000000, nodes=26)
                                @ 20  deltablue.Planner$$Lambda/0x00007f2ce01f6440.apply(Object):void (16 bytes)   relevance-based (relevance=1.000000, probability=7.920556, bonus=1.000000, nodes=16 <= 300.000000)
                              @ 16  som.Vector.forEach(ForEachInterface):void (32 bytes)   not inlining callee invoke probability is too high (invokeP=7.920556, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=33)
                            @ 19  org.graalvm.collections.EconomicMapImpl.getKey(int):Object (9 bytes)   inline method (bytecode parsing)
                            @ 41  java.lang.Enum.ordinal():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 4  jdk.graal.compiler.graph.Node.getNodeClass():NodeClass (5 bytes)   inline accessor method (bytecode parsing)
                                @ 40  jdk.graal.compiler.graph.Graph$1.hashCode(Object):int (15 bytes)   not inlining relevance-based (relevance=0.044069, probability=0.036861, bonus=1.000000, nodes=14 > 13.220799)
                 n              @ 48  java.lang.Object.hashCode():int (0 bytes)   trivial (relevance=1.151491, probability=0.963139, bonus=1.000000, nodes=5)
                                @ 61  org.graalvm.collections.EconomicMapImpl.getHashTableSize():int (43 bytes)   relevance-based (relevance=1.195561, probability=1.000000, bonus=1.000000, nodes=21 <= 300.000000)
                              @ 3  org.graalvm.collections.EconomicMapImpl.getHashIndex(Object):int (68 bytes)   relevance-based (relevance=1.457079, probability=1.000000, bonus=1.000000, nodes=76 <= 300.000000)
                              @ 6  org.graalvm.collections.EconomicMapImpl.getHashArray(int):int (126 bytes)   relevance-based (relevance=1.195561, probability=1.000000, bonus=1.000000, nodes=31 <= 300.000000)
                            @ 39  deltablue.Variable.getWalkStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 45  deltablue.Variable.setWalkStrength(Strength):void (6 bytes)   inline method (bytecode parsing)
                            @ 50  deltablue.Variable.getStay():boolean (5 bytes)   inline accessor method (bytecode parsing)
                            @ 60  deltablue.Variable.getStay():boolean (5 bytes)   inline accessor method (bytecode parsing)
                            @ 70  deltablue.Variable.getStay():boolean (5 bytes)   inline accessor method (bytecode parsing)
                            @ 81  deltablue.Variable.setStay(boolean):void (6 bytes)   inline method (bytecode parsing)
                            @ 85  deltablue.Variable.getStay():boolean (5 bytes)   inline accessor method (bytecode parsing)
                            @ 39  deltablue.Variable.getWalkStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 45  deltablue.Variable.setWalkStrength(Strength):void (6 bytes)   inline method (bytecode parsing)
                            @ 50  deltablue.Variable.getStay():boolean (5 bytes)   inline accessor method (bytecode parsing)
                            @ 53  deltablue.Variable.setStay(boolean):void (6 bytes)   inline method (bytecode parsing)
                            @ 57  deltablue.Variable.getStay():boolean (5 bytes)   inline accessor method (bytecode parsing)
                            @ 49  jdk.graal.compiler.graph.Node.valueEquals(Node):boolean (10 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.graph.Node.getNodeClass():NodeClass (5 bytes)   inline accessor method (bytecode parsing)
                                @ 1  deltablue.ScaleConstraint.recalculate():void (96 bytes)   not inlining too large previous low-level graph (low-level-nodes: 407, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=124)
                                @ 46  jdk.graal.compiler.graph.Graph$1.equals(Object, Object):boolean (53 bytes)   not inlining relevance-based (relevance=0.038159, probability=0.013565, bonus=1.000000, nodes=25 > 11.447648)
                                @ 6  deltablue.BinaryConstraint.getOutput():Variable (22 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=17 <= 300.000000)
                              @ 36  java.lang.Object.equals(Object):boolean (11 bytes)   not inlining no methods remaining after filtering less frequent methods (8 methods previously)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                              @ 26  org.graalvm.collections.EconomicMapImpl.compareKeys(Object, Object):boolean (52 bytes)   relevance-based (relevance=0.375042, probability=0.313696, bonus=1.000000, nodes=40 <= 112.512633)
                                  @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000128, probability=0.000128, bonus=1.000000, nodes=41 > 0.038411)
                              @ 36  org.graalvm.collections.EconomicMapImpl.getRawValue(int):Object (11 bytes)   relevance-based (relevance=0.081145, probability=0.067872, bonus=1.000000, nodes=10 <= 24.343491)
                                @ 9  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.248536, probability=1.000000, bonus=1.000000, nodes=35 <= 300.000000)
                            @ 15  org.graalvm.collections.EconomicMapImpl.getKey(int):Object (9 bytes)   inline method (bytecode parsing)
                              @ 8  deltablue.Planner.lambda$removePropagateFrom$5(Vector, AbstractConstraint):void (13 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=62 <= 300.000000)
                              @ 56  org.graalvm.collections.EconomicMapImpl.findWithCollision(Object, EconomicMapImpl$CollisionLink):int (65 bytes)   not inlining relevance-based (relevance=0.017111, probability=0.014312, bonus=1.000000, nodes=42 > 5.133435)
                              @ 2  org.graalvm.collections.EconomicMapImpl.checkKeyNonNull(Object):void (15 bytes)   trivial (relevance=1.225092, probability=1.000000, bonus=1.000000, nodes=6)
                              @ 7  org.graalvm.collections.EconomicMapImpl.find(Object):int (19 bytes)   not inlining too large previous low-level graph (low-level-nodes: 357, relevance=1.225092, probability=1.000000, bonus=1.000000, nodes=20)
                                @ 2  org.graalvm.collections.EconomicMapImpl.getRawValue(int):Object (11 bytes)   relevance-based (relevance=0.237872, probability=0.183735, bonus=1.000000, nodes=10 <= 71.361732)
                              @ 18  org.graalvm.collections.EconomicMapImpl.getValue(int):Object (23 bytes)   relevance-based (relevance=0.225092, probability=0.183735, bonus=1.000000, nodes=19 <= 67.527699)
                            @ 10  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 15  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 27  deltablue.Strength.absoluteWeakest():Strength (4 bytes)   inline method (bytecode parsing)
                              @ 4  deltablue.Variable.<init>():void (44 bytes)   not inlining too large previous low-level graph (low-level-nodes: 379, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=27)
                                      @ 7  deltablue.Strength$Sym.customHash():int (5 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                                    @ 1  som.Dictionary.hash(Dictionary$CustomHash):int (20 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=12 <= 300.000000)
                            @ 6  som.Dictionary.getBucketIdx(int):int (10 bytes)   inline method (bytecode parsing)
                                    @ 7  som.Dictionary.getBucket(int):Dictionary$Entry (11 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                                    @ 18  som.IdentityDictionary$IdEntry.match(int, Object):boolean (22 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                  @ 4  som.Dictionary.at(Dictionary$CustomHash):Object (39 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=35 <= 300.000000)
                                @ 6  deltablue.Strength.of(Strength$Sym):Strength (11 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=38 <= 300.000000)
                              @ 2  deltablue.AbstractConstraint.<init>(Strength$Sym):void (13 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=42 <= 300.000000)
                            @ 49  jdk.graal.compiler.graph.Node.valueEquals(Node):boolean (10 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.graph.Node.getNodeClass():NodeClass (5 bytes)   inline accessor method (bytecode parsing)
                            @ 59  jdk.graal.compiler.core.common.Fields.getCount():int (6 bytes)   inline method (bytecode parsing)
                            @ 70  jdk.graal.compiler.core.common.Fields.getType(int):Class (7 bytes)   inline method (bytecode parsing)
                                @ 6  jdk.graal.compiler.graph.NodeClass.dataEquals(Node, Node):boolean (546 bytes)   not inlining relevance-based (relevance=0.102821, probability=0.021652, bonus=1.000000, nodes=248 > 30.846282)
                              @ 46  jdk.graal.compiler.graph.Graph$1.equals(Object, Object):boolean (53 bytes)   relevance-based (relevance=0.102821, probability=0.043303, bonus=1.000000, nodes=25 <= 30.846282)
                            @ 36  java.lang.Object.equals(Object):boolean (11 bytes)   not inlining no methods remaining after filtering less frequent methods (8 methods previously)
                            @ 4  java.nio.Buffer.session():MemorySessionImpl (20 bytes)   inline method (bytecode parsing)
                            @ 11  java.nio.Buffer.checkIndex(int):int (12 bytes)   inline method (bytecode parsing)
                            @ 14  java.nio.DirectByteBuffer.ix(int):long (10 bytes)   inline method (bytecode parsing)
                            @ 17  jdk.internal.misc.ScopedMemoryAccess.getByte(MemorySessionImpl, Object, long):byte (16 bytes)   inline method (bytecode parsing)
                              @ 4  jdk.internal.misc.ScopedMemoryAccess.getByteInternal(MemorySessionImpl, Object, long):byte (34 bytes)   inline method (bytecode parsing)
                            @ 5  java.util.Objects.checkIndex(int, int):int (7 bytes)   inline method (bytecode parsing)
                            @ 11  java.util.ArrayList.elementData(int):Object (7 bytes)   inline method (bytecode parsing)
                            @ 8  java.util.ArrayDeque.elementAt(Object[], int):Object (4 bytes)   inline method (bytecode parsing)
                              @ 1  java.util.ArrayDeque.peekFirst():Object (12 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=7)
                              @ 44  java.lang.StringLatin1.equals(byte[], byte[]):boolean (36 bytes)   relevance-based (relevance=0.981430, probability=0.495142, bonus=1.000000, nodes=33 <= 294.428932)
                            @ 1  deltablue.Planner.lambda$chainTest$7(int):Variable (8 bytes)   inline method (bytecode parsing)
                            @ 15  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 27  deltablue.Strength.absoluteWeakest():Strength (4 bytes)   inline method (bytecode parsing)
                              @ 4  deltablue.Variable.<init>():void (44 bytes)   not inlining too large previous low-level graph (low-level-nodes: 379, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=27)
                            @ 12  deltablue.AbstractConstraint.addConstraint(Planner):void (10 bytes)   inline method (bytecode parsing)
                              @ 6  deltablue.BinaryConstraint.<init>(Variable, Variable, Strength$Sym, Planner):void (21 bytes)   not inlining too large previous low-level graph (low-level-nodes: 415, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=17)
                            @ 5  deltablue.Variable.addConstraint(AbstractConstraint):void (9 bytes)   inline method (bytecode parsing)
                            @ 13  deltablue.Variable.addConstraint(AbstractConstraint):void (9 bytes)   inline method (bytecode parsing)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                  @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000128, probability=0.000128, bonus=1.000000, nodes=41 > 0.038411)
                                @ 5  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=35 <= 300.000000)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                  @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000128, probability=0.000128, bonus=1.000000, nodes=41 > 0.038411)
                                @ 5  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000128, probability=1.000000, bonus=1.000000, nodes=35 <= 300.000000)
                              @ 1  deltablue.BinaryConstraint.addToGraph():void (22 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=86 <= 300.000000)
                                @ 1  deltablue.Planner.newMark():int (15 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f2ce003d750.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                @ 8  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 713, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=72)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f2ce003d750.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                @ 19  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 713, relevance=1.000000, probability=1.002830, bonus=1.000000, nodes=72)
                              @ 6  deltablue.Planner.incrementalAdd(AbstractConstraint):void (27 bytes)   relevance-based (relevance=1.000128, probability=1.000000, bonus=1.000000, nodes=28 <= 300.000000)
                            @ 49  java.lang.Math.max(int, int):int (11 bytes)   inline method (bytecode parsing)
                            @ 37  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                      @ 3  java.lang.Math.max(int, int):int (11 bytes)   trivial (relevance=0.088923, probability=0.052030, bonus=1.000000, nodes=7)
                                    @ 27  jdk.internal.util.ArraysSupport.newLength(int, int, int):int (27 bytes)   relevance-based (relevance=0.088923, probability=0.052030, bonus=1.000000, nodes=15 <= 26.676995)
                                    @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.088923, probability=0.052030, bonus=1.000000, nodes=41 > 26.676995)
                                  @ 7  java.util.ArrayList.grow(int):Object[] (60 bytes)   relevance-based (relevance=0.395057, probability=0.283183, bonus=1.000000, nodes=51 <= 118.517065)
                                @ 7  java.util.ArrayList.grow():Object[] (11 bytes)   relevance-based (relevance=0.395057, probability=0.283183, bonus=1.000000, nodes=57 <= 118.517065)
                              @ 20  java.util.ArrayList.add(Object, Object[], int):void (23 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=72 <= 300.000000)
                            @ 12  java.util.ArrayDeque.elementAt(Object[], int):Object (4 bytes)   inline method (bytecode parsing)
                              @ 28  java.util.ArrayDeque.inc(int, int):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.999617, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 111  org.graalvm.collections.EconomicMapImpl.setKey(int, Object):void (10 bytes)   inline method (bytecode parsing)
                            @ 143  org.graalvm.collections.EconomicMapImpl.size():int (10 bytes)   inline method (bytecode parsing)
                            @ 147  org.graalvm.collections.EconomicMapImpl.size():int (10 bytes)   inline method (bytecode parsing)
                              @ 2  org.graalvm.collections.EconomicMapImpl.getRawValue(int):Object (11 bytes)   relevance-based (relevance=1.015521, probability=1.000000, bonus=1.000000, nodes=10 <= 300.000000)
                              @ 2  org.graalvm.collections.EconomicMapImpl.checkKeyNonNull(Object):void (15 bytes)   trivial (relevance=2.113348, probability=1.000000, bonus=1.000000, nodes=6)
                              @ 43  org.graalvm.collections.EconomicMapImpl.setRawValue(int, Object):void (12 bytes)   relevance-based (relevance=1.000000, probability=0.984716, bonus=1.000000, nodes=12 <= 300.000000)
                              @ 7  org.graalvm.collections.EconomicMapImpl.find(Object):int (19 bytes)   not inlining too large previous low-level graph (low-level-nodes: 357, relevance=2.113348, probability=1.000000, bonus=1.000000, nodes=20)
                              @ 31  org.graalvm.collections.EconomicMapImpl$CollisionLink.<init>(Object, int):void (15 bytes)   not inlining relevance-based (relevance=0.015521, probability=0.015284, bonus=1.000000, nodes=11 > 4.656373)
                              @ 34  org.graalvm.collections.EconomicMapImpl.setRawValue(int, Object):void (12 bytes)   not inlining relevance-based (relevance=0.015521, probability=0.015284, bonus=1.000000, nodes=12 > 4.656373)
                                @ 2  org.graalvm.collections.EconomicMapImpl.getRawValue(int):Object (11 bytes)   relevance-based (relevance=0.935730, probability=0.419832, bonus=1.000000, nodes=10 <= 280.718913)
                              @ 18  org.graalvm.collections.EconomicMapImpl.getValue(int):Object (23 bytes)   relevance-based (relevance=0.887252, probability=0.419832, bonus=1.000000, nodes=19 <= 266.175582)
                                @ 2  org.graalvm.collections.EconomicMapImpl.getRawValue(int):Object (11 bytes)   relevance-based (relevance=0.900988, probability=0.419832, bonus=1.000000, nodes=10 <= 270.296265)
                                @ 43  org.graalvm.collections.EconomicMapImpl.setRawValue(int, Object):void (12 bytes)   relevance-based (relevance=0.887252, probability=0.413432, bonus=1.000000, nodes=12 <= 266.175582)
                                @ 31  org.graalvm.collections.EconomicMapImpl$CollisionLink.<init>(Object, int):void (15 bytes)   not inlining relevance-based (relevance=0.013736, probability=0.006400, bonus=1.000000, nodes=11 > 4.120684)
                                @ 34  org.graalvm.collections.EconomicMapImpl.setRawValue(int, Object):void (12 bytes)   not inlining relevance-based (relevance=0.013736, probability=0.006400, bonus=1.000000, nodes=12 > 4.120684)
                              @ 26  org.graalvm.collections.EconomicMapImpl.setValue(int, Object):void (47 bytes)   relevance-based (relevance=0.887252, probability=0.419832, bonus=1.000000, nodes=34 <= 266.175582)
                            @ 14  java.lang.Math.max(int, int):int (11 bytes)   inline method (bytecode parsing)
                              @ 70  org.graalvm.collections.EconomicMapImpl.grow():void (91 bytes)   not inlining relevance-based (relevance=0.082062, probability=0.038830, bonus=1.000000, nodes=58 > 24.618524)
                                @ 2  org.graalvm.collections.EconomicMapImpl.getRawValue(int):Object (11 bytes)   relevance-based (relevance=1.015481, probability=0.580168, bonus=1.000000, nodes=10 <= 300.000000)
                                @ 43  org.graalvm.collections.EconomicMapImpl.setRawValue(int, Object):void (12 bytes)   relevance-based (relevance=1.000000, probability=0.571323, bonus=1.000000, nodes=12 <= 300.000000)
                                @ 31  org.graalvm.collections.EconomicMapImpl$CollisionLink.<init>(Object, int):void (15 bytes)   not inlining relevance-based (relevance=0.015481, probability=0.008845, bonus=1.000000, nodes=11 > 4.644322)
                                @ 34  org.graalvm.collections.EconomicMapImpl.setRawValue(int, Object):void (12 bytes)   not inlining relevance-based (relevance=0.015481, probability=0.008845, bonus=1.000000, nodes=12 > 4.644322)
                              @ 118  org.graalvm.collections.EconomicMapImpl.setValue(int, Object):void (47 bytes)   relevance-based (relevance=1.226096, probability=0.580168, bonus=1.000000, nodes=34 <= 300.000000)
                              @ 132  org.graalvm.collections.EconomicMapImpl.hasHashArray():boolean (13 bytes)   trivial (relevance=1.226096, probability=0.580168, bonus=1.000000, nodes=9)
                                  @ 3  java.lang.Math.max(int, int):int (11 bytes)   trivial (relevance=0.171523, probability=0.146410, bonus=1.000000, nodes=7)
                                @ 29  jdk.internal.util.ArraysSupport.newLength(int, int, int):int (27 bytes)   relevance-based (relevance=0.171523, probability=0.146410, bonus=1.000000, nodes=15 <= 51.456992)
                              @ 139  org.graalvm.collections.EconomicMapImpl.getHashTableSize():int (43 bytes)   relevance-based (relevance=0.753325, probability=0.356461, bonus=1.000000, nodes=21 <= 225.997563)
                              @ 24  java.lang.AbstractStringBuilder.newCapacity(int):int (59 bytes)   relevance-based (relevance=0.171523, probability=0.146410, bonus=1.000000, nodes=27 <= 51.456992)
                                @ 25  java.lang.Math.min(int, int):int (11 bytes)   trivial (relevance=0.171525, probability=0.146390, bonus=1.000000, nodes=7)
                            @ 4  jdk.graal.compiler.graph.Node.getNodeClass():NodeClass (5 bytes)   inline accessor method (bytecode parsing)
                              @ 32  java.util.Arrays.copyOf(byte[], int):byte[] (33 bytes)   relevance-based (relevance=0.171523, probability=0.146410, bonus=1.000000, nodes=28 <= 51.456992)
                                  @ 40  jdk.graal.compiler.graph.Graph$1.hashCode(Object):int (15 bytes)   not inlining relevance-based (relevance=0.035625, probability=0.013139, bonus=1.000000, nodes=14 > 10.687616)
                 n                @ 48  java.lang.Object.hashCode():int (0 bytes)   trivial (relevance=0.930859, probability=0.343321, bonus=1.000000, nodes=5)
                                  @ 61  org.graalvm.collections.EconomicMapImpl.getHashTableSize():int (43 bytes)   relevance-based (relevance=0.966484, probability=0.356461, bonus=1.000000, nodes=21 <= 289.945288)
                            @ 5  jdk.graal.compiler.nodes.java.NewArrayNode.newUninitializedArray(Class, int):Object (7 bytes)   inline method (bytecode parsing)
                                @ 2  org.graalvm.collections.EconomicMapImpl.getHashIndex(Object):int (68 bytes)   relevance-based (relevance=0.808394, probability=0.356461, bonus=1.000000, nodes=76 <= 242.518227)
                            @ 27  jdk.graal.compiler.replacements.arraycopy.ArrayCopyCallNode.disjointArraycopy(Object, int, Object, int, int, JavaKind, int):void (17 bytes)   inline method (bytecode parsing)
                                @ 10  org.graalvm.collections.EconomicMapImpl.getHashArray(int):int (126 bytes)   relevance-based (relevance=0.900646, probability=0.356461, bonus=1.000000, nodes=31 <= 270.193830)
                            @ 1  org.graalvm.collections.EconomicMapImpl.size():int (10 bytes)   inline method (bytecode parsing)
                            @ 84  org.graalvm.collections.EconomicMapImpl.getKey(int):Object (9 bytes)   inline method (bytecode parsing)
                                @ 28  org.graalvm.collections.EconomicMapImpl.createHash():void (109 bytes)   not inlining relevance-based (relevance=0.003922, probability=0.001552, bonus=1.000000, nodes=57 > 1.176562)
                                @ 38  org.graalvm.collections.EconomicMapImpl.setHashArray(int, int):void (112 bytes)   relevance-based (relevance=0.896724, probability=0.354908, bonus=1.000000, nodes=37 <= 269.017268)
                                @ 43  org.graalvm.collections.EconomicMapImpl.getRawValue(int):Object (11 bytes)   relevance-based (relevance=0.896724, probability=0.354908, bonus=1.000000, nodes=10 <= 269.017268)
                                @ 121  org.graalvm.collections.EconomicMapImpl.getRawValue(int):Object (11 bytes)   relevance-based (relevance=0.051763, probability=0.020487, bonus=1.000000, nodes=10 <= 15.529026)
                            @ 5  jdk.graal.compiler.replacements.arraycopy.ArrayCopySnippets.checkArrayTypes(Object, Object, ArrayCopySnippets$ArrayCopyTypeCheck):void (98 bytes)   inline method (bytecode parsing)
                            @ 20  jdk.graal.compiler.replacements.arraycopy.ArrayCopySnippets.checkLimits(Object, int, Object, int, int, JavaKind, ArrayCopySnippets$Counters):int[] (230 bytes)   inline method (bytecode parsing)
                                @ 126  org.graalvm.collections.EconomicMapImpl$CollisionLink.<init>(Object, int):void (15 bytes)   relevance-based (relevance=0.051763, probability=0.020487, bonus=1.000000, nodes=11 <= 15.529026)
                              @ 21  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                              @ 37  jdk.graal.compiler.nodes.PiNode.piCastPositive(int, GuardingNode):int (9 bytes)   inline method (bytecode parsing)
                              @ 64  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                @ 129  org.graalvm.collections.EconomicMapImpl.setRawValue(int, Object):void (12 bytes)   relevance-based (relevance=0.051763, probability=0.020487, bonus=1.000000, nodes=12 <= 15.529026)
                                @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                              @ 81  jdk.graal.compiler.nodes.PiNode.piCastPositive(int, GuardingNode):int (9 bytes)   inline method (bytecode parsing)
                              @ 108  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                                @ 104  org.graalvm.collections.EconomicMapImpl$CollisionLink.<init>(Object, int):void (15 bytes)   not inlining relevance-based (relevance=0.005680, probability=0.002248, bonus=1.000000, nodes=11 > 1.703892)
                              @ 125  jdk.graal.compiler.nodes.PiNode.piCastPositive(int, GuardingNode):int (9 bytes)   inline method (bytecode parsing)
                              @ 159  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                                @ 107  org.graalvm.collections.EconomicMapImpl.setRawValue(int, Object):void (12 bytes)   not inlining relevance-based (relevance=0.005680, probability=0.002248, bonus=1.000000, nodes=12 > 1.703892)
                              @ 200  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                              @ 217  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                                @ 157  org.graalvm.collections.EconomicMapImpl.setRawValue(int, Object):void (12 bytes)   not inlining relevance-based (relevance=0.023724, probability=0.009389, bonus=1.000000, nodes=12 > 7.117100)
                              @ 226  jdk.graal.compiler.replacements.arraycopy.ArrayCopySnippets.createCheckLimitsResult(int, int, int):int[] (18 bytes)   inline method (bytecode parsing)
                            @ 47  jdk.graal.compiler.replacements.arraycopy.ArrayCopySnippets.incrementLengthCounter(int, ArrayCopySnippets$Counters):void (16 bytes)   inline method (bytecode parsing)
                              @ 169  org.graalvm.collections.EconomicMapImpl.putHashEntry(Object, int, boolean):void (161 bytes)   relevance-based (relevance=0.753325, probability=0.356461, bonus=1.000000, nodes=196 <= 225.997563)
                              @ 12  jdk.graal.compiler.replacements.SnippetIntegerHistogram.inc(long):void (215 bytes)   inline method (bytecode parsing)
                            @ 52  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                            @ 59  jdk.graal.compiler.replacements.SnippetCounter.add(int):void (13 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                            @ 77  jdk.graal.compiler.replacements.arraycopy.ArrayCopySnippets.doArraycopyExactStubCallSnippet(Object, int, Object, int, int, JavaKind, LocationIdentity, ArrayCopySnippets$Counters):void (19 bytes)   inline method (bytecode parsing)
                              @ 12  jdk.graal.compiler.hotspot.replacements.arraycopy.HotSpotArraycopySnippets.heapWordSize():int (7 bytes)   inline method (bytecode parsing)
                              @ 15  jdk.graal.compiler.replacements.arraycopy.ArrayCopyCallNode.arraycopy(Object, int, Object, int, int, JavaKind, LocationIdentity, int):void (19 bytes)   inline method (bytecode parsing)
                              @ 180  org.graalvm.collections.EconomicMapImpl.getHashThreshold():int (22 bytes)   relevance-based (relevance=0.472771, probability=0.223707, bonus=1.000000, nodes=12 <= 141.831200)
                            @ 1  org.graalvm.collections.EconomicMapImpl.size():int (10 bytes)   inline method (bytecode parsing)
                            @ 84  org.graalvm.collections.EconomicMapImpl.getKey(int):Object (9 bytes)   inline method (bytecode parsing)
                              @ 187  org.graalvm.collections.EconomicMapImpl.createHash():void (109 bytes)   not inlining relevance-based (relevance=0.029359, probability=0.013892, bonus=1.000000, nodes=57 > 8.807559)
                            @ 23  jdk.graal.compiler.replacements.AllocationSnippets.allocateArrayImpl(Word, int, int, int, AllocationSnippets$FillContent, int, boolean, boolean, boolean, boolean, AllocationSnippets$AllocationProfilingData):Object (178 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getTLABInfo():Word (5 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getThread():Word (8 bytes)   inline method (bytecode parsing)
                                  @ 4  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.registerAsWord(Register):Word (7 bytes)   inline method (bytecode parsing)
                              @ 9  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.readTlabTop(Word):Word (5 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.readTlabTop(Word):Word (17 bytes)   inline method (bytecode parsing)
                              @ 17  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.readTlabEnd(Word):Word (5 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.readTlabEnd(Word):Word (17 bytes)   inline method (bytecode parsing)
                              @ 36  jdk.graal.compiler.replacements.ReplacementsUtil.dynamicAssert(boolean, String):void (12 bytes)   inline method (bytecode parsing)
                              @ 44  jdk.graal.compiler.replacements.AllocationSnippets.arrayAllocationSize(int, int, int):UnsignedWord (18 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.objectAlignment():int (7 bytes)   inline method (bytecode parsing)
                                @ 11  jdk.graal.compiler.replacements.AllocationSnippets.arrayAllocationSize(int, int, int, int):long (32 bytes)   inline method (bytecode parsing)
                              @ 59  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.useTLAB():boolean (7 bytes)   inline method (bytecode parsing)
                              @ 72  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.shouldAllocateInTLAB(UnsignedWord, boolean):boolean (33 bytes)   inline method (bytecode parsing)
                              @ 102  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.writeTlabTop(Word, Word):void (6 bytes)   inline method (bytecode parsing)
                                @ 2  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.writeTlabTop(Word, Word):void (15 bytes)   inline method (bytecode parsing)
                              @ 109  jdk.graal.compiler.replacements.AllocationSnippets.emitPrefetchAllocate(Word, boolean):void (61 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getPrefetchStyle():int (7 bytes)   inline method (bytecode parsing)
                                @ 9  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getPrefetchLines(boolean):int (18 bytes)   inline method (bytecode parsing)
                                @ 14  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getPrefetchStepSize():int (7 bytes)   inline method (bytecode parsing)
                                @ 20  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getPrefetchDistance():int (7 bytes)   inline method (bytecode parsing)
                              @ 136  jdk.graal.compiler.replacements.AllocationSnippets.formatArray(Word, UnsignedWord, int, Word, AllocationSnippets$FillContent, boolean, int, boolean, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):Object (53 bytes)   inline method (bytecode parsing)
                                @ 5  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.initializeObjectHeader(Word, Word, boolean):void (29 bytes)   inline method (bytecode parsing)
                                  @ 25  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.initializeObjectHeader(Word, Word, KlassPointer):void (20 bytes)   inline method (bytecode parsing)
                                @ 11  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.arrayLengthOffset():int (7 bytes)   inline method (bytecode parsing)
                                @ 15  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                                @ 38  jdk.graal.compiler.replacements.AllocationSnippets.fillContents(Word, AllocationSnippets$FillContent, int, UnsignedWord, boolean, boolean, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):void (58 bytes)   inline method (bytecode parsing)
                                @ 44  jdk.graal.compiler.replacements.AllocationSnippets.emitMemoryBarrierIf(boolean):void (14 bytes)   inline method (bytecode parsing)
                                  @ 7  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                              @ 152  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                              @ 158  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.callNewArrayStub(Word, int):Object (35 bytes)   inline method (bytecode parsing)
                                @ 22  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.nonNullOrDeopt(Object):Object (27 bytes)   inline method (bytecode parsing)
                              @ 168  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.profileAllocation(AllocationSnippets$AllocationProfilingData, UnsignedWord):void (51 bytes)   inline method (bytecode parsing)
                              @ 174  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.verifyOop(Object):Object (5 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.verifyOop(Object):Object (19 bytes)   inline method (bytecode parsing)
                            @ 1  java.nio.Buffer.limit():int (5 bytes)   inline accessor method (bytecode parsing)
                                @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                              @ 10  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=8)
                            @ 4  java.nio.Buffer.session():MemorySessionImpl (20 bytes)   inline method (bytecode parsing)
                            @ 11  java.nio.Buffer.checkIndex(int):int (12 bytes)   inline method (bytecode parsing)
                            @ 14  java.nio.DirectByteBuffer.ix(int):long (10 bytes)   inline method (bytecode parsing)
                            @ 17  jdk.internal.misc.ScopedMemoryAccess.getByte(MemorySessionImpl, Object, long):byte (16 bytes)   inline method (bytecode parsing)
                              @ 4  jdk.internal.misc.ScopedMemoryAccess.getByteInternal(MemorySessionImpl, Object, long):byte (34 bytes)   inline method (bytecode parsing)
                              @ 25  java.nio.DirectByteBuffer.get(int):byte (34 bytes)   relevance-based (relevance=1.049653, probability=21.139806, bonus=1.000000, nodes=23 <= 300.000000)
                                @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=20.143614, bonus=1.000000, nodes=9)
                            @ 3  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                                @ 12  java.lang.StringLatin1.charAt(byte[], int):char (15 bytes)   relevance-based (relevance=1.000000, probability=20.143614, bonus=1.000000, nodes=11 <= 300.000000)
                              @ 53  java.lang.String.charAt(int):char (25 bytes)   relevance-based (relevance=1.000189, probability=20.143614, bonus=1.000000, nodes=16 <= 300.000000)
                            @ 12  deltablue.AbstractConstraint.addConstraint(Planner):void (10 bytes)   inline method (bytecode parsing)
                                        @ 7  deltablue.Strength$Sym.customHash():int (5 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                                      @ 1  som.Dictionary.hash(Dictionary$CustomHash):int (20 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=12 <= 300.000000)
                            @ 5  deltablue.Variable.addConstraint(AbstractConstraint):void (9 bytes)   inline method (bytecode parsing)
                            @ 6  som.Dictionary.getBucketIdx(int):int (10 bytes)   inline method (bytecode parsing)
                            @ 13  deltablue.Variable.addConstraint(AbstractConstraint):void (9 bytes)   inline method (bytecode parsing)
                                      @ 7  som.Dictionary.getBucket(int):Dictionary$Entry (11 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                            @ 21  deltablue.Variable.addConstraint(AbstractConstraint):void (9 bytes)   inline method (bytecode parsing)
                            @ 29  deltablue.Variable.addConstraint(AbstractConstraint):void (9 bytes)   inline method (bytecode parsing)
                                      @ 18  som.IdentityDictionary$IdEntry.match(int, Object):boolean (22 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=13 <= 300.000000)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                    @ 4  som.Dictionary.at(Dictionary$CustomHash):Object (39 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=35 <= 300.000000)
                                  @ 6  deltablue.Strength.of(Strength$Sym):Strength (11 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=38 <= 300.000000)
                                @ 2  deltablue.AbstractConstraint.<init>(Strength$Sym):void (13 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=42 <= 300.000000)
                                @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000128, probability=0.000128, bonus=1.000000, nodes=41 > 0.038411)
                            @ 5  deltablue.Variable.addConstraint(AbstractConstraint):void (9 bytes)   inline method (bytecode parsing)
                              @ 5  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=35 <= 300.000000)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000128, probability=0.000128, bonus=1.000000, nodes=41 > 0.038411)
                                    @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000128, probability=0.000128, bonus=1.000000, nodes=41 > 0.038411)
                              @ 5  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000128, probability=1.000000, bonus=1.000000, nodes=35 <= 300.000000)
                                  @ 5  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=35 <= 300.000000)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                @ 1  deltablue.UnaryConstraint.addToGraph():void (14 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=47 <= 300.000000)
                                @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000128, probability=0.000128, bonus=1.000000, nodes=41 > 0.038411)
                              @ 5  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000128, probability=1.000000, bonus=1.000000, nodes=35 <= 300.000000)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                  @ 1  deltablue.Planner.newMark():int (15 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000128, probability=0.000128, bonus=1.000000, nodes=41 > 0.038411)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                              @ 5  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000128, probability=1.000000, bonus=1.000000, nodes=35 <= 300.000000)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f2ce003d750.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 8  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 713, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=72)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f2ce003d750.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 19  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 713, relevance=1.000000, probability=1.002830, bonus=1.000000, nodes=72)
                                @ 6  deltablue.Planner.incrementalAdd(AbstractConstraint):void (27 bytes)   relevance-based (relevance=1.000128, probability=1.000000, bonus=1.000000, nodes=28 <= 300.000000)
                              @ 4  deltablue.UnaryConstraint.<init>(Variable, Strength$Sym, Planner):void (16 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=119 <= 300.000000)
                            @ 24  deltablue.AbstractConstraint.addConstraint(Planner):void (10 bytes)   inline method (bytecode parsing)
                              @ 8  deltablue.BinaryConstraint.<init>(Variable, Variable, Strength$Sym, Planner):void (21 bytes)   not inlining too large previous low-level graph (low-level-nodes: 415, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=17)
                            @ 5  deltablue.Variable.addConstraint(AbstractConstraint):void (9 bytes)   inline method (bytecode parsing)
                            @ 13  deltablue.Variable.addConstraint(AbstractConstraint):void (9 bytes)   inline method (bytecode parsing)
                            @ 21  deltablue.Variable.addConstraint(AbstractConstraint):void (9 bytes)   inline method (bytecode parsing)
                            @ 29  deltablue.Variable.addConstraint(AbstractConstraint):void (9 bytes)   inline method (bytecode parsing)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                  @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000128, probability=0.000128, bonus=1.000000, nodes=41 > 0.038411)
                                @ 5  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=35 <= 300.000000)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                  @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000128, probability=0.000128, bonus=1.000000, nodes=41 > 0.038411)
                                @ 5  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000128, probability=1.000000, bonus=1.000000, nodes=35 <= 300.000000)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                  @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000128, probability=0.000128, bonus=1.000000, nodes=41 > 0.038411)
                                @ 5  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000128, probability=1.000000, bonus=1.000000, nodes=35 <= 300.000000)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                  @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000128, probability=0.000128, bonus=1.000000, nodes=41 > 0.038411)
                                @ 5  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000128, probability=1.000000, bonus=1.000000, nodes=35 <= 300.000000)
                              @ 1  deltablue.ScaleConstraint.addToGraph():void (38 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=164 <= 300.000000)
                                @ 1  deltablue.Planner.newMark():int (15 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f2ce003d750.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                @ 8  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 713, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=72)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f2ce003d750.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                @ 19  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 713, relevance=1.000000, probability=1.002830, bonus=1.000000, nodes=72)
                              @ 6  deltablue.Planner.incrementalAdd(AbstractConstraint):void (27 bytes)   relevance-based (relevance=1.000128, probability=1.000000, bonus=1.000000, nodes=28 <= 300.000000)
                              @ 2  org.graalvm.collections.EconomicMapImpl.getRawValue(int):Object (11 bytes)   relevance-based (relevance=1.054043, probability=1.000000, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 5  deltablue.Variable.addConstraint(AbstractConstraint):void (9 bytes)   inline method (bytecode parsing)
                            @ 13  deltablue.Variable.addConstraint(AbstractConstraint):void (9 bytes)   inline method (bytecode parsing)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000128, probability=0.000128, bonus=1.000000, nodes=41 > 0.038411)
                              @ 5  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=35 <= 300.000000)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000128, probability=0.000128, bonus=1.000000, nodes=41 > 0.038411)
                              @ 5  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000128, probability=1.000000, bonus=1.000000, nodes=35 <= 300.000000)
                            @ 4  jdk.graal.compiler.graph.Node.getNodeClass():NodeClass (5 bytes)   inline accessor method (bytecode parsing)
                                @ 40  jdk.graal.compiler.graph.Graph$1.hashCode(Object):int (15 bytes)   not inlining relevance-based (relevance=0.044069, probability=0.036861, bonus=1.000000, nodes=14 > 13.220799)
                 n              @ 48  java.lang.Object.hashCode():int (0 bytes)   trivial (relevance=1.151491, probability=0.963139, bonus=1.000000, nodes=5)
                                @ 61  org.graalvm.collections.EconomicMapImpl.getHashTableSize():int (43 bytes)   relevance-based (relevance=1.195561, probability=1.000000, bonus=1.000000, nodes=21 <= 300.000000)
                              @ 2  org.graalvm.collections.EconomicMapImpl.getHashIndex(Object):int (68 bytes)   relevance-based (relevance=1.069931, probability=1.000000, bonus=1.000000, nodes=76 <= 300.000000)
                              @ 10  org.graalvm.collections.EconomicMapImpl.getHashArray(int):int (126 bytes)   relevance-based (relevance=1.195561, probability=1.000000, bonus=1.000000, nodes=31 <= 300.000000)
                            @ 1  org.graalvm.collections.EconomicMapImpl.size():int (10 bytes)   inline method (bytecode parsing)
                            @ 84  org.graalvm.collections.EconomicMapImpl.getKey(int):Object (9 bytes)   inline method (bytecode parsing)
                 n            @ 9  java.lang.Object.hashCode():int (0 bytes)   not inlining no methods remaining after filtering less frequent methods (6 methods previously)
                              @ 28  org.graalvm.collections.EconomicMapImpl.createHash():void (109 bytes)   not inlining relevance-based (relevance=0.004721, probability=0.003949, bonus=1.000000, nodes=57 > 1.416345)
                              @ 23  java.util.HashMap.hash(Object):int (20 bytes)   relevance-based (relevance=2.024713, probability=0.929151, bonus=1.000000, nodes=12 <= 300.000000)
                              @ 38  org.graalvm.collections.EconomicMapImpl.setHashArray(int, int):void (112 bytes)   relevance-based (relevance=1.190840, probability=0.996051, bonus=1.000000, nodes=37 <= 300.000000)
                              @ 95  java.util.HashMap$TreeNode.getTreeNode(int, Object):HashMap$TreeNode (22 bytes)   not inlining relevance-based (relevance=0.002575, probability=0.001181, bonus=1.000000, nodes=23 > 0.772364)
                              @ 43  org.graalvm.collections.EconomicMapImpl.getRawValue(int):Object (11 bytes)   relevance-based (relevance=1.190840, probability=0.996051, bonus=1.000000, nodes=10 <= 300.000000)
                              @ 121  org.graalvm.collections.EconomicMapImpl.getRawValue(int):Object (11 bytes)   relevance-based (relevance=0.064995, probability=0.054364, bonus=1.000000, nodes=10 <= 19.498504)
                              @ 126  org.graalvm.collections.EconomicMapImpl$CollisionLink.<init>(Object, int):void (15 bytes)   relevance-based (relevance=0.064995, probability=0.054364, bonus=1.000000, nodes=11 <= 19.498504)
                              @ 129  org.graalvm.collections.EconomicMapImpl.setRawValue(int, Object):void (12 bytes)   relevance-based (relevance=0.064995, probability=0.054364, bonus=1.000000, nodes=12 <= 19.498504)
                              @ 104  org.graalvm.collections.EconomicMapImpl$CollisionLink.<init>(Object, int):void (15 bytes)   not inlining relevance-based (relevance=0.008436, probability=0.007056, bonus=1.000000, nodes=11 > 2.530858)
                              @ 107  org.graalvm.collections.EconomicMapImpl.setRawValue(int, Object):void (12 bytes)   not inlining relevance-based (relevance=0.008436, probability=0.007056, bonus=1.000000, nodes=12 > 2.530858)
                              @ 29  java.nio.file.attribute.BasicFileAttributes.lastModifiedTime():FileTime (0 bytes)   not inlining no type profile exists
                              @ 38  java.nio.file.attribute.BasicFileAttributes.lastModifiedTime():FileTime (0 bytes)   not inlining no type profile exists
                              @ 157  org.graalvm.collections.EconomicMapImpl.setRawValue(int, Object):void (12 bytes)   not inlining relevance-based (relevance=0.034457, probability=0.028821, bonus=1.000000, nodes=12 > 10.337177)
                                @ 43  java.nio.file.attribute.FileTime.equals(Object):boolean (28 bytes)   not inlining relevance-based (relevance=0.000281, probability=0.000007, bonus=1.000000, nodes=21 > 0.084418)
                              @ 55  java.nio.file.attribute.BasicFileAttributes.fileKey():Object (0 bytes)   not inlining no type profile exists
                              @ 70  java.nio.file.attribute.BasicFileAttributes.fileKey():Object (0 bytes)   not inlining no type profile exists
                              @ 75  java.lang.Object.equals(Object):boolean (11 bytes)   not inlining no type profile exists
                            @ 14  java.io.File.compareTo(File):int (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.io.UnixFileSystem.compare(File, File):int (12 bytes)   inline method (bytecode parsing)
                                @ 1  java.io.File.getPath():String (5 bytes)   inline accessor method (bytecode parsing)
                                @ 5  java.io.File.getPath():String (5 bytes)   inline accessor method (bytecode parsing)
                                @ 87  java.io.File.equals(Object):boolean (28 bytes)   not inlining relevance-based (relevance=0.000070, probability=0.000002, bonus=1.000000, nodes=23 > 0.021104)
                                @ 22  jdk.vm.ci.hotspot.HotSpotResolvedJavaMethodImpl.equals(Object):boolean (39 bytes)   not inlining relevance-based (relevance=0.085262, probability=0.002238, bonus=1.000000, nodes=28 > 25.578614)
                              @ 88  java.lang.Object.equals(Object):boolean (11 bytes)   not inlining no type profile exists
                              @ 63  java.lang.Long.equals(Object):boolean (30 bytes)   relevance-based (relevance=1.000000, probability=0.458905, bonus=1.000000, nodes=237 <= 300.000000)
                                @ 22  jdk.vm.ci.hotspot.HotSpotResolvedJavaMethodImpl.equals(Object):boolean (39 bytes)   not inlining relevance-based (relevance=0.000977, probability=0.000022, bonus=1.000000, nodes=28 > 0.293057)
                              @ 88  java.lang.Object.equals(Object):boolean (11 bytes)   not inlining no type profile exists
                              @ 128  java.lang.Long.equals(Object):boolean (30 bytes)   relevance-based (relevance=0.654982, probability=0.246933, bonus=1.000000, nodes=160 <= 196.494584)
                              @ 17  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=0.433644, probability=0.302174, bonus=1.000000, nodes=9)
                              @ 27  java.lang.StringLatin1.hashCode(byte[]):int (52 bytes)   relevance-based (relevance=0.433644, probability=0.302174, bonus=1.000000, nodes=22 <= 130.093244)
                            @ 1  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                            @ 5  java.lang.Long.longValue():long (5 bytes)   inline method (bytecode parsing)
                            @ 1  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                            @ 5  java.lang.Integer.intValue():int (5 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                              @ 36  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=8)
                                @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=9)
                            @ 3  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                                @ 12  java.lang.StringLatin1.charAt(byte[], int):char (15 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                              @ 50  java.lang.String.charAt(int):char (25 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=16 <= 300.000000)
                                @ 35  java.util.ArrayDeque.inc(int, int):int (12 bytes)   relevance-based (relevance=1.007374, probability=1.000000, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 55  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                @ 47  java.util.ArrayDeque.grow(int):void (165 bytes)   not inlining relevance-based (relevance=0.007374, probability=0.007320, bonus=1.000000, nodes=75 > 2.212261)
                              @ 2  java.util.ArrayDeque.addLast(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=31 <= 300.000000)
                                @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                              @ 36  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=8)
                            @ 5  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 20  deltablue.Variable.getWalkStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                              @ 23  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.999958, bonus=1.000000, nodes=13 <= 300.000000)
                            @ 8  deltablue.Variable.setWalkStrength(Strength):void (6 bytes)   inline method (bytecode parsing)
                            @ 27  deltablue.Variable.setStay(boolean):void (6 bytes)   inline method (bytecode parsing)
                            @ 34  deltablue.Variable.getStay():boolean (5 bytes)   inline accessor method (bytecode parsing)
                              @ 16  deltablue.AbstractConstraint.isInput():boolean (2 bytes)   trivial (relevance=1.000067, probability=1.000000, bonus=1.000000, nodes=8)
                              @ 41  deltablue.StayConstraint.execute():void (1 bytes)   trivial (relevance=1.000000, probability=0.999933, bonus=1.000000, nodes=3)
                            @ 8  deltablue.AbstractConstraint.lambda$satisfy$1(int, Variable):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                              @ 48  deltablue.AbstractConstraint$$Lambda/0x00007f2ce003d750.apply(Object):void (12 bytes)   not inlining relevance-based (relevance=0.000017, probability=0.000017, bonus=1.000000, nodes=13 > 0.005032)
                            @ 8  deltablue.AbstractConstraint.lambda$satisfy$1(int, Variable):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                              @ 58  deltablue.AbstractConstraint$$Lambda/0x00007f2ce003d750.apply(Object):void (12 bytes)   not inlining relevance-based (relevance=0.000017, probability=0.000017, bonus=1.000000, nodes=13 > 0.005032)
                            @ 8  deltablue.AbstractConstraint.lambda$satisfy$1(int, Variable):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                              @ 68  deltablue.AbstractConstraint$$Lambda/0x00007f2ce003d750.apply(Object):void (12 bytes)   not inlining relevance-based (relevance=0.000017, probability=0.000017, bonus=1.000000, nodes=13 > 0.005032)
                            @ 1  java.util.AbstractCollection.<init>():void (5 bytes)   inline method (bytecode parsing)
                            @ 8  deltablue.AbstractConstraint.lambda$satisfy$1(int, Variable):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                              @ 15  deltablue.AbstractConstraint$$Lambda/0x00007f2ce003d750.apply(Object):void (12 bytes)   relevance-based (relevance=1.000000, probability=0.999983, bonus=1.000000, nodes=13 <= 300.000000)
                            @ 8  deltablue.AbstractConstraint.lambda$satisfy$1(int, Variable):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                              @ 25  deltablue.AbstractConstraint$$Lambda/0x00007f2ce003d750.apply(Object):void (12 bytes)   relevance-based (relevance=1.000000, probability=0.999983, bonus=1.000000, nodes=13 <= 300.000000)
                            @ 8  deltablue.AbstractConstraint.lambda$satisfy$1(int, Variable):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                              @ 5  java.util.ArrayList$Itr.<init>(ArrayList):void (26 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=15 <= 300.000000)
                              @ 35  deltablue.AbstractConstraint$$Lambda/0x00007f2ce003d750.apply(Object):void (12 bytes)   relevance-based (relevance=1.000000, probability=0.999983, bonus=1.000000, nodes=13 <= 300.000000)
                              @ 1  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000010, probability=1.000000, bonus=1.000000, nodes=5)
                              @ 2  java.lang.CharacterDataLatin1.getProperties(int):int (11 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=8)
                                    @ 3  java.lang.Math.max(int, int):int (11 bytes)   trivial (relevance=0.169404, probability=0.144864, bonus=1.000000, nodes=7)
                                  @ 29  jdk.internal.util.ArraysSupport.newLength(int, int, int):int (27 bytes)   relevance-based (relevance=0.169404, probability=0.144864, bonus=1.000000, nodes=15 <= 50.821322)
                                @ 24  java.lang.AbstractStringBuilder.newCapacity(int):int (59 bytes)   relevance-based (relevance=0.169404, probability=0.144864, bonus=1.000000, nodes=27 <= 50.821322)
                                  @ 25  java.lang.Math.min(int, int):int (11 bytes)   trivial (relevance=0.169406, probability=0.144844, bonus=1.000000, nodes=7)
                            @ 49  java.lang.Math.max(int, int):int (11 bytes)   inline method (bytecode parsing)
                                @ 32  java.util.Arrays.copyOf(byte[], int):byte[] (33 bytes)   relevance-based (relevance=0.169404, probability=0.144864, bonus=1.000000, nodes=28 <= 50.821322)
                            @ 37  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                              @ 7  java.lang.AbstractStringBuilder.ensureCapacityInternal(int):void (39 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=72 <= 300.000000)
                              @ 11  java.lang.AbstractStringBuilder.isLatin1():boolean (19 bytes)   trivial (relevance=1.169403, probability=0.999999, bonus=1.000000, nodes=9)
                                @ 3  java.lang.Math.max(int, int):int (11 bytes)   trivial (relevance=0.258947, probability=0.205685, bonus=1.000000, nodes=7)
                              @ 18  java.lang.StringLatin1.canEncode(int):boolean (13 bytes)   trivial (relevance=1.169403, probability=0.999999, bonus=1.000000, nodes=8)
                              @ 27  jdk.internal.util.ArraysSupport.newLength(int, int, int):int (27 bytes)   relevance-based (relevance=0.258947, probability=0.205685, bonus=1.000000, nodes=15 <= 77.684000)
                                @ 14  java.lang.Class.getComponentType():Class (14 bytes)   trivial (relevance=0.058497, probability=0.037903, bonus=1.000000, nodes=7)
                                @ 32  java.lang.Math.min(int, int):int (11 bytes)   trivial (relevance=0.317444, probability=0.205685, bonus=1.000000, nodes=7)
                              @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   relevance-based (relevance=0.258947, probability=0.205685, bonus=1.000000, nodes=40 <= 77.684000)
                            @ 5  jdk.graal.compiler.replacements.arraycopy.ArrayCopySnippets.checkArrayTypes(Object, Object, ArrayCopySnippets$ArrayCopyTypeCheck):void (98 bytes)   inline method (bytecode parsing)
                            @ 20  jdk.graal.compiler.replacements.arraycopy.ArrayCopySnippets.checkLimits(Object, int, Object, int, int, JavaKind, ArrayCopySnippets$Counters):int[] (230 bytes)   inline method (bytecode parsing)
                              @ 21  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                              @ 37  jdk.graal.compiler.nodes.PiNode.piCastPositive(int, GuardingNode):int (9 bytes)   inline method (bytecode parsing)
                              @ 64  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                              @ 81  jdk.graal.compiler.nodes.PiNode.piCastPositive(int, GuardingNode):int (9 bytes)   inline method (bytecode parsing)
                              @ 108  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                              @ 125  jdk.graal.compiler.nodes.PiNode.piCastPositive(int, GuardingNode):int (9 bytes)   inline method (bytecode parsing)
                              @ 159  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                              @ 200  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                              @ 217  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                              @ 226  jdk.graal.compiler.replacements.arraycopy.ArrayCopySnippets.createCheckLimitsResult(int, int, int):int[] (18 bytes)   inline method (bytecode parsing)
                            @ 47  jdk.graal.compiler.replacements.arraycopy.ArrayCopySnippets.incrementLengthCounter(int, ArrayCopySnippets$Counters):void (16 bytes)   inline method (bytecode parsing)
                              @ 12  jdk.graal.compiler.replacements.SnippetIntegerHistogram.inc(long):void (215 bytes)   inline method (bytecode parsing)
                            @ 66  jdk.graal.compiler.replacements.arraycopy.ArrayCopyWithDelayedLoweringNode.arraycopy(Object, int, Object, int, int, ArrayCopySnippets$WorkSnippetID, GraphState$GuardsStage, JavaKind):void (17 bytes)   inline method (bytecode parsing)
                              @ 2  java.lang.AbstractStringBuilder.append(char):AbstractStringBuilder (77 bytes)   not inlining too large previous low-level graph (low-level-nodes: 332, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=31)
                            @ 15  jdk.graal.compiler.replacements.ReplacementsUtil.staticAssert(boolean, String):void (12 bytes)   inline method (bytecode parsing)
                            @ 58  jdk.graal.compiler.nodes.java.DynamicNewArrayNode.throwsIllegalArgumentException(Class, Class):boolean (11 bytes)   inline method (bytecode parsing)
                            @ 86  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.loadKlassFromObject(Object, int, LocationIdentity):KlassPointer (32 bytes)   inline method (bytecode parsing)
                              @ 18  jdk.graal.compiler.replacements.ReplacementsUtil.staticAssert(boolean, String):void (12 bytes)   inline method (bytecode parsing)
                            @ 117  jdk.graal.compiler.hotspot.replacements.ClassGetHubNode.piCastNonNull(KlassPointer, GuardingNode):KlassPointer (9 bytes)   inline method (bytecode parsing)
                            @ 249  jdk.graal.compiler.replacements.AllocationSnippets.allocateArrayImpl(Word, int, int, int, AllocationSnippets$FillContent, int, boolean, boolean, boolean, boolean, AllocationSnippets$AllocationProfilingData):Object (178 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getTLABInfo():Word (5 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getThread():Word (8 bytes)   inline method (bytecode parsing)
                                  @ 4  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.registerAsWord(Register):Word (7 bytes)   inline method (bytecode parsing)
                              @ 9  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.readTlabTop(Word):Word (5 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.readTlabTop(Word):Word (17 bytes)   inline method (bytecode parsing)
                              @ 17  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.readTlabEnd(Word):Word (5 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.readTlabEnd(Word):Word (17 bytes)   inline method (bytecode parsing)
                              @ 36  jdk.graal.compiler.replacements.ReplacementsUtil.dynamicAssert(boolean, String):void (12 bytes)   inline method (bytecode parsing)
                              @ 44  jdk.graal.compiler.replacements.AllocationSnippets.arrayAllocationSize(int, int, int):UnsignedWord (18 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.objectAlignment():int (7 bytes)   inline method (bytecode parsing)
                                @ 11  jdk.graal.compiler.replacements.AllocationSnippets.arrayAllocationSize(int, int, int, int):long (32 bytes)   inline method (bytecode parsing)
                              @ 59  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.useTLAB():boolean (7 bytes)   inline method (bytecode parsing)
                              @ 72  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.shouldAllocateInTLAB(UnsignedWord, boolean):boolean (33 bytes)   inline method (bytecode parsing)
                              @ 102  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.writeTlabTop(Word, Word):void (6 bytes)   inline method (bytecode parsing)
                                @ 2  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.writeTlabTop(Word, Word):void (15 bytes)   inline method (bytecode parsing)
                              @ 109  jdk.graal.compiler.replacements.AllocationSnippets.emitPrefetchAllocate(Word, boolean):void (61 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getPrefetchStyle():int (7 bytes)   inline method (bytecode parsing)
                                @ 9  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getPrefetchLines(boolean):int (18 bytes)   inline method (bytecode parsing)
                                @ 14  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getPrefetchStepSize():int (7 bytes)   inline method (bytecode parsing)
                                @ 20  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getPrefetchDistance():int (7 bytes)   inline method (bytecode parsing)
                              @ 10  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=8)
                              @ 136  jdk.graal.compiler.replacements.AllocationSnippets.formatArray(Word, UnsignedWord, int, Word, AllocationSnippets$FillContent, boolean, int, boolean, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):Object (53 bytes)   inline method (bytecode parsing)
                                @ 5  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.initializeObjectHeader(Word, Word, boolean):void (29 bytes)   inline method (bytecode parsing)
                                  @ 25  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.initializeObjectHeader(Word, Word, KlassPointer):void (20 bytes)   inline method (bytecode parsing)
                                @ 11  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.arrayLengthOffset():int (7 bytes)   inline method (bytecode parsing)
                                @ 15  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                                @ 38  jdk.graal.compiler.replacements.AllocationSnippets.fillContents(Word, AllocationSnippets$FillContent, int, UnsignedWord, boolean, boolean, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):void (58 bytes)   inline method (bytecode parsing)
                                  @ 22  jdk.graal.compiler.replacements.AllocationSnippets.zeroMemory(Word, int, UnsignedWord, boolean, boolean, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):void (19 bytes)   inline method (bytecode parsing)
                                    @ 15  jdk.graal.compiler.replacements.AllocationSnippets.fillMemory(long, Word, int, UnsignedWord, boolean, boolean, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):void (194 bytes)   inline method (bytecode parsing)
                                      @ 17  jdk.graal.compiler.replacements.ReplacementsUtil.dynamicAssert(boolean, String):void (12 bytes)   inline method (bytecode parsing)
                                    @ 3  java.lang.Math.max(int, int):int (11 bytes)   trivial (relevance=0.169404, probability=0.144864, bonus=1.000000, nodes=7)
                                      @ 56  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                                      @ 89  jdk.graal.compiler.replacements.ReplacementsUtil.dynamicAssert(boolean, String):void (12 bytes)   inline method (bytecode parsing)
                                  @ 29  jdk.internal.util.ArraysSupport.newLength(int, int, int):int (27 bytes)   relevance-based (relevance=0.169404, probability=0.144864, bonus=1.000000, nodes=15 <= 50.821322)
                                      @ 153  jdk.graal.compiler.replacements.ReplacementsUtil.staticAssert(boolean, String):void (12 bytes)   inline method (bytecode parsing)
                                      @ 167  jdk.graal.compiler.replacements.AllocationSnippets.fillMemoryAlignedUnrollable(long, Word, UnsignedWord, UnsignedWord, boolean, AllocationSnippets$AllocationSnippetCounters):void (68 bytes)   inline method (bytecode parsing)
                                @ 24  java.lang.AbstractStringBuilder.newCapacity(int):int (59 bytes)   relevance-based (relevance=0.169404, probability=0.144864, bonus=1.000000, nodes=27 <= 50.821322)
                                        @ 5  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                          @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                                        @ 44  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                                      @ 190  jdk.graal.compiler.replacements.AllocationSnippets.fillMemoryAligned(long, Word, UnsignedWord, UnsignedWord, boolean, UnsignedWord, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):void (155 bytes)   inline method (bytecode parsing)
                                        @ 17  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getMinimalBulkZeroingSize():int (7 bytes)   inline method (bytecode parsing)
                                        @ 36  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                          @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                                        @ 53  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                                        @ 105  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                          @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                                  @ 25  java.lang.Math.min(int, int):int (11 bytes)   trivial (relevance=0.169406, probability=0.144844, bonus=1.000000, nodes=7)
                                        @ 134  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                                @ 44  jdk.graal.compiler.replacements.AllocationSnippets.emitMemoryBarrierIf(boolean):void (14 bytes)   inline method (bytecode parsing)
                                @ 32  java.util.Arrays.copyOf(byte[], int):byte[] (33 bytes)   relevance-based (relevance=0.169404, probability=0.144864, bonus=1.000000, nodes=28 <= 50.821322)
                                  @ 7  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                              @ 152  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                              @ 158  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.callNewArrayStub(Word, int):Object (35 bytes)   inline method (bytecode parsing)
                              @ 21  java.lang.AbstractStringBuilder.ensureCapacityInternal(int):void (39 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=72 <= 300.000000)
                                @ 22  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.nonNullOrDeopt(Object):Object (27 bytes)   inline method (bytecode parsing)
                              @ 168  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.profileAllocation(AllocationSnippets$AllocationProfilingData, UnsignedWord):void (51 bytes)   inline method (bytecode parsing)
                              @ 174  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.verifyOop(Object):Object (5 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.verifyOop(Object):Object (19 bytes)   inline method (bytecode parsing)
                                  @ 11  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.999999, bonus=1.000000, nodes=5)
                                @ 2  java.lang.AbstractStringBuilder.inflateIfNeededFor(String):void (22 bytes)   relevance-based (relevance=1.000000, probability=0.999999, bonus=1.000000, nodes=12 <= 300.000000)
                                  @ 1  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000010, probability=0.999999, bonus=1.000000, nodes=5)
                                @ 15  java.lang.String.getBytes(byte[], int, byte):void (44 bytes)   relevance-based (relevance=1.000000, probability=0.999999, bonus=1.000000, nodes=26 <= 300.000000)
                              @ 30  java.lang.AbstractStringBuilder.putStringAt(int, String):void (19 bytes)   relevance-based (relevance=1.169403, probability=0.999999, bonus=1.000000, nodes=37 <= 300.000000)
                            @ 14  jdk.graal.compiler.hotspot.replacements.arraycopy.HotSpotArraycopySnippets.doCheckcastArraycopySnippet(Object, int, Object, int, int, JavaKind, LocationIdentity, ArrayCopySnippets$Counters):void (228 bytes)   inline method (bytecode parsing)
                              @ 23  jdk.graal.compiler.nodes.PiNode.piCastNonNull(Object, GuardingNode):Object (9 bytes)   inline method (bytecode parsing)
                              @ 32  jdk.graal.compiler.nodes.PiNode.piCastNonNull(Object, GuardingNode):Object (9 bytes)   inline method (bytecode parsing)
                              @ 39  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.loadHub(Object):KlassPointer (5 bytes)   inline method (bytecode parsing)
                              @ 46  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.loadHub(Object):KlassPointer (5 bytes)   inline method (bytecode parsing)
                              @ 131  jdk.graal.compiler.hotspot.replacements.arraycopy.HotSpotArraycopySnippets.getDestElemClass(KlassPointer):KlassPointer (14 bytes)   inline method (bytecode parsing)
                              @ 139  jdk.graal.compiler.hotspot.replacements.arraycopy.HotSpotArraycopySnippets.getSuperCheckOffset(KlassPointer):Word (20 bytes)   inline method (bytecode parsing)
                              @ 149  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                              @ 159  jdk.graal.compiler.replacements.SnippetCounter.add(int):void (13 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                 n            @ 224  java.lang.System.arraycopy(Object, int, Object, int, int):void (0 bytes)   not inlining native method (bytecode parsing)
                              @ 96  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                              @ 106  jdk.graal.compiler.replacements.SnippetCounter.add(int):void (13 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                              @ 119  jdk.graal.compiler.hotspot.replacements.arraycopy.HotSpotArraycopySnippets.heapWordSize():int (7 bytes)   inline method (bytecode parsing)
                              @ 122  jdk.graal.compiler.replacements.arraycopy.ArrayCopyCallNode.arraycopyObjectKillsAny(Object, int, Object, int, int, int):void (21 bytes)   inline method (bytecode parsing)
                                @ 9  org.graalvm.word.LocationIdentity.any():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                            @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.registerAsWord(Register):Word (7 bytes)   inline method (bytecode parsing)
                            @ 6  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.readExceptionOop(Word):Object (14 bytes)   inline method (bytecode parsing)
                            @ 12  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.writeExceptionOop(Word, Object):void (15 bytes)   inline method (bytecode parsing)
                            @ 22  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.writeExceptionPc(Word, Word):void (15 bytes)   inline method (bytecode parsing)
                              @ 4  jdk.internal.util.Preconditions.checkFromIndexSize(int, int, int, BiFunction):int (25 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=15 <= 300.000000)
                            @ 1  java.lang.AbstractStringBuilder.length():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 8  java.util.ArrayDeque.elementAt(Object[], int):Object (4 bytes)   inline method (bytecode parsing)
                            @ 1  java.util.AbstractList.<init>():void (10 bytes)   inline method (bytecode parsing)
                              @ 1  java.util.AbstractCollection.<init>():void (5 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                              @ 1  java.lang.String.length():int (11 bytes)   trivial (relevance=1.263685, probability=1.000000, bonus=1.000000, nodes=8)
                                @ 6  jdk.internal.util.Preconditions.checkFromToIndex(int, int, int, BiFunction):int (24 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=14 <= 300.000000)
                              @ 8  java.lang.String.checkBoundsBeginEnd(int, int, int):void (11 bytes)   relevance-based (relevance=1.263685, probability=1.000000, bonus=1.000000, nodes=13 <= 300.000000)
                              @ 28  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.226979, probability=0.970953, bonus=1.000000, nodes=9)
                            @ 20  java.lang.String.<init>(byte[], byte):void (15 bytes)   inline method (bytecode parsing)
                            @ 13  java.util.Arrays.copyOfRangeByte(byte[], int, int):byte[] (33 bytes)   inline method (bytecode parsing)
                              @ 2  java.util.Arrays.checkLength(int, int):void (38 bytes)   inline method (bytecode parsing)
                                  @ 24  java.lang.Math.min(int, int):int (11 bytes)   trivial (relevance=1.751659, probability=0.871191, bonus=1.000000, nodes=7)
                                @ 16  java.util.Arrays.copyOfRange(byte[], int, int):byte[] (25 bytes)   relevance-based (relevance=1.000000, probability=0.970924, bonus=1.000000, nodes=44 <= 300.000000)
                              @ 41  java.lang.StringLatin1.newString(byte[], int, int):String (24 bytes)   relevance-based (relevance=1.226979, probability=0.970953, bonus=1.000000, nodes=62 <= 300.000000)
                            @ 20  java.lang.String.<init>(byte[], byte):void (15 bytes)   inline method (bytecode parsing)
                            @ 13  java.util.Arrays.copyOfRangeByte(byte[], int, int):byte[] (33 bytes)   inline method (bytecode parsing)
                              @ 2  java.util.Arrays.checkLength(int, int):void (38 bytes)   inline method (bytecode parsing)
                                @ 24  java.lang.Math.min(int, int):int (11 bytes)   trivial (relevance=1.751182, probability=0.897269, bonus=1.000000, nodes=7)
                              @ 16  java.util.Arrays.copyOfRange(byte[], int, int):byte[] (25 bytes)   relevance-based (relevance=1.000000, probability=0.999970, bonus=1.000000, nodes=44 <= 300.000000)
                              @ 2  java.util.HashMap.getNode(Object):HashMap$Node (150 bytes)   not inlining too large previous low-level graph (low-level-nodes: 643, relevance=1.197937, probability=1.000000, bonus=1.000000, nodes=108)
                              @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=9)
                            @ 11  java.lang.Math.max(int, int):int (11 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                              @ 14  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=8)
                            @ 11  java.lang.Math.max(int, int):int (11 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.StringLatin1.canEncode(int):boolean (13 bytes)   trivial (relevance=1.002114, probability=1.000000, bonus=1.000000, nodes=8)
                              @ 1  java.lang.StringLatin1.canEncode(int):boolean (13 bytes)   trivial (relevance=1.002114, probability=1.000000, bonus=1.000000, nodes=8)
                              @ 18  java.lang.Math.min(int, int):int (11 bytes)   trivial (relevance=1.002114, probability=1.000000, bonus=1.000000, nodes=7)
                                @ 18  java.lang.Math.min(int, int):int (11 bytes)   trivial (relevance=1.002114, probability=1.000000, bonus=1.000000, nodes=7)
                              @ 17  java.lang.StringLatin1.indexOf(byte[], int, int, int):int (37 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=24 <= 300.000000)
                            @ 48  java.lang.Character.isWhitespace(char):boolean (5 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.Character.isWhitespace(int):boolean (9 bytes)   inline method (bytecode parsing)
                                  @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                                @ 36  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=8)
                                  @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=9)
                            @ 3  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                                  @ 12  java.lang.StringLatin1.charAt(byte[], int):char (15 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                                @ 50  java.lang.String.charAt(int):char (25 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=16 <= 300.000000)
                              @ 1  sun.reflect.generics.parser.SignatureParser.current():char (59 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=31 <= 300.000000)
                              @ 1  java.lang.CharacterData.of(int):CharacterData (136 bytes)   trivial (relevance=1.000000, probability=8.225914, bonus=1.000000, nodes=8)
                                @ 2  java.lang.CharacterDataLatin1.getProperties(int):int (11 bytes)   trivial (relevance=1.000000, probability=8.225914, bonus=1.000000, nodes=8)
                              @ 5  java.lang.CharacterDataLatin1.isWhitespace(int):boolean (23 bytes)   relevance-based (relevance=1.000000, probability=8.225914, bonus=1.000000, nodes=13 <= 300.000000)
                                  @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=8.225914, bonus=1.000000, nodes=5)
                              @ 2  java.lang.ref.Reference.refersToImpl(Object):boolean (6 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=12 <= 300.000000)
                                @ 36  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000000, probability=8.225914, bonus=1.000000, nodes=8)
                              @ 55  sun.reflect.generics.parser.SignatureParser.advance():void (53 bytes)   relevance-based (relevance=1.000000, probability=8.225914, bonus=1.000000, nodes=20 <= 300.000000)
                                  @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=8.225914, bonus=1.000000, nodes=5)
                                @ 36  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000000, probability=8.225914, bonus=1.000000, nodes=8)
                                  @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=8.225914, bonus=1.000000, nodes=9)
                            @ 3  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                                  @ 12  java.lang.StringLatin1.charAt(byte[], int):char (15 bytes)   relevance-based (relevance=1.000000, probability=8.225914, bonus=1.000000, nodes=11 <= 300.000000)
                                @ 50  java.lang.String.charAt(int):char (25 bytes)   relevance-based (relevance=1.000000, probability=8.225914, bonus=1.000000, nodes=16 <= 300.000000)
                            @ 36  java.lang.Long.<init>(long):void (10 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.Number.<init>():void (5 bytes)   inline method (bytecode parsing)
                              @ 59  sun.reflect.generics.parser.SignatureParser.current():char (59 bytes)   relevance-based (relevance=1.000000, probability=8.225914, bonus=1.000000, nodes=31 <= 300.000000)
                            @ 4  java.lang.Long.hashCode(long):int (8 bytes)   inline method (bytecode parsing)
                              @ 3  java.lang.Math.max(int, int):int (11 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=7)
                            @ 28  java.lang.Integer.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.Number.<init>():void (5 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                              @ 1  java.lang.String.length():int (11 bytes)   trivial (relevance=1.183223, probability=1.000000, bonus=1.000000, nodes=8)
                              @ 43  jdk.internal.org.objectweb.asm.ByteVector.enlarge(int):void (73 bytes)   relevance-based (relevance=0.183223, probability=0.154851, bonus=1.000000, nodes=28 <= 54.967046)
                                @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=26.628013, bonus=1.000000, nodes=9)
                            @ 3  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                                @ 12  java.lang.StringLatin1.charAt(byte[], int):char (15 bytes)   relevance-based (relevance=1.000000, probability=26.628013, bonus=1.000000, nodes=11 <= 300.000000)
                              @ 85  java.lang.String.charAt(int):char (25 bytes)   relevance-based (relevance=1.000000, probability=26.628013, bonus=1.000000, nodes=16 <= 300.000000)
                            @ 1  java.util.AbstractList.<init>():void (10 bytes)   inline method (bytecode parsing)
                              @ 1  java.util.AbstractCollection.<init>():void (5 bytes)   inline method (bytecode parsing)
                              @ 9  java.util.HashMap$Node.<init>(int, Object, Object, HashMap$Node):void (26 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=17 <= 300.000000)
                            @ 12  jdk.graal.compiler.replacements.gc.G1WriteBarrierSnippets.satbBarrier(AddressNode$Address, Object, Object, boolean, boolean, int, G1WriteBarrierSnippets$Counters):void (417 bytes)   inline method (bytecode parsing)
                              @ 10  jdk.graal.compiler.hotspot.replacements.HotSpotG1WriteBarrierSnippets.getThread():Word (8 bytes)   inline method (bytecode parsing)
                                @ 4  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.registerAsWord(Register):Word (7 bytes)   inline method (bytecode parsing)
                              @ 17  jdk.graal.compiler.replacements.gc.G1WriteBarrierSnippets.verifyOop(Object):void (17 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotG1WriteBarrierSnippets.verifyOops():boolean (7 bytes)   inline method (bytecode parsing)
                              @ 29  jdk.graal.compiler.hotspot.replacements.HotSpotG1WriteBarrierSnippets.satbQueueMarkingActiveOffset():int (7 bytes)   inline method (bytecode parsing)
                              @ 43  jdk.graal.compiler.replacements.gc.G1WriteBarrierSnippets.isTracingActive(int):boolean (30 bytes)   inline method (bytecode parsing)
                              @ 198  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                              @ 288  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                              @ 315  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                              @ 321  jdk.graal.compiler.hotspot.replacements.HotSpotG1WriteBarrierSnippets.satbQueueIndexOffset():int (7 bytes)   inline method (bytecode parsing)
                              @ 353  jdk.graal.compiler.hotspot.replacements.HotSpotG1WriteBarrierSnippets.satbQueueBufferOffset():int (7 bytes)   inline method (bytecode parsing)
                              @ 370  jdk.graal.compiler.hotspot.replacements.HotSpotG1WriteBarrierSnippets.wordSize():int (4 bytes)   inline method (bytecode parsing)
                              @ 396  jdk.graal.compiler.hotspot.replacements.HotSpotG1WriteBarrierSnippets.satbQueueIndexOffset():int (7 bytes)   inline method (bytecode parsing)
                              @ 413  jdk.graal.compiler.replacements.gc.G1WriteBarrierSnippets.g1PreBarrierStub(Object):void (9 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotG1WriteBarrierSnippets.preWriteBarrierCallDescriptor():ForeignCallDescriptor (4 bytes)   inline method (bytecode parsing)
                            @ 5  java.lang.AbstractStringBuilder.getValue():byte[] (5 bytes)   inline accessor method (bytecode parsing)
                            @ 1  java.lang.AbstractStringBuilder.length():int (5 bytes)   inline accessor method (bytecode parsing)
                              @ 10  java.lang.StringBuilder.length():int (5 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                              @ 16  java.lang.AbstractStringBuilder.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=9)
                            @ 13  java.util.Arrays.copyOfRangeByte(byte[], int, int):byte[] (33 bytes)   inline method (bytecode parsing)
                              @ 2  java.util.Arrays.checkLength(int, int):void (38 bytes)   inline method (bytecode parsing)
                                @ 24  java.lang.Math.min(int, int):int (11 bytes)   trivial (relevance=1.000010, probability=0.787789, bonus=1.000000, nodes=7)
                              @ 32  java.util.Arrays.copyOfRange(byte[], int, int):byte[] (25 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=33 <= 300.000000)
                            @ 20  java.lang.ClassValue$Entry.value():Object (9 bytes)   inline method (bytecode parsing)
                            @ 14  java.lang.ClassValue$ClassValueMap.getCache():ClassValue$Entry[] (5 bytes)   inline accessor method (bytecode parsing)
                              @ 1  java.lang.ClassValue.getCacheCarefully(Class):ClassValue$Entry[] (20 bytes)   relevance-based (relevance=1.006896, probability=1.000000, bonus=1.000000, nodes=14 <= 300.000000)
                            @ 6  java.lang.ClassValue$ClassValueMap.loadFromCache(ClassValue$Entry[], int):ClassValue$Entry (9 bytes)   inline method (bytecode parsing)
                            @ 9  java.lang.ClassValue.castEntry(ClassValue$Entry):ClassValue$Entry (2 bytes)   inline method (bytecode parsing)
                              @ 7  java.lang.ClassValue$ClassValueMap.probeHomeLocation(ClassValue$Entry[], ClassValue):ClassValue$Entry (13 bytes)   relevance-based (relevance=1.006602, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                            @ 5  java.lang.ref.Reference.get():Object (5 bytes)   inline accessor method (bytecode parsing)
                              @ 13  java.lang.ClassValue.match(ClassValue$Entry):boolean (21 bytes)   relevance-based (relevance=1.006602, probability=1.000000, bonus=1.000000, nodes=25 <= 300.000000)
                              @ 1  java.lang.ClassValue$Entry.assertNotPromise():void (22 bytes)   trivial (relevance=0.999686, probability=0.993129, bonus=1.000000, nodes=4)
                            @ 11  java.lang.ClassValue$Entry.value():Object (9 bytes)   inline method (bytecode parsing)
                              @ 27  java.lang.ClassValue.getFromBackup(ClassValue$Entry[], Class):Object (21 bytes)   not inlining relevance-based (relevance=0.006916, probability=0.006871, bonus=1.000000, nodes=24 > 2.074765)
                            @ 10  jdk.graal.compiler.replacements.gc.G1WriteBarrierSnippets.satbBarrier(AddressNode$Address, Object, Object, boolean, boolean, int, G1WriteBarrierSnippets$Counters):void (417 bytes)   inline method (bytecode parsing)
                              @ 10  jdk.graal.compiler.hotspot.replacements.HotSpotG1WriteBarrierSnippets.getThread():Word (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.util.ArrayList$Itr.hasNext():boolean (20 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=31 <= 300.000000)
                                @ 4  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.registerAsWord(Register):Word (7 bytes)   inline method (bytecode parsing)
                              @ 17  jdk.graal.compiler.replacements.gc.G1WriteBarrierSnippets.verifyOop(Object):void (17 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotG1WriteBarrierSnippets.verifyOops():boolean (7 bytes)   inline method (bytecode parsing)
                              @ 29  jdk.graal.compiler.hotspot.replacements.HotSpotG1WriteBarrierSnippets.satbQueueMarkingActiveOffset():int (7 bytes)   inline method (bytecode parsing)
                              @ 43  jdk.graal.compiler.replacements.gc.G1WriteBarrierSnippets.isTracingActive(int):boolean (30 bytes)   inline method (bytecode parsing)
                              @ 198  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                              @ 288  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                              @ 315  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                              @ 321  jdk.graal.compiler.hotspot.replacements.HotSpotG1WriteBarrierSnippets.satbQueueIndexOffset():int (7 bytes)   inline method (bytecode parsing)
                              @ 353  jdk.graal.compiler.hotspot.replacements.HotSpotG1WriteBarrierSnippets.satbQueueBufferOffset():int (7 bytes)   inline method (bytecode parsing)
                              @ 370  jdk.graal.compiler.hotspot.replacements.HotSpotG1WriteBarrierSnippets.wordSize():int (4 bytes)   inline method (bytecode parsing)
                              @ 396  jdk.graal.compiler.hotspot.replacements.HotSpotG1WriteBarrierSnippets.satbQueueIndexOffset():int (7 bytes)   inline method (bytecode parsing)
                              @ 413  jdk.graal.compiler.replacements.gc.G1WriteBarrierSnippets.g1PreBarrierStub(Object):void (9 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotG1WriteBarrierSnippets.preWriteBarrierCallDescriptor():ForeignCallDescriptor (4 bytes)   inline method (bytecode parsing)
                              @ 14  java.lang.Class.getComponentType():Class (14 bytes)   trivial (relevance=0.244839, probability=0.196683, bonus=1.000000, nodes=7)
                              @ 32  java.lang.Math.min(int, int):int (11 bytes)   trivial (relevance=1.244839, probability=1.000000, bonus=1.000000, nodes=7)
                                @ 1  java.util.HashMap$HashIterator.nextNode():HashMap$Node (100 bytes)   not inlining relevance-based (relevance=0.000037, probability=0.000029, bonus=1.000000, nodes=53 > 0.011126)
                                @ 1  java.util.ArrayList$Itr.checkForComodification():void (23 bytes)   trivial (relevance=1.000000, probability=0.794069, bonus=1.000000, nodes=9)
                              @ 4  java.util.ArrayList$Itr.next():Object (66 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=47 <= 300.000000)
                              @ 14  java.lang.Math.min(int, int):int (11 bytes)   trivial (relevance=1.621469, probability=1.000000, bonus=1.000000, nodes=7)
                                @ 17  java.lang.Math.max(int, int):int (11 bytes)   trivial (relevance=0.446681, probability=0.190421, bonus=1.000000, nodes=7)
                                  @ 25  java.lang.Math.min(int, int):int (11 bytes)   trivial (relevance=0.446685, probability=0.190421, bonus=1.000000, nodes=7)
                                @ 27  java.util.Arrays.copyOf(long[], int):long[] (33 bytes)   relevance-based (relevance=0.446681, probability=0.190421, bonus=1.000000, nodes=21 <= 134.004287)
                            @ 36  java.util.BitSet.wordIndex(int):int (5 bytes)   inline method (bytecode parsing)
                              @ 34  java.util.BitSet.ensureCapacity(int):void (39 bytes)   relevance-based (relevance=1.000000, probability=0.616725, bonus=1.000000, nodes=41 <= 300.000000)
                              @ 101  java.util.BitSet.checkInvariants():void (111 bytes)   trivial (relevance=2.345735, probability=0.999994, bonus=1.000000, nodes=4)
                              @ 32  java.util.BitSet.checkInvariants():void (111 bytes)   trivial (relevance=1.036229, probability=1.000000, bonus=1.000000, nodes=4)
                            @ 5  jdk.graal.compiler.replacements.arraycopy.ArrayCopySnippets.checkArrayTypes(Object, Object, ArrayCopySnippets$ArrayCopyTypeCheck):void (98 bytes)   inline method (bytecode parsing)
                            @ 20  jdk.graal.compiler.replacements.arraycopy.ArrayCopySnippets.checkLimits(Object, int, Object, int, int, JavaKind, ArrayCopySnippets$Counters):int[] (230 bytes)   inline method (bytecode parsing)
                              @ 21  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                              @ 37  jdk.graal.compiler.nodes.PiNode.piCastPositive(int, GuardingNode):int (9 bytes)   inline method (bytecode parsing)
                              @ 64  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                              @ 81  jdk.graal.compiler.nodes.PiNode.piCastPositive(int, GuardingNode):int (9 bytes)   inline method (bytecode parsing)
                              @ 108  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                              @ 125  jdk.graal.compiler.nodes.PiNode.piCastPositive(int, GuardingNode):int (9 bytes)   inline method (bytecode parsing)
                              @ 159  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                              @ 200  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                              @ 217  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                              @ 226  jdk.graal.compiler.replacements.arraycopy.ArrayCopySnippets.createCheckLimitsResult(int, int, int):int[] (18 bytes)   inline method (bytecode parsing)
                            @ 47  jdk.graal.compiler.replacements.arraycopy.ArrayCopySnippets.incrementLengthCounter(int, ArrayCopySnippets$Counters):void (16 bytes)   inline method (bytecode parsing)
                              @ 12  jdk.graal.compiler.replacements.SnippetIntegerHistogram.inc(long):void (215 bytes)   inline method (bytecode parsing)
                            @ 52  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                            @ 59  jdk.graal.compiler.replacements.SnippetCounter.add(int):void (13 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                            @ 77  jdk.graal.compiler.replacements.arraycopy.ArrayCopySnippets.doArraycopyExactStubCallSnippet(Object, int, Object, int, int, JavaKind, LocationIdentity, ArrayCopySnippets$Counters):void (19 bytes)   inline method (bytecode parsing)
                              @ 12  jdk.graal.compiler.hotspot.replacements.arraycopy.HotSpotArraycopySnippets.heapWordSize():int (7 bytes)   inline method (bytecode parsing)
                              @ 15  jdk.graal.compiler.replacements.arraycopy.ArrayCopyCallNode.arraycopy(Object, int, Object, int, int, JavaKind, LocationIdentity, int):void (19 bytes)   inline method (bytecode parsing)
                            @ 15  org.graalvm.collections.EconomicMapImpl.getKey(int):Object (9 bytes)   inline method (bytecode parsing)
                            @ 23  jdk.graal.compiler.replacements.AllocationSnippets.allocateArrayImpl(Word, int, int, int, AllocationSnippets$FillContent, int, boolean, boolean, boolean, boolean, AllocationSnippets$AllocationProfilingData):Object (178 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getTLABInfo():Word (5 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getThread():Word (8 bytes)   inline method (bytecode parsing)
                                  @ 4  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.registerAsWord(Register):Word (7 bytes)   inline method (bytecode parsing)
                              @ 9  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.readTlabTop(Word):Word (5 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.readTlabTop(Word):Word (17 bytes)   inline method (bytecode parsing)
                              @ 17  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.readTlabEnd(Word):Word (5 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.readTlabEnd(Word):Word (17 bytes)   inline method (bytecode parsing)
                              @ 36  jdk.graal.compiler.replacements.ReplacementsUtil.dynamicAssert(boolean, String):void (12 bytes)   inline method (bytecode parsing)
                              @ 44  jdk.graal.compiler.replacements.AllocationSnippets.arrayAllocationSize(int, int, int):UnsignedWord (18 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.objectAlignment():int (7 bytes)   inline method (bytecode parsing)
                                @ 11  jdk.graal.compiler.replacements.AllocationSnippets.arrayAllocationSize(int, int, int, int):long (32 bytes)   inline method (bytecode parsing)
                              @ 17  som.Vector.lambda$remove$0(Object, boolean[], Object[], int[], Object):void (28 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=26 <= 300.000000)
                              @ 59  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.useTLAB():boolean (7 bytes)   inline method (bytecode parsing)
                              @ 72  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.shouldAllocateInTLAB(UnsignedWord, boolean):boolean (33 bytes)   inline method (bytecode parsing)
                              @ 102  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.writeTlabTop(Word, Word):void (6 bytes)   inline method (bytecode parsing)
                                @ 2  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.writeTlabTop(Word, Word):void (15 bytes)   inline method (bytecode parsing)
                              @ 109  jdk.graal.compiler.replacements.AllocationSnippets.emitPrefetchAllocate(Word, boolean):void (61 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getPrefetchStyle():int (7 bytes)   inline method (bytecode parsing)
                                @ 9  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getPrefetchLines(boolean):int (18 bytes)   inline method (bytecode parsing)
                                @ 14  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getPrefetchStepSize():int (7 bytes)   inline method (bytecode parsing)
                                @ 20  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getPrefetchDistance():int (7 bytes)   inline method (bytecode parsing)
                              @ 136  jdk.graal.compiler.replacements.AllocationSnippets.formatArray(Word, UnsignedWord, int, Word, AllocationSnippets$FillContent, boolean, int, boolean, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):Object (53 bytes)   inline method (bytecode parsing)
                                @ 5  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.initializeObjectHeader(Word, Word, boolean):void (29 bytes)   inline method (bytecode parsing)
                                  @ 25  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.initializeObjectHeader(Word, Word, KlassPointer):void (20 bytes)   inline method (bytecode parsing)
                                @ 11  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.arrayLengthOffset():int (7 bytes)   inline method (bytecode parsing)
                                @ 15  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                                @ 38  jdk.graal.compiler.replacements.AllocationSnippets.fillContents(Word, AllocationSnippets$FillContent, int, UnsignedWord, boolean, boolean, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):void (58 bytes)   inline method (bytecode parsing)
                                  @ 22  jdk.graal.compiler.replacements.AllocationSnippets.zeroMemory(Word, int, UnsignedWord, boolean, boolean, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):void (19 bytes)   inline method (bytecode parsing)
                                    @ 15  jdk.graal.compiler.replacements.AllocationSnippets.fillMemory(long, Word, int, UnsignedWord, boolean, boolean, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):void (194 bytes)   inline method (bytecode parsing)
                                      @ 17  jdk.graal.compiler.replacements.ReplacementsUtil.dynamicAssert(boolean, String):void (12 bytes)   inline method (bytecode parsing)
                                      @ 56  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                                      @ 89  jdk.graal.compiler.replacements.ReplacementsUtil.dynamicAssert(boolean, String):void (12 bytes)   inline method (bytecode parsing)
                                      @ 153  jdk.graal.compiler.replacements.ReplacementsUtil.staticAssert(boolean, String):void (12 bytes)   inline method (bytecode parsing)
                                      @ 167  jdk.graal.compiler.replacements.AllocationSnippets.fillMemoryAlignedUnrollable(long, Word, UnsignedWord, UnsignedWord, boolean, AllocationSnippets$AllocationSnippetCounters):void (68 bytes)   inline method (bytecode parsing)
                                        @ 5  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                          @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                                        @ 44  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                                      @ 190  jdk.graal.compiler.replacements.AllocationSnippets.fillMemoryAligned(long, Word, UnsignedWord, UnsignedWord, boolean, UnsignedWord, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):void (155 bytes)   inline method (bytecode parsing)
                                        @ 17  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getMinimalBulkZeroingSize():int (7 bytes)   inline method (bytecode parsing)
                                        @ 36  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                          @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                                        @ 53  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                                        @ 105  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                          @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                                        @ 134  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                                @ 44  jdk.graal.compiler.replacements.AllocationSnippets.emitMemoryBarrierIf(boolean):void (14 bytes)   inline method (bytecode parsing)
                                  @ 7  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                              @ 152  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                              @ 158  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.callNewArrayStub(Word, int):Object (35 bytes)   inline method (bytecode parsing)
                                @ 22  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.nonNullOrDeopt(Object):Object (27 bytes)   inline method (bytecode parsing)
                              @ 168  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.profileAllocation(AllocationSnippets$AllocationProfilingData, UnsignedWord):void (51 bytes)   inline method (bytecode parsing)
                              @ 174  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.verifyOop(Object):Object (5 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.verifyOop(Object):Object (19 bytes)   inline method (bytecode parsing)
                            @ 12  java.util.ArrayDeque.elementAt(Object[], int):Object (4 bytes)   inline method (bytecode parsing)
                                  @ 28  java.util.ArrayDeque.inc(int, int):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.999620, bonus=1.000000, nodes=10 <= 300.000000)
                              @ 35  java.util.ArrayDeque.inc(int, int):int (12 bytes)   relevance-based (relevance=1.007374, probability=1.000000, bonus=1.000000, nodes=10 <= 300.000000)
                                @ 1  java.util.ArrayDeque.pollFirst():Object (36 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=26 <= 300.000000)
                            @ 55  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                              @ 1  java.util.ArrayDeque.removeFirst():Object (19 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=28 <= 300.000000)
                              @ 47  java.util.ArrayDeque.grow(int):void (165 bytes)   not inlining relevance-based (relevance=0.007374, probability=0.007320, bonus=1.000000, nodes=75 > 2.212261)
                              @ 28  java.util.ArrayDeque.nonNullElementAt(Object[], int):Object (18 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=8)
                              @ 44  java.util.ArrayDeque.inc(int, int):int (12 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 36  java.util.BitSet.wordIndex(int):int (5 bytes)   inline method (bytecode parsing)
                              @ 32  java.util.BitSet.checkInvariants():void (111 bytes)   trivial (relevance=1.235250, probability=1.000000, bonus=1.000000, nodes=4)
                            @ 9  java.nio.HeapByteBuffer.ix(int):int (7 bytes)   inline method (bytecode parsing)
                            @ 12  java.util.ArrayDeque.elementAt(Object[], int):Object (4 bytes)   inline method (bytecode parsing)
                              @ 6  java.nio.Buffer.nextPutIndex():int (30 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=12 <= 300.000000)
                                @ 28  java.util.ArrayDeque.inc(int, int):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.999620, bonus=1.000000, nodes=10 <= 300.000000)
                              @ 1  java.util.ArrayDeque.pollFirst():Object (36 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=26 <= 300.000000)
                            @ 32  java.util.BitSet.wordIndex(int):int (5 bytes)   inline method (bytecode parsing)
                            @ 5  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                                  @ 17  java.lang.Math.max(int, int):int (11 bytes)   trivial (relevance=0.063271, probability=0.038309, bonus=1.000000, nodes=7)
                                  @ 27  java.util.Arrays.copyOf(long[], int):long[] (33 bytes)   not inlining relevance-based (relevance=0.063271, probability=0.038309, bonus=1.000000, nodes=22 > 18.981308)
                              @ 9  java.lang.AbstractStringBuilder.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=9)
                                @ 14  java.util.BitSet.ensureCapacity(int):void (39 bytes)   relevance-based (relevance=0.141647, probability=0.124073, bonus=1.000000, nodes=28 <= 42.494105)
                              @ 38  java.util.BitSet.expandTo(int):void (23 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=41 <= 300.000000)
                              @ 54  java.util.BitSet.checkInvariants():void (111 bytes)   trivial (relevance=1.141647, probability=1.000000, bonus=1.000000, nodes=4)
                            @ 5  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                                @ 9  java.lang.AbstractStringBuilder.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=9)
                              @ 2  java.lang.AbstractStringBuilder.charAt(int):char (36 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=19 <= 300.000000)
                              @ 3  java.lang.AbstractStringBuilder.<init>(int):void (39 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                            @ 20  java.util.concurrent.ConcurrentHashMap.spread(int):int (10 bytes)   inline method (bytecode parsing)
                            @ 83  java.util.concurrent.ConcurrentHashMap$ReservationNode.<init>():void (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.util.concurrent.ConcurrentHashMap$Node.<init>(int, Object, Object):void (20 bytes)   inline method (bytecode parsing)
                            @ 23  jdk.graal.compiler.replacements.AllocationSnippets.allocateArrayImpl(Word, int, int, int, AllocationSnippets$FillContent, int, boolean, boolean, boolean, boolean, AllocationSnippets$AllocationProfilingData):Object (178 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getTLABInfo():Word (5 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getThread():Word (8 bytes)   inline method (bytecode parsing)
                                  @ 4  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.registerAsWord(Register):Word (7 bytes)   inline method (bytecode parsing)
                              @ 9  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.readTlabTop(Word):Word (5 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.readTlabTop(Word):Word (17 bytes)   inline method (bytecode parsing)
                              @ 17  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.readTlabEnd(Word):Word (5 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.readTlabEnd(Word):Word (17 bytes)   inline method (bytecode parsing)
                              @ 36  jdk.graal.compiler.replacements.ReplacementsUtil.dynamicAssert(boolean, String):void (12 bytes)   inline method (bytecode parsing)
                              @ 44  jdk.graal.compiler.replacements.AllocationSnippets.arrayAllocationSize(int, int, int):UnsignedWord (18 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.objectAlignment():int (7 bytes)   inline method (bytecode parsing)
                                @ 11  jdk.graal.compiler.replacements.AllocationSnippets.arrayAllocationSize(int, int, int, int):long (32 bytes)   inline method (bytecode parsing)
                              @ 59  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.useTLAB():boolean (7 bytes)   inline method (bytecode parsing)
                              @ 72  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.shouldAllocateInTLAB(UnsignedWord, boolean):boolean (33 bytes)   inline method (bytecode parsing)
                              @ 102  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.writeTlabTop(Word, Word):void (6 bytes)   inline method (bytecode parsing)
                                @ 2  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.writeTlabTop(Word, Word):void (15 bytes)   inline method (bytecode parsing)
                              @ 109  jdk.graal.compiler.replacements.AllocationSnippets.emitPrefetchAllocate(Word, boolean):void (61 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getPrefetchStyle():int (7 bytes)   inline method (bytecode parsing)
                                @ 9  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getPrefetchLines(boolean):int (18 bytes)   inline method (bytecode parsing)
                                @ 14  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getPrefetchStepSize():int (7 bytes)   inline method (bytecode parsing)
                            @ 4  java.security.CodeSource.getLocationNoFragString():String (5 bytes)   inline accessor method (bytecode parsing)
                                @ 20  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getPrefetchDistance():int (7 bytes)   inline method (bytecode parsing)
                              @ 136  jdk.graal.compiler.replacements.AllocationSnippets.formatArray(Word, UnsignedWord, int, Word, AllocationSnippets$FillContent, boolean, int, boolean, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):Object (53 bytes)   inline method (bytecode parsing)
                                @ 5  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.initializeObjectHeader(Word, Word, boolean):void (29 bytes)   inline method (bytecode parsing)
                                  @ 25  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.initializeObjectHeader(Word, Word, KlassPointer):void (20 bytes)   inline method (bytecode parsing)
                                @ 11  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.arrayLengthOffset():int (7 bytes)   inline method (bytecode parsing)
                                @ 15  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                                @ 38  jdk.graal.compiler.replacements.AllocationSnippets.fillContents(Word, AllocationSnippets$FillContent, int, UnsignedWord, boolean, boolean, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):void (58 bytes)   inline method (bytecode parsing)
                                  @ 22  jdk.graal.compiler.replacements.AllocationSnippets.zeroMemory(Word, int, UnsignedWord, boolean, boolean, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):void (19 bytes)   inline method (bytecode parsing)
                                    @ 15  jdk.graal.compiler.replacements.AllocationSnippets.fillMemory(long, Word, int, UnsignedWord, boolean, boolean, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):void (194 bytes)   inline method (bytecode parsing)
                                  @ 17  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=0.050794, probability=0.031616, bonus=1.000000, nodes=9)
                                      @ 17  jdk.graal.compiler.replacements.ReplacementsUtil.dynamicAssert(boolean, String):void (12 bytes)   inline method (bytecode parsing)
                                      @ 56  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                                  @ 27  java.lang.StringLatin1.hashCode(byte[]):int (52 bytes)   not inlining relevance-based (relevance=0.050794, probability=0.031616, bonus=1.000000, nodes=22 > 15.238228)
                                      @ 89  jdk.graal.compiler.replacements.ReplacementsUtil.dynamicAssert(boolean, String):void (12 bytes)   inline method (bytecode parsing)
                                @ 13  java.lang.String.hashCode():int (60 bytes)   relevance-based (relevance=0.116663, probability=0.104331, bonus=1.000000, nodes=32 <= 34.998990)
                                      @ 153  jdk.graal.compiler.replacements.ReplacementsUtil.staticAssert(boolean, String):void (12 bytes)   inline method (bytecode parsing)
                                      @ 167  jdk.graal.compiler.replacements.AllocationSnippets.fillMemoryAlignedUnrollable(long, Word, UnsignedWord, UnsignedWord, boolean, AllocationSnippets$AllocationSnippetCounters):void (68 bytes)   inline method (bytecode parsing)
                                        @ 5  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                @ 17  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=0.435390, probability=0.270998, bonus=1.000000, nodes=9)
                                          @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                                        @ 44  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                                      @ 190  jdk.graal.compiler.replacements.AllocationSnippets.fillMemoryAligned(long, Word, UnsignedWord, UnsignedWord, boolean, UnsignedWord, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):void (155 bytes)   inline method (bytecode parsing)
                                @ 27  java.lang.StringLatin1.hashCode(byte[]):int (52 bytes)   relevance-based (relevance=0.435390, probability=0.270998, bonus=1.000000, nodes=22 <= 130.617149)
                                        @ 17  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getMinimalBulkZeroingSize():int (7 bytes)   inline method (bytecode parsing)
                                        @ 36  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                          @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                              @ 17  java.lang.String.hashCode():int (60 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=99 <= 300.000000)
                                        @ 53  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                                        @ 105  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                          @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                                        @ 134  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                                @ 44  jdk.graal.compiler.replacements.AllocationSnippets.emitMemoryBarrierIf(boolean):void (14 bytes)   inline method (bytecode parsing)
                              @ 152  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                              @ 158  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.callNewArrayStub(Word, int):Object (35 bytes)   inline method (bytecode parsing)
                              @ 70  java.util.concurrent.ConcurrentHashMap.tabAt(ConcurrentHashMap$Node[], int):ConcurrentHashMap$Node (22 bytes)   relevance-based (relevance=1.184813, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                                @ 22  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.nonNullOrDeopt(Object):Object (27 bytes)   inline method (bytecode parsing)
                              @ 168  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.profileAllocation(AllocationSnippets$AllocationProfilingData, UnsignedWord):void (51 bytes)   inline method (bytecode parsing)
                              @ 174  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.verifyOop(Object):Object (5 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.verifyOop(Object):Object (19 bytes)   inline method (bytecode parsing)
                            @ 23  java.security.CodeSource.getLocationNoFragString():String (5 bytes)   inline accessor method (bytecode parsing)
                            @ 30  java.security.CodeSource.getLocationNoFragString():String (5 bytes)   inline accessor method (bytecode parsing)
                            @ 13  java.lang.WeakPairMap$Pair$Weak.first():Object (5 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.ref.Reference.get():Object (5 bytes)   inline accessor method (bytecode parsing)
                            @ 17  java.lang.WeakPairMap$Pair$Weak.second():Object (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.lang.ref.Reference.get():Object (5 bytes)   inline accessor method (bytecode parsing)
                                @ 24  java.lang.WeakPairMap$Pair.equals(Object, Object, WeakPairMap$Pair):boolean (34 bytes)   not inlining relevance-based (relevance=0.000781, probability=0.000144, bonus=1.000000, nodes=29 > 0.234305)
                                  @ 11  java.lang.String.equals(Object):boolean (56 bytes)   not inlining relevance-based (relevance=0.035006, probability=0.020579, bonus=1.000000, nodes=50 > 10.501923)
                                @ 33  java.util.Objects.equals(Object, Object):boolean (23 bytes)   relevance-based (relevance=0.140827, probability=0.104117, bonus=1.000000, nodes=24 <= 42.248109)
                                @ 48  java.security.CodeSource.matchCerts(CodeSource, boolean):boolean (254 bytes)   relevance-based (relevance=0.177107, probability=0.104117, bonus=1.000000, nodes=18 <= 53.132089)
                              @ 241  java.lang.String.equals(Object):boolean (56 bytes)   relevance-based (relevance=1.000043, probability=0.844051, bonus=1.000000, nodes=146 <= 300.000000)
                              @ 101  java.util.concurrent.ConcurrentHashMap.casTabAt(ConcurrentHashMap$Node[], int, ConcurrentHashMap$Node, ConcurrentHashMap$Node):boolean (21 bytes)   not inlining relevance-based (relevance=0.002773, probability=0.001950, bonus=1.000000, nodes=14 > 0.831864)
                            @ 5  jdk.internal.loader.NativeLibraries$NativeLibraryContext$1.apply(Thread):Deque (10 bytes)   inline method (bytecode parsing)
                              @ 115  jdk.vm.ci.hotspot.JFR$CompilerPhaseEvent$$Lambda/0x00007f2ce0162838.apply(Object):Object (12 bytes)   not inlining relevance-based (relevance=0.002773, probability=0.001950, bonus=1.000000, nodes=52 > 0.831864)
                              @ 134  java.util.concurrent.ConcurrentHashMap$Node.<init>(int, Object, Object):void (20 bytes)   not inlining relevance-based (relevance=0.002773, probability=0.001950, bonus=1.000000, nodes=14 > 0.831864)
                              @ 145  java.util.concurrent.ConcurrentHashMap.setTabAt(ConcurrentHashMap$Node[], int, ConcurrentHashMap$Node):void (20 bytes)   not inlining relevance-based (relevance=0.002773, probability=0.001950, bonus=1.000000, nodes=13 > 0.831864)
                            @ 5  java.lang.String.<init>(StringBuilder):void (7 bytes)   inline method (bytecode parsing)
                              @ 51  java.util.concurrent.ConcurrentHashMap.initTable():ConcurrentHashMap$Node[] (112 bytes)   not inlining relevance-based (relevance=0.000051, probability=0.000036, bonus=1.000000, nodes=87 > 0.015408)
                            @ 5  java.lang.AbstractStringBuilder.getValue():byte[] (5 bytes)   inline accessor method (bytecode parsing)
                              @ 274  java.util.concurrent.ConcurrentHashMap.tabAt(ConcurrentHashMap$Node[], int):ConcurrentHashMap$Node (22 bytes)   relevance-based (relevance=0.196026, probability=0.137830, bonus=1.000000, nodes=11 <= 58.807874)
                            @ 1  java.lang.AbstractStringBuilder.length():int (5 bytes)   inline accessor method (bytecode parsing)
                                @ 10  java.lang.StringBuilder.length():int (5 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                            @ 13  java.lang.WeakPairMap$Pair$Weak.first():Object (5 bytes)   inline method (bytecode parsing)
                                @ 16  java.lang.AbstractStringBuilder.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=9)
                              @ 1  java.lang.ref.Reference.get():Object (5 bytes)   inline accessor method (bytecode parsing)
                            @ 17  java.lang.WeakPairMap$Pair$Weak.second():Object (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.lang.ref.Reference.get():Object (5 bytes)   inline accessor method (bytecode parsing)
                            @ 13  java.util.Arrays.copyOfRangeByte(byte[], int, int):byte[] (33 bytes)   inline method (bytecode parsing)
                              @ 2  java.util.Arrays.checkLength(int, int):void (38 bytes)   inline method (bytecode parsing)
                              @ 323  java.lang.String.equals(Object):boolean (56 bytes)   not inlining relevance-based (relevance=0.173526, probability=0.136386, bonus=1.000000, nodes=85 > 52.057849)
                                  @ 24  java.lang.Math.min(int, int):int (11 bytes)   trivial (relevance=1.000010, probability=0.787790, bonus=1.000000, nodes=7)
                              @ 356  jdk.vm.ci.hotspot.JFR$CompilerPhaseEvent$$Lambda/0x00007f2ce0162838.apply(Object):Object (12 bytes)   not inlining relevance-based (relevance=0.002104, probability=0.001480, bonus=1.000000, nodes=28 > 0.631349)
                                @ 32  java.util.Arrays.copyOfRange(byte[], int, int):byte[] (25 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=33 <= 300.000000)
                              @ 398  java.util.concurrent.ConcurrentHashMap$Node.<init>(int, Object, Object):void (20 bytes)   not inlining relevance-based (relevance=0.002104, probability=0.001480, bonus=1.000000, nodes=14 > 0.631349)
                              @ 3  java.lang.String.<init>(AbstractStringBuilder, Void):void (99 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=48 <= 300.000000)
                            @ 161  java.util.concurrent.ConcurrentHashMap.resizeStamp(int):int (9 bytes)   inline method (bytecode parsing)
                              @ 570  java.util.concurrent.ConcurrentHashMap.addCount(long, int):void (280 bytes)   not inlining relevance-based (relevance=0.005509, probability=0.003429, bonus=1.000000, nodes=77 > 1.652728)
                            @ 34  java.lang.ref.Reference.refersTo(Object):boolean (6 bytes)   inline method (bytecode parsing)
                              @ 2  java.lang.ref.Reference.refersToImpl(Object):boolean (6 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=12 <= 300.000000)
                            @ 23  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                            @ 37  jdk.graal.compiler.nodes.PiNode.piCastNonNull(Object, GuardingNode):Object (9 bytes)   inline method (bytecode parsing)
                            @ 91  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                            @ 118  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                            @ 126  jdk.graal.compiler.hotspot.replacements.TypeCheckSnippetUtils.checkSecondarySubType(KlassPointer, KlassPointer, TypeCheckSnippetUtils$Counters):boolean (36 bytes)   inline method (bytecode parsing)
                              @ 24  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                              @ 32  jdk.graal.compiler.hotspot.replacements.TypeCheckSnippetUtils.checkSelfAndSupers(KlassPointer, KlassPointer, TypeCheckSnippetUtils$Counters):boolean (113 bytes)   inline method (bytecode parsing)
                                @ 12  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                  @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                                @ 63  jdk.graal.compiler.hotspot.replacements.TypeCheckSnippetUtils.loadSecondarySupersElement(Word, int):KlassPointer (26 bytes)   inline method (bytecode parsing)
                                @ 93  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                  @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                                @ 108  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                  @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                              @ 13  java.util.ArrayDeque.sub(int, int, int):int (14 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=18 <= 300.000000)
                              @ 17  java.lang.Math.max(int, int):int (11 bytes)   trivial (relevance=0.446667, probability=0.308756, bonus=1.000000, nodes=7)
                                @ 25  java.lang.Math.min(int, int):int (11 bytes)   trivial (relevance=0.446672, probability=0.308756, bonus=1.000000, nodes=7)
                              @ 27  java.util.Arrays.copyOf(long[], int):long[] (33 bytes)   relevance-based (relevance=0.446667, probability=0.308756, bonus=1.000000, nodes=21 <= 134.000124)
                            @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.verifyOop(Object):Object (19 bytes)   inline method (bytecode parsing)
                            @ 12  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.loadWordFromObject(Object, int):Word (34 bytes)   inline method (bytecode parsing)
                              @ 18  jdk.graal.compiler.replacements.ReplacementsUtil.staticAssert(boolean, String):void (12 bytes)   inline method (bytecode parsing)
                              @ 24  org.graalvm.word.LocationIdentity.any():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                            @ 24  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.registerAsWord(Register):Word (7 bytes)   inline method (bytecode parsing)
                            @ 37  jdk.graal.compiler.hotspot.replacements.MonitorSnippets.trace(boolean, String, WordBase):void (15 bytes)   inline method (bytecode parsing)
                            @ 46  jdk.graal.compiler.hotspot.replacements.MonitorSnippets.trace(boolean, String, WordBase):void (15 bytes)   inline method (bytecode parsing)
                            @ 55  jdk.graal.compiler.hotspot.replacements.MonitorSnippets.trace(boolean, String, WordBase):void (15 bytes)   inline method (bytecode parsing)
                            @ 58  jdk.graal.compiler.hotspot.replacements.MonitorSnippets.incCounter():void (34 bytes)   inline method (bytecode parsing)
                            @ 122  jdk.graal.compiler.hotspot.replacements.MonitorSnippets.tryFastPathLocking(Object, Register, boolean, MonitorSnippets$Counters, Word, Word, Word):boolean (48 bytes)   inline method (bytecode parsing)
                              @ 42  jdk.graal.compiler.hotspot.replacements.MonitorSnippets.tryStackLocking(Object, Word, Word, Word, boolean, MonitorSnippets$Counters, Register):boolean (270 bytes)   inline method (bytecode parsing)
                                @ 47  jdk.graal.compiler.hotspot.replacements.MonitorSnippets.tryEnterInflated(Object, Word, Word, boolean, MonitorSnippets$Counters):boolean (199 bytes)   inline method (bytecode parsing)
                            @ 4  java.util.Objects.checkFromIndexSize(int, int, int):int (8 bytes)   inline method (bytecode parsing)
                                  @ 77  jdk.graal.compiler.hotspot.replacements.MonitorSnippets.traceObject(boolean, String, Object, boolean):void (46 bytes)   inline method (bytecode parsing)
                                  @ 85  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                    @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                                  @ 95  jdk.graal.compiler.hotspot.replacements.MonitorSnippets.traceObject(boolean, String, Object, boolean):void (46 bytes)   inline method (bytecode parsing)
                                  @ 103  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                    @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                              @ 4  jdk.internal.util.Preconditions.checkFromIndexSize(int, int, int, BiFunction):int (25 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=15 <= 300.000000)
                                  @ 168  jdk.graal.compiler.hotspot.replacements.MonitorSnippets.traceObject(boolean, String, Object, boolean):void (46 bytes)   inline method (bytecode parsing)
                                  @ 176  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                    @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                                  @ 186  jdk.graal.compiler.hotspot.replacements.MonitorSnippets.traceObject(boolean, String, Object, boolean):void (46 bytes)   inline method (bytecode parsing)
                                  @ 194  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                            @ 4  java.util.Objects.checkFromIndexSize(int, int, int):int (8 bytes)   inline method (bytecode parsing)
                                    @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                                @ 75  jdk.graal.compiler.hotspot.replacements.MonitorSnippets.trace(boolean, String, WordBase):void (15 bytes)   inline method (bytecode parsing)
                            @ 11  jdk.internal.misc.InternalLock.lock():void (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.util.concurrent.locks.ReentrantLock.lock():void (8 bytes)   inline method (bytecode parsing)
                                @ 139  jdk.graal.compiler.hotspot.replacements.MonitorSnippets.traceObject(boolean, String, Object, boolean):void (46 bytes)   inline method (bytecode parsing)
                            @ 27  jdk.internal.misc.InternalLock.unlock():void (8 bytes)   inline method (bytecode parsing)
                                @ 147  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                              @ 4  java.util.concurrent.locks.ReentrantLock.unlock():void (10 bytes)   inline method (bytecode parsing)
                                  @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                                @ 5  java.util.concurrent.locks.AbstractQueuedSynchronizer.release(int):boolean (19 bytes)   inline method (bytecode parsing)
                                @ 158  jdk.graal.compiler.hotspot.replacements.MonitorSnippets.trace(boolean, String, WordBase):void (15 bytes)   inline method (bytecode parsing)
                                @ 176  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.registerAsWord(Register):Word (7 bytes)   inline method (bytecode parsing)
                            @ 9  java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(int):void (20 bytes)   inline method (bytecode parsing)
                                @ 237  jdk.graal.compiler.hotspot.replacements.MonitorSnippets.traceObject(boolean, String, Object, boolean):void (46 bytes)   inline method (bytecode parsing)
                                @ 245  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                  @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                                @ 257  jdk.graal.compiler.hotspot.replacements.MonitorSnippets.traceObject(boolean, String, Object, boolean):void (46 bytes)   inline method (bytecode parsing)
                                @ 265  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                  @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                            @ 130  jdk.graal.compiler.hotspot.replacements.MonitorSnippets.incrementHeldMonitorCount(Word):void (6 bytes)   inline method (bytecode parsing)
                            @ 7  java.util.concurrent.locks.AbstractQueuedSynchronizer.compareAndSetState(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                              @ 2  jdk.graal.compiler.hotspot.replacements.MonitorSnippets.updateHeldMonitorCount(Word, int):void (36 bytes)   inline method (bytecode parsing)
                            @ 15  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                            @ 21  java.util.concurrent.locks.AbstractOwnableSynchronizer.getExclusiveOwnerThread():Thread (5 bytes)   inline accessor method (bytecode parsing)
                            @ 29  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 51  java.util.concurrent.locks.AbstractQueuedSynchronizer.setState(int):void (6 bytes)   inline method (bytecode parsing)
                                  @ 1  java.util.concurrent.locks.ReentrantLock$NonfairSync.initialTryLock():boolean (58 bytes)   relevance-based (relevance=0.179789, probability=0.139091, bonus=1.000000, nodes=40 <= 53.936591)
                                @ 4  java.util.concurrent.locks.ReentrantLock$Sync.lock():void (13 bytes)   not inlining relevance-based (relevance=0.179061, probability=0.139091, bonus=1.000000, nodes=57 > 53.718169)
                                @ 18  java.io.BufferedInputStream.implRead(byte[], int, int):int (112 bytes)   not inlining relevance-based (relevance=0.179061, probability=0.139091, bonus=1.000000, nodes=57 > 53.718169)
                            @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 8  java.util.concurrent.locks.AbstractOwnableSynchronizer.getExclusiveOwnerThread():Thread (5 bytes)   inline accessor method (bytecode parsing)
                            @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.verifyOop(Object):Object (19 bytes)   inline method (bytecode parsing)
                            @ 41  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                            @ 6  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.registerAsWord(Register):Word (7 bytes)   inline method (bytecode parsing)
                            @ 46  java.util.concurrent.locks.AbstractQueuedSynchronizer.setState(int):void (6 bytes)   inline method (bytecode parsing)
                                @ 2  java.util.concurrent.locks.ReentrantLock$Sync.tryRelease(int):boolean (51 bytes)   relevance-based (relevance=0.179061, probability=0.139091, bonus=1.000000, nodes=37 <= 53.718169)
                            @ 43  jdk.graal.compiler.hotspot.replacements.MonitorSnippets.trace(boolean, String, WordBase):void (15 bytes)   inline method (bytecode parsing)
                            @ 51  jdk.graal.compiler.hotspot.replacements.MonitorSnippets.trace(boolean, String, WordBase):void (15 bytes)   inline method (bytecode parsing)
                            @ 60  jdk.graal.compiler.hotspot.replacements.MonitorSnippets.trace(boolean, String, WordBase):void (15 bytes)   inline method (bytecode parsing)
                            @ 73  jdk.graal.compiler.hotspot.replacements.MonitorSnippets.tryFastPathUnlocking(Object, boolean, MonitorSnippets$Counters, Word, Word, Word):boolean (40 bytes)   inline method (bytecode parsing)
                            @ 22  java.util.concurrent.locks.AbstractQueuedSynchronizer$Node.getAndUnsetStatus(int):int (14 bytes)   inline method (bytecode parsing)
                              @ 34  jdk.graal.compiler.hotspot.replacements.MonitorSnippets.tryStackUnlocking(Object, Word, Word, Word, boolean, MonitorSnippets$Counters):boolean (147 bytes)   inline method (bytecode parsing)
                              @ 10  jdk.internal.misc.Unsafe.getAndBitwiseAndInt(Object, long, int):int (27 bytes)   inline method (bytecode parsing)
                                @ 21  jdk.graal.compiler.hotspot.replacements.MonitorSnippets.traceObject(boolean, String, Object, boolean):void (46 bytes)   inline method (bytecode parsing)
                                @ 29  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                  @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                                @ 41  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.loadWordFromObject(Object, int):Word (34 bytes)   inline method (bytecode parsing)
                                  @ 18  jdk.graal.compiler.replacements.ReplacementsUtil.staticAssert(boolean, String):void (12 bytes)   inline method (bytecode parsing)
                                  @ 24  org.graalvm.word.LocationIdentity.any():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                                @ 12  java.util.concurrent.locks.AbstractQueuedSynchronizer.signalNext(AbstractQueuedSynchronizer$Node):void (34 bytes)   not inlining relevance-based (relevance=0.162057, probability=0.125845, bonus=1.000000, nodes=56 > 48.616960)
                                @ 76  jdk.graal.compiler.hotspot.replacements.MonitorSnippets.tryExitInflated(Object, Word, boolean, MonitorSnippets$Counters):boolean (369 bytes)   inline method (bytecode parsing)
                                  @ 7  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.loadWordFromObject(Object, int):Word (34 bytes)   inline method (bytecode parsing)
                                    @ 18  jdk.graal.compiler.replacements.ReplacementsUtil.staticAssert(boolean, String):void (12 bytes)   inline method (bytecode parsing)
                                    @ 24  org.graalvm.word.LocationIdentity.any():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                                @ 4  jdk.internal.util.Preconditions.checkFromIndexSize(int, int, int, BiFunction):int (25 bytes)   relevance-based (relevance=0.983283, probability=0.844183, bonus=1.000000, nodes=15 <= 294.984949)
              s               @ 30  java.io.ByteArrayInputStream.read(byte[], int, int):int (73 bytes)   relevance-based (relevance=0.983273, probability=0.983273, bonus=1.000000, nodes=138 <= 294.981999)
                                  @ 159  jdk.graal.compiler.hotspot.replacements.MonitorSnippets.traceObject(boolean, String, Object, boolean):void (46 bytes)   inline method (bytecode parsing)
                                  @ 166  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                    @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                                  @ 253  jdk.graal.compiler.hotspot.replacements.MonitorSnippets.traceObject(boolean, String, Object, boolean):void (46 bytes)   inline method (bytecode parsing)
                                  @ 260  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                    @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                                  @ 302  jdk.graal.compiler.hotspot.replacements.MonitorSnippets.traceObject(boolean, String, Object, boolean):void (46 bytes)   inline method (bytecode parsing)
                                  @ 309  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                    @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                                  @ 357  jdk.graal.compiler.hotspot.replacements.MonitorSnippets.traceObject(boolean, String, Object, boolean):void (46 bytes)   inline method (bytecode parsing)
                                  @ 364  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                    @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                                  @ 339  jdk.graal.compiler.hotspot.replacements.MonitorSnippets.traceObject(boolean, String, Object, boolean):void (46 bytes)   inline method (bytecode parsing)
                                  @ 346  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                    @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                                @ 114  jdk.graal.compiler.hotspot.replacements.MonitorSnippets.traceObject(boolean, String, Object, boolean):void (46 bytes)   inline method (bytecode parsing)
                                @ 122  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                  @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                                @ 134  jdk.graal.compiler.hotspot.replacements.MonitorSnippets.traceObject(boolean, String, Object, boolean):void (46 bytes)   inline method (bytecode parsing)
                                @ 142  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                  @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                            @ 81  jdk.graal.compiler.hotspot.replacements.MonitorSnippets.decrementHeldMonitorCount(Word):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  jdk.graal.compiler.hotspot.replacements.MonitorSnippets.updateHeldMonitorCount(Word, int):void (36 bytes)   inline method (bytecode parsing)
                            @ 99  jdk.graal.compiler.hotspot.replacements.MonitorSnippets.decCounter():void (34 bytes)   inline method (bytecode parsing)
                            @ 5  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.clearPendingException(Word):Object (30 bytes)   inline method (bytecode parsing)
                            @ 16  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.getPendingException(Word):Object (14 bytes)   inline method (bytecode parsing)
                            @ 27  jdk.graal.compiler.hotspot.stubs.ForeignCallSnippets.getAndClearObjectResult(Word):Object (30 bytes)   inline method (bytecode parsing)
                            @ 497  java.lang.String.<init>(char[], int, int):void (14 bytes)   inline method (bytecode parsing)
                              @ 7  java.lang.String.rangeCheck(char[], int, int):Void (10 bytes)   inline method (bytecode parsing)
                                @ 4  java.lang.String.checkBoundsOffCount(int, int, int):int (10 bytes)   inline method (bytecode parsing)
                                  @ 6  jdk.internal.util.Preconditions.checkFromIndexSize(int, int, int, BiFunction):int (25 bytes)   inline method (bytecode parsing)
                            @ 15  jdk.internal.util.ByteArray.getUnsignedShort(byte[], int):int (12 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.VarHandleGuards.guard_LI_I(VarHandle, Object, int, VarHandle$AccessDescriptor):int (78 bytes)   inline method (bytecode parsing)
                                @ 2  java.lang.invoke.VarHandle.checkAccessModeThenIsDirect(VarHandle$AccessDescriptor):boolean (29 bytes)   inline method (bytecode parsing)
                                @ 42  java.lang.invoke.VarForm.getMemberName(int):MemberName (31 bytes)   inline method (bytecode parsing)
                                @ 45  java.lang.invoke.VarHandleByteArrayAsShorts$ArrayHandle.get(VarHandle, Object, int):short (36 bytes)   inline method (bytecode parsing)
                                  @ 19  java.lang.invoke.VarHandleByteArrayAsShorts$ArrayHandle.index(byte[], int):int (12 bytes)   inline method (bytecode parsing)
                                  @ 32  jdk.internal.misc.Unsafe.getShortUnaligned(Object, long, boolean):short (12 bytes)   inline method (bytecode parsing)
                                    @ 8  jdk.internal.misc.Unsafe.convEndian(boolean, short):short (16 bytes)   inline method (bytecode parsing)
                              @ 8  java.lang.Short.toUnsignedInt(short):int (5 bytes)   inline method (bytecode parsing)
                            @ 4  java.util.Objects.checkFromIndexSize(int, int, int):int (8 bytes)   inline method (bytecode parsing)
                                @ 7  java.io.DataInputStream.readFully(byte[], int, int):void (59 bytes)   not inlining too large previous low-level graph (low-level-nodes: 753, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=36)
                              @ 1  java.io.DataInputStream.readUnsignedShort():int (19 bytes)   relevance-based (relevance=1.011614, probability=1.000000, bonus=1.000000, nodes=26 <= 300.000000)
                            @ 4  java.util.Objects.checkFromIndexSize(int, int, int):int (8 bytes)   inline method (bytecode parsing)
                              @ 87  java.io.DataInputStream.readFully(byte[], int, int):void (59 bytes)   not inlining too large previous low-level graph (low-level-nodes: 753, relevance=1.011614, probability=1.000000, bonus=1.000000, nodes=36)
                              @ 8  jdk.internal.misc.Unsafe.convEndian(boolean, short):short (16 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=20 <= 300.000000)
                                @ 36  java.lang.StringUTF16.compress(char[], int, int):byte[] (20 bytes)   relevance-based (relevance=1.000000, probability=0.999390, bonus=1.000000, nodes=25 <= 300.000000)
                              @ 10  java.lang.String.<init>(char[], int, int, Void):void (74 bytes)   relevance-based (relevance=1.011614, probability=1.000000, bonus=1.000000, nodes=43 <= 300.000000)
                            @ 4  java.util.Objects.checkFromIndexSize(int, int, int):int (8 bytes)   inline method (bytecode parsing)
                              @ 4  jdk.internal.util.Preconditions.checkFromIndexSize(int, int, int, BiFunction):int (25 bytes)   relevance-based (relevance=1.000010, probability=1.000000, bonus=1.000000, nodes=15 <= 300.000000)
                            @ 23  jdk.graal.compiler.replacements.AllocationSnippets.allocateArrayImpl(Word, int, int, int, AllocationSnippets$FillContent, int, boolean, boolean, boolean, boolean, AllocationSnippets$AllocationProfilingData):Object (178 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getTLABInfo():Word (5 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getThread():Word (8 bytes)   inline method (bytecode parsing)
                                  @ 4  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.registerAsWord(Register):Word (7 bytes)   inline method (bytecode parsing)
                              @ 25  java.util.BitSet.checkInvariants():void (111 bytes)   trivial (relevance=1.308570, probability=1.000000, bonus=1.000000, nodes=4)
                              @ 9  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.readTlabTop(Word):Word (5 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.readTlabTop(Word):Word (17 bytes)   inline method (bytecode parsing)
                              @ 17  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.readTlabEnd(Word):Word (5 bytes)   inline method (bytecode parsing)
                              @ 29  java.util.BitSet.checkInvariants():void (111 bytes)   trivial (relevance=1.308570, probability=1.000000, bonus=1.000000, nodes=4)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.readTlabEnd(Word):Word (17 bytes)   inline method (bytecode parsing)
                              @ 36  jdk.graal.compiler.replacements.ReplacementsUtil.dynamicAssert(boolean, String):void (12 bytes)   inline method (bytecode parsing)
                              @ 44  jdk.graal.compiler.replacements.AllocationSnippets.arrayAllocationSize(int, int, int):UnsignedWord (18 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.objectAlignment():int (7 bytes)   inline method (bytecode parsing)
                                @ 11  jdk.graal.compiler.replacements.AllocationSnippets.arrayAllocationSize(int, int, int, int):long (32 bytes)   inline method (bytecode parsing)
                              @ 59  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.useTLAB():boolean (7 bytes)   inline method (bytecode parsing)
                              @ 72  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.shouldAllocateInTLAB(UnsignedWord, boolean):boolean (33 bytes)   inline method (bytecode parsing)
                              @ 102  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.writeTlabTop(Word, Word):void (6 bytes)   inline method (bytecode parsing)
                                @ 2  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.writeTlabTop(Word, Word):void (15 bytes)   inline method (bytecode parsing)
                              @ 109  jdk.graal.compiler.replacements.AllocationSnippets.emitPrefetchAllocate(Word, boolean):void (61 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getPrefetchStyle():int (7 bytes)   inline method (bytecode parsing)
                                @ 9  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getPrefetchLines(boolean):int (18 bytes)   inline method (bytecode parsing)
                                @ 14  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getPrefetchStepSize():int (7 bytes)   inline method (bytecode parsing)
                                @ 20  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getPrefetchDistance():int (7 bytes)   inline method (bytecode parsing)
                              @ 136  jdk.graal.compiler.replacements.AllocationSnippets.formatArray(Word, UnsignedWord, int, Word, AllocationSnippets$FillContent, boolean, int, boolean, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):Object (53 bytes)   inline method (bytecode parsing)
                                @ 5  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.initializeObjectHeader(Word, Word, boolean):void (29 bytes)   inline method (bytecode parsing)
                                  @ 25  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.initializeObjectHeader(Word, Word, KlassPointer):void (20 bytes)   inline method (bytecode parsing)
                                @ 11  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.arrayLengthOffset():int (7 bytes)   inline method (bytecode parsing)
                                @ 15  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                                @ 38  jdk.graal.compiler.replacements.AllocationSnippets.fillContents(Word, AllocationSnippets$FillContent, int, UnsignedWord, boolean, boolean, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):void (58 bytes)   inline method (bytecode parsing)
                                  @ 22  jdk.graal.compiler.replacements.AllocationSnippets.zeroMemory(Word, int, UnsignedWord, boolean, boolean, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):void (19 bytes)   inline method (bytecode parsing)
                                    @ 15  jdk.graal.compiler.replacements.AllocationSnippets.fillMemory(long, Word, int, UnsignedWord, boolean, boolean, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):void (194 bytes)   inline method (bytecode parsing)
                                      @ 17  jdk.graal.compiler.replacements.ReplacementsUtil.dynamicAssert(boolean, String):void (12 bytes)   inline method (bytecode parsing)
                                      @ 56  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                                      @ 89  jdk.graal.compiler.replacements.ReplacementsUtil.dynamicAssert(boolean, String):void (12 bytes)   inline method (bytecode parsing)
                                      @ 153  jdk.graal.compiler.replacements.ReplacementsUtil.staticAssert(boolean, String):void (12 bytes)   inline method (bytecode parsing)
                                      @ 167  jdk.graal.compiler.replacements.AllocationSnippets.fillMemoryAlignedUnrollable(long, Word, UnsignedWord, UnsignedWord, boolean, AllocationSnippets$AllocationSnippetCounters):void (68 bytes)   inline method (bytecode parsing)
                                        @ 5  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                          @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                                        @ 44  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                                      @ 190  jdk.graal.compiler.replacements.AllocationSnippets.fillMemoryAligned(long, Word, UnsignedWord, UnsignedWord, boolean, UnsignedWord, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):void (155 bytes)   inline method (bytecode parsing)
                                        @ 17  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getMinimalBulkZeroingSize():int (7 bytes)   inline method (bytecode parsing)
                                        @ 36  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                          @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                                        @ 53  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                                        @ 105  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                          @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                                        @ 134  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                                @ 44  jdk.graal.compiler.replacements.AllocationSnippets.emitMemoryBarrierIf(boolean):void (14 bytes)   inline method (bytecode parsing)
                                  @ 7  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                              @ 152  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                              @ 158  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.callNewArrayStub(Word, int):Object (35 bytes)   inline method (bytecode parsing)
                                @ 22  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.nonNullOrDeopt(Object):Object (27 bytes)   inline method (bytecode parsing)
                              @ 168  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.profileAllocation(AllocationSnippets$AllocationProfilingData, UnsignedWord):void (51 bytes)   inline method (bytecode parsing)
                              @ 174  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.verifyOop(Object):Object (5 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.verifyOop(Object):Object (19 bytes)   inline method (bytecode parsing)
                            @ 30  jdk.internal.math.FormattedFPDecimal.toDigit(long):char (6 bytes)   inline method (bytecode parsing)
                              @ 2  jdk.internal.math.FormattedFPDecimal.toDigit(int):char (6 bytes)   inline method (bytecode parsing)
                              @ 8  java.lang.Math.min(int, int):int (11 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=7)
                              @ 44  java.util.BitSet.recalculateWordsInUse():void (39 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=38 <= 300.000000)
                              @ 48  java.util.BitSet.checkInvariants():void (111 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=4)
                            @ 45  org.graalvm.collections.EconomicMapImpl.getKey(int):Object (9 bytes)   inline method (bytecode parsing)
                            @ 48  org.graalvm.collections.EconomicMapImpl.setKey(int, Object):void (10 bytes)   inline method (bytecode parsing)
                            @ 75  org.graalvm.collections.EconomicMapImpl.setKey(int, Object):void (10 bytes)   inline method (bytecode parsing)
                            @ 81  org.graalvm.collections.EconomicMapImpl.setRawValue(int, Object):void (12 bytes)   inline method (bytecode parsing)
                            @ 112  org.graalvm.collections.EconomicMapImpl.getKey(int):Object (9 bytes)   inline method (bytecode parsing)
                              @ 23  org.graalvm.collections.EconomicMapImpl.hasHashArray():boolean (13 bytes)   trivial (relevance=1.399437, probability=0.802660, bonus=1.000000, nodes=9)
                              @ 57  org.graalvm.collections.EconomicMapImpl.getRawValue(int):Object (11 bytes)   relevance-based (relevance=1.000000, probability=0.612485, bonus=1.000000, nodes=10 <= 300.000000)
                              @ 60  org.graalvm.collections.EconomicMapImpl.setRawValue(int, Object):void (12 bytes)   relevance-based (relevance=1.000000, probability=0.612485, bonus=1.000000, nodes=12 <= 300.000000)
                            @ 23  java.lang.Math.max(int, int):int (11 bytes)   inline method (bytecode parsing)
                            @ 60  org.graalvm.collections.EconomicMapImpl.getKey(int):Object (9 bytes)   inline method (bytecode parsing)
                                @ 32  org.graalvm.collections.EconomicMapImpl.compressLarge(int):int (154 bytes)   not inlining relevance-based (relevance=0.035888, probability=0.019556, bonus=1.000000, nodes=96 > 10.766479)
                              @ 157  org.graalvm.collections.EconomicMapImpl.maybeCompress(int):int (38 bytes)   relevance-based (relevance=0.682386, probability=0.391389, bonus=1.000000, nodes=25 <= 204.715813)
                            @ 15  org.graalvm.collections.EconomicMapImpl.getKey(int):Object (9 bytes)   inline method (bytecode parsing)
                            @ 49  jdk.graal.compiler.graph.Node.valueEquals(Node):boolean (10 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.graph.Node.getNodeClass():NodeClass (5 bytes)   inline accessor method (bytecode parsing)
                            @ 59  jdk.graal.compiler.core.common.Fields.getCount():int (6 bytes)   inline method (bytecode parsing)
                            @ 70  jdk.graal.compiler.core.common.Fields.getType(int):Class (7 bytes)   inline method (bytecode parsing)
                                  @ 6  jdk.graal.compiler.graph.NodeClass.dataEquals(Node, Node):boolean (546 bytes)   not inlining relevance-based (relevance=0.103083, probability=0.023800, bonus=1.000000, nodes=248 > 30.924824)
                                @ 46  jdk.graal.compiler.graph.Graph$1.equals(Object, Object):boolean (53 bytes)   relevance-based (relevance=0.103083, probability=0.047600, bonus=1.000000, nodes=25 <= 30.924824)
                              @ 36  java.lang.Object.equals(Object):boolean (11 bytes)   not inlining no methods remaining after filtering less frequent methods (8 methods previously)
                              @ 24  org.graalvm.collections.EconomicMapImpl.compareKeys(Object, Object):boolean (52 bytes)   relevance-based (relevance=1.300451, probability=1.097013, bonus=1.000000, nodes=66 <= 300.000000)
                              @ 34  org.graalvm.collections.EconomicMapImpl.getRawValue(int):Object (11 bytes)   relevance-based (relevance=0.548866, probability=0.253449, bonus=1.000000, nodes=10 <= 164.659690)
                              @ 49  org.graalvm.collections.EconomicMapImpl.getRawValue(int):Object (11 bytes)   relevance-based (relevance=0.210089, probability=0.097013, bonus=1.000000, nodes=10 <= 63.026773)
                              @ 25  java.util.ArrayDeque.dec(int, int):int (13 bytes)   relevance-based (relevance=1.002110, probability=1.000000, bonus=1.000000, nodes=18 <= 300.000000)
                            @ 55  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                              @ 47  java.util.ArrayDeque.grow(int):void (165 bytes)   not inlining relevance-based (relevance=0.003035, probability=0.002106, bonus=1.000000, nodes=75 > 0.910399)
                            @ 4  java.util.BitSet.wordIndex(int):int (5 bytes)   inline method (bytecode parsing)
                              @ 47  java.util.BitSet.initWords(int):void (15 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=14 <= 300.000000)
                            @ 5  java.util.Objects.checkIndex(int, int):int (7 bytes)   inline method (bytecode parsing)
                            @ 11  java.util.ArrayList.elementData(int):Object (7 bytes)   inline method (bytecode parsing)
                                  @ 13  java.util.ArrayDeque.sub(int, int, int):int (14 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=18 <= 300.000000)
                                @ 14  java.util.ArrayDeque.size():int (17 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=21 <= 300.000000)
                              @ 5  java.util.ArrayDeque$DeqIterator.<init>(ArrayDeque):void (34 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=38 <= 300.000000)
                                @ 13  java.util.ArrayDeque.sub(int, int, int):int (14 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=18 <= 300.000000)
                              @ 14  java.util.ArrayDeque.size():int (17 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=21 <= 300.000000)
                            @ 17  java.lang.Enum.ordinal():int (5 bytes)   inline accessor method (bytecode parsing)
                              @ 2  java.util.EnumSet.typeCheck(Enum):void (59 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=12 <= 300.000000)
                              @ 2  org.graalvm.collections.EconomicMapImpl.find(Object):int (19 bytes)   not inlining too large previous low-level graph (low-level-nodes: 357, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=20)
                                  @ 25  java.lang.Math.min(int, int):int (11 bytes)   trivial (relevance=0.392138, probability=0.229203, bonus=1.000000, nodes=7)
                                @ 21  java.util.Arrays.copyOf(long[], int):long[] (33 bytes)   relevance-based (relevance=0.392134, probability=0.229203, bonus=1.000000, nodes=21 <= 117.640118)
                                @ 28  java.util.BitSet.checkInvariants():void (111 bytes)   trivial (relevance=0.392130, probability=0.229201, bonus=1.000000, nodes=4)
                              @ 8  java.util.BitSet.trimToSize():void (32 bytes)   relevance-based (relevance=1.000000, probability=0.813706, bonus=1.000000, nodes=34 <= 300.000000)
                              @ 34  java.util.BitSet.checkInvariants():void (111 bytes)   trivial (relevance=1.710851, probability=0.999998, bonus=1.000000, nodes=4)
                            @ 1  java.lang.AbstractStringBuilder.length():int (5 bytes)   inline accessor method (bytecode parsing)
                                @ 10  java.lang.StringBuilder.length():int (5 bytes)   trivial (relevance=0.641607, probability=0.390841, bonus=1.000000, nodes=5)
                            @ 5  jdk.graal.compiler.nodes.java.NewArrayNode.newUninitializedArray(Class, int):Object (7 bytes)   inline method (bytecode parsing)
                            @ 27  jdk.graal.compiler.replacements.arraycopy.ArrayCopyCallNode.disjointArraycopy(Object, int, Object, int, int, JavaKind, int):void (17 bytes)   inline method (bytecode parsing)
                                      @ 3  java.lang.Math.max(int, int):int (11 bytes)   trivial (relevance=0.108691, probability=0.056619, bonus=1.000000, nodes=7)
                                    @ 29  jdk.internal.util.ArraysSupport.newLength(int, int, int):int (27 bytes)   relevance-based (relevance=0.108691, probability=0.056619, bonus=1.000000, nodes=15 <= 32.607331)
                                  @ 24  java.lang.AbstractStringBuilder.newCapacity(int):int (59 bytes)   relevance-based (relevance=0.108691, probability=0.056619, bonus=1.000000, nodes=27 <= 32.607331)
                                    @ 25  java.lang.Math.min(int, int):int (11 bytes)   trivial (relevance=0.108692, probability=0.056611, bonus=1.000000, nodes=7)
                                  @ 32  java.util.Arrays.copyOf(byte[], int):byte[] (33 bytes)   relevance-based (relevance=0.108691, probability=0.056619, bonus=1.000000, nodes=28 <= 32.607331)
                                @ 21  java.lang.AbstractStringBuilder.ensureCapacityInternal(int):void (39 bytes)   relevance-based (relevance=0.641607, probability=0.390841, bonus=1.000000, nodes=72 <= 192.482190)
                                  @ 11  java.lang.AbstractStringBuilder.getCoder():byte (15 bytes)   trivial (relevance=0.750297, probability=0.390840, bonus=1.000000, nodes=5)
                                @ 26  java.lang.AbstractStringBuilder.inflateIfNeededFor(AbstractStringBuilder):void (22 bytes)   trivial (relevance=0.750297, probability=0.390840, bonus=1.000000, nodes=9)
                                @ 42  java.lang.AbstractStringBuilder.getBytes(byte[], int, byte):void (44 bytes)   relevance-based (relevance=0.750297, probability=0.390840, bonus=1.000000, nodes=27 <= 225.089195)
                              @ 37  java.lang.AbstractStringBuilder.append(AbstractStringBuilder):AbstractStringBuilder (70 bytes)   relevance-based (relevance=0.641607, probability=0.390841, bonus=1.000000, nodes=112 <= 192.482190)
                            @ 23  jdk.graal.compiler.replacements.AllocationSnippets.allocateArrayImpl(Word, int, int, int, AllocationSnippets$FillContent, int, boolean, boolean, boolean, boolean, AllocationSnippets$AllocationProfilingData):Object (178 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getTLABInfo():Word (5 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getThread():Word (8 bytes)   inline method (bytecode parsing)
                                  @ 4  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.registerAsWord(Register):Word (7 bytes)   inline method (bytecode parsing)
                              @ 9  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.readTlabTop(Word):Word (5 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.readTlabTop(Word):Word (17 bytes)   inline method (bytecode parsing)
                            @ 2  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                              @ 17  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.readTlabEnd(Word):Word (5 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.readTlabEnd(Word):Word (17 bytes)   inline method (bytecode parsing)
                              @ 36  jdk.graal.compiler.replacements.ReplacementsUtil.dynamicAssert(boolean, String):void (12 bytes)   inline method (bytecode parsing)
                                @ 2  java.lang.AbstractStringBuilder.append(String):AbstractStringBuilder (45 bytes)   not inlining too large previous low-level graph (low-level-nodes: 345, relevance=1.000000, probability=0.609159, bonus=1.000000, nodes=23)
                              @ 44  jdk.graal.compiler.replacements.AllocationSnippets.arrayAllocationSize(int, int, int):UnsignedWord (18 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.objectAlignment():int (7 bytes)   inline method (bytecode parsing)
                              @ 21  java.lang.StringBuilder.append(String):AbstractStringBuilder (6 bytes)   trivial (relevance=1.000000, probability=0.609159, bonus=1.000000, nodes=9)
                                @ 11  jdk.graal.compiler.replacements.AllocationSnippets.arrayAllocationSize(int, int, int, int):long (32 bytes)   inline method (bytecode parsing)
                              @ 59  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.useTLAB():boolean (7 bytes)   inline method (bytecode parsing)
                              @ 72  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.shouldAllocateInTLAB(UnsignedWord, boolean):boolean (33 bytes)   inline method (bytecode parsing)
                              @ 102  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.writeTlabTop(Word, Word):void (6 bytes)   inline method (bytecode parsing)
                                @ 2  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.writeTlabTop(Word, Word):void (15 bytes)   inline method (bytecode parsing)
                              @ 109  jdk.graal.compiler.replacements.AllocationSnippets.emitPrefetchAllocate(Word, boolean):void (61 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getPrefetchStyle():int (7 bytes)   inline method (bytecode parsing)
                                @ 9  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getPrefetchLines(boolean):int (18 bytes)   inline method (bytecode parsing)
                                @ 14  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getPrefetchStepSize():int (7 bytes)   inline method (bytecode parsing)
                                @ 20  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getPrefetchDistance():int (7 bytes)   inline method (bytecode parsing)
                              @ 136  jdk.graal.compiler.replacements.AllocationSnippets.formatArray(Word, UnsignedWord, int, Word, AllocationSnippets$FillContent, boolean, int, boolean, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):Object (53 bytes)   inline method (bytecode parsing)
                                @ 5  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.initializeObjectHeader(Word, Word, boolean):void (29 bytes)   inline method (bytecode parsing)
                                  @ 25  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.initializeObjectHeader(Word, Word, KlassPointer):void (20 bytes)   inline method (bytecode parsing)
                                @ 11  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.arrayLengthOffset():int (7 bytes)   inline method (bytecode parsing)
                                @ 15  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                                @ 38  jdk.graal.compiler.replacements.AllocationSnippets.fillContents(Word, AllocationSnippets$FillContent, int, UnsignedWord, boolean, boolean, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):void (58 bytes)   inline method (bytecode parsing)
                                @ 44  jdk.graal.compiler.replacements.AllocationSnippets.emitMemoryBarrierIf(boolean):void (14 bytes)   inline method (bytecode parsing)
                                  @ 7  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                              @ 152  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                              @ 158  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.callNewArrayStub(Word, int):Object (35 bytes)   inline method (bytecode parsing)
                                @ 22  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.nonNullOrDeopt(Object):Object (27 bytes)   inline method (bytecode parsing)
                              @ 168  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.profileAllocation(AllocationSnippets$AllocationProfilingData, UnsignedWord):void (51 bytes)   inline method (bytecode parsing)
                              @ 174  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.verifyOop(Object):Object (5 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.verifyOop(Object):Object (19 bytes)   inline method (bytecode parsing)
                            @ 58  java.util.Formatter$Flags.contains(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                                @ 89  java.lang.String.toString():String (2 bytes)   trivial (relevance=0.744009, probability=0.259933, bonus=1.000000, nodes=4)
                            @ 34  java.util.Formatter$Flags.contains(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 2  java.lang.StringBuilder.append(CharSequence):StringBuilder (8 bytes)   inline method (bytecode parsing)
                                      @ 2  java.lang.AbstractStringBuilder.append(CharSequence):AbstractStringBuilder (54 bytes)   not inlining too large previous low-level graph (low-level-nodes: 399, relevance=0.744009, probability=0.259933, bonus=1.000000, nodes=8)
                                    @ 10  java.lang.StringBuilder.append(CharSequence):Appendable (6 bytes)   trivial (relevance=0.744009, probability=0.259933, bonus=1.000000, nodes=9)
                                  @ 53  java.util.Formatter$FormatSpecifier.appendJustified(Appendable, CharSequence):void (89 bytes)   relevance-based (relevance=0.744009, probability=0.259933, bonus=1.000000, nodes=23 <= 223.202614)
                                @ 93  java.util.Formatter$FormatSpecifier.print(Formatter, String, Locale):void (57 bytes)   relevance-based (relevance=0.744009, probability=0.259933, bonus=1.000000, nodes=33 <= 223.202614)
                              @ 176  java.util.Formatter$FormatSpecifier.printString(Formatter, Object, Locale):void (97 bytes)   relevance-based (relevance=0.744009, probability=0.259933, bonus=1.000000, nodes=51 <= 223.202614)
                            @ 4  java.lang.StringBuilder.<init>():void (7 bytes)   inline method (bytecode parsing)
                                  @ 3  java.lang.AbstractStringBuilder.<init>(int):void (39 bytes)   relevance-based (relevance=0.722658, probability=0.252474, bonus=1.000000, nodes=11 <= 216.797386)
                                  @ 11  java.lang.Double.compare(double, double):int (54 bytes)   relevance-based (relevance=0.722658, probability=0.252474, bonus=1.000000, nodes=25 <= 216.797386)
                                  @ 26  java.lang.Double.isNaN(double):boolean (12 bytes)   trivial (relevance=0.791084, probability=0.252474, bonus=1.000000, nodes=7)
                            @ 10  java.util.Formatter$Flags.contains(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 32  java.util.Formatter$Flags.contains(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                                  @ 43  java.util.Formatter$FormatSpecifier.leadingSign(StringBuilder, boolean):StringBuilder (80 bytes)   relevance-based (relevance=0.791084, probability=0.252474, bonus=1.000000, nodes=13 <= 237.325182)
                                  @ 49  java.lang.Double.isInfinite(double):boolean (17 bytes)   trivial (relevance=0.791084, probability=0.252474, bonus=1.000000, nodes=9)
                            @ 275  java.lang.StringBuilder.<init>():void (7 bytes)   inline method (bytecode parsing)
                            @ 280  jdk.internal.math.FormattedFPDecimal.getMantissa():char[] (5 bytes)   inline accessor method (bytecode parsing)
                            @ 283  java.lang.StringBuilder.append(char[]):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 299  java.util.Formatter$Flags.contains(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 4  jdk.internal.math.FormattedFPDecimal.<init>():void (5 bytes)   inline method (bytecode parsing)
                                        @ 5  jdk.internal.math.DoubleToDecimal.<init>(boolean):void (21 bytes)   trivial (relevance=0.791084, probability=0.252474, bonus=1.000000, nodes=9)
                            @ 15  jdk.internal.math.MathUtils.pow10(int):long (6 bytes)   inline method (bytecode parsing)
                                            @ 7  jdk.internal.math.MathUtils.flog10pow2(int):int (11 bytes)   relevance-based (relevance=0.825371, probability=0.153055, bonus=1.000000, nodes=10 <= 247.611359)
                                            @ 36  jdk.internal.math.FormattedFPDecimal.set(long, int, int):void (17 bytes)   relevance-based (relevance=0.825371, probability=0.153055, bonus=1.000000, nodes=13 <= 247.611359)
                                          @ 123  jdk.internal.math.DoubleToDecimal.toChars(long, int, FormattedFPDecimal):int (161 bytes)   relevance-based (relevance=0.791084, probability=0.153055, bonus=1.000000, nodes=36 <= 237.325182)
                                            @ 57  jdk.internal.math.MathUtils.flog10pow2(int):int (11 bytes)   relevance-based (relevance=1.919159, probability=0.099418, bonus=1.000000, nodes=10 <= 300.000000)
                                            @ 81  jdk.internal.math.MathUtils.flog2pow10(int):int (11 bytes)   relevance-based (relevance=1.919159, probability=0.099418, bonus=1.000000, nodes=10 <= 300.000000)
                                            @ 91  jdk.internal.math.MathUtils.g1(int):long (12 bytes)   relevance-based (relevance=1.919159, probability=0.099418, bonus=1.000000, nodes=10 <= 300.000000)
                                            @ 98  jdk.internal.math.MathUtils.g0(int):long (14 bytes)   relevance-based (relevance=1.919159, probability=0.099418, bonus=1.000000, nodes=11 <= 300.000000)
                                            @ 112  jdk.internal.math.DoubleToDecimal.rop(long, long, long):long (58 bytes)   relevance-based (relevance=1.919159, probability=0.099418, bonus=1.000000, nodes=20 <= 300.000000)
                                            @ 126  jdk.internal.math.DoubleToDecimal.rop(long, long, long):long (58 bytes)   relevance-based (relevance=1.919159, probability=0.099418, bonus=1.000000, nodes=20 <= 300.000000)
                                            @ 140  jdk.internal.math.DoubleToDecimal.rop(long, long, long):long (58 bytes)   relevance-based (relevance=1.919159, probability=0.099418, bonus=1.000000, nodes=20 <= 300.000000)
                                          @ 135  jdk.internal.math.DoubleToDecimal.toDecimal(int, long, int, FormattedFPDecimal):int (385 bytes)   not inlining relevance-based (relevance=0.536126, probability=0.099418, bonus=1.000000, nodes=164 > 160.837707)
                                        @ 10  jdk.internal.math.DoubleToDecimal.toDecimal(double, FormattedFPDecimal):int (220 bytes)   relevance-based (relevance=0.791084, probability=0.252474, bonus=1.000000, nodes=82 <= 237.325182)
                                      @ 12  jdk.internal.math.DoubleToDecimal.split(double, FormattedFPDecimal):void (15 bytes)   relevance-based (relevance=0.791084, probability=0.252474, bonus=1.000000, nodes=92 <= 237.325182)
                            @ 64  jdk.internal.math.MathUtils.pow10(int):long (6 bytes)   inline method (bytecode parsing)
                            @ 119  jdk.internal.math.MathUtils.pow10(int):long (6 bytes)   inline method (bytecode parsing)
                                        @ 14  jdk.internal.math.FormattedFPDecimal.round(long):void (149 bytes)   relevance-based (relevance=1.000000, probability=0.252474, bonus=1.000000, nodes=55 <= 300.000000)
                                            @ 29  jdk.internal.math.FormattedFPDecimal.fillWithZeros(int, int):void (20 bytes)   relevance-based (relevance=1.000000, probability=0.153055, bonus=1.000000, nodes=22 <= 300.000000)
                            @ 30  jdk.internal.math.FormattedFPDecimal.toDigit(long):char (6 bytes)   inline method (bytecode parsing)
                              @ 2  jdk.internal.math.FormattedFPDecimal.toDigit(int):char (6 bytes)   inline method (bytecode parsing)
                                            @ 42  jdk.internal.math.FormattedFPDecimal.fillWithDigits(long, int, int):long (42 bytes)   relevance-based (relevance=1.000000, probability=0.153055, bonus=1.000000, nodes=37 <= 300.000000)
                                          @ 8  jdk.internal.math.FormattedFPDecimal.plainCharsPureInteger():void (47 bytes)   relevance-based (relevance=1.000000, probability=0.153055, bonus=1.000000, nodes=59 <= 300.000000)
                            @ 30  jdk.internal.math.FormattedFPDecimal.toDigit(long):char (6 bytes)   inline method (bytecode parsing)
                              @ 2  jdk.internal.math.FormattedFPDecimal.toDigit(int):char (6 bytes)   inline method (bytecode parsing)
                                            @ 34  jdk.internal.math.FormattedFPDecimal.fillWithDigits(long, int, int):long (42 bytes)   relevance-based (relevance=0.245180, probability=0.037526, bonus=1.000000, nodes=37 <= 73.553934)
                            @ 30  jdk.internal.math.FormattedFPDecimal.toDigit(long):char (6 bytes)   inline method (bytecode parsing)
                              @ 2  jdk.internal.math.FormattedFPDecimal.toDigit(int):char (6 bytes)   inline method (bytecode parsing)
                                            @ 66  jdk.internal.math.FormattedFPDecimal.fillWithDigits(long, int, int):long (42 bytes)   relevance-based (relevance=0.245180, probability=0.037526, bonus=1.000000, nodes=37 <= 73.553934)
                                          @ 27  jdk.internal.math.FormattedFPDecimal.plainCharsMixed():void (71 bytes)   not inlining relevance-based (relevance=0.245180, probability=0.037526, bonus=1.000000, nodes=77 > 73.553934)
                            @ 53  jdk.internal.math.FormattedFPDecimal.fillWithZeros(int, int):void (20 bytes)   inline method (bytecode parsing)
                              @ 27  java.util.ArrayList$Itr.hasNext():boolean (20 bytes)   relevance-based (relevance=2.053677, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                            @ 30  jdk.internal.math.FormattedFPDecimal.toDigit(long):char (6 bytes)   inline method (bytecode parsing)
                              @ 2  jdk.internal.math.FormattedFPDecimal.toDigit(int):char (6 bytes)   inline method (bytecode parsing)
                                            @ 36  jdk.internal.math.FormattedFPDecimal.fillWithDigits(long, int, int):long (42 bytes)   relevance-based (relevance=0.404377, probability=0.061892, bonus=1.000000, nodes=37 <= 121.313184)
                                @ 1  java.util.ArrayList$Itr.checkForComodification():void (23 bytes)   trivial (relevance=1.000000, probability=0.842416, bonus=1.000000, nodes=9)
                                          @ 34  jdk.internal.math.FormattedFPDecimal.plainCharsPureFraction():void (65 bytes)   relevance-based (relevance=0.404377, probability=0.061892, bonus=1.000000, nodes=70 <= 121.313184)
                              @ 37  java.util.ArrayList$Itr.next():Object (66 bytes)   relevance-based (relevance=1.730050, probability=0.842416, bonus=1.000000, nodes=25 <= 300.000000)
                                        @ 18  jdk.internal.math.FormattedFPDecimal.plainChars():FormattedFPDecimal (39 bytes)   relevance-based (relevance=1.649557, probability=0.252474, bonus=1.000000, nodes=139 <= 300.000000)
                              @ 49  java.util.Formatter$FormatSpecifier.index():int (5 bytes)   trivial (relevance=1.730050, probability=0.842416, bonus=1.000000, nodes=9)
                                      @ 56  jdk.internal.math.FormattedFPDecimal.plain(int):FormattedFPDecimal (22 bytes)   relevance-based (relevance=1.361497, probability=0.252474, bonus=1.000000, nodes=195 <= 300.000000)
                                    @ 266  jdk.internal.math.FormattedFPDecimal.valueOf(double, int, char):FormattedFPDecimal (96 bytes)   not inlining relevance-based (relevance=0.791084, probability=0.252474, bonus=1.000000, nodes=282 > 237.325182)
                            @ 58  java.util.Formatter$Flags.contains(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                                    @ 3  java.lang.AbstractStringBuilder.<init>(int):void (39 bytes)   relevance-based (relevance=0.791084, probability=0.252474, bonus=1.000000, nodes=11 <= 237.325182)
                                  @ 89  java.lang.String.toString():String (2 bytes)   trivial (relevance=0.744009, probability=0.126570, bonus=1.000000, nodes=4)
                            @ 34  java.util.Formatter$Flags.contains(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 2  java.lang.StringBuilder.append(CharSequence):StringBuilder (8 bytes)   inline method (bytecode parsing)
                                            @ 3  java.lang.Math.max(int, int):int (11 bytes)   trivial (relevance=0.134013, probability=0.036574, bonus=1.000000, nodes=7)
                                          @ 29  jdk.internal.util.ArraysSupport.newLength(int, int, int):int (27 bytes)   relevance-based (relevance=0.134013, probability=0.036574, bonus=1.000000, nodes=15 <= 40.203932)
                                        @ 24  java.lang.AbstractStringBuilder.newCapacity(int):int (59 bytes)   relevance-based (relevance=0.134013, probability=0.036574, bonus=1.000000, nodes=27 <= 40.203932)
                                        @ 2  java.lang.AbstractStringBuilder.append(CharSequence):AbstractStringBuilder (54 bytes)   not inlining too large previous low-level graph (low-level-nodes: 399, relevance=0.744009, probability=0.126570, bonus=1.000000, nodes=8)
                                      @ 10  java.lang.StringBuilder.append(CharSequence):Appendable (6 bytes)   trivial (relevance=0.744009, probability=0.126570, bonus=1.000000, nodes=9)
                                    @ 53  java.util.Formatter$FormatSpecifier.appendJustified(Appendable, CharSequence):void (89 bytes)   relevance-based (relevance=0.744009, probability=0.126570, bonus=1.000000, nodes=23 <= 223.202614)
                                          @ 25  java.lang.Math.min(int, int):int (11 bytes)   trivial (relevance=0.134014, probability=0.036569, bonus=1.000000, nodes=7)
                                  @ 93  java.util.Formatter$FormatSpecifier.print(Formatter, String, Locale):void (57 bytes)   relevance-based (relevance=0.744009, probability=0.126570, bonus=1.000000, nodes=33 <= 223.202614)
                                        @ 32  java.util.Arrays.copyOf(byte[], int):byte[] (33 bytes)   relevance-based (relevance=0.134013, probability=0.036574, bonus=1.000000, nodes=28 <= 40.203932)
                                @ 176  java.util.Formatter$FormatSpecifier.printString(Formatter, Object, Locale):void (97 bytes)   relevance-based (relevance=0.744009, probability=0.126570, bonus=1.000000, nodes=51 <= 223.202614)
                                      @ 10  java.lang.AbstractStringBuilder.ensureCapacityInternal(int):void (39 bytes)   relevance-based (relevance=0.791084, probability=0.252474, bonus=1.000000, nodes=72 <= 237.325182)
                            @ 4  java.lang.StringBuilder.<init>():void (7 bytes)   inline method (bytecode parsing)
                                        @ 7  java.lang.AbstractStringBuilder.isLatin1():boolean (19 bytes)   trivial (relevance=0.925096, probability=0.252473, bonus=1.000000, nodes=9)
                                    @ 3  java.lang.AbstractStringBuilder.<init>(int):void (39 bytes)   relevance-based (relevance=0.722658, probability=0.122937, bonus=1.000000, nodes=11 <= 216.797386)
                                        @ 40  java.lang.StringLatin1.canEncode(int):boolean (13 bytes)   trivial (relevance=0.925096, probability=1.036382, bonus=1.000000, nodes=8)
                                      @ 17  java.lang.AbstractStringBuilder.appendChars(char[], int, int):void (130 bytes)   relevance-based (relevance=0.925096, probability=0.252473, bonus=1.000000, nodes=37 <= 277.528712)
                                    @ 11  java.lang.Double.compare(double, double):int (54 bytes)   relevance-based (relevance=0.722658, probability=0.122937, bonus=1.000000, nodes=25 <= 216.797386)
                                    @ 2  java.lang.AbstractStringBuilder.append(char[]):AbstractStringBuilder (22 bytes)   relevance-based (relevance=0.791084, probability=0.252474, bonus=1.000000, nodes=106 <= 237.325182)
                                    @ 26  java.lang.Double.isNaN(double):boolean (12 bytes)   trivial (relevance=0.791084, probability=0.122937, bonus=1.000000, nodes=7)
                            @ 10  java.util.Formatter$Flags.contains(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 1  java.lang.StringBuilder.length():int (5 bytes)   inline method (bytecode parsing)
                            @ 32  java.util.Formatter$Flags.contains(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.AbstractStringBuilder.length():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 17  java.lang.StringBuilder.charAt(int):char (6 bytes)   inline method (bytecode parsing)
                                    @ 43  java.util.Formatter$FormatSpecifier.leadingSign(StringBuilder, boolean):StringBuilder (80 bytes)   relevance-based (relevance=0.791084, probability=0.122937, bonus=1.000000, nodes=13 <= 237.325182)
                            @ 98  java.lang.StringBuilder.append(char):StringBuilder (8 bytes)   inline method (bytecode parsing)
                                    @ 49  java.lang.Double.isInfinite(double):boolean (17 bytes)   trivial (relevance=0.791084, probability=0.122937, bonus=1.000000, nodes=9)
                            @ 275  java.lang.StringBuilder.<init>():void (7 bytes)   inline method (bytecode parsing)
                            @ 5  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                            @ 280  jdk.internal.math.FormattedFPDecimal.getMantissa():char[] (5 bytes)   inline accessor method (bytecode parsing)
                            @ 283  java.lang.StringBuilder.append(char[]):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 299  java.util.Formatter$Flags.contains(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                                        @ 9  java.lang.AbstractStringBuilder.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=0.438629, bonus=1.000000, nodes=9)
                                      @ 2  java.lang.AbstractStringBuilder.charAt(int):char (36 bytes)   relevance-based (relevance=1.195157, probability=0.438629, bonus=1.000000, nodes=19 <= 300.000000)
                            @ 4  jdk.internal.math.FormattedFPDecimal.<init>():void (5 bytes)   inline method (bytecode parsing)
                                      @ 2  java.lang.AbstractStringBuilder.append(char):AbstractStringBuilder (77 bytes)   not inlining too large previous low-level graph (low-level-nodes: 332, relevance=0.561929, probability=0.153359, bonus=1.000000, nodes=29)
                                          @ 5  jdk.internal.math.DoubleToDecimal.<init>(boolean):void (21 bytes)   trivial (relevance=0.791084, probability=0.122937, bonus=1.000000, nodes=9)
                            @ 10  java.lang.StringBuilder.append(char):StringBuilder (8 bytes)   inline method (bytecode parsing)
                                        @ 2  java.lang.AbstractStringBuilder.append(char):AbstractStringBuilder (77 bytes)   not inlining too large previous low-level graph (low-level-nodes: 332, relevance=0.563993, probability=0.922681, bonus=1.000000, nodes=29)
                                      @ 108  java.util.Formatter$FormatSpecifier.trailingZeros(StringBuilder, int):void (21 bytes)   not inlining callee invoke probability is too high (invokeP=5.994448, relevance=0.563993, probability=0.153923, bonus=1.000000, nodes=23)
                            @ 15  jdk.internal.math.MathUtils.pow10(int):long (6 bytes)   inline method (bytecode parsing)
                                    @ 293  java.util.Formatter$FormatSpecifier.addZeros(StringBuilder, int):void (112 bytes)   relevance-based (relevance=0.925096, probability=0.252473, bonus=1.000000, nodes=70 <= 277.528712)
                                              @ 7  jdk.internal.math.MathUtils.flog10pow2(int):int (11 bytes)   relevance-based (relevance=0.825371, probability=0.074528, bonus=1.000000, nodes=10 <= 247.611359)
                            @ 13  java.lang.StringBuilder.length():int (5 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.AbstractStringBuilder.length():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 36  jdk.internal.math.FormattedFPDecimal.set(long, int, int):void (17 bytes)   relevance-based (relevance=0.825371, probability=0.074528, bonus=1.000000, nodes=13 <= 247.611359)
                                            @ 123  jdk.internal.math.DoubleToDecimal.toChars(long, int, FormattedFPDecimal):int (161 bytes)   relevance-based (relevance=0.791084, probability=0.074528, bonus=1.000000, nodes=36 <= 237.325182)
                            @ 101  java.util.Formatter$Flags.contains(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 261  java.lang.StringBuilder.append(char):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 291  java.lang.StringBuilder.append(char):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 337  java.lang.StringBuilder.length():int (5 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.AbstractStringBuilder.length():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 57  jdk.internal.math.MathUtils.flog10pow2(int):int (11 bytes)   relevance-based (relevance=2.000913, probability=0.048410, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 13  java.text.DecimalFormatSymbols.getZeroDigit():char (5 bytes)   inline accessor method (bytecode parsing)
                            @ 9  java.text.DecimalFormatSymbols.getLocale():Locale (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 81  jdk.internal.math.MathUtils.flog2pow10(int):int (11 bytes)   relevance-based (relevance=2.000913, probability=0.048410, bonus=1.000000, nodes=10 <= 300.000000)
                                          @ 13  java.util.Locale.equals(Object):boolean (75 bytes)   trivial (relevance=0.925096, probability=0.252473, bonus=1.000000, nodes=8)
                                              @ 91  jdk.internal.math.MathUtils.g1(int):long (12 bytes)   relevance-based (relevance=2.000913, probability=0.048410, bonus=1.000000, nodes=10 <= 300.000000)
                                        @ 10  java.util.Formatter.getDecimalFormatSymbols(Locale):DecimalFormatSymbols (32 bytes)   relevance-based (relevance=0.925096, probability=0.252473, bonus=1.000000, nodes=15 <= 277.528712)
                                      @ 20  java.util.Formatter.getZero(Locale):char (17 bytes)   relevance-based (relevance=0.925096, probability=0.252473, bonus=1.000000, nodes=20 <= 277.528712)
                                              @ 98  jdk.internal.math.MathUtils.g0(int):long (14 bytes)   relevance-based (relevance=2.000913, probability=0.048410, bonus=1.000000, nodes=11 <= 300.000000)
                            @ 1  java.lang.AbstractStringBuilder.length():int (5 bytes)   inline accessor method (bytecode parsing)
                                      @ 35  java.lang.StringBuilder.length():int (5 bytes)   trivial (relevance=0.925096, probability=0.252473, bonus=1.000000, nodes=5)
                                              @ 112  jdk.internal.math.DoubleToDecimal.rop(long, long, long):long (58 bytes)   relevance-based (relevance=2.000913, probability=0.048410, bonus=1.000000, nodes=20 <= 300.000000)
                            @ 5  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                                              @ 126  jdk.internal.math.DoubleToDecimal.rop(long, long, long):long (58 bytes)   relevance-based (relevance=2.000913, probability=0.048410, bonus=1.000000, nodes=20 <= 300.000000)
                                          @ 9  java.lang.AbstractStringBuilder.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=0.548829, bonus=1.000000, nodes=9)
                                              @ 140  jdk.internal.math.DoubleToDecimal.rop(long, long, long):long (58 bytes)   relevance-based (relevance=2.000913, probability=0.048410, bonus=1.000000, nodes=20 <= 300.000000)
                                        @ 2  java.lang.AbstractStringBuilder.charAt(int):char (36 bytes)   relevance-based (relevance=1.000000, probability=0.548829, bonus=1.000000, nodes=19 <= 300.000000)
                                            @ 135  jdk.internal.math.DoubleToDecimal.toDecimal(int, long, int, FormattedFPDecimal):int (385 bytes)   not inlining relevance-based (relevance=0.536126, probability=0.048410, bonus=1.000000, nodes=164 > 160.837707)
                                      @ 60  java.lang.StringBuilder.charAt(int):char (6 bytes)   relevance-based (relevance=1.321110, probability=0.548829, bonus=1.000000, nodes=19 <= 300.000000)
                                          @ 10  jdk.internal.math.DoubleToDecimal.toDecimal(double, FormattedFPDecimal):int (220 bytes)   relevance-based (relevance=0.791084, probability=0.122937, bonus=1.000000, nodes=82 <= 237.325182)
                            @ 13  java.text.DecimalFormatSymbols.getDecimalSeparator():char (5 bytes)   inline accessor method (bytecode parsing)
                                        @ 12  jdk.internal.math.DoubleToDecimal.split(double, FormattedFPDecimal):void (15 bytes)   relevance-based (relevance=0.791084, probability=0.122937, bonus=1.000000, nodes=92 <= 237.325182)
                            @ 9  java.text.DecimalFormatSymbols.getLocale():Locale (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 13  java.util.Locale.equals(Object):boolean (75 bytes)   trivial (relevance=0.602953, probability=0.164556, bonus=1.000000, nodes=8)
                                        @ 10  java.util.Formatter.getDecimalFormatSymbols(Locale):DecimalFormatSymbols (32 bytes)   relevance-based (relevance=0.602953, probability=0.164556, bonus=1.000000, nodes=15 <= 180.886049)
                                      @ 92  java.util.Formatter.getDecimalSeparator(Locale):char (17 bytes)   relevance-based (relevance=0.602953, probability=0.164556, bonus=1.000000, nodes=20 <= 180.886049)
                            @ 64  jdk.internal.math.MathUtils.pow10(int):long (6 bytes)   inline method (bytecode parsing)
                            @ 119  jdk.internal.math.MathUtils.pow10(int):long (6 bytes)   inline method (bytecode parsing)
                            @ 5  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                                          @ 14  jdk.internal.math.FormattedFPDecimal.round(long):void (149 bytes)   relevance-based (relevance=1.000000, probability=0.122937, bonus=1.000000, nodes=55 <= 300.000000)
                                          @ 9  java.lang.AbstractStringBuilder.isLatin1():boolean (19 bytes)   trivial (relevance=0.925096, probability=1.371188, bonus=1.000000, nodes=9)
                                        @ 2  java.lang.AbstractStringBuilder.charAt(int):char (36 bytes)   relevance-based (relevance=0.925096, probability=1.371188, bonus=1.000000, nodes=19 <= 277.528712)
                                      @ 274  java.lang.StringBuilder.charAt(int):char (6 bytes)   relevance-based (relevance=0.925096, probability=1.371188, bonus=1.000000, nodes=19 <= 277.528712)
                                      @ 2  java.lang.AbstractStringBuilder.append(char):AbstractStringBuilder (77 bytes)   not inlining too large previous low-level graph (low-level-nodes: 332, relevance=0.925096, probability=1.371188, bonus=1.000000, nodes=31)
                                              @ 29  jdk.internal.math.FormattedFPDecimal.fillWithZeros(int, int):void (20 bytes)   relevance-based (relevance=1.000000, probability=0.074528, bonus=1.000000, nodes=22 <= 300.000000)
                                      @ 2  java.lang.AbstractStringBuilder.append(char):AbstractStringBuilder (77 bytes)   not inlining too large previous low-level graph (low-level-nodes: 332, relevance=0.110996, probability=0.164520, bonus=1.000000, nodes=31)
                                    @ 358  java.util.Formatter$FormatSpecifier.localizedMagnitude(Formatter, StringBuilder, CharSequence, int, int, int, Locale):StringBuilder (381 bytes)   not inlining callee invoke probability is too high (invokeP=6.082656, relevance=0.925096, probability=0.252473, bonus=1.000000, nodes=136)
                            @ 30  jdk.internal.math.FormattedFPDecimal.toDigit(long):char (6 bytes)   inline method (bytecode parsing)
                                  @ 77  java.util.Formatter$FormatSpecifier.print(Formatter, StringBuilder, double, Locale, int, char, int, boolean):void (912 bytes)   relevance-based (relevance=0.791084, probability=0.252474, bonus=1.000000, nodes=215 <= 237.325182)
                              @ 2  jdk.internal.math.FormattedFPDecimal.toDigit(int):char (6 bytes)   inline method (bytecode parsing)
                                              @ 42  jdk.internal.math.FormattedFPDecimal.fillWithDigits(long, int, int):long (42 bytes)   relevance-based (relevance=1.000000, probability=0.074528, bonus=1.000000, nodes=37 <= 300.000000)
                                            @ 8  jdk.internal.math.FormattedFPDecimal.plainCharsPureInteger():void (47 bytes)   relevance-based (relevance=1.000000, probability=0.074528, bonus=1.000000, nodes=59 <= 300.000000)
                                @ 55  java.util.Formatter$FormatSpecifier.print(Formatter, double, Locale):void (158 bytes)   not inlining relevance-based (relevance=0.722658, probability=0.252474, bonus=1.000000, nodes=265 > 216.797386)
                              @ 146  java.util.Formatter$FormatSpecifier.printFloat(Formatter, Object, Locale):void (91 bytes)   relevance-based (relevance=0.722658, probability=0.252474, bonus=1.000000, nodes=23 <= 216.797386)
                            @ 30  jdk.internal.math.FormattedFPDecimal.toDigit(long):char (6 bytes)   inline method (bytecode parsing)
                              @ 2  jdk.internal.math.FormattedFPDecimal.toDigit(int):char (6 bytes)   inline method (bytecode parsing)
                            @ 4  java.lang.StringBuilder.<init>():void (7 bytes)   inline method (bytecode parsing)
                                              @ 34  jdk.internal.math.FormattedFPDecimal.fillWithDigits(long, int, int):long (42 bytes)   relevance-based (relevance=0.245180, probability=0.018273, bonus=1.000000, nodes=37 <= 73.553934)
                            @ 30  jdk.internal.math.FormattedFPDecimal.toDigit(long):char (6 bytes)   inline method (bytecode parsing)
                              @ 2  jdk.internal.math.FormattedFPDecimal.toDigit(int):char (6 bytes)   inline method (bytecode parsing)
                                    @ 3  java.lang.AbstractStringBuilder.<init>(int):void (39 bytes)   relevance-based (relevance=0.395643, probability=0.138225, bonus=1.000000, nodes=11 <= 118.692810)
                                              @ 66  jdk.internal.math.FormattedFPDecimal.fillWithDigits(long, int, int):long (42 bytes)   relevance-based (relevance=0.245180, probability=0.018273, bonus=1.000000, nodes=37 <= 73.553934)
                                            @ 27  jdk.internal.math.FormattedFPDecimal.plainCharsMixed():void (71 bytes)   not inlining relevance-based (relevance=0.245180, probability=0.018273, bonus=1.000000, nodes=77 > 73.553934)
                            @ 28  java.lang.String.<init>(byte[], byte):void (15 bytes)   inline method (bytecode parsing)
                            @ 53  jdk.internal.math.FormattedFPDecimal.fillWithZeros(int, int):void (20 bytes)   inline method (bytecode parsing)
                                        @ 1  java.lang.Long.stringSize(long):int (55 bytes)   relevance-based (relevance=0.395643, probability=0.138225, bonus=1.000000, nodes=34 <= 118.692810)
                            @ 30  jdk.internal.math.FormattedFPDecimal.toDigit(long):char (6 bytes)   inline method (bytecode parsing)
                              @ 2  jdk.internal.math.FormattedFPDecimal.toDigit(int):char (6 bytes)   inline method (bytecode parsing)
                                              @ 36  jdk.internal.math.FormattedFPDecimal.fillWithDigits(long, int, int):long (42 bytes)   relevance-based (relevance=0.404377, probability=0.030137, bonus=1.000000, nodes=37 <= 121.313184)
                                            @ 34  jdk.internal.math.FormattedFPDecimal.plainCharsPureFraction():void (65 bytes)   relevance-based (relevance=0.404377, probability=0.030137, bonus=1.000000, nodes=70 <= 121.313184)
                                        @ 18  java.lang.Long.getChars(long, int, byte[]):int (195 bytes)   relevance-based (relevance=0.395643, probability=0.138225, bonus=1.000000, nodes=61 <= 118.692810)
                                          @ 18  jdk.internal.math.FormattedFPDecimal.plainChars():FormattedFPDecimal (39 bytes)   relevance-based (relevance=1.649557, probability=0.122937, bonus=1.000000, nodes=139 <= 300.000000)
                                      @ 21  java.lang.Long.toString(long):String (55 bytes)   relevance-based (relevance=0.395643, probability=0.138225, bonus=1.000000, nodes=95 <= 118.692810)
                                        @ 56  jdk.internal.math.FormattedFPDecimal.plain(int):FormattedFPDecimal (22 bytes)   relevance-based (relevance=1.361497, probability=0.122937, bonus=1.000000, nodes=195 <= 300.000000)
                                    @ 34  java.lang.Long.toString(long, int):String (139 bytes)   relevance-based (relevance=0.395643, probability=0.138225, bonus=1.000000, nodes=97 <= 118.692810)
                                      @ 266  jdk.internal.math.FormattedFPDecimal.valueOf(double, int, char):FormattedFPDecimal (96 bytes)   not inlining relevance-based (relevance=0.791084, probability=0.122937, bonus=1.000000, nodes=282 > 237.325182)
                                  @ 62  java.util.Formatter$FormatSpecifier.print(Formatter, long, Locale):void (357 bytes)   not inlining relevance-based (relevance=0.395643, probability=0.138225, bonus=1.000000, nodes=131 > 118.692810)
                                @ 78  java.util.Formatter$FormatSpecifier.print(Formatter, int, Locale):void (66 bytes)   relevance-based (relevance=0.395643, probability=0.138225, bonus=1.000000, nodes=14 <= 118.692810)
                              @ 136  java.util.Formatter$FormatSpecifier.printInteger(Formatter, Object, Locale):void (137 bytes)   relevance-based (relevance=0.395643, probability=0.138225, bonus=1.000000, nodes=30 <= 118.692810)
                                      @ 3  java.lang.AbstractStringBuilder.<init>(int):void (39 bytes)   relevance-based (relevance=0.791084, probability=0.122937, bonus=1.000000, nodes=11 <= 237.325182)
                            @ 27  java.lang.Character.toString():String (8 bytes)   inline method (bytecode parsing)
                            @ 18  java.lang.StringLatin1.toBytes(char):byte[] (9 bytes)   inline method (bytecode parsing)
                            @ 22  java.lang.String.<init>(byte[], byte):void (15 bytes)   inline method (bytecode parsing)
                                  @ 7  java.lang.StringLatin1.canEncode(int):boolean (13 bytes)   trivial (relevance=1.000000, probability=0.349368, bonus=1.000000, nodes=8)
                                              @ 3  java.lang.Math.max(int, int):int (11 bytes)   trivial (relevance=0.134013, probability=0.017809, bonus=1.000000, nodes=7)
                                @ 4  java.lang.String.valueOf(char):String (39 bytes)   relevance-based (relevance=1.000000, probability=0.349368, bonus=1.000000, nodes=22 <= 300.000000)
                                            @ 29  jdk.internal.util.ArraysSupport.newLength(int, int, int):int (27 bytes)   relevance-based (relevance=0.134013, probability=0.017809, bonus=1.000000, nodes=15 <= 40.203932)
                                          @ 24  java.lang.AbstractStringBuilder.newCapacity(int):int (59 bytes)   relevance-based (relevance=0.134013, probability=0.017809, bonus=1.000000, nodes=27 <= 40.203932)
                            @ 34  java.util.Formatter$Flags.contains(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 2  java.lang.StringBuilder.append(CharSequence):StringBuilder (8 bytes)   inline method (bytecode parsing)
                                            @ 25  java.lang.Math.min(int, int):int (11 bytes)   trivial (relevance=0.134014, probability=0.017807, bonus=1.000000, nodes=7)
                                          @ 32  java.util.Arrays.copyOf(byte[], int):byte[] (33 bytes)   relevance-based (relevance=0.134013, probability=0.017809, bonus=1.000000, nodes=28 <= 40.203932)
                                        @ 10  java.lang.AbstractStringBuilder.ensureCapacityInternal(int):void (39 bytes)   relevance-based (relevance=0.791084, probability=0.122937, bonus=1.000000, nodes=72 <= 237.325182)
                                      @ 2  java.lang.AbstractStringBuilder.append(CharSequence):AbstractStringBuilder (54 bytes)   not inlining too large previous low-level graph (low-level-nodes: 399, relevance=1.000000, probability=0.349368, bonus=1.000000, nodes=8)
                                    @ 10  java.lang.StringBuilder.append(CharSequence):Appendable (6 bytes)   trivial (relevance=1.000000, probability=0.349368, bonus=1.000000, nodes=9)
                                  @ 53  java.util.Formatter$FormatSpecifier.appendJustified(Appendable, CharSequence):void (89 bytes)   relevance-based (relevance=1.000000, probability=0.349368, bonus=1.000000, nodes=23 <= 300.000000)
                                @ 211  java.util.Formatter$FormatSpecifier.print(Formatter, String, Locale):void (57 bytes)   relevance-based (relevance=1.000000, probability=0.349368, bonus=1.000000, nodes=33 <= 300.000000)
                              @ 156  java.util.Formatter$FormatSpecifier.printCharacter(Formatter, Object, Locale):void (215 bytes)   relevance-based (relevance=1.000000, probability=0.349368, bonus=1.000000, nodes=65 <= 300.000000)
                                          @ 7  java.lang.AbstractStringBuilder.isLatin1():boolean (19 bytes)   trivial (relevance=0.925096, probability=0.122937, bonus=1.000000, nodes=9)
                                          @ 40  java.lang.StringLatin1.canEncode(int):boolean (13 bytes)   trivial (relevance=0.925096, probability=0.504647, bonus=1.000000, nodes=8)
                                        @ 17  java.lang.AbstractStringBuilder.appendChars(char[], int, int):void (130 bytes)   relevance-based (relevance=0.925096, probability=0.122937, bonus=1.000000, nodes=37 <= 277.528712)
                                      @ 2  java.lang.AbstractStringBuilder.append(char[]):AbstractStringBuilder (22 bytes)   relevance-based (relevance=0.791084, probability=0.122937, bonus=1.000000, nodes=106 <= 237.325182)
                            @ 1  java.lang.StringBuilder.length():int (5 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.AbstractStringBuilder.length():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 17  java.lang.StringBuilder.charAt(int):char (6 bytes)   inline method (bytecode parsing)
                            @ 98  java.lang.StringBuilder.append(char):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 5  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                                          @ 9  java.lang.AbstractStringBuilder.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=0.213582, bonus=1.000000, nodes=9)
                                        @ 2  java.lang.AbstractStringBuilder.charAt(int):char (36 bytes)   relevance-based (relevance=1.195157, probability=0.213582, bonus=1.000000, nodes=19 <= 300.000000)
                                        @ 2  java.lang.AbstractStringBuilder.append(char):AbstractStringBuilder (77 bytes)   not inlining too large previous low-level graph (low-level-nodes: 332, relevance=0.561929, probability=0.074675, bonus=1.000000, nodes=29)
                            @ 10  java.lang.StringBuilder.append(char):StringBuilder (8 bytes)   inline method (bytecode parsing)
                                          @ 2  java.lang.AbstractStringBuilder.append(char):AbstractStringBuilder (77 bytes)   not inlining too large previous low-level graph (low-level-nodes: 332, relevance=0.563993, probability=0.449283, bonus=1.000000, nodes=29)
                                        @ 108  java.util.Formatter$FormatSpecifier.trailingZeros(StringBuilder, int):void (21 bytes)   not inlining callee invoke probability is too high (invokeP=5.994448, relevance=0.563993, probability=0.074950, bonus=1.000000, nodes=23)
                                      @ 293  java.util.Formatter$FormatSpecifier.addZeros(StringBuilder, int):void (112 bytes)   relevance-based (relevance=0.925096, probability=0.122937, bonus=1.000000, nodes=70 <= 277.528712)
                            @ 1  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                            @ 13  java.lang.StringBuilder.length():int (5 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.AbstractStringBuilder.length():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  java.lang.Double.doubleValue():double (5 bytes)   inline method (bytecode parsing)
                            @ 101  java.util.Formatter$Flags.contains(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 261  java.lang.StringBuilder.append(char):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 291  java.lang.StringBuilder.append(char):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 337  java.lang.StringBuilder.length():int (5 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.AbstractStringBuilder.length():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 13  java.text.DecimalFormatSymbols.getZeroDigit():char (5 bytes)   inline accessor method (bytecode parsing)
                            @ 9  java.text.DecimalFormatSymbols.getLocale():Locale (5 bytes)   inline accessor method (bytecode parsing)
                                            @ 13  java.util.Locale.equals(Object):boolean (75 bytes)   trivial (relevance=0.925096, probability=0.122937, bonus=1.000000, nodes=8)
                                          @ 10  java.util.Formatter.getDecimalFormatSymbols(Locale):DecimalFormatSymbols (32 bytes)   relevance-based (relevance=0.925096, probability=0.122937, bonus=1.000000, nodes=15 <= 277.528712)
                                        @ 20  java.util.Formatter.getZero(Locale):char (17 bytes)   relevance-based (relevance=0.925096, probability=0.122937, bonus=1.000000, nodes=20 <= 277.528712)
                            @ 1  java.lang.AbstractStringBuilder.length():int (5 bytes)   inline accessor method (bytecode parsing)
                                        @ 35  java.lang.StringBuilder.length():int (5 bytes)   trivial (relevance=0.925096, probability=0.122937, bonus=1.000000, nodes=5)
                            @ 5  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                                            @ 9  java.lang.AbstractStringBuilder.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=0.268538, bonus=1.000000, nodes=9)
                                          @ 2  java.lang.AbstractStringBuilder.charAt(int):char (36 bytes)   relevance-based (relevance=1.000000, probability=0.268538, bonus=1.000000, nodes=19 <= 300.000000)
                                        @ 60  java.lang.StringBuilder.charAt(int):char (6 bytes)   relevance-based (relevance=1.324661, probability=0.268538, bonus=1.000000, nodes=19 <= 300.000000)
                            @ 13  java.text.DecimalFormatSymbols.getDecimalSeparator():char (5 bytes)   inline accessor method (bytecode parsing)
                            @ 9  java.text.DecimalFormatSymbols.getLocale():Locale (5 bytes)   inline accessor method (bytecode parsing)
                                            @ 13  java.util.Locale.equals(Object):boolean (75 bytes)   trivial (relevance=0.609594, probability=0.081010, bonus=1.000000, nodes=8)
                                          @ 10  java.util.Formatter.getDecimalFormatSymbols(Locale):DecimalFormatSymbols (32 bytes)   relevance-based (relevance=0.609594, probability=0.081010, bonus=1.000000, nodes=15 <= 182.878215)
                                        @ 92  java.util.Formatter.getDecimalSeparator(Locale):char (17 bytes)   relevance-based (relevance=0.609594, probability=0.081010, bonus=1.000000, nodes=20 <= 182.878215)
                            @ 5  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                                            @ 9  java.lang.AbstractStringBuilder.isLatin1():boolean (19 bytes)   trivial (relevance=0.925096, probability=0.673380, bonus=1.000000, nodes=9)
                                          @ 2  java.lang.AbstractStringBuilder.charAt(int):char (36 bytes)   relevance-based (relevance=0.925096, probability=0.673380, bonus=1.000000, nodes=19 <= 277.528712)
                                        @ 274  java.lang.StringBuilder.charAt(int):char (6 bytes)   relevance-based (relevance=0.925096, probability=0.673380, bonus=1.000000, nodes=19 <= 277.528712)
                                        @ 2  java.lang.AbstractStringBuilder.append(char):AbstractStringBuilder (77 bytes)   not inlining too large previous low-level graph (low-level-nodes: 332, relevance=0.925096, probability=0.673380, bonus=1.000000, nodes=31)
                                        @ 2  java.lang.AbstractStringBuilder.append(char):AbstractStringBuilder (77 bytes)   not inlining too large previous low-level graph (low-level-nodes: 332, relevance=0.111267, probability=0.080991, bonus=1.000000, nodes=31)
                                      @ 358  java.util.Formatter$FormatSpecifier.localizedMagnitude(Formatter, StringBuilder, CharSequence, int, int, int, Locale):StringBuilder (381 bytes)   not inlining callee invoke probability is too high (invokeP=6.136236, relevance=0.925096, probability=0.122937, bonus=1.000000, nodes=136)
                                    @ 77  java.util.Formatter$FormatSpecifier.print(Formatter, StringBuilder, double, Locale, int, char, int, boolean):void (912 bytes)   relevance-based (relevance=0.791084, probability=0.122937, bonus=1.000000, nodes=215 <= 237.325182)
                                  @ 55  java.util.Formatter$FormatSpecifier.print(Formatter, double, Locale):void (158 bytes)   not inlining relevance-based (relevance=0.722658, probability=0.122937, bonus=1.000000, nodes=265 > 216.797386)
                                @ 146  java.util.Formatter$FormatSpecifier.printFloat(Formatter, Object, Locale):void (91 bytes)   relevance-based (relevance=0.722658, probability=0.122937, bonus=1.000000, nodes=23 <= 216.797386)
                            @ 4  java.lang.StringBuilder.<init>():void (7 bytes)   inline method (bytecode parsing)
                                      @ 3  java.lang.AbstractStringBuilder.<init>(int):void (39 bytes)   relevance-based (relevance=0.395643, probability=0.067306, bonus=1.000000, nodes=11 <= 118.692810)
                            @ 28  java.lang.String.<init>(byte[], byte):void (15 bytes)   inline method (bytecode parsing)
                                          @ 1  java.lang.Long.stringSize(long):int (55 bytes)   relevance-based (relevance=0.395643, probability=0.067306, bonus=1.000000, nodes=34 <= 118.692810)
                                          @ 18  java.lang.Long.getChars(long, int, byte[]):int (195 bytes)   relevance-based (relevance=0.395643, probability=0.067306, bonus=1.000000, nodes=61 <= 118.692810)
                                        @ 21  java.lang.Long.toString(long):String (55 bytes)   relevance-based (relevance=0.395643, probability=0.067306, bonus=1.000000, nodes=95 <= 118.692810)
                                      @ 34  java.lang.Long.toString(long, int):String (139 bytes)   relevance-based (relevance=0.395643, probability=0.067306, bonus=1.000000, nodes=97 <= 118.692810)
                                    @ 62  java.util.Formatter$FormatSpecifier.print(Formatter, long, Locale):void (357 bytes)   not inlining relevance-based (relevance=0.395643, probability=0.067306, bonus=1.000000, nodes=131 > 118.692810)
                                  @ 78  java.util.Formatter$FormatSpecifier.print(Formatter, int, Locale):void (66 bytes)   relevance-based (relevance=0.395643, probability=0.067306, bonus=1.000000, nodes=14 <= 118.692810)
                                @ 136  java.util.Formatter$FormatSpecifier.printInteger(Formatter, Object, Locale):void (137 bytes)   relevance-based (relevance=0.395643, probability=0.067306, bonus=1.000000, nodes=30 <= 118.692810)
                            @ 27  java.lang.Character.toString():String (8 bytes)   inline method (bytecode parsing)
                            @ 18  java.lang.StringLatin1.toBytes(char):byte[] (9 bytes)   inline method (bytecode parsing)
                            @ 22  java.lang.String.<init>(byte[], byte):void (15 bytes)   inline method (bytecode parsing)
                                    @ 7  java.lang.StringLatin1.canEncode(int):boolean (13 bytes)   trivial (relevance=1.000000, probability=0.170118, bonus=1.000000, nodes=8)
                                  @ 4  java.lang.String.valueOf(char):String (39 bytes)   relevance-based (relevance=1.000000, probability=0.170118, bonus=1.000000, nodes=22 <= 300.000000)
                            @ 34  java.util.Formatter$Flags.contains(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 2  java.lang.StringBuilder.append(CharSequence):StringBuilder (8 bytes)   inline method (bytecode parsing)
                                        @ 2  java.lang.AbstractStringBuilder.append(CharSequence):AbstractStringBuilder (54 bytes)   not inlining too large previous low-level graph (low-level-nodes: 399, relevance=1.000000, probability=0.170118, bonus=1.000000, nodes=8)
                                      @ 10  java.lang.StringBuilder.append(CharSequence):Appendable (6 bytes)   trivial (relevance=1.000000, probability=0.170118, bonus=1.000000, nodes=9)
                                    @ 53  java.util.Formatter$FormatSpecifier.appendJustified(Appendable, CharSequence):void (89 bytes)   relevance-based (relevance=1.000000, probability=0.170118, bonus=1.000000, nodes=23 <= 300.000000)
                                  @ 211  java.util.Formatter$FormatSpecifier.print(Formatter, String, Locale):void (57 bytes)   relevance-based (relevance=1.000000, probability=0.170118, bonus=1.000000, nodes=33 <= 300.000000)
                                @ 156  java.util.Formatter$FormatSpecifier.printCharacter(Formatter, Object, Locale):void (215 bytes)   relevance-based (relevance=1.000000, probability=0.170118, bonus=1.000000, nodes=65 <= 300.000000)
                              @ 205  java.util.Formatter$FormatSpecifier.print(Formatter, Object, Locale):void (234 bytes)   relevance-based (relevance=1.000010, probability=0.486931, bonus=1.000000, nodes=162 <= 300.000000)
                            @ 4  java.lang.StringBuilder.append(CharSequence, int, int):StringBuilder (10 bytes)   inline method (bytecode parsing)
                                      @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=0.730058, probability=0.355485, bonus=1.000000, nodes=5)
                                    @ 10  java.lang.String.length():int (11 bytes)   trivial (relevance=0.730058, probability=0.355485, bonus=1.000000, nodes=8)
                                    @ 18  jdk.internal.util.Preconditions.checkFromToIndex(int, int, int, BiFunction):int (24 bytes)   relevance-based (relevance=0.730058, probability=0.355485, bonus=1.000000, nodes=14 <= 219.017289)
                                          @ 3  java.lang.Math.max(int, int):int (11 bytes)   trivial (relevance=0.123675, probability=0.051497, bonus=1.000000, nodes=7)
                                        @ 29  jdk.internal.util.ArraysSupport.newLength(int, int, int):int (27 bytes)   relevance-based (relevance=0.123675, probability=0.051497, bonus=1.000000, nodes=15 <= 37.102494)
                                      @ 24  java.lang.AbstractStringBuilder.newCapacity(int):int (59 bytes)   relevance-based (relevance=0.123675, probability=0.051497, bonus=1.000000, nodes=27 <= 37.102494)
                                        @ 25  java.lang.Math.min(int, int):int (11 bytes)   trivial (relevance=0.123676, probability=0.051490, bonus=1.000000, nodes=7)
                                      @ 32  java.util.Arrays.copyOf(byte[], int):byte[] (33 bytes)   relevance-based (relevance=0.123675, probability=0.051497, bonus=1.000000, nodes=28 <= 37.102494)
                                    @ 35  java.lang.AbstractStringBuilder.ensureCapacityInternal(int):void (39 bytes)   relevance-based (relevance=0.730058, probability=0.355485, bonus=1.000000, nodes=72 <= 219.017289)
                            @ 15  java.lang.String.value():byte[] (5 bytes)   inline accessor method (bytecode parsing)
                                      @ 1  java.lang.AbstractStringBuilder.isLatin1():boolean (19 bytes)   trivial (relevance=0.853740, probability=0.355484, bonus=1.000000, nodes=9)
                                      @ 8  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=0.853740, probability=0.355484, bonus=1.000000, nodes=9)
                                    @ 52  java.lang.AbstractStringBuilder.appendChars(String, int, int):void (207 bytes)   relevance-based (relevance=0.853731, probability=0.355484, bonus=1.000000, nodes=38 <= 256.119412)
                              @ 40  java.lang.StringLatin1.canEncode(int):boolean (13 bytes)   trivial (relevance=1.000000, probability=0.804110, bonus=1.000000, nodes=8)
                                  @ 4  java.lang.AbstractStringBuilder.append(CharSequence, int, int):AbstractStringBuilder (67 bytes)   relevance-based (relevance=0.730058, probability=0.355485, bonus=1.000000, nodes=122 <= 219.017289)
                              @ 40  java.lang.StringLatin1.canEncode(int):boolean (13 bytes)   trivial (relevance=1.000000, probability=2.496697, bonus=1.000000, nodes=8)
                                @ 16  java.lang.StringBuilder.append(CharSequence, int, int):Appendable (8 bytes)   relevance-based (relevance=0.730058, probability=0.355485, bonus=1.000000, nodes=124 <= 219.017289)
                              @ 89  java.util.Formatter$FixedString.print(Formatter, Object, Locale):void (23 bytes)   relevance-based (relevance=0.730058, probability=0.355485, bonus=1.000000, nodes=135 <= 219.017289)
                              @ 27  java.util.ArrayList$Itr.hasNext():boolean (20 bytes)   relevance-based (relevance=2.128145, probability=4.503407, bonus=1.000000, nodes=11 <= 300.000000)
                                @ 1  java.util.ArrayList$Itr.checkForComodification():void (23 bytes)   trivial (relevance=1.000000, probability=3.660991, bonus=1.000000, nodes=9)
                              @ 37  java.util.ArrayList$Itr.next():Object (66 bytes)   relevance-based (relevance=1.730050, probability=3.660991, bonus=1.000000, nodes=25 <= 300.000000)
                              @ 49  java.util.Formatter$FormatSpecifier.index():int (5 bytes)   trivial (relevance=1.730050, probability=3.660991, bonus=1.000000, nodes=9)
                            @ 58  java.util.Formatter$Flags.contains(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                                  @ 89  java.lang.String.toString():String (2 bytes)   trivial (relevance=0.744009, probability=0.550049, bonus=1.000000, nodes=4)
                            @ 34  java.util.Formatter$Flags.contains(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 2  java.lang.StringBuilder.append(CharSequence):StringBuilder (8 bytes)   inline method (bytecode parsing)
                                        @ 2  java.lang.AbstractStringBuilder.append(CharSequence):AbstractStringBuilder (54 bytes)   not inlining too large previous low-level graph (low-level-nodes: 399, relevance=0.744009, probability=0.550049, bonus=1.000000, nodes=8)
                                      @ 10  java.lang.StringBuilder.append(CharSequence):Appendable (6 bytes)   trivial (relevance=0.744009, probability=0.550049, bonus=1.000000, nodes=9)
                                    @ 53  java.util.Formatter$FormatSpecifier.appendJustified(Appendable, CharSequence):void (89 bytes)   relevance-based (relevance=0.744009, probability=0.550049, bonus=1.000000, nodes=23 <= 223.202614)
                                  @ 93  java.util.Formatter$FormatSpecifier.print(Formatter, String, Locale):void (57 bytes)   relevance-based (relevance=0.744009, probability=0.550049, bonus=1.000000, nodes=33 <= 223.202614)
                                @ 176  java.util.Formatter$FormatSpecifier.printString(Formatter, Object, Locale):void (97 bytes)   relevance-based (relevance=0.744009, probability=0.550049, bonus=1.000000, nodes=51 <= 223.202614)
                            @ 4  java.lang.StringBuilder.<init>():void (7 bytes)   inline method (bytecode parsing)
                                    @ 3  java.lang.AbstractStringBuilder.<init>(int):void (39 bytes)   relevance-based (relevance=0.722658, probability=0.534264, bonus=1.000000, nodes=11 <= 216.797386)
                                    @ 11  java.lang.Double.compare(double, double):int (54 bytes)   relevance-based (relevance=0.722658, probability=0.534264, bonus=1.000000, nodes=25 <= 216.797386)
                                    @ 26  java.lang.Double.isNaN(double):boolean (12 bytes)   trivial (relevance=0.791084, probability=0.534264, bonus=1.000000, nodes=7)
                            @ 10  java.util.Formatter$Flags.contains(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 32  java.util.Formatter$Flags.contains(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                                    @ 43  java.util.Formatter$FormatSpecifier.leadingSign(StringBuilder, boolean):StringBuilder (80 bytes)   relevance-based (relevance=0.791084, probability=0.534264, bonus=1.000000, nodes=13 <= 237.325182)
                                    @ 49  java.lang.Double.isInfinite(double):boolean (17 bytes)   trivial (relevance=0.791084, probability=0.534264, bonus=1.000000, nodes=9)
                            @ 275  java.lang.StringBuilder.<init>():void (7 bytes)   inline method (bytecode parsing)
                            @ 280  jdk.internal.math.FormattedFPDecimal.getMantissa():char[] (5 bytes)   inline accessor method (bytecode parsing)
                            @ 283  java.lang.StringBuilder.append(char[]):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 299  java.util.Formatter$Flags.contains(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 4  jdk.internal.math.FormattedFPDecimal.<init>():void (5 bytes)   inline method (bytecode parsing)
                            @ 1  java.util.AbstractList.<init>():void (10 bytes)   inline method (bytecode parsing)
                              @ 1  java.util.AbstractCollection.<init>():void (5 bytes)   inline method (bytecode parsing)
                                          @ 5  jdk.internal.math.DoubleToDecimal.<init>(boolean):void (21 bytes)   trivial (relevance=0.791084, probability=0.534264, bonus=1.000000, nodes=9)
                              @ 4  java.util.ArrayList.<init>():void (12 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                                @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                            @ 15  jdk.internal.math.MathUtils.pow10(int):long (6 bytes)   inline method (bytecode parsing)
                              @ 11  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=8)
                                              @ 7  jdk.internal.math.MathUtils.flog10pow2(int):int (11 bytes)   relevance-based (relevance=0.825371, probability=0.323883, bonus=1.000000, nodes=10 <= 247.611359)
                                @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=3.713932, bonus=1.000000, nodes=9)
                                              @ 36  jdk.internal.math.FormattedFPDecimal.set(long, int, int):void (17 bytes)   relevance-based (relevance=0.825371, probability=0.323883, bonus=1.000000, nodes=13 <= 247.611359)
                                            @ 123  jdk.internal.math.DoubleToDecimal.toChars(long, int, FormattedFPDecimal):int (161 bytes)   relevance-based (relevance=0.791084, probability=0.323883, bonus=1.000000, nodes=36 <= 237.325182)
                                  @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=3.713932, bonus=1.000000, nodes=5)
                                @ 14  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000000, probability=3.713932, bonus=1.000000, nodes=8)
                            @ 11  java.lang.Math.max(int, int):int (11 bytes)   inline method (bytecode parsing)
                                  @ 1  java.lang.StringLatin1.canEncode(int):boolean (13 bytes)   trivial (relevance=1.002114, probability=3.713932, bonus=1.000000, nodes=5)
                                              @ 57  jdk.internal.math.MathUtils.flog10pow2(int):int (11 bytes)   relevance-based (relevance=2.000913, probability=0.210381, bonus=1.000000, nodes=10 <= 300.000000)
                                  @ 18  java.lang.Math.min(int, int):int (11 bytes)   trivial (relevance=1.002114, probability=3.713932, bonus=1.000000, nodes=7)
                                              @ 81  jdk.internal.math.MathUtils.flog2pow10(int):int (11 bytes)   relevance-based (relevance=2.000913, probability=0.210381, bonus=1.000000, nodes=10 <= 300.000000)
                                @ 17  java.lang.StringLatin1.indexOf(byte[], int, int, int):int (37 bytes)   relevance-based (relevance=1.000000, probability=3.713932, bonus=1.000000, nodes=21 <= 300.000000)
                              @ 27  java.lang.String.indexOf(int, int):int (37 bytes)   relevance-based (relevance=2.281429, probability=3.713932, bonus=1.000000, nodes=32 <= 300.000000)
                                              @ 91  jdk.internal.math.MathUtils.g1(int):long (12 bytes)   relevance-based (relevance=2.000913, probability=0.210381, bonus=1.000000, nodes=10 <= 300.000000)
                                              @ 98  jdk.internal.math.MathUtils.g0(int):long (14 bytes)   relevance-based (relevance=2.000913, probability=0.210381, bonus=1.000000, nodes=11 <= 300.000000)
                              @ 70  java.util.Formatter$FixedString.<init>(String, int, int):void (20 bytes)   relevance-based (relevance=0.439248, probability=1.627897, bonus=1.000000, nodes=14 <= 131.774538)
                                              @ 112  jdk.internal.math.DoubleToDecimal.rop(long, long, long):long (58 bytes)   relevance-based (relevance=2.000913, probability=0.210381, bonus=1.000000, nodes=20 <= 300.000000)
                              @ 73  java.util.ArrayList.add(Object):boolean (25 bytes)   not inlining too large previous low-level graph (low-level-nodes: 501, relevance=0.439248, probability=1.627897, bonus=1.000000, nodes=15)
                                              @ 126  jdk.internal.math.DoubleToDecimal.rop(long, long, long):long (58 bytes)   relevance-based (relevance=2.000913, probability=0.210381, bonus=1.000000, nodes=20 <= 300.000000)
                              @ 45  java.util.Formatter$FixedString.<init>(String, int, int):void (20 bytes)   relevance-based (relevance=0.626268, probability=0.626268, bonus=1.000000, nodes=14 <= 187.880442)
                                              @ 140  jdk.internal.math.DoubleToDecimal.rop(long, long, long):long (58 bytes)   relevance-based (relevance=2.000913, probability=0.210381, bonus=1.000000, nodes=20 <= 300.000000)
                                            @ 135  jdk.internal.math.DoubleToDecimal.toDecimal(int, long, int, FormattedFPDecimal):int (385 bytes)   not inlining relevance-based (relevance=0.536126, probability=0.210381, bonus=1.000000, nodes=164 > 160.837707)
                              @ 48  java.util.ArrayList.add(Object):boolean (25 bytes)   not inlining too large previous low-level graph (low-level-nodes: 501, relevance=0.626268, probability=0.626268, bonus=1.000000, nodes=15)
                                          @ 10  jdk.internal.math.DoubleToDecimal.toDecimal(double, FormattedFPDecimal):int (220 bytes)   relevance-based (relevance=0.791084, probability=0.534264, bonus=1.000000, nodes=82 <= 237.325182)
                                @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=0.833131, probability=3.087664, bonus=1.000000, nodes=9)
                            @ 3  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                                        @ 12  jdk.internal.math.DoubleToDecimal.split(double, FormattedFPDecimal):void (15 bytes)   relevance-based (relevance=0.791084, probability=0.534264, bonus=1.000000, nodes=92 <= 237.325182)
                                @ 12  java.lang.StringLatin1.charAt(byte[], int):char (15 bytes)   relevance-based (relevance=0.833131, probability=3.087664, bonus=1.000000, nodes=11 <= 249.939301)
                              @ 99  java.lang.String.charAt(int):char (25 bytes)   relevance-based (relevance=0.833131, probability=3.087664, bonus=1.000000, nodes=16 <= 249.939301)
                              @ 106  java.util.Formatter$Conversion.isValid(char):boolean (358 bytes)   trivial (relevance=0.833131, probability=3.087664, bonus=1.000000, nodes=9)
                            @ 64  jdk.internal.math.MathUtils.pow10(int):long (6 bytes)   inline method (bytecode parsing)
                            @ 119  jdk.internal.math.MathUtils.pow10(int):long (6 bytes)   inline method (bytecode parsing)
                            @ 35  java.lang.Character.isUpperCase(char):boolean (5 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.Character.isUpperCase(int):boolean (9 bytes)   inline method (bytecode parsing)
                                          @ 14  jdk.internal.math.FormattedFPDecimal.round(long):void (149 bytes)   relevance-based (relevance=1.000000, probability=0.534264, bonus=1.000000, nodes=55 <= 300.000000)
                                @ 1  java.lang.CharacterData.of(int):CharacterData (136 bytes)   trivial (relevance=0.833131, probability=3.087664, bonus=1.000000, nodes=5)
                                  @ 2  java.lang.CharacterDataLatin1.getPropertiesEx(int):int (11 bytes)   trivial (relevance=0.833131, probability=3.087664, bonus=1.000000, nodes=6)
                                @ 5  java.lang.CharacterDataLatin1.isUpperCase(int):boolean (16 bytes)   relevance-based (relevance=0.833131, probability=3.087664, bonus=1.000000, nodes=11 <= 249.939301)
                                              @ 29  jdk.internal.math.FormattedFPDecimal.fillWithZeros(int, int):void (20 bytes)   relevance-based (relevance=1.000000, probability=0.323883, bonus=1.000000, nodes=22 <= 300.000000)
                                @ 55  java.util.Formatter$Conversion.isText(char):boolean (34 bytes)   trivial (relevance=0.833131, probability=3.087664, bonus=1.000000, nodes=9)
                            @ 30  jdk.internal.math.FormattedFPDecimal.toDigit(long):char (6 bytes)   inline method (bytecode parsing)
                              @ 119  java.util.Formatter$FormatSpecifier.<init>(char):void (68 bytes)   relevance-based (relevance=0.833131, probability=3.087664, bonus=1.000000, nodes=28 <= 249.939301)
                              @ 2  jdk.internal.math.FormattedFPDecimal.toDigit(int):char (6 bytes)   inline method (bytecode parsing)
                              @ 122  java.util.ArrayList.add(Object):boolean (25 bytes)   not inlining too large previous low-level graph (low-level-nodes: 501, relevance=0.833131, probability=3.087664, bonus=1.000000, nodes=15)
                                              @ 42  jdk.internal.math.FormattedFPDecimal.fillWithDigits(long, int, int):long (42 bytes)   relevance-based (relevance=1.000000, probability=0.323883, bonus=1.000000, nodes=37 <= 300.000000)
                                            @ 8  jdk.internal.math.FormattedFPDecimal.plainCharsPureInteger():void (47 bytes)   relevance-based (relevance=1.000000, probability=0.323883, bonus=1.000000, nodes=59 <= 300.000000)
                            @ 30  jdk.internal.math.FormattedFPDecimal.toDigit(long):char (6 bytes)   inline method (bytecode parsing)
                              @ 2  jdk.internal.math.FormattedFPDecimal.toDigit(int):char (6 bytes)   inline method (bytecode parsing)
                                              @ 34  jdk.internal.math.FormattedFPDecimal.fillWithDigits(long, int, int):long (42 bytes)   relevance-based (relevance=0.245180, probability=0.079410, bonus=1.000000, nodes=37 <= 73.553934)
                            @ 30  jdk.internal.math.FormattedFPDecimal.toDigit(long):char (6 bytes)   inline method (bytecode parsing)
                              @ 2  jdk.internal.math.FormattedFPDecimal.toDigit(int):char (6 bytes)   inline method (bytecode parsing)
                                              @ 66  jdk.internal.math.FormattedFPDecimal.fillWithDigits(long, int, int):long (42 bytes)   relevance-based (relevance=0.245180, probability=0.079410, bonus=1.000000, nodes=37 <= 73.553934)
                                            @ 27  jdk.internal.math.FormattedFPDecimal.plainCharsMixed():void (71 bytes)   not inlining relevance-based (relevance=0.245180, probability=0.079410, bonus=1.000000, nodes=77 > 73.553934)
                            @ 53  jdk.internal.math.FormattedFPDecimal.fillWithZeros(int, int):void (20 bytes)   inline method (bytecode parsing)
                            @ 30  jdk.internal.math.FormattedFPDecimal.toDigit(long):char (6 bytes)   inline method (bytecode parsing)
                              @ 2  jdk.internal.math.FormattedFPDecimal.toDigit(int):char (6 bytes)   inline method (bytecode parsing)
                                              @ 36  jdk.internal.math.FormattedFPDecimal.fillWithDigits(long, int, int):long (42 bytes)   relevance-based (relevance=0.404377, probability=0.130971, bonus=1.000000, nodes=37 <= 121.313184)
                                            @ 34  jdk.internal.math.FormattedFPDecimal.plainCharsPureFraction():void (65 bytes)   relevance-based (relevance=0.404377, probability=0.130971, bonus=1.000000, nodes=70 <= 121.313184)
                                          @ 18  jdk.internal.math.FormattedFPDecimal.plainChars():FormattedFPDecimal (39 bytes)   relevance-based (relevance=1.649557, probability=0.534264, bonus=1.000000, nodes=139 <= 300.000000)
                                        @ 56  jdk.internal.math.FormattedFPDecimal.plain(int):FormattedFPDecimal (22 bytes)   relevance-based (relevance=1.361497, probability=0.534264, bonus=1.000000, nodes=195 <= 300.000000)
                                      @ 266  jdk.internal.math.FormattedFPDecimal.valueOf(double, int, char):FormattedFPDecimal (96 bytes)   not inlining relevance-based (relevance=0.791084, probability=0.534264, bonus=1.000000, nodes=282 > 237.325182)
                                      @ 3  java.lang.AbstractStringBuilder.<init>(int):void (39 bytes)   relevance-based (relevance=0.791084, probability=0.534264, bonus=1.000000, nodes=11 <= 237.325182)
                                              @ 3  java.lang.Math.max(int, int):int (11 bytes)   trivial (relevance=0.134013, probability=0.077396, bonus=1.000000, nodes=7)
                                            @ 29  jdk.internal.util.ArraysSupport.newLength(int, int, int):int (27 bytes)   relevance-based (relevance=0.134013, probability=0.077396, bonus=1.000000, nodes=15 <= 40.203932)
                                          @ 24  java.lang.AbstractStringBuilder.newCapacity(int):int (59 bytes)   relevance-based (relevance=0.134013, probability=0.077396, bonus=1.000000, nodes=27 <= 40.203932)
                                            @ 25  java.lang.Math.min(int, int):int (11 bytes)   trivial (relevance=0.134014, probability=0.077385, bonus=1.000000, nodes=7)
                                          @ 32  java.util.Arrays.copyOf(byte[], int):byte[] (33 bytes)   relevance-based (relevance=0.134013, probability=0.077396, bonus=1.000000, nodes=28 <= 40.203932)
                                        @ 10  java.lang.AbstractStringBuilder.ensureCapacityInternal(int):void (39 bytes)   relevance-based (relevance=0.791084, probability=0.534264, bonus=1.000000, nodes=72 <= 237.325182)
                                          @ 7  java.lang.AbstractStringBuilder.isLatin1():boolean (19 bytes)   trivial (relevance=0.925096, probability=0.534264, bonus=1.000000, nodes=9)
                                          @ 40  java.lang.StringLatin1.canEncode(int):boolean (13 bytes)   trivial (relevance=0.925096, probability=2.193108, bonus=1.000000, nodes=8)
                                        @ 17  java.lang.AbstractStringBuilder.appendChars(char[], int, int):void (130 bytes)   relevance-based (relevance=0.925096, probability=0.534264, bonus=1.000000, nodes=37 <= 277.528712)
                                      @ 2  java.lang.AbstractStringBuilder.append(char[]):AbstractStringBuilder (22 bytes)   relevance-based (relevance=0.791084, probability=0.534264, bonus=1.000000, nodes=106 <= 237.325182)
                            @ 1  java.lang.StringBuilder.length():int (5 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.AbstractStringBuilder.length():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 17  java.lang.StringBuilder.charAt(int):char (6 bytes)   inline method (bytecode parsing)
                            @ 98  java.lang.StringBuilder.append(char):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 5  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                                          @ 9  java.lang.AbstractStringBuilder.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=0.928191, bonus=1.000000, nodes=9)
                                        @ 2  java.lang.AbstractStringBuilder.charAt(int):char (36 bytes)   relevance-based (relevance=1.195157, probability=0.928191, bonus=1.000000, nodes=19 <= 300.000000)
                                        @ 2  java.lang.AbstractStringBuilder.append(char):AbstractStringBuilder (77 bytes)   not inlining too large previous low-level graph (low-level-nodes: 332, relevance=0.561929, probability=0.324526, bonus=1.000000, nodes=29)
                            @ 10  java.lang.StringBuilder.append(char):StringBuilder (8 bytes)   inline method (bytecode parsing)
                                          @ 2  java.lang.AbstractStringBuilder.append(char):AbstractStringBuilder (77 bytes)   not inlining too large previous low-level graph (low-level-nodes: 332, relevance=0.563993, probability=1.952503, bonus=1.000000, nodes=29)
                                        @ 108  java.util.Formatter$FormatSpecifier.trailingZeros(StringBuilder, int):void (21 bytes)   not inlining callee invoke probability is too high (invokeP=5.994448, relevance=0.563993, probability=0.325719, bonus=1.000000, nodes=23)
                                      @ 293  java.util.Formatter$FormatSpecifier.addZeros(StringBuilder, int):void (112 bytes)   relevance-based (relevance=0.925096, probability=0.534264, bonus=1.000000, nodes=70 <= 277.528712)
                            @ 13  java.lang.StringBuilder.length():int (5 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.AbstractStringBuilder.length():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 101  java.util.Formatter$Flags.contains(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 261  java.lang.StringBuilder.append(char):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 291  java.lang.StringBuilder.append(char):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 337  java.lang.StringBuilder.length():int (5 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.AbstractStringBuilder.length():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 13  java.text.DecimalFormatSymbols.getZeroDigit():char (5 bytes)   inline accessor method (bytecode parsing)
                            @ 9  java.text.DecimalFormatSymbols.getLocale():Locale (5 bytes)   inline accessor method (bytecode parsing)
                                            @ 13  java.util.Locale.equals(Object):boolean (75 bytes)   trivial (relevance=0.925096, probability=0.534264, bonus=1.000000, nodes=8)
                                          @ 10  java.util.Formatter.getDecimalFormatSymbols(Locale):DecimalFormatSymbols (32 bytes)   relevance-based (relevance=0.925096, probability=0.534264, bonus=1.000000, nodes=15 <= 277.528712)
                                        @ 20  java.util.Formatter.getZero(Locale):char (17 bytes)   relevance-based (relevance=0.925096, probability=0.534264, bonus=1.000000, nodes=20 <= 277.528712)
                            @ 1  java.lang.AbstractStringBuilder.length():int (5 bytes)   inline accessor method (bytecode parsing)
                                        @ 35  java.lang.StringBuilder.length():int (5 bytes)   trivial (relevance=0.925096, probability=0.534264, bonus=1.000000, nodes=5)
                            @ 5  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                                            @ 9  java.lang.AbstractStringBuilder.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=1.167019, bonus=1.000000, nodes=9)
                                          @ 2  java.lang.AbstractStringBuilder.charAt(int):char (36 bytes)   relevance-based (relevance=1.000000, probability=1.167019, bonus=1.000000, nodes=19 <= 300.000000)
                                        @ 60  java.lang.StringBuilder.charAt(int):char (6 bytes)   relevance-based (relevance=1.324661, probability=1.167019, bonus=1.000000, nodes=19 <= 300.000000)
                            @ 13  java.text.DecimalFormatSymbols.getDecimalSeparator():char (5 bytes)   inline accessor method (bytecode parsing)
                            @ 9  java.text.DecimalFormatSymbols.getLocale():Locale (5 bytes)   inline accessor method (bytecode parsing)
                                            @ 13  java.util.Locale.equals(Object):boolean (75 bytes)   trivial (relevance=0.609594, probability=0.352054, bonus=1.000000, nodes=8)
                                          @ 10  java.util.Formatter.getDecimalFormatSymbols(Locale):DecimalFormatSymbols (32 bytes)   relevance-based (relevance=0.609594, probability=0.352054, bonus=1.000000, nodes=15 <= 182.878215)
                                        @ 92  java.util.Formatter.getDecimalSeparator(Locale):char (17 bytes)   relevance-based (relevance=0.609594, probability=0.352054, bonus=1.000000, nodes=20 <= 182.878215)
                            @ 5  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                                            @ 9  java.lang.AbstractStringBuilder.isLatin1():boolean (19 bytes)   trivial (relevance=0.925096, probability=2.926392, bonus=1.000000, nodes=9)
                                          @ 2  java.lang.AbstractStringBuilder.charAt(int):char (36 bytes)   relevance-based (relevance=0.925096, probability=2.926392, bonus=1.000000, nodes=19 <= 277.528712)
                                        @ 274  java.lang.StringBuilder.charAt(int):char (6 bytes)   relevance-based (relevance=0.925096, probability=2.926392, bonus=1.000000, nodes=19 <= 277.528712)
                                        @ 2  java.lang.AbstractStringBuilder.append(char):AbstractStringBuilder (77 bytes)   not inlining too large previous low-level graph (low-level-nodes: 332, relevance=0.925096, probability=2.926392, bonus=1.000000, nodes=31)
                                        @ 2  java.lang.AbstractStringBuilder.append(char):AbstractStringBuilder (77 bytes)   not inlining too large previous low-level graph (low-level-nodes: 332, relevance=0.111267, probability=0.351975, bonus=1.000000, nodes=31)
                                      @ 358  java.util.Formatter$FormatSpecifier.localizedMagnitude(Formatter, StringBuilder, CharSequence, int, int, int, Locale):StringBuilder (381 bytes)   not inlining callee invoke probability is too high (invokeP=6.136236, relevance=0.925096, probability=0.534264, bonus=1.000000, nodes=136)
                                    @ 77  java.util.Formatter$FormatSpecifier.print(Formatter, StringBuilder, double, Locale, int, char, int, boolean):void (912 bytes)   relevance-based (relevance=0.791084, probability=0.534264, bonus=1.000000, nodes=215 <= 237.325182)
                                  @ 55  java.util.Formatter$FormatSpecifier.print(Formatter, double, Locale):void (158 bytes)   not inlining relevance-based (relevance=0.722658, probability=0.534264, bonus=1.000000, nodes=265 > 216.797386)
                                @ 146  java.util.Formatter$FormatSpecifier.printFloat(Formatter, Object, Locale):void (91 bytes)   relevance-based (relevance=0.722658, probability=0.534264, bonus=1.000000, nodes=23 <= 216.797386)
                            @ 4  java.lang.StringBuilder.<init>():void (7 bytes)   inline method (bytecode parsing)
                                      @ 3  java.lang.AbstractStringBuilder.<init>(int):void (39 bytes)   relevance-based (relevance=0.395643, probability=0.292500, bonus=1.000000, nodes=11 <= 118.692810)
                              @ 7  java.lang.AbstractStringBuilder.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=9)
                            @ 28  java.lang.String.<init>(byte[], byte):void (15 bytes)   inline method (bytecode parsing)
                              @ 40  java.lang.StringLatin1.canEncode(int):boolean (13 bytes)   trivial (relevance=1.000000, probability=4.104580, bonus=1.000000, nodes=8)
                                          @ 1  java.lang.Long.stringSize(long):int (55 bytes)   relevance-based (relevance=0.395643, probability=0.292500, bonus=1.000000, nodes=34 <= 118.692810)
                                          @ 18  java.lang.Long.getChars(long, int, byte[]):int (195 bytes)   relevance-based (relevance=0.395643, probability=0.292500, bonus=1.000000, nodes=61 <= 118.692810)
                                        @ 21  java.lang.Long.toString(long):String (55 bytes)   relevance-based (relevance=0.395643, probability=0.292500, bonus=1.000000, nodes=95 <= 118.692810)
                                      @ 34  java.lang.Long.toString(long, int):String (139 bytes)   relevance-based (relevance=0.395643, probability=0.292500, bonus=1.000000, nodes=97 <= 118.692810)
                                    @ 62  java.util.Formatter$FormatSpecifier.print(Formatter, long, Locale):void (357 bytes)   not inlining relevance-based (relevance=0.395643, probability=0.292500, bonus=1.000000, nodes=131 > 118.692810)
                                  @ 78  java.util.Formatter$FormatSpecifier.print(Formatter, int, Locale):void (66 bytes)   relevance-based (relevance=0.395643, probability=0.292500, bonus=1.000000, nodes=14 <= 118.692810)
                                @ 136  java.util.Formatter$FormatSpecifier.printInteger(Formatter, Object, Locale):void (137 bytes)   relevance-based (relevance=0.395643, probability=0.292500, bonus=1.000000, nodes=30 <= 118.692810)
                            @ 27  java.lang.Character.toString():String (8 bytes)   inline method (bytecode parsing)
                            @ 18  java.lang.StringLatin1.toBytes(char):byte[] (9 bytes)   inline method (bytecode parsing)
                            @ 22  java.lang.String.<init>(byte[], byte):void (15 bytes)   inline method (bytecode parsing)
                                    @ 7  java.lang.StringLatin1.canEncode(int):boolean (13 bytes)   trivial (relevance=1.000000, probability=0.739305, bonus=1.000000, nodes=8)
                                  @ 4  java.lang.String.valueOf(char):String (39 bytes)   relevance-based (relevance=1.000000, probability=0.739305, bonus=1.000000, nodes=22 <= 300.000000)
                            @ 34  java.util.Formatter$Flags.contains(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 2  java.lang.StringBuilder.append(CharSequence):StringBuilder (8 bytes)   inline method (bytecode parsing)
                                        @ 2  java.lang.AbstractStringBuilder.append(CharSequence):AbstractStringBuilder (54 bytes)   not inlining too large previous low-level graph (low-level-nodes: 399, relevance=1.000000, probability=0.739305, bonus=1.000000, nodes=8)
                                      @ 10  java.lang.StringBuilder.append(CharSequence):Appendable (6 bytes)   trivial (relevance=1.000000, probability=0.739305, bonus=1.000000, nodes=9)
                                    @ 53  java.util.Formatter$FormatSpecifier.appendJustified(Appendable, CharSequence):void (89 bytes)   relevance-based (relevance=1.000000, probability=0.739305, bonus=1.000000, nodes=23 <= 300.000000)
                                  @ 211  java.util.Formatter$FormatSpecifier.print(Formatter, String, Locale):void (57 bytes)   relevance-based (relevance=1.000000, probability=0.739305, bonus=1.000000, nodes=33 <= 300.000000)
                                @ 156  java.util.Formatter$FormatSpecifier.printCharacter(Formatter, Object, Locale):void (215 bytes)   relevance-based (relevance=1.000000, probability=0.739305, bonus=1.000000, nodes=65 <= 300.000000)
                              @ 205  java.util.Formatter$FormatSpecifier.print(Formatter, Object, Locale):void (234 bytes)   relevance-based (relevance=1.000010, probability=2.116118, bonus=1.000000, nodes=162 <= 300.000000)
                            @ 55  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                            @ 4  java.lang.StringBuilder.append(CharSequence, int, int):StringBuilder (10 bytes)   inline method (bytecode parsing)
                                      @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=0.730058, probability=1.544873, bonus=1.000000, nodes=5)
                                    @ 10  java.lang.String.length():int (11 bytes)   trivial (relevance=0.730058, probability=1.544873, bonus=1.000000, nodes=8)
                                    @ 18  jdk.internal.util.Preconditions.checkFromToIndex(int, int, int, BiFunction):int (24 bytes)   relevance-based (relevance=0.730058, probability=1.544873, bonus=1.000000, nodes=14 <= 219.017289)
                                          @ 3  java.lang.Math.max(int, int):int (11 bytes)   trivial (relevance=0.123675, probability=0.223796, bonus=1.000000, nodes=7)
                                        @ 29  jdk.internal.util.ArraysSupport.newLength(int, int, int):int (27 bytes)   relevance-based (relevance=0.123675, probability=0.223796, bonus=1.000000, nodes=15 <= 37.102494)
                                      @ 24  java.lang.AbstractStringBuilder.newCapacity(int):int (59 bytes)   relevance-based (relevance=0.123675, probability=0.223796, bonus=1.000000, nodes=27 <= 37.102494)
                                        @ 25  java.lang.Math.min(int, int):int (11 bytes)   trivial (relevance=0.123676, probability=0.223766, bonus=1.000000, nodes=7)
                                      @ 32  java.util.Arrays.copyOf(byte[], int):byte[] (33 bytes)   relevance-based (relevance=0.123675, probability=0.223796, bonus=1.000000, nodes=28 <= 37.102494)
                                    @ 35  java.lang.AbstractStringBuilder.ensureCapacityInternal(int):void (39 bytes)   relevance-based (relevance=0.730058, probability=1.544873, bonus=1.000000, nodes=72 <= 219.017289)
                            @ 15  java.lang.String.value():byte[] (5 bytes)   inline accessor method (bytecode parsing)
                                      @ 1  java.lang.AbstractStringBuilder.isLatin1():boolean (19 bytes)   trivial (relevance=0.853740, probability=1.544871, bonus=1.000000, nodes=9)
                                      @ 8  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=0.853740, probability=1.544871, bonus=1.000000, nodes=9)
                                    @ 52  java.lang.AbstractStringBuilder.appendChars(String, int, int):void (207 bytes)   relevance-based (relevance=0.853731, probability=1.544871, bonus=1.000000, nodes=38 <= 256.119412)
                                  @ 4  java.lang.AbstractStringBuilder.append(CharSequence, int, int):AbstractStringBuilder (67 bytes)   relevance-based (relevance=0.730058, probability=1.544873, bonus=1.000000, nodes=122 <= 219.017289)
                                @ 16  java.lang.StringBuilder.append(CharSequence, int, int):Appendable (8 bytes)   relevance-based (relevance=0.730058, probability=1.544873, bonus=1.000000, nodes=124 <= 219.017289)
                              @ 89  java.util.Formatter$FixedString.print(Formatter, Object, Locale):void (23 bytes)   relevance-based (relevance=0.730058, probability=1.544873, bonus=1.000000, nodes=135 <= 219.017289)
                            @ 1  java.lang.StringBuilder.length():int (5 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.AbstractStringBuilder.length():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 17  java.lang.StringBuilder.charAt(int):char (6 bytes)   inline method (bytecode parsing)
                            @ 98  java.lang.StringBuilder.append(char):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 5  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                                @ 9  java.lang.AbstractStringBuilder.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=1.737329, bonus=1.000000, nodes=9)
                              @ 2  java.lang.AbstractStringBuilder.charAt(int):char (36 bytes)   relevance-based (relevance=1.291928, probability=1.737329, bonus=1.000000, nodes=19 <= 300.000000)
                              @ 2  java.lang.AbstractStringBuilder.append(char):AbstractStringBuilder (77 bytes)   not inlining too large previous low-level graph (low-level-nodes: 332, relevance=0.607427, probability=0.607427, bonus=1.000000, nodes=29)
                            @ 10  java.lang.StringBuilder.append(char):StringBuilder (8 bytes)   inline method (bytecode parsing)
                                @ 2  java.lang.AbstractStringBuilder.append(char):AbstractStringBuilder (77 bytes)   not inlining too large previous low-level graph (low-level-nodes: 332, relevance=0.609659, probability=3.654569, bonus=1.000000, nodes=29)
                              @ 108  java.util.Formatter$FormatSpecifier.trailingZeros(StringBuilder, int):void (21 bytes)   not inlining callee invoke probability is too high (invokeP=5.994448, relevance=0.609659, probability=0.609659, bonus=1.000000, nodes=26)
                            @ 8  jdk.graal.compiler.lir.alloc.lsra.LinearScan.lambda$sortIntervals$0(Interval, Interval):int (10 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.lir.alloc.lsra.Interval.from():int (8 bytes)   inline method (bytecode parsing)
                              @ 5  jdk.graal.compiler.lir.alloc.lsra.Interval.from():int (8 bytes)   inline method (bytecode parsing)
                            @ 17  java.lang.Enum.ordinal():int (5 bytes)   inline accessor method (bytecode parsing)
                                        @ 2  java.util.EnumMap.isValidKey(Object):boolean (36 bytes)   relevance-based (relevance=1.000000, probability=0.174812, bonus=1.000000, nodes=13 <= 300.000000)
                                        @ 21  java.util.EnumMap.unmaskNull(Object):Object (13 bytes)   trivial (relevance=1.000091, probability=0.174812, bonus=1.000000, nodes=7)
                                      @ 7  java.util.EnumMap.get(Object):Object (29 bytes)   relevance-based (relevance=1.000000, probability=0.174812, bonus=1.000000, nodes=27 <= 300.000000)
                                    @ 1  jdk.graal.compiler.hotspot.HotSpotCompiledCodeBuilder$SiteComparator.ord(Infopoint):int (19 bytes)   relevance-based (relevance=4.000000, probability=0.174812, bonus=1.000000, nodes=36 <= 300.000000)
                            @ 17  java.lang.Enum.ordinal():int (5 bytes)   inline accessor method (bytecode parsing)
                                        @ 2  java.util.EnumMap.isValidKey(Object):boolean (36 bytes)   relevance-based (relevance=1.000000, probability=0.174812, bonus=1.000000, nodes=13 <= 300.000000)
                                        @ 21  java.util.EnumMap.unmaskNull(Object):Object (13 bytes)   trivial (relevance=1.000091, probability=0.174812, bonus=1.000000, nodes=7)
                                      @ 7  java.util.EnumMap.get(Object):Object (29 bytes)   relevance-based (relevance=1.000000, probability=0.174812, bonus=1.000000, nodes=27 <= 300.000000)
                                    @ 6  jdk.graal.compiler.hotspot.HotSpotCompiledCodeBuilder$SiteComparator.ord(Infopoint):int (19 bytes)   relevance-based (relevance=1.000091, probability=0.174812, bonus=1.000000, nodes=36 <= 300.000000)
                            @ 6  java.lang.Error.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                            @ 89  java.lang.String.format(Locale, String, Object[]):String (17 bytes)   inline method (bytecode parsing)
                              @ 5  java.util.Formatter.<init>(Locale):void (13 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.StringBuilder.<init>():void (7 bytes)   inline method (bytecode parsing)
                                @ 9  java.util.Formatter.<init>(Locale, Appendable):void (15 bytes)   inline method (bytecode parsing)
                                      @ 3  jdk.graal.compiler.debug.GraalError.format(String, Object[]):String (93 bytes)   not inlining relevance-based (relevance=0.250023, probability=0.043703, bonus=1.000000, nodes=81 > 75.006847)
                 n                      @ 16  java.lang.Throwable.fillInStackTrace(int):Throwable (0 bytes)   not inlining it is a non-intrinsic native method
              s                         @ 24  java.lang.Throwable.fillInStackTrace():Throwable (29 bytes)   relevance-based (relevance=0.250023, probability=0.043703, bonus=1.000000, nodes=34 <= 75.006847)
                                      @ 2  java.lang.Throwable.<init>(String):void (34 bytes)   relevance-based (relevance=0.250023, probability=0.043703, bonus=1.000000, nodes=45 <= 75.006847)
                            @ 1  java.util.AbstractList.<init>():void (10 bytes)   inline method (bytecode parsing)
                              @ 1  java.util.AbstractCollection.<init>():void (5 bytes)   inline method (bytecode parsing)
                                      @ 14  java.util.ArrayList.<init>():void (12 bytes)   relevance-based (relevance=1.000091, probability=0.043703, bonus=1.000000, nodes=11 <= 300.000000)
                                    @ 36  jdk.graal.compiler.debug.GraalError.<init>(String, Object[]):void (21 bytes)   relevance-based (relevance=0.250023, probability=0.043703, bonus=1.000000, nodes=62 <= 75.006847)
                                  @ 86  jdk.graal.compiler.hotspot.HotSpotCompiledCodeBuilder$SiteComparator.checkCollision(Infopoint, Infopoint):int (44 bytes)   relevance-based (relevance=1.000000, probability=0.174812, bonus=1.000000, nodes=145 <= 300.000000)
                                @ 9  jdk.graal.compiler.hotspot.HotSpotCompiledCodeBuilder$SiteComparator.compare(Site, Site):int (100 bytes)   relevance-based (relevance=1.000000, probability=2.796993, bonus=1.000000, nodes=191 <= 300.000000)
                              @ 93  jdk.graal.compiler.hotspot.HotSpotCompiledCodeBuilder$SiteComparator.compare(Object, Object):int (13 bytes)   relevance-based (relevance=1.822755, probability=6.737853, bonus=1.000000, nodes=218 <= 300.000000)
                            @ 5  jdk.graal.compiler.replacements.arraycopy.ArrayCopySnippets.checkArrayTypes(Object, Object, ArrayCopySnippets$ArrayCopyTypeCheck):void (98 bytes)   inline method (bytecode parsing)
                            @ 20  jdk.graal.compiler.replacements.arraycopy.ArrayCopySnippets.checkLimits(Object, int, Object, int, int, JavaKind, ArrayCopySnippets$Counters):int[] (230 bytes)   inline method (bytecode parsing)
                              @ 21  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                              @ 37  jdk.graal.compiler.nodes.PiNode.piCastPositive(int, GuardingNode):int (9 bytes)   inline method (bytecode parsing)
                              @ 64  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                              @ 81  jdk.graal.compiler.nodes.PiNode.piCastPositive(int, GuardingNode):int (9 bytes)   inline method (bytecode parsing)
                              @ 108  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                              @ 125  jdk.graal.compiler.nodes.PiNode.piCastPositive(int, GuardingNode):int (9 bytes)   inline method (bytecode parsing)
                              @ 159  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                              @ 200  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                              @ 217  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                              @ 226  jdk.graal.compiler.replacements.arraycopy.ArrayCopySnippets.createCheckLimitsResult(int, int, int):int[] (18 bytes)   inline method (bytecode parsing)
                            @ 47  jdk.graal.compiler.replacements.arraycopy.ArrayCopySnippets.incrementLengthCounter(int, ArrayCopySnippets$Counters):void (16 bytes)   inline method (bytecode parsing)
                              @ 12  jdk.graal.compiler.replacements.SnippetIntegerHistogram.inc(long):void (215 bytes)   inline method (bytecode parsing)
                            @ 52  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                            @ 59  jdk.graal.compiler.replacements.SnippetCounter.add(int):void (13 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                            @ 77  jdk.graal.compiler.replacements.arraycopy.ArrayCopySnippets.doArraycopyExactStubCallSnippet(Object, int, Object, int, int, JavaKind, LocationIdentity, ArrayCopySnippets$Counters):void (19 bytes)   inline method (bytecode parsing)
                              @ 12  jdk.graal.compiler.hotspot.replacements.arraycopy.HotSpotArraycopySnippets.heapWordSize():int (7 bytes)   inline method (bytecode parsing)
                              @ 15  jdk.graal.compiler.replacements.arraycopy.ArrayCopyCallNode.arraycopy(Object, int, Object, int, int, JavaKind, LocationIdentity, int):void (19 bytes)   inline method (bytecode parsing)
                            @ 23  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                            @ 37  jdk.graal.compiler.nodes.PiNode.piCastNonNull(Object, GuardingNode):Object (9 bytes)   inline method (bytecode parsing)
                            @ 72  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                            @ 83  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                            @ 1  java.util.Objects.requireNonNull(Object):Object (14 bytes)   inline method (bytecode parsing)
                            @ 43  java.util.ArrayList.elementAt(Object[], int):Object (4 bytes)   inline method (bytecode parsing)
                            @ 5  jdk.graal.compiler.lir.constopt.UseEntry.getBlock():BasicBlock (5 bytes)   inline accessor method (bytecode parsing)
                            @ 41  jdk.graal.compiler.core.common.cfg.BasicBlock.getId():int (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 8  jdk.graal.compiler.core.common.cfg.DominatorOptimizationProblem.set(Enum, BasicBlock):void (48 bytes)   not inlining relevance-based (relevance=0.049531, probability=0.035826, bonus=1.000000, nodes=39 > 14.859260)
                                @ 8  jdk.graal.compiler.lir.constopt.ConstantLoadOptimization$Optimization.lambda$createConstantTree$5(ConstantTree, UseEntry):void (12 bytes)   relevance-based (relevance=0.049531, probability=0.035826, bonus=1.000000, nodes=13 <= 14.859260)
                            @ 2  jdk.graal.compiler.lir.constopt.UseEntry.getBlock():BasicBlock (5 bytes)   inline accessor method (bytecode parsing)
                                @ 8  jdk.graal.compiler.lir.constopt.ConstantTree.lambda$new$0(UseEntry):void (16 bytes)   not inlining relevance-based (relevance=0.049571, probability=0.035855, bonus=1.000000, nodes=15 > 14.871341)
                            @ 1  jdk.graal.compiler.lir.constopt.UseEntry.getBlock():BasicBlock (5 bytes)   inline accessor method (bytecode parsing)
                            @ 10  jdk.graal.compiler.core.common.cfg.BlockMap.get(BasicBlock):Object (10 bytes)   inline method (bytecode parsing)
                              @ 5  jdk.graal.compiler.core.common.cfg.BasicBlock.getId():int (5 bytes)   inline accessor method (bytecode parsing)
                                @ 8  jdk.graal.compiler.lir.constopt.ConstantLoadOptimization$Optimization.addUsageToBlockMap(UseEntry):void (47 bytes)   not inlining relevance-based (relevance=0.049571, probability=0.035855, bonus=1.000000, nodes=42 > 14.871341)
                            @ 2  jdk.graal.compiler.lir.LIRInstruction.visitEachInput(InstructionValueConsumer):void (10 bytes)   inline method (bytecode parsing)
                            @ 7  jdk.graal.compiler.lir.LIRInstruction.visitEachAlive(InstructionValueConsumer):void (10 bytes)   inline method (bytecode parsing)
                            @ 12  jdk.graal.compiler.lir.LIRInstruction.visitEachState(InstructionValueConsumer):void (10 bytes)   inline method (bytecode parsing)
                            @ 17  jdk.graal.compiler.lir.LIRInstruction.visitEachTemp(InstructionValueConsumer):void (10 bytes)   inline method (bytecode parsing)
                            @ 22  jdk.graal.compiler.lir.LIRInstruction.visitEachOutput(InstructionValueConsumer):void (10 bytes)   inline method (bytecode parsing)
                              @ 2  java.lang.CharacterDataLatin1.getPropertiesEx(int):int (11 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=8)
                            @ 6  jdk.graal.compiler.core.common.Fields.getCount():int (6 bytes)   inline method (bytecode parsing)
                            @ 51  jdk.graal.compiler.lir.LIRIntrospection$Values.getDirectCount():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 61  jdk.graal.compiler.lir.LIRIntrospection$Values.getValue(Object, int):Value (10 bytes)   inline method (bytecode parsing)
                            @ 100  jdk.graal.compiler.lir.LIRIntrospection$Values.getFlags(int):EnumSet (7 bytes)   inline method (bytecode parsing)
                            @ 115  jdk.graal.compiler.lir.LIRIntrospection$Values.getValueArray(Object, int):Value[] (10 bytes)   inline method (bytecode parsing)
                            @ 172  jdk.graal.compiler.lir.LIRIntrospection$Values.getFlags(int):EnumSet (7 bytes)   inline method (bytecode parsing)
                                      @ 3  jdk.graal.compiler.core.common.Fields.getObject(Object, int):Object (40 bytes)   trivial (relevance=2.000000, probability=0.361649, bonus=1.000000, nodes=9)
                                      @ 3  jdk.graal.compiler.core.common.Fields.getObject(Object, int):Object (40 bytes)   trivial (relevance=2.000000, probability=0.361649, bonus=1.000000, nodes=9)
                                    @ 103  jdk.graal.compiler.lir.InstructionValueConsumer.visitValue(LIRInstruction, Value, LIRInstruction$OperandMode, EnumSet):void (0 bytes)   not inlining no type profile exists
                                      @ 10  jdk.graal.compiler.lir.InstructionValueConsumer.visitValue(LIRInstruction, Value, LIRInstruction$OperandMode, EnumSet):void (0 bytes)   not inlining no type profile exists
                                      @ 25  jdk.graal.compiler.lir.InstructionValueConsumer.visitValue(LIRInstruction, Value, LIRInstruction$OperandMode, EnumSet):void (0 bytes)   not inlining no type profile exists
                                      @ 86  jdk.graal.compiler.lir.amd64.AMD64AddressValue.visitEachComponent(LIRInstruction, LIRInstruction$OperandMode, InstructionValueConsumer):void (31 bytes)   relevance-based (relevance=1.000000, probability=0.180825, bonus=1.000000, nodes=16 <= 300.000000)
                                    @ 175  jdk.graal.compiler.lir.InstructionValueConsumer.visitValue(LIRInstruction, Value, LIRInstruction$OperandMode, EnumSet):void (0 bytes)   not inlining no type profile exists
                            @ 35  java.lang.Character.isUpperCase(char):boolean (5 bytes)   inline method (bytecode parsing)
                                      @ 10  jdk.graal.compiler.lir.InstructionValueConsumer.visitValue(LIRInstruction, Value, LIRInstruction$OperandMode, EnumSet):void (0 bytes)   not inlining no type profile exists
                                      @ 25  jdk.graal.compiler.lir.InstructionValueConsumer.visitValue(LIRInstruction, Value, LIRInstruction$OperandMode, EnumSet):void (0 bytes)   not inlining no type profile exists
                                      @ 158  jdk.graal.compiler.lir.amd64.AMD64AddressValue.visitEachComponent(LIRInstruction, LIRInstruction$OperandMode, InstructionValueConsumer):void (31 bytes)   relevance-based (relevance=1.000000, probability=0.180825, bonus=1.000000, nodes=16 <= 300.000000)
                              @ 1  java.lang.Character.isUpperCase(int):boolean (9 bytes)   inline method (bytecode parsing)
                                    @ 9  jdk.graal.compiler.lir.LIRIntrospection.visitEach(LIRInstruction, LIRIntrospection$Values, LIRInstruction$OperandMode, InstructionValueConsumer):void (193 bytes)   relevance-based (relevance=1.000000, probability=0.723298, bonus=1.000000, nodes=104 <= 300.000000)
                                  @ 6  jdk.graal.compiler.lir.LIRInstructionClass.visitEachUse(LIRInstruction, InstructionValueConsumer):void (13 bytes)   relevance-based (relevance=1.000000, probability=0.723298, bonus=1.000000, nodes=106 <= 300.000000)
                              @ 1  java.lang.CharacterData.of(int):CharacterData (136 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=8)
                                @ 2  java.lang.CharacterDataLatin1.getPropertiesEx(int):int (11 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=8)
                              @ 5  java.lang.CharacterDataLatin1.isUpperCase(int):boolean (16 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=13 <= 300.000000)
                            @ 6  jdk.graal.compiler.core.common.Fields.getCount():int (6 bytes)   inline method (bytecode parsing)
                            @ 51  jdk.graal.compiler.lir.LIRIntrospection$Values.getDirectCount():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 61  jdk.graal.compiler.lir.LIRIntrospection$Values.getValue(Object, int):Value (10 bytes)   inline method (bytecode parsing)
                              @ 55  java.util.Formatter$Conversion.isText(char):boolean (34 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=9)
                            @ 100  jdk.graal.compiler.lir.LIRIntrospection$Values.getFlags(int):EnumSet (7 bytes)   inline method (bytecode parsing)
                            @ 115  jdk.graal.compiler.lir.LIRIntrospection$Values.getValueArray(Object, int):Value[] (10 bytes)   inline method (bytecode parsing)
                            @ 172  jdk.graal.compiler.lir.LIRIntrospection$Values.getFlags(int):EnumSet (7 bytes)   inline method (bytecode parsing)
                                      @ 3  jdk.graal.compiler.core.common.Fields.getObject(Object, int):Object (40 bytes)   trivial (relevance=2.000000, probability=0.361649, bonus=1.000000, nodes=9)
                                      @ 3  jdk.graal.compiler.core.common.Fields.getObject(Object, int):Object (40 bytes)   trivial (relevance=2.000000, probability=0.361649, bonus=1.000000, nodes=9)
                                    @ 103  jdk.graal.compiler.lir.InstructionValueConsumer.visitValue(LIRInstruction, Value, LIRInstruction$OperandMode, EnumSet):void (0 bytes)   not inlining no type profile exists
                                      @ 10  jdk.graal.compiler.lir.InstructionValueConsumer.visitValue(LIRInstruction, Value, LIRInstruction$OperandMode, EnumSet):void (0 bytes)   not inlining no type profile exists
                                      @ 25  jdk.graal.compiler.lir.InstructionValueConsumer.visitValue(LIRInstruction, Value, LIRInstruction$OperandMode, EnumSet):void (0 bytes)   not inlining no type profile exists
                                      @ 86  jdk.graal.compiler.lir.amd64.AMD64AddressValue.visitEachComponent(LIRInstruction, LIRInstruction$OperandMode, InstructionValueConsumer):void (31 bytes)   relevance-based (relevance=1.000000, probability=0.180825, bonus=1.000000, nodes=16 <= 300.000000)
                                    @ 175  jdk.graal.compiler.lir.InstructionValueConsumer.visitValue(LIRInstruction, Value, LIRInstruction$OperandMode, EnumSet):void (0 bytes)   not inlining no type profile exists
                                      @ 10  jdk.graal.compiler.lir.InstructionValueConsumer.visitValue(LIRInstruction, Value, LIRInstruction$OperandMode, EnumSet):void (0 bytes)   not inlining no type profile exists
                                      @ 25  jdk.graal.compiler.lir.InstructionValueConsumer.visitValue(LIRInstruction, Value, LIRInstruction$OperandMode, EnumSet):void (0 bytes)   not inlining no type profile exists
                                      @ 158  jdk.graal.compiler.lir.amd64.AMD64AddressValue.visitEachComponent(LIRInstruction, LIRInstruction$OperandMode, InstructionValueConsumer):void (31 bytes)   relevance-based (relevance=1.000000, probability=0.180825, bonus=1.000000, nodes=16 <= 300.000000)
                                    @ 9  jdk.graal.compiler.lir.LIRIntrospection.visitEach(LIRInstruction, LIRIntrospection$Values, LIRInstruction$OperandMode, InstructionValueConsumer):void (193 bytes)   relevance-based (relevance=1.000000, probability=0.723298, bonus=1.000000, nodes=104 <= 300.000000)
                                  @ 6  jdk.graal.compiler.lir.LIRInstructionClass.visitEachAlive(LIRInstruction, InstructionValueConsumer):void (13 bytes)   relevance-based (relevance=1.000000, probability=0.723298, bonus=1.000000, nodes=106 <= 300.000000)
                            @ 2  java.lang.StringBuilder.append(CharSequence):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 7  jdk.graal.compiler.core.common.Fields.getCount():int (6 bytes)   inline method (bytecode parsing)
                              @ 2  java.lang.AbstractStringBuilder.append(CharSequence):AbstractStringBuilder (54 bytes)   not inlining too large previous low-level graph (low-level-nodes: 399, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=27)
                                    @ 19  jdk.graal.compiler.core.common.Fields.getObject(Object, int):Object (40 bytes)   trivial (relevance=2.000000, probability=0.723298, bonus=1.000000, nodes=9)
                            @ 20  jdk.vm.ci.code.BytecodeFrame.caller():BytecodeFrame (8 bytes)   inline method (bytecode parsing)
                            @ 63  jdk.vm.ci.code.VirtualObject.getValues():JavaValue[] (5 bytes)   inline accessor method (bytecode parsing)
                            @ 73  jdk.vm.ci.code.StackLockValue.getOwner():JavaValue (5 bytes)   inline accessor method (bytecode parsing)
                            @ 106  jdk.vm.ci.code.StackLockValue.getSlot():AllocatableValue (5 bytes)   inline accessor method (bytecode parsing)
                            @ 22  jdk.vm.ci.meta.Value$IllegalValue.equals(Object):boolean (5 bytes)   inline method (bytecode parsing)
                                        @ 18  jdk.vm.ci.code.ValueUtil.isIllegalJavaValue(JavaValue):boolean (26 bytes)   trivial (relevance=16.000000, probability=0.361649, bonus=1.000000, nodes=8)
                                      @ 99  jdk.graal.compiler.lir.InstructionValueConsumer.visitValue(LIRInstruction, Value, LIRInstruction$OperandMode, EnumSet):void (0 bytes)   not inlining no type profile exists
                                      @ 48  jdk.graal.compiler.lir.InstructionValueConsumer.visitValue(LIRInstruction, Value, LIRInstruction$OperandMode, EnumSet):void (0 bytes)   not inlining no type profile exists
                            @ 2  java.lang.StringBuilder.append(CharSequence):StringBuilder (8 bytes)   inline method (bytecode parsing)
                                        @ 113  jdk.graal.compiler.lir.LIRValueUtil.isVirtualStackSlot(Value):boolean (23 bytes)   trivial (relevance=2.000000, probability=0.045206, bonus=1.000000, nodes=8)
                                      @ 129  jdk.graal.compiler.lir.InstructionValueConsumer.visitValue(LIRInstruction, Value, LIRInstruction$OperandMode, EnumSet):void (0 bytes)   not inlining no type profile exists
                                      @ 16  jdk.graal.compiler.lir.LIRFrameState.visitValues(LIRInstruction, JavaValue[], InstructionValueConsumer):void (167 bytes)   relevance-based (relevance=1.000000, probability=0.361649, bonus=1.000000, nodes=75 <= 300.000000)
                                @ 2  java.lang.AbstractStringBuilder.append(CharSequence):AbstractStringBuilder (54 bytes)   not inlining too large previous low-level graph (low-level-nodes: 399, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=27)
                              @ 10  java.lang.StringBuilder.append(CharSequence):Appendable (6 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=9)
                                      @ 1  jdk.vm.ci.code.BytecodePosition.getCaller():BytecodePosition (5 bytes)   trivial (relevance=1.000000, probability=0.361649, bonus=1.000000, nodes=5)
                            @ 73  jdk.vm.ci.code.StackLockValue.getOwner():JavaValue (5 bytes)   inline accessor method (bytecode parsing)
                            @ 106  jdk.vm.ci.code.StackLockValue.getSlot():AllocatableValue (5 bytes)   inline accessor method (bytecode parsing)
                            @ 22  jdk.vm.ci.meta.Value$IllegalValue.equals(Object):boolean (5 bytes)   inline method (bytecode parsing)
                                        @ 18  jdk.vm.ci.code.ValueUtil.isIllegalJavaValue(JavaValue):boolean (26 bytes)   trivial (relevance=8.000000, probability=0.180825, bonus=1.000000, nodes=8)
                                      @ 99  jdk.graal.compiler.lir.InstructionValueConsumer.visitValue(LIRInstruction, Value, LIRInstruction$OperandMode, EnumSet):void (0 bytes)   not inlining no type profile exists
                                      @ 48  jdk.graal.compiler.lir.InstructionValueConsumer.visitValue(LIRInstruction, Value, LIRInstruction$OperandMode, EnumSet):void (0 bytes)   not inlining no type profile exists
                                        @ 113  jdk.graal.compiler.lir.LIRValueUtil.isVirtualStackSlot(Value):boolean (23 bytes)   trivial (relevance=1.000000, probability=0.022603, bonus=1.000000, nodes=8)
                                      @ 129  jdk.graal.compiler.lir.InstructionValueConsumer.visitValue(LIRInstruction, Value, LIRInstruction$OperandMode, EnumSet):void (0 bytes)   not inlining no type profile exists
                                      @ 67  jdk.graal.compiler.lir.LIRFrameState.visitValues(LIRInstruction, JavaValue[], InstructionValueConsumer):void (167 bytes)   relevance-based (relevance=0.500000, probability=0.180825, bonus=1.000000, nodes=75 <= 150.000000)
                                      @ 72  org.graalvm.collections.EconomicMap.getEntries():MapCursor (0 bytes)   not inlining no type profile exists
                                      @ 47  jdk.graal.compiler.lir.InstructionValueConsumer.visitValue(LIRInstruction, Value, LIRInstruction$OperandMode, EnumSet):void (0 bytes)   not inlining no type profile exists
                                      @ 81  org.graalvm.collections.MapCursor.advance():boolean (10 bytes)   not inlining no type profile exists
                                      @ 91  org.graalvm.collections.MapCursor.getValue():Object (10 bytes)   not inlining no type profile exists
                                      @ 113  jdk.graal.compiler.lir.InstructionValueConsumer.visitValue(LIRInstruction, Value, LIRInstruction$OperandMode, EnumSet):void (0 bytes)   not inlining no type profile exists
                                      @ 95  jdk.graal.compiler.lir.util.IndexedValueMap.visitEach(LIRInstruction, LIRInstruction$OperandMode, EnumSet, InstructionValueConsumer):void (122 bytes)   relevance-based (relevance=0.500000, probability=0.180825, bonus=1.000000, nodes=75 <= 150.000000)
                                    @ 36  jdk.graal.compiler.lir.LIRFrameState.visitEachState(LIRInstruction, InstructionValueConsumer):void (99 bytes)   relevance-based (relevance=1.000000, probability=0.361649, bonus=1.000000, nodes=258 <= 300.000000)
                                  @ 6  jdk.graal.compiler.lir.LIRInstructionClass.visitEachState(LIRInstruction, InstructionValueConsumer):void (46 bytes)   relevance-based (relevance=1.000000, probability=0.723298, bonus=1.000000, nodes=290 <= 300.000000)
                                @ 8  jdk.graal.compiler.lir.framemap.FrameMapBuilderImpl.lambda$verifyStackSlotAllocation$1(InstructionValueConsumer, LIRInstruction):void (26 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.723298, bonus=1.000000, nodes=514 > 300.000000)
                              @ 46  jdk.graal.compiler.lir.framemap.FrameMapBuilderImpl$$Lambda/0x00007f2ce0246db0.accept(Object):void (12 bytes)   relevance-based (relevance=1.000000, probability=0.830833, bonus=1.000000, nodes=54 <= 300.000000)
                                @ 25  java.util.ArrayDeque.dec(int, int):int (13 bytes)   relevance-based (relevance=1.002110, probability=1.000000, bonus=1.000000, nodes=18 <= 300.000000)
                            @ 5  jdk.graal.compiler.lir.constopt.UseEntry.getBlock():BasicBlock (5 bytes)   inline accessor method (bytecode parsing)
                            @ 55  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                            @ 41  jdk.graal.compiler.core.common.cfg.BasicBlock.getId():int (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 8  jdk.graal.compiler.core.common.cfg.DominatorOptimizationProblem.set(Enum, BasicBlock):void (48 bytes)   not inlining relevance-based (relevance=0.049531, probability=0.140126, bonus=1.000000, nodes=39 > 14.859260)
                                @ 8  jdk.graal.compiler.lir.constopt.ConstantLoadOptimization$Optimization.lambda$createConstantTree$5(ConstantTree, UseEntry):void (12 bytes)   relevance-based (relevance=0.049531, probability=0.140126, bonus=1.000000, nodes=13 <= 14.859260)
                            @ 2  jdk.graal.compiler.lir.constopt.UseEntry.getBlock():BasicBlock (5 bytes)   inline accessor method (bytecode parsing)
                                @ 8  jdk.graal.compiler.lir.constopt.ConstantTree.lambda$new$0(UseEntry):void (16 bytes)   not inlining relevance-based (relevance=0.049571, probability=0.140240, bonus=1.000000, nodes=15 > 14.871341)
                            @ 1  jdk.graal.compiler.lir.constopt.UseEntry.getBlock():BasicBlock (5 bytes)   inline accessor method (bytecode parsing)
                            @ 10  jdk.graal.compiler.core.common.cfg.BlockMap.get(BasicBlock):Object (10 bytes)   inline method (bytecode parsing)
                                @ 47  java.util.ArrayDeque.grow(int):void (165 bytes)   not inlining relevance-based (relevance=0.002998, probability=0.002106, bonus=1.000000, nodes=75 > 0.899307)
                              @ 2  java.util.ArrayDeque.addFirst(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=42 <= 300.000000)
                              @ 5  jdk.graal.compiler.core.common.cfg.BasicBlock.getId():int (5 bytes)   inline accessor method (bytecode parsing)
                                @ 8  jdk.graal.compiler.lir.constopt.ConstantLoadOptimization$Optimization.addUsageToBlockMap(UseEntry):void (47 bytes)   not inlining relevance-based (relevance=0.049571, probability=0.140240, bonus=1.000000, nodes=42 > 14.871341)
                            @ 2  jdk.graal.compiler.lir.LIRInstruction.visitEachInput(InstructionValueConsumer):void (10 bytes)   inline method (bytecode parsing)
                            @ 7  jdk.graal.compiler.lir.LIRInstruction.visitEachAlive(InstructionValueConsumer):void (10 bytes)   inline method (bytecode parsing)
                            @ 12  jdk.graal.compiler.lir.LIRInstruction.visitEachState(InstructionValueConsumer):void (10 bytes)   inline method (bytecode parsing)
                            @ 17  jdk.graal.compiler.lir.LIRInstruction.visitEachTemp(InstructionValueConsumer):void (10 bytes)   inline method (bytecode parsing)
                            @ 22  jdk.graal.compiler.lir.LIRInstruction.visitEachOutput(InstructionValueConsumer):void (10 bytes)   inline method (bytecode parsing)
                            @ 6  jdk.graal.compiler.core.common.Fields.getCount():int (6 bytes)   inline method (bytecode parsing)
                            @ 51  jdk.graal.compiler.lir.LIRIntrospection$Values.getDirectCount():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 61  jdk.graal.compiler.lir.LIRIntrospection$Values.getValue(Object, int):Value (10 bytes)   inline method (bytecode parsing)
                            @ 100  jdk.graal.compiler.lir.LIRIntrospection$Values.getFlags(int):EnumSet (7 bytes)   inline method (bytecode parsing)
                            @ 115  jdk.graal.compiler.lir.LIRIntrospection$Values.getValueArray(Object, int):Value[] (10 bytes)   inline method (bytecode parsing)
                            @ 172  jdk.graal.compiler.lir.LIRIntrospection$Values.getFlags(int):EnumSet (7 bytes)   inline method (bytecode parsing)
                                      @ 3  jdk.graal.compiler.core.common.Fields.getObject(Object, int):Object (40 bytes)   trivial (relevance=2.000000, probability=1.414529, bonus=1.000000, nodes=9)
                                      @ 3  jdk.graal.compiler.core.common.Fields.getObject(Object, int):Object (40 bytes)   trivial (relevance=2.000000, probability=1.414529, bonus=1.000000, nodes=9)
                                    @ 103  jdk.graal.compiler.lir.InstructionValueConsumer.visitValue(LIRInstruction, Value, LIRInstruction$OperandMode, EnumSet):void (0 bytes)   not inlining no type profile exists
                                      @ 10  jdk.graal.compiler.lir.InstructionValueConsumer.visitValue(LIRInstruction, Value, LIRInstruction$OperandMode, EnumSet):void (0 bytes)   not inlining no type profile exists
                                      @ 25  jdk.graal.compiler.lir.InstructionValueConsumer.visitValue(LIRInstruction, Value, LIRInstruction$OperandMode, EnumSet):void (0 bytes)   not inlining no type profile exists
                                      @ 86  jdk.graal.compiler.lir.amd64.AMD64AddressValue.visitEachComponent(LIRInstruction, LIRInstruction$OperandMode, InstructionValueConsumer):void (31 bytes)   relevance-based (relevance=1.000000, probability=0.707264, bonus=1.000000, nodes=16 <= 300.000000)
                                    @ 175  jdk.graal.compiler.lir.InstructionValueConsumer.visitValue(LIRInstruction, Value, LIRInstruction$OperandMode, EnumSet):void (0 bytes)   not inlining no type profile exists
                                      @ 10  jdk.graal.compiler.lir.InstructionValueConsumer.visitValue(LIRInstruction, Value, LIRInstruction$OperandMode, EnumSet):void (0 bytes)   not inlining no type profile exists
                                      @ 25  jdk.graal.compiler.lir.InstructionValueConsumer.visitValue(LIRInstruction, Value, LIRInstruction$OperandMode, EnumSet):void (0 bytes)   not inlining no type profile exists
                                      @ 158  jdk.graal.compiler.lir.amd64.AMD64AddressValue.visitEachComponent(LIRInstruction, LIRInstruction$OperandMode, InstructionValueConsumer):void (31 bytes)   relevance-based (relevance=1.000000, probability=0.707264, bonus=1.000000, nodes=16 <= 300.000000)
                                    @ 9  jdk.graal.compiler.lir.LIRIntrospection.visitEach(LIRInstruction, LIRIntrospection$Values, LIRInstruction$OperandMode, InstructionValueConsumer):void (193 bytes)   relevance-based (relevance=1.000000, probability=2.829058, bonus=1.000000, nodes=104 <= 300.000000)
                                  @ 6  jdk.graal.compiler.lir.LIRInstructionClass.visitEachUse(LIRInstruction, InstructionValueConsumer):void (13 bytes)   relevance-based (relevance=1.000000, probability=2.829058, bonus=1.000000, nodes=106 <= 300.000000)
                            @ 4  java.lang.StringBuilder.append(CharSequence, int, int):StringBuilder (10 bytes)   inline method (bytecode parsing)
                            @ 6  jdk.graal.compiler.core.common.Fields.getCount():int (6 bytes)   inline method (bytecode parsing)
                            @ 51  jdk.graal.compiler.lir.LIRIntrospection$Values.getDirectCount():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 61  jdk.graal.compiler.lir.LIRIntrospection$Values.getValue(Object, int):Value (10 bytes)   inline method (bytecode parsing)
                            @ 100  jdk.graal.compiler.lir.LIRIntrospection$Values.getFlags(int):EnumSet (7 bytes)   inline method (bytecode parsing)
                            @ 115  jdk.graal.compiler.lir.LIRIntrospection$Values.getValueArray(Object, int):Value[] (10 bytes)   inline method (bytecode parsing)
                                  @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                                @ 10  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=8)
                            @ 172  jdk.graal.compiler.lir.LIRIntrospection$Values.getFlags(int):EnumSet (7 bytes)   inline method (bytecode parsing)
                                @ 18  jdk.internal.util.Preconditions.checkFromToIndex(int, int, int, BiFunction):int (24 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=14 <= 300.000000)
                                      @ 3  java.lang.Math.max(int, int):int (11 bytes)   trivial (relevance=0.169404, probability=0.144864, bonus=1.000000, nodes=7)
                                    @ 29  jdk.internal.util.ArraysSupport.newLength(int, int, int):int (27 bytes)   relevance-based (relevance=0.169404, probability=0.144864, bonus=1.000000, nodes=15 <= 50.821322)
                                  @ 24  java.lang.AbstractStringBuilder.newCapacity(int):int (59 bytes)   relevance-based (relevance=0.169404, probability=0.144864, bonus=1.000000, nodes=27 <= 50.821322)
                                      @ 3  jdk.graal.compiler.core.common.Fields.getObject(Object, int):Object (40 bytes)   trivial (relevance=2.000000, probability=1.414529, bonus=1.000000, nodes=9)
                                      @ 3  jdk.graal.compiler.core.common.Fields.getObject(Object, int):Object (40 bytes)   trivial (relevance=2.000000, probability=1.414529, bonus=1.000000, nodes=9)
                                    @ 25  java.lang.Math.min(int, int):int (11 bytes)   trivial (relevance=0.169406, probability=0.144844, bonus=1.000000, nodes=7)
                                  @ 32  java.util.Arrays.copyOf(byte[], int):byte[] (33 bytes)   relevance-based (relevance=0.169404, probability=0.144864, bonus=1.000000, nodes=28 <= 50.821322)
                                    @ 103  jdk.graal.compiler.lir.InstructionValueConsumer.visitValue(LIRInstruction, Value, LIRInstruction$OperandMode, EnumSet):void (0 bytes)   not inlining no type profile exists
                                @ 35  java.lang.AbstractStringBuilder.ensureCapacityInternal(int):void (39 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=72 <= 300.000000)
                                      @ 10  jdk.graal.compiler.lir.InstructionValueConsumer.visitValue(LIRInstruction, Value, LIRInstruction$OperandMode, EnumSet):void (0 bytes)   not inlining no type profile exists
                                      @ 25  jdk.graal.compiler.lir.InstructionValueConsumer.visitValue(LIRInstruction, Value, LIRInstruction$OperandMode, EnumSet):void (0 bytes)   not inlining no type profile exists
                                      @ 86  jdk.graal.compiler.lir.amd64.AMD64AddressValue.visitEachComponent(LIRInstruction, LIRInstruction$OperandMode, InstructionValueConsumer):void (31 bytes)   relevance-based (relevance=1.000000, probability=0.707264, bonus=1.000000, nodes=16 <= 300.000000)
                            @ 15  java.lang.String.value():byte[] (5 bytes)   inline accessor method (bytecode parsing)
                                    @ 175  jdk.graal.compiler.lir.InstructionValueConsumer.visitValue(LIRInstruction, Value, LIRInstruction$OperandMode, EnumSet):void (0 bytes)   not inlining no type profile exists
                                  @ 1  java.lang.AbstractStringBuilder.isLatin1():boolean (19 bytes)   trivial (relevance=1.000010, probability=0.999999, bonus=1.000000, nodes=9)
                                      @ 10  jdk.graal.compiler.lir.InstructionValueConsumer.visitValue(LIRInstruction, Value, LIRInstruction$OperandMode, EnumSet):void (0 bytes)   not inlining no type profile exists
                                      @ 25  jdk.graal.compiler.lir.InstructionValueConsumer.visitValue(LIRInstruction, Value, LIRInstruction$OperandMode, EnumSet):void (0 bytes)   not inlining no type profile exists
                                      @ 158  jdk.graal.compiler.lir.amd64.AMD64AddressValue.visitEachComponent(LIRInstruction, LIRInstruction$OperandMode, InstructionValueConsumer):void (31 bytes)   relevance-based (relevance=1.000000, probability=0.707264, bonus=1.000000, nodes=16 <= 300.000000)
                                  @ 8  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000010, probability=0.999999, bonus=1.000000, nodes=9)
                                @ 52  java.lang.AbstractStringBuilder.appendChars(String, int, int):void (207 bytes)   relevance-based (relevance=1.169403, probability=0.999999, bonus=1.000000, nodes=38 <= 300.000000)
                                    @ 9  jdk.graal.compiler.lir.LIRIntrospection.visitEach(LIRInstruction, LIRIntrospection$Values, LIRInstruction$OperandMode, InstructionValueConsumer):void (193 bytes)   relevance-based (relevance=1.000000, probability=2.829058, bonus=1.000000, nodes=104 <= 300.000000)
                              @ 4  java.lang.AbstractStringBuilder.append(CharSequence, int, int):AbstractStringBuilder (67 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=132 <= 300.000000)
                                  @ 6  jdk.graal.compiler.lir.LIRInstructionClass.visitEachAlive(LIRInstruction, InstructionValueConsumer):void (13 bytes)   relevance-based (relevance=1.000000, probability=2.829058, bonus=1.000000, nodes=106 <= 300.000000)
                            @ 7  jdk.graal.compiler.core.common.Fields.getCount():int (6 bytes)   inline method (bytecode parsing)
                                    @ 19  jdk.graal.compiler.core.common.Fields.getObject(Object, int):Object (40 bytes)   trivial (relevance=2.000000, probability=2.829058, bonus=1.000000, nodes=9)
                            @ 20  jdk.vm.ci.code.BytecodeFrame.caller():BytecodeFrame (8 bytes)   inline method (bytecode parsing)
                            @ 63  jdk.vm.ci.code.VirtualObject.getValues():JavaValue[] (5 bytes)   inline accessor method (bytecode parsing)
                            @ 73  jdk.vm.ci.code.StackLockValue.getOwner():JavaValue (5 bytes)   inline accessor method (bytecode parsing)
                            @ 106  jdk.vm.ci.code.StackLockValue.getSlot():AllocatableValue (5 bytes)   inline accessor method (bytecode parsing)
                            @ 22  jdk.vm.ci.meta.Value$IllegalValue.equals(Object):boolean (5 bytes)   inline method (bytecode parsing)
                                        @ 18  jdk.vm.ci.code.ValueUtil.isIllegalJavaValue(JavaValue):boolean (26 bytes)   trivial (relevance=16.000000, probability=1.414529, bonus=1.000000, nodes=8)
                                      @ 99  jdk.graal.compiler.lir.InstructionValueConsumer.visitValue(LIRInstruction, Value, LIRInstruction$OperandMode, EnumSet):void (0 bytes)   not inlining no type profile exists
                                      @ 48  jdk.graal.compiler.lir.InstructionValueConsumer.visitValue(LIRInstruction, Value, LIRInstruction$OperandMode, EnumSet):void (0 bytes)   not inlining no type profile exists
                                        @ 113  jdk.graal.compiler.lir.LIRValueUtil.isVirtualStackSlot(Value):boolean (23 bytes)   trivial (relevance=2.000000, probability=0.176816, bonus=1.000000, nodes=8)
                                      @ 129  jdk.graal.compiler.lir.InstructionValueConsumer.visitValue(LIRInstruction, Value, LIRInstruction$OperandMode, EnumSet):void (0 bytes)   not inlining no type profile exists
                                      @ 16  jdk.graal.compiler.lir.LIRFrameState.visitValues(LIRInstruction, JavaValue[], InstructionValueConsumer):void (167 bytes)   relevance-based (relevance=1.000000, probability=1.414529, bonus=1.000000, nodes=75 <= 300.000000)
                                      @ 1  jdk.vm.ci.code.BytecodePosition.getCaller():BytecodePosition (5 bytes)   trivial (relevance=1.000000, probability=1.414529, bonus=1.000000, nodes=5)
                            @ 73  jdk.vm.ci.code.StackLockValue.getOwner():JavaValue (5 bytes)   inline accessor method (bytecode parsing)
                            @ 106  jdk.vm.ci.code.StackLockValue.getSlot():AllocatableValue (5 bytes)   inline accessor method (bytecode parsing)
                            @ 22  jdk.vm.ci.meta.Value$IllegalValue.equals(Object):boolean (5 bytes)   inline method (bytecode parsing)
                                        @ 18  jdk.vm.ci.code.ValueUtil.isIllegalJavaValue(JavaValue):boolean (26 bytes)   trivial (relevance=8.000000, probability=0.707264, bonus=1.000000, nodes=8)
                                      @ 99  jdk.graal.compiler.lir.InstructionValueConsumer.visitValue(LIRInstruction, Value, LIRInstruction$OperandMode, EnumSet):void (0 bytes)   not inlining no type profile exists
                                      @ 48  jdk.graal.compiler.lir.InstructionValueConsumer.visitValue(LIRInstruction, Value, LIRInstruction$OperandMode, EnumSet):void (0 bytes)   not inlining no type profile exists
                                        @ 113  jdk.graal.compiler.lir.LIRValueUtil.isVirtualStackSlot(Value):boolean (23 bytes)   trivial (relevance=1.000000, probability=0.088408, bonus=1.000000, nodes=8)
                                      @ 129  jdk.graal.compiler.lir.InstructionValueConsumer.visitValue(LIRInstruction, Value, LIRInstruction$OperandMode, EnumSet):void (0 bytes)   not inlining no type profile exists
                                      @ 67  jdk.graal.compiler.lir.LIRFrameState.visitValues(LIRInstruction, JavaValue[], InstructionValueConsumer):void (167 bytes)   relevance-based (relevance=0.500000, probability=0.707264, bonus=1.000000, nodes=75 <= 150.000000)
                                      @ 72  org.graalvm.collections.EconomicMap.getEntries():MapCursor (0 bytes)   not inlining no type profile exists
                                      @ 47  jdk.graal.compiler.lir.InstructionValueConsumer.visitValue(LIRInstruction, Value, LIRInstruction$OperandMode, EnumSet):void (0 bytes)   not inlining no type profile exists
                                      @ 81  org.graalvm.collections.MapCursor.advance():boolean (10 bytes)   not inlining no type profile exists
                                      @ 91  org.graalvm.collections.MapCursor.getValue():Object (10 bytes)   not inlining no type profile exists
                                      @ 113  jdk.graal.compiler.lir.InstructionValueConsumer.visitValue(LIRInstruction, Value, LIRInstruction$OperandMode, EnumSet):void (0 bytes)   not inlining no type profile exists
                                      @ 95  jdk.graal.compiler.lir.util.IndexedValueMap.visitEach(LIRInstruction, LIRInstruction$OperandMode, EnumSet, InstructionValueConsumer):void (122 bytes)   relevance-based (relevance=0.500000, probability=0.707264, bonus=1.000000, nodes=75 <= 150.000000)
                                    @ 36  jdk.graal.compiler.lir.LIRFrameState.visitEachState(LIRInstruction, InstructionValueConsumer):void (99 bytes)   relevance-based (relevance=1.000000, probability=1.414529, bonus=1.000000, nodes=258 <= 300.000000)
                                  @ 6  jdk.graal.compiler.lir.LIRInstructionClass.visitEachState(LIRInstruction, InstructionValueConsumer):void (46 bytes)   relevance-based (relevance=1.000000, probability=2.829058, bonus=1.000000, nodes=290 <= 300.000000)
                            @ 8  jdk.graal.compiler.lir.stackslotalloc.LSStackSlotAllocator$Allocator.lambda$new$1(StackInterval, StackInterval):int (10 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.lir.stackslotalloc.StackInterval.to():int (5 bytes)   inline accessor method (bytecode parsing)
                              @ 5  jdk.graal.compiler.lir.stackslotalloc.StackInterval.to():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 8  jdk.graal.compiler.lir.stackslotalloc.LSStackSlotAllocator$Allocator.lambda$new$0(StackInterval, StackInterval):int (10 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.lir.stackslotalloc.StackInterval.from():int (5 bytes)   inline accessor method (bytecode parsing)
                              @ 5  jdk.graal.compiler.lir.stackslotalloc.StackInterval.from():int (5 bytes)   inline accessor method (bytecode parsing)
                                @ 1  jdk.graal.compiler.core.common.cfg.BasicBlock.getRelativeFrequency():double (0 bytes)   not inlining no type profile exists
                                @ 8  jdk.graal.compiler.lir.framemap.FrameMapBuilderImpl.lambda$verifyStackSlotAllocation$1(InstructionValueConsumer, LIRInstruction):void (26 bytes)   not inlining relevance-based (relevance=1.000000, probability=2.829058, bonus=1.000000, nodes=514 > 300.000000)
                                @ 12  jdk.graal.compiler.core.common.cfg.BasicBlock.getRelativeFrequency():double (0 bytes)   not inlining no type profile exists
                                @ 23  jdk.graal.compiler.core.common.cfg.BasicBlock.getLoopDepth():int (0 bytes)   not inlining no type profile exists
                              @ 46  jdk.graal.compiler.lir.framemap.FrameMapBuilderImpl$$Lambda/0x00007f2ce0246db0.accept(Object):void (12 bytes)   relevance-based (relevance=1.000000, probability=3.249663, bonus=1.000000, nodes=54 <= 300.000000)
                                @ 27  jdk.graal.compiler.core.common.cfg.BasicBlock.getLoopDepth():int (0 bytes)   not inlining no type profile exists
                                @ 39  jdk.graal.compiler.core.common.cfg.BasicBlock.getRelativeFrequency():double (0 bytes)   not inlining no type profile exists
                                @ 43  jdk.graal.compiler.core.common.cfg.BasicBlock.getRelativeFrequency():double (0 bytes)   not inlining no type profile exists
                                @ 9  jdk.graal.compiler.core.common.alloc.BasicBlockOrderUtils$BlockOrderComparator.compare(BasicBlock, BasicBlock):int (54 bytes)   relevance-based (relevance=1.000000, probability=1.230421, bonus=1.000000, nodes=47 <= 300.000000)
                              @ 21  jdk.graal.compiler.core.common.alloc.BasicBlockOrderUtils$BlockOrderComparator.compare(Object, Object):int (13 bytes)   relevance-based (relevance=1.782138, probability=1.397056, bonus=1.000000, nodes=99 <= 300.000000)
                            @ 55  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                @ 14  java.lang.Class.getComponentType():Class (14 bytes)   trivial (relevance=0.245010, probability=0.196794, bonus=1.000000, nodes=7)
                                @ 32  java.lang.Math.min(int, int):int (11 bytes)   trivial (relevance=1.245010, probability=1.000000, bonus=1.000000, nodes=7)
                              @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   relevance-based (relevance=1.367347, probability=1.000000, bonus=1.000000, nodes=40 <= 300.000000)
                            @ 4  java.lang.StringBuilder.append(CharSequence, int, int):StringBuilder (10 bytes)   inline method (bytecode parsing)
                              @ 16  java.lang.StringBuilder.append(CharSequence, int, int):Appendable (8 bytes)   not inlining too large previous low-level graph (low-level-nodes: 403, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=11)
                                @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                              @ 10  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=8)
                              @ 18  jdk.internal.util.Preconditions.checkFromToIndex(int, int, int, BiFunction):int (24 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=14 <= 300.000000)
                                    @ 3  java.lang.Math.max(int, int):int (11 bytes)   trivial (relevance=0.169404, probability=0.144864, bonus=1.000000, nodes=7)
                                  @ 29  jdk.internal.util.ArraysSupport.newLength(int, int, int):int (27 bytes)   relevance-based (relevance=0.169404, probability=0.144864, bonus=1.000000, nodes=15 <= 50.821322)
                                @ 24  java.lang.AbstractStringBuilder.newCapacity(int):int (59 bytes)   relevance-based (relevance=0.169404, probability=0.144864, bonus=1.000000, nodes=27 <= 50.821322)
                                  @ 25  java.lang.Math.min(int, int):int (11 bytes)   trivial (relevance=0.169406, probability=0.144844, bonus=1.000000, nodes=7)
                                @ 32  java.util.Arrays.copyOf(byte[], int):byte[] (33 bytes)   relevance-based (relevance=0.169404, probability=0.144864, bonus=1.000000, nodes=28 <= 50.821322)
                              @ 35  java.lang.AbstractStringBuilder.ensureCapacityInternal(int):void (39 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=72 <= 300.000000)
                            @ 15  java.lang.String.value():byte[] (5 bytes)   inline accessor method (bytecode parsing)
                                @ 1  java.lang.AbstractStringBuilder.isLatin1():boolean (19 bytes)   trivial (relevance=1.000010, probability=0.999999, bonus=1.000000, nodes=9)
                                @ 8  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000010, probability=0.999999, bonus=1.000000, nodes=9)
                              @ 52  java.lang.AbstractStringBuilder.appendChars(String, int, int):void (207 bytes)   relevance-based (relevance=1.169403, probability=0.999999, bonus=1.000000, nodes=38 <= 300.000000)
                            @ 15  java.lang.String.value():byte[] (5 bytes)   inline accessor method (bytecode parsing)
                              @ 1  java.lang.AbstractStringBuilder.isLatin1():boolean (19 bytes)   trivial (relevance=1.000010, probability=1.000000, bonus=1.000000, nodes=9)
                              @ 8  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000010, probability=1.000000, bonus=1.000000, nodes=9)
                            @ 12  java.util.ArrayDeque.elementAt(Object[], int):Object (4 bytes)   inline method (bytecode parsing)
                                  @ 28  java.util.ArrayDeque.inc(int, int):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.999620, bonus=1.000000, nodes=10 <= 300.000000)
                                @ 1  java.util.ArrayDeque.pollFirst():Object (36 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=26 <= 300.000000)
                              @ 1  java.util.ArrayDeque.removeFirst():Object (19 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=28 <= 300.000000)
                              @ 7  jdk.internal.misc.Unsafe.convEndian(boolean, int):int (16 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=16 <= 300.000000)
                            @ 5  java.util.Objects.checkIndex(int, int):int (7 bytes)   inline method (bytecode parsing)
                              @ 21  java.util.ArrayList.fastRemove(Object[], int):void (44 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=38 <= 300.000000)
                            @ 2  jdk.internal.math.FormattedFPDecimal.toDigit(int):char (6 bytes)   inline method (bytecode parsing)
                              @ 25  java.lang.Math.min(int, int):int (11 bytes)   trivial (relevance=1.000010, probability=1.000000, bonus=1.000000, nodes=7)
                                @ 18  java.lang.Object.equals(Object):boolean (11 bytes)   trivial (relevance=1.000000, probability=0.852191, bonus=1.000000, nodes=9)
                              @ 5  java.util.Collections.eq(Object, Object):boolean (22 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=36 <= 300.000000)
                            @ 4  java.lang.Integer.hashCode(int):int (2 bytes)   inline method (bytecode parsing)
                              @ 10  java.lang.Long.compare(long, long):int (22 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=6)
                            @ 32  java.util.BitSet.wordIndex(int):int (5 bytes)   inline method (bytecode parsing)
                              @ 62  java.util.BitSet.recalculateWordsInUse():void (39 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=38 <= 300.000000)
                              @ 66  java.util.BitSet.checkInvariants():void (111 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=4)
                            @ 4  java.nio.Buffer.session():MemorySessionImpl (20 bytes)   inline method (bytecode parsing)
                            @ 18  java.nio.HeapByteBuffer.byteOffset(long):long (7 bytes)   inline method (bytecode parsing)
                            @ 26  jdk.internal.misc.ScopedMemoryAccess.putIntUnaligned(MemorySessionImpl, Object, long, int, boolean):void (23 bytes)   inline method (bytecode parsing)
                              @ 8  jdk.internal.misc.ScopedMemoryAccess.putIntUnalignedInternal(MemorySessionImpl, Object, long, int, boolean):void (37 bytes)   inline method (bytecode parsing)
                                @ 17  jdk.internal.misc.Unsafe.putIntUnaligned(Object, long, int, boolean):void (14 bytes)   inline method (bytecode parsing)
                              @ 14  java.nio.Buffer.nextPutIndex(int):int (32 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=13 <= 300.000000)
                              @ 7  jdk.internal.misc.Unsafe.convEndian(boolean, int):int (16 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=16 <= 300.000000)
                            @ 34  java.util.Formatter$Flags.contains(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 2  java.lang.StringBuilder.append(CharSequence):StringBuilder (8 bytes)   inline method (bytecode parsing)
                                  @ 2  java.lang.AbstractStringBuilder.append(CharSequence):AbstractStringBuilder (54 bytes)   not inlining too large previous low-level graph (low-level-nodes: 399, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=15)
                                @ 10  java.lang.StringBuilder.append(CharSequence):Appendable (6 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=9)
                              @ 53  java.util.Formatter$FormatSpecifier.appendJustified(Appendable, CharSequence):void (89 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=23 <= 300.000000)
                              @ 4  java.lang.Boolean.hashCode(boolean):int (14 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=9)
                              @ 1  java.util.ArrayList$SubList$1.checkForComodification():void (26 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 13  java.text.DecimalFormatSymbols.getZeroDigit():char (5 bytes)   inline accessor method (bytecode parsing)
                            @ 9  java.text.DecimalFormatSymbols.getLocale():Locale (5 bytes)   inline accessor method (bytecode parsing)
                                @ 13  java.util.Locale.equals(Object):boolean (75 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=8)
                            @ 10  java.util.Formatter$Flags.contains(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 32  java.util.Formatter$Flags.contains(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                              @ 10  java.util.Formatter.getDecimalFormatSymbols(Locale):DecimalFormatSymbols (32 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=15 <= 300.000000)
                              @ 2  org.graalvm.collections.EconomicMapImpl.checkKeyNonNull(Object):void (15 bytes)   trivial (relevance=1.680822, probability=1.000000, bonus=1.000000, nodes=6)
                              @ 12  java.util.ArrayDeque.circularClear(Object[], int, int):void (43 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=38 <= 300.000000)
                              @ 6  org.graalvm.collections.EconomicMapImpl.hasHashArray():boolean (13 bytes)   trivial (relevance=1.680822, probability=1.000000, bonus=1.000000, nodes=9)
                            @ 21  org.graalvm.collections.EconomicMapImpl.getKey(int):Object (9 bytes)   inline method (bytecode parsing)
                            @ 4  jdk.graal.compiler.graph.Node.getNodeClass():NodeClass (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 40  jdk.graal.compiler.graph.Graph$1.hashCode(Object):int (15 bytes)   not inlining relevance-based (relevance=0.037972, probability=0.014931, bonus=1.000000, nodes=14 > 11.391576)
                 n                @ 48  java.lang.Object.hashCode():int (0 bytes)   trivial (relevance=0.992172, probability=0.390123, bonus=1.000000, nodes=5)
                                  @ 61  org.graalvm.collections.EconomicMapImpl.getHashTableSize():int (43 bytes)   relevance-based (relevance=1.030144, probability=0.405053, bonus=1.000000, nodes=21 <= 300.000000)
                                @ 2  org.graalvm.collections.EconomicMapImpl.getHashIndex(Object):int (68 bytes)   relevance-based (relevance=0.861641, probability=0.405053, bonus=1.000000, nodes=76 <= 258.492156)
                                @ 8  org.graalvm.collections.EconomicMapImpl.getHashArray(int):int (126 bytes)   relevance-based (relevance=0.813964, probability=0.405053, bonus=1.000000, nodes=31 <= 244.189334)
                            @ 47  java.lang.Enum.ordinal():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 49  jdk.graal.compiler.graph.Node.valueEquals(Node):boolean (10 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.graph.Node.getNodeClass():NodeClass (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 46  jdk.graal.compiler.graph.Graph$1.equals(Object, Object):boolean (53 bytes)   not inlining relevance-based (relevance=0.082009, probability=0.017178, bonus=1.000000, nodes=25 > 24.602656)
                                @ 36  java.lang.Object.equals(Object):boolean (11 bytes)   not inlining no methods remaining after filtering less frequent methods (8 methods previously)
                                @ 30  org.graalvm.collections.EconomicMapImpl.compareKeys(Object, Object):boolean (52 bytes)   relevance-based (relevance=0.795563, probability=0.395896, bonus=1.000000, nodes=40 <= 238.668995)
                                @ 38  org.graalvm.collections.EconomicMapImpl.getRawValue(int):Object (11 bytes)   relevance-based (relevance=0.705207, probability=0.350932, bonus=1.000000, nodes=10 <= 211.562228)
                                @ 81  org.graalvm.collections.EconomicMapImpl.getRawValue(int):Object (11 bytes)   relevance-based (relevance=0.090356, probability=0.044964, bonus=1.000000, nodes=10 <= 27.106767)
                            @ 20  org.graalvm.collections.EconomicMapImpl.getKey(int):Object (9 bytes)   inline method (bytecode parsing)
                                @ 102  org.graalvm.collections.EconomicMapImpl.findAndRemoveWithCollision(Object, EconomicMapImpl$CollisionLink, int):int (137 bytes)   not inlining relevance-based (relevance=0.085787, probability=0.042690, bonus=1.000000, nodes=73 > 25.736200)
                                @ 74  org.graalvm.collections.EconomicMapImpl.setHashArray(int, int):void (112 bytes)   relevance-based (relevance=0.705207, probability=0.350932, bonus=1.000000, nodes=37 <= 211.562228)
                              @ 1  java.util.Formatter.ensureOpen():void (16 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=7)
                              @ 14  org.graalvm.collections.EconomicMapImpl.findAndRemoveHash(Object):int (108 bytes)   relevance-based (relevance=0.680822, probability=0.405053, bonus=1.000000, nodes=201 <= 204.246687)
                              @ 11  java.util.Formatter.parse(String):List (208 bytes)   not inlining too large previous low-level graph (low-level-nodes: 523, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=83)
                                @ 5  java.util.ArrayList$Itr.<init>(ArrayList):void (26 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=15 <= 300.000000)
                              @ 18  java.util.ArrayList.iterator():Iterator (9 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=16 <= 300.000000)
                              @ 27  java.util.ArrayList$Itr.hasNext():boolean (20 bytes)   relevance-based (relevance=2.053677, probability=6.345823, bonus=1.000000, nodes=11 <= 300.000000)
                                @ 1  java.util.ArrayList$Itr.checkForComodification():void (23 bytes)   trivial (relevance=1.000000, probability=5.345823, bonus=1.000000, nodes=9)
                              @ 37  java.util.ArrayList$Itr.next():Object (66 bytes)   relevance-based (relevance=1.730050, probability=5.345823, bonus=1.000000, nodes=25 <= 300.000000)
                            @ 49  jdk.graal.compiler.graph.Node.valueEquals(Node):boolean (10 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.graph.Node.getNodeClass():NodeClass (5 bytes)   inline accessor method (bytecode parsing)
                              @ 49  java.util.Formatter$FormatSpecifier.index():int (5 bytes)   trivial (relevance=1.730050, probability=5.345823, bonus=1.000000, nodes=9)
                            @ 59  jdk.graal.compiler.core.common.Fields.getCount():int (6 bytes)   inline method (bytecode parsing)
                            @ 70  jdk.graal.compiler.core.common.Fields.getType(int):Class (7 bytes)   inline method (bytecode parsing)
                              @ 205  java.util.Formatter$FormatSpecifier.print(Formatter, Object, Locale):void (234 bytes)   not inlining too large previous low-level graph (low-level-nodes: 362, relevance=1.000010, probability=3.089981, bonus=1.000000, nodes=37)
                            @ 4  java.lang.StringBuilder.append(CharSequence, int, int):StringBuilder (10 bytes)   inline method (bytecode parsing)
                                @ 16  java.lang.StringBuilder.append(CharSequence, int, int):Appendable (8 bytes)   not inlining too large previous low-level graph (low-level-nodes: 403, relevance=0.730058, probability=2.255842, bonus=1.000000, nodes=11)
                              @ 89  java.util.Formatter$FixedString.print(Formatter, Object, Locale):void (23 bytes)   relevance-based (relevance=0.730058, probability=2.255842, bonus=1.000000, nodes=12 <= 219.017289)
                                    @ 6  jdk.graal.compiler.graph.NodeClass.dataEquals(Node, Node):boolean (546 bytes)   not inlining relevance-based (relevance=0.103083, probability=0.024848, bonus=1.000000, nodes=248 > 30.924824)
                                  @ 46  jdk.graal.compiler.graph.Graph$1.equals(Object, Object):boolean (53 bytes)   relevance-based (relevance=0.103083, probability=0.049697, bonus=1.000000, nodes=25 <= 30.924824)
                                @ 36  java.lang.Object.equals(Object):boolean (11 bytes)   not inlining no methods remaining after filtering less frequent methods (8 methods previously)
                                @ 26  org.graalvm.collections.EconomicMapImpl.compareKeys(Object, Object):boolean (52 bytes)   relevance-based (relevance=1.189277, probability=1.145321, bonus=1.000000, nodes=66 <= 300.000000)
                              @ 23  org.graalvm.collections.EconomicMapImpl.findLinear(Object):int (42 bytes)   relevance-based (relevance=1.000000, probability=0.594947, bonus=1.000000, nodes=88 <= 300.000000)
                                @ 2  org.graalvm.collections.EconomicMapImpl.getRawValue(int):Object (11 bytes)   relevance-based (relevance=1.053269, probability=0.977713, bonus=1.000000, nodes=10 <= 300.000000)
                              @ 34  org.graalvm.collections.EconomicMapImpl.getValue(int):Object (23 bytes)   relevance-based (relevance=1.643362, probability=0.977713, bonus=1.000000, nodes=19 <= 300.000000)
                            @ 45  org.graalvm.collections.EconomicMapImpl.getKey(int):Object (9 bytes)   inline method (bytecode parsing)
                            @ 48  org.graalvm.collections.EconomicMapImpl.setKey(int, Object):void (10 bytes)   inline method (bytecode parsing)
                            @ 75  org.graalvm.collections.EconomicMapImpl.setKey(int, Object):void (10 bytes)   inline method (bytecode parsing)
                            @ 81  org.graalvm.collections.EconomicMapImpl.setRawValue(int, Object):void (12 bytes)   inline method (bytecode parsing)
                            @ 112  org.graalvm.collections.EconomicMapImpl.getKey(int):Object (9 bytes)   inline method (bytecode parsing)
                              @ 40  org.graalvm.collections.EconomicMapImpl.remove(int):int (165 bytes)   not inlining too large previous low-level graph (low-level-nodes: 932, relevance=1.643362, probability=0.977713, bonus=1.000000, nodes=116)
                            @ 1  java.util.Objects.requireNonNull(Object):Object (14 bytes)   inline method (bytecode parsing)
                            @ 36  java.lang.Class$3.<init>(Class, Method):void (10 bytes)   inline method (bytecode parsing)
                            @ 39  java.security.AccessController.doPrivileged(PrivilegedAction):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.security.AccessController.executePrivileged(PrivilegedAction, AccessControlContext, Class):Object (65 bytes)   inline method (bytecode parsing)
                                @ 29  java.lang.Class$3.run():Object (5 bytes)   inline method (bytecode parsing)
                                  @ 1  java.lang.Class$3.run():Void (10 bytes)   inline method (bytecode parsing)
                            @ 49  java.lang.reflect.Method.invoke(Object, Object[]):Object (108 bytes)   inline method (bytecode parsing)
                              @ 10  java.lang.Class.isEnum():boolean (27 bytes)   not inlining relevance-based (relevance=0.000766, probability=0.000765, bonus=1.000000, nodes=70 > 0.229762)
                            @ 1  java.util.Objects.requireNonNull(Object):Object (14 bytes)   inline method (bytecode parsing)
                            @ 46  java.lang.NoSuchMethodException.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  java.lang.ReflectiveOperationException.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                                @ 2  java.lang.Exception.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                              @ 26  java.lang.Class.getMethod(String, Class[]):Method (59 bytes)   not inlining relevance-based (relevance=0.000766, probability=0.000765, bonus=1.000000, nodes=56 > 0.229762)
                            @ 11  java.lang.reflect.Method.checkCanSetAccessible(Class):void (10 bytes)   inline method (bytecode parsing)
                              @ 6  java.lang.reflect.AccessibleObject.checkCanSetAccessible(Class, Class):void (9 bytes)   inline method (bytecode parsing)
                            @ 16  java.lang.reflect.AccessibleObject.setAccessible0(boolean):boolean (7 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.reflect.Method.setAccessible(boolean):void (21 bytes)   not inlining relevance-based (relevance=0.000766, probability=0.000765, bonus=1.000000, nodes=23 > 0.229762)
                              @ 1  java.lang.reflect.Method.isCallerSensitive():boolean (38 bytes)   not inlining relevance-based (relevance=0.000766, probability=0.000765, bonus=1.000000, nodes=26 > 0.229762)
                              @ 42  java.lang.reflect.Modifier.isStatic(int):boolean (13 bytes)   trivial (relevance=0.000383, probability=0.000383, bonus=1.000000, nodes=9)
                              @ 60  java.lang.reflect.AccessibleObject.checkAccess(Class, Class, Class, int):void (40 bytes)   not inlining relevance-based (relevance=0.000383, probability=0.000383, bonus=1.000000, nodes=38 > 0.114881)
                            @ 14  java.lang.reflect.Method.getMethodAccessor():MethodAccessor (5 bytes)   inline accessor method (bytecode parsing)
                            @ 42  jdk.internal.misc.VM.isJavaLangInvokeInited():boolean (4 bytes)   inline method (bytecode parsing)
                              @ 75  java.lang.reflect.Method.acquireMethodAccessor():MethodAccessor (55 bytes)   not inlining relevance-based (relevance=0.000383, probability=0.000383, bonus=1.000000, nodes=39 > 0.114881)
                            @ 24  jdk.internal.reflect.DirectMethodHandleAccessor.invokeImpl(Object, Object[], Class):Object (140 bytes)   inline method (bytecode parsing)
                              @ 121  java.lang.invoke.MethodHandleImpl$1.reflectiveInvoker(Class):MethodHandle (10 bytes)   inline method (bytecode parsing)
                                @ 1  java.util.Objects.requireNonNull(Object):Object (14 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.internal.reflect.DirectMethodHandleAccessor.isStatic():boolean (20 bytes)   not inlining relevance-based (relevance=0.000766, probability=0.000383, bonus=1.000000, nodes=10 > 0.229762)
                              @ 22  jdk.internal.util.ArraysSupport.newLength(int, int, int):int (27 bytes)   not inlining relevance-based (relevance=0.039211, probability=0.037732, bonus=1.000000, nodes=16 > 11.763380)
                            @ 20  java.lang.IllegalArgumentException.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  java.lang.RuntimeException.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                                @ 2  java.lang.Exception.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                              @ 25  java.util.Arrays.copyOf(byte[], int):byte[] (33 bytes)   not inlining relevance-based (relevance=0.039211, probability=0.037732, bonus=1.000000, nodes=29 > 11.763380)
                                @ 9  jdk.internal.reflect.DirectMethodHandleAccessor.checkReceiver(Object):void (25 bytes)   trivial (relevance=0.000383, probability=0.000191, bonus=1.000000, nodes=5)
                            @ 24  java.lang.StringBuilder.<init>():void (7 bytes)   inline method (bytecode parsing)
                            @ 29  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 33  java.lang.StringBuilder.append(int):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 38  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 42  java.lang.StringBuilder.append(int):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 45  java.lang.StringBuilder.toString():String (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.String.<init>(StringBuilder):void (7 bytes)   inline method (bytecode parsing)
                            @ 48  java.lang.IllegalArgumentException.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  java.lang.RuntimeException.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                                @ 2  java.lang.Exception.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                                @ 17  jdk.internal.reflect.DirectMethodHandleAccessor.checkArgumentCount(int, Object[]):void (53 bytes)   not inlining relevance-based (relevance=0.003829, probability=0.000383, bonus=1.000000, nodes=49 > 1.148809)
                                @ 1  jdk.internal.reflect.DirectMethodHandleAccessor.hasCallerParameter():boolean (20 bytes)   not inlining relevance-based (relevance=0.003829, probability=0.000383, bonus=1.000000, nodes=10 > 1.148809)
                              @ 90  jdk.internal.reflect.DirectMethodHandleAccessor.invoke(Object, Object[], Class):Object (102 bytes)   forced inlining
                            @ 23  jdk.internal.reflect.DirectMethodHandleAccessor.invokeImpl(Object, Object[]):Object (108 bytes)   inline method (bytecode parsing)
                              @ 72  java.lang.invoke.LambdaForm$MH/0x00007f2ce0004800.invokeExact_MT(Object, Object, Object, Object, Object):Object (26 bytes)   inline method (bytecode parsing)
                                @ 11  java.lang.invoke.Invokers.checkExactType(MethodHandle, MethodType):void (17 bytes)   inline method (bytecode parsing)
                                  @ 1  java.lang.invoke.MethodHandle.type():MethodType (5 bytes)   inline accessor method (bytecode parsing)
                                @ 15  java.lang.invoke.Invokers.checkCustomized(MethodHandle):void (23 bytes)   inline method (bytecode parsing)
                              @ 41  java.lang.invoke.Invokers$Holder.invokeExact_MT(Object, Object, Object):Object (23 bytes)   inline method (bytecode parsing)
                                @ 10  java.lang.invoke.Invokers.checkExactType(MethodHandle, MethodType):void (17 bytes)   inline method (bytecode parsing)
                                  @ 1  java.lang.invoke.MethodHandle.type():MethodType (5 bytes)   inline accessor method (bytecode parsing)
                                @ 14  java.lang.invoke.Invokers.checkCustomized(MethodHandle):void (23 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.internal.reflect.DirectMethodHandleAccessor.isStatic():boolean (20 bytes)   not inlining relevance-based (relevance=0.000766, probability=0.000383, bonus=1.000000, nodes=10 > 0.229762)
                            @ 20  java.lang.IllegalArgumentException.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  java.lang.RuntimeException.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                                @ 2  java.lang.Exception.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                            @ 4  java.util.Objects.checkFromIndexSize(int, int, int):int (8 bytes)   inline method (bytecode parsing)
                                @ 9  jdk.internal.reflect.DirectMethodHandleAccessor.checkReceiver(Object):void (25 bytes)   trivial (relevance=0.000383, probability=0.000191, bonus=1.000000, nodes=5)
                            @ 24  java.lang.StringBuilder.<init>():void (7 bytes)   inline method (bytecode parsing)
                            @ 29  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 33  java.lang.StringBuilder.append(int):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 38  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 42  java.lang.StringBuilder.append(int):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 45  java.lang.StringBuilder.toString():String (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.String.<init>(StringBuilder):void (7 bytes)   inline method (bytecode parsing)
                              @ 4  jdk.internal.util.Preconditions.checkFromIndexSize(int, int, int, BiFunction):int (25 bytes)   relevance-based (relevance=1.000010, probability=1.000000, bonus=1.000000, nodes=15 <= 300.000000)
                            @ 48  java.lang.IllegalArgumentException.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  java.lang.RuntimeException.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                                @ 2  java.lang.Exception.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                                @ 17  jdk.internal.reflect.DirectMethodHandleAccessor.checkArgumentCount(int, Object[]):void (53 bytes)   not inlining relevance-based (relevance=0.003607, probability=0.000383, bonus=1.000000, nodes=49 > 1.081998)
                              @ 19  java.lang.invoke.Invokers.maybeCustomize(MethodHandle):void (5 bytes)   not inlining it is marked non-inlinable
                              @ 19  java.lang.invoke.Invokers.maybeCustomize(MethodHandle):void (5 bytes)   not inlining it is marked non-inlinable
                              @ 102  jdk.internal.reflect.DirectMethodHandleAccessor.invoke(Object, Object[]):Object (92 bytes)   forced inlining
                                @ 22  jdk.internal.util.ArraysSupport.newLength(int, int, int):int (27 bytes)   not inlining relevance-based (relevance=0.039211, probability=0.037732, bonus=1.000000, nodes=16 > 11.763380)
                                @ 25  java.util.Arrays.copyOf(byte[], int):byte[] (33 bytes)   not inlining relevance-based (relevance=0.039211, probability=0.037732, bonus=1.000000, nodes=29 > 11.763380)
                              @ 15  java.io.ByteArrayOutputStream.ensureCapacity(int):void (32 bytes)   relevance-based (relevance=1.000010, probability=1.000000, bonus=1.000000, nodes=25 <= 300.000000)
                            @ 1  java.util.EnumSet.getUniverse(Class):Enum[] (10 bytes)   inline method (bytecode parsing)
                              @ 0  jdk.internal.access.SharedSecrets.getJavaLangAccess():JavaLangAccess (4 bytes)   inline method (bytecode parsing)
                            @ 36  java.lang.Class$3.<init>(Class, Method):void (10 bytes)   inline method (bytecode parsing)
                            @ 39  java.security.AccessController.doPrivileged(PrivilegedAction):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.security.AccessController.executePrivileged(PrivilegedAction, AccessControlContext, Class):Object (65 bytes)   inline method (bytecode parsing)
                                @ 29  java.lang.Class$3.run():Object (5 bytes)   inline method (bytecode parsing)
                                  @ 1  java.lang.Class$3.run():Void (10 bytes)   inline method (bytecode parsing)
                            @ 49  java.lang.reflect.Method.invoke(Object, Object[]):Object (108 bytes)   inline method (bytecode parsing)
                                  @ 10  java.lang.Class.isEnum():boolean (27 bytes)   not inlining relevance-based (relevance=0.000766, probability=0.000765, bonus=1.000000, nodes=70 > 0.229762)
                            @ 1  java.util.Objects.requireNonNull(Object):Object (14 bytes)   inline method (bytecode parsing)
                            @ 46  java.lang.NoSuchMethodException.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  java.lang.ReflectiveOperationException.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                                @ 2  java.lang.Exception.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                                  @ 26  java.lang.Class.getMethod(String, Class[]):Method (59 bytes)   not inlining relevance-based (relevance=0.000766, probability=0.000765, bonus=1.000000, nodes=56 > 0.229762)
                            @ 11  java.lang.reflect.Method.checkCanSetAccessible(Class):void (10 bytes)   inline method (bytecode parsing)
                              @ 6  java.lang.reflect.AccessibleObject.checkCanSetAccessible(Class, Class):void (9 bytes)   inline method (bytecode parsing)
                            @ 16  java.lang.reflect.AccessibleObject.setAccessible0(boolean):boolean (7 bytes)   inline method (bytecode parsing)
                                  @ 5  java.lang.reflect.Method.setAccessible(boolean):void (21 bytes)   not inlining relevance-based (relevance=0.000766, probability=0.000765, bonus=1.000000, nodes=23 > 0.229762)
                                  @ 1  java.lang.reflect.Method.isCallerSensitive():boolean (38 bytes)   not inlining relevance-based (relevance=0.000766, probability=0.000765, bonus=1.000000, nodes=26 > 0.229762)
                                  @ 42  java.lang.reflect.Modifier.isStatic(int):boolean (13 bytes)   trivial (relevance=0.000383, probability=0.000383, bonus=1.000000, nodes=9)
                                  @ 60  java.lang.reflect.AccessibleObject.checkAccess(Class, Class, Class, int):void (40 bytes)   not inlining relevance-based (relevance=0.000383, probability=0.000383, bonus=1.000000, nodes=38 > 0.114881)
                            @ 14  java.lang.reflect.Method.getMethodAccessor():MethodAccessor (5 bytes)   inline accessor method (bytecode parsing)
                            @ 42  jdk.internal.misc.VM.isJavaLangInvokeInited():boolean (4 bytes)   inline method (bytecode parsing)
                                  @ 75  java.lang.reflect.Method.acquireMethodAccessor():MethodAccessor (55 bytes)   not inlining relevance-based (relevance=0.000383, probability=0.000383, bonus=1.000000, nodes=39 > 0.114881)
                            @ 24  jdk.internal.reflect.DirectMethodHandleAccessor.invokeImpl(Object, Object[], Class):Object (140 bytes)   inline method (bytecode parsing)
                              @ 121  java.lang.invoke.MethodHandleImpl$1.reflectiveInvoker(Class):MethodHandle (10 bytes)   inline method (bytecode parsing)
                                @ 1  java.util.Objects.requireNonNull(Object):Object (14 bytes)   inline method (bytecode parsing)
                                    @ 1  jdk.internal.reflect.DirectMethodHandleAccessor.isStatic():boolean (20 bytes)   not inlining relevance-based (relevance=0.000766, probability=0.000383, bonus=1.000000, nodes=10 > 0.229762)
                            @ 20  java.lang.IllegalArgumentException.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  java.lang.RuntimeException.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                                @ 2  java.lang.Exception.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                                    @ 9  jdk.internal.reflect.DirectMethodHandleAccessor.checkReceiver(Object):void (25 bytes)   trivial (relevance=0.000383, probability=0.000191, bonus=1.000000, nodes=5)
                            @ 24  java.lang.StringBuilder.<init>():void (7 bytes)   inline method (bytecode parsing)
                            @ 29  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 33  java.lang.StringBuilder.append(int):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 38  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 42  java.lang.StringBuilder.append(int):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 45  java.lang.StringBuilder.toString():String (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.String.<init>(StringBuilder):void (7 bytes)   inline method (bytecode parsing)
                            @ 48  java.lang.IllegalArgumentException.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  java.lang.RuntimeException.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                                @ 2  java.lang.Exception.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                                    @ 17  jdk.internal.reflect.DirectMethodHandleAccessor.checkArgumentCount(int, Object[]):void (53 bytes)   not inlining relevance-based (relevance=0.003829, probability=0.000383, bonus=1.000000, nodes=49 > 1.148809)
                                    @ 1  jdk.internal.reflect.DirectMethodHandleAccessor.hasCallerParameter():boolean (20 bytes)   not inlining relevance-based (relevance=0.003829, probability=0.000383, bonus=1.000000, nodes=10 > 1.148809)
                                  @ 90  jdk.internal.reflect.DirectMethodHandleAccessor.invoke(Object, Object[], Class):Object (102 bytes)   forced inlining
                            @ 23  jdk.internal.reflect.DirectMethodHandleAccessor.invokeImpl(Object, Object[]):Object (108 bytes)   inline method (bytecode parsing)
                              @ 72  java.lang.invoke.LambdaForm$MH/0x00007f2ce0004800.invokeExact_MT(Object, Object, Object, Object, Object):Object (26 bytes)   inline method (bytecode parsing)
                                @ 11  java.lang.invoke.Invokers.checkExactType(MethodHandle, MethodType):void (17 bytes)   inline method (bytecode parsing)
                                  @ 1  java.lang.invoke.MethodHandle.type():MethodType (5 bytes)   inline accessor method (bytecode parsing)
                                @ 15  java.lang.invoke.Invokers.checkCustomized(MethodHandle):void (23 bytes)   inline method (bytecode parsing)
                              @ 41  java.lang.invoke.Invokers$Holder.invokeExact_MT(Object, Object, Object):Object (23 bytes)   inline method (bytecode parsing)
                                @ 10  java.lang.invoke.Invokers.checkExactType(MethodHandle, MethodType):void (17 bytes)   inline method (bytecode parsing)
                                  @ 1  java.lang.invoke.MethodHandle.type():MethodType (5 bytes)   inline accessor method (bytecode parsing)
                                @ 14  java.lang.invoke.Invokers.checkCustomized(MethodHandle):void (23 bytes)   inline method (bytecode parsing)
                            @ 6  java.util.ArrayList$ListItr.<init>(ArrayList, int):void (16 bytes)   inline method (bytecode parsing)
                                    @ 1  jdk.internal.reflect.DirectMethodHandleAccessor.isStatic():boolean (20 bytes)   not inlining relevance-based (relevance=0.000766, probability=0.000383, bonus=1.000000, nodes=10 > 0.229762)
                              @ 7  java.util.ArrayList$Itr.<init>(ArrayList):void (26 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=15 <= 300.000000)
                            @ 20  java.lang.IllegalArgumentException.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  java.lang.RuntimeException.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                                @ 2  java.lang.Exception.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                                    @ 9  jdk.internal.reflect.DirectMethodHandleAccessor.checkReceiver(Object):void (25 bytes)   trivial (relevance=0.000383, probability=0.000191, bonus=1.000000, nodes=5)
                            @ 24  java.lang.StringBuilder.<init>():void (7 bytes)   inline method (bytecode parsing)
                            @ 29  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 33  java.lang.StringBuilder.append(int):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 38  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 42  java.lang.StringBuilder.append(int):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 45  java.lang.StringBuilder.toString():String (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.String.<init>(StringBuilder):void (7 bytes)   inline method (bytecode parsing)
                            @ 48  java.lang.IllegalArgumentException.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  java.lang.RuntimeException.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                                @ 2  java.lang.Exception.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                                    @ 17  jdk.internal.reflect.DirectMethodHandleAccessor.checkArgumentCount(int, Object[]):void (53 bytes)   not inlining relevance-based (relevance=0.003610, probability=0.000383, bonus=1.000000, nodes=49 > 1.082865)
                                  @ 19  java.lang.invoke.Invokers.maybeCustomize(MethodHandle):void (5 bytes)   not inlining it is marked non-inlinable
                                  @ 19  java.lang.invoke.Invokers.maybeCustomize(MethodHandle):void (5 bytes)   not inlining it is marked non-inlinable
                                  @ 102  jdk.internal.reflect.DirectMethodHandleAccessor.invoke(Object, Object[]):Object (92 bytes)   forced inlining
                                @ 1  java.lang.Class.getEnumConstantsShared():Object[] (71 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=242 <= 300.000000)
                            @ 4  java.lang.StringBuilder.<init>():void (7 bytes)   inline method (bytecode parsing)
                              @ 4  java.lang.System$2.getEnumConstantsShared(Class):Enum[] (8 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=252 <= 300.000000)
                              @ 3  java.lang.AbstractStringBuilder.<init>(int):void (39 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                              @ 11  java.lang.Double.compare(double, double):int (54 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=25 <= 300.000000)
                            @ 1  java.util.AbstractSet.<init>():void (5 bytes)   inline method (bytecode parsing)
                              @ 1  java.util.AbstractCollection.<init>():void (5 bytes)   inline method (bytecode parsing)
                              @ 26  java.lang.Double.isNaN(double):boolean (12 bytes)   trivial (relevance=1.094687, probability=1.000000, bonus=1.000000, nodes=7)
                                @ 3  java.util.EnumSet.<init>(Class, Enum[]):void (15 bytes)   relevance-based (relevance=1.000000, probability=0.999388, bonus=1.000000, nodes=11 <= 300.000000)
                            @ 10  java.util.Formatter$Flags.contains(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                              @ 49  java.util.RegularEnumSet.<init>(Class, Enum[]):void (12 bytes)   relevance-based (relevance=1.000153, probability=0.999388, bonus=1.000000, nodes=15 <= 300.000000)
                            @ 32  java.util.Formatter$Flags.contains(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                              @ 43  java.util.Formatter$FormatSpecifier.leadingSign(StringBuilder, boolean):StringBuilder (80 bytes)   relevance-based (relevance=1.094687, probability=1.000000, bonus=1.000000, nodes=13 <= 300.000000)
                              @ 49  java.lang.Double.isInfinite(double):boolean (17 bytes)   trivial (relevance=1.094687, probability=1.000000, bonus=1.000000, nodes=9)
                            @ 275  java.lang.StringBuilder.<init>():void (7 bytes)   inline method (bytecode parsing)
                            @ 280  jdk.internal.math.FormattedFPDecimal.getMantissa():char[] (5 bytes)   inline accessor method (bytecode parsing)
                            @ 283  java.lang.StringBuilder.append(char[]):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 299  java.util.Formatter$Flags.contains(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 4  jdk.internal.math.FormattedFPDecimal.<init>():void (5 bytes)   inline method (bytecode parsing)
                                    @ 5  jdk.internal.math.DoubleToDecimal.<init>(boolean):void (21 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=9)
                            @ 15  jdk.internal.math.MathUtils.pow10(int):long (6 bytes)   inline method (bytecode parsing)
                                        @ 7  jdk.internal.math.MathUtils.flog10pow2(int):int (11 bytes)   relevance-based (relevance=1.043342, probability=0.606223, bonus=1.000000, nodes=10 <= 300.000000)
                                        @ 36  jdk.internal.math.FormattedFPDecimal.set(long, int, int):void (17 bytes)   relevance-based (relevance=1.043342, probability=0.606223, bonus=1.000000, nodes=13 <= 300.000000)
                                      @ 123  jdk.internal.math.DoubleToDecimal.toChars(long, int, FormattedFPDecimal):int (161 bytes)   relevance-based (relevance=1.000000, probability=0.606223, bonus=1.000000, nodes=36 <= 300.000000)
                                        @ 57  jdk.internal.math.MathUtils.flog10pow2(int):int (11 bytes)   relevance-based (relevance=0.677710, probability=0.391601, bonus=1.000000, nodes=10 <= 203.313073)
                                        @ 72  jdk.internal.math.MathUtils.flog10threeQuartersPow2(int):int (15 bytes)   not inlining relevance-based (relevance=0.003764, probability=0.002175, bonus=1.000000, nodes=12 > 1.129321)
                                        @ 81  jdk.internal.math.MathUtils.flog2pow10(int):int (11 bytes)   relevance-based (relevance=0.681475, probability=0.393777, bonus=1.000000, nodes=10 <= 204.442394)
                                        @ 91  jdk.internal.math.MathUtils.g1(int):long (12 bytes)   relevance-based (relevance=0.681475, probability=0.393777, bonus=1.000000, nodes=10 <= 204.442394)
                                        @ 98  jdk.internal.math.MathUtils.g0(int):long (14 bytes)   relevance-based (relevance=0.681475, probability=0.393777, bonus=1.000000, nodes=11 <= 204.442394)
                                        @ 112  jdk.internal.math.DoubleToDecimal.rop(long, long, long):long (58 bytes)   relevance-based (relevance=0.681475, probability=0.393777, bonus=1.000000, nodes=20 <= 204.442394)
                                        @ 126  jdk.internal.math.DoubleToDecimal.rop(long, long, long):long (58 bytes)   relevance-based (relevance=0.681475, probability=0.393777, bonus=1.000000, nodes=20 <= 204.442394)
                                        @ 140  jdk.internal.math.DoubleToDecimal.rop(long, long, long):long (58 bytes)   relevance-based (relevance=0.681475, probability=0.393777, bonus=1.000000, nodes=20 <= 204.442394)
                            @ 15  jdk.internal.math.MathUtils.pow10(int):long (6 bytes)   inline method (bytecode parsing)
                                          @ 7  jdk.internal.math.MathUtils.flog10pow2(int):int (11 bytes)   relevance-based (relevance=0.200919, probability=0.111274, bonus=1.000000, nodes=10 <= 60.275781)
                                          @ 36  jdk.internal.math.FormattedFPDecimal.set(long, int, int):void (17 bytes)   relevance-based (relevance=0.200919, probability=0.111274, bonus=1.000000, nodes=13 <= 60.275781)
                                        @ 248  jdk.internal.math.DoubleToDecimal.toChars(long, int, FormattedFPDecimal):int (161 bytes)   relevance-based (relevance=0.192573, probability=0.111274, bonus=1.000000, nodes=37 <= 57.771828)
                            @ 15  jdk.internal.math.MathUtils.pow10(int):long (6 bytes)   inline method (bytecode parsing)
                                          @ 7  jdk.internal.math.MathUtils.flog10pow2(int):int (11 bytes)   relevance-based (relevance=0.193801, probability=0.107332, bonus=1.000000, nodes=10 <= 58.140170)
                                          @ 36  jdk.internal.math.FormattedFPDecimal.set(long, int, int):void (17 bytes)   relevance-based (relevance=0.193801, probability=0.107332, bonus=1.000000, nodes=13 <= 58.140170)
                                        @ 327  jdk.internal.math.DoubleToDecimal.toChars(long, int, FormattedFPDecimal):int (161 bytes)   relevance-based (relevance=0.185750, probability=0.107332, bonus=1.000000, nodes=37 <= 55.724934)
                                      @ 135  jdk.internal.math.DoubleToDecimal.toDecimal(int, long, int, FormattedFPDecimal):int (385 bytes)   not inlining relevance-based (relevance=0.677710, probability=0.393777, bonus=1.000000, nodes=223 > 203.313073)
                                    @ 10  jdk.internal.math.DoubleToDecimal.toDecimal(double, FormattedFPDecimal):int (220 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=82 <= 300.000000)
                                  @ 12  jdk.internal.math.DoubleToDecimal.split(double, FormattedFPDecimal):void (15 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=92 <= 300.000000)
                            @ 64  jdk.internal.math.MathUtils.pow10(int):long (6 bytes)   inline method (bytecode parsing)
                            @ 119  jdk.internal.math.MathUtils.pow10(int):long (6 bytes)   inline method (bytecode parsing)
                                    @ 14  jdk.internal.math.FormattedFPDecimal.round(long):void (149 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=55 <= 300.000000)
                                        @ 29  jdk.internal.math.FormattedFPDecimal.fillWithZeros(int, int):void (20 bytes)   relevance-based (relevance=1.000000, probability=0.606223, bonus=1.000000, nodes=22 <= 300.000000)
                            @ 30  jdk.internal.math.FormattedFPDecimal.toDigit(long):char (6 bytes)   inline method (bytecode parsing)
                              @ 2  jdk.internal.math.FormattedFPDecimal.toDigit(int):char (6 bytes)   inline method (bytecode parsing)
                                        @ 42  jdk.internal.math.FormattedFPDecimal.fillWithDigits(long, int, int):long (42 bytes)   relevance-based (relevance=1.000000, probability=0.606223, bonus=1.000000, nodes=37 <= 300.000000)
                                      @ 8  jdk.internal.math.FormattedFPDecimal.plainCharsPureInteger():void (47 bytes)   relevance-based (relevance=1.000000, probability=0.606223, bonus=1.000000, nodes=59 <= 300.000000)
                            @ 30  jdk.internal.math.FormattedFPDecimal.toDigit(long):char (6 bytes)   inline method (bytecode parsing)
                              @ 2  jdk.internal.math.FormattedFPDecimal.toDigit(int):char (6 bytes)   inline method (bytecode parsing)
                                        @ 34  jdk.internal.math.FormattedFPDecimal.fillWithDigits(long, int, int):long (42 bytes)   relevance-based (relevance=0.245180, probability=0.148634, bonus=1.000000, nodes=37 <= 73.553934)
                            @ 30  jdk.internal.math.FormattedFPDecimal.toDigit(long):char (6 bytes)   inline method (bytecode parsing)
                              @ 2  jdk.internal.math.FormattedFPDecimal.toDigit(int):char (6 bytes)   inline method (bytecode parsing)
                                        @ 66  jdk.internal.math.FormattedFPDecimal.fillWithDigits(long, int, int):long (42 bytes)   relevance-based (relevance=0.245180, probability=0.148634, bonus=1.000000, nodes=37 <= 73.553934)
                                      @ 27  jdk.internal.math.FormattedFPDecimal.plainCharsMixed():void (71 bytes)   not inlining relevance-based (relevance=0.245180, probability=0.148634, bonus=1.000000, nodes=77 > 73.553934)
                            @ 53  jdk.internal.math.FormattedFPDecimal.fillWithZeros(int, int):void (20 bytes)   inline method (bytecode parsing)
                            @ 30  jdk.internal.math.FormattedFPDecimal.toDigit(long):char (6 bytes)   inline method (bytecode parsing)
                              @ 2  jdk.internal.math.FormattedFPDecimal.toDigit(int):char (6 bytes)   inline method (bytecode parsing)
                                        @ 36  jdk.internal.math.FormattedFPDecimal.fillWithDigits(long, int, int):long (42 bytes)   relevance-based (relevance=0.404377, probability=0.245143, bonus=1.000000, nodes=37 <= 121.313184)
                                      @ 34  jdk.internal.math.FormattedFPDecimal.plainCharsPureFraction():void (65 bytes)   relevance-based (relevance=0.404377, probability=0.245143, bonus=1.000000, nodes=70 <= 121.313184)
                                    @ 18  jdk.internal.math.FormattedFPDecimal.plainChars():FormattedFPDecimal (39 bytes)   relevance-based (relevance=1.649557, probability=1.000000, bonus=1.000000, nodes=139 <= 300.000000)
                                  @ 56  jdk.internal.math.FormattedFPDecimal.plain(int):FormattedFPDecimal (22 bytes)   relevance-based (relevance=1.721052, probability=1.000000, bonus=1.000000, nodes=195 <= 300.000000)
                                @ 266  jdk.internal.math.FormattedFPDecimal.valueOf(double, int, char):FormattedFPDecimal (96 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=282 <= 300.000000)
                            @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 8  java.util.concurrent.locks.AbstractOwnableSynchronizer.getExclusiveOwnerThread():Thread (5 bytes)   inline accessor method (bytecode parsing)
                            @ 41  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                            @ 46  java.util.concurrent.locks.AbstractQueuedSynchronizer.setState(int):void (6 bytes)   inline method (bytecode parsing)
                              @ 77  java.util.Formatter$FormatSpecifier.print(Formatter, StringBuilder, double, Locale, int, char, int, boolean):void (912 bytes)   not inlining relevance-based (relevance=1.094687, probability=1.000000, bonus=1.000000, nodes=320 > 300.000000)
                              @ 114  java.util.Formatter$FormatSpecifier.trailingSign(StringBuilder, boolean):StringBuilder (26 bytes)   trivial (relevance=1.094687, probability=1.000000, bonus=1.000000, nodes=6)
                            @ 2  java.lang.StringBuilder.append(CharSequence):StringBuilder (8 bytes)   inline method (bytecode parsing)
                                  @ 2  java.lang.AbstractStringBuilder.append(CharSequence):AbstractStringBuilder (54 bytes)   not inlining too large previous low-level graph (low-level-nodes: 399, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=8)
                                @ 10  java.lang.StringBuilder.append(CharSequence):Appendable (6 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=9)
                              @ 154  java.util.Formatter$FormatSpecifier.appendJustified(Appendable, CharSequence):void (89 bytes)   relevance-based (relevance=1.094687, probability=1.000000, bonus=1.000000, nodes=23 <= 300.000000)
                            @ 7  java.util.concurrent.locks.AbstractQueuedSynchronizer.compareAndSetState(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 15  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                            @ 21  java.util.concurrent.locks.AbstractOwnableSynchronizer.getExclusiveOwnerThread():Thread (5 bytes)   inline accessor method (bytecode parsing)
                            @ 29  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 51  java.util.concurrent.locks.AbstractQueuedSynchronizer.setState(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 4  jdk.internal.math.FormattedFPDecimal.<init>():void (5 bytes)   inline method (bytecode parsing)
                                @ 5  jdk.internal.math.DoubleToDecimal.<init>(boolean):void (21 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=9)
                            @ 15  jdk.internal.math.MathUtils.pow10(int):long (6 bytes)   inline method (bytecode parsing)
                            @ 1  java.util.Objects.requireNonNull(Object):Object (14 bytes)   inline method (bytecode parsing)
                            @ 43  java.util.ArrayList.elementAt(Object[], int):Object (4 bytes)   inline method (bytecode parsing)
                                    @ 7  jdk.internal.math.MathUtils.flog10pow2(int):int (11 bytes)   relevance-based (relevance=1.043342, probability=0.606223, bonus=1.000000, nodes=10 <= 300.000000)
                                    @ 36  jdk.internal.math.FormattedFPDecimal.set(long, int, int):void (17 bytes)   relevance-based (relevance=1.043342, probability=0.606223, bonus=1.000000, nodes=13 <= 300.000000)
                                  @ 123  jdk.internal.math.DoubleToDecimal.toChars(long, int, FormattedFPDecimal):int (161 bytes)   relevance-based (relevance=1.000000, probability=0.606223, bonus=1.000000, nodes=36 <= 300.000000)
                            @ 5  jdk.graal.compiler.lir.constopt.UseEntry.getBlock():BasicBlock (5 bytes)   inline accessor method (bytecode parsing)
                            @ 41  jdk.graal.compiler.core.common.cfg.BasicBlock.getId():int (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 8  jdk.graal.compiler.core.common.cfg.DominatorOptimizationProblem.set(Enum, BasicBlock):void (48 bytes)   not inlining relevance-based (relevance=0.049531, probability=0.211777, bonus=1.000000, nodes=39 > 14.859260)
                                @ 8  jdk.graal.compiler.lir.constopt.ConstantLoadOptimization$Optimization.lambda$createConstantTree$5(ConstantTree, UseEntry):void (12 bytes)   relevance-based (relevance=0.049531, probability=0.211777, bonus=1.000000, nodes=13 <= 14.859260)
                                    @ 57  jdk.internal.math.MathUtils.flog10pow2(int):int (11 bytes)   relevance-based (relevance=0.677710, probability=0.391700, bonus=1.000000, nodes=10 <= 203.313073)
                            @ 2  jdk.graal.compiler.lir.constopt.UseEntry.getBlock():BasicBlock (5 bytes)   inline accessor method (bytecode parsing)
                                @ 8  jdk.graal.compiler.lir.constopt.ConstantTree.lambda$new$0(UseEntry):void (16 bytes)   not inlining relevance-based (relevance=0.049571, probability=0.211949, bonus=1.000000, nodes=15 > 14.871341)
                                    @ 72  jdk.internal.math.MathUtils.flog10threeQuartersPow2(int):int (15 bytes)   not inlining relevance-based (relevance=0.003592, probability=0.002076, bonus=1.000000, nodes=12 > 1.077691)
                            @ 1  jdk.graal.compiler.lir.constopt.UseEntry.getBlock():BasicBlock (5 bytes)   inline accessor method (bytecode parsing)
                                    @ 81  jdk.internal.math.MathUtils.flog2pow10(int):int (11 bytes)   relevance-based (relevance=0.681303, probability=0.393777, bonus=1.000000, nodes=10 <= 204.390763)
                            @ 10  jdk.graal.compiler.core.common.cfg.BlockMap.get(BasicBlock):Object (10 bytes)   inline method (bytecode parsing)
                              @ 5  jdk.graal.compiler.core.common.cfg.BasicBlock.getId():int (5 bytes)   inline accessor method (bytecode parsing)
                                    @ 91  jdk.internal.math.MathUtils.g1(int):long (12 bytes)   relevance-based (relevance=0.681303, probability=0.393777, bonus=1.000000, nodes=10 <= 204.390763)
                                @ 8  jdk.graal.compiler.lir.constopt.ConstantLoadOptimization$Optimization.addUsageToBlockMap(UseEntry):void (47 bytes)   not inlining relevance-based (relevance=0.049571, probability=0.211949, bonus=1.000000, nodes=42 > 14.871341)
                                    @ 98  jdk.internal.math.MathUtils.g0(int):long (14 bytes)   relevance-based (relevance=0.681303, probability=0.393777, bonus=1.000000, nodes=11 <= 204.390763)
                            @ 2  jdk.graal.compiler.lir.LIRInstruction.visitEachInput(InstructionValueConsumer):void (10 bytes)   inline method (bytecode parsing)
                            @ 7  jdk.graal.compiler.lir.LIRInstruction.visitEachAlive(InstructionValueConsumer):void (10 bytes)   inline method (bytecode parsing)
                            @ 12  jdk.graal.compiler.lir.LIRInstruction.visitEachState(InstructionValueConsumer):void (10 bytes)   inline method (bytecode parsing)
                                    @ 112  jdk.internal.math.DoubleToDecimal.rop(long, long, long):long (58 bytes)   relevance-based (relevance=0.681303, probability=0.393777, bonus=1.000000, nodes=20 <= 204.390763)
                            @ 17  jdk.graal.compiler.lir.LIRInstruction.visitEachTemp(InstructionValueConsumer):void (10 bytes)   inline method (bytecode parsing)
                            @ 22  jdk.graal.compiler.lir.LIRInstruction.visitEachOutput(InstructionValueConsumer):void (10 bytes)   inline method (bytecode parsing)
                                    @ 126  jdk.internal.math.DoubleToDecimal.rop(long, long, long):long (58 bytes)   relevance-based (relevance=0.681303, probability=0.393777, bonus=1.000000, nodes=20 <= 204.390763)
                            @ 6  jdk.graal.compiler.core.common.Fields.getCount():int (6 bytes)   inline method (bytecode parsing)
                            @ 51  jdk.graal.compiler.lir.LIRIntrospection$Values.getDirectCount():int (5 bytes)   inline accessor method (bytecode parsing)
                                    @ 140  jdk.internal.math.DoubleToDecimal.rop(long, long, long):long (58 bytes)   relevance-based (relevance=0.681303, probability=0.393777, bonus=1.000000, nodes=20 <= 204.390763)
                            @ 61  jdk.graal.compiler.lir.LIRIntrospection$Values.getValue(Object, int):Value (10 bytes)   inline method (bytecode parsing)
                            @ 100  jdk.graal.compiler.lir.LIRIntrospection$Values.getFlags(int):EnumSet (7 bytes)   inline method (bytecode parsing)
                            @ 15  jdk.internal.math.MathUtils.pow10(int):long (6 bytes)   inline method (bytecode parsing)
                            @ 115  jdk.graal.compiler.lir.LIRIntrospection$Values.getValueArray(Object, int):Value[] (10 bytes)   inline method (bytecode parsing)
                            @ 172  jdk.graal.compiler.lir.LIRIntrospection$Values.getFlags(int):EnumSet (7 bytes)   inline method (bytecode parsing)
                                      @ 7  jdk.internal.math.MathUtils.flog10pow2(int):int (11 bytes)   relevance-based (relevance=0.201656, probability=0.111711, bonus=1.000000, nodes=10 <= 60.496808)
                                      @ 36  jdk.internal.math.FormattedFPDecimal.set(long, int, int):void (17 bytes)   relevance-based (relevance=0.201656, probability=0.111711, bonus=1.000000, nodes=13 <= 60.496808)
                                    @ 248  jdk.internal.math.DoubleToDecimal.toChars(long, int, FormattedFPDecimal):int (161 bytes)   relevance-based (relevance=0.193279, probability=0.111711, bonus=1.000000, nodes=37 <= 57.983673)
                            @ 15  jdk.internal.math.MathUtils.pow10(int):long (6 bytes)   inline method (bytecode parsing)
                                      @ 3  jdk.graal.compiler.core.common.Fields.getObject(Object, int):Object (40 bytes)   trivial (relevance=2.000000, probability=2.137827, bonus=1.000000, nodes=9)
                                      @ 3  jdk.graal.compiler.core.common.Fields.getObject(Object, int):Object (40 bytes)   trivial (relevance=2.000000, probability=2.137827, bonus=1.000000, nodes=9)
                                      @ 7  jdk.internal.math.MathUtils.flog10pow2(int):int (11 bytes)   relevance-based (relevance=0.190677, probability=0.105629, bonus=1.000000, nodes=10 <= 57.203247)
                                    @ 103  jdk.graal.compiler.lir.InstructionValueConsumer.visitValue(LIRInstruction, Value, LIRInstruction$OperandMode, EnumSet):void (0 bytes)   not inlining no type profile exists
                                      @ 36  jdk.internal.math.FormattedFPDecimal.set(long, int, int):void (17 bytes)   relevance-based (relevance=0.190677, probability=0.105629, bonus=1.000000, nodes=13 <= 57.203247)
                                      @ 10  jdk.graal.compiler.lir.InstructionValueConsumer.visitValue(LIRInstruction, Value, LIRInstruction$OperandMode, EnumSet):void (0 bytes)   not inlining no type profile exists
                                    @ 327  jdk.internal.math.DoubleToDecimal.toChars(long, int, FormattedFPDecimal):int (161 bytes)   relevance-based (relevance=0.182756, probability=0.105629, bonus=1.000000, nodes=37 <= 54.826931)
                                      @ 25  jdk.graal.compiler.lir.InstructionValueConsumer.visitValue(LIRInstruction, Value, LIRInstruction$OperandMode, EnumSet):void (0 bytes)   not inlining no type profile exists
                                      @ 86  jdk.graal.compiler.lir.amd64.AMD64AddressValue.visitEachComponent(LIRInstruction, LIRInstruction$OperandMode, InstructionValueConsumer):void (31 bytes)   relevance-based (relevance=1.000000, probability=1.068914, bonus=1.000000, nodes=16 <= 300.000000)
                                  @ 135  jdk.internal.math.DoubleToDecimal.toDecimal(int, long, int, FormattedFPDecimal):int (385 bytes)   not inlining relevance-based (relevance=0.677710, probability=0.393777, bonus=1.000000, nodes=223 > 203.313073)
                                @ 10  jdk.internal.math.DoubleToDecimal.toDecimal(double, FormattedFPDecimal):int (220 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=82 <= 300.000000)
                                    @ 175  jdk.graal.compiler.lir.InstructionValueConsumer.visitValue(LIRInstruction, Value, LIRInstruction$OperandMode, EnumSet):void (0 bytes)   not inlining no type profile exists
                                      @ 10  jdk.graal.compiler.lir.InstructionValueConsumer.visitValue(LIRInstruction, Value, LIRInstruction$OperandMode, EnumSet):void (0 bytes)   not inlining no type profile exists
                                      @ 25  jdk.graal.compiler.lir.InstructionValueConsumer.visitValue(LIRInstruction, Value, LIRInstruction$OperandMode, EnumSet):void (0 bytes)   not inlining no type profile exists
                              @ 12  jdk.internal.math.DoubleToDecimal.split(double, FormattedFPDecimal):void (15 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=92 <= 300.000000)
                                      @ 158  jdk.graal.compiler.lir.amd64.AMD64AddressValue.visitEachComponent(LIRInstruction, LIRInstruction$OperandMode, InstructionValueConsumer):void (31 bytes)   relevance-based (relevance=1.000000, probability=1.068914, bonus=1.000000, nodes=16 <= 300.000000)
                                    @ 9  jdk.graal.compiler.lir.LIRIntrospection.visitEach(LIRInstruction, LIRIntrospection$Values, LIRInstruction$OperandMode, InstructionValueConsumer):void (193 bytes)   relevance-based (relevance=1.000000, probability=4.275654, bonus=1.000000, nodes=104 <= 300.000000)
                            @ 64  jdk.internal.math.MathUtils.pow10(int):long (6 bytes)   inline method (bytecode parsing)
                                  @ 6  jdk.graal.compiler.lir.LIRInstructionClass.visitEachUse(LIRInstruction, InstructionValueConsumer):void (13 bytes)   relevance-based (relevance=1.000000, probability=4.275654, bonus=1.000000, nodes=106 <= 300.000000)
                            @ 119  jdk.internal.math.MathUtils.pow10(int):long (6 bytes)   inline method (bytecode parsing)
                                @ 14  jdk.internal.math.FormattedFPDecimal.round(long):void (149 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=55 <= 300.000000)
                            @ 6  jdk.graal.compiler.core.common.Fields.getCount():int (6 bytes)   inline method (bytecode parsing)
                            @ 51  jdk.graal.compiler.lir.LIRIntrospection$Values.getDirectCount():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 61  jdk.graal.compiler.lir.LIRIntrospection$Values.getValue(Object, int):Value (10 bytes)   inline method (bytecode parsing)
                            @ 100  jdk.graal.compiler.lir.LIRIntrospection$Values.getFlags(int):EnumSet (7 bytes)   inline method (bytecode parsing)
                            @ 115  jdk.graal.compiler.lir.LIRIntrospection$Values.getValueArray(Object, int):Value[] (10 bytes)   inline method (bytecode parsing)
                                    @ 29  jdk.internal.math.FormattedFPDecimal.fillWithZeros(int, int):void (20 bytes)   relevance-based (relevance=1.000000, probability=0.606223, bonus=1.000000, nodes=22 <= 300.000000)
                            @ 172  jdk.graal.compiler.lir.LIRIntrospection$Values.getFlags(int):EnumSet (7 bytes)   inline method (bytecode parsing)
                            @ 30  jdk.internal.math.FormattedFPDecimal.toDigit(long):char (6 bytes)   inline method (bytecode parsing)
                              @ 2  jdk.internal.math.FormattedFPDecimal.toDigit(int):char (6 bytes)   inline method (bytecode parsing)
                                    @ 42  jdk.internal.math.FormattedFPDecimal.fillWithDigits(long, int, int):long (42 bytes)   relevance-based (relevance=1.000000, probability=0.606223, bonus=1.000000, nodes=37 <= 300.000000)
                                      @ 3  jdk.graal.compiler.core.common.Fields.getObject(Object, int):Object (40 bytes)   trivial (relevance=2.000000, probability=2.137827, bonus=1.000000, nodes=9)
                                  @ 8  jdk.internal.math.FormattedFPDecimal.plainCharsPureInteger():void (47 bytes)   relevance-based (relevance=1.000000, probability=0.606223, bonus=1.000000, nodes=59 <= 300.000000)
                                      @ 3  jdk.graal.compiler.core.common.Fields.getObject(Object, int):Object (40 bytes)   trivial (relevance=2.000000, probability=2.137827, bonus=1.000000, nodes=9)
                                    @ 103  jdk.graal.compiler.lir.InstructionValueConsumer.visitValue(LIRInstruction, Value, LIRInstruction$OperandMode, EnumSet):void (0 bytes)   not inlining no type profile exists
                            @ 30  jdk.internal.math.FormattedFPDecimal.toDigit(long):char (6 bytes)   inline method (bytecode parsing)
                              @ 2  jdk.internal.math.FormattedFPDecimal.toDigit(int):char (6 bytes)   inline method (bytecode parsing)
                                      @ 10  jdk.graal.compiler.lir.InstructionValueConsumer.visitValue(LIRInstruction, Value, LIRInstruction$OperandMode, EnumSet):void (0 bytes)   not inlining no type profile exists
                                      @ 25  jdk.graal.compiler.lir.InstructionValueConsumer.visitValue(LIRInstruction, Value, LIRInstruction$OperandMode, EnumSet):void (0 bytes)   not inlining no type profile exists
                                      @ 86  jdk.graal.compiler.lir.amd64.AMD64AddressValue.visitEachComponent(LIRInstruction, LIRInstruction$OperandMode, InstructionValueConsumer):void (31 bytes)   relevance-based (relevance=1.000000, probability=1.068914, bonus=1.000000, nodes=16 <= 300.000000)
                                    @ 34  jdk.internal.math.FormattedFPDecimal.fillWithDigits(long, int, int):long (42 bytes)   relevance-based (relevance=0.245180, probability=0.148634, bonus=1.000000, nodes=37 <= 73.553934)
                                    @ 175  jdk.graal.compiler.lir.InstructionValueConsumer.visitValue(LIRInstruction, Value, LIRInstruction$OperandMode, EnumSet):void (0 bytes)   not inlining no type profile exists
                                      @ 10  jdk.graal.compiler.lir.InstructionValueConsumer.visitValue(LIRInstruction, Value, LIRInstruction$OperandMode, EnumSet):void (0 bytes)   not inlining no type profile exists
                            @ 30  jdk.internal.math.FormattedFPDecimal.toDigit(long):char (6 bytes)   inline method (bytecode parsing)
                                      @ 25  jdk.graal.compiler.lir.InstructionValueConsumer.visitValue(LIRInstruction, Value, LIRInstruction$OperandMode, EnumSet):void (0 bytes)   not inlining no type profile exists
                                      @ 158  jdk.graal.compiler.lir.amd64.AMD64AddressValue.visitEachComponent(LIRInstruction, LIRInstruction$OperandMode, InstructionValueConsumer):void (31 bytes)   relevance-based (relevance=1.000000, probability=1.068914, bonus=1.000000, nodes=16 <= 300.000000)
                              @ 2  jdk.internal.math.FormattedFPDecimal.toDigit(int):char (6 bytes)   inline method (bytecode parsing)
                                    @ 9  jdk.graal.compiler.lir.LIRIntrospection.visitEach(LIRInstruction, LIRIntrospection$Values, LIRInstruction$OperandMode, InstructionValueConsumer):void (193 bytes)   relevance-based (relevance=1.000000, probability=4.275654, bonus=1.000000, nodes=104 <= 300.000000)
                                    @ 66  jdk.internal.math.FormattedFPDecimal.fillWithDigits(long, int, int):long (42 bytes)   relevance-based (relevance=0.245180, probability=0.148634, bonus=1.000000, nodes=37 <= 73.553934)
                                  @ 27  jdk.internal.math.FormattedFPDecimal.plainCharsMixed():void (71 bytes)   not inlining relevance-based (relevance=0.245180, probability=0.148634, bonus=1.000000, nodes=77 > 73.553934)
                                  @ 6  jdk.graal.compiler.lir.LIRInstructionClass.visitEachAlive(LIRInstruction, InstructionValueConsumer):void (13 bytes)   relevance-based (relevance=1.000000, probability=4.275654, bonus=1.000000, nodes=106 <= 300.000000)
                            @ 53  jdk.internal.math.FormattedFPDecimal.fillWithZeros(int, int):void (20 bytes)   inline method (bytecode parsing)
                            @ 30  jdk.internal.math.FormattedFPDecimal.toDigit(long):char (6 bytes)   inline method (bytecode parsing)
                              @ 2  jdk.internal.math.FormattedFPDecimal.toDigit(int):char (6 bytes)   inline method (bytecode parsing)
                            @ 7  jdk.graal.compiler.core.common.Fields.getCount():int (6 bytes)   inline method (bytecode parsing)
                                    @ 36  jdk.internal.math.FormattedFPDecimal.fillWithDigits(long, int, int):long (42 bytes)   relevance-based (relevance=0.404377, probability=0.245143, bonus=1.000000, nodes=37 <= 121.313184)
                                  @ 34  jdk.internal.math.FormattedFPDecimal.plainCharsPureFraction():void (65 bytes)   relevance-based (relevance=0.404377, probability=0.245143, bonus=1.000000, nodes=70 <= 121.313184)
                                    @ 19  jdk.graal.compiler.core.common.Fields.getObject(Object, int):Object (40 bytes)   trivial (relevance=2.000000, probability=4.275654, bonus=1.000000, nodes=9)
                                @ 18  jdk.internal.math.FormattedFPDecimal.plainChars():FormattedFPDecimal (39 bytes)   relevance-based (relevance=1.649557, probability=1.000000, bonus=1.000000, nodes=139 <= 300.000000)
                            @ 20  jdk.vm.ci.code.BytecodeFrame.caller():BytecodeFrame (8 bytes)   inline method (bytecode parsing)
                            @ 63  jdk.vm.ci.code.VirtualObject.getValues():JavaValue[] (5 bytes)   inline accessor method (bytecode parsing)
                              @ 56  jdk.internal.math.FormattedFPDecimal.plain(int):FormattedFPDecimal (22 bytes)   relevance-based (relevance=1.721052, probability=1.000000, bonus=1.000000, nodes=195 <= 300.000000)
                            @ 73  jdk.vm.ci.code.StackLockValue.getOwner():JavaValue (5 bytes)   inline accessor method (bytecode parsing)
                            @ 106  jdk.vm.ci.code.StackLockValue.getSlot():AllocatableValue (5 bytes)   inline accessor method (bytecode parsing)
                            @ 22  jdk.vm.ci.meta.Value$IllegalValue.equals(Object):boolean (5 bytes)   inline method (bytecode parsing)
                                        @ 18  jdk.vm.ci.code.ValueUtil.isIllegalJavaValue(JavaValue):boolean (26 bytes)   trivial (relevance=16.000000, probability=2.137827, bonus=1.000000, nodes=8)
                                      @ 99  jdk.graal.compiler.lir.InstructionValueConsumer.visitValue(LIRInstruction, Value, LIRInstruction$OperandMode, EnumSet):void (0 bytes)   not inlining no type profile exists
                                      @ 48  jdk.graal.compiler.lir.InstructionValueConsumer.visitValue(LIRInstruction, Value, LIRInstruction$OperandMode, EnumSet):void (0 bytes)   not inlining no type profile exists
                                        @ 113  jdk.graal.compiler.lir.LIRValueUtil.isVirtualStackSlot(Value):boolean (23 bytes)   trivial (relevance=2.000000, probability=0.267228, bonus=1.000000, nodes=8)
                                      @ 129  jdk.graal.compiler.lir.InstructionValueConsumer.visitValue(LIRInstruction, Value, LIRInstruction$OperandMode, EnumSet):void (0 bytes)   not inlining no type profile exists
                                      @ 16  jdk.graal.compiler.lir.LIRFrameState.visitValues(LIRInstruction, JavaValue[], InstructionValueConsumer):void (167 bytes)   relevance-based (relevance=1.000000, probability=2.137827, bonus=1.000000, nodes=75 <= 300.000000)
                                      @ 1  jdk.vm.ci.code.BytecodePosition.getCaller():BytecodePosition (5 bytes)   trivial (relevance=1.000000, probability=2.137827, bonus=1.000000, nodes=5)
                            @ 73  jdk.vm.ci.code.StackLockValue.getOwner():JavaValue (5 bytes)   inline accessor method (bytecode parsing)
                            @ 106  jdk.vm.ci.code.StackLockValue.getSlot():AllocatableValue (5 bytes)   inline accessor method (bytecode parsing)
                            @ 22  jdk.vm.ci.meta.Value$IllegalValue.equals(Object):boolean (5 bytes)   inline method (bytecode parsing)
                                        @ 18  jdk.vm.ci.code.ValueUtil.isIllegalJavaValue(JavaValue):boolean (26 bytes)   trivial (relevance=8.000000, probability=1.068914, bonus=1.000000, nodes=8)
                                      @ 99  jdk.graal.compiler.lir.InstructionValueConsumer.visitValue(LIRInstruction, Value, LIRInstruction$OperandMode, EnumSet):void (0 bytes)   not inlining no type profile exists
                                      @ 48  jdk.graal.compiler.lir.InstructionValueConsumer.visitValue(LIRInstruction, Value, LIRInstruction$OperandMode, EnumSet):void (0 bytes)   not inlining no type profile exists
                                        @ 113  jdk.graal.compiler.lir.LIRValueUtil.isVirtualStackSlot(Value):boolean (23 bytes)   trivial (relevance=1.000000, probability=0.133614, bonus=1.000000, nodes=8)
                                      @ 129  jdk.graal.compiler.lir.InstructionValueConsumer.visitValue(LIRInstruction, Value, LIRInstruction$OperandMode, EnumSet):void (0 bytes)   not inlining no type profile exists
                                      @ 67  jdk.graal.compiler.lir.LIRFrameState.visitValues(LIRInstruction, JavaValue[], InstructionValueConsumer):void (167 bytes)   relevance-based (relevance=0.500000, probability=1.068914, bonus=1.000000, nodes=75 <= 150.000000)
                                      @ 72  org.graalvm.collections.EconomicMap.getEntries():MapCursor (0 bytes)   not inlining no type profile exists
                                      @ 47  jdk.graal.compiler.lir.InstructionValueConsumer.visitValue(LIRInstruction, Value, LIRInstruction$OperandMode, EnumSet):void (0 bytes)   not inlining no type profile exists
                                      @ 81  org.graalvm.collections.MapCursor.advance():boolean (10 bytes)   not inlining no type profile exists
                                      @ 91  org.graalvm.collections.MapCursor.getValue():Object (10 bytes)   not inlining no type profile exists
                                      @ 113  jdk.graal.compiler.lir.InstructionValueConsumer.visitValue(LIRInstruction, Value, LIRInstruction$OperandMode, EnumSet):void (0 bytes)   not inlining no type profile exists
                                      @ 95  jdk.graal.compiler.lir.util.IndexedValueMap.visitEach(LIRInstruction, LIRInstruction$OperandMode, EnumSet, InstructionValueConsumer):void (122 bytes)   relevance-based (relevance=0.500000, probability=1.068914, bonus=1.000000, nodes=75 <= 150.000000)
                                    @ 36  jdk.graal.compiler.lir.LIRFrameState.visitEachState(LIRInstruction, InstructionValueConsumer):void (99 bytes)   relevance-based (relevance=1.000000, probability=2.137827, bonus=1.000000, nodes=258 <= 300.000000)
                                  @ 6  jdk.graal.compiler.lir.LIRInstructionClass.visitEachState(LIRInstruction, InstructionValueConsumer):void (46 bytes)   relevance-based (relevance=1.000000, probability=4.275654, bonus=1.000000, nodes=290 <= 300.000000)
                                @ 8  jdk.graal.compiler.lir.framemap.FrameMapBuilderImpl.lambda$verifyStackSlotAllocation$1(InstructionValueConsumer, LIRInstruction):void (26 bytes)   not inlining relevance-based (relevance=1.000000, probability=4.275654, bonus=1.000000, nodes=514 > 300.000000)
                              @ 46  jdk.graal.compiler.lir.framemap.FrameMapBuilderImpl$$Lambda/0x00007f2ce0246db0.accept(Object):void (12 bytes)   relevance-based (relevance=1.000000, probability=4.911329, bonus=1.000000, nodes=54 <= 300.000000)
                            @ 64  jdk.internal.math.MathUtils.pow10(int):long (6 bytes)   inline method (bytecode parsing)
                            @ 119  jdk.internal.math.MathUtils.pow10(int):long (6 bytes)   inline method (bytecode parsing)
                                    @ 3  java.lang.Math.max(int, int):int (11 bytes)   trivial (relevance=0.169404, probability=0.144864, bonus=1.000000, nodes=7)
                                  @ 29  jdk.internal.util.ArraysSupport.newLength(int, int, int):int (27 bytes)   relevance-based (relevance=0.169404, probability=0.144864, bonus=1.000000, nodes=15 <= 50.821322)
                                @ 24  java.lang.AbstractStringBuilder.newCapacity(int):int (59 bytes)   relevance-based (relevance=0.169404, probability=0.144864, bonus=1.000000, nodes=27 <= 50.821322)
                              @ 14  jdk.internal.math.FormattedFPDecimal.round(long):void (149 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=55 <= 300.000000)
                                  @ 25  java.lang.Math.min(int, int):int (11 bytes)   trivial (relevance=0.169406, probability=0.144844, bonus=1.000000, nodes=7)
                                @ 32  java.util.Arrays.copyOf(byte[], int):byte[] (33 bytes)   relevance-based (relevance=0.169404, probability=0.144864, bonus=1.000000, nodes=28 <= 50.821322)
                              @ 10  java.lang.AbstractStringBuilder.ensureCapacityInternal(int):void (39 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=72 <= 300.000000)
                                  @ 29  jdk.internal.math.FormattedFPDecimal.fillWithZeros(int, int):void (20 bytes)   relevance-based (relevance=1.000000, probability=0.606223, bonus=1.000000, nodes=22 <= 300.000000)
                            @ 30  jdk.internal.math.FormattedFPDecimal.toDigit(long):char (6 bytes)   inline method (bytecode parsing)
                              @ 2  jdk.internal.math.FormattedFPDecimal.toDigit(int):char (6 bytes)   inline method (bytecode parsing)
                                  @ 42  jdk.internal.math.FormattedFPDecimal.fillWithDigits(long, int, int):long (42 bytes)   relevance-based (relevance=1.000000, probability=0.606223, bonus=1.000000, nodes=37 <= 300.000000)
                                @ 7  java.lang.AbstractStringBuilder.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=0.999999, bonus=1.000000, nodes=9)
                                @ 8  jdk.internal.math.FormattedFPDecimal.plainCharsPureInteger():void (47 bytes)   relevance-based (relevance=1.000000, probability=0.606223, bonus=1.000000, nodes=59 <= 300.000000)
                                @ 40  java.lang.StringLatin1.canEncode(int):boolean (13 bytes)   trivial (relevance=1.000000, probability=4.104574, bonus=1.000000, nodes=8)
                              @ 17  java.lang.AbstractStringBuilder.appendChars(char[], int, int):void (130 bytes)   relevance-based (relevance=1.169403, probability=0.999999, bonus=1.000000, nodes=37 <= 300.000000)
                            @ 30  jdk.internal.math.FormattedFPDecimal.toDigit(long):char (6 bytes)   inline method (bytecode parsing)
                              @ 2  jdk.internal.math.FormattedFPDecimal.toDigit(int):char (6 bytes)   inline method (bytecode parsing)
                                  @ 34  jdk.internal.math.FormattedFPDecimal.fillWithDigits(long, int, int):long (42 bytes)   relevance-based (relevance=0.245180, probability=0.148634, bonus=1.000000, nodes=37 <= 73.553934)
                            @ 30  jdk.internal.math.FormattedFPDecimal.toDigit(long):char (6 bytes)   inline method (bytecode parsing)
                              @ 2  jdk.internal.math.FormattedFPDecimal.toDigit(int):char (6 bytes)   inline method (bytecode parsing)
                                  @ 66  jdk.internal.math.FormattedFPDecimal.fillWithDigits(long, int, int):long (42 bytes)   relevance-based (relevance=0.245180, probability=0.148634, bonus=1.000000, nodes=37 <= 73.553934)
                                @ 27  jdk.internal.math.FormattedFPDecimal.plainCharsMixed():void (71 bytes)   not inlining relevance-based (relevance=0.245180, probability=0.148634, bonus=1.000000, nodes=77 > 73.553934)
                            @ 53  jdk.internal.math.FormattedFPDecimal.fillWithZeros(int, int):void (20 bytes)   inline method (bytecode parsing)
                            @ 30  jdk.internal.math.FormattedFPDecimal.toDigit(long):char (6 bytes)   inline method (bytecode parsing)
                              @ 2  jdk.internal.math.FormattedFPDecimal.toDigit(int):char (6 bytes)   inline method (bytecode parsing)
                                  @ 36  jdk.internal.math.FormattedFPDecimal.fillWithDigits(long, int, int):long (42 bytes)   relevance-based (relevance=0.404377, probability=0.245143, bonus=1.000000, nodes=37 <= 121.313184)
                                @ 34  jdk.internal.math.FormattedFPDecimal.plainCharsPureFraction():void (65 bytes)   relevance-based (relevance=0.404377, probability=0.245143, bonus=1.000000, nodes=70 <= 121.313184)
                              @ 18  jdk.internal.math.FormattedFPDecimal.plainChars():FormattedFPDecimal (39 bytes)   relevance-based (relevance=1.649557, probability=1.000000, bonus=1.000000, nodes=139 <= 300.000000)
                            @ 13  java.text.DecimalFormatSymbols.getDecimalSeparator():char (5 bytes)   inline accessor method (bytecode parsing)
                            @ 9  java.text.DecimalFormatSymbols.getLocale():Locale (5 bytes)   inline accessor method (bytecode parsing)
                                @ 13  java.util.Locale.equals(Object):boolean (75 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=8)
                              @ 10  java.util.Formatter.getDecimalFormatSymbols(Locale):DecimalFormatSymbols (32 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=15 <= 300.000000)
                            @ 22  java.util.concurrent.locks.AbstractQueuedSynchronizer$Node.getAndUnsetStatus(int):int (14 bytes)   inline method (bytecode parsing)
                              @ 10  jdk.internal.misc.Unsafe.getAndBitwiseAndInt(Object, long, int):int (27 bytes)   inline method (bytecode parsing)
                            @ 5  java.lang.Thread.isVirtual():boolean (5 bytes)   inline method (bytecode parsing)
                              @ 30  java.util.concurrent.locks.LockSupport.unpark(Thread):void (26 bytes)   not inlining relevance-based (relevance=0.006168, probability=0.004565, bonus=1.000000, nodes=23 > 1.850355)
                            @ 275  java.lang.StringBuilder.<init>():void (7 bytes)   inline method (bytecode parsing)
                            @ 280  jdk.internal.math.FormattedFPDecimal.getMantissa():char[] (5 bytes)   inline accessor method (bytecode parsing)
                            @ 283  java.lang.StringBuilder.append(char[]):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 299  java.util.Formatter$Flags.contains(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 4  jdk.internal.math.FormattedFPDecimal.<init>():void (5 bytes)   inline method (bytecode parsing)
                            @ 15  jdk.internal.math.MathUtils.pow10(int):long (6 bytes)   inline method (bytecode parsing)
                              @ 266  jdk.internal.math.FormattedFPDecimal.valueOf(double, int, char):FormattedFPDecimal (96 bytes)   not inlining too large previous low-level graph (low-level-nodes: 813, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=13)
                              @ 3  java.lang.AbstractStringBuilder.<init>(int):void (39 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                              @ 7  jdk.internal.math.MathUtils.flog10pow2(int):int (11 bytes)   relevance-based (relevance=1.043342, probability=1.000000, bonus=1.000000, nodes=10 <= 300.000000)
                              @ 2  java.lang.AbstractStringBuilder.append(char[]):AbstractStringBuilder (22 bytes)   not inlining too large previous low-level graph (low-level-nodes: 410, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=15)
                            @ 1  java.lang.StringBuilder.length():int (5 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.AbstractStringBuilder.length():int (5 bytes)   inline accessor method (bytecode parsing)
                              @ 36  jdk.internal.math.FormattedFPDecimal.set(long, int, int):void (17 bytes)   relevance-based (relevance=1.043342, probability=1.000000, bonus=1.000000, nodes=13 <= 300.000000)
                            @ 17  java.lang.StringBuilder.charAt(int):char (6 bytes)   inline method (bytecode parsing)
                            @ 98  java.lang.StringBuilder.append(char):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 5  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                                  @ 9  java.lang.AbstractStringBuilder.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=1.737329, bonus=1.000000, nodes=9)
                                @ 2  java.lang.AbstractStringBuilder.charAt(int):char (36 bytes)   relevance-based (relevance=1.291928, probability=1.737329, bonus=1.000000, nodes=19 <= 300.000000)
                                @ 2  java.lang.AbstractStringBuilder.append(char):AbstractStringBuilder (77 bytes)   not inlining too large previous low-level graph (low-level-nodes: 332, relevance=0.607427, probability=0.607427, bonus=1.000000, nodes=29)
                            @ 10  java.lang.StringBuilder.append(char):StringBuilder (8 bytes)   inline method (bytecode parsing)
                                  @ 2  java.lang.AbstractStringBuilder.append(char):AbstractStringBuilder (77 bytes)   not inlining too large previous low-level graph (low-level-nodes: 332, relevance=0.609659, probability=3.646492, bonus=1.000000, nodes=29)
                                @ 108  java.util.Formatter$FormatSpecifier.trailingZeros(StringBuilder, int):void (21 bytes)   not inlining callee invoke probability is too high (invokeP=5.981200, relevance=0.609659, probability=0.609659, bonus=1.000000, nodes=23)
                              @ 293  java.util.Formatter$FormatSpecifier.addZeros(StringBuilder, int):void (112 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=70 <= 300.000000)
                            @ 13  java.lang.StringBuilder.length():int (5 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.AbstractStringBuilder.length():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 101  java.util.Formatter$Flags.contains(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 261  java.lang.StringBuilder.append(char):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 291  java.lang.StringBuilder.append(char):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 337  java.lang.StringBuilder.length():int (5 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.AbstractStringBuilder.length():int (5 bytes)   inline accessor method (bytecode parsing)
                              @ 31  jdk.internal.util.ArraysSupport.mismatch(byte[], byte[], int):int (73 bytes)   relevance-based (relevance=1.000000, probability=0.862703, bonus=1.000000, nodes=48 <= 300.000000)
                            @ 13  java.text.DecimalFormatSymbols.getZeroDigit():char (5 bytes)   inline accessor method (bytecode parsing)
                            @ 9  java.text.DecimalFormatSymbols.getLocale():Locale (5 bytes)   inline accessor method (bytecode parsing)
                                    @ 13  java.util.Locale.equals(Object):boolean (75 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=8)
                                  @ 10  java.util.Formatter.getDecimalFormatSymbols(Locale):DecimalFormatSymbols (32 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=15 <= 300.000000)
                                @ 20  java.util.Formatter.getZero(Locale):char (17 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=20 <= 300.000000)
                            @ 1  java.lang.AbstractStringBuilder.length():int (5 bytes)   inline accessor method (bytecode parsing)
                                @ 35  java.lang.StringBuilder.length():int (5 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                            @ 5  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                                    @ 9  java.lang.AbstractStringBuilder.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=2.198763, bonus=1.000000, nodes=9)
                                  @ 2  java.lang.AbstractStringBuilder.charAt(int):char (36 bytes)   relevance-based (relevance=1.000000, probability=2.198763, bonus=1.000000, nodes=19 <= 300.000000)
                                @ 60  java.lang.StringBuilder.charAt(int):char (6 bytes)   relevance-based (relevance=1.446572, probability=2.198763, bonus=1.000000, nodes=19 <= 300.000000)
                            @ 13  java.text.DecimalFormatSymbols.getDecimalSeparator():char (5 bytes)   inline accessor method (bytecode parsing)
                            @ 9  java.text.DecimalFormatSymbols.getLocale():Locale (5 bytes)   inline accessor method (bytecode parsing)
                                    @ 13  java.util.Locale.equals(Object):boolean (75 bytes)   trivial (relevance=0.678836, probability=0.678836, bonus=1.000000, nodes=8)
                                  @ 10  java.util.Formatter.getDecimalFormatSymbols(Locale):DecimalFormatSymbols (32 bytes)   relevance-based (relevance=0.678836, probability=0.678836, bonus=1.000000, nodes=15 <= 203.650669)
                                @ 92  java.util.Formatter.getDecimalSeparator(Locale):char (17 bytes)   relevance-based (relevance=0.678836, probability=0.678836, bonus=1.000000, nodes=20 <= 203.650669)
                            @ 5  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                                    @ 9  java.lang.AbstractStringBuilder.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=5.591186, bonus=1.000000, nodes=9)
                                  @ 2  java.lang.AbstractStringBuilder.charAt(int):char (36 bytes)   relevance-based (relevance=1.000000, probability=5.591186, bonus=1.000000, nodes=19 <= 300.000000)
                                @ 274  java.lang.StringBuilder.charAt(int):char (6 bytes)   relevance-based (relevance=1.000000, probability=5.591186, bonus=1.000000, nodes=19 <= 300.000000)
                                @ 2  java.lang.AbstractStringBuilder.append(char):AbstractStringBuilder (77 bytes)   not inlining too large previous low-level graph (low-level-nodes: 332, relevance=1.000000, probability=5.591186, bonus=1.000000, nodes=31)
                                @ 2  java.lang.AbstractStringBuilder.append(char):AbstractStringBuilder (77 bytes)   not inlining too large previous low-level graph (low-level-nodes: 332, relevance=0.121385, probability=0.678687, bonus=1.000000, nodes=31)
                              @ 358  java.util.Formatter$FormatSpecifier.localizedMagnitude(Formatter, StringBuilder, CharSequence, int, int, int, Locale):StringBuilder (381 bytes)   not inlining callee invoke probability is too high (invokeP=6.269874, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=140)
                            @ 64  jdk.internal.math.MathUtils.pow10(int):long (6 bytes)   inline method (bytecode parsing)
                            @ 119  jdk.internal.math.MathUtils.pow10(int):long (6 bytes)   inline method (bytecode parsing)
                                @ 29  jdk.internal.math.FormattedFPDecimal.fillWithZeros(int, int):void (20 bytes)   relevance-based (relevance=1.000000, probability=0.606223, bonus=1.000000, nodes=22 <= 300.000000)
                            @ 30  jdk.internal.math.FormattedFPDecimal.toDigit(long):char (6 bytes)   inline method (bytecode parsing)
                              @ 2  jdk.internal.math.FormattedFPDecimal.toDigit(int):char (6 bytes)   inline method (bytecode parsing)
                                @ 42  jdk.internal.math.FormattedFPDecimal.fillWithDigits(long, int, int):long (42 bytes)   relevance-based (relevance=1.000000, probability=0.606223, bonus=1.000000, nodes=37 <= 300.000000)
                              @ 8  jdk.internal.math.FormattedFPDecimal.plainCharsPureInteger():void (47 bytes)   relevance-based (relevance=1.000000, probability=0.606223, bonus=1.000000, nodes=59 <= 300.000000)
                            @ 30  jdk.internal.math.FormattedFPDecimal.toDigit(long):char (6 bytes)   inline method (bytecode parsing)
                              @ 2  jdk.internal.math.FormattedFPDecimal.toDigit(int):char (6 bytes)   inline method (bytecode parsing)
                                @ 34  jdk.internal.math.FormattedFPDecimal.fillWithDigits(long, int, int):long (42 bytes)   relevance-based (relevance=0.245180, probability=0.148634, bonus=1.000000, nodes=37 <= 73.553934)
                            @ 30  jdk.internal.math.FormattedFPDecimal.toDigit(long):char (6 bytes)   inline method (bytecode parsing)
                              @ 2  jdk.internal.math.FormattedFPDecimal.toDigit(int):char (6 bytes)   inline method (bytecode parsing)
                                @ 66  jdk.internal.math.FormattedFPDecimal.fillWithDigits(long, int, int):long (42 bytes)   relevance-based (relevance=0.245180, probability=0.148634, bonus=1.000000, nodes=37 <= 73.553934)
                              @ 27  jdk.internal.math.FormattedFPDecimal.plainCharsMixed():void (71 bytes)   not inlining relevance-based (relevance=0.245180, probability=0.148634, bonus=1.000000, nodes=77 > 73.553934)
                            @ 53  jdk.internal.math.FormattedFPDecimal.fillWithZeros(int, int):void (20 bytes)   inline method (bytecode parsing)
                            @ 30  jdk.internal.math.FormattedFPDecimal.toDigit(long):char (6 bytes)   inline method (bytecode parsing)
                              @ 2  jdk.internal.math.FormattedFPDecimal.toDigit(int):char (6 bytes)   inline method (bytecode parsing)
                                @ 36  jdk.internal.math.FormattedFPDecimal.fillWithDigits(long, int, int):long (42 bytes)   relevance-based (relevance=0.404377, probability=0.245143, bonus=1.000000, nodes=37 <= 121.313184)
                              @ 34  jdk.internal.math.FormattedFPDecimal.plainCharsPureFraction():void (65 bytes)   relevance-based (relevance=0.404377, probability=0.245143, bonus=1.000000, nodes=70 <= 121.313184)
                            @ 15  jdk.internal.math.MathUtils.pow10(int):long (6 bytes)   inline method (bytecode parsing)
                                @ 7  jdk.internal.math.MathUtils.flog10pow2(int):int (11 bytes)   relevance-based (relevance=1.043342, probability=0.606223, bonus=1.000000, nodes=10 <= 300.000000)
                                @ 36  jdk.internal.math.FormattedFPDecimal.set(long, int, int):void (17 bytes)   relevance-based (relevance=1.043342, probability=0.606223, bonus=1.000000, nodes=13 <= 300.000000)
                              @ 123  jdk.internal.math.DoubleToDecimal.toChars(long, int, FormattedFPDecimal):int (161 bytes)   relevance-based (relevance=1.000000, probability=0.606223, bonus=1.000000, nodes=40 <= 300.000000)
                                @ 57  jdk.internal.math.MathUtils.flog10pow2(int):int (11 bytes)   relevance-based (relevance=0.677710, probability=0.391004, bonus=1.000000, nodes=10 <= 203.313073)
                                @ 72  jdk.internal.math.MathUtils.flog10threeQuartersPow2(int):int (15 bytes)   not inlining relevance-based (relevance=0.004805, probability=0.002772, bonus=1.000000, nodes=12 > 1.441511)
                                @ 81  jdk.internal.math.MathUtils.flog2pow10(int):int (11 bytes)   relevance-based (relevance=0.682515, probability=0.393777, bonus=1.000000, nodes=10 <= 204.754584)
                                @ 91  jdk.internal.math.MathUtils.g1(int):long (12 bytes)   relevance-based (relevance=0.682515, probability=0.393777, bonus=1.000000, nodes=10 <= 204.754584)
                                @ 98  jdk.internal.math.MathUtils.g0(int):long (14 bytes)   relevance-based (relevance=0.682515, probability=0.393777, bonus=1.000000, nodes=11 <= 204.754584)
                                @ 112  jdk.internal.math.DoubleToDecimal.rop(long, long, long):long (58 bytes)   relevance-based (relevance=0.682515, probability=0.393777, bonus=1.000000, nodes=20 <= 204.754584)
                                @ 126  jdk.internal.math.DoubleToDecimal.rop(long, long, long):long (58 bytes)   relevance-based (relevance=0.682515, probability=0.393777, bonus=1.000000, nodes=20 <= 204.754584)
                                @ 140  jdk.internal.math.DoubleToDecimal.rop(long, long, long):long (58 bytes)   relevance-based (relevance=0.682515, probability=0.393777, bonus=1.000000, nodes=20 <= 204.754584)
                            @ 15  jdk.internal.math.MathUtils.pow10(int):long (6 bytes)   inline method (bytecode parsing)
                                  @ 7  jdk.internal.math.MathUtils.flog10pow2(int):int (11 bytes)   relevance-based (relevance=0.208543, probability=0.115321, bonus=1.000000, nodes=10 <= 62.563026)
                                  @ 36  jdk.internal.math.FormattedFPDecimal.set(long, int, int):void (17 bytes)   relevance-based (relevance=0.208543, probability=0.115321, bonus=1.000000, nodes=13 <= 62.563026)
                                @ 248  jdk.internal.math.DoubleToDecimal.toChars(long, int, FormattedFPDecimal):int (161 bytes)   relevance-based (relevance=0.199880, probability=0.115321, bonus=1.000000, nodes=41 <= 59.964057)
                              @ 135  jdk.internal.math.DoubleToDecimal.toDecimal(int, long, int, FormattedFPDecimal):int (385 bytes)   not inlining relevance-based (relevance=0.677710, probability=0.393777, bonus=1.000000, nodes=205 > 203.313073)
                            @ 4  jdk.vm.ci.hotspot.HotSpotResolvedJavaType.hashCode():int (8 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.vm.ci.hotspot.HotSpotJavaType.getName():String (5 bytes)   inline accessor method (bytecode parsing)
                            @ 4  java.lang.Byte.hashCode(byte):int (2 bytes)   inline method (bytecode parsing)
                            @ 14  java.lang.Math.max(int, int):int (11 bytes)   inline method (bytecode parsing)
                            @ 1  org.graalvm.collections.EconomicMapImpl.size():int (10 bytes)   inline method (bytecode parsing)
                                @ 17  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=0.002774, probability=0.001912, bonus=1.000000, nodes=9)
                            @ 84  org.graalvm.collections.EconomicMapImpl.getKey(int):Object (9 bytes)   inline method (bytecode parsing)
                                @ 27  java.lang.StringLatin1.hashCode(byte[]):int (52 bytes)   not inlining relevance-based (relevance=0.002774, probability=0.001912, bonus=1.000000, nodes=22 > 0.832209)
                              @ 87  org.graalvm.collections.EconomicMapImpl.createHash():void (109 bytes)   not inlining relevance-based (relevance=0.007114, probability=0.007032, bonus=1.000000, nodes=57 > 2.134262)
                                  @ 17  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=0.435308, probability=0.299997, bonus=1.000000, nodes=9)
                                  @ 27  java.lang.StringLatin1.hashCode(byte[]):int (52 bytes)   relevance-based (relevance=0.435308, probability=0.299997, bonus=1.000000, nodes=22 <= 130.592381)
                                @ 4  java.lang.String.hashCode():int (60 bytes)   relevance-based (relevance=0.999810, probability=0.989992, bonus=1.000000, nodes=47 <= 299.943113)
                                @ 4  java.lang.Boolean.hashCode(boolean):int (14 bytes)   trivial (relevance=1.000000, probability=0.990180, bonus=1.000000, nodes=9)
                              @ 43  java.lang.Boolean.hashCode():int (8 bytes)   relevance-based (relevance=1.000000, probability=2.006046, bonus=1.000000, nodes=150 <= 300.000000)
                            @ 18  java.lang.StringLatin1.toBytes(char):byte[] (9 bytes)   inline method (bytecode parsing)
                            @ 22  java.lang.String.<init>(byte[], byte):void (15 bytes)   inline method (bytecode parsing)
                              @ 7  java.lang.StringLatin1.canEncode(int):boolean (13 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=8)
                            @ 8  java.util.HashMap$EntryIterator.<init>(HashMap):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  java.util.HashMap$HashIterator.<init>(HashMap):void (79 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=58 <= 300.000000)
                            @ 15  java.util.HashMap$EntrySet.<init>(HashMap):void (10 bytes)   inline method (bytecode parsing)
                              @ 6  java.util.AbstractSet.<init>():void (5 bytes)   inline method (bytecode parsing)
                                @ 1  java.util.AbstractCollection.<init>():void (5 bytes)   inline method (bytecode parsing)
                            @ 2  java.lang.ThreadLocal.getMap(Thread):ThreadLocal$ThreadLocalMap (5 bytes)   inline method (bytecode parsing)
                            @ 34  org.graalvm.collections.EconomicMapImpl.getKey(int):Object (9 bytes)   inline method (bytecode parsing)
                            @ 26  java.lang.ref.Reference.refersTo(Object):boolean (6 bytes)   inline method (bytecode parsing)
                              @ 2  java.lang.ref.Reference.refersToImpl(Object):boolean (6 bytes)   inline method (bytecode parsing)
                              @ 12  java.lang.ThreadLocal$ThreadLocalMap.getEntry(ThreadLocal):ThreadLocal$ThreadLocalMap$Entry (42 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=21 <= 300.000000)
                            @ 26  java.lang.ref.Reference.refersTo(Object):boolean (6 bytes)   inline method (bytecode parsing)
                              @ 2  java.lang.ref.Reference.refersToImpl(Object):boolean (6 bytes)   inline method (bytecode parsing)
                            @ 27  java.lang.Character.toString():String (8 bytes)   inline method (bytecode parsing)
                            @ 18  java.lang.StringLatin1.toBytes(char):byte[] (9 bytes)   inline method (bytecode parsing)
                            @ 22  java.lang.String.<init>(byte[], byte):void (15 bytes)   inline method (bytecode parsing)
                                @ 7  java.lang.StringLatin1.canEncode(int):boolean (13 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=8)
                              @ 4  java.lang.String.valueOf(char):String (39 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=22 <= 300.000000)
                            @ 34  java.util.Formatter$Flags.contains(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                              @ 7  jdk.internal.misc.Unsafe.convEndian(boolean, short):short (16 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=20 <= 300.000000)
                            @ 2  java.lang.StringBuilder.append(CharSequence):StringBuilder (8 bytes)   inline method (bytecode parsing)
                                    @ 2  java.lang.AbstractStringBuilder.append(CharSequence):AbstractStringBuilder (54 bytes)   not inlining too large previous low-level graph (low-level-nodes: 399, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=8)
                                  @ 10  java.lang.StringBuilder.append(CharSequence):Appendable (6 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=9)
                                @ 53  java.util.Formatter$FormatSpecifier.appendJustified(Appendable, CharSequence):void (89 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=23 <= 300.000000)
                              @ 211  java.util.Formatter$FormatSpecifier.print(Formatter, String, Locale):void (57 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=33 <= 300.000000)
                            @ 8  java.lang.invoke.VarHandleGuards.guard_LII_V(VarHandle, Object, int, int, VarHandle$AccessDescriptor):void (135 bytes)   inline method (bytecode parsing)
                              @ 3  java.lang.invoke.VarHandle.checkAccessModeThenIsDirect(VarHandle$AccessDescriptor):boolean (29 bytes)   inline method (bytecode parsing)
                              @ 47  java.lang.invoke.VarForm.getMemberName(int):MemberName (31 bytes)   inline method (bytecode parsing)
                              @ 50  java.lang.invoke.VarHandleByteArrayAsShorts$ArrayHandle.set(VarHandle, Object, int, short):void (39 bytes)   inline method (bytecode parsing)
                                @ 20  java.lang.invoke.VarHandleByteArrayAsShorts$ArrayHandle.index(byte[], int):int (12 bytes)   inline method (bytecode parsing)
                                @ 35  jdk.internal.misc.Unsafe.putShortUnaligned(Object, long, short, boolean):void (14 bytes)   inline method (bytecode parsing)
                                  @ 7  jdk.internal.misc.Unsafe.convEndian(boolean, short):short (16 bytes)   inline method (bytecode parsing)
                                @ 14  java.lang.Class.getComponentType():Class (14 bytes)   trivial (relevance=0.065810, probability=0.041667, bonus=1.000000, nodes=7)
                                @ 32  java.lang.Math.min(int, int):int (11 bytes)   trivial (relevance=0.334409, probability=0.211728, bonus=1.000000, nodes=7)
                              @ 21  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   relevance-based (relevance=0.268600, probability=0.211728, bonus=1.000000, nodes=40 <= 80.579891)
                            @ 21  org.graalvm.collections.EconomicMapImpl.getKey(int):Object (9 bytes)   inline method (bytecode parsing)
                            @ 4  jdk.graal.compiler.graph.Node.getNodeClass():NodeClass (5 bytes)   inline accessor method (bytecode parsing)
                                @ 40  jdk.graal.compiler.graph.Graph$1.hashCode(Object):int (15 bytes)   not inlining relevance-based (relevance=0.044069, probability=0.036861, bonus=1.000000, nodes=14 > 13.220799)
                 n              @ 48  java.lang.Object.hashCode():int (0 bytes)   trivial (relevance=1.151491, probability=0.963139, bonus=1.000000, nodes=5)
                                @ 61  org.graalvm.collections.EconomicMapImpl.getHashTableSize():int (43 bytes)   relevance-based (relevance=1.195561, probability=1.000000, bonus=1.000000, nodes=21 <= 300.000000)
                              @ 2  org.graalvm.collections.EconomicMapImpl.getHashIndex(Object):int (68 bytes)   relevance-based (relevance=1.265588, probability=1.000000, bonus=1.000000, nodes=76 <= 300.000000)
                              @ 8  org.graalvm.collections.EconomicMapImpl.getHashArray(int):int (126 bytes)   relevance-based (relevance=1.195561, probability=1.000000, bonus=1.000000, nodes=31 <= 300.000000)
                            @ 49  jdk.graal.compiler.graph.Node.valueEquals(Node):boolean (10 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.graph.Node.getNodeClass():NodeClass (5 bytes)   inline accessor method (bytecode parsing)
                            @ 59  jdk.graal.compiler.core.common.Fields.getCount():int (6 bytes)   inline method (bytecode parsing)
                            @ 70  jdk.graal.compiler.core.common.Fields.getType(int):Class (7 bytes)   inline method (bytecode parsing)
                                  @ 6  jdk.graal.compiler.graph.NodeClass.dataEquals(Node, Node):boolean (546 bytes)   not inlining relevance-based (relevance=0.103083, probability=0.021205, bonus=1.000000, nodes=248 > 30.924824)
                                @ 46  jdk.graal.compiler.graph.Graph$1.equals(Object, Object):boolean (53 bytes)   relevance-based (relevance=0.103083, probability=0.042410, bonus=1.000000, nodes=25 <= 30.924824)
                              @ 36  java.lang.Object.equals(Object):boolean (11 bytes)   not inlining no methods remaining after filtering less frequent methods (8 methods previously)
                              @ 30  org.graalvm.collections.EconomicMapImpl.compareKeys(Object, Object):boolean (52 bytes)   relevance-based (relevance=1.168533, probability=0.977393, bonus=1.000000, nodes=66 <= 300.000000)
                              @ 38  org.graalvm.collections.EconomicMapImpl.getRawValue(int):Object (11 bytes)   relevance-based (relevance=1.035817, probability=0.866386, bonus=1.000000, nodes=10 <= 300.000000)
                              @ 81  org.graalvm.collections.EconomicMapImpl.getRawValue(int):Object (11 bytes)   relevance-based (relevance=0.132716, probability=0.111007, bonus=1.000000, nodes=10 <= 39.814747)
                            @ 20  org.graalvm.collections.EconomicMapImpl.getKey(int):Object (9 bytes)   inline method (bytecode parsing)
                              @ 102  org.graalvm.collections.EconomicMapImpl.findAndRemoveWithCollision(Object, EconomicMapImpl$CollisionLink, int):int (137 bytes)   not inlining relevance-based (relevance=0.126005, probability=0.105394, bonus=1.000000, nodes=73 > 37.801642)
                            @ 7  org.graalvm.collections.EconomicMapImpl$SparseMapIterator.<init>(EconomicMapImpl):void (10 bytes)   inline method (bytecode parsing)
                              @ 5  org.graalvm.collections.EconomicMapImpl$3.<init>(EconomicMapImpl):void (11 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=12 <= 300.000000)
                              @ 74  org.graalvm.collections.EconomicMapImpl.setHashArray(int, int):void (112 bytes)   relevance-based (relevance=1.035817, probability=0.866386, bonus=1.000000, nodes=37 <= 300.000000)
                            @ 1  java.util.AbstractMap.<init>():void (5 bytes)   inline method (bytecode parsing)
                              @ 51  java.lang.Float.isNaN(float):boolean (12 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=7)
                              @ 91  java.util.HashMap.tableSizeFor(int):int (32 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=23 <= 300.000000)
                            @ 36  java.lang.Long.<init>(long):void (10 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.Number.<init>():void (5 bytes)   inline method (bytecode parsing)
                            @ 35  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                              @ 40  java.util.PriorityQueue.grow(int):void (42 bytes)   not inlining relevance-based (relevance=0.019808, probability=0.019423, bonus=1.000000, nodes=36 > 5.942308)
                                @ 17  java.util.PriorityQueue.siftUpUsingComparator(int, Object, Object[], Comparator):void (48 bytes)   not inlining too large previous low-level graph (low-level-nodes: 918, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=42)
                              @ 46  java.util.PriorityQueue.siftUp(int, Object):void (33 bytes)   relevance-based (relevance=1.019808, probability=1.000000, bonus=1.000000, nodes=13 <= 300.000000)
                            @ 4  java.lang.StringBuilder.<init>():void (7 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.999625, bonus=1.000000, nodes=5)
                              @ 6  java.lang.String.length():int (11 bytes)   trivial (relevance=1.007912, probability=0.999625, bonus=1.000000, nodes=8)
                                @ 3  java.lang.AbstractStringBuilder.<init>(int):void (39 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                                @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.999625, bonus=1.000000, nodes=5)
                              @ 10  java.lang.String.length():int (11 bytes)   trivial (relevance=1.007912, probability=0.999625, bonus=1.000000, nodes=8)
                              @ 39  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.991777, bonus=1.000000, nodes=5)
                                @ 11  java.lang.Double.compare(double, double):int (54 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=23 <= 300.000000)
                              @ 47  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.991777, bonus=1.000000, nodes=5)
                                @ 26  java.lang.Double.isNaN(double):boolean (12 bytes)   trivial (relevance=1.115694, probability=1.000000, bonus=1.000000, nodes=7)
                            @ 10  java.util.Formatter$Flags.contains(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                              @ 70  jdk.internal.util.ArraysSupport.mismatch(byte[], int, byte[], int, int):int (103 bytes)   relevance-based (relevance=1.000000, probability=0.991777, bonus=1.000000, nodes=62 <= 300.000000)
                            @ 32  java.util.Formatter$Flags.contains(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                                @ 43  java.util.Formatter$FormatSpecifier.leadingSign(StringBuilder, boolean):StringBuilder (80 bytes)   relevance-based (relevance=1.115694, probability=1.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                @ 49  java.lang.Double.isInfinite(double):boolean (17 bytes)   trivial (relevance=1.115694, probability=1.000000, bonus=1.000000, nodes=9)
                            @ 275  java.lang.StringBuilder.<init>():void (7 bytes)   inline method (bytecode parsing)
                            @ 280  jdk.internal.math.FormattedFPDecimal.getMantissa():char[] (5 bytes)   inline accessor method (bytecode parsing)
                            @ 283  java.lang.StringBuilder.append(char[]):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 299  java.util.Formatter$Flags.contains(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 4  jdk.internal.math.FormattedFPDecimal.<init>():void (5 bytes)   inline method (bytecode parsing)
                                  @ 266  jdk.internal.math.FormattedFPDecimal.valueOf(double, int, char):FormattedFPDecimal (96 bytes)   not inlining too large previous low-level graph (low-level-nodes: 813, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=13)
                                  @ 3  java.lang.AbstractStringBuilder.<init>(int):void (39 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                                  @ 2  java.lang.AbstractStringBuilder.append(char[]):AbstractStringBuilder (22 bytes)   not inlining too large previous low-level graph (low-level-nodes: 410, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=15)
                            @ 1  java.lang.StringBuilder.length():int (5 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.AbstractStringBuilder.length():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 17  java.lang.StringBuilder.charAt(int):char (6 bytes)   inline method (bytecode parsing)
                            @ 98  java.lang.StringBuilder.append(char):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 5  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                                      @ 9  java.lang.AbstractStringBuilder.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=1.737329, bonus=1.000000, nodes=9)
                                    @ 2  java.lang.AbstractStringBuilder.charAt(int):char (36 bytes)   relevance-based (relevance=1.291928, probability=1.737329, bonus=1.000000, nodes=19 <= 300.000000)
                                    @ 2  java.lang.AbstractStringBuilder.append(char):AbstractStringBuilder (77 bytes)   not inlining too large previous low-level graph (low-level-nodes: 332, relevance=0.607427, probability=0.607427, bonus=1.000000, nodes=29)
                            @ 10  java.lang.StringBuilder.append(char):StringBuilder (8 bytes)   inline method (bytecode parsing)
                                      @ 2  java.lang.AbstractStringBuilder.append(char):AbstractStringBuilder (77 bytes)   not inlining too large previous low-level graph (low-level-nodes: 332, relevance=0.609659, probability=3.647869, bonus=1.000000, nodes=29)
                                    @ 108  java.util.Formatter$FormatSpecifier.trailingZeros(StringBuilder, int):void (21 bytes)   not inlining callee invoke probability is too high (invokeP=5.983459, relevance=0.609659, probability=0.609659, bonus=1.000000, nodes=23)
                                  @ 293  java.util.Formatter$FormatSpecifier.addZeros(StringBuilder, int):void (112 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=70 <= 300.000000)
                            @ 13  java.lang.StringBuilder.length():int (5 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.AbstractStringBuilder.length():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 101  java.util.Formatter$Flags.contains(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 261  java.lang.StringBuilder.append(char):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 291  java.lang.StringBuilder.append(char):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 337  java.lang.StringBuilder.length():int (5 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.AbstractStringBuilder.length():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 13  java.text.DecimalFormatSymbols.getZeroDigit():char (5 bytes)   inline accessor method (bytecode parsing)
                            @ 9  java.text.DecimalFormatSymbols.getLocale():Locale (5 bytes)   inline accessor method (bytecode parsing)
                                        @ 13  java.util.Locale.equals(Object):boolean (75 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=8)
                                      @ 10  java.util.Formatter.getDecimalFormatSymbols(Locale):DecimalFormatSymbols (32 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=15 <= 300.000000)
                                    @ 20  java.util.Formatter.getZero(Locale):char (17 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=20 <= 300.000000)
                            @ 1  java.lang.AbstractStringBuilder.length():int (5 bytes)   inline accessor method (bytecode parsing)
                                    @ 35  java.lang.StringBuilder.length():int (5 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                            @ 5  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                                        @ 9  java.lang.AbstractStringBuilder.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=2.199538, bonus=1.000000, nodes=9)
                                      @ 2  java.lang.AbstractStringBuilder.charAt(int):char (36 bytes)   relevance-based (relevance=1.000000, probability=2.199538, bonus=1.000000, nodes=19 <= 300.000000)
                                    @ 60  java.lang.StringBuilder.charAt(int):char (6 bytes)   relevance-based (relevance=1.448110, probability=2.199538, bonus=1.000000, nodes=19 <= 300.000000)
                            @ 13  java.text.DecimalFormatSymbols.getDecimalSeparator():char (5 bytes)   inline accessor method (bytecode parsing)
                            @ 9  java.text.DecimalFormatSymbols.getLocale():Locale (5 bytes)   inline accessor method (bytecode parsing)
                                        @ 13  java.util.Locale.equals(Object):boolean (75 bytes)   trivial (relevance=0.680685, probability=0.680685, bonus=1.000000, nodes=8)
                                      @ 10  java.util.Formatter.getDecimalFormatSymbols(Locale):DecimalFormatSymbols (32 bytes)   relevance-based (relevance=0.680685, probability=0.680685, bonus=1.000000, nodes=15 <= 204.205556)
                                    @ 92  java.util.Formatter.getDecimalSeparator(Locale):char (17 bytes)   relevance-based (relevance=0.680685, probability=0.680685, bonus=1.000000, nodes=20 <= 204.205556)
                            @ 5  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                                        @ 9  java.lang.AbstractStringBuilder.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=5.601293, bonus=1.000000, nodes=9)
                                      @ 2  java.lang.AbstractStringBuilder.charAt(int):char (36 bytes)   relevance-based (relevance=1.000000, probability=5.601293, bonus=1.000000, nodes=19 <= 300.000000)
                                    @ 274  java.lang.StringBuilder.charAt(int):char (6 bytes)   relevance-based (relevance=1.000000, probability=5.601293, bonus=1.000000, nodes=19 <= 300.000000)
                                    @ 2  java.lang.AbstractStringBuilder.append(char):AbstractStringBuilder (77 bytes)   not inlining too large previous low-level graph (low-level-nodes: 332, relevance=1.000000, probability=5.601293, bonus=1.000000, nodes=31)
                                    @ 2  java.lang.AbstractStringBuilder.append(char):AbstractStringBuilder (77 bytes)   not inlining too large previous low-level graph (low-level-nodes: 332, relevance=0.121498, probability=0.680547, bonus=1.000000, nodes=31)
                                  @ 358  java.util.Formatter$FormatSpecifier.localizedMagnitude(Formatter, StringBuilder, CharSequence, int, int, int, Locale):StringBuilder (381 bytes)   not inlining callee invoke probability is too high (invokeP=6.281840, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=136)
                                @ 77  java.util.Formatter$FormatSpecifier.print(Formatter, StringBuilder, double, Locale, int, char, int, boolean):void (912 bytes)   relevance-based (relevance=1.115694, probability=1.000000, bonus=1.000000, nodes=118 <= 300.000000)
                                @ 114  java.util.Formatter$FormatSpecifier.trailingSign(StringBuilder, boolean):StringBuilder (26 bytes)   trivial (relevance=1.115694, probability=1.000000, bonus=1.000000, nodes=6)
                            @ 2  java.lang.StringBuilder.append(CharSequence):StringBuilder (8 bytes)   inline method (bytecode parsing)
                                    @ 2  java.lang.AbstractStringBuilder.append(CharSequence):AbstractStringBuilder (54 bytes)   not inlining too large previous low-level graph (low-level-nodes: 399, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=8)
                                  @ 10  java.lang.StringBuilder.append(CharSequence):Appendable (6 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=9)
                                @ 154  java.util.Formatter$FormatSpecifier.appendJustified(Appendable, CharSequence):void (89 bytes)   relevance-based (relevance=1.115694, probability=1.000000, bonus=1.000000, nodes=23 <= 300.000000)
                              @ 55  java.util.Formatter$FormatSpecifier.print(Formatter, double, Locale):void (158 bytes)   not inlining callee invoke probability is too high (invokeP=5.217086, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=178)
                            @ 17  java.lang.Enum.ordinal():int (5 bytes)   inline accessor method (bytecode parsing)
                                @ 2  org.graalvm.collections.EconomicMapImpl.getRawValue(int):Object (11 bytes)   relevance-based (relevance=1.052965, probability=1.000000, bonus=1.000000, nodes=10 <= 300.000000)
                                @ 2  java.util.EnumSet.typeCheck(Enum):void (59 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=9)
                              @ 8  org.graalvm.collections.EconomicMapImpl.getValue(int):Object (23 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=19 <= 300.000000)
                              @ 5  java.util.RegularEnumSet.add(Enum):boolean (40 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=20 <= 300.000000)
                                @ 1  java.util.ArrayList$SubList.checkForComodification():void (23 bytes)   trivial (relevance=0.815615, probability=0.360777, bonus=1.000000, nodes=9)
                              @ 1  java.util.PriorityQueue.size():int (5 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=26 <= 300.000000)
                            @ 13  java.lang.StringBuilder.length():int (5 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.AbstractStringBuilder.length():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 101  java.util.Formatter$Flags.contains(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 261  java.lang.StringBuilder.append(char):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 291  java.lang.StringBuilder.append(char):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 337  java.lang.StringBuilder.length():int (5 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.AbstractStringBuilder.length():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 13  java.text.DecimalFormatSymbols.getZeroDigit():char (5 bytes)   inline accessor method (bytecode parsing)
                            @ 9  java.text.DecimalFormatSymbols.getLocale():Locale (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 13  java.util.Locale.equals(Object):boolean (75 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=8)
                                @ 10  java.util.Formatter.getDecimalFormatSymbols(Locale):DecimalFormatSymbols (32 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=15 <= 300.000000)
                              @ 20  java.util.Formatter.getZero(Locale):char (17 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=20 <= 300.000000)
                            @ 1  java.lang.AbstractStringBuilder.length():int (5 bytes)   inline accessor method (bytecode parsing)
                                @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=0.467840, probability=0.318727, bonus=1.000000, nodes=5)
                            @ 1  org.graalvm.collections.EconomicMapImpl.size():int (10 bytes)   inline method (bytecode parsing)
                              @ 35  java.lang.StringBuilder.length():int (5 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=13 <= 300.000000)
                            @ 84  org.graalvm.collections.EconomicMapImpl.getKey(int):Object (9 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=0.534752, probability=0.593024, bonus=1.000000, nodes=9)
                            @ 3  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                              @ 6  org.graalvm.collections.EconomicMapImpl.getHashThreshold():int (22 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=12 <= 300.000000)
                                @ 12  java.lang.StringLatin1.charAt(byte[], int):char (15 bytes)   relevance-based (relevance=0.534752, probability=0.593024, bonus=1.000000, nodes=11 <= 160.425675)
                            @ 5  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                              @ 99  org.graalvm.collections.EconomicMapImpl.putHashEntry(Object, int, boolean):void (161 bytes)   not inlining too large previous low-level graph (low-level-nodes: 510, relevance=1.000000, probability=21.375660, bonus=1.000000, nodes=67)
                                  @ 9  java.lang.AbstractStringBuilder.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=1.606566, bonus=1.000000, nodes=9)
                                @ 2  java.lang.AbstractStringBuilder.charAt(int):char (36 bytes)   relevance-based (relevance=1.000000, probability=1.606566, bonus=1.000000, nodes=19 <= 300.000000)
                              @ 60  java.lang.StringBuilder.charAt(int):char (6 bytes)   relevance-based (relevance=1.448701, probability=2.199590, bonus=1.000000, nodes=35 <= 300.000000)
                            @ 13  java.text.DecimalFormatSymbols.getDecimalSeparator():char (5 bytes)   inline accessor method (bytecode parsing)
                            @ 9  java.text.DecimalFormatSymbols.getLocale():Locale (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 13  java.util.Locale.equals(Object):boolean (75 bytes)   trivial (relevance=1.000000, probability=0.681321, bonus=1.000000, nodes=8)
                                @ 10  java.util.Formatter.getDecimalFormatSymbols(Locale):DecimalFormatSymbols (32 bytes)   relevance-based (relevance=1.000000, probability=0.681321, bonus=1.000000, nodes=15 <= 300.000000)
                              @ 92  java.util.Formatter.getDecimalSeparator(Locale):char (17 bytes)   relevance-based (relevance=1.000069, probability=0.681321, bonus=1.000000, nodes=20 <= 300.000000)
                                @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=0.118356, probability=0.593133, bonus=1.000000, nodes=9)
                            @ 3  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                                @ 12  java.lang.StringLatin1.charAt(byte[], int):char (15 bytes)   relevance-based (relevance=0.118356, probability=0.593133, bonus=1.000000, nodes=11 <= 35.506873)
                            @ 5  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                                  @ 9  java.lang.AbstractStringBuilder.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=5.011422, bonus=1.000000, nodes=9)
                                @ 2  java.lang.AbstractStringBuilder.charAt(int):char (36 bytes)   relevance-based (relevance=1.000000, probability=5.011422, bonus=1.000000, nodes=19 <= 300.000000)
                              @ 274  java.lang.StringBuilder.charAt(int):char (6 bytes)   relevance-based (relevance=1.000000, probability=5.604555, bonus=1.000000, nodes=35 <= 300.000000)
                              @ 2  java.lang.AbstractStringBuilder.append(char):AbstractStringBuilder (77 bytes)   not inlining too large previous low-level graph (low-level-nodes: 332, relevance=1.118356, probability=5.604555, bonus=1.000000, nodes=31)
                              @ 2  java.lang.AbstractStringBuilder.append(char):AbstractStringBuilder (77 bytes)   not inlining too large previous low-level graph (low-level-nodes: 332, relevance=0.135927, probability=0.681185, bonus=1.000000, nodes=31)
                            @ 8  org.graalvm.collections.EconomicMapImpl.getKey(int):Object (9 bytes)   inline method (bytecode parsing)
                              @ 8  jdk.internal.misc.Unsafe.convEndian(boolean, int):int (16 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=16 <= 300.000000)
                            @ 8  jdk.graal.compiler.lir.stackslotalloc.LSStackSlotAllocator$Allocator.lambda$new$0(StackInterval, StackInterval):int (10 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.lir.stackslotalloc.StackInterval.from():int (5 bytes)   inline accessor method (bytecode parsing)
                              @ 5  jdk.graal.compiler.lir.stackslotalloc.StackInterval.from():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 8  jdk.graal.compiler.lir.stackslotalloc.LSStackSlotAllocator$Allocator.lambda$new$1(StackInterval, StackInterval):int (10 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.lir.stackslotalloc.StackInterval.to():int (5 bytes)   inline accessor method (bytecode parsing)
                              @ 5  jdk.graal.compiler.lir.stackslotalloc.StackInterval.to():int (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 1  jdk.graal.compiler.core.common.cfg.BasicBlock.getRelativeFrequency():double (0 bytes)   not inlining no type profile exists
                                  @ 12  jdk.graal.compiler.core.common.cfg.BasicBlock.getRelativeFrequency():double (0 bytes)   not inlining no type profile exists
                                  @ 23  jdk.graal.compiler.core.common.cfg.BasicBlock.getLoopDepth():int (0 bytes)   not inlining no type profile exists
                                  @ 27  jdk.graal.compiler.core.common.cfg.BasicBlock.getLoopDepth():int (0 bytes)   not inlining no type profile exists
                                  @ 39  jdk.graal.compiler.core.common.cfg.BasicBlock.getRelativeFrequency():double (0 bytes)   not inlining no type profile exists
                                  @ 43  jdk.graal.compiler.core.common.cfg.BasicBlock.getRelativeFrequency():double (0 bytes)   not inlining no type profile exists
                                  @ 9  jdk.graal.compiler.core.common.alloc.BasicBlockOrderUtils$BlockOrderComparator.compare(BasicBlock, BasicBlock):int (54 bytes)   relevance-based (relevance=1.000000, probability=1.574497, bonus=1.000000, nodes=47 <= 300.000000)
                                @ 44  jdk.graal.compiler.core.common.alloc.BasicBlockOrderUtils$BlockOrderComparator.compare(Object, Object):int (13 bytes)   relevance-based (relevance=1.505109, probability=1.687732, bonus=1.000000, nodes=99 <= 300.000000)
                            @ 8  jdk.graal.compiler.lir.stackslotalloc.LSStackSlotAllocator$Allocator.lambda$new$0(StackInterval, StackInterval):int (10 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.lir.stackslotalloc.StackInterval.from():int (5 bytes)   inline accessor method (bytecode parsing)
                              @ 5  jdk.graal.compiler.lir.stackslotalloc.StackInterval.from():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 10  java.lang.StringBuilder.append(char):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 8  jdk.graal.compiler.lir.stackslotalloc.LSStackSlotAllocator$Allocator.lambda$new$1(StackInterval, StackInterval):int (10 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.lir.stackslotalloc.StackInterval.to():int (5 bytes)   inline accessor method (bytecode parsing)
                              @ 5  jdk.graal.compiler.lir.stackslotalloc.StackInterval.to():int (5 bytes)   inline accessor method (bytecode parsing)
                              @ 2  java.lang.AbstractStringBuilder.append(char):AbstractStringBuilder (77 bytes)   not inlining too large previous low-level graph (low-level-nodes: 332, relevance=1.000000, probability=0.856831, bonus=1.000000, nodes=29)
                                  @ 1  jdk.graal.compiler.core.common.cfg.BasicBlock.getRelativeFrequency():double (0 bytes)   not inlining no type profile exists
                                  @ 12  jdk.graal.compiler.core.common.cfg.BasicBlock.getRelativeFrequency():double (0 bytes)   not inlining no type profile exists
                                  @ 23  jdk.graal.compiler.core.common.cfg.BasicBlock.getLoopDepth():int (0 bytes)   not inlining no type profile exists
                                  @ 27  jdk.graal.compiler.core.common.cfg.BasicBlock.getLoopDepth():int (0 bytes)   not inlining no type profile exists
                                  @ 39  jdk.graal.compiler.core.common.cfg.BasicBlock.getRelativeFrequency():double (0 bytes)   not inlining no type profile exists
                                  @ 43  jdk.graal.compiler.core.common.cfg.BasicBlock.getRelativeFrequency():double (0 bytes)   not inlining no type profile exists
                              @ 2  java.lang.AbstractStringBuilder.append(char):AbstractStringBuilder (77 bytes)   not inlining too large previous low-level graph (low-level-nodes: 332, relevance=1.000000, probability=4.271110, bonus=1.000000, nodes=29)
                                  @ 9  jdk.graal.compiler.core.common.alloc.BasicBlockOrderUtils$BlockOrderComparator.compare(BasicBlock, BasicBlock):int (54 bytes)   relevance-based (relevance=1.000000, probability=1.732104, bonus=1.000000, nodes=47 <= 300.000000)
                                @ 66  jdk.graal.compiler.core.common.alloc.BasicBlockOrderUtils$BlockOrderComparator.compare(Object, Object):int (13 bytes)   relevance-based (relevance=9.514269, probability=1.872524, bonus=1.000000, nodes=99 <= 300.000000)
                              @ 76  java.util.PriorityQueue.siftDownUsingComparator(int, Object, Object[], int, Comparator):void (93 bytes)   not inlining callee invoke probability is too high (invokeP=14.748964, relevance=1.000000, probability=0.840720, bonus=1.000000, nodes=243)
                              @ 51  jdk.internal.misc.Unsafe.allocateUninitializedArray0(Class, int):Object (90 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=9)
                            @ 4  som.Vector.<init>():void (7 bytes)   inline method (bytecode parsing)
                              @ 3  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 10  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 14  deltablue.Strength.absoluteWeakest():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 17  deltablue.Variable.setWalkStrength(Strength):void (6 bytes)   inline method (bytecode parsing)
                            @ 22  deltablue.Variable.setStay(boolean):void (6 bytes)   inline method (bytecode parsing)
                            @ 48  deltablue.Variable.getConstraints():Vector (5 bytes)   inline accessor method (bytecode parsing)
                            @ 52  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.Planner$$Lambda/0x00007f2ce01f6000.<init>(Vector):void (10 bytes)   inline method (bytecode parsing)
                            @ 64  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.Planner$$Lambda/0x00007f2ce01f6220.<init>(Vector):void (10 bytes)   inline method (bytecode parsing)
                            @ 76  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object):Object (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.lang.invoke.LambdaForm$MH/0x00007f2ce0000800.invoke(Object):Object (8 bytes)   inline method (bytecode parsing)
                              @ 31  som.Vector.isEmpty():boolean (17 bytes)   relevance-based (relevance=1.000028, probability=1.000000, bonus=1.000000, nodes=10 <= 300.000000)
                                @ 1  som.Vector.isEmpty():boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.999972, bonus=1.000000, nodes=10 <= 300.000000)
                              @ 38  som.Vector.removeFirst():Object (31 bytes)   relevance-based (relevance=1.000000, probability=0.999972, bonus=1.000000, nodes=18 <= 300.000000)
                                    @ 1  deltablue.BinaryConstraint.isSatisfied():boolean (13 bytes)   relevance-based (relevance=1.000009, probability=7.920333, bonus=1.000000, nodes=14 <= 300.000000)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                    @ 9  som.Vector.append(Object):void (51 bytes)   not inlining relevance-based (relevance=0.000009, probability=0.000072, bonus=1.000000, nodes=35 > 0.002711)
                                  @ 8  deltablue.Planner.lambda$removePropagateFrom$4(Vector, AbstractConstraint):void (13 bytes)   relevance-based (relevance=1.000000, probability=7.920333, bonus=1.000000, nodes=36 <= 300.000000)
                                @ 20  deltablue.Planner$$Lambda/0x00007f2ce01f6000.apply(Object):void (12 bytes)   relevance-based (relevance=1.000000, probability=7.920333, bonus=1.000000, nodes=43 <= 300.000000)
                              @ 57  som.Vector.forEach(ForEachInterface):void (32 bytes)   relevance-based (relevance=1.000000, probability=0.999972, bonus=1.000000, nodes=56 <= 300.000000)
                            @ 1  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 6  deltablue.Variable.getConstraints():Vector (5 bytes)   inline accessor method (bytecode parsing)
                            @ 11  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object, Object):Object (10 bytes)   inline method (bytecode parsing)
                              @ 6  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object, Object):Object (24 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 19  deltablue.Planner$$Lambda/0x00007f2ce01f6440.<init>(AbstractConstraint, ForEachInterface):void (15 bytes)   relevance-based (relevance=1.000000, probability=0.999972, bonus=1.000000, nodes=11 <= 300.000000)
                                    @ 12  deltablue.Planner.lambda$constraintsConsuming$3(AbstractConstraint, ForEachInterface, AbstractConstraint):void (20 bytes)   not inlining too large previous low-level graph (low-level-nodes: 391, relevance=1.000000, probability=7.920333, bonus=1.000000, nodes=26)
                                  @ 20  deltablue.Planner$$Lambda/0x00007f2ce01f6440.apply(Object):void (16 bytes)   relevance-based (relevance=1.000000, probability=7.920333, bonus=1.000000, nodes=16 <= 300.000000)
                                @ 16  som.Vector.forEach(ForEachInterface):void (32 bytes)   not inlining callee invoke probability is too high (invokeP=7.920556, relevance=1.000000, probability=0.999972, bonus=1.000000, nodes=33)
                              @ 69  deltablue.Planner.constraintsConsuming(Variable, ForEachInterface):void (20 bytes)   relevance-based (relevance=1.000000, probability=0.999972, bonus=1.000000, nodes=23 <= 300.000000)
                              @ 31  som.Vector.isEmpty():boolean (17 bytes)   relevance-based (relevance=1.000028, probability=35454.954574, bonus=1.000000, nodes=10 <= 300.000000)
                                @ 1  som.Vector.isEmpty():boolean (17 bytes)   relevance-based (relevance=1.000000, probability=35453.954602, bonus=1.000000, nodes=10 <= 300.000000)
                              @ 38  som.Vector.removeFirst():Object (31 bytes)   relevance-based (relevance=1.000000, probability=35453.954602, bonus=1.000000, nodes=18 <= 300.000000)
                                    @ 1  deltablue.BinaryConstraint.isSatisfied():boolean (13 bytes)   relevance-based (relevance=1.000009, probability=280815.038095, bonus=1.000000, nodes=14 <= 300.000000)
                              @ 89  java.util.TimSort.<init>(Object[], Comparator, Object[], int, int):void (181 bytes)   not inlining relevance-based (relevance=0.026130, probability=0.014825, bonus=1.000000, nodes=112 > 7.839023)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                              @ 96  java.util.TimSort.minRunLength(int):int (43 bytes)   not inlining relevance-based (relevance=0.026130, probability=0.014825, bonus=1.000000, nodes=24 > 7.839023)
                                    @ 9  som.Vector.append(Object):void (51 bytes)   not inlining relevance-based (relevance=0.000009, probability=2.537558, bonus=1.000000, nodes=35 > 0.002711)
                                  @ 8  deltablue.Planner.lambda$removePropagateFrom$4(Vector, AbstractConstraint):void (13 bytes)   relevance-based (relevance=1.000000, probability=280815.038095, bonus=1.000000, nodes=36 <= 300.000000)
                                @ 20  deltablue.Planner$$Lambda/0x00007f2ce01f6000.apply(Object):void (12 bytes)   relevance-based (relevance=1.000000, probability=280815.038095, bonus=1.000000, nodes=43 <= 300.000000)
                              @ 57  som.Vector.forEach(ForEachInterface):void (32 bytes)   relevance-based (relevance=1.000000, probability=35453.954602, bonus=1.000000, nodes=56 <= 300.000000)
                            @ 1  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 6  deltablue.Variable.getConstraints():Vector (5 bytes)   inline accessor method (bytecode parsing)
                            @ 11  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object, Object):Object (10 bytes)   inline method (bytecode parsing)
                            @ 1  jdk.graal.compiler.core.common.cfg.BasicBlock.getId():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  jdk.graal.compiler.core.common.cfg.BasicBlock.getId():int (5 bytes)   inline accessor method (bytecode parsing)
                              @ 6  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object, Object):Object (24 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                    @ 8  java.lang.Integer.compare(int, int):int (20 bytes)   trivial (relevance=1.000000, probability=0.352826, bonus=1.000000, nodes=6)
                                  @ 9  jdk.graal.compiler.core.common.cfg.BasicBlock$BlockIdComparator.compare(BasicBlock, BasicBlock):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.352826, bonus=1.000000, nodes=14 <= 300.000000)
                                @ 43  jdk.graal.compiler.core.common.cfg.BasicBlock$BlockIdComparator.compare(Object, Object):int (13 bytes)   relevance-based (relevance=1.854701, probability=0.567136, bonus=1.000000, nodes=21 <= 300.000000)
                                @ 19  deltablue.Planner$$Lambda/0x00007f2ce01f6440.<init>(AbstractConstraint, ForEachInterface):void (15 bytes)   relevance-based (relevance=1.000000, probability=35453.954602, bonus=1.000000, nodes=11 <= 300.000000)
                              @ 109  java.util.Comparator.compare(Object, Object):int (0 bytes)   not inlining no methods remaining after filtering less frequent methods (8 methods previously)
                            @ 8  jdk.graal.compiler.lir.alloc.lsra.LinearScan.lambda$sortIntervals$0(Interval, Interval):int (10 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.lir.alloc.lsra.Interval.from():int (8 bytes)   inline method (bytecode parsing)
                              @ 5  jdk.graal.compiler.lir.alloc.lsra.Interval.from():int (8 bytes)   inline method (bytecode parsing)
                                    @ 12  deltablue.Planner.lambda$constraintsConsuming$3(AbstractConstraint, ForEachInterface, AbstractConstraint):void (20 bytes)   not inlining too large previous low-level graph (low-level-nodes: 391, relevance=1.000000, probability=280815.038095, bonus=1.000000, nodes=26)
                                  @ 20  deltablue.Planner$$Lambda/0x00007f2ce01f6440.apply(Object):void (16 bytes)   relevance-based (relevance=1.000000, probability=280815.038095, bonus=1.000000, nodes=16 <= 300.000000)
                                @ 16  som.Vector.forEach(ForEachInterface):void (32 bytes)   not inlining callee invoke probability is too high (invokeP=7.920556, relevance=1.000000, probability=35453.954602, bonus=1.000000, nodes=33)
                              @ 69  deltablue.Planner.constraintsConsuming(Variable, ForEachInterface):void (20 bytes)   relevance-based (relevance=1.000000, probability=35453.954602, bonus=1.000000, nodes=23 <= 300.000000)
                            @ 1  som.Vector.size():int (10 bytes)   inline method (bytecode parsing)
                                @ 68  jdk.graal.compiler.core.common.cfg.BasicBlock$BlockIdComparator.compare(Object, Object):int (13 bytes)   not inlining relevance-based (relevance=0.286205, probability=0.078633, bonus=1.000000, nodes=107 > 85.861406)
                                @ 86  java.util.TimSort.reverseRange(Object[], int, int):void (32 bytes)   relevance-based (relevance=0.740741, probability=0.261353, bonus=1.000000, nodes=28 <= 222.222222)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                              @ 60  java.util.TimSort.countRunAndMakeAscending(Object[], int, int, Comparator):int (128 bytes)   relevance-based (relevance=1.000000, probability=0.567363, bonus=1.000000, nodes=136 <= 300.000000)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                              @ 73  java.util.TimSort.binarySort(Object[], int, int, int, Comparator):void (223 bytes)   not inlining too large previous low-level graph (low-level-nodes: 907, relevance=1.608052, probability=0.567363, bonus=1.000000, nodes=85)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                              @ 105  java.util.TimSort.countRunAndMakeAscending(Object[], int, int, Comparator):int (128 bytes)   not inlining relevance-based (relevance=0.048663, probability=0.056271, bonus=1.000000, nodes=90 > 14.598859)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                              @ 144  java.util.TimSort.binarySort(Object[], int, int, int, Comparator):void (223 bytes)   not inlining too large previous low-level graph (low-level-nodes: 907, relevance=0.042019, probability=0.048588, bonus=1.000000, nodes=85)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                              @ 156  java.util.TimSort.pushRun(int, int):void (31 bytes)   not inlining relevance-based (relevance=0.048663, probability=0.056271, bonus=1.000000, nodes=17 > 14.598859)
                                      @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.250000, bonus=1.000000, nodes=13 <= 300.000000)
                                    @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.250000, bonus=1.000000, nodes=24 <= 300.000000)
                                  @ 45  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.250000, bonus=1.000000, nodes=30 <= 300.000000)
                              @ 161  java.util.TimSort.mergeCollapse():void (134 bytes)   not inlining relevance-based (relevance=0.048663, probability=0.056271, bonus=1.000000, nodes=104 > 14.598859)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                              @ 202  java.util.TimSort.mergeForceCollapse():void (50 bytes)   not inlining relevance-based (relevance=0.042019, probability=0.014825, bonus=1.000000, nodes=44 > 12.605554)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                      @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.062500, bonus=1.000000, nodes=13 <= 300.000000)
                                    @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.062500, bonus=1.000000, nodes=24 <= 300.000000)
                                  @ 101  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.062500, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                      @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.062500, bonus=1.000000, nodes=13 <= 300.000000)
                                    @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.062500, bonus=1.000000, nodes=24 <= 300.000000)
                                  @ 114  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.062500, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                      @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.010417, bonus=1.000000, nodes=13 <= 300.000000)
                                    @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.010417, bonus=1.000000, nodes=24 <= 300.000000)
                                  @ 184  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.010417, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                      @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.010417, bonus=1.000000, nodes=13 <= 300.000000)
                                    @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.010417, bonus=1.000000, nodes=24 <= 300.000000)
                                  @ 218  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.010417, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                        @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.003906, bonus=1.000000, nodes=13 <= 300.000000)
                                      @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.003906, bonus=1.000000, nodes=24 <= 300.000000)
                                    @ 45  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.003906, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                        @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000977, bonus=1.000000, nodes=13 <= 300.000000)
                                      @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000977, bonus=1.000000, nodes=24 <= 300.000000)
                                    @ 101  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000977, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                        @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000977, bonus=1.000000, nodes=13 <= 300.000000)
                                      @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000977, bonus=1.000000, nodes=24 <= 300.000000)
                                    @ 114  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000977, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                        @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000163, bonus=1.000000, nodes=13 <= 300.000000)
                                      @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000163, bonus=1.000000, nodes=24 <= 300.000000)
                                    @ 184  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000163, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                        @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000163, bonus=1.000000, nodes=13 <= 300.000000)
                                      @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000163, bonus=1.000000, nodes=24 <= 300.000000)
                                    @ 218  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000163, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 18  jdk.graal.compiler.replacements.AllocationSnippets.allocateInstanceImpl(Word, UnsignedWord, boolean, AllocationSnippets$FillContent, boolean, boolean, AllocationSnippets$AllocationProfilingData):Object (143 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getTLABInfo():Word (5 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getThread():Word (8 bytes)   inline method (bytecode parsing)
                                  @ 4  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.registerAsWord(Register):Word (7 bytes)   inline method (bytecode parsing)
                              @ 9  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.readTlabTop(Word):Word (5 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.readTlabTop(Word):Word (17 bytes)   inline method (bytecode parsing)
                              @ 17  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.readTlabEnd(Word):Word (5 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.readTlabEnd(Word):Word (17 bytes)   inline method (bytecode parsing)
                              @ 35  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.useTLAB():boolean (7 bytes)   inline method (bytecode parsing)
                              @ 47  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.shouldAllocateInTLAB(UnsignedWord, boolean):boolean (33 bytes)   inline method (bytecode parsing)
                              @ 77  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.writeTlabTop(Word, Word):void (6 bytes)   inline method (bytecode parsing)
                                @ 2  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.writeTlabTop(Word, Word):void (15 bytes)   inline method (bytecode parsing)
                              @ 84  jdk.graal.compiler.replacements.AllocationSnippets.emitPrefetchAllocate(Word, boolean):void (61 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getPrefetchStyle():int (7 bytes)   inline method (bytecode parsing)
                                @ 9  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getPrefetchLines(boolean):int (18 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                                @ 14  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getPrefetchStepSize():int (7 bytes)   inline method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                                @ 20  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getPrefetchDistance():int (7 bytes)   inline method (bytecode parsing)
                              @ 103  jdk.graal.compiler.replacements.AllocationSnippets.formatObject(Word, UnsignedWord, Word, AllocationSnippets$FillContent, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):Object (41 bytes)   inline method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                @ 4  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.initializeObjectHeader(Word, Word, boolean):void (29 bytes)   inline method (bytecode parsing)
                                          @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000061, bonus=1.000000, nodes=13 <= 300.000000)
                                  @ 25  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.initializeObjectHeader(Word, Word, KlassPointer):void (20 bytes)   inline method (bytecode parsing)
                                        @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000061, bonus=1.000000, nodes=24 <= 300.000000)
                                @ 8  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.instanceHeaderSize():int (7 bytes)   inline method (bytecode parsing)
                                @ 27  jdk.graal.compiler.replacements.AllocationSnippets.fillContents(Word, AllocationSnippets$FillContent, int, UnsignedWord, boolean, boolean, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):void (58 bytes)   inline method (bytecode parsing)
                                      @ 45  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000061, bonus=1.000000, nodes=30 <= 300.000000)
                                  @ 22  jdk.graal.compiler.replacements.AllocationSnippets.zeroMemory(Word, int, UnsignedWord, boolean, boolean, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):void (19 bytes)   inline method (bytecode parsing)
                                    @ 15  jdk.graal.compiler.replacements.AllocationSnippets.fillMemory(long, Word, int, UnsignedWord, boolean, boolean, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):void (194 bytes)   inline method (bytecode parsing)
                                      @ 17  jdk.graal.compiler.replacements.ReplacementsUtil.dynamicAssert(boolean, String):void (12 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                                      @ 56  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                                      @ 89  jdk.graal.compiler.replacements.ReplacementsUtil.dynamicAssert(boolean, String):void (12 bytes)   inline method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                      @ 153  jdk.graal.compiler.replacements.ReplacementsUtil.staticAssert(boolean, String):void (12 bytes)   inline method (bytecode parsing)
                                          @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000015, bonus=1.000000, nodes=13 <= 300.000000)
                                      @ 167  jdk.graal.compiler.replacements.AllocationSnippets.fillMemoryAlignedUnrollable(long, Word, UnsignedWord, UnsignedWord, boolean, AllocationSnippets$AllocationSnippetCounters):void (68 bytes)   inline method (bytecode parsing)
                                        @ 5  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                        @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000015, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                                      @ 101  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000015, bonus=1.000000, nodes=30 <= 300.000000)
                                        @ 44  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                                      @ 190  jdk.graal.compiler.replacements.AllocationSnippets.fillMemoryAligned(long, Word, UnsignedWord, UnsignedWord, boolean, UnsignedWord, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):void (155 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                                        @ 91  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                                        @ 105  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                          @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                        @ 134  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                                          @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000015, bonus=1.000000, nodes=13 <= 300.000000)
                                @ 33  jdk.graal.compiler.replacements.AllocationSnippets.emitMemoryBarrierIf(boolean):void (14 bytes)   inline method (bytecode parsing)
                                        @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000015, bonus=1.000000, nodes=24 <= 300.000000)
                              @ 119  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                                      @ 114  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000015, bonus=1.000000, nodes=30 <= 300.000000)
                              @ 124  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.callNewInstanceStub(Word):Object (33 bytes)   inline method (bytecode parsing)
                                @ 21  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.nonNullOrDeopt(Object):Object (27 bytes)   inline method (bytecode parsing)
                              @ 133  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.profileAllocation(AllocationSnippets$AllocationProfilingData, UnsignedWord):void (51 bytes)   inline method (bytecode parsing)
                              @ 139  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.verifyOop(Object):Object (5 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.verifyOop(Object):Object (19 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000003, bonus=1.000000, nodes=13 <= 300.000000)
                                        @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000003, bonus=1.000000, nodes=24 <= 300.000000)
                                      @ 184  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000003, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000003, bonus=1.000000, nodes=13 <= 300.000000)
                                        @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000003, bonus=1.000000, nodes=24 <= 300.000000)
                                      @ 218  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000003, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                            @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000001, bonus=1.000000, nodes=13 <= 300.000000)
                                          @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000001, bonus=1.000000, nodes=24 <= 300.000000)
                                        @ 45  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000001, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                            @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                          @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                        @ 101  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                            @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                          @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                        @ 114  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                            @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                          @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                        @ 184  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                            @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                          @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                        @ 218  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                              @ 6  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.002407, probability=0.996078, bonus=1.000000, nodes=9)
                                          @ 45  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 49  java.lang.StringConcatHelper.newArray(long):byte[] (40 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 123  java.lang.String.<init>(byte[], byte):void (15 bytes)   inline method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 101  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                                @ 1  java.lang.StringLatin1.canEncode(int):boolean (13 bytes)   trivial (relevance=1.000000, probability=0.996078, bonus=1.000000, nodes=8)
                                @ 41  java.lang.StringLatin1.canEncode(int):boolean (13 bytes)   trivial (relevance=0.995829, probability=0.991923, bonus=1.000000, nodes=8)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                  @ 51  jdk.internal.misc.Unsafe.allocateUninitializedArray0(Class, int):Object (90 bytes)   trivial (relevance=0.995829, probability=0.991923, bonus=1.000000, nodes=6)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                @ 33  jdk.internal.misc.Unsafe.allocateUninitializedArray(Class, int):Object (55 bytes)   trivial (relevance=0.995829, probability=0.991923, bonus=1.000000, nodes=7)
                                          @ 114  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                              @ 18  java.lang.StringLatin1.replace(byte[], char, char):String (198 bytes)   relevance-based (relevance=1.002407, probability=0.996078, bonus=1.000000, nodes=94 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 184  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 218  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 45  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 101  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 114  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 184  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 218  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                                          @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining it exceeds the maximum recursive inlining depth
                                          @ 269  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining it exceeds the maximum recursive inlining depth
                                          @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=202 <= 300.000000)
                                        @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=387 > 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 45  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                                @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                              @ 2  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=8)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 101  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                                @ 1  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000010, probability=1.000000, bonus=1.000000, nodes=5)
                              @ 21  java.lang.String.getBytes(byte[], int, byte):void (44 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=24 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 114  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 184  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 218  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 45  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 101  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                            @ 12  java.lang.String.<init>(byte[], byte):void (15 bytes)   inline method (bytecode parsing)
                                            @ 114  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 184  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 218  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                                          @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining it exceeds the maximum recursive inlining depth
                                          @ 269  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining it exceeds the maximum recursive inlining depth
                                          @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=202 <= 300.000000)
                                        @ 269  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=387 > 300.000000)
                                      @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   relevance-based (relevance=1.000000, probability=0.000002, bonus=1.000000, nodes=202 <= 300.000000)
                            @ 10  java.lang.StringBuilder.append(char):StringBuilder (8 bytes)   inline method (bytecode parsing)
                                    @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.000122, bonus=1.000000, nodes=387 > 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                              @ 2  java.lang.AbstractStringBuilder.append(char):AbstractStringBuilder (77 bytes)   not inlining too large previous low-level graph (low-level-nodes: 332, relevance=1.000000, probability=5.993992, bonus=1.000000, nodes=29)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000061, bonus=1.000000, nodes=13 <= 300.000000)
                                        @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000061, bonus=1.000000, nodes=24 <= 300.000000)
                                      @ 45  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000061, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000015, bonus=1.000000, nodes=13 <= 300.000000)
                                        @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000015, bonus=1.000000, nodes=24 <= 300.000000)
                                      @ 101  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000015, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 4  deltablue.Planner.<init>():void (10 bytes)   inline method (bytecode parsing)
                            @ 16  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object):Object (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.lang.invoke.LambdaForm$MH/0x00007f2ce0000800.invoke(Object):Object (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 55  deltablue.EqualityConstraint.<init>(Variable, Variable, Strength$Sym, Planner):void (16 bytes)   inline method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                              @ 12  deltablue.AbstractConstraint.addConstraint(Planner):void (10 bytes)   inline method (bytecode parsing)
                                          @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000015, bonus=1.000000, nodes=13 <= 300.000000)
                            @ 76  deltablue.StayConstraint.<init>(Variable, Strength$Sym, Planner):void (8 bytes)   inline method (bytecode parsing)
                              @ 4  deltablue.UnaryConstraint.<init>(Variable, Strength$Sym, Planner):void (16 bytes)   inline method (bytecode parsing)
                                        @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000015, bonus=1.000000, nodes=24 <= 300.000000)
                                @ 2  deltablue.AbstractConstraint.<init>(Strength$Sym):void (13 bytes)   inline method (bytecode parsing)
                                  @ 6  deltablue.Strength.of(Strength$Sym):Strength (11 bytes)   inline method (bytecode parsing)
                                      @ 114  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000015, bonus=1.000000, nodes=30 <= 300.000000)
                                @ 12  deltablue.AbstractConstraint.addConstraint(Planner):void (10 bytes)   inline method (bytecode parsing)
                            @ 91  deltablue.EditConstraint.<init>(Variable, Strength$Sym, Planner):void (8 bytes)   inline method (bytecode parsing)
                              @ 4  deltablue.UnaryConstraint.<init>(Variable, Strength$Sym, Planner):void (16 bytes)   inline method (bytecode parsing)
                                @ 2  deltablue.AbstractConstraint.<init>(Strength$Sym):void (13 bytes)   inline method (bytecode parsing)
                                  @ 6  deltablue.Strength.of(Strength$Sym):Strength (11 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                                @ 12  deltablue.AbstractConstraint.addConstraint(Planner):void (10 bytes)   inline method (bytecode parsing)
                            @ 124  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 129  deltablue.Plan.execute():void (10 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object):Object (8 bytes)   inline method (bytecode parsing)
                                          @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000003, bonus=1.000000, nodes=13 <= 300.000000)
                                @ 4  java.lang.invoke.LambdaForm$MH/0x00007f2ce0000800.invoke(Object):Object (8 bytes)   inline method (bytecode parsing)
                                        @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000003, bonus=1.000000, nodes=24 <= 300.000000)
                            @ 135  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                      @ 184  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000003, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000003, bonus=1.000000, nodes=13 <= 300.000000)
                                        @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000003, bonus=1.000000, nodes=24 <= 300.000000)
                                      @ 218  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000003, bonus=1.000000, nodes=30 <= 300.000000)
                              @ 6  deltablue.BinaryConstraint.<init>(Variable, Variable, Strength$Sym, Planner):void (21 bytes)   not inlining too large previous low-level graph (low-level-nodes: 415, relevance=1.000000, probability=0.999984, bonus=1.000000, nodes=17)
                            @ 5  deltablue.Variable.addConstraint(AbstractConstraint):void (9 bytes)   inline method (bytecode parsing)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 13  deltablue.Variable.addConstraint(AbstractConstraint):void (9 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                              @ 1  deltablue.BinaryConstraint.addToGraph():void (22 bytes)   not inlining too large previous low-level graph (low-level-nodes: 638, relevance=1.000000, probability=0.999984, bonus=1.000000, nodes=25)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                                @ 1  deltablue.Planner.newMark():int (15 bytes)   relevance-based (relevance=1.000000, probability=0.999984, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f2ce003d750.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                                            @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000001, bonus=1.000000, nodes=13 <= 300.000000)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000001, bonus=1.000000, nodes=24 <= 300.000000)
                                        @ 45  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000001, bonus=1.000000, nodes=30 <= 300.000000)
                                @ 8  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 713, relevance=1.000000, probability=0.999984, bonus=1.000000, nodes=72)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                            @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                          @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                        @ 101  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f2ce003d750.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                                            @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                                          @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                        @ 114  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                                @ 19  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 713, relevance=1.000000, probability=1.002814, bonus=1.000000, nodes=72)
                              @ 6  deltablue.Planner.incrementalAdd(AbstractConstraint):void (27 bytes)   relevance-based (relevance=1.000000, probability=0.999984, bonus=1.000000, nodes=28 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                              @ 6  deltablue.BinaryConstraint.<init>(Variable, Variable, Strength$Sym, Planner):void (21 bytes)   not inlining too large previous low-level graph (low-level-nodes: 415, relevance=1.000000, probability=61078.000033, bonus=1.000000, nodes=17)
                                            @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                            @ 5  deltablue.Variable.addConstraint(AbstractConstraint):void (9 bytes)   inline method (bytecode parsing)
                                          @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                            @ 13  deltablue.Variable.addConstraint(AbstractConstraint):void (9 bytes)   inline method (bytecode parsing)
                                        @ 184  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                              @ 1  deltablue.BinaryConstraint.addToGraph():void (22 bytes)   not inlining too large previous low-level graph (low-level-nodes: 638, relevance=1.000000, probability=61078.000033, bonus=1.000000, nodes=25)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                                @ 1  deltablue.Planner.newMark():int (15 bytes)   relevance-based (relevance=1.000000, probability=61078.000033, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                                            @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                          @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                        @ 218  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f2ce003d750.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                                @ 8  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 713, relevance=1.000000, probability=61078.000033, bonus=1.000000, nodes=72)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f2ce003d750.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                @ 19  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 713, relevance=1.000000, probability=61250.858766, bonus=1.000000, nodes=72)
                              @ 6  deltablue.Planner.incrementalAdd(AbstractConstraint):void (27 bytes)   relevance-based (relevance=1.000000, probability=61078.000033, bonus=1.000000, nodes=28 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 45  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 7  deltablue.Strength$Sym.customHash():int (5 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                                @ 1  som.Dictionary.hash(Dictionary$CustomHash):int (20 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                            @ 6  som.Dictionary.getBucketIdx(int):int (10 bytes)   inline method (bytecode parsing)
                                          @ 101  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                                @ 7  som.Dictionary.getBucket(int):Dictionary$Entry (11 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                                @ 18  som.IdentityDictionary$IdEntry.match(int, Object):boolean (22 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=13 <= 300.000000)
                              @ 4  som.Dictionary.at(Dictionary$CustomHash):Object (39 bytes)   relevance-based (relevance=1.000016, probability=1.000000, bonus=1.000000, nodes=28 <= 300.000000)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                            @ 5  deltablue.Variable.addConstraint(AbstractConstraint):void (9 bytes)   inline method (bytecode parsing)
                                          @ 114  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                  @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000128, probability=0.000128, bonus=1.000000, nodes=41 > 0.038411)
                                          @ 184  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                                @ 5  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=35 <= 300.000000)
                              @ 1  deltablue.UnaryConstraint.addToGraph():void (14 bytes)   relevance-based (relevance=1.000016, probability=1.000000, bonus=1.000000, nodes=47 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                @ 1  deltablue.Planner.newMark():int (15 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=10 <= 300.000000)
                                          @ 218  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f2ce003d750.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                @ 8  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 713, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=72)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f2ce003d750.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                            @ 45  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                                @ 19  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 713, relevance=1.000000, probability=1.002830, bonus=1.000000, nodes=72)
                              @ 6  deltablue.Planner.incrementalAdd(AbstractConstraint):void (27 bytes)   relevance-based (relevance=1.000016, probability=1.000000, bonus=1.000000, nodes=28 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 101  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                                  @ 7  deltablue.Strength$Sym.customHash():int (5 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                                @ 1  som.Dictionary.hash(Dictionary$CustomHash):int (20 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                            @ 6  som.Dictionary.getBucketIdx(int):int (10 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                                @ 7  som.Dictionary.getBucket(int):Dictionary$Entry (11 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                @ 18  som.IdentityDictionary$IdEntry.match(int, Object):boolean (22 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 114  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                              @ 4  som.Dictionary.at(Dictionary$CustomHash):Object (39 bytes)   relevance-based (relevance=1.000016, probability=1.000000, bonus=1.000000, nodes=28 <= 300.000000)
                            @ 5  deltablue.Variable.addConstraint(AbstractConstraint):void (9 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 184  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                                  @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000128, probability=0.000128, bonus=1.000000, nodes=41 > 0.038411)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                                @ 5  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=35 <= 300.000000)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                              @ 1  deltablue.UnaryConstraint.addToGraph():void (14 bytes)   relevance-based (relevance=1.000016, probability=1.000000, bonus=1.000000, nodes=47 <= 300.000000)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 218  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                                          @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining it exceeds the maximum recursive inlining depth
                                          @ 269  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining it exceeds the maximum recursive inlining depth
                                          @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=202 <= 300.000000)
                                @ 1  deltablue.Planner.newMark():int (15 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                        @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=387 > 300.000000)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f2ce003d750.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                                @ 8  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 713, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=72)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f2ce003d750.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                @ 19  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 713, relevance=1.000000, probability=1.002830, bonus=1.000000, nodes=72)
                                          @ 45  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                              @ 6  deltablue.Planner.incrementalAdd(AbstractConstraint):void (27 bytes)   relevance-based (relevance=1.000016, probability=1.000000, bonus=1.000000, nodes=28 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 101  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                                  @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000128, probability=0.000128, bonus=1.000000, nodes=41 > 0.038411)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                                @ 11  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=35 <= 300.000000)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                              @ 96  som.Vector.with(Object):Vector (16 bytes)   relevance-based (relevance=1.000016, probability=1.000000, bonus=1.000000, nodes=40 <= 300.000000)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                            @ 4  som.Vector.<init>():void (7 bytes)   inline method (bytecode parsing)
                              @ 3  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                                          @ 114  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 10  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                                @ 16  deltablue.Planner$$Lambda/0x00007f2ce003e228.<init>(Vector):void (10 bytes)   inline method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 184  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                                    @ 1  deltablue.AbstractConstraint.isInput():boolean (2 bytes)   not inlining no type profile exists
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                                    @ 8  deltablue.AbstractConstraint.isSatisfied():boolean (0 bytes)   not inlining no type profile exists
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 218  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                                        @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000128, probability=0.000253, bonus=1.000000, nodes=41 > 0.038411)
                                      @ 16  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=1.980139, bonus=1.000000, nodes=35 <= 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                                    @ 8  deltablue.Planner.lambda$extractPlanFromConstraints$1(Vector, AbstractConstraint):void (20 bytes)   relevance-based (relevance=1.000000, probability=7.920556, bonus=1.000000, nodes=59 <= 300.000000)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                                  @ 20  deltablue.Planner$$Lambda/0x00007f2ce003e228.apply(Object):void (12 bytes)   relevance-based (relevance=1.000000, probability=7.920556, bonus=1.000000, nodes=64 <= 300.000000)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                                @ 15  som.Vector.forEach(ForEachInterface):void (32 bytes)   not inlining callee invoke probability is too high (invokeP=11.881088, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=77)
                            @ 9  deltablue.Plan.<init>():void (7 bytes)   inline method (bytecode parsing)
                              @ 3  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 39  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 67  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 1  deltablue.Planner.newMark():int (15 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                  @ 18  som.Vector.isEmpty():boolean (17 bytes)   relevance-based (relevance=1.000025, probability=39806.925926, bonus=1.000000, nodes=10 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 45  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                                    @ 1  som.Vector.isEmpty():boolean (17 bytes)   relevance-based (relevance=1.000000, probability=39805.925926, bonus=1.000000, nodes=10 <= 300.000000)
                                  @ 26  som.Vector.removeFirst():Object (31 bytes)   relevance-based (relevance=1.000000, probability=39805.925926, bonus=1.000000, nodes=18 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                  @ 36  deltablue.BinaryConstraint.getOutput():Variable (22 bytes)   relevance-based (relevance=1.000000, probability=39805.925926, bonus=1.000000, nodes=22 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 101  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 2  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f2ce003e8b8.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 114  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 9  deltablue.Variable.getStay():boolean (5 bytes)   inline accessor method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                                        @ 8  deltablue.AbstractConstraint.lambda$inputsKnown$0(int, Variable):boolean (28 bytes)   not inlining relevance-based (relevance=0.000006, probability=0.249017, bonus=1.000000, nodes=21 > 0.001877)
                                      @ 26  deltablue.AbstractConstraint$$Lambda/0x00007f2ce003e8b8.test(Object):boolean (12 bytes)   trivial (relevance=0.000006, probability=0.249017, bonus=1.000000, nodes=9)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 1  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 9  deltablue.Variable.getStay():boolean (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                        @ 8  deltablue.AbstractConstraint.lambda$inputsKnown$0(int, Variable):boolean (28 bytes)   relevance-based (relevance=1.000000, probability=39804.598234, bonus=1.000000, nodes=21 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                      @ 15  deltablue.AbstractConstraint$$Lambda/0x00007f2ce003e8b8.test(Object):boolean (12 bytes)   relevance-based (relevance=1.000000, probability=39804.598234, bonus=1.000000, nodes=23 <= 300.000000)
                                            @ 184  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                                    @ 7  deltablue.BinaryConstraint.inputsHasOne(TestInterface):boolean (32 bytes)   relevance-based (relevance=1.000000, probability=39805.925926, bonus=1.000000, nodes=42 <= 300.000000)
                                  @ 49  deltablue.AbstractConstraint.inputsKnown(int):boolean (19 bytes)   relevance-based (relevance=1.248568, probability=39805.925926, bonus=1.000000, nodes=59 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 218  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                                    @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000128, probability=5.095949, bonus=1.000000, nodes=41 > 0.038411)
                                  @ 58  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.248568, probability=39805.925926, bonus=1.000000, nodes=35 <= 300.000000)
                                          @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining it exceeds the maximum recursive inlining depth
                                          @ 269  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining it exceeds the maximum recursive inlining depth
                                          @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=202 <= 300.000000)
                                  @ 63  deltablue.BinaryConstraint.getOutput():Variable (22 bytes)   relevance-based (relevance=1.248568, probability=39805.925926, bonus=1.000000, nodes=22 <= 300.000000)
                                  @ 73  deltablue.BinaryConstraint.getOutput():Variable (22 bytes)   relevance-based (relevance=1.248568, probability=39805.925926, bonus=1.000000, nodes=22 <= 300.000000)
                                        @ 269  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=387 > 300.000000)
                                      @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   relevance-based (relevance=1.000000, probability=0.000002, bonus=1.000000, nodes=202 <= 300.000000)
                            @ 1  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 6  deltablue.Variable.getConstraints():Vector (5 bytes)   inline accessor method (bytecode parsing)
                            @ 11  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object, Object):Object (10 bytes)   inline method (bytecode parsing)
                              @ 6  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object, Object):Object (24 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                    @ 269  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.000122, bonus=1.000000, nodes=387 > 300.000000)
                                  @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   relevance-based (relevance=1.000000, probability=0.007813, bonus=1.000000, nodes=202 <= 300.000000)
                                    @ 19  deltablue.Planner$$Lambda/0x00007f2ce003d968.<init>(AbstractConstraint, Vector):void (15 bytes)   relevance-based (relevance=1.000000, probability=39805.925926, bonus=1.000000, nodes=11 <= 300.000000)
                                      @ 20  deltablue.Planner$$Lambda/0x00007f2ce003d968.apply(Object):void (16 bytes)   not inlining too large previous low-level graph (low-level-nodes: 372, relevance=1.000000, probability=315285.071322, bonus=1.000000, nodes=16)
                                    @ 16  som.Vector.forEach(ForEachInterface):void (32 bytes)   not inlining callee invoke probability is too high (invokeP=7.920556, relevance=1.000000, probability=39805.925926, bonus=1.000000, nodes=24)
                                  @ 78  deltablue.Planner.addConstraintsConsumingTo(Variable, Vector):void (20 bytes)   relevance-based (relevance=1.248568, probability=39805.925926, bonus=1.000000, nodes=23 <= 300.000000)
                                @ 20  deltablue.Planner.makePlan(Vector):Plan (86 bytes)   not inlining callee invoke probability is too high (invokeP=39811.270891, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=230)
                                @ 19  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=387 > 300.000000)
                              @ 104  deltablue.Planner.extractPlanFromConstraints(Vector):Plan (24 bytes)   relevance-based (relevance=1.000016, probability=1.000000, bonus=1.000000, nodes=27 <= 300.000000)
                              @ 81  som.Vector.sort(Comparator):void (23 bytes)   relevance-based (relevance=1.000028, probability=1.000000, bonus=1.000000, nodes=22 <= 300.000000)
                                @ 1  deltablue.UnaryConstraint.isSatisfied():boolean (5 bytes)   trivial (relevance=2.000000, probability=1.000000, bonus=1.000000, nodes=5)
                            @ 21  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.Planner$$Lambda/0x00007f2ce01f68f0.<init>(Planner):void (10 bytes)   inline method (bytecode parsing)
                                  @ 1  deltablue.UnaryConstraint.getOutput():Variable (5 bytes)   trivial (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=5)
                                  @ 6  deltablue.UnaryConstraint.markUnsatisfied():void (6 bytes)   trivial (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=7)
                            @ 1  som.Vector.capacity():int (6 bytes)   inline method (bytecode parsing)
                            @ 31  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object, Object, Object, Object):Object (13 bytes)   inline method (bytecode parsing)
                              @ 9  java.lang.invoke.LambdaForm$DMH/0x00007f2ce0123400.newInvokeSpecial(Object, Object, Object, Object, Object):Object (30 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 7  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                        @ 24  som.Vector$$Lambda/0x00007f2ce003fc10.<init>(Object, boolean[], Object[], int[]):void (26 bytes)   relevance-based (relevance=1.000000, probability=0.250000, bonus=1.000000, nodes=17 <= 300.000000)
                                            @ 17  som.Vector.lambda$remove$0(Object, boolean[], Object[], int[], Object):void (28 bytes)   relevance-based (relevance=1.000000, probability=1.980139, bonus=1.000000, nodes=26 <= 300.000000)
                                          @ 20  som.Vector$$Lambda/0x00007f2ce003fc10.apply(Object):void (21 bytes)   relevance-based (relevance=1.000000, probability=1.980139, bonus=1.000000, nodes=28 <= 300.000000)
                                        @ 36  som.Vector.forEach(ForEachInterface):void (32 bytes)   relevance-based (relevance=1.000000, probability=0.250000, bonus=1.000000, nodes=41 <= 300.000000)
                                      @ 5  som.Vector.remove(Object):boolean (61 bytes)   relevance-based (relevance=2.000000, probability=0.250000, bonus=1.000000, nodes=73 <= 300.000000)
                                    @ 12  deltablue.Variable.removeConstraint(AbstractConstraint):void (23 bytes)   relevance-based (relevance=1.000000, probability=0.250000, bonus=1.000000, nodes=90 <= 300.000000)
                                  @ 10  deltablue.UnaryConstraint.removeFromGraph():void (21 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=100 <= 300.000000)
                            @ 4  som.Vector.<init>():void (7 bytes)   inline method (bytecode parsing)
                              @ 3  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 10  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 14  deltablue.Strength.absoluteWeakest():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 17  deltablue.Variable.setWalkStrength(Strength):void (6 bytes)   inline method (bytecode parsing)
                            @ 22  deltablue.Variable.setStay(boolean):void (6 bytes)   inline method (bytecode parsing)
                            @ 48  deltablue.Variable.getConstraints():Vector (5 bytes)   inline accessor method (bytecode parsing)
                            @ 52  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.Planner$$Lambda/0x00007f2ce01f6000.<init>(Vector):void (10 bytes)   inline method (bytecode parsing)
                            @ 64  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.Planner$$Lambda/0x00007f2ce01f6220.<init>(Vector):void (10 bytes)   inline method (bytecode parsing)
                            @ 76  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object):Object (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.lang.invoke.LambdaForm$MH/0x00007f2ce0000800.invoke(Object):Object (8 bytes)   inline method (bytecode parsing)
                            @ 5  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                        @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000128, probability=0.000064, bonus=1.000000, nodes=41 > 0.038411)
                                      @ 11  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=35 <= 300.000000)
                                    @ 26  som.Vector.with(Object):Vector (16 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=40 <= 300.000000)
                                    @ 31  som.Vector.isEmpty():boolean (17 bytes)   relevance-based (relevance=1.000028, probability=18001.200000, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 1  som.Vector.size():int (10 bytes)   inline method (bytecode parsing)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                            @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.125000, bonus=1.000000, nodes=13 <= 300.000000)
                                          @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.125000, bonus=1.000000, nodes=24 <= 300.000000)
                                        @ 45  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.125000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                            @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.031250, bonus=1.000000, nodes=13 <= 300.000000)
                                          @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.031250, bonus=1.000000, nodes=24 <= 300.000000)
                                        @ 101  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.031250, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                            @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.031250, bonus=1.000000, nodes=13 <= 300.000000)
                                          @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.031250, bonus=1.000000, nodes=24 <= 300.000000)
                                        @ 114  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.031250, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                            @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.005208, bonus=1.000000, nodes=13 <= 300.000000)
                                          @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.005208, bonus=1.000000, nodes=24 <= 300.000000)
                                        @ 184  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.005208, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                            @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.005208, bonus=1.000000, nodes=13 <= 300.000000)
                                          @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.005208, bonus=1.000000, nodes=24 <= 300.000000)
                                        @ 218  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.005208, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.001953, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.001953, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 45  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.001953, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000488, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000488, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 101  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000488, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000488, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000488, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 114  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000488, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000081, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000081, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 184  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000081, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000081, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000081, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 218  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000081, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000031, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000031, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 45  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000031, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000008, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000008, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 101  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000008, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000008, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000008, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 114  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000008, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000001, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000001, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 184  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000001, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 1  java.util.Objects.requireNonNull(Object):Object (14 bytes)   inline method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000001, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000001, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 218  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000001, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.Planner.lambda$chainTest$7(int):Variable (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 15  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 27  deltablue.Strength.absoluteWeakest():Strength (4 bytes)   inline method (bytecode parsing)
                                @ 4  deltablue.Variable.<init>():void (44 bytes)   not inlining too large previous low-level graph (low-level-nodes: 379, relevance=1.000000, probability=0.999983, bonus=1.000000, nodes=27)
                              @ 17  deltablue.Planner$$Lambda/0x00007f2ce0031e88.apply(int):Object (5 bytes)   trivial (relevance=1.000000, probability=0.999983, bonus=1.000000, nodes=9)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 1  deltablue.Planner.lambda$chainTest$7(int):Variable (8 bytes)   inline method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 15  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                                                  @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                            @ 27  deltablue.Strength.absoluteWeakest():Strength (4 bytes)   inline method (bytecode parsing)
                                                @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                @ 4  deltablue.Variable.<init>():void (44 bytes)   not inlining too large previous low-level graph (low-level-nodes: 379, relevance=1.000000, probability=57719.000035, bonus=1.000000, nodes=27)
                                              @ 45  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                              @ 17  deltablue.Planner$$Lambda/0x00007f2ce0031e88.apply(int):Object (5 bytes)   trivial (relevance=1.000000, probability=57719.000035, bonus=1.000000, nodes=9)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                  @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                              @ 101  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                  @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                              @ 114  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                  @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                              @ 184  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                  @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                              @ 218  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                    @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                  @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                @ 45  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                    @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                  @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                @ 101  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                    @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                  @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                @ 114  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                    @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                  @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                @ 184  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                    @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                  @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                @ 218  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                      @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                    @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                  @ 45  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                      @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                    @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                  @ 101  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                      @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                    @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                  @ 114  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                      @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                    @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                  @ 184  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                      @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                    @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                  @ 218  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                                                @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining it exceeds the maximum recursive inlining depth
                                                @ 269  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining it exceeds the maximum recursive inlining depth
                                                @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=202 <= 300.000000)
                                              @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=387 > 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                    @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                  @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                @ 45  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                    @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                  @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                @ 101  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                    @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                  @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                @ 114  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                 n            @ 9  java.lang.Object.hashCode():int (0 bytes)   not inlining no methods remaining after filtering less frequent methods (6 methods previously)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                              @ 2  java.util.HashMap.hash(Object):int (20 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=12 <= 300.000000)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                    @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                  @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                @ 184  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                    @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                  @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                @ 218  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                              @ 9  java.util.HashMap.putVal(int, Object, Object, boolean, boolean):Object (300 bytes)   not inlining too large previous low-level graph (low-level-nodes: 1159, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=166)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                      @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                    @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                  @ 45  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                              @ 2  java.nio.Buffer.position(int):Buffer (52 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=16 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                      @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                    @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                  @ 101  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                      @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                    @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                  @ 114  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                      @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                                                    @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                              @ 2  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=8)
                                                  @ 184  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                              @ 9  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                              @ 23  java.lang.StringConcatHelper.checkOverflow(long):long (17 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=8)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                      @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                    @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                  @ 218  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                                                @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining it exceeds the maximum recursive inlining depth
                                                @ 269  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining it exceeds the maximum recursive inlining depth
                                                @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=202 <= 300.000000)
                                              @ 269  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=387 > 300.000000)
                                            @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   relevance-based (relevance=1.000000, probability=0.000001, bonus=1.000000, nodes=202 <= 300.000000)
                                          @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.000061, bonus=1.000000, nodes=387 > 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000031, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000031, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 45  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000031, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000008, bonus=1.000000, nodes=13 <= 300.000000)
                              @ 57  jdk.internal.math.MathUtils.flog10pow2(int):int (11 bytes)   relevance-based (relevance=1.000000, probability=0.928549, bonus=1.000000, nodes=10 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000008, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 101  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000008, bonus=1.000000, nodes=30 <= 300.000000)
                              @ 72  jdk.internal.math.MathUtils.flog10threeQuartersPow2(int):int (15 bytes)   relevance-based (relevance=0.076949, probability=0.071451, bonus=1.000000, nodes=12 <= 23.084792)
                              @ 81  jdk.internal.math.MathUtils.flog2pow10(int):int (11 bytes)   relevance-based (relevance=1.076949, probability=1.000000, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                              @ 91  jdk.internal.math.MathUtils.g1(int):long (12 bytes)   relevance-based (relevance=1.076949, probability=1.000000, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                              @ 98  jdk.internal.math.MathUtils.g0(int):long (14 bytes)   relevance-based (relevance=1.076949, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000008, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000008, bonus=1.000000, nodes=24 <= 300.000000)
                              @ 112  jdk.internal.math.DoubleToDecimal.rop(long, long, long):long (58 bytes)   relevance-based (relevance=1.076949, probability=1.000000, bonus=1.000000, nodes=20 <= 300.000000)
                                            @ 114  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000008, bonus=1.000000, nodes=30 <= 300.000000)
                              @ 126  jdk.internal.math.DoubleToDecimal.rop(long, long, long):long (58 bytes)   relevance-based (relevance=1.076949, probability=1.000000, bonus=1.000000, nodes=20 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                              @ 140  jdk.internal.math.DoubleToDecimal.rop(long, long, long):long (58 bytes)   relevance-based (relevance=1.076949, probability=1.000000, bonus=1.000000, nodes=20 <= 300.000000)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 15  jdk.internal.math.MathUtils.pow10(int):long (6 bytes)   inline method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000001, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000001, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 184  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000001, bonus=1.000000, nodes=30 <= 300.000000)
                                @ 7  jdk.internal.math.MathUtils.flog10pow2(int):int (11 bytes)   relevance-based (relevance=0.384617, probability=0.342300, bonus=1.000000, nodes=10 <= 115.385071)
                                @ 36  jdk.internal.math.FormattedFPDecimal.set(long, int, int):void (17 bytes)   relevance-based (relevance=0.384617, probability=0.342300, bonus=1.000000, nodes=13 <= 115.385071)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                              @ 248  jdk.internal.math.DoubleToDecimal.toChars(long, int, FormattedFPDecimal):int (161 bytes)   relevance-based (relevance=0.368639, probability=0.342300, bonus=1.000000, nodes=41 <= 110.591788)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 15  jdk.internal.math.MathUtils.pow10(int):long (6 bytes)   inline method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000001, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000001, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 218  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000001, bonus=1.000000, nodes=30 <= 300.000000)
                                @ 7  jdk.internal.math.MathUtils.flog10pow2(int):int (11 bytes)   relevance-based (relevance=0.265972, probability=0.236709, bonus=1.000000, nodes=10 <= 79.791710)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                                @ 36  jdk.internal.math.FormattedFPDecimal.set(long, int, int):void (17 bytes)   relevance-based (relevance=0.265972, probability=0.236709, bonus=1.000000, nodes=13 <= 79.791710)
                              @ 327  jdk.internal.math.DoubleToDecimal.toChars(long, int, FormattedFPDecimal):int (161 bytes)   relevance-based (relevance=0.254923, probability=0.236709, bonus=1.000000, nodes=41 <= 76.477033)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 15  jdk.internal.math.MathUtils.pow10(int):long (6 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                                @ 7  jdk.internal.math.MathUtils.flog10pow2(int):int (11 bytes)   relevance-based (relevance=0.473037, probability=0.420992, bonus=1.000000, nodes=10 <= 141.911192)
                                @ 36  jdk.internal.math.FormattedFPDecimal.set(long, int, int):void (17 bytes)   relevance-based (relevance=0.473037, probability=0.420992, bonus=1.000000, nodes=13 <= 141.911192)
                              @ 381  jdk.internal.math.DoubleToDecimal.toChars(long, int, FormattedFPDecimal):int (161 bytes)   relevance-based (relevance=0.453387, probability=0.420992, bonus=1.000000, nodes=41 <= 136.015971)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                  @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                              @ 45  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                  @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                              @ 101  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                  @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                              @ 114  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                  @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                              @ 184  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                  @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                              @ 218  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                    @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                  @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                @ 45  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                    @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                  @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                @ 101  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                    @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                  @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                @ 114  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                    @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                  @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                @ 184  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                    @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                  @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                @ 218  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                      @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                    @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                  @ 45  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                      @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                    @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                  @ 101  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                      @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                    @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                  @ 114  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                      @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                    @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                  @ 184  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                      @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                    @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                  @ 218  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                                                @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining it exceeds the maximum recursive inlining depth
                                                @ 269  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining it exceeds the maximum recursive inlining depth
                                                @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=202 <= 300.000000)
                                              @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=387 > 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                    @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                  @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                @ 45  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                    @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                  @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                @ 101  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                    @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                  @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                @ 114  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                    @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                  @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                @ 184  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                    @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                  @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                @ 218  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 12  deltablue.AbstractConstraint.addConstraint(Planner):void (10 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                      @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                    @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                  @ 45  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                                      @ 7  deltablue.Strength$Sym.customHash():int (5 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                    @ 1  som.Dictionary.hash(Dictionary$CustomHash):int (20 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=12 <= 300.000000)
                                                      @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                            @ 6  som.Dictionary.getBucketIdx(int):int (10 bytes)   inline method (bytecode parsing)
                                                    @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                  @ 101  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                                    @ 7  som.Dictionary.getBucket(int):Dictionary$Entry (11 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                                    @ 18  som.IdentityDictionary$IdEntry.match(int, Object):boolean (22 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=13 <= 300.000000)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 4  som.Dictionary.at(Dictionary$CustomHash):Object (39 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=35 <= 300.000000)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                @ 6  deltablue.Strength.of(Strength$Sym):Strength (11 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=38 <= 300.000000)
                                                      @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                    @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                              @ 2  deltablue.AbstractConstraint.<init>(Strength$Sym):void (13 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=42 <= 300.000000)
                                                  @ 114  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 5  deltablue.Variable.addConstraint(AbstractConstraint):void (9 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                      @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                    @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                  @ 184  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                                  @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000128, probability=0.000128, bonus=1.000000, nodes=41 > 0.038411)
                                @ 5  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=35 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                              @ 1  deltablue.UnaryConstraint.addToGraph():void (14 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=47 <= 300.000000)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                      @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                    @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                  @ 218  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                                @ 1  deltablue.Planner.newMark():int (15 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=10 <= 300.000000)
                                                @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining it exceeds the maximum recursive inlining depth
                                                @ 269  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining it exceeds the maximum recursive inlining depth
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                                                @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=202 <= 300.000000)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f2ce003d750.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                                              @ 269  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=387 > 300.000000)
                                            @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   relevance-based (relevance=1.000000, probability=0.000001, bonus=1.000000, nodes=202 <= 300.000000)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                @ 8  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 713, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=72)
                                          @ 269  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.000061, bonus=1.000000, nodes=387 > 300.000000)
                                        @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   relevance-based (relevance=1.000000, probability=0.003906, bonus=1.000000, nodes=202 <= 300.000000)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f2ce003d750.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                                      @ 19  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.250000, bonus=1.000000, nodes=387 > 300.000000)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                                    @ 81  som.Vector.sort(Comparator):void (23 bytes)   relevance-based (relevance=1.000128, probability=0.500000, bonus=1.000000, nodes=22 <= 300.000000)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                @ 19  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 713, relevance=1.000000, probability=1.002830, bonus=1.000000, nodes=72)
                                      @ 1  som.Vector.isEmpty():boolean (17 bytes)   relevance-based (relevance=1.000000, probability=18000.700000, bonus=1.000000, nodes=10 <= 300.000000)
                              @ 6  deltablue.Planner.incrementalAdd(AbstractConstraint):void (27 bytes)   relevance-based (relevance=1.000128, probability=1.000000, bonus=1.000000, nodes=28 <= 300.000000)
                                    @ 38  som.Vector.removeFirst():Object (31 bytes)   relevance-based (relevance=1.000000, probability=18000.700000, bonus=1.000000, nodes=18 <= 300.000000)
                                          @ 1  deltablue.BinaryConstraint.isSatisfied():boolean (13 bytes)   relevance-based (relevance=1.000009, probability=142575.555054, bonus=1.000000, nodes=14 <= 300.000000)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                          @ 9  som.Vector.append(Object):void (51 bytes)   not inlining relevance-based (relevance=0.000009, probability=1.288370, bonus=1.000000, nodes=35 > 0.002711)
                                        @ 8  deltablue.Planner.lambda$removePropagateFrom$4(Vector, AbstractConstraint):void (13 bytes)   relevance-based (relevance=1.000000, probability=142575.555054, bonus=1.000000, nodes=36 <= 300.000000)
                                      @ 20  deltablue.Planner$$Lambda/0x00007f2ce01f6000.apply(Object):void (12 bytes)   relevance-based (relevance=1.000000, probability=142575.555054, bonus=1.000000, nodes=43 <= 300.000000)
                                    @ 57  som.Vector.forEach(ForEachInterface):void (32 bytes)   relevance-based (relevance=1.000000, probability=18000.700000, bonus=1.000000, nodes=56 <= 300.000000)
                            @ 1  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 6  deltablue.Variable.getConstraints():Vector (5 bytes)   inline accessor method (bytecode parsing)
                            @ 11  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object, Object):Object (10 bytes)   inline method (bytecode parsing)
                              @ 6  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object, Object):Object (24 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                      @ 19  deltablue.Planner$$Lambda/0x00007f2ce01f6440.<init>(AbstractConstraint, ForEachInterface):void (15 bytes)   relevance-based (relevance=1.000000, probability=18000.700000, bonus=1.000000, nodes=11 <= 300.000000)
                                          @ 12  deltablue.Planner.lambda$constraintsConsuming$3(AbstractConstraint, ForEachInterface, AbstractConstraint):void (20 bytes)   not inlining too large previous low-level graph (low-level-nodes: 391, relevance=1.000000, probability=142575.555054, bonus=1.000000, nodes=26)
                                        @ 20  deltablue.Planner$$Lambda/0x00007f2ce01f6440.apply(Object):void (16 bytes)   relevance-based (relevance=1.000000, probability=142575.555054, bonus=1.000000, nodes=16 <= 300.000000)
                                      @ 16  som.Vector.forEach(ForEachInterface):void (32 bytes)   not inlining callee invoke probability is too high (invokeP=7.920556, relevance=1.000000, probability=18000.700000, bonus=1.000000, nodes=33)
                                    @ 69  deltablue.Planner.constraintsConsuming(Variable, ForEachInterface):void (20 bytes)   relevance-based (relevance=1.000000, probability=18000.700000, bonus=1.000000, nodes=23 <= 300.000000)
                                  @ 15  deltablue.Planner.removePropagateFrom(Variable):Vector (86 bytes)   not inlining callee invoke probability is too high (invokeP=36004.476868, relevance=2.000000, probability=0.500000, bonus=1.000000, nodes=202)
                            @ 8  deltablue.Planner.lambda$incrementalRemove$0(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                                        @ 1  deltablue.Planner.newMark():int (15 bytes)   relevance-based (relevance=1.000000, probability=3.960278, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f2ce003d750.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                        @ 8  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 713, relevance=1.000000, probability=3.960278, bonus=1.000000, nodes=72)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f2ce003d750.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                        @ 19  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 713, relevance=1.000000, probability=3.971486, bonus=1.000000, nodes=72)
                                      @ 2  deltablue.Planner.incrementalAdd(AbstractConstraint):void (27 bytes)   relevance-based (relevance=1.000000, probability=3.960278, bonus=1.000000, nodes=28 <= 300.000000)
                                    @ 20  deltablue.Planner$$Lambda/0x00007f2ce01f68f0.apply(Object):void (12 bytes)   relevance-based (relevance=1.000000, probability=3.960278, bonus=1.000000, nodes=37 <= 300.000000)
                                  @ 26  som.Vector.forEach(ForEachInterface):void (32 bytes)   not inlining callee invoke probability is too high (invokeP=15.863529, relevance=2.000000, probability=0.500000, bonus=1.000000, nodes=53)
                                @ 9  deltablue.Planner.incrementalRemove(AbstractConstraint):void (30 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=121 <= 300.000000)
                            @ 1  som.Vector.capacity():int (6 bytes)   inline method (bytecode parsing)
                            @ 31  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object, Object, Object, Object):Object (13 bytes)   inline method (bytecode parsing)
                              @ 9  java.lang.invoke.LambdaForm$DMH/0x00007f2ce0123400.newInvokeSpecial(Object, Object, Object, Object, Object):Object (30 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 7  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                      @ 24  som.Vector$$Lambda/0x00007f2ce003fc10.<init>(Object, boolean[], Object[], int[]):void (26 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=17 <= 300.000000)
                                          @ 17  som.Vector.lambda$remove$0(Object, boolean[], Object[], int[], Object):void (28 bytes)   relevance-based (relevance=1.000000, probability=3.960278, bonus=1.000000, nodes=26 <= 300.000000)
                                        @ 20  som.Vector$$Lambda/0x00007f2ce003fc10.apply(Object):void (21 bytes)   relevance-based (relevance=1.000000, probability=3.960278, bonus=1.000000, nodes=28 <= 300.000000)
                                      @ 36  som.Vector.forEach(ForEachInterface):void (32 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=41 <= 300.000000)
                                    @ 5  som.Vector.remove(Object):boolean (61 bytes)   relevance-based (relevance=2.000000, probability=0.500000, bonus=1.000000, nodes=73 <= 300.000000)
                                  @ 12  deltablue.Variable.removeConstraint(AbstractConstraint):void (23 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=90 <= 300.000000)
                                @ 13  deltablue.UnaryConstraint.removeFromGraph():void (21 bytes)   relevance-based (relevance=4.000000, probability=1.000000, bonus=1.000000, nodes=100 <= 300.000000)
                              @ 161  deltablue.AbstractConstraint.destroyConstraint(Planner):void (17 bytes)   relevance-based (relevance=1.000016, probability=1.000000, bonus=1.000000, nodes=224 <= 300.000000)
                            @ 4  deltablue.Plan.lambda$execute$0(AbstractConstraint):void (5 bytes)   inline method (bytecode parsing)
                            @ 18  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 21  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 35  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 38  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 18  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 25  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 33  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 37  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 51  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 58  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 66  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 70  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 28  java.lang.String.<init>(byte[], byte):void (15 bytes)   inline method (bytecode parsing)
                                  @ 1  deltablue.EqualityConstraint.execute():void (42 bytes)   relevance-based (relevance=1.000000, probability=792.055615, bonus=1.000000, nodes=103 <= 300.000000)
                                @ 20  deltablue.Plan$$Lambda/0x00007f2ce003f1c8.apply(Object):void (8 bytes)   relevance-based (relevance=1.000000, probability=792.055615, bonus=1.000000, nodes=113 <= 300.000000)
                              @ 1  java.lang.Long.stringSize(long):int (55 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=34 <= 300.000000)
                              @ 6  som.Vector.forEach(ForEachInterface):void (32 bytes)   relevance-based (relevance=1.000000, probability=100.000000, bonus=1.000000, nodes=127 <= 300.000000)
                              @ 18  java.lang.Long.getChars(long, int, byte[]):int (195 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=64 <= 300.000000)
                              @ 54  java.lang.Object.equals(Object):boolean (11 bytes)   trivial (relevance=1.132027, probability=5.670535, bonus=1.000000, nodes=9)
                              @ 8  org.graalvm.word.LocationIdentity$AnyLocationIdentity.isImmutable():boolean (2 bytes)   relevance-based (relevance=2.416064, probability=0.988091, bonus=1.000000, nodes=14 <= 300.000000)
                              @ 15  jdk.graal.compiler.nodes.FieldLocationIdentity.isImmutable():boolean (5 bytes)   relevance-based (relevance=2.036273, probability=0.983187, bonus=1.000000, nodes=10 <= 300.000000)
                              @ 24  org.graalvm.word.LocationIdentity.isAny():boolean (13 bytes)   trivial (relevance=1.601806, probability=0.773410, bonus=1.000000, nodes=9)
                              @ 31  org.graalvm.word.LocationIdentity.isAny():boolean (13 bytes)   trivial (relevance=1.601806, probability=0.773410, bonus=1.000000, nodes=9)
                            @ 31  jdk.vm.ci.meta.ModifiersProvider.isStatic():boolean (10 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.vm.ci.hotspot.HotSpotResolvedJavaFieldImpl.getModifiers():int (9 bytes)   inline method (bytecode parsing)
                            @ 35  jdk.vm.ci.meta.ModifiersProvider.isStatic():boolean (10 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.vm.ci.hotspot.HotSpotResolvedJavaFieldImpl.getModifiers():int (9 bytes)   inline method (bytecode parsing)
                                  @ 4  jdk.vm.ci.hotspot.HotSpotModifiers.jvmFieldModifiers():int (12 bytes)   trivial (relevance=2.000000, probability=0.011739, bonus=1.000000, nodes=4)
                                  @ 6  java.lang.reflect.Modifier.isStatic(int):boolean (13 bytes)   trivial (relevance=2.000000, probability=0.011739, bonus=1.000000, nodes=9)
                                  @ 4  jdk.vm.ci.hotspot.HotSpotModifiers.jvmFieldModifiers():int (12 bytes)   trivial (relevance=2.000000, probability=0.011739, bonus=1.000000, nodes=4)
                                  @ 6  java.lang.reflect.Modifier.isStatic(int):boolean (13 bytes)   trivial (relevance=2.000000, probability=0.011739, bonus=1.000000, nodes=9)
                            @ 1  jdk.vm.ci.hotspot.HotSpotResolvedObjectTypeImpl.getMetaspacePointer():long (5 bytes)   inline accessor method (bytecode parsing)
                            @ 17  java.lang.NullPointerException.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  java.lang.RuntimeException.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                                @ 2  java.lang.Exception.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                 n                      @ 25  java.lang.NullPointerException.getExtendedNPEMessage():String (0 bytes)   not inlining it is a non-intrinsic native method
                 n                        @ 16  java.lang.Throwable.fillInStackTrace(int):Throwable (0 bytes)   not inlining it is a non-intrinsic native method
              s                           @ 37  java.lang.Throwable.fillInStackTrace():Throwable (29 bytes)   relevance-based (relevance=4.000000, probability=0.000734, bonus=1.000000, nodes=34 <= 300.000000)
              s                         @ 24  java.lang.NullPointerException.fillInStackTrace():Throwable (41 bytes)   relevance-based (relevance=1.000000, probability=0.000734, bonus=1.000000, nodes=65 <= 300.000000)
                                      @ 2  java.lang.Throwable.<init>(String):void (34 bytes)   relevance-based (relevance=1.000000, probability=0.000734, bonus=1.000000, nodes=76 <= 300.000000)
                                    @ 22  jdk.vm.ci.hotspot.HotSpotResolvedObjectTypeImpl.getKlassPointer():long (23 bytes)   relevance-based (relevance=1.000000, probability=0.001467, bonus=1.000000, nodes=88 <= 300.000000)
                            @ 1  jdk.vm.ci.hotspot.HotSpotResolvedObjectTypeImpl.getMetaspacePointer():long (5 bytes)   inline accessor method (bytecode parsing)
                            @ 17  java.lang.NullPointerException.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  java.lang.RuntimeException.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                                @ 2  java.lang.Exception.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                 n                      @ 25  java.lang.NullPointerException.getExtendedNPEMessage():String (0 bytes)   not inlining it is a non-intrinsic native method
                 n                        @ 16  java.lang.Throwable.fillInStackTrace(int):Throwable (0 bytes)   not inlining it is a non-intrinsic native method
              s                           @ 37  java.lang.Throwable.fillInStackTrace():Throwable (29 bytes)   relevance-based (relevance=4.000000, probability=0.000367, bonus=1.000000, nodes=34 <= 300.000000)
              s                         @ 24  java.lang.NullPointerException.fillInStackTrace():Throwable (41 bytes)   relevance-based (relevance=1.000000, probability=0.000367, bonus=1.000000, nodes=65 <= 300.000000)
                                      @ 2  java.lang.Throwable.<init>(String):void (34 bytes)   relevance-based (relevance=1.000000, probability=0.000367, bonus=1.000000, nodes=76 <= 300.000000)
                                    @ 26  jdk.vm.ci.hotspot.HotSpotResolvedObjectTypeImpl.getKlassPointer():long (23 bytes)   relevance-based (relevance=4.000000, probability=0.000734, bonus=1.000000, nodes=88 <= 300.000000)
                                  @ 51  jdk.vm.ci.hotspot.HotSpotResolvedObjectTypeImpl.equals(Object):boolean (39 bytes)   relevance-based (relevance=1.000000, probability=0.005870, bonus=1.000000, nodes=182 <= 300.000000)
                                @ 27  jdk.vm.ci.hotspot.HotSpotResolvedJavaFieldImpl.equals(Object):boolean (61 bytes)   relevance-based (relevance=1.694019, probability=0.093913, bonus=1.000000, nodes=233 <= 300.000000)
                              @ 39  jdk.graal.compiler.nodes.FieldLocationIdentity.equals(Object):boolean (54 bytes)   not inlining relevance-based (relevance=0.847010, probability=0.408967, bonus=1.000000, nodes=271 > 254.102853)
                            @ 28  java.lang.String.<init>(byte[], byte):void (15 bytes)   inline method (bytecode parsing)
                              @ 21  java.lang.Long.toString(long):String (55 bytes)   not inlining too large previous low-level graph (low-level-nodes: 426, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=19)
                              @ 5  org.graalvm.collections.EconomicMapImpl$2.<init>(EconomicMapImpl):void (15 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                            @ 4  jdk.internal.math.FormattedFPDecimal.<init>():void (5 bytes)   inline method (bytecode parsing)
                                @ 5  jdk.internal.math.DoubleToDecimal.<init>(boolean):void (21 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=9)
                            @ 15  jdk.internal.math.MathUtils.pow10(int):long (6 bytes)   inline method (bytecode parsing)
                                    @ 7  jdk.internal.math.MathUtils.flog10pow2(int):int (11 bytes)   relevance-based (relevance=1.043342, probability=0.606286, bonus=1.000000, nodes=10 <= 300.000000)
                                    @ 36  jdk.internal.math.FormattedFPDecimal.set(long, int, int):void (17 bytes)   relevance-based (relevance=1.043342, probability=0.606286, bonus=1.000000, nodes=13 <= 300.000000)
                                  @ 123  jdk.internal.math.DoubleToDecimal.toChars(long, int, FormattedFPDecimal):int (161 bytes)   relevance-based (relevance=1.000000, probability=0.606286, bonus=1.000000, nodes=36 <= 300.000000)
                                    @ 57  jdk.internal.math.MathUtils.flog10pow2(int):int (11 bytes)   relevance-based (relevance=0.677534, probability=0.366351, bonus=1.000000, nodes=10 <= 203.260113)
                                    @ 72  jdk.internal.math.MathUtils.flog10threeQuartersPow2(int):int (15 bytes)   relevance-based (relevance=0.050606, probability=0.027363, bonus=1.000000, nodes=12 <= 15.181718)
                                    @ 81  jdk.internal.math.MathUtils.flog2pow10(int):int (11 bytes)   relevance-based (relevance=0.728139, probability=0.393714, bonus=1.000000, nodes=10 <= 218.441831)
                                    @ 91  jdk.internal.math.MathUtils.g1(int):long (12 bytes)   relevance-based (relevance=0.728139, probability=0.393714, bonus=1.000000, nodes=10 <= 218.441831)
                                    @ 98  jdk.internal.math.MathUtils.g0(int):long (14 bytes)   relevance-based (relevance=0.728139, probability=0.393714, bonus=1.000000, nodes=11 <= 218.441831)
                                    @ 112  jdk.internal.math.DoubleToDecimal.rop(long, long, long):long (58 bytes)   relevance-based (relevance=0.728139, probability=0.393714, bonus=1.000000, nodes=20 <= 218.441831)
                                    @ 126  jdk.internal.math.DoubleToDecimal.rop(long, long, long):long (58 bytes)   relevance-based (relevance=0.728139, probability=0.393714, bonus=1.000000, nodes=20 <= 218.441831)
                                    @ 140  jdk.internal.math.DoubleToDecimal.rop(long, long, long):long (58 bytes)   relevance-based (relevance=0.728139, probability=0.393714, bonus=1.000000, nodes=20 <= 218.441831)
                            @ 15  jdk.internal.math.MathUtils.pow10(int):long (6 bytes)   inline method (bytecode parsing)
                                      @ 7  jdk.internal.math.MathUtils.flog10pow2(int):int (11 bytes)   relevance-based (relevance=0.260459, probability=0.134983, bonus=1.000000, nodes=10 <= 78.137748)
                                      @ 36  jdk.internal.math.FormattedFPDecimal.set(long, int, int):void (17 bytes)   relevance-based (relevance=0.260459, probability=0.134983, bonus=1.000000, nodes=13 <= 78.137748)
                                    @ 248  jdk.internal.math.DoubleToDecimal.toChars(long, int, FormattedFPDecimal):int (161 bytes)   relevance-based (relevance=0.249639, probability=0.134983, bonus=1.000000, nodes=37 <= 74.891780)
                                  @ 135  jdk.internal.math.DoubleToDecimal.toDecimal(int, long, int, FormattedFPDecimal):int (385 bytes)   not inlining relevance-based (relevance=0.677534, probability=0.393714, bonus=1.000000, nodes=207 > 203.260113)
                                @ 10  jdk.internal.math.DoubleToDecimal.toDecimal(double, FormattedFPDecimal):int (220 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=82 <= 300.000000)
                              @ 12  jdk.internal.math.DoubleToDecimal.split(double, FormattedFPDecimal):void (15 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=92 <= 300.000000)
                              @ 56  jdk.internal.math.FormattedFPDecimal.plain(int):FormattedFPDecimal (22 bytes)   not inlining too large previous low-level graph (low-level-nodes: 598, relevance=1.720876, probability=1.000000, bonus=1.000000, nodes=17)
                            @ 8  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                            @ 32  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                            @ 9  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.001353, probability=0.000541, bonus=1.000000, nodes=41 > 0.405949)
                                @ 11  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.016238, probability=0.006491, bonus=1.000000, nodes=21 > 4.871393)
                              @ 1  java.util.AbstractCollection.size():int (0 bytes)   not inlining no type profile exists
                              @ 9  java.util.AbstractCollection.iterator():Iterator (0 bytes)   not inlining no type profile exists
                              @ 52  java.util.Iterator.hasNext():boolean (0 bytes)   not inlining no type profile exists
                            @ 32  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                            @ 62  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                            @ 9  deltablue.Plan.<init>():void (7 bytes)   inline method (bytecode parsing)
                                @ 62  java.util.AbstractCollection.finishToArray(Object[], Iterator):Object[] (66 bytes)   not inlining relevance-based (relevance=0.065223, probability=0.026071, bonus=1.000000, nodes=72 > 19.566763)
                              @ 3  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                              @ 22  java.util.Iterator.hasNext():boolean (0 bytes)   not inlining no type profile exists
                              @ 39  java.util.Iterator.next():Object (0 bytes)   not inlining no type profile exists
                            @ 39  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 67  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                                  @ 32  java.lang.Math.min(int, int):int (11 bytes)   trivial (relevance=0.065223, probability=0.026071, bonus=1.000000, nodes=7)
                                @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   relevance-based (relevance=0.065223, probability=0.026071, bonus=1.000000, nodes=17 <= 19.566763)
                              @ 4  java.util.Collection.toArray():Object[] (0 bytes)   not inlining no type profile exists
                                  @ 14  java.lang.Class.getComponentType():Class (14 bytes)   trivial (relevance=0.245010, probability=0.133204, bonus=1.000000, nodes=7)
                              @ 18  som.Vector.isEmpty():boolean (17 bytes)   relevance-based (relevance=1.000027, probability=1.000000, bonus=1.000000, nodes=10 <= 300.000000)
                                  @ 32  java.lang.Math.min(int, int):int (11 bytes)   trivial (relevance=1.245010, probability=0.676871, bonus=1.000000, nodes=7)
                                @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   relevance-based (relevance=1.000000, probability=0.676871, bonus=1.000000, nodes=40 <= 300.000000)
                              @ 1  java.util.ArrayList.toArray():Object[] (12 bytes)   not inlining callee invoke probability is too high (invokeP=7.000000, relevance=1.693350, probability=1.000000, bonus=1.000000, nodes=169)
                                @ 1  som.Vector.isEmpty():boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.999973, bonus=1.000000, nodes=10 <= 300.000000)
                              @ 26  som.Vector.removeFirst():Object (31 bytes)   relevance-based (relevance=1.000000, probability=0.999973, bonus=1.000000, nodes=18 <= 300.000000)
                            @ 49  java.lang.Math.max(int, int):int (11 bytes)   inline method (bytecode parsing)
                            @ 37  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                              @ 36  deltablue.BinaryConstraint.getOutput():Variable (22 bytes)   relevance-based (relevance=1.000000, probability=0.999973, bonus=1.000000, nodes=22 <= 300.000000)
                              @ 51  java.util.ArrayList.grow(int):Object[] (60 bytes)   not inlining too large previous low-level graph (low-level-nodes: 564, relevance=1.000000, probability=0.590545, bonus=1.000000, nodes=46)
                            @ 2  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f2ce003e8b8.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 9  deltablue.Variable.getStay():boolean (5 bytes)   inline accessor method (bytecode parsing)
                                    @ 8  deltablue.AbstractConstraint.lambda$inputsKnown$0(int, Variable):boolean (28 bytes)   not inlining relevance-based (relevance=0.000006, probability=0.000006, bonus=1.000000, nodes=21 > 0.001877)
                                  @ 26  deltablue.AbstractConstraint$$Lambda/0x00007f2ce003e8b8.test(Object):boolean (12 bytes)   trivial (relevance=0.000006, probability=0.000006, bonus=1.000000, nodes=9)
                            @ 1  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 9  deltablue.Variable.getStay():boolean (5 bytes)   inline accessor method (bytecode parsing)
                                    @ 8  deltablue.AbstractConstraint.lambda$inputsKnown$0(int, Variable):boolean (28 bytes)   relevance-based (relevance=1.000000, probability=0.999940, bonus=1.000000, nodes=21 <= 300.000000)
                                  @ 15  deltablue.AbstractConstraint$$Lambda/0x00007f2ce003e8b8.test(Object):boolean (12 bytes)   relevance-based (relevance=1.000000, probability=0.999940, bonus=1.000000, nodes=23 <= 300.000000)
                                @ 7  deltablue.BinaryConstraint.inputsHasOne(TestInterface):boolean (32 bytes)   relevance-based (relevance=1.000000, probability=0.999973, bonus=1.000000, nodes=42 <= 300.000000)
                              @ 49  deltablue.AbstractConstraint.inputsKnown(int):boolean (19 bytes)   relevance-based (relevance=1.248569, probability=0.999973, bonus=1.000000, nodes=59 <= 300.000000)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000128, probability=0.000128, bonus=1.000000, nodes=41 > 0.038411)
                              @ 58  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.248569, probability=0.999973, bonus=1.000000, nodes=35 <= 300.000000)
                              @ 63  deltablue.BinaryConstraint.getOutput():Variable (22 bytes)   relevance-based (relevance=1.248569, probability=0.999973, bonus=1.000000, nodes=22 <= 300.000000)
                              @ 73  deltablue.BinaryConstraint.getOutput():Variable (22 bytes)   relevance-based (relevance=1.248569, probability=0.999973, bonus=1.000000, nodes=22 <= 300.000000)
                            @ 1  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 6  deltablue.Variable.getConstraints():Vector (5 bytes)   inline accessor method (bytecode parsing)
                            @ 11  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object, Object):Object (10 bytes)   inline method (bytecode parsing)
                              @ 6  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object, Object):Object (24 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                            @ 4  java.lang.StringBuilder.<init>():void (7 bytes)   inline method (bytecode parsing)
                                @ 19  deltablue.Planner$$Lambda/0x00007f2ce003d968.<init>(AbstractConstraint, Vector):void (15 bytes)   relevance-based (relevance=1.000000, probability=0.999973, bonus=1.000000, nodes=11 <= 300.000000)
                                  @ 20  deltablue.Planner$$Lambda/0x00007f2ce003d968.apply(Object):void (16 bytes)   not inlining too large previous low-level graph (low-level-nodes: 372, relevance=1.000000, probability=7.920345, bonus=1.000000, nodes=16)
                                @ 16  som.Vector.forEach(ForEachInterface):void (32 bytes)   not inlining callee invoke probability is too high (invokeP=7.920556, relevance=1.000000, probability=0.999973, bonus=1.000000, nodes=24)
                              @ 78  deltablue.Planner.addConstraintsConsumingTo(Variable, Vector):void (20 bytes)   relevance-based (relevance=1.248569, probability=0.999973, bonus=1.000000, nodes=23 <= 300.000000)
                              @ 3  java.lang.AbstractStringBuilder.<init>(int):void (39 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                              @ 18  som.Vector.isEmpty():boolean (17 bytes)   relevance-based (relevance=1.000027, probability=37499.187527, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 28  java.lang.String.<init>(byte[], byte):void (15 bytes)   inline method (bytecode parsing)
                                @ 21  java.lang.Long.toString(long):String (55 bytes)   not inlining too large previous low-level graph (low-level-nodes: 426, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=19)
                              @ 34  java.lang.Long.toString(long, int):String (139 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=8)
                                @ 1  som.Vector.isEmpty():boolean (17 bytes)   relevance-based (relevance=1.000000, probability=37498.187553, bonus=1.000000, nodes=10 <= 300.000000)
                              @ 26  som.Vector.removeFirst():Object (31 bytes)   relevance-based (relevance=1.000000, probability=37498.187553, bonus=1.000000, nodes=18 <= 300.000000)
                            @ 10  java.util.Formatter$Flags.contains(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 32  java.util.Formatter$Flags.contains(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                              @ 44  java.util.Formatter$FormatSpecifier.leadingSign(StringBuilder, boolean):StringBuilder (80 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=13 <= 300.000000)
                              @ 36  deltablue.BinaryConstraint.getOutput():Variable (22 bytes)   relevance-based (relevance=1.000000, probability=37498.187553, bonus=1.000000, nodes=22 <= 300.000000)
                              @ 79  java.util.Formatter$FormatSpecifier.adjustWidth(int, int, boolean):int (29 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=9)
                            @ 13  java.lang.StringBuilder.length():int (5 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.AbstractStringBuilder.length():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 2  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                            @ 101  java.util.Formatter$Flags.contains(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                            @ 261  java.lang.StringBuilder.append(char):StringBuilder (8 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f2ce003e8b8.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 291  java.lang.StringBuilder.append(char):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 337  java.lang.StringBuilder.length():int (5 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.AbstractStringBuilder.length():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 1  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                              @ 84  java.util.Formatter$FormatSpecifier.localizedMagnitude(Formatter, StringBuilder, CharSequence, int, int, int, Locale):StringBuilder (381 bytes)   not inlining too large previous low-level graph (low-level-nodes: 434, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=94)
                            @ 9  deltablue.Variable.getStay():boolean (5 bytes)   inline accessor method (bytecode parsing)
                              @ 93  java.util.Formatter$FormatSpecifier.trailingSign(StringBuilder, boolean):StringBuilder (26 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=6)
                                    @ 8  deltablue.AbstractConstraint.lambda$inputsKnown$0(int, Variable):boolean (28 bytes)   not inlining relevance-based (relevance=0.000006, probability=0.234580, bonus=1.000000, nodes=21 > 0.001877)
                                  @ 26  deltablue.AbstractConstraint$$Lambda/0x00007f2ce003e8b8.test(Object):boolean (12 bytes)   trivial (relevance=0.000006, probability=0.234580, bonus=1.000000, nodes=9)
                            @ 1  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 2  java.lang.StringBuilder.append(CharSequence):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 9  deltablue.Variable.getStay():boolean (5 bytes)   inline accessor method (bytecode parsing)
                                    @ 8  deltablue.AbstractConstraint.lambda$inputsKnown$0(int, Variable):boolean (28 bytes)   relevance-based (relevance=1.000000, probability=37496.936834, bonus=1.000000, nodes=21 <= 300.000000)
                                  @ 15  deltablue.AbstractConstraint$$Lambda/0x00007f2ce003e8b8.test(Object):boolean (12 bytes)   relevance-based (relevance=1.000000, probability=37496.936834, bonus=1.000000, nodes=23 <= 300.000000)
                                @ 7  deltablue.BinaryConstraint.inputsHasOne(TestInterface):boolean (32 bytes)   relevance-based (relevance=1.000000, probability=37498.187553, bonus=1.000000, nodes=42 <= 300.000000)
                                  @ 2  java.lang.AbstractStringBuilder.append(CharSequence):AbstractStringBuilder (54 bytes)   not inlining too large previous low-level graph (low-level-nodes: 399, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=8)
                                @ 10  java.lang.StringBuilder.append(CharSequence):Appendable (6 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=9)
                              @ 49  deltablue.AbstractConstraint.inputsKnown(int):boolean (19 bytes)   relevance-based (relevance=1.248569, probability=37498.187553, bonus=1.000000, nodes=59 <= 300.000000)
                              @ 353  java.util.Formatter$FormatSpecifier.appendJustified(Appendable, CharSequence):void (89 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=23 <= 300.000000)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000128, probability=4.800512, bonus=1.000000, nodes=41 > 0.038411)
                              @ 58  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.248569, probability=37498.187553, bonus=1.000000, nodes=35 <= 300.000000)
                              @ 63  deltablue.BinaryConstraint.getOutput():Variable (22 bytes)   relevance-based (relevance=1.248569, probability=37498.187553, bonus=1.000000, nodes=22 <= 300.000000)
                              @ 73  deltablue.BinaryConstraint.getOutput():Variable (22 bytes)   relevance-based (relevance=1.248569, probability=37498.187553, bonus=1.000000, nodes=22 <= 300.000000)
                            @ 1  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 6  deltablue.Variable.getConstraints():Vector (5 bytes)   inline accessor method (bytecode parsing)
                            @ 11  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object, Object):Object (10 bytes)   inline method (bytecode parsing)
                              @ 6  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object, Object):Object (24 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 19  deltablue.Planner$$Lambda/0x00007f2ce003d968.<init>(AbstractConstraint, Vector):void (15 bytes)   relevance-based (relevance=1.000000, probability=37498.187553, bonus=1.000000, nodes=11 <= 300.000000)
                                  @ 20  deltablue.Planner$$Lambda/0x00007f2ce003d968.apply(Object):void (16 bytes)   not inlining too large previous low-level graph (low-level-nodes: 372, relevance=1.000000, probability=297006.499966, bonus=1.000000, nodes=16)
                                @ 16  som.Vector.forEach(ForEachInterface):void (32 bytes)   not inlining callee invoke probability is too high (invokeP=7.920556, relevance=1.000000, probability=37498.187553, bonus=1.000000, nodes=24)
                              @ 78  deltablue.Planner.addConstraintsConsumingTo(Variable, Vector):void (20 bytes)   relevance-based (relevance=1.248569, probability=37498.187553, bonus=1.000000, nodes=23 <= 300.000000)
                            @ 64  jdk.internal.math.MathUtils.pow10(int):long (6 bytes)   inline method (bytecode parsing)
                            @ 119  jdk.internal.math.MathUtils.pow10(int):long (6 bytes)   inline method (bytecode parsing)
                              @ 14  jdk.internal.math.FormattedFPDecimal.round(long):void (149 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=80 <= 300.000000)
                              @ 18  jdk.internal.math.FormattedFPDecimal.plainChars():FormattedFPDecimal (39 bytes)   not inlining too large previous low-level graph (low-level-nodes: 517, relevance=1.482377, probability=1.000000, bonus=1.000000, nodes=31)
                            @ 64  jdk.internal.math.MathUtils.pow10(int):long (6 bytes)   inline method (bytecode parsing)
                            @ 119  jdk.internal.math.MathUtils.pow10(int):long (6 bytes)   inline method (bytecode parsing)
                            @ 1  java.util.Objects.requireNonNull(Object):Object (14 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.Planner.lambda$chainTest$7(int):Variable (8 bytes)   inline method (bytecode parsing)
                            @ 15  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 27  deltablue.Strength.absoluteWeakest():Strength (4 bytes)   inline method (bytecode parsing)
                                @ 4  deltablue.Variable.<init>():void (44 bytes)   not inlining too large previous low-level graph (low-level-nodes: 379, relevance=1.000000, probability=59050.333333, bonus=1.000000, nodes=27)
                              @ 17  deltablue.Planner$$Lambda/0x00007f2ce0031e88.apply(int):Object (5 bytes)   trivial (relevance=1.000000, probability=59050.333333, bonus=1.000000, nodes=9)
                            @ 4  deltablue.Planner.<init>():void (10 bytes)   inline method (bytecode parsing)
                            @ 16  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object):Object (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.lang.invoke.LambdaForm$MH/0x00007f2ce0000800.invoke(Object):Object (8 bytes)   inline method (bytecode parsing)
                            @ 55  deltablue.EqualityConstraint.<init>(Variable, Variable, Strength$Sym, Planner):void (16 bytes)   inline method (bytecode parsing)
                              @ 12  deltablue.AbstractConstraint.addConstraint(Planner):void (10 bytes)   inline method (bytecode parsing)
                            @ 76  deltablue.StayConstraint.<init>(Variable, Strength$Sym, Planner):void (8 bytes)   inline method (bytecode parsing)
                              @ 4  deltablue.UnaryConstraint.<init>(Variable, Strength$Sym, Planner):void (16 bytes)   inline method (bytecode parsing)
                                @ 2  deltablue.AbstractConstraint.<init>(Strength$Sym):void (13 bytes)   inline method (bytecode parsing)
                                  @ 6  deltablue.Strength.of(Strength$Sym):Strength (11 bytes)   inline method (bytecode parsing)
                                @ 12  deltablue.AbstractConstraint.addConstraint(Planner):void (10 bytes)   inline method (bytecode parsing)
                            @ 91  deltablue.EditConstraint.<init>(Variable, Strength$Sym, Planner):void (8 bytes)   inline method (bytecode parsing)
                              @ 4  deltablue.UnaryConstraint.<init>(Variable, Strength$Sym, Planner):void (16 bytes)   inline method (bytecode parsing)
                                @ 2  deltablue.AbstractConstraint.<init>(Strength$Sym):void (13 bytes)   inline method (bytecode parsing)
                                  @ 6  deltablue.Strength.of(Strength$Sym):Strength (11 bytes)   inline method (bytecode parsing)
                                @ 12  deltablue.AbstractConstraint.addConstraint(Planner):void (10 bytes)   inline method (bytecode parsing)
                            @ 124  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 129  deltablue.Plan.execute():void (10 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object):Object (8 bytes)   inline method (bytecode parsing)
                                @ 4  java.lang.invoke.LambdaForm$MH/0x00007f2ce0000800.invoke(Object):Object (8 bytes)   inline method (bytecode parsing)
                            @ 135  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 1  java.util.Objects.requireNonNull(Object):Object (14 bytes)   inline method (bytecode parsing)
                              @ 21  java.util.Arrays.setAll(Object[], IntFunction):void (30 bytes)   not inlining too large previous low-level graph (low-level-nodes: 452, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=24)
                                  @ 7  deltablue.Strength$Sym.customHash():int (5 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                                @ 1  som.Dictionary.hash(Dictionary$CustomHash):int (20 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                            @ 6  som.Dictionary.getBucketIdx(int):int (10 bytes)   inline method (bytecode parsing)
                                @ 7  som.Dictionary.getBucket(int):Dictionary$Entry (11 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                                @ 18  som.IdentityDictionary$IdEntry.match(int, Object):boolean (22 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=13 <= 300.000000)
                              @ 4  som.Dictionary.at(Dictionary$CustomHash):Object (39 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=28 <= 300.000000)
                            @ 5  deltablue.Variable.addConstraint(AbstractConstraint):void (9 bytes)   inline method (bytecode parsing)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                  @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000128, probability=0.000128, bonus=1.000000, nodes=41 > 0.038411)
                                @ 5  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=35 <= 300.000000)
                              @ 1  deltablue.UnaryConstraint.addToGraph():void (14 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=47 <= 300.000000)
                                @ 1  deltablue.Planner.newMark():int (15 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f2ce003d750.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                @ 8  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 713, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=72)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f2ce003d750.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                @ 19  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 713, relevance=1.000000, probability=1.002830, bonus=1.000000, nodes=72)
                              @ 6  deltablue.Planner.incrementalAdd(AbstractConstraint):void (27 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=28 <= 300.000000)
                                  @ 7  deltablue.Strength$Sym.customHash():int (5 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                                @ 1  som.Dictionary.hash(Dictionary$CustomHash):int (20 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                            @ 6  som.Dictionary.getBucketIdx(int):int (10 bytes)   inline method (bytecode parsing)
                                @ 7  som.Dictionary.getBucket(int):Dictionary$Entry (11 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                                @ 18  som.IdentityDictionary$IdEntry.match(int, Object):boolean (22 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=13 <= 300.000000)
                              @ 4  som.Dictionary.at(Dictionary$CustomHash):Object (39 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=28 <= 300.000000)
                            @ 5  deltablue.Variable.addConstraint(AbstractConstraint):void (9 bytes)   inline method (bytecode parsing)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                  @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000128, probability=0.000128, bonus=1.000000, nodes=41 > 0.038411)
                                @ 5  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=35 <= 300.000000)
                              @ 1  deltablue.UnaryConstraint.addToGraph():void (14 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=47 <= 300.000000)
                                @ 1  deltablue.Planner.newMark():int (15 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f2ce003d750.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                @ 8  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 713, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=72)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f2ce003d750.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 8  jdk.graal.compiler.lir.stackslotalloc.LSStackSlotAllocator$Allocator.lambda$new$0(StackInterval, StackInterval):int (10 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.lir.stackslotalloc.StackInterval.from():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                              @ 5  jdk.graal.compiler.lir.stackslotalloc.StackInterval.from():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 8  jdk.graal.compiler.lir.stackslotalloc.LSStackSlotAllocator$Allocator.lambda$new$1(StackInterval, StackInterval):int (10 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.lir.stackslotalloc.StackInterval.to():int (5 bytes)   inline accessor method (bytecode parsing)
                              @ 5  jdk.graal.compiler.lir.stackslotalloc.StackInterval.to():int (5 bytes)   inline accessor method (bytecode parsing)
                                @ 19  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 713, relevance=1.000000, probability=1.002830, bonus=1.000000, nodes=72)
                              @ 6  deltablue.Planner.incrementalAdd(AbstractConstraint):void (27 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=28 <= 300.000000)
                                @ 1  jdk.graal.compiler.core.common.cfg.BasicBlock.getRelativeFrequency():double (0 bytes)   not inlining no type profile exists
                            @ 5  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                                @ 12  jdk.graal.compiler.core.common.cfg.BasicBlock.getRelativeFrequency():double (0 bytes)   not inlining no type profile exists
                                @ 23  jdk.graal.compiler.core.common.cfg.BasicBlock.getLoopDepth():int (0 bytes)   not inlining no type profile exists
                                @ 27  jdk.graal.compiler.core.common.cfg.BasicBlock.getLoopDepth():int (0 bytes)   not inlining no type profile exists
                                @ 39  jdk.graal.compiler.core.common.cfg.BasicBlock.getRelativeFrequency():double (0 bytes)   not inlining no type profile exists
                                @ 43  jdk.graal.compiler.core.common.cfg.BasicBlock.getRelativeFrequency():double (0 bytes)   not inlining no type profile exists
                                @ 9  jdk.graal.compiler.core.common.alloc.BasicBlockOrderUtils$BlockOrderComparator.compare(BasicBlock, BasicBlock):int (54 bytes)   relevance-based (relevance=1.000000, probability=1.932070, bonus=1.000000, nodes=47 <= 300.000000)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                              @ 44  jdk.graal.compiler.core.common.alloc.BasicBlockOrderUtils$BlockOrderComparator.compare(Object, Object):int (13 bytes)   relevance-based (relevance=1.532794, probability=2.080633, bonus=1.000000, nodes=99 <= 300.000000)
                            @ 8  jdk.graal.compiler.lir.stackslotalloc.LSStackSlotAllocator$Allocator.lambda$new$0(StackInterval, StackInterval):int (10 bytes)   inline method (bytecode parsing)
                                  @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000128, probability=0.000128, bonus=1.000000, nodes=41 > 0.038411)
                                @ 11  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=35 <= 300.000000)
                              @ 1  jdk.graal.compiler.lir.stackslotalloc.StackInterval.from():int (5 bytes)   inline accessor method (bytecode parsing)
                              @ 5  jdk.graal.compiler.lir.stackslotalloc.StackInterval.from():int (5 bytes)   inline accessor method (bytecode parsing)
                              @ 96  som.Vector.with(Object):Vector (16 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=40 <= 300.000000)
                            @ 8  jdk.graal.compiler.lir.stackslotalloc.LSStackSlotAllocator$Allocator.lambda$new$1(StackInterval, StackInterval):int (10 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.lir.stackslotalloc.StackInterval.to():int (5 bytes)   inline accessor method (bytecode parsing)
                              @ 5  jdk.graal.compiler.lir.stackslotalloc.StackInterval.to():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 4  som.Vector.<init>():void (7 bytes)   inline method (bytecode parsing)
                              @ 3  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 10  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.core.common.cfg.BasicBlock.getRelativeFrequency():double (0 bytes)   not inlining no type profile exists
                                @ 12  jdk.graal.compiler.core.common.cfg.BasicBlock.getRelativeFrequency():double (0 bytes)   not inlining no type profile exists
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 23  jdk.graal.compiler.core.common.cfg.BasicBlock.getLoopDepth():int (0 bytes)   not inlining no type profile exists
                                @ 27  jdk.graal.compiler.core.common.cfg.BasicBlock.getLoopDepth():int (0 bytes)   not inlining no type profile exists
                                @ 16  deltablue.Planner$$Lambda/0x00007f2ce003e228.<init>(Vector):void (10 bytes)   inline method (bytecode parsing)
                                @ 39  jdk.graal.compiler.core.common.cfg.BasicBlock.getRelativeFrequency():double (0 bytes)   not inlining no type profile exists
                                @ 43  jdk.graal.compiler.core.common.cfg.BasicBlock.getRelativeFrequency():double (0 bytes)   not inlining no type profile exists
                                @ 9  jdk.graal.compiler.core.common.alloc.BasicBlockOrderUtils$BlockOrderComparator.compare(BasicBlock, BasicBlock):int (54 bytes)   relevance-based (relevance=1.000000, probability=2.117989, bonus=1.000000, nodes=47 <= 300.000000)
                              @ 66  jdk.graal.compiler.core.common.alloc.BasicBlockOrderUtils$BlockOrderComparator.compare(Object, Object):int (13 bytes)   relevance-based (relevance=9.522260, probability=2.299709, bonus=1.000000, nodes=99 <= 300.000000)
                                    @ 1  deltablue.AbstractConstraint.isInput():boolean (2 bytes)   not inlining no type profile exists
                                    @ 8  deltablue.AbstractConstraint.isSatisfied():boolean (0 bytes)   not inlining no type profile exists
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                        @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000128, probability=0.000253, bonus=1.000000, nodes=41 > 0.038411)
                                      @ 16  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=1.980139, bonus=1.000000, nodes=35 <= 300.000000)
                                    @ 8  deltablue.Planner.lambda$extractPlanFromConstraints$1(Vector, AbstractConstraint):void (20 bytes)   relevance-based (relevance=1.000000, probability=7.920556, bonus=1.000000, nodes=59 <= 300.000000)
                                  @ 20  deltablue.Planner$$Lambda/0x00007f2ce003e228.apply(Object):void (12 bytes)   relevance-based (relevance=1.000000, probability=7.920556, bonus=1.000000, nodes=64 <= 300.000000)
                                @ 15  som.Vector.forEach(ForEachInterface):void (32 bytes)   not inlining callee invoke probability is too high (invokeP=11.881088, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=77)
                            @ 9  deltablue.Plan.<init>():void (7 bytes)   inline method (bytecode parsing)
                              @ 3  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 39  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 67  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                                  @ 1  deltablue.Planner.newMark():int (15 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=10 <= 300.000000)
                                  @ 18  som.Vector.isEmpty():boolean (17 bytes)   relevance-based (relevance=1.000026, probability=38183.030303, bonus=1.000000, nodes=10 <= 300.000000)
                                    @ 1  som.Vector.isEmpty():boolean (17 bytes)   relevance-based (relevance=1.000000, probability=38182.030303, bonus=1.000000, nodes=10 <= 300.000000)
                                  @ 26  som.Vector.removeFirst():Object (31 bytes)   relevance-based (relevance=1.000000, probability=38182.030303, bonus=1.000000, nodes=18 <= 300.000000)
                                  @ 36  deltablue.BinaryConstraint.getOutput():Variable (22 bytes)   relevance-based (relevance=1.000000, probability=38182.030303, bonus=1.000000, nodes=22 <= 300.000000)
                            @ 2  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f2ce003e8b8.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 9  deltablue.Variable.getStay():boolean (5 bytes)   inline accessor method (bytecode parsing)
                                        @ 8  deltablue.AbstractConstraint.lambda$inputsKnown$0(int, Variable):boolean (28 bytes)   not inlining relevance-based (relevance=0.000006, probability=0.238858, bonus=1.000000, nodes=21 > 0.001877)
                                      @ 26  deltablue.AbstractConstraint$$Lambda/0x00007f2ce003e8b8.test(Object):boolean (12 bytes)   trivial (relevance=0.000006, probability=0.238858, bonus=1.000000, nodes=9)
                            @ 1  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 9  deltablue.Variable.getStay():boolean (5 bytes)   inline accessor method (bytecode parsing)
                                        @ 8  deltablue.AbstractConstraint.lambda$inputsKnown$0(int, Variable):boolean (28 bytes)   relevance-based (relevance=1.000000, probability=38180.756775, bonus=1.000000, nodes=21 <= 300.000000)
                                      @ 15  deltablue.AbstractConstraint$$Lambda/0x00007f2ce003e8b8.test(Object):boolean (12 bytes)   relevance-based (relevance=1.000000, probability=38180.756775, bonus=1.000000, nodes=23 <= 300.000000)
                                    @ 7  deltablue.BinaryConstraint.inputsHasOne(TestInterface):boolean (32 bytes)   relevance-based (relevance=1.000000, probability=38182.030303, bonus=1.000000, nodes=42 <= 300.000000)
                                  @ 49  deltablue.AbstractConstraint.inputsKnown(int):boolean (19 bytes)   relevance-based (relevance=1.248568, probability=38182.030303, bonus=1.000000, nodes=59 <= 300.000000)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                    @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000128, probability=4.888058, bonus=1.000000, nodes=41 > 0.038411)
                                  @ 58  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.248568, probability=38182.030303, bonus=1.000000, nodes=35 <= 300.000000)
                                  @ 63  deltablue.BinaryConstraint.getOutput():Variable (22 bytes)   relevance-based (relevance=1.248568, probability=38182.030303, bonus=1.000000, nodes=22 <= 300.000000)
                                  @ 73  deltablue.BinaryConstraint.getOutput():Variable (22 bytes)   relevance-based (relevance=1.248568, probability=38182.030303, bonus=1.000000, nodes=22 <= 300.000000)
                            @ 1  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 6  deltablue.Variable.getConstraints():Vector (5 bytes)   inline accessor method (bytecode parsing)
                            @ 11  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object, Object):Object (10 bytes)   inline method (bytecode parsing)
                              @ 6  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object, Object):Object (24 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                    @ 19  deltablue.Planner$$Lambda/0x00007f2ce003d968.<init>(AbstractConstraint, Vector):void (15 bytes)   relevance-based (relevance=1.000000, probability=38182.030303, bonus=1.000000, nodes=11 <= 300.000000)
                                      @ 20  deltablue.Planner$$Lambda/0x00007f2ce003d968.apply(Object):void (16 bytes)   not inlining too large previous low-level graph (low-level-nodes: 372, relevance=1.000000, probability=302422.914862, bonus=1.000000, nodes=16)
                                    @ 16  som.Vector.forEach(ForEachInterface):void (32 bytes)   not inlining callee invoke probability is too high (invokeP=7.920556, relevance=1.000000, probability=38182.030303, bonus=1.000000, nodes=24)
                                  @ 78  deltablue.Planner.addConstraintsConsumingTo(Variable, Vector):void (20 bytes)   relevance-based (relevance=1.248568, probability=38182.030303, bonus=1.000000, nodes=23 <= 300.000000)
                                @ 20  deltablue.Planner.makePlan(Vector):Plan (86 bytes)   not inlining callee invoke probability is too high (invokeP=38187.157219, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=230)
                              @ 104  deltablue.Planner.extractPlanFromConstraints(Vector):Plan (24 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=27 <= 300.000000)
                              @ 6  deltablue.BinaryConstraint.<init>(Variable, Variable, Strength$Sym, Planner):void (21 bytes)   not inlining too large previous low-level graph (low-level-nodes: 415, relevance=1.000000, probability=56902.333333, bonus=1.000000, nodes=17)
                            @ 5  deltablue.Variable.addConstraint(AbstractConstraint):void (9 bytes)   inline method (bytecode parsing)
                            @ 13  deltablue.Variable.addConstraint(AbstractConstraint):void (9 bytes)   inline method (bytecode parsing)
                              @ 1  deltablue.BinaryConstraint.addToGraph():void (22 bytes)   not inlining too large previous low-level graph (low-level-nodes: 638, relevance=1.000000, probability=56902.333333, bonus=1.000000, nodes=25)
                                @ 1  deltablue.Planner.newMark():int (15 bytes)   relevance-based (relevance=1.000000, probability=56902.333333, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f2ce003d750.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                @ 8  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 713, relevance=1.000000, probability=56902.333333, bonus=1.000000, nodes=72)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f2ce003d750.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                @ 19  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 713, relevance=1.000000, probability=57063.374383, bonus=1.000000, nodes=72)
                              @ 6  deltablue.Planner.incrementalAdd(AbstractConstraint):void (27 bytes)   relevance-based (relevance=1.000000, probability=56902.333333, bonus=1.000000, nodes=28 <= 300.000000)
                                @ 1  deltablue.UnaryConstraint.isSatisfied():boolean (5 bytes)   trivial (relevance=2.000000, probability=1.000000, bonus=1.000000, nodes=5)
                            @ 21  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.Planner$$Lambda/0x00007f2ce01f68f0.<init>(Planner):void (10 bytes)   inline method (bytecode parsing)
                                  @ 1  deltablue.UnaryConstraint.getOutput():Variable (5 bytes)   trivial (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=5)
                                  @ 6  deltablue.UnaryConstraint.markUnsatisfied():void (6 bytes)   trivial (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=7)
                            @ 1  som.Vector.capacity():int (6 bytes)   inline method (bytecode parsing)
                            @ 31  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object, Object, Object, Object):Object (13 bytes)   inline method (bytecode parsing)
                              @ 9  java.lang.invoke.LambdaForm$DMH/0x00007f2ce0123400.newInvokeSpecial(Object, Object, Object, Object, Object):Object (30 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 7  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                        @ 24  som.Vector$$Lambda/0x00007f2ce003fc10.<init>(Object, boolean[], Object[], int[]):void (26 bytes)   relevance-based (relevance=1.000000, probability=0.250000, bonus=1.000000, nodes=17 <= 300.000000)
                                            @ 17  som.Vector.lambda$remove$0(Object, boolean[], Object[], int[], Object):void (28 bytes)   relevance-based (relevance=1.000000, probability=1.980139, bonus=1.000000, nodes=26 <= 300.000000)
                                          @ 20  som.Vector$$Lambda/0x00007f2ce003fc10.apply(Object):void (21 bytes)   relevance-based (relevance=1.000000, probability=1.980139, bonus=1.000000, nodes=28 <= 300.000000)
                                        @ 36  som.Vector.forEach(ForEachInterface):void (32 bytes)   relevance-based (relevance=1.000000, probability=0.250000, bonus=1.000000, nodes=41 <= 300.000000)
                                      @ 5  som.Vector.remove(Object):boolean (61 bytes)   relevance-based (relevance=2.000000, probability=0.250000, bonus=1.000000, nodes=73 <= 300.000000)
                                    @ 12  deltablue.Variable.removeConstraint(AbstractConstraint):void (23 bytes)   relevance-based (relevance=1.000000, probability=0.250000, bonus=1.000000, nodes=90 <= 300.000000)
                                  @ 10  deltablue.UnaryConstraint.removeFromGraph():void (21 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=100 <= 300.000000)
                            @ 4  som.Vector.<init>():void (7 bytes)   inline method (bytecode parsing)
                              @ 3  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 10  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 14  deltablue.Strength.absoluteWeakest():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 17  deltablue.Variable.setWalkStrength(Strength):void (6 bytes)   inline method (bytecode parsing)
                            @ 22  deltablue.Variable.setStay(boolean):void (6 bytes)   inline method (bytecode parsing)
                            @ 48  deltablue.Variable.getConstraints():Vector (5 bytes)   inline accessor method (bytecode parsing)
                            @ 52  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.Planner$$Lambda/0x00007f2ce01f6000.<init>(Vector):void (10 bytes)   inline method (bytecode parsing)
                            @ 64  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.Planner$$Lambda/0x00007f2ce01f6220.<init>(Vector):void (10 bytes)   inline method (bytecode parsing)
                            @ 76  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object):Object (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.lang.invoke.LambdaForm$MH/0x00007f2ce0000800.invoke(Object):Object (8 bytes)   inline method (bytecode parsing)
                            @ 5  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                        @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000128, probability=0.000064, bonus=1.000000, nodes=41 > 0.038411)
                                      @ 11  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=35 <= 300.000000)
                                    @ 26  som.Vector.with(Object):Vector (16 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=40 <= 300.000000)
                                    @ 31  som.Vector.isEmpty():boolean (17 bytes)   relevance-based (relevance=1.000029, probability=17266.882979, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 1  som.Vector.size():int (10 bytes)   inline method (bytecode parsing)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                            @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.125000, bonus=1.000000, nodes=13 <= 300.000000)
                                          @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.125000, bonus=1.000000, nodes=24 <= 300.000000)
                                        @ 45  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.125000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                            @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.031250, bonus=1.000000, nodes=13 <= 300.000000)
                                          @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.031250, bonus=1.000000, nodes=24 <= 300.000000)
                                        @ 101  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.031250, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                            @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.031250, bonus=1.000000, nodes=13 <= 300.000000)
                                          @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.031250, bonus=1.000000, nodes=24 <= 300.000000)
                                        @ 114  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.031250, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                            @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.005208, bonus=1.000000, nodes=13 <= 300.000000)
                                          @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.005208, bonus=1.000000, nodes=24 <= 300.000000)
                                        @ 184  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.005208, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                            @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.005208, bonus=1.000000, nodes=13 <= 300.000000)
                                          @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.005208, bonus=1.000000, nodes=24 <= 300.000000)
                                        @ 218  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.005208, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 8  jdk.graal.compiler.lir.alloc.lsra.LinearScan.lambda$sortIntervals$0(Interval, Interval):int (10 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.lir.alloc.lsra.Interval.from():int (8 bytes)   inline method (bytecode parsing)
                              @ 5  jdk.graal.compiler.lir.alloc.lsra.Interval.from():int (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.001953, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.001953, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 45  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.001953, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 17  java.lang.Enum.ordinal():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000488, bonus=1.000000, nodes=13 <= 300.000000)
                                        @ 2  java.util.EnumMap.isValidKey(Object):boolean (36 bytes)   relevance-based (relevance=1.000000, probability=0.176799, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000488, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 101  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000488, bonus=1.000000, nodes=30 <= 300.000000)
                                        @ 21  java.util.EnumMap.unmaskNull(Object):Object (13 bytes)   trivial (relevance=1.000091, probability=0.176799, bonus=1.000000, nodes=7)
                                      @ 7  java.util.EnumMap.get(Object):Object (29 bytes)   relevance-based (relevance=1.000000, probability=0.176799, bonus=1.000000, nodes=27 <= 300.000000)
                                    @ 1  jdk.graal.compiler.hotspot.HotSpotCompiledCodeBuilder$SiteComparator.ord(Infopoint):int (19 bytes)   relevance-based (relevance=4.000000, probability=0.176799, bonus=1.000000, nodes=36 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000488, bonus=1.000000, nodes=13 <= 300.000000)
                            @ 17  java.lang.Enum.ordinal():int (5 bytes)   inline accessor method (bytecode parsing)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000488, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 114  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000488, bonus=1.000000, nodes=30 <= 300.000000)
                                        @ 2  java.util.EnumMap.isValidKey(Object):boolean (36 bytes)   relevance-based (relevance=1.000000, probability=0.176799, bonus=1.000000, nodes=13 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                                        @ 21  java.util.EnumMap.unmaskNull(Object):Object (13 bytes)   trivial (relevance=1.000091, probability=0.176799, bonus=1.000000, nodes=7)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                                      @ 7  java.util.EnumMap.get(Object):Object (29 bytes)   relevance-based (relevance=1.000000, probability=0.176799, bonus=1.000000, nodes=27 <= 300.000000)
                                    @ 6  jdk.graal.compiler.hotspot.HotSpotCompiledCodeBuilder$SiteComparator.ord(Infopoint):int (19 bytes)   relevance-based (relevance=1.000091, probability=0.176799, bonus=1.000000, nodes=36 <= 300.000000)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000081, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000081, bonus=1.000000, nodes=24 <= 300.000000)
                            @ 6  java.lang.Error.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                                          @ 184  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000081, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 89  java.lang.String.format(Locale, String, Object[]):String (17 bytes)   inline method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                              @ 5  java.util.Formatter.<init>(Locale):void (13 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.StringBuilder.<init>():void (7 bytes)   inline method (bytecode parsing)
                                @ 9  java.util.Formatter.<init>(Locale, Appendable):void (15 bytes)   inline method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000081, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000081, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 218  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000081, bonus=1.000000, nodes=30 <= 300.000000)
                                      @ 3  jdk.graal.compiler.debug.GraalError.format(String, Object[]):String (93 bytes)   not inlining relevance-based (relevance=0.250023, probability=0.044200, bonus=1.000000, nodes=81 > 75.006847)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                 n                      @ 16  java.lang.Throwable.fillInStackTrace(int):Throwable (0 bytes)   not inlining it is a non-intrinsic native method
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
              s                         @ 24  java.lang.Throwable.fillInStackTrace():Throwable (29 bytes)   relevance-based (relevance=0.250023, probability=0.044200, bonus=1.000000, nodes=34 <= 75.006847)
                                      @ 2  java.lang.Throwable.<init>(String):void (34 bytes)   relevance-based (relevance=0.250023, probability=0.044200, bonus=1.000000, nodes=45 <= 75.006847)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  java.util.AbstractList.<init>():void (10 bytes)   inline method (bytecode parsing)
                              @ 1  java.util.AbstractCollection.<init>():void (5 bytes)   inline method (bytecode parsing)
                                      @ 14  java.util.ArrayList.<init>():void (12 bytes)   relevance-based (relevance=1.000091, probability=0.044200, bonus=1.000000, nodes=11 <= 300.000000)
                                    @ 36  jdk.graal.compiler.debug.GraalError.<init>(String, Object[]):void (21 bytes)   relevance-based (relevance=0.250023, probability=0.044200, bonus=1.000000, nodes=62 <= 75.006847)
                                  @ 86  jdk.graal.compiler.hotspot.HotSpotCompiledCodeBuilder$SiteComparator.checkCollision(Infopoint, Infopoint):int (44 bytes)   relevance-based (relevance=1.000000, probability=0.176799, bonus=1.000000, nodes=145 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                                @ 9  jdk.graal.compiler.hotspot.HotSpotCompiledCodeBuilder$SiteComparator.compare(Site, Site):int (100 bytes)   relevance-based (relevance=1.000000, probability=2.828791, bonus=1.000000, nodes=191 <= 300.000000)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000031, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000031, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 45  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000031, bonus=1.000000, nodes=30 <= 300.000000)
                              @ 93  jdk.graal.compiler.lir.alloc.lsra.LinearScan$$Lambda/0x00007f2ce02ead28.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.808448, probability=7.835180, bonus=1.000000, nodes=218 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000008, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000008, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 101  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000008, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000008, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000008, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 114  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000008, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000001, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000001, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 184  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000001, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000001, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000001, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 218  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000001, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                  @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                              @ 45  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                  @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                              @ 101  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                  @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                              @ 114  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                  @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                              @ 184  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                  @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                              @ 218  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                    @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                  @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                @ 45  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                    @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                  @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                @ 101  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                    @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                  @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                @ 114  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                    @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                  @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                @ 184  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                    @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                  @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                @ 218  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                      @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                    @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                  @ 45  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                      @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                    @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                  @ 101  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                      @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                    @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                  @ 114  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                      @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                    @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                  @ 184  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                      @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                    @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                  @ 218  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                                                @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining it exceeds the maximum recursive inlining depth
                                                @ 269  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining it exceeds the maximum recursive inlining depth
                                                @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=202 <= 300.000000)
                                              @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=387 > 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                    @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                  @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                @ 45  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                    @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                  @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                @ 101  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                    @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                  @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                @ 114  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                    @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                  @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                @ 184  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                    @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                  @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                @ 218  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 1  java.util.Objects.requireNonNull(Object):Object (14 bytes)   inline method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                      @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                    @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                  @ 45  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                              @ 8  jdk.graal.compiler.graph.iterators.NodeIterable.iterator():Iterator (10 bytes)   not inlining no type profile exists
                            @ 1  jdk.graal.compiler.graph.iterators.NodeIterator.<init>():void (5 bytes)   inline method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                @ 17  jdk.graal.compiler.graph.iterators.PredicatedProxyNodeIterator.<init>(Iterator, NodePredicate):void (15 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                                                      @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                              @ 6  jdk.graal.compiler.graph.iterators.FilteredNodeIterable.iterator():Iterator (21 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=16 <= 300.000000)
                                                    @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                  @ 101  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                      @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                    @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                  @ 11  jdk.graal.compiler.graph.Node.isAlive():boolean (13 bytes)   trivial (relevance=4.000000, probability=1.323947, bonus=1.000000, nodes=9)
                                                  @ 114  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                                @ 25  jdk.graal.compiler.graph.iterators.NodePredicate.apply(Node):boolean (0 bytes)   not inlining no type profile exists
                                @ 37  java.util.Iterator.hasNext():boolean (0 bytes)   not inlining no type profile exists
                                @ 50  java.util.Iterator.next():Object (0 bytes)   not inlining no type profile exists
                                  @ 75  jdk.graal.compiler.graph.Node.isAlive():boolean (13 bytes)   trivial (relevance=0.500000, probability=0.744720, bonus=1.000000, nodes=9)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                                @ 89  jdk.graal.compiler.graph.iterators.NodePredicate.apply(Node):boolean (0 bytes)   not inlining no type profile exists
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                                @ 1  jdk.graal.compiler.graph.iterators.PredicatedProxyNodeIterator.forward():void (103 bytes)   relevance-based (relevance=1.000000, probability=1.489440, bonus=1.000000, nodes=93 <= 300.000000)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                      @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                              @ 13  jdk.graal.compiler.graph.iterators.NodeIterator.hasNext():boolean (17 bytes)   relevance-based (relevance=1.489440, probability=1.489440, bonus=1.000000, nodes=98 <= 300.000000)
                                                    @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                  @ 184  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                      @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                    @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                  @ 218  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                                    @ 11  jdk.graal.compiler.graph.Node.isAlive():boolean (13 bytes)   trivial (relevance=2.628854, probability=0.435058, bonus=1.000000, nodes=9)
                                                @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining it exceeds the maximum recursive inlining depth
                                                @ 269  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining it exceeds the maximum recursive inlining depth
                                                @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=202 <= 300.000000)
                                  @ 25  jdk.graal.compiler.graph.iterators.NodePredicate.apply(Node):boolean (0 bytes)   not inlining no type profile exists
                                  @ 37  java.util.Iterator.hasNext():boolean (0 bytes)   not inlining no type profile exists
                                  @ 50  java.util.Iterator.next():Object (0 bytes)   not inlining no type profile exists
                                    @ 75  jdk.graal.compiler.graph.Node.isAlive():boolean (13 bytes)   trivial (relevance=0.328607, probability=0.244720, bonus=1.000000, nodes=9)
                                  @ 89  jdk.graal.compiler.graph.iterators.NodePredicate.apply(Node):boolean (0 bytes)   not inlining no type profile exists
                                  @ 1  jdk.graal.compiler.graph.iterators.PredicatedProxyNodeIterator.forward():void (103 bytes)   relevance-based (relevance=0.657213, probability=0.489440, bonus=1.000000, nodes=93 <= 197.164032)
                                @ 1  jdk.graal.compiler.graph.iterators.NodeIterator.next():Node (31 bytes)   not inlining relevance-based (relevance=0.328607, probability=0.489440, bonus=1.000000, nodes=105 > 98.582016)
                              @ 22  jdk.graal.compiler.graph.iterators.NodeIterator.next():Object (5 bytes)   trivial (relevance=0.328607, probability=0.489440, bonus=1.000000, nodes=7)
                                              @ 269  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=387 > 300.000000)
                                            @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   relevance-based (relevance=1.000000, probability=0.000001, bonus=1.000000, nodes=202 <= 300.000000)
                            @ 8  jdk.graal.compiler.phases.common.inlining.walker.ComputeInliningRelevance$Scope.lambda$process$0(NodeWorkList, LoopExitNode):void (9 bytes)   inline method (bytecode parsing)
                              @ 2  jdk.graal.compiler.nodes.FixedWithNextNode.next():FixedNode (5 bytes)   inline accessor method (bytecode parsing)
                              @ 5  jdk.graal.compiler.graph.NodeWorkList.add(Node):void (0 bytes)   not inlining no type profile exists
                            @ 2  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                                          @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.000061, bonus=1.000000, nodes=387 > 300.000000)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                                @ 16  jdk.graal.compiler.nodes.loop.LoopFragment$$Lambda/0x00007f2ce02e5ce8.<init>(NodeBitMap):void (10 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 18  jdk.graal.compiler.graph.NodeList.iterator():Iterator (10 bytes)   inline method (bytecode parsing)
                            @ 32  jdk.graal.compiler.graph.NodeList$NodeListIterator.next():Object (5 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 43  jdk.graal.compiler.nodes.virtual.EscapeObjectState.applyToVirtual(VirtualState$VirtualClosure):void (8 bytes)   inline method (bytecode parsing)
                            @ 50  jdk.graal.compiler.nodes.FrameState.outerFrameState():FrameState (5 bytes)   inline accessor method (bytecode parsing)
                            @ 57  jdk.graal.compiler.nodes.FrameState.outerFrameState():FrameState (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  jdk.graal.compiler.nodes.loop.LoopFragment.lambda$computeNodes$0(NodeBitMap, VirtualState):void (6 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 33  jdk.graal.compiler.graph.Node.toString():String (8 bytes)   inline method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000031, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000031, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 45  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000031, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000008, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000008, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 101  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000008, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 41  jdk.graal.compiler.graph.Node.id():int (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 22  jdk.graal.compiler.graph.Node.isAlive():boolean (13 bytes)   trivial (relevance=1.314427, probability=0.352123, bonus=1.000000, nodes=9)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                                        @ 25  jdk.graal.compiler.graph.NodeIdAccessor.getNodeId(Node):int (45 bytes)   relevance-based (relevance=0.657213, probability=0.352123, bonus=1.000000, nodes=14 <= 197.164032)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                                      @ 2  jdk.graal.compiler.graph.NodeBitMap.mark(Node):void (45 bytes)   relevance-based (relevance=0.657213, probability=0.352123, bonus=1.000000, nodes=23 <= 197.164032)
                                    @ 2  jdk.graal.compiler.nodes.loop.LoopFragment$$Lambda/0x00007f2ce02e5ce8.apply(VirtualState):void (9 bytes)   relevance-based (relevance=0.657213, probability=0.352123, bonus=1.000000, nodes=29 <= 197.164032)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000008, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000008, bonus=1.000000, nodes=24 <= 300.000000)
                            @ 11  jdk.graal.compiler.graph.NodeList.access$000(NodeList):int (5 bytes)   inline method (bytecode parsing)
                                            @ 114  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000008, bonus=1.000000, nodes=30 <= 300.000000)
                                    @ 6  jdk.graal.compiler.graph.NodeList$NodeListIterator.<init>(NodeList, int):void (23 bytes)   relevance-based (relevance=0.328607, probability=0.176062, bonus=1.000000, nodes=14 <= 98.582016)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                                    @ 23  jdk.graal.compiler.graph.NodeList$NodeListIterator.hasNext():boolean (72 bytes)   relevance-based (relevance=0.657213, probability=0.352123, bonus=1.000000, nodes=11 <= 197.164032)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000001, bonus=1.000000, nodes=13 <= 300.000000)
                                    @ 1  jdk.graal.compiler.graph.NodeList$NodeListIterator.next():Node (72 bytes)   relevance-based (relevance=0.328607, probability=0.176062, bonus=1.000000, nodes=12 <= 98.582016)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000001, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 184  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000001, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 5  jdk.graal.compiler.nodes.loop.LoopFragment.lambda$computeNodes$0(NodeBitMap, VirtualState):void (6 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 33  jdk.graal.compiler.graph.Node.toString():String (8 bytes)   inline method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 41  jdk.graal.compiler.graph.Node.id():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 22  jdk.graal.compiler.graph.Node.isAlive():boolean (13 bytes)   trivial (relevance=0.657213, probability=0.176062, bonus=1.000000, nodes=9)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000001, bonus=1.000000, nodes=13 <= 300.000000)
                                        @ 25  jdk.graal.compiler.graph.NodeIdAccessor.getNodeId(Node):int (45 bytes)   relevance-based (relevance=0.328607, probability=0.176062, bonus=1.000000, nodes=14 <= 98.582016)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000001, bonus=1.000000, nodes=24 <= 300.000000)
                                      @ 2  jdk.graal.compiler.graph.NodeBitMap.mark(Node):void (45 bytes)   relevance-based (relevance=0.328607, probability=0.176062, bonus=1.000000, nodes=23 <= 98.582016)
                                            @ 218  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000001, bonus=1.000000, nodes=30 <= 300.000000)
                                    @ 2  jdk.graal.compiler.nodes.loop.LoopFragment$$Lambda/0x00007f2ce02e5ce8.apply(VirtualState):void (9 bytes)   relevance-based (relevance=0.328607, probability=0.176062, bonus=1.000000, nodes=29 <= 98.582016)
                                  @ 7  jdk.graal.compiler.nodes.FrameState.applyToVirtual(VirtualState$VirtualClosure):void (65 bytes)   not inlining relevance-based (relevance=0.328607, probability=0.352123, bonus=1.000000, nodes=115 > 98.582016)
                                @ 8  jdk.graal.compiler.nodes.loop.LoopFragment.lambda$computeNodes$1(NodeBitMap, FrameState):void (11 bytes)   relevance-based (relevance=0.328607, probability=0.352123, bonus=1.000000, nodes=17 <= 98.582016)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                              @ 30  jdk.graal.compiler.nodes.loop.LoopFragment$$Lambda/0x00007f2ce02e58c0.accept(Object):void (12 bytes)   relevance-based (relevance=0.328607, probability=0.489440, bonus=1.000000, nodes=39 <= 98.582016)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                  @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                              @ 45  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                  @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                              @ 101  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                  @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                              @ 114  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                  @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                              @ 184  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                  @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                              @ 218  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                    @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                  @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                @ 45  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                    @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                  @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                @ 101  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                    @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                  @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                @ 114  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                    @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                  @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                @ 184  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                    @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                  @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                @ 218  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                      @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                    @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                  @ 45  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                      @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                    @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                  @ 101  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                      @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                    @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                  @ 114  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                              @ 1  java.util.ArrayList$SubList.checkForComodification():void (23 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=9)
                                                      @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                    @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                  @ 184  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                      @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                    @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                  @ 218  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                                                @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining it exceeds the maximum recursive inlining depth
                                                @ 269  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining it exceeds the maximum recursive inlining depth
                                                @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=202 <= 300.000000)
                            @ 12  java.util.LinkedList$Node.<init>(LinkedList$Node, Object, LinkedList$Node):void (20 bytes)   inline method (bytecode parsing)
                                              @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=387 > 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                    @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                  @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                @ 45  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                    @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                  @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                @ 101  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                    @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                  @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                @ 114  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                    @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                  @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                @ 184  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                    @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                  @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                @ 218  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                      @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                    @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                  @ 45  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                      @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                    @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                  @ 101  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                      @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                    @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                  @ 114  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                      @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                    @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                  @ 184  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                      @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                    @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                  @ 218  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 2  java.nio.CharBuffer.limit(int):CharBuffer (8 bytes)   inline method (bytecode parsing)
                                                @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining it exceeds the maximum recursive inlining depth
                                                @ 269  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining it exceeds the maximum recursive inlining depth
                                                @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=202 <= 300.000000)
                            @ 2  java.nio.MappedByteBuffer.limit(int):MappedByteBuffer (8 bytes)   inline method (bytecode parsing)
                              @ 2  java.nio.ByteBuffer.limit(int):ByteBuffer (8 bytes)   inline method (bytecode parsing)
                            @ 2  java.nio.IntBuffer.limit(int):IntBuffer (8 bytes)   inline method (bytecode parsing)
                                @ 2  java.nio.Buffer.limit(int):Buffer (65 bytes)   not inlining relevance-based (relevance=0.000148, probability=0.000082, bonus=1.000000, nodes=27 > 0.044313)
                                              @ 269  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=387 > 300.000000)
                                            @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   relevance-based (relevance=1.000000, probability=0.000001, bonus=1.000000, nodes=202 <= 300.000000)
                                  @ 2  java.nio.Buffer.limit(int):Buffer (65 bytes)   relevance-based (relevance=0.396160, probability=0.220215, bonus=1.000000, nodes=27 <= 118.847858)
                                @ 2  java.nio.ByteBuffer.limit(int):ByteBuffer (8 bytes)   relevance-based (relevance=0.396160, probability=0.220215, bonus=1.000000, nodes=28 <= 118.847858)
                                @ 2  java.nio.Buffer.limit(int):Buffer (65 bytes)   relevance-based (relevance=0.402659, probability=0.223828, bonus=1.000000, nodes=27 <= 120.797637)
                                          @ 269  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.000061, bonus=1.000000, nodes=387 > 300.000000)
                                        @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   relevance-based (relevance=1.000000, probability=0.003906, bonus=1.000000, nodes=202 <= 300.000000)
                                @ 2  java.nio.Buffer.limit(int):Buffer (65 bytes)   relevance-based (relevance=1.000000, probability=0.555875, bonus=1.000000, nodes=27 <= 300.000000)
                              @ 39  java.nio.CharBuffer.limit(int):Buffer (6 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=102 <= 300.000000)
                                      @ 19  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.250000, bonus=1.000000, nodes=387 > 300.000000)
                                    @ 81  som.Vector.sort(Comparator):void (23 bytes)   relevance-based (relevance=1.000128, probability=0.500000, bonus=1.000000, nodes=22 <= 300.000000)
                            @ 2  java.nio.CharBuffer.position(int):CharBuffer (8 bytes)   inline method (bytecode parsing)
                            @ 2  java.nio.MappedByteBuffer.position(int):MappedByteBuffer (8 bytes)   inline method (bytecode parsing)
                              @ 2  java.nio.ByteBuffer.position(int):ByteBuffer (8 bytes)   inline method (bytecode parsing)
                            @ 2  java.nio.IntBuffer.position(int):IntBuffer (8 bytes)   inline method (bytecode parsing)
                                      @ 1  som.Vector.isEmpty():boolean (17 bytes)   relevance-based (relevance=1.000000, probability=17266.382979, bonus=1.000000, nodes=10 <= 300.000000)
                                    @ 38  som.Vector.removeFirst():Object (31 bytes)   relevance-based (relevance=1.000000, probability=17266.382979, bonus=1.000000, nodes=18 <= 300.000000)
                                @ 2  java.nio.Buffer.position(int):Buffer (52 bytes)   not inlining relevance-based (relevance=0.000289, probability=0.000082, bonus=1.000000, nodes=16 > 0.086645)
                                  @ 2  java.nio.Buffer.position(int):Buffer (52 bytes)   relevance-based (relevance=0.774606, probability=0.220197, bonus=1.000000, nodes=16 <= 232.381683)
                                @ 2  java.nio.ByteBuffer.position(int):ByteBuffer (8 bytes)   relevance-based (relevance=0.774606, probability=0.220197, bonus=1.000000, nodes=17 <= 232.381683)
                                @ 2  java.nio.Buffer.position(int):Buffer (52 bytes)   relevance-based (relevance=0.787314, probability=0.223810, bonus=1.000000, nodes=16 <= 236.194060)
                                @ 2  java.nio.Buffer.position(int):Buffer (52 bytes)   relevance-based (relevance=1.000000, probability=0.555911, bonus=1.000000, nodes=16 <= 300.000000)
                              @ 45  java.nio.CharBuffer.position(int):Buffer (6 bytes)   relevance-based (relevance=1.955576, probability=1.000000, bonus=1.000000, nodes=69 <= 300.000000)
                                          @ 1  deltablue.BinaryConstraint.isSatisfied():boolean (13 bytes)   relevance-based (relevance=1.000009, probability=136759.355857, bonus=1.000000, nodes=14 <= 300.000000)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                          @ 9  som.Vector.append(Object):void (51 bytes)   not inlining relevance-based (relevance=0.000009, probability=1.235813, bonus=1.000000, nodes=35 > 0.002711)
                                        @ 8  deltablue.Planner.lambda$removePropagateFrom$4(Vector, AbstractConstraint):void (13 bytes)   relevance-based (relevance=1.000000, probability=136759.355857, bonus=1.000000, nodes=36 <= 300.000000)
                                      @ 20  deltablue.Planner$$Lambda/0x00007f2ce01f6000.apply(Object):void (12 bytes)   relevance-based (relevance=1.000000, probability=136759.355857, bonus=1.000000, nodes=43 <= 300.000000)
                                    @ 57  som.Vector.forEach(ForEachInterface):void (32 bytes)   relevance-based (relevance=1.000000, probability=17266.382979, bonus=1.000000, nodes=56 <= 300.000000)
                            @ 1  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 6  deltablue.Variable.getConstraints():Vector (5 bytes)   inline accessor method (bytecode parsing)
                            @ 11  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object, Object):Object (10 bytes)   inline method (bytecode parsing)
                              @ 6  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object, Object):Object (24 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                      @ 19  deltablue.Planner$$Lambda/0x00007f2ce01f6440.<init>(AbstractConstraint, ForEachInterface):void (15 bytes)   relevance-based (relevance=1.000000, probability=17266.382979, bonus=1.000000, nodes=11 <= 300.000000)
                                          @ 12  deltablue.Planner.lambda$constraintsConsuming$3(AbstractConstraint, ForEachInterface, AbstractConstraint):void (20 bytes)   not inlining too large previous low-level graph (low-level-nodes: 391, relevance=1.000000, probability=136759.355857, bonus=1.000000, nodes=26)
                                        @ 20  deltablue.Planner$$Lambda/0x00007f2ce01f6440.apply(Object):void (16 bytes)   relevance-based (relevance=1.000000, probability=136759.355857, bonus=1.000000, nodes=16 <= 300.000000)
                                      @ 16  som.Vector.forEach(ForEachInterface):void (32 bytes)   not inlining callee invoke probability is too high (invokeP=7.920556, relevance=1.000000, probability=17266.382979, bonus=1.000000, nodes=33)
                                    @ 69  deltablue.Planner.constraintsConsuming(Variable, ForEachInterface):void (20 bytes)   relevance-based (relevance=1.000000, probability=17266.382979, bonus=1.000000, nodes=23 <= 300.000000)
                                  @ 15  deltablue.Planner.removePropagateFrom(Variable):Vector (86 bytes)   not inlining callee invoke probability is too high (invokeP=34535.737711, relevance=2.000000, probability=0.500000, bonus=1.000000, nodes=202)
                            @ 8  deltablue.Planner.lambda$incrementalRemove$0(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                                        @ 1  deltablue.Planner.newMark():int (15 bytes)   relevance-based (relevance=1.000000, probability=3.960278, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f2ce003d750.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                        @ 8  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 713, relevance=1.000000, probability=3.960278, bonus=1.000000, nodes=72)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f2ce003d750.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 81  java.lang.Integer.rotateLeft(int, int):int (9 bytes)   inline method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 142  java.lang.Integer.rotateLeft(int, int):int (9 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 187  java.lang.Integer.rotateLeft(int, int):int (9 bytes)   inline method (bytecode parsing)
                            @ 217  java.lang.Integer.rotateLeft(int, int):int (9 bytes)   inline method (bytecode parsing)
                            @ 257  java.lang.Integer.rotateLeft(int, int):int (9 bytes)   inline method (bytecode parsing)
                            @ 287  java.lang.Integer.rotateLeft(int, int):int (9 bytes)   inline method (bytecode parsing)
                                        @ 19  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 713, relevance=1.000000, probability=3.971486, bonus=1.000000, nodes=72)
                                      @ 2  deltablue.Planner.incrementalAdd(AbstractConstraint):void (27 bytes)   relevance-based (relevance=1.000000, probability=3.960278, bonus=1.000000, nodes=28 <= 300.000000)
                            @ 336  java.lang.Integer.rotateLeft(int, int):int (9 bytes)   inline method (bytecode parsing)
                            @ 366  java.lang.Integer.rotateLeft(int, int):int (9 bytes)   inline method (bytecode parsing)
                            @ 406  java.lang.Integer.rotateLeft(int, int):int (9 bytes)   inline method (bytecode parsing)
                                    @ 20  deltablue.Planner$$Lambda/0x00007f2ce01f68f0.apply(Object):void (12 bytes)   relevance-based (relevance=1.000000, probability=3.960278, bonus=1.000000, nodes=37 <= 300.000000)
                                  @ 26  som.Vector.forEach(ForEachInterface):void (32 bytes)   not inlining callee invoke probability is too high (invokeP=15.863529, relevance=2.000000, probability=0.500000, bonus=1.000000, nodes=53)
                                @ 9  deltablue.Planner.incrementalRemove(AbstractConstraint):void (30 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=121 <= 300.000000)
                            @ 1  som.Vector.capacity():int (6 bytes)   inline method (bytecode parsing)
                            @ 31  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object, Object, Object, Object):Object (13 bytes)   inline method (bytecode parsing)
                              @ 9  java.lang.invoke.LambdaForm$DMH/0x00007f2ce0123400.newInvokeSpecial(Object, Object, Object, Object, Object):Object (30 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 7  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                      @ 24  som.Vector$$Lambda/0x00007f2ce003fc10.<init>(Object, boolean[], Object[], int[]):void (26 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=17 <= 300.000000)
                                          @ 17  som.Vector.lambda$remove$0(Object, boolean[], Object[], int[], Object):void (28 bytes)   relevance-based (relevance=1.000000, probability=3.960278, bonus=1.000000, nodes=26 <= 300.000000)
                                        @ 20  som.Vector$$Lambda/0x00007f2ce003fc10.apply(Object):void (21 bytes)   relevance-based (relevance=1.000000, probability=3.960278, bonus=1.000000, nodes=28 <= 300.000000)
                                      @ 36  som.Vector.forEach(ForEachInterface):void (32 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=41 <= 300.000000)
                                    @ 5  som.Vector.remove(Object):boolean (61 bytes)   relevance-based (relevance=2.000000, probability=0.500000, bonus=1.000000, nodes=73 <= 300.000000)
                                  @ 12  deltablue.Variable.removeConstraint(AbstractConstraint):void (23 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=90 <= 300.000000)
                                @ 13  deltablue.UnaryConstraint.removeFromGraph():void (21 bytes)   relevance-based (relevance=4.000000, probability=1.000000, bonus=1.000000, nodes=100 <= 300.000000)
                              @ 161  deltablue.AbstractConstraint.destroyConstraint(Planner):void (17 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=224 <= 300.000000)
                            @ 4  deltablue.Plan.lambda$execute$0(AbstractConstraint):void (5 bytes)   inline method (bytecode parsing)
                            @ 18  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 21  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 35  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 38  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 18  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 25  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 33  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 37  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 51  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 58  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 66  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 70  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                                  @ 1  deltablue.EqualityConstraint.execute():void (42 bytes)   relevance-based (relevance=1.000000, probability=792.055615, bonus=1.000000, nodes=103 <= 300.000000)
                                @ 20  deltablue.Plan$$Lambda/0x00007f2ce003f1c8.apply(Object):void (8 bytes)   relevance-based (relevance=1.000000, probability=792.055615, bonus=1.000000, nodes=113 <= 300.000000)
                              @ 6  som.Vector.forEach(ForEachInterface):void (32 bytes)   relevance-based (relevance=1.000000, probability=100.000000, bonus=1.000000, nodes=127 <= 300.000000)
                                @ 2  java.nio.Buffer.position(int):Buffer (52 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=16 <= 300.000000)
                              @ 2  java.nio.ByteBuffer.position(int):ByteBuffer (8 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=17 <= 300.000000)
                            @ 9  deltablue.Plan.<init>():void (7 bytes)   inline method (bytecode parsing)
                              @ 3  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 39  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 67  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                              @ 1  deltablue.Planner.newMark():int (15 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=10 <= 300.000000)
                              @ 18  som.Vector.isEmpty():boolean (17 bytes)   relevance-based (relevance=1.000028, probability=36075.057143, bonus=1.000000, nodes=10 <= 300.000000)
                                @ 1  som.Vector.isEmpty():boolean (17 bytes)   relevance-based (relevance=1.000000, probability=36074.057143, bonus=1.000000, nodes=10 <= 300.000000)
                              @ 26  som.Vector.removeFirst():Object (31 bytes)   relevance-based (relevance=1.000000, probability=36074.057143, bonus=1.000000, nodes=18 <= 300.000000)
                              @ 36  deltablue.BinaryConstraint.getOutput():Variable (22 bytes)   relevance-based (relevance=1.000000, probability=36074.057143, bonus=1.000000, nodes=22 <= 300.000000)
                            @ 2  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f2ce003e8b8.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 9  deltablue.Variable.getStay():boolean (5 bytes)   inline accessor method (bytecode parsing)
                                    @ 8  deltablue.AbstractConstraint.lambda$inputsKnown$0(int, Variable):boolean (28 bytes)   not inlining relevance-based (relevance=0.000006, probability=0.225671, bonus=1.000000, nodes=21 > 0.001877)
                                  @ 26  deltablue.AbstractConstraint$$Lambda/0x00007f2ce003e8b8.test(Object):boolean (12 bytes)   trivial (relevance=0.000006, probability=0.225671, bonus=1.000000, nodes=9)
                            @ 1  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 9  deltablue.Variable.getStay():boolean (5 bytes)   inline accessor method (bytecode parsing)
                                    @ 8  deltablue.AbstractConstraint.lambda$inputsKnown$0(int, Variable):boolean (28 bytes)   relevance-based (relevance=1.000000, probability=36072.853924, bonus=1.000000, nodes=21 <= 300.000000)
                                  @ 15  deltablue.AbstractConstraint$$Lambda/0x00007f2ce003e8b8.test(Object):boolean (12 bytes)   relevance-based (relevance=1.000000, probability=36072.853924, bonus=1.000000, nodes=23 <= 300.000000)
                                @ 7  deltablue.BinaryConstraint.inputsHasOne(TestInterface):boolean (32 bytes)   relevance-based (relevance=1.000000, probability=36074.057143, bonus=1.000000, nodes=42 <= 300.000000)
                              @ 49  deltablue.AbstractConstraint.inputsKnown(int):boolean (19 bytes)   relevance-based (relevance=1.248573, probability=36074.057143, bonus=1.000000, nodes=59 <= 300.000000)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000128, probability=4.618195, bonus=1.000000, nodes=41 > 0.038411)
                              @ 58  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.248573, probability=36074.057143, bonus=1.000000, nodes=35 <= 300.000000)
                              @ 63  deltablue.BinaryConstraint.getOutput():Variable (22 bytes)   relevance-based (relevance=1.248573, probability=36074.057143, bonus=1.000000, nodes=22 <= 300.000000)
                              @ 73  deltablue.BinaryConstraint.getOutput():Variable (22 bytes)   relevance-based (relevance=1.248573, probability=36074.057143, bonus=1.000000, nodes=22 <= 300.000000)
                            @ 1  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 6  deltablue.Variable.getConstraints():Vector (5 bytes)   inline accessor method (bytecode parsing)
                            @ 11  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object, Object):Object (10 bytes)   inline method (bytecode parsing)
                              @ 6  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object, Object):Object (24 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 19  deltablue.Planner$$Lambda/0x00007f2ce003d968.<init>(AbstractConstraint, Vector):void (15 bytes)   relevance-based (relevance=1.000000, probability=36074.057143, bonus=1.000000, nodes=11 <= 300.000000)
                                  @ 20  deltablue.Planner$$Lambda/0x00007f2ce003d968.apply(Object):void (16 bytes)   not inlining too large previous low-level graph (low-level-nodes: 372, relevance=1.000000, probability=285726.595088, bonus=1.000000, nodes=16)
                                @ 16  som.Vector.forEach(ForEachInterface):void (32 bytes)   not inlining callee invoke probability is too high (invokeP=7.920556, relevance=1.000000, probability=36074.057143, bonus=1.000000, nodes=24)
                              @ 78  deltablue.Planner.addConstraintsConsumingTo(Variable, Vector):void (20 bytes)   relevance-based (relevance=1.248573, probability=36074.057143, bonus=1.000000, nodes=23 <= 300.000000)
                              @ 217  java.util.HashMap$TreeNode.split(HashMap, HashMap$Node[], int, int):void (218 bytes)   not inlining relevance-based (relevance=0.000184, probability=0.001942, bonus=1.000000, nodes=119 > 0.055319)
                                @ 17  java.util.Arrays.rangeCheck(int, int, int):void (74 bytes)   relevance-based (relevance=1.000000, probability=0.984081, bonus=1.000000, nodes=10 <= 300.000000)
                                @ 43  java.util.TimSort.sort(Object[], int, int, Comparator, Object[], int, int):void (229 bytes)   not inlining too large previous low-level graph (low-level-nodes: 720, relevance=1.000000, probability=0.984081, bonus=1.000000, nodes=75)
                                @ 7  java.util.Arrays.sort(Object[], int, int):void (32 bytes)   not inlining relevance-based (relevance=0.016177, probability=0.015919, bonus=1.000000, nodes=14 > 4.853087)
                              @ 15  java.util.Arrays.sort(Object[], int, int, Comparator):void (47 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=27 <= 300.000000)
                              @ 17  java.util.Arrays.rangeCheck(int, int, int):void (74 bytes)   relevance-based (relevance=1.000000, probability=0.984103, bonus=1.000000, nodes=13 <= 300.000000)
                              @ 43  java.util.TimSort.sort(Object[], int, int, Comparator, Object[], int, int):void (229 bytes)   not inlining too large previous low-level graph (low-level-nodes: 720, relevance=1.000000, probability=0.984103, bonus=1.000000, nodes=78)
                              @ 7  java.util.Arrays.sort(Object[], int, int):void (32 bytes)   not inlining relevance-based (relevance=0.016154, probability=0.015897, bonus=1.000000, nodes=15 > 4.846287)
                            @ 1  java.util.Objects.requireNonNull(Object):Object (14 bytes)   inline method (bytecode parsing)
                                  @ 18  java.lang.Object.equals(Object):boolean (11 bytes)   trivial (relevance=1.000000, probability=3.591808, bonus=1.000000, nodes=9)
                                @ 5  java.util.Collections.eq(Object, Object):boolean (22 bytes)   relevance-based (relevance=1.000000, probability=4.214793, bonus=1.000000, nodes=36 <= 300.000000)
                              @ 29  java.util.Collections$SingletonSet.contains(Object):boolean (9 bytes)   relevance-based (relevance=1.311062, probability=4.214793, bonus=1.000000, nodes=33 <= 300.000000)
                              @ 116  java.util.ArrayList.shiftTailOverGap(Object[], int, int):void (53 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=38 <= 300.000000)
                                  @ 18  java.lang.Object.equals(Object):boolean (11 bytes)   trivial (relevance=1.000000, probability=6.044751, bonus=1.000000, nodes=9)
                                @ 5  java.util.Collections.eq(Object, Object):boolean (22 bytes)   relevance-based (relevance=1.000000, probability=7.093188, bonus=1.000000, nodes=36 <= 300.000000)
                              @ 70  java.util.Collections$SingletonSet.contains(Object):boolean (9 bytes)   relevance-based (relevance=1.286201, probability=7.093188, bonus=1.000000, nodes=33 <= 300.000000)
                              @ 18  jdk.internal.org.objectweb.asm.ByteVector.enlarge(int):void (73 bytes)   not inlining relevance-based (relevance=0.003166, probability=0.003156, bonus=1.000000, nodes=27 > 0.949887)
                              @ 6  java.util.AbstractList.subListRangeCheck(int, int, int):void (110 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=13 <= 300.000000)
                            @ 1  java.util.AbstractList.<init>():void (10 bytes)   inline method (bytecode parsing)
                              @ 1  java.util.AbstractCollection.<init>():void (5 bytes)   inline method (bytecode parsing)
                              @ 16  java.util.ArrayList$SubList.<init>(ArrayList, int, int):void (35 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=25 <= 300.000000)
                            @ 4  som.Vector.<init>():void (7 bytes)   inline method (bytecode parsing)
                              @ 3  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 10  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 14  deltablue.Strength.absoluteWeakest():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 17  deltablue.Variable.setWalkStrength(Strength):void (6 bytes)   inline method (bytecode parsing)
                            @ 22  deltablue.Variable.setStay(boolean):void (6 bytes)   inline method (bytecode parsing)
                            @ 48  deltablue.Variable.getConstraints():Vector (5 bytes)   inline accessor method (bytecode parsing)
                            @ 52  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                            @ 4  deltablue.Planner.<init>():void (10 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                            @ 12  som.Vector.<init>():void (7 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                              @ 3  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.Planner$$Lambda/0x00007f2ce01f6000.<init>(Vector):void (10 bytes)   inline method (bytecode parsing)
                            @ 18  deltablue.Variable.value(int):Variable (15 bytes)   inline method (bytecode parsing)
                            @ 64  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 10  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                            @ 25  deltablue.Variable.value(int):Variable (15 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                              @ 10  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.Planner$$Lambda/0x00007f2ce01f6220.<init>(Vector):void (10 bytes)   inline method (bytecode parsing)
                            @ 76  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object):Object (8 bytes)   inline method (bytecode parsing)
                            @ 75  deltablue.StayConstraint.<init>(Variable, Strength$Sym, Planner):void (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.lang.invoke.LambdaForm$MH/0x00007f2ce0000800.invoke(Object):Object (8 bytes)   inline method (bytecode parsing)
                              @ 4  deltablue.UnaryConstraint.<init>(Variable, Strength$Sym, Planner):void (16 bytes)   inline method (bytecode parsing)
                                @ 2  deltablue.AbstractConstraint.<init>(Strength$Sym):void (13 bytes)   inline method (bytecode parsing)
                                  @ 6  deltablue.Strength.of(Strength$Sym):Strength (11 bytes)   inline method (bytecode parsing)
                                @ 12  deltablue.AbstractConstraint.addConstraint(Planner):void (10 bytes)   inline method (bytecode parsing)
                            @ 5  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 114  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 144  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                            @ 187  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 248  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000128, probability=0.000128, bonus=1.000000, nodes=41 > 0.038411)
                                @ 11  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=35 <= 300.000000)
                              @ 26  som.Vector.with(Object):Vector (16 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=40 <= 300.000000)
                              @ 31  som.Vector.isEmpty():boolean (17 bytes)   relevance-based (relevance=1.000031, probability=31905.705882, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 1  som.Vector.size():int (10 bytes)   inline method (bytecode parsing)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 10  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 15  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 27  deltablue.Strength.absoluteWeakest():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                                @ 4  deltablue.Variable.<init>():void (44 bytes)   not inlining too large previous low-level graph (low-level-nodes: 379, relevance=1.000000, probability=0.999983, bonus=1.000000, nodes=27)
                              @ 47  deltablue.Variable.value(int):Variable (15 bytes)   relevance-based (relevance=1.000000, probability=0.999983, bonus=1.000000, nodes=11 <= 300.000000)
                            @ 10  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 15  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 27  deltablue.Strength.absoluteWeakest():Strength (4 bytes)   inline method (bytecode parsing)
                                @ 4  deltablue.Variable.<init>():void (44 bytes)   not inlining too large previous low-level graph (low-level-nodes: 379, relevance=1.000000, probability=0.999983, bonus=1.000000, nodes=27)
                              @ 54  deltablue.Variable.value(int):Variable (15 bytes)   relevance-based (relevance=1.000000, probability=0.999983, bonus=1.000000, nodes=11 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                      @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.250000, bonus=1.000000, nodes=13 <= 300.000000)
                                    @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.250000, bonus=1.000000, nodes=24 <= 300.000000)
                                  @ 45  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.250000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                                @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000128, probability=0.000128, bonus=1.000000, nodes=41 > 0.038411)
                              @ 62  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=0.999983, bonus=1.000000, nodes=35 <= 300.000000)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                      @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.062500, bonus=1.000000, nodes=13 <= 300.000000)
                                    @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.062500, bonus=1.000000, nodes=24 <= 300.000000)
                                  @ 101  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.062500, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 7  deltablue.Strength$Sym.customHash():int (5 bytes)   trivial (relevance=1.000000, probability=0.999983, bonus=1.000000, nodes=5)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                @ 1  som.Dictionary.hash(Dictionary$CustomHash):int (20 bytes)   trivial (relevance=1.000000, probability=0.999983, bonus=1.000000, nodes=5)
                                      @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.062500, bonus=1.000000, nodes=13 <= 300.000000)
                            @ 6  som.Dictionary.getBucketIdx(int):int (10 bytes)   inline method (bytecode parsing)
                                    @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.062500, bonus=1.000000, nodes=24 <= 300.000000)
                                  @ 114  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.062500, bonus=1.000000, nodes=30 <= 300.000000)
                                @ 7  som.Dictionary.getBucket(int):Dictionary$Entry (11 bytes)   relevance-based (relevance=1.000000, probability=0.999983, bonus=1.000000, nodes=11 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                                @ 18  som.IdentityDictionary$IdEntry.match(int, Object):boolean (22 bytes)   relevance-based (relevance=1.000000, probability=0.999983, bonus=1.000000, nodes=13 <= 300.000000)
                              @ 4  som.Dictionary.at(Dictionary$CustomHash):Object (39 bytes)   relevance-based (relevance=1.000128, probability=0.999983, bonus=1.000000, nodes=28 <= 300.000000)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                      @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.010417, bonus=1.000000, nodes=13 <= 300.000000)
                                    @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.010417, bonus=1.000000, nodes=24 <= 300.000000)
                            @ 5  deltablue.Variable.addConstraint(AbstractConstraint):void (9 bytes)   inline method (bytecode parsing)
                                  @ 184  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.010417, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                      @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.010417, bonus=1.000000, nodes=13 <= 300.000000)
                                    @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.010417, bonus=1.000000, nodes=24 <= 300.000000)
                                  @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000128, probability=0.000128, bonus=1.000000, nodes=41 > 0.038411)
                                  @ 218  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.010417, bonus=1.000000, nodes=30 <= 300.000000)
                                @ 5  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=0.999983, bonus=1.000000, nodes=35 <= 300.000000)
                              @ 1  deltablue.UnaryConstraint.addToGraph():void (14 bytes)   relevance-based (relevance=1.000128, probability=0.999983, bonus=1.000000, nodes=47 <= 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                                @ 1  deltablue.Planner.newMark():int (15 bytes)   relevance-based (relevance=1.000000, probability=0.999983, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f2ce003d750.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                                        @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.003906, bonus=1.000000, nodes=13 <= 300.000000)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                                      @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.003906, bonus=1.000000, nodes=24 <= 300.000000)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                    @ 45  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.003906, bonus=1.000000, nodes=30 <= 300.000000)
                                @ 8  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 713, relevance=1.000000, probability=0.999983, bonus=1.000000, nodes=72)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                        @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000977, bonus=1.000000, nodes=13 <= 300.000000)
                                      @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000977, bonus=1.000000, nodes=24 <= 300.000000)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f2ce003d750.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                                    @ 101  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000977, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                        @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000977, bonus=1.000000, nodes=13 <= 300.000000)
                                @ 19  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 713, relevance=1.000000, probability=1.002813, bonus=1.000000, nodes=72)
                              @ 6  deltablue.Planner.incrementalAdd(AbstractConstraint):void (27 bytes)   relevance-based (relevance=1.000128, probability=0.999983, bonus=1.000000, nodes=28 <= 300.000000)
                                      @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000977, bonus=1.000000, nodes=24 <= 300.000000)
                                    @ 114  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000977, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 24  deltablue.AbstractConstraint.addConstraint(Planner):void (10 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                              @ 94  deltablue.ScaleConstraint.<init>(Variable, Variable, Variable, Variable, Strength$Sym, Planner):void (28 bytes)   not inlining too large previous low-level graph (low-level-nodes: 1418, relevance=1.000128, probability=0.999983, bonus=1.000000, nodes=25)
                            @ 10  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 15  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                                        @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000163, bonus=1.000000, nodes=13 <= 300.000000)
                            @ 27  deltablue.Strength.absoluteWeakest():Strength (4 bytes)   inline method (bytecode parsing)
                                      @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000163, bonus=1.000000, nodes=24 <= 300.000000)
                                    @ 184  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000163, bonus=1.000000, nodes=30 <= 300.000000)
                                @ 4  deltablue.Variable.<init>():void (44 bytes)   not inlining too large previous low-level graph (low-level-nodes: 379, relevance=1.000000, probability=59998.000033, bonus=1.000000, nodes=27)
                              @ 47  deltablue.Variable.value(int):Variable (15 bytes)   relevance-based (relevance=1.000000, probability=59998.000033, bonus=1.000000, nodes=11 <= 300.000000)
                            @ 10  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 15  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 27  deltablue.Strength.absoluteWeakest():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                @ 4  deltablue.Variable.<init>():void (44 bytes)   not inlining too large previous low-level graph (low-level-nodes: 379, relevance=1.000000, probability=59998.000033, bonus=1.000000, nodes=27)
                                        @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000163, bonus=1.000000, nodes=13 <= 300.000000)
                              @ 54  deltablue.Variable.value(int):Variable (15 bytes)   relevance-based (relevance=1.000000, probability=59998.000033, bonus=1.000000, nodes=11 <= 300.000000)
                                      @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000163, bonus=1.000000, nodes=24 <= 300.000000)
                                    @ 218  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000163, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                                @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000128, probability=7.680935, bonus=1.000000, nodes=41 > 0.038411)
                              @ 62  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=59998.000033, bonus=1.000000, nodes=35 <= 300.000000)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                                  @ 7  deltablue.Strength$Sym.customHash():int (5 bytes)   trivial (relevance=1.000000, probability=59998.000033, bonus=1.000000, nodes=5)
                                @ 1  som.Dictionary.hash(Dictionary$CustomHash):int (20 bytes)   trivial (relevance=1.000000, probability=59998.000033, bonus=1.000000, nodes=5)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 6  som.Dictionary.getBucketIdx(int):int (10 bytes)   inline method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                @ 7  som.Dictionary.getBucket(int):Dictionary$Entry (11 bytes)   relevance-based (relevance=1.000000, probability=59998.000033, bonus=1.000000, nodes=11 <= 300.000000)
                                          @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000061, bonus=1.000000, nodes=13 <= 300.000000)
                                        @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000061, bonus=1.000000, nodes=24 <= 300.000000)
                                      @ 45  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000061, bonus=1.000000, nodes=30 <= 300.000000)
                                @ 18  som.IdentityDictionary$IdEntry.match(int, Object):boolean (22 bytes)   relevance-based (relevance=1.000000, probability=59998.000033, bonus=1.000000, nodes=13 <= 300.000000)
                              @ 4  som.Dictionary.at(Dictionary$CustomHash):Object (39 bytes)   relevance-based (relevance=1.000128, probability=59998.000033, bonus=1.000000, nodes=28 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Variable.addConstraint(AbstractConstraint):void (9 bytes)   inline method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000015, bonus=1.000000, nodes=13 <= 300.000000)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                        @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000015, bonus=1.000000, nodes=24 <= 300.000000)
                                      @ 101  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000015, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000128, probability=7.680935, bonus=1.000000, nodes=41 > 0.038411)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                                @ 5  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=59998.000033, bonus=1.000000, nodes=35 <= 300.000000)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                              @ 1  deltablue.UnaryConstraint.addToGraph():void (14 bytes)   relevance-based (relevance=1.000128, probability=59998.000033, bonus=1.000000, nodes=47 <= 300.000000)
                                          @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000015, bonus=1.000000, nodes=13 <= 300.000000)
                                        @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000015, bonus=1.000000, nodes=24 <= 300.000000)
                                      @ 114  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000015, bonus=1.000000, nodes=30 <= 300.000000)
                                @ 1  deltablue.Planner.newMark():int (15 bytes)   relevance-based (relevance=1.000000, probability=59998.000033, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                          @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000003, bonus=1.000000, nodes=13 <= 300.000000)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                        @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000003, bonus=1.000000, nodes=24 <= 300.000000)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f2ce003d750.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                                      @ 184  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000003, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                @ 8  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 713, relevance=1.000000, probability=59998.000033, bonus=1.000000, nodes=72)
                                          @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000003, bonus=1.000000, nodes=13 <= 300.000000)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                                        @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000003, bonus=1.000000, nodes=24 <= 300.000000)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                      @ 218  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000003, bonus=1.000000, nodes=30 <= 300.000000)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f2ce003d750.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                                @ 19  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 713, relevance=1.000000, probability=60167.802225, bonus=1.000000, nodes=72)
                              @ 6  deltablue.Planner.incrementalAdd(AbstractConstraint):void (27 bytes)   relevance-based (relevance=1.000128, probability=59998.000033, bonus=1.000000, nodes=28 <= 300.000000)
                            @ 24  deltablue.AbstractConstraint.addConstraint(Planner):void (10 bytes)   inline method (bytecode parsing)
                              @ 94  deltablue.ScaleConstraint.<init>(Variable, Variable, Variable, Variable, Strength$Sym, Planner):void (28 bytes)   not inlining too large previous low-level graph (low-level-nodes: 1418, relevance=1.000128, probability=59998.000033, bonus=1.000000, nodes=25)
                            @ 9  deltablue.EditConstraint.<init>(Variable, Strength$Sym, Planner):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                              @ 4  deltablue.UnaryConstraint.<init>(Variable, Strength$Sym, Planner):void (16 bytes)   inline method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                                @ 2  deltablue.AbstractConstraint.<init>(Strength$Sym):void (13 bytes)   inline method (bytecode parsing)
                                  @ 6  deltablue.Strength.of(Strength$Sym):Strength (11 bytes)   inline method (bytecode parsing)
                                @ 12  deltablue.AbstractConstraint.addConstraint(Planner):void (10 bytes)   inline method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 39  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                                            @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000001, bonus=1.000000, nodes=13 <= 300.000000)
                            @ 44  deltablue.Plan.execute():void (10 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object):Object (8 bytes)   inline method (bytecode parsing)
                                          @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000001, bonus=1.000000, nodes=24 <= 300.000000)
                                @ 4  java.lang.invoke.LambdaForm$MH/0x00007f2ce0000800.invoke(Object):Object (8 bytes)   inline method (bytecode parsing)
                                        @ 45  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000001, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                            @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                    @ 7  deltablue.Strength$Sym.customHash():int (5 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                                          @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                  @ 1  som.Dictionary.hash(Dictionary$CustomHash):int (20 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                                        @ 101  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 6  som.Dictionary.getBucketIdx(int):int (10 bytes)   inline method (bytecode parsing)
                                  @ 7  som.Dictionary.getBucket(int):Dictionary$Entry (11 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 18  som.IdentityDictionary$IdEntry.match(int, Object):boolean (22 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                          @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                @ 4  som.Dictionary.at(Dictionary$CustomHash):Object (39 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=28 <= 300.000000)
                                        @ 114  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 5  deltablue.Variable.addConstraint(AbstractConstraint):void (9 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                            @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                          @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                        @ 184  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                                    @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000128, probability=0.000128, bonus=1.000000, nodes=41 > 0.038411)
                                  @ 5  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=35 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                                @ 1  deltablue.UnaryConstraint.addToGraph():void (14 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=47 <= 300.000000)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                            @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                          @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                        @ 218  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                                  @ 1  deltablue.Planner.newMark():int (15 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f2ce003d750.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 8  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 713, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=72)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f2ce003d750.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 45  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 19  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 713, relevance=1.000000, probability=1.002830, bonus=1.000000, nodes=72)
                                @ 6  deltablue.Planner.incrementalAdd(AbstractConstraint):void (27 bytes)   relevance-based (relevance=1.000128, probability=1.000000, bonus=1.000000, nodes=28 <= 300.000000)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 101  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 5  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 114  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                                    @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000128, probability=0.000128, bonus=1.000000, nodes=41 > 0.038411)
                                  @ 11  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=35 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                                @ 14  som.Vector.with(Object):Vector (16 bytes)   relevance-based (relevance=1.000128, probability=1.000000, bonus=1.000000, nodes=40 <= 300.000000)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 4  som.Vector.<init>():void (7 bytes)   inline method (bytecode parsing)
                              @ 3  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                            @ 10  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                          @ 184  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.Planner$$Lambda/0x00007f2ce003e228.<init>(Vector):void (10 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 218  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                                      @ 1  deltablue.AbstractConstraint.isInput():boolean (2 bytes)   not inlining no type profile exists
                                      @ 8  deltablue.AbstractConstraint.isSatisfied():boolean (0 bytes)   not inlining no type profile exists
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                                          @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000128, probability=0.000253, bonus=1.000000, nodes=41 > 0.038411)
                                        @ 16  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=1.980139, bonus=1.000000, nodes=35 <= 300.000000)
                                      @ 8  deltablue.Planner.lambda$extractPlanFromConstraints$1(Vector, AbstractConstraint):void (20 bytes)   relevance-based (relevance=1.000000, probability=7.920556, bonus=1.000000, nodes=59 <= 300.000000)
                                    @ 20  deltablue.Planner$$Lambda/0x00007f2ce003e228.apply(Object):void (12 bytes)   relevance-based (relevance=1.000000, probability=7.920556, bonus=1.000000, nodes=64 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 15  som.Vector.forEach(ForEachInterface):void (32 bytes)   not inlining callee invoke probability is too high (invokeP=11.881088, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=77)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                            @ 9  deltablue.Plan.<init>():void (7 bytes)   inline method (bytecode parsing)
                              @ 3  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 45  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 39  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 67  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 20  deltablue.Planner.makePlan(Vector):Plan (86 bytes)   not inlining too large previous low-level graph (low-level-nodes: 840, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=69)
                                @ 22  deltablue.Planner.extractPlanFromConstraints(Vector):Plan (24 bytes)   relevance-based (relevance=1.000128, probability=1.000000, bonus=1.000000, nodes=27 <= 300.000000)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 101  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                                  @ 1  deltablue.UnaryConstraint.isSatisfied():boolean (5 bytes)   trivial (relevance=2.000000, probability=1.000000, bonus=1.000000, nodes=5)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 21  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                            @ 114  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                                @ 16  deltablue.Planner$$Lambda/0x00007f2ce01f68f0.<init>(Planner):void (10 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                                    @ 1  deltablue.UnaryConstraint.getOutput():Variable (5 bytes)   trivial (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=5)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                                    @ 6  deltablue.UnaryConstraint.markUnsatisfied():void (6 bytes)   trivial (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=7)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 184  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  som.Vector.capacity():int (6 bytes)   inline method (bytecode parsing)
                            @ 31  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object, Object, Object, Object):Object (13 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                              @ 9  java.lang.invoke.LambdaForm$DMH/0x00007f2ce0123400.newInvokeSpecial(Object, Object, Object, Object, Object):Object (30 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                @ 7  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 218  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                                          @ 24  som.Vector$$Lambda/0x00007f2ce003fc10.<init>(Object, boolean[], Object[], int[]):void (26 bytes)   relevance-based (relevance=1.000000, probability=0.250000, bonus=1.000000, nodes=17 <= 300.000000)
                                          @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining it exceeds the maximum recursive inlining depth
                                          @ 269  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining it exceeds the maximum recursive inlining depth
                                          @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=202 <= 300.000000)
                                        @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=387 > 300.000000)
                                              @ 17  som.Vector.lambda$remove$0(Object, boolean[], Object[], int[], Object):void (28 bytes)   relevance-based (relevance=1.000000, probability=1.980139, bonus=1.000000, nodes=26 <= 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                                            @ 20  som.Vector$$Lambda/0x00007f2ce003fc10.apply(Object):void (21 bytes)   relevance-based (relevance=1.000000, probability=1.980139, bonus=1.000000, nodes=28 <= 300.000000)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                                          @ 36  som.Vector.forEach(ForEachInterface):void (32 bytes)   relevance-based (relevance=1.000000, probability=0.250000, bonus=1.000000, nodes=41 <= 300.000000)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                                        @ 5  som.Vector.remove(Object):boolean (61 bytes)   relevance-based (relevance=2.000000, probability=0.250000, bonus=1.000000, nodes=73 <= 300.000000)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                                      @ 12  deltablue.Variable.removeConstraint(AbstractConstraint):void (23 bytes)   relevance-based (relevance=1.000000, probability=0.250000, bonus=1.000000, nodes=90 <= 300.000000)
                                    @ 10  deltablue.UnaryConstraint.removeFromGraph():void (21 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=100 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 4  som.Vector.<init>():void (7 bytes)   inline method (bytecode parsing)
                              @ 3  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                            @ 10  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                            @ 14  deltablue.Strength.absoluteWeakest():Strength (4 bytes)   inline method (bytecode parsing)
                                          @ 45  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 17  deltablue.Variable.setWalkStrength(Strength):void (6 bytes)   inline method (bytecode parsing)
                            @ 22  deltablue.Variable.setStay(boolean):void (6 bytes)   inline method (bytecode parsing)
                            @ 48  deltablue.Variable.getConstraints():Vector (5 bytes)   inline accessor method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 52  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                @ 16  deltablue.Planner$$Lambda/0x00007f2ce01f6000.<init>(Vector):void (10 bytes)   inline method (bytecode parsing)
                                          @ 101  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 64  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                                @ 16  deltablue.Planner$$Lambda/0x00007f2ce01f6220.<init>(Vector):void (10 bytes)   inline method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 76  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object):Object (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.lang.invoke.LambdaForm$MH/0x00007f2ce0000800.invoke(Object):Object (8 bytes)   inline method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 114  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 5  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 184  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                                          @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000128, probability=0.000064, bonus=1.000000, nodes=41 > 0.038411)
                                        @ 11  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=35 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                                      @ 26  som.Vector.with(Object):Vector (16 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=40 <= 300.000000)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                      @ 31  som.Vector.isEmpty():boolean (17 bytes)   relevance-based (relevance=1.000031, probability=15962.852941, bonus=1.000000, nodes=10 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 218  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  som.Vector.size():int (10 bytes)   inline method (bytecode parsing)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                            @ 45  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.125000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.125000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 45  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.125000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 101  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.031250, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.031250, bonus=1.000000, nodes=24 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 101  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.031250, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                                            @ 114  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.031250, bonus=1.000000, nodes=13 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.031250, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 114  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.031250, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                                            @ 184  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.005208, bonus=1.000000, nodes=13 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.005208, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 184  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.005208, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 218  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining it exceeds the maximum recursive inlining depth
                                          @ 269  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining it exceeds the maximum recursive inlining depth
                                          @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=202 <= 300.000000)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.005208, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.005208, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 218  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.005208, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                                        @ 269  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=387 > 300.000000)
                                      @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   relevance-based (relevance=1.000000, probability=0.000002, bonus=1.000000, nodes=202 <= 300.000000)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                                    @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.000122, bonus=1.000000, nodes=387 > 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.001953, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.001953, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 45  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.001953, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000061, bonus=1.000000, nodes=13 <= 300.000000)
                                        @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000061, bonus=1.000000, nodes=24 <= 300.000000)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                      @ 45  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000061, bonus=1.000000, nodes=30 <= 300.000000)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000488, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000488, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 101  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000488, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000015, bonus=1.000000, nodes=13 <= 300.000000)
                                        @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000015, bonus=1.000000, nodes=24 <= 300.000000)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                      @ 101  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000015, bonus=1.000000, nodes=30 <= 300.000000)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000488, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000488, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 114  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000488, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000015, bonus=1.000000, nodes=13 <= 300.000000)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                                        @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000015, bonus=1.000000, nodes=24 <= 300.000000)
                                      @ 114  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000015, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000081, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000081, bonus=1.000000, nodes=24 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                                            @ 184  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000081, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000003, bonus=1.000000, nodes=13 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                                        @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000003, bonus=1.000000, nodes=24 <= 300.000000)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                                      @ 184  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000003, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000081, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000081, bonus=1.000000, nodes=24 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                                            @ 218  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000081, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000003, bonus=1.000000, nodes=13 <= 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                                        @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000003, bonus=1.000000, nodes=24 <= 300.000000)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                                      @ 218  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000003, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                  @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000031, bonus=1.000000, nodes=13 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000031, bonus=1.000000, nodes=24 <= 300.000000)
                                              @ 45  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000031, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                            @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000001, bonus=1.000000, nodes=13 <= 300.000000)
                                          @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000001, bonus=1.000000, nodes=24 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                                        @ 45  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000001, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                  @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000008, bonus=1.000000, nodes=13 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000008, bonus=1.000000, nodes=24 <= 300.000000)
                                              @ 101  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000008, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                            @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                          @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                                        @ 101  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                  @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000008, bonus=1.000000, nodes=13 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000008, bonus=1.000000, nodes=24 <= 300.000000)
                                              @ 114  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000008, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                            @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                          @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                                        @ 114  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                  @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000001, bonus=1.000000, nodes=13 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000001, bonus=1.000000, nodes=24 <= 300.000000)
                                              @ 184  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000001, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                            @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                          @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                                        @ 184  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                  @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000001, bonus=1.000000, nodes=13 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000001, bonus=1.000000, nodes=24 <= 300.000000)
                                              @ 218  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000001, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                            @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                                          @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                        @ 218  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                    @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                                                  @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                @ 45  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 45  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                    @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                                                  @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                @ 101  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 101  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 114  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                    @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                                                  @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                @ 114  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 184  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                                                    @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                  @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 184  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 218  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                                                    @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                  @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                                                @ 218  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 45  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                                                      @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                    @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                  @ 45  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 101  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                                                      @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                    @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                  @ 101  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 114  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                                                      @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                    @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                  @ 114  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 184  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                                                      @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                    @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                  @ 184  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 218  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining it exceeds the maximum recursive inlining depth
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 269  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining it exceeds the maximum recursive inlining depth
                                          @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=202 <= 300.000000)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                      @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                    @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                  @ 218  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                                        @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=387 > 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                        @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                      @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                    @ 45  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                                          @ 45  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                        @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                      @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                    @ 101  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                                          @ 101  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                        @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                      @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                    @ 114  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                                          @ 114  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                        @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                      @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                    @ 184  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                                          @ 184  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                        @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                      @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                    @ 218  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                                          @ 218  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                                                  @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining it exceeds the maximum recursive inlining depth
                                                  @ 269  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining it exceeds the maximum recursive inlining depth
                                                  @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=202 <= 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                                                @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=387 > 300.000000)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                                            @ 45  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                                                      @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                                                    @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                  @ 45  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 101  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                                                      @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                                                    @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                  @ 101  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 114  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                                                      @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                    @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                  @ 114  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 184  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                                                      @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                    @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                  @ 184  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 218  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining it exceeds the maximum recursive inlining depth
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 269  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining it exceeds the maximum recursive inlining depth
                                          @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=202 <= 300.000000)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                      @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                    @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                  @ 218  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                                        @ 269  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=387 > 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                                      @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   relevance-based (relevance=1.000000, probability=0.000002, bonus=1.000000, nodes=202 <= 300.000000)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                                    @ 269  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.000122, bonus=1.000000, nodes=387 > 300.000000)
                                  @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   relevance-based (relevance=1.000000, probability=0.007813, bonus=1.000000, nodes=202 <= 300.000000)
                                @ 19  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=387 > 300.000000)
                              @ 81  som.Vector.sort(Comparator):void (23 bytes)   relevance-based (relevance=1.000128, probability=1.000000, bonus=1.000000, nodes=22 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                @ 1  som.Vector.isEmpty():boolean (17 bytes)   relevance-based (relevance=1.000000, probability=31904.705882, bonus=1.000000, nodes=10 <= 300.000000)
                                                        @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                              @ 38  som.Vector.removeFirst():Object (31 bytes)   relevance-based (relevance=1.000000, probability=31904.705882, bonus=1.000000, nodes=18 <= 300.000000)
                                                      @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                    @ 45  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                        @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                    @ 1  deltablue.BinaryConstraint.isSatisfied():boolean (13 bytes)   relevance-based (relevance=1.000009, probability=252703.014329, bonus=1.000000, nodes=14 <= 300.000000)
                                                      @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                    @ 101  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                                    @ 9  som.Vector.append(Object):void (51 bytes)   not inlining relevance-based (relevance=0.000009, probability=2.283526, bonus=1.000000, nodes=35 > 0.002711)
                                  @ 8  deltablue.Planner.lambda$removePropagateFrom$4(Vector, AbstractConstraint):void (13 bytes)   relevance-based (relevance=1.000000, probability=252703.014329, bonus=1.000000, nodes=36 <= 300.000000)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                        @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                @ 20  deltablue.Planner$$Lambda/0x00007f2ce01f6000.apply(Object):void (12 bytes)   relevance-based (relevance=1.000000, probability=252703.014329, bonus=1.000000, nodes=43 <= 300.000000)
                                                      @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                    @ 114  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                              @ 57  som.Vector.forEach(ForEachInterface):void (32 bytes)   relevance-based (relevance=1.000000, probability=31904.705882, bonus=1.000000, nodes=56 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 1  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 6  deltablue.Variable.getConstraints():Vector (5 bytes)   inline accessor method (bytecode parsing)
                            @ 11  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object, Object):Object (10 bytes)   inline method (bytecode parsing)
                              @ 6  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object, Object):Object (24 bytes)   inline method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                                        @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                                      @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                    @ 184  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                                @ 19  deltablue.Planner$$Lambda/0x00007f2ce01f6440.<init>(AbstractConstraint, ForEachInterface):void (15 bytes)   relevance-based (relevance=1.000000, probability=31904.705882, bonus=1.000000, nodes=11 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                        @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                      @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                    @ 218  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                                    @ 12  deltablue.Planner.lambda$constraintsConsuming$3(AbstractConstraint, ForEachInterface, AbstractConstraint):void (20 bytes)   not inlining too large previous low-level graph (low-level-nodes: 391, relevance=1.000000, probability=252703.014329, bonus=1.000000, nodes=26)
                                  @ 20  deltablue.Planner$$Lambda/0x00007f2ce01f6440.apply(Object):void (16 bytes)   relevance-based (relevance=1.000000, probability=252703.014329, bonus=1.000000, nodes=16 <= 300.000000)
                                                  @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining it exceeds the maximum recursive inlining depth
                                                  @ 269  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining it exceeds the maximum recursive inlining depth
                                                  @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=202 <= 300.000000)
                                @ 16  som.Vector.forEach(ForEachInterface):void (32 bytes)   not inlining callee invoke probability is too high (invokeP=7.920556, relevance=1.000000, probability=31904.705882, bonus=1.000000, nodes=33)
                              @ 69  deltablue.Planner.constraintsConsuming(Variable, ForEachInterface):void (20 bytes)   relevance-based (relevance=1.000000, probability=31904.705882, bonus=1.000000, nodes=23 <= 300.000000)
                                                @ 269  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=387 > 300.000000)
                                              @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   relevance-based (relevance=1.000000, probability=0.000001, bonus=1.000000, nodes=202 <= 300.000000)
                                            @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.000061, bonus=1.000000, nodes=387 > 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                  @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000031, bonus=1.000000, nodes=13 <= 300.000000)
                                                @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000031, bonus=1.000000, nodes=24 <= 300.000000)
                                              @ 45  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000031, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                  @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000008, bonus=1.000000, nodes=13 <= 300.000000)
                                                @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000008, bonus=1.000000, nodes=24 <= 300.000000)
                                              @ 101  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000008, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                  @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000008, bonus=1.000000, nodes=13 <= 300.000000)
                                                @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000008, bonus=1.000000, nodes=24 <= 300.000000)
                                              @ 114  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000008, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                  @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000001, bonus=1.000000, nodes=13 <= 300.000000)
                                                @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000001, bonus=1.000000, nodes=24 <= 300.000000)
                                              @ 184  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000001, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                  @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000001, bonus=1.000000, nodes=13 <= 300.000000)
                                                @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000001, bonus=1.000000, nodes=24 <= 300.000000)
                                              @ 218  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000001, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                    @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                  @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                @ 45  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                    @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                  @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                @ 101  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                    @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                  @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                @ 114  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                    @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                  @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                @ 184  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                    @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                  @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                @ 218  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                      @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                    @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                  @ 45  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                      @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                    @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                  @ 101  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                      @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                    @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                  @ 114  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                      @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                    @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                  @ 184  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                      @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                    @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                            @ 81  java.lang.Integer.rotateLeft(int, int):int (9 bytes)   inline method (bytecode parsing)
                                                  @ 218  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 142  java.lang.Integer.rotateLeft(int, int):int (9 bytes)   inline method (bytecode parsing)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 187  java.lang.Integer.rotateLeft(int, int):int (9 bytes)   inline method (bytecode parsing)
                            @ 217  java.lang.Integer.rotateLeft(int, int):int (9 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 257  java.lang.Integer.rotateLeft(int, int):int (9 bytes)   inline method (bytecode parsing)
                            @ 287  java.lang.Integer.rotateLeft(int, int):int (9 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 336  java.lang.Integer.rotateLeft(int, int):int (9 bytes)   inline method (bytecode parsing)
                            @ 366  java.lang.Integer.rotateLeft(int, int):int (9 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 406  java.lang.Integer.rotateLeft(int, int):int (9 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                        @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                      @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                    @ 45  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                        @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                      @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                    @ 101  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                        @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                      @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                    @ 114  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                        @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                      @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                    @ 184  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                        @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                      @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                    @ 218  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                                                  @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining it exceeds the maximum recursive inlining depth
                                                  @ 269  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining it exceeds the maximum recursive inlining depth
                                                  @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=202 <= 300.000000)
                                                @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=387 > 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                      @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                    @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                  @ 45  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                      @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                    @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                  @ 101  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                      @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                    @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                  @ 114  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                      @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                    @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                  @ 184  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                      @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                    @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                  @ 218  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                        @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                      @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                    @ 45  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                        @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                      @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                    @ 101  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                        @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                      @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                    @ 114  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                        @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                      @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                    @ 184  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                        @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                      @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                    @ 218  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                                                  @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining it exceeds the maximum recursive inlining depth
                                                  @ 269  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining it exceeds the maximum recursive inlining depth
                                                  @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=202 <= 300.000000)
                                                @ 269  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=387 > 300.000000)
                                              @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   relevance-based (relevance=1.000000, probability=0.000001, bonus=1.000000, nodes=202 <= 300.000000)
                                            @ 269  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.000061, bonus=1.000000, nodes=387 > 300.000000)
                                          @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   relevance-based (relevance=1.000000, probability=0.003906, bonus=1.000000, nodes=202 <= 300.000000)
                                        @ 19  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.250000, bonus=1.000000, nodes=387 > 300.000000)
                                      @ 81  som.Vector.sort(Comparator):void (23 bytes)   relevance-based (relevance=1.000128, probability=0.500000, bonus=1.000000, nodes=22 <= 300.000000)
                                        @ 1  som.Vector.isEmpty():boolean (17 bytes)   relevance-based (relevance=1.000000, probability=15962.352941, bonus=1.000000, nodes=10 <= 300.000000)
                                      @ 38  som.Vector.removeFirst():Object (31 bytes)   relevance-based (relevance=1.000000, probability=15962.352941, bonus=1.000000, nodes=18 <= 300.000000)
                                            @ 1  deltablue.BinaryConstraint.isSatisfied():boolean (13 bytes)   relevance-based (relevance=1.000009, probability=126430.712726, bonus=1.000000, nodes=14 <= 300.000000)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                            @ 9  som.Vector.append(Object):void (51 bytes)   not inlining relevance-based (relevance=0.000009, probability=1.142479, bonus=1.000000, nodes=35 > 0.002711)
                                          @ 8  deltablue.Planner.lambda$removePropagateFrom$4(Vector, AbstractConstraint):void (13 bytes)   relevance-based (relevance=1.000000, probability=126430.712726, bonus=1.000000, nodes=36 <= 300.000000)
                                        @ 20  deltablue.Planner$$Lambda/0x00007f2ce01f6000.apply(Object):void (12 bytes)   relevance-based (relevance=1.000000, probability=126430.712726, bonus=1.000000, nodes=43 <= 300.000000)
                                      @ 57  som.Vector.forEach(ForEachInterface):void (32 bytes)   relevance-based (relevance=1.000000, probability=15962.352941, bonus=1.000000, nodes=56 <= 300.000000)
                            @ 1  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 6  deltablue.Variable.getConstraints():Vector (5 bytes)   inline accessor method (bytecode parsing)
                            @ 11  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object, Object):Object (10 bytes)   inline method (bytecode parsing)
                              @ 6  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object, Object):Object (24 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                        @ 19  deltablue.Planner$$Lambda/0x00007f2ce01f6440.<init>(AbstractConstraint, ForEachInterface):void (15 bytes)   relevance-based (relevance=1.000000, probability=15962.352941, bonus=1.000000, nodes=11 <= 300.000000)
                                            @ 12  deltablue.Planner.lambda$constraintsConsuming$3(AbstractConstraint, ForEachInterface, AbstractConstraint):void (20 bytes)   not inlining too large previous low-level graph (low-level-nodes: 391, relevance=1.000000, probability=126430.712726, bonus=1.000000, nodes=26)
                                          @ 20  deltablue.Planner$$Lambda/0x00007f2ce01f6440.apply(Object):void (16 bytes)   relevance-based (relevance=1.000000, probability=126430.712726, bonus=1.000000, nodes=16 <= 300.000000)
                                        @ 16  som.Vector.forEach(ForEachInterface):void (32 bytes)   not inlining callee invoke probability is too high (invokeP=7.920556, relevance=1.000000, probability=15962.352941, bonus=1.000000, nodes=33)
                                      @ 69  deltablue.Planner.constraintsConsuming(Variable, ForEachInterface):void (20 bytes)   relevance-based (relevance=1.000000, probability=15962.352941, bonus=1.000000, nodes=23 <= 300.000000)
                                    @ 15  deltablue.Planner.removePropagateFrom(Variable):Vector (86 bytes)   not inlining callee invoke probability is too high (invokeP=31927.490968, relevance=2.000000, probability=0.500000, bonus=1.000000, nodes=202)
                            @ 8  deltablue.Planner.lambda$incrementalRemove$0(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                                          @ 1  deltablue.Planner.newMark():int (15 bytes)   relevance-based (relevance=1.000000, probability=3.960278, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f2ce003d750.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 8  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 713, relevance=1.000000, probability=3.960278, bonus=1.000000, nodes=72)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f2ce003d750.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 19  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 713, relevance=1.000000, probability=3.971486, bonus=1.000000, nodes=72)
                                        @ 2  deltablue.Planner.incrementalAdd(AbstractConstraint):void (27 bytes)   relevance-based (relevance=1.000000, probability=3.960278, bonus=1.000000, nodes=28 <= 300.000000)
                                      @ 20  deltablue.Planner$$Lambda/0x00007f2ce01f68f0.apply(Object):void (12 bytes)   relevance-based (relevance=1.000000, probability=3.960278, bonus=1.000000, nodes=37 <= 300.000000)
                                    @ 26  som.Vector.forEach(ForEachInterface):void (32 bytes)   not inlining callee invoke probability is too high (invokeP=15.863529, relevance=2.000000, probability=0.500000, bonus=1.000000, nodes=53)
                                  @ 9  deltablue.Planner.incrementalRemove(AbstractConstraint):void (30 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=121 <= 300.000000)
                            @ 1  som.Vector.capacity():int (6 bytes)   inline method (bytecode parsing)
                            @ 31  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object, Object, Object, Object):Object (13 bytes)   inline method (bytecode parsing)
                              @ 9  java.lang.invoke.LambdaForm$DMH/0x00007f2ce0123400.newInvokeSpecial(Object, Object, Object, Object, Object):Object (30 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 7  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                        @ 24  som.Vector$$Lambda/0x00007f2ce003fc10.<init>(Object, boolean[], Object[], int[]):void (26 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=17 <= 300.000000)
                                            @ 17  som.Vector.lambda$remove$0(Object, boolean[], Object[], int[], Object):void (28 bytes)   relevance-based (relevance=1.000000, probability=3.960278, bonus=1.000000, nodes=26 <= 300.000000)
                                          @ 20  som.Vector$$Lambda/0x00007f2ce003fc10.apply(Object):void (21 bytes)   relevance-based (relevance=1.000000, probability=3.960278, bonus=1.000000, nodes=28 <= 300.000000)
                                        @ 36  som.Vector.forEach(ForEachInterface):void (32 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=41 <= 300.000000)
                                      @ 5  som.Vector.remove(Object):boolean (61 bytes)   relevance-based (relevance=2.000000, probability=0.500000, bonus=1.000000, nodes=73 <= 300.000000)
                                    @ 12  deltablue.Variable.removeConstraint(AbstractConstraint):void (23 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=90 <= 300.000000)
                                  @ 13  deltablue.UnaryConstraint.removeFromGraph():void (21 bytes)   relevance-based (relevance=4.000000, probability=1.000000, bonus=1.000000, nodes=100 <= 300.000000)
                                @ 55  deltablue.AbstractConstraint.destroyConstraint(Planner):void (17 bytes)   relevance-based (relevance=1.000128, probability=1.000000, bonus=1.000000, nodes=224 <= 300.000000)
                              @ 109  deltablue.Planner.change(Variable, int):void (59 bytes)   not inlining relevance-based (relevance=1.000145, probability=1.000000, bonus=1.000000, nodes=415 > 300.000000)
                            @ 9  deltablue.EditConstraint.<init>(Variable, Strength$Sym, Planner):void (8 bytes)   inline method (bytecode parsing)
                              @ 4  deltablue.UnaryConstraint.<init>(Variable, Strength$Sym, Planner):void (16 bytes)   inline method (bytecode parsing)
                                @ 2  deltablue.AbstractConstraint.<init>(Strength$Sym):void (13 bytes)   inline method (bytecode parsing)
                                  @ 6  deltablue.Strength.of(Strength$Sym):Strength (11 bytes)   inline method (bytecode parsing)
                                @ 12  deltablue.AbstractConstraint.addConstraint(Planner):void (10 bytes)   inline method (bytecode parsing)
                            @ 39  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 44  deltablue.Plan.execute():void (10 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object):Object (8 bytes)   inline method (bytecode parsing)
                                @ 4  java.lang.invoke.LambdaForm$MH/0x00007f2ce0000800.invoke(Object):Object (8 bytes)   inline method (bytecode parsing)
                                    @ 7  deltablue.Strength$Sym.customHash():int (5 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                                  @ 1  som.Dictionary.hash(Dictionary$CustomHash):int (20 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                            @ 6  som.Dictionary.getBucketIdx(int):int (10 bytes)   inline method (bytecode parsing)
                                  @ 7  som.Dictionary.getBucket(int):Dictionary$Entry (11 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                                  @ 18  som.IdentityDictionary$IdEntry.match(int, Object):boolean (22 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                @ 4  som.Dictionary.at(Dictionary$CustomHash):Object (39 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=28 <= 300.000000)
                            @ 5  deltablue.Variable.addConstraint(AbstractConstraint):void (9 bytes)   inline method (bytecode parsing)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                    @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000128, probability=0.000128, bonus=1.000000, nodes=41 > 0.038411)
                                  @ 5  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=35 <= 300.000000)
                                @ 1  deltablue.UnaryConstraint.addToGraph():void (14 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=47 <= 300.000000)
                                  @ 1  deltablue.Planner.newMark():int (15 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f2ce003d750.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 8  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 713, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=72)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f2ce003d750.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 19  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 713, relevance=1.000000, probability=1.002830, bonus=1.000000, nodes=72)
                                @ 6  deltablue.Planner.incrementalAdd(AbstractConstraint):void (27 bytes)   relevance-based (relevance=1.000128, probability=1.000000, bonus=1.000000, nodes=28 <= 300.000000)
                            @ 5  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                    @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000128, probability=0.000128, bonus=1.000000, nodes=41 > 0.038411)
                                  @ 11  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=35 <= 300.000000)
                                @ 14  som.Vector.with(Object):Vector (16 bytes)   relevance-based (relevance=1.000128, probability=1.000000, bonus=1.000000, nodes=40 <= 300.000000)
                            @ 4  som.Vector.<init>():void (7 bytes)   inline method (bytecode parsing)
                              @ 3  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 10  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.Planner$$Lambda/0x00007f2ce003e228.<init>(Vector):void (10 bytes)   inline method (bytecode parsing)
                                      @ 1  deltablue.AbstractConstraint.isInput():boolean (2 bytes)   not inlining no type profile exists
                                      @ 8  deltablue.AbstractConstraint.isSatisfied():boolean (0 bytes)   not inlining no type profile exists
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                          @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000128, probability=0.000253, bonus=1.000000, nodes=41 > 0.038411)
                                        @ 16  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=1.980139, bonus=1.000000, nodes=35 <= 300.000000)
                                      @ 8  deltablue.Planner.lambda$extractPlanFromConstraints$1(Vector, AbstractConstraint):void (20 bytes)   relevance-based (relevance=1.000000, probability=7.920556, bonus=1.000000, nodes=59 <= 300.000000)
                                    @ 20  deltablue.Planner$$Lambda/0x00007f2ce003e228.apply(Object):void (12 bytes)   relevance-based (relevance=1.000000, probability=7.920556, bonus=1.000000, nodes=64 <= 300.000000)
                                  @ 15  som.Vector.forEach(ForEachInterface):void (32 bytes)   not inlining callee invoke probability is too high (invokeP=11.881088, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=77)
                            @ 9  deltablue.Plan.<init>():void (7 bytes)   inline method (bytecode parsing)
                              @ 3  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 39  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 67  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                                  @ 20  deltablue.Planner.makePlan(Vector):Plan (86 bytes)   not inlining too large previous low-level graph (low-level-nodes: 840, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=69)
                                @ 22  deltablue.Planner.extractPlanFromConstraints(Vector):Plan (24 bytes)   relevance-based (relevance=1.000128, probability=1.000000, bonus=1.000000, nodes=27 <= 300.000000)
                                  @ 1  deltablue.UnaryConstraint.isSatisfied():boolean (5 bytes)   trivial (relevance=2.000000, probability=1.000000, bonus=1.000000, nodes=5)
                            @ 21  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.Planner$$Lambda/0x00007f2ce01f68f0.<init>(Planner):void (10 bytes)   inline method (bytecode parsing)
                                    @ 1  deltablue.UnaryConstraint.getOutput():Variable (5 bytes)   trivial (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=5)
                                    @ 6  deltablue.UnaryConstraint.markUnsatisfied():void (6 bytes)   trivial (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=7)
                            @ 1  som.Vector.capacity():int (6 bytes)   inline method (bytecode parsing)
                            @ 31  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object, Object, Object, Object):Object (13 bytes)   inline method (bytecode parsing)
                              @ 9  java.lang.invoke.LambdaForm$DMH/0x00007f2ce0123400.newInvokeSpecial(Object, Object, Object, Object, Object):Object (30 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 7  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                          @ 24  som.Vector$$Lambda/0x00007f2ce003fc10.<init>(Object, boolean[], Object[], int[]):void (26 bytes)   relevance-based (relevance=1.000000, probability=0.250000, bonus=1.000000, nodes=17 <= 300.000000)
                                              @ 17  som.Vector.lambda$remove$0(Object, boolean[], Object[], int[], Object):void (28 bytes)   relevance-based (relevance=1.000000, probability=1.980139, bonus=1.000000, nodes=26 <= 300.000000)
                                            @ 20  som.Vector$$Lambda/0x00007f2ce003fc10.apply(Object):void (21 bytes)   relevance-based (relevance=1.000000, probability=1.980139, bonus=1.000000, nodes=28 <= 300.000000)
                                          @ 36  som.Vector.forEach(ForEachInterface):void (32 bytes)   relevance-based (relevance=1.000000, probability=0.250000, bonus=1.000000, nodes=41 <= 300.000000)
                                        @ 5  som.Vector.remove(Object):boolean (61 bytes)   relevance-based (relevance=2.000000, probability=0.250000, bonus=1.000000, nodes=73 <= 300.000000)
                                      @ 12  deltablue.Variable.removeConstraint(AbstractConstraint):void (23 bytes)   relevance-based (relevance=1.000000, probability=0.250000, bonus=1.000000, nodes=90 <= 300.000000)
                                    @ 10  deltablue.UnaryConstraint.removeFromGraph():void (21 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=100 <= 300.000000)
                            @ 4  som.Vector.<init>():void (7 bytes)   inline method (bytecode parsing)
                              @ 3  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 10  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 14  deltablue.Strength.absoluteWeakest():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 17  deltablue.Variable.setWalkStrength(Strength):void (6 bytes)   inline method (bytecode parsing)
                            @ 22  deltablue.Variable.setStay(boolean):void (6 bytes)   inline method (bytecode parsing)
                            @ 48  deltablue.Variable.getConstraints():Vector (5 bytes)   inline accessor method (bytecode parsing)
                            @ 52  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.Planner$$Lambda/0x00007f2ce01f6000.<init>(Vector):void (10 bytes)   inline method (bytecode parsing)
                            @ 64  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.Planner$$Lambda/0x00007f2ce01f6220.<init>(Vector):void (10 bytes)   inline method (bytecode parsing)
                            @ 76  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object):Object (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.lang.invoke.LambdaForm$MH/0x00007f2ce0000800.invoke(Object):Object (8 bytes)   inline method (bytecode parsing)
                            @ 5  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                          @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000128, probability=0.000064, bonus=1.000000, nodes=41 > 0.038411)
                            @ 36  java.util.Collections$UnmodifiableRandomAccessList.<init>(List):void (6 bytes)   inline method (bytecode parsing)
                                        @ 11  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=35 <= 300.000000)
                                      @ 26  som.Vector.with(Object):Vector (16 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=40 <= 300.000000)
                                      @ 31  som.Vector.isEmpty():boolean (17 bytes)   relevance-based (relevance=1.000031, probability=15962.852941, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 1  som.Vector.size():int (10 bytes)   inline method (bytecode parsing)
                                @ 2  java.util.Collections$UnmodifiableCollection.<init>(Collection):void (22 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=10 <= 300.000000)
                              @ 2  java.util.Collections$UnmodifiableList.<init>(List):void (11 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=14 <= 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.125000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.125000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 45  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.125000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.031250, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.031250, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 101  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.031250, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 17  java.lang.Enum.ordinal():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                              @ 2  java.util.EnumMap.isValidKey(Object):boolean (36 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=18 <= 300.000000)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.031250, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.031250, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 114  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.031250, bonus=1.000000, nodes=30 <= 300.000000)
                              @ 21  java.util.EnumMap.unmaskNull(Object):Object (13 bytes)   trivial (relevance=1.000091, probability=1.000000, bonus=1.000000, nodes=7)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.005208, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.005208, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 184  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.005208, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.005208, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.005208, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 218  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.005208, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                                  @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                                @ 2  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=8)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 1  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000010, probability=1.000000, bonus=1.000000, nodes=5)
                                @ 21  java.lang.String.getBytes(byte[], int, byte):void (44 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=24 <= 300.000000)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                              @ 3  java.lang.StringConcatHelper.prepend(long, byte[], String):long (37 bytes)   relevance-based (relevance=1.051160, probability=1.000000, bonus=1.000000, nodes=40 <= 300.000000)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.001953, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.001953, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 45  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.001953, bonus=1.000000, nodes=30 <= 300.000000)
                              @ 16  java.lang.StringConcatHelper.prepend(long, byte[], String):long (37 bytes)   not inlining relevance-based (relevance=0.051160, probability=0.048670, bonus=1.000000, nodes=19 > 15.347913)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000488, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000488, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 101  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000488, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000488, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000488, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 114  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000488, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000081, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000081, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 184  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000081, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000081, bonus=1.000000, nodes=13 <= 300.000000)
                            @ 6  jdk.internal.misc.Blocker.currentCarrierThread():Thread (9 bytes)   inline method (bytecode parsing)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000081, bonus=1.000000, nodes=24 <= 300.000000)
                              @ 3  java.lang.System$2.currentCarrierThread():Thread (4 bytes)   inline method (bytecode parsing)
                                            @ 218  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000081, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                              @ 0  jdk.internal.misc.VM.isBooted():boolean (13 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                  @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000031, bonus=1.000000, nodes=13 <= 300.000000)
                                                @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000031, bonus=1.000000, nodes=24 <= 300.000000)
                            @ 8  java.util.HashMap.put(Object, Object):Object (13 bytes)   inline method (bytecode parsing)
                                              @ 45  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000031, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                 n            @ 9  java.lang.Object.hashCode():int (0 bytes)   not inlining no methods remaining after filtering less frequent methods (6 methods previously)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                              @ 2  java.util.HashMap.hash(Object):int (20 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=12 <= 300.000000)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                  @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000008, bonus=1.000000, nodes=13 <= 300.000000)
                                                @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000008, bonus=1.000000, nodes=24 <= 300.000000)
                                              @ 101  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000008, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                  @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000008, bonus=1.000000, nodes=13 <= 300.000000)
                              @ 9  java.util.HashMap.putVal(int, Object, Object, boolean, boolean):Object (300 bytes)   not inlining too large previous low-level graph (low-level-nodes: 1159, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=166)
                                                @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000008, bonus=1.000000, nodes=24 <= 300.000000)
                                              @ 114  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000008, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                  @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000001, bonus=1.000000, nodes=13 <= 300.000000)
                                                @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000001, bonus=1.000000, nodes=24 <= 300.000000)
                                              @ 184  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000001, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                  @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000001, bonus=1.000000, nodes=13 <= 300.000000)
                                                @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000001, bonus=1.000000, nodes=24 <= 300.000000)
                                              @ 218  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000001, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                    @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                  @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                @ 45  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                    @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                  @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                @ 101  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                    @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                  @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                @ 114  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                    @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                  @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                @ 184  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                    @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                  @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                @ 218  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                      @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                    @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                  @ 45  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                      @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                    @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                  @ 101  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                      @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                    @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                  @ 114  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                      @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                    @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                  @ 184  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                      @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                    @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                  @ 218  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                        @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                      @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                    @ 45  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                        @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                      @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                    @ 101  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                        @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                      @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                    @ 114  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                        @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                      @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                    @ 184  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                        @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                      @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                    @ 218  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                                                  @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining it exceeds the maximum recursive inlining depth
                                                  @ 269  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining it exceeds the maximum recursive inlining depth
                                                  @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=202 <= 300.000000)
                                                @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=387 > 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                      @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                    @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                  @ 45  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                      @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                    @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                  @ 101  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                      @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                    @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                  @ 114  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                      @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                    @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                  @ 184  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                      @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                    @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                  @ 218  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                        @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                      @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                    @ 45  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                        @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                      @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                    @ 101  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                        @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                      @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                    @ 114  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                        @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                      @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                    @ 184  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                        @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                      @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                    @ 218  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                                                  @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining it exceeds the maximum recursive inlining depth
                                                  @ 269  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining it exceeds the maximum recursive inlining depth
                                                  @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=202 <= 300.000000)
                                                @ 269  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=387 > 300.000000)
                                              @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   relevance-based (relevance=1.000000, probability=0.000001, bonus=1.000000, nodes=202 <= 300.000000)
                                            @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.000061, bonus=1.000000, nodes=387 > 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                  @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000031, bonus=1.000000, nodes=13 <= 300.000000)
                                                @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000031, bonus=1.000000, nodes=24 <= 300.000000)
                                              @ 45  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000031, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                  @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000008, bonus=1.000000, nodes=13 <= 300.000000)
                                                @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000008, bonus=1.000000, nodes=24 <= 300.000000)
                                              @ 101  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000008, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                  @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000008, bonus=1.000000, nodes=13 <= 300.000000)
                                                @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000008, bonus=1.000000, nodes=24 <= 300.000000)
                                              @ 114  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000008, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                  @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000001, bonus=1.000000, nodes=13 <= 300.000000)
                                                @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000001, bonus=1.000000, nodes=24 <= 300.000000)
                                              @ 184  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000001, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                  @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000001, bonus=1.000000, nodes=13 <= 300.000000)
                                                @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000001, bonus=1.000000, nodes=24 <= 300.000000)
                                              @ 218  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000001, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                    @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                  @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                @ 45  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                    @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                  @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                @ 101  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                    @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                  @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                @ 114  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                    @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                  @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                @ 184  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                    @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                  @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                @ 218  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                      @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                    @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                  @ 45  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                      @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                    @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                  @ 101  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                      @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                    @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                  @ 114  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                      @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                    @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                  @ 184  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                      @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                    @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                  @ 218  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                        @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                      @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                    @ 45  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                        @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                      @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                    @ 101  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                        @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                      @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                    @ 114  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                        @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                      @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                    @ 184  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                        @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                      @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                    @ 218  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                                                  @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining it exceeds the maximum recursive inlining depth
                                                  @ 269  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining it exceeds the maximum recursive inlining depth
                                                  @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=202 <= 300.000000)
                                                @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=387 > 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                      @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                    @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                  @ 45  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                      @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                    @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                  @ 101  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                      @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                    @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                  @ 114  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                      @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                    @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                  @ 184  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                      @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                    @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                  @ 218  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                        @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                      @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                    @ 45  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                        @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                      @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                    @ 101  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                        @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                      @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                    @ 114  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                        @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                      @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                    @ 184  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                        @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                      @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                    @ 218  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                                                  @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining it exceeds the maximum recursive inlining depth
                                                  @ 269  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining it exceeds the maximum recursive inlining depth
                                                  @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=202 <= 300.000000)
                                                @ 269  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=387 > 300.000000)
                                              @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   relevance-based (relevance=1.000000, probability=0.000001, bonus=1.000000, nodes=202 <= 300.000000)
                                            @ 269  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.000061, bonus=1.000000, nodes=387 > 300.000000)
                                          @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   relevance-based (relevance=1.000000, probability=0.003906, bonus=1.000000, nodes=202 <= 300.000000)
                                        @ 19  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.250000, bonus=1.000000, nodes=387 > 300.000000)
                                      @ 81  som.Vector.sort(Comparator):void (23 bytes)   relevance-based (relevance=1.000128, probability=0.500000, bonus=1.000000, nodes=22 <= 300.000000)
                                        @ 1  som.Vector.isEmpty():boolean (17 bytes)   relevance-based (relevance=1.000000, probability=15962.352941, bonus=1.000000, nodes=10 <= 300.000000)
                                      @ 38  som.Vector.removeFirst():Object (31 bytes)   relevance-based (relevance=1.000000, probability=15962.352941, bonus=1.000000, nodes=18 <= 300.000000)
                                            @ 1  deltablue.BinaryConstraint.isSatisfied():boolean (13 bytes)   relevance-based (relevance=1.000009, probability=126430.712726, bonus=1.000000, nodes=14 <= 300.000000)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                            @ 9  som.Vector.append(Object):void (51 bytes)   not inlining relevance-based (relevance=0.000009, probability=1.142479, bonus=1.000000, nodes=35 > 0.002711)
                                          @ 8  deltablue.Planner.lambda$removePropagateFrom$4(Vector, AbstractConstraint):void (13 bytes)   relevance-based (relevance=1.000000, probability=126430.712726, bonus=1.000000, nodes=36 <= 300.000000)
                                        @ 20  deltablue.Planner$$Lambda/0x00007f2ce01f6000.apply(Object):void (12 bytes)   relevance-based (relevance=1.000000, probability=126430.712726, bonus=1.000000, nodes=43 <= 300.000000)
                                      @ 57  som.Vector.forEach(ForEachInterface):void (32 bytes)   relevance-based (relevance=1.000000, probability=15962.352941, bonus=1.000000, nodes=56 <= 300.000000)
                            @ 1  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 6  deltablue.Variable.getConstraints():Vector (5 bytes)   inline accessor method (bytecode parsing)
                            @ 11  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object, Object):Object (10 bytes)   inline method (bytecode parsing)
                              @ 6  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object, Object):Object (24 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                        @ 19  deltablue.Planner$$Lambda/0x00007f2ce01f6440.<init>(AbstractConstraint, ForEachInterface):void (15 bytes)   relevance-based (relevance=1.000000, probability=15962.352941, bonus=1.000000, nodes=11 <= 300.000000)
                                            @ 12  deltablue.Planner.lambda$constraintsConsuming$3(AbstractConstraint, ForEachInterface, AbstractConstraint):void (20 bytes)   not inlining too large previous low-level graph (low-level-nodes: 391, relevance=1.000000, probability=126430.712726, bonus=1.000000, nodes=26)
                                          @ 20  deltablue.Planner$$Lambda/0x00007f2ce01f6440.apply(Object):void (16 bytes)   relevance-based (relevance=1.000000, probability=126430.712726, bonus=1.000000, nodes=16 <= 300.000000)
                                        @ 16  som.Vector.forEach(ForEachInterface):void (32 bytes)   not inlining callee invoke probability is too high (invokeP=7.920556, relevance=1.000000, probability=15962.352941, bonus=1.000000, nodes=33)
                                      @ 69  deltablue.Planner.constraintsConsuming(Variable, ForEachInterface):void (20 bytes)   relevance-based (relevance=1.000000, probability=15962.352941, bonus=1.000000, nodes=23 <= 300.000000)
                                    @ 15  deltablue.Planner.removePropagateFrom(Variable):Vector (86 bytes)   not inlining callee invoke probability is too high (invokeP=31927.490968, relevance=2.000000, probability=0.500000, bonus=1.000000, nodes=202)
                            @ 8  deltablue.Planner.lambda$incrementalRemove$0(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                                          @ 1  deltablue.Planner.newMark():int (15 bytes)   relevance-based (relevance=1.000000, probability=3.960278, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f2ce003d750.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 8  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 713, relevance=1.000000, probability=3.960278, bonus=1.000000, nodes=72)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f2ce003d750.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 19  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 713, relevance=1.000000, probability=3.971486, bonus=1.000000, nodes=72)
                                        @ 2  deltablue.Planner.incrementalAdd(AbstractConstraint):void (27 bytes)   relevance-based (relevance=1.000000, probability=3.960278, bonus=1.000000, nodes=28 <= 300.000000)
                                      @ 20  deltablue.Planner$$Lambda/0x00007f2ce01f68f0.apply(Object):void (12 bytes)   relevance-based (relevance=1.000000, probability=3.960278, bonus=1.000000, nodes=37 <= 300.000000)
                                    @ 26  som.Vector.forEach(ForEachInterface):void (32 bytes)   not inlining callee invoke probability is too high (invokeP=15.863529, relevance=2.000000, probability=0.500000, bonus=1.000000, nodes=53)
                                  @ 9  deltablue.Planner.incrementalRemove(AbstractConstraint):void (30 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=121 <= 300.000000)
                            @ 1  som.Vector.capacity():int (6 bytes)   inline method (bytecode parsing)
                            @ 31  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object, Object, Object, Object):Object (13 bytes)   inline method (bytecode parsing)
                              @ 9  java.lang.invoke.LambdaForm$DMH/0x00007f2ce0123400.newInvokeSpecial(Object, Object, Object, Object, Object):Object (30 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 7  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                        @ 24  som.Vector$$Lambda/0x00007f2ce003fc10.<init>(Object, boolean[], Object[], int[]):void (26 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=17 <= 300.000000)
                                            @ 17  som.Vector.lambda$remove$0(Object, boolean[], Object[], int[], Object):void (28 bytes)   relevance-based (relevance=1.000000, probability=3.960278, bonus=1.000000, nodes=26 <= 300.000000)
                                          @ 20  som.Vector$$Lambda/0x00007f2ce003fc10.apply(Object):void (21 bytes)   relevance-based (relevance=1.000000, probability=3.960278, bonus=1.000000, nodes=28 <= 300.000000)
                                        @ 36  som.Vector.forEach(ForEachInterface):void (32 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=41 <= 300.000000)
                                      @ 5  som.Vector.remove(Object):boolean (61 bytes)   relevance-based (relevance=2.000000, probability=0.500000, bonus=1.000000, nodes=73 <= 300.000000)
                                    @ 12  deltablue.Variable.removeConstraint(AbstractConstraint):void (23 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=90 <= 300.000000)
                                  @ 13  deltablue.UnaryConstraint.removeFromGraph():void (21 bytes)   relevance-based (relevance=4.000000, probability=1.000000, bonus=1.000000, nodes=100 <= 300.000000)
                                @ 55  deltablue.AbstractConstraint.destroyConstraint(Planner):void (17 bytes)   relevance-based (relevance=1.000128, probability=1.000000, bonus=1.000000, nodes=224 <= 300.000000)
                              @ 139  deltablue.Planner.change(Variable, int):void (59 bytes)   not inlining relevance-based (relevance=1.000145, probability=1.000000, bonus=1.000000, nodes=415 > 300.000000)
                            @ 9  deltablue.EditConstraint.<init>(Variable, Strength$Sym, Planner):void (8 bytes)   inline method (bytecode parsing)
                              @ 4  deltablue.UnaryConstraint.<init>(Variable, Strength$Sym, Planner):void (16 bytes)   inline method (bytecode parsing)
                                @ 2  deltablue.AbstractConstraint.<init>(Strength$Sym):void (13 bytes)   inline method (bytecode parsing)
                                  @ 6  deltablue.Strength.of(Strength$Sym):Strength (11 bytes)   inline method (bytecode parsing)
                                @ 12  deltablue.AbstractConstraint.addConstraint(Planner):void (10 bytes)   inline method (bytecode parsing)
                            @ 39  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 44  deltablue.Plan.execute():void (10 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object):Object (8 bytes)   inline method (bytecode parsing)
                                @ 4  java.lang.invoke.LambdaForm$MH/0x00007f2ce0000800.invoke(Object):Object (8 bytes)   inline method (bytecode parsing)
                                    @ 7  deltablue.Strength$Sym.customHash():int (5 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                                  @ 1  som.Dictionary.hash(Dictionary$CustomHash):int (20 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                            @ 6  som.Dictionary.getBucketIdx(int):int (10 bytes)   inline method (bytecode parsing)
                                  @ 7  som.Dictionary.getBucket(int):Dictionary$Entry (11 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                                  @ 18  som.IdentityDictionary$IdEntry.match(int, Object):boolean (22 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                @ 4  som.Dictionary.at(Dictionary$CustomHash):Object (39 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=28 <= 300.000000)
                            @ 5  deltablue.Variable.addConstraint(AbstractConstraint):void (9 bytes)   inline method (bytecode parsing)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                    @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000128, probability=0.000128, bonus=1.000000, nodes=41 > 0.038411)
                                  @ 5  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=35 <= 300.000000)
                                @ 1  deltablue.UnaryConstraint.addToGraph():void (14 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=47 <= 300.000000)
                                  @ 1  deltablue.Planner.newMark():int (15 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f2ce003d750.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 8  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 713, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=72)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 12  java.lang.Integer.getChars(int, int, byte[]):int (121 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=59 <= 300.000000)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f2ce003d750.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                              @ 3  java.lang.StringConcatHelper.prepend(long, byte[], int):long (30 bytes)   relevance-based (relevance=1.010855, probability=1.000000, bonus=1.000000, nodes=65 <= 300.000000)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 19  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 713, relevance=1.000000, probability=1.002830, bonus=1.000000, nodes=72)
                                @ 6  deltablue.Planner.incrementalAdd(AbstractConstraint):void (27 bytes)   relevance-based (relevance=1.000128, probability=1.000000, bonus=1.000000, nodes=28 <= 300.000000)
                                  @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=0.989262, probability=0.989262, bonus=1.000000, nodes=5)
                                @ 2  java.lang.String.length():int (11 bytes)   trivial (relevance=0.989262, probability=0.989262, bonus=1.000000, nodes=8)
                            @ 5  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                  @ 1  java.lang.String.coder():byte (15 bytes)   trivial (relevance=0.989272, probability=0.989262, bonus=1.000000, nodes=5)
                                @ 21  java.lang.String.getBytes(byte[], int, byte):void (44 bytes)   relevance-based (relevance=0.989262, probability=0.989262, bonus=1.000000, nodes=24 <= 296.778523)
                              @ 16  java.lang.StringConcatHelper.prepend(long, byte[], String):long (37 bytes)   relevance-based (relevance=0.989262, probability=0.989262, bonus=1.000000, nodes=37 <= 296.778523)
                                    @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000128, probability=0.000128, bonus=1.000000, nodes=41 > 0.038411)
                                  @ 11  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=35 <= 300.000000)
                                @ 14  som.Vector.with(Object):Vector (16 bytes)   relevance-based (relevance=1.000128, probability=1.000000, bonus=1.000000, nodes=40 <= 300.000000)
                            @ 4  som.Vector.<init>():void (7 bytes)   inline method (bytecode parsing)
                              @ 3  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 10  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.Planner$$Lambda/0x00007f2ce003e228.<init>(Vector):void (10 bytes)   inline method (bytecode parsing)
                                      @ 1  deltablue.AbstractConstraint.isInput():boolean (2 bytes)   not inlining no type profile exists
                                      @ 8  deltablue.AbstractConstraint.isSatisfied():boolean (0 bytes)   not inlining no type profile exists
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                          @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000128, probability=0.000253, bonus=1.000000, nodes=41 > 0.038411)
                                        @ 16  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=1.980139, bonus=1.000000, nodes=35 <= 300.000000)
                                      @ 8  deltablue.Planner.lambda$extractPlanFromConstraints$1(Vector, AbstractConstraint):void (20 bytes)   relevance-based (relevance=1.000000, probability=7.920556, bonus=1.000000, nodes=59 <= 300.000000)
                                    @ 20  deltablue.Planner$$Lambda/0x00007f2ce003e228.apply(Object):void (12 bytes)   relevance-based (relevance=1.000000, probability=7.920556, bonus=1.000000, nodes=64 <= 300.000000)
                                  @ 15  som.Vector.forEach(ForEachInterface):void (32 bytes)   not inlining callee invoke probability is too high (invokeP=11.881088, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=77)
                            @ 9  deltablue.Plan.<init>():void (7 bytes)   inline method (bytecode parsing)
                              @ 3  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 39  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 67  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                                  @ 20  deltablue.Planner.makePlan(Vector):Plan (86 bytes)   not inlining too large previous low-level graph (low-level-nodes: 840, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=69)
                                @ 22  deltablue.Planner.extractPlanFromConstraints(Vector):Plan (24 bytes)   relevance-based (relevance=1.000128, probability=1.000000, bonus=1.000000, nodes=27 <= 300.000000)
                                  @ 1  deltablue.UnaryConstraint.isSatisfied():boolean (5 bytes)   trivial (relevance=2.000000, probability=1.000000, bonus=1.000000, nodes=5)
                            @ 21  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.Planner$$Lambda/0x00007f2ce01f68f0.<init>(Planner):void (10 bytes)   inline method (bytecode parsing)
                                    @ 1  deltablue.UnaryConstraint.getOutput():Variable (5 bytes)   trivial (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=5)
                                    @ 6  deltablue.UnaryConstraint.markUnsatisfied():void (6 bytes)   trivial (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=7)
                            @ 1  som.Vector.capacity():int (6 bytes)   inline method (bytecode parsing)
                            @ 31  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object, Object, Object, Object):Object (13 bytes)   inline method (bytecode parsing)
                              @ 9  java.lang.invoke.LambdaForm$DMH/0x00007f2ce0123400.newInvokeSpecial(Object, Object, Object, Object, Object):Object (30 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 7  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                          @ 24  som.Vector$$Lambda/0x00007f2ce003fc10.<init>(Object, boolean[], Object[], int[]):void (26 bytes)   relevance-based (relevance=1.000000, probability=0.250000, bonus=1.000000, nodes=17 <= 300.000000)
                                              @ 17  som.Vector.lambda$remove$0(Object, boolean[], Object[], int[], Object):void (28 bytes)   relevance-based (relevance=1.000000, probability=1.980139, bonus=1.000000, nodes=26 <= 300.000000)
                                            @ 20  som.Vector$$Lambda/0x00007f2ce003fc10.apply(Object):void (21 bytes)   relevance-based (relevance=1.000000, probability=1.980139, bonus=1.000000, nodes=28 <= 300.000000)
                                          @ 36  som.Vector.forEach(ForEachInterface):void (32 bytes)   relevance-based (relevance=1.000000, probability=0.250000, bonus=1.000000, nodes=41 <= 300.000000)
                                        @ 5  som.Vector.remove(Object):boolean (61 bytes)   relevance-based (relevance=2.000000, probability=0.250000, bonus=1.000000, nodes=73 <= 300.000000)
                                      @ 12  deltablue.Variable.removeConstraint(AbstractConstraint):void (23 bytes)   relevance-based (relevance=1.000000, probability=0.250000, bonus=1.000000, nodes=90 <= 300.000000)
                                    @ 10  deltablue.UnaryConstraint.removeFromGraph():void (21 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=100 <= 300.000000)
                            @ 4  som.Vector.<init>():void (7 bytes)   inline method (bytecode parsing)
                              @ 3  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 10  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 14  deltablue.Strength.absoluteWeakest():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 17  deltablue.Variable.setWalkStrength(Strength):void (6 bytes)   inline method (bytecode parsing)
                            @ 22  deltablue.Variable.setStay(boolean):void (6 bytes)   inline method (bytecode parsing)
                            @ 48  deltablue.Variable.getConstraints():Vector (5 bytes)   inline accessor method (bytecode parsing)
                            @ 52  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.Planner$$Lambda/0x00007f2ce01f6000.<init>(Vector):void (10 bytes)   inline method (bytecode parsing)
                            @ 64  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.Planner$$Lambda/0x00007f2ce01f6220.<init>(Vector):void (10 bytes)   inline method (bytecode parsing)
                            @ 76  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object):Object (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.lang.invoke.LambdaForm$MH/0x00007f2ce0000800.invoke(Object):Object (8 bytes)   inline method (bytecode parsing)
                            @ 5  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                          @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000128, probability=0.000064, bonus=1.000000, nodes=41 > 0.038411)
                                        @ 11  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=35 <= 300.000000)
                                      @ 26  som.Vector.with(Object):Vector (16 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=40 <= 300.000000)
                                      @ 31  som.Vector.isEmpty():boolean (17 bytes)   relevance-based (relevance=1.000031, probability=15962.852941, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 1  som.Vector.size():int (10 bytes)   inline method (bytecode parsing)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.125000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.125000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 45  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.125000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.031250, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.031250, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 101  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.031250, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.031250, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.031250, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 114  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.031250, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.005208, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.005208, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 184  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.005208, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.005208, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.005208, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 218  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.005208, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 12  java.nio.CharBuffer.<init>(int, int, int, int, char[], int, MemorySegment):void (24 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.001953, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.001953, bonus=1.000000, nodes=24 <= 300.000000)
                            @ 2  java.nio.CharBuffer.limit(int):CharBuffer (8 bytes)   inline method (bytecode parsing)
                                            @ 45  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.001953, bonus=1.000000, nodes=30 <= 300.000000)
                                    @ 2  java.nio.Buffer.limit(int):Buffer (65 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=27 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 39  java.nio.CharBuffer.limit(int):Buffer (6 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=29 <= 300.000000)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 2  java.nio.CharBuffer.position(int):CharBuffer (8 bytes)   inline method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000488, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000488, bonus=1.000000, nodes=24 <= 300.000000)
                                    @ 2  java.nio.Buffer.position(int):Buffer (52 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=16 <= 300.000000)
                                            @ 101  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000488, bonus=1.000000, nodes=30 <= 300.000000)
                                  @ 45  java.nio.CharBuffer.position(int):Buffer (6 bytes)   relevance-based (relevance=1.087055, probability=1.000000, bonus=1.000000, nodes=18 <= 300.000000)
                                @ 8  java.nio.Buffer.<init>(int, int, int, int, MemorySegment):void (105 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=56 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                              @ 8  java.nio.HeapCharBuffer.<init>(char[], int, int, MemorySegment):void (23 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=68 <= 300.000000)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000488, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000488, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 114  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000488, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000081, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000081, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 184  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000081, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000081, bonus=1.000000, nodes=13 <= 300.000000)
                            @ 18  jdk.graal.compiler.replacements.AllocationSnippets.allocateInstanceImpl(Word, UnsignedWord, boolean, AllocationSnippets$FillContent, boolean, boolean, AllocationSnippets$AllocationProfilingData):Object (143 bytes)   inline method (bytecode parsing)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000081, bonus=1.000000, nodes=24 <= 300.000000)
                              @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getTLABInfo():Word (5 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getThread():Word (8 bytes)   inline method (bytecode parsing)
                                            @ 218  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000081, bonus=1.000000, nodes=30 <= 300.000000)
                                  @ 4  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.registerAsWord(Register):Word (7 bytes)   inline method (bytecode parsing)
                              @ 9  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.readTlabTop(Word):Word (5 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.readTlabTop(Word):Word (17 bytes)   inline method (bytecode parsing)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                              @ 17  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.readTlabEnd(Word):Word (5 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.readTlabEnd(Word):Word (17 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                              @ 35  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.useTLAB():boolean (7 bytes)   inline method (bytecode parsing)
                              @ 47  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.shouldAllocateInTLAB(UnsignedWord, boolean):boolean (33 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                              @ 77  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.writeTlabTop(Word, Word):void (6 bytes)   inline method (bytecode parsing)
                                @ 2  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.writeTlabTop(Word, Word):void (15 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                              @ 84  jdk.graal.compiler.replacements.AllocationSnippets.emitPrefetchAllocate(Word, boolean):void (61 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getPrefetchStyle():int (7 bytes)   inline method (bytecode parsing)
                                @ 9  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getPrefetchLines(boolean):int (18 bytes)   inline method (bytecode parsing)
                                @ 14  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getPrefetchStepSize():int (7 bytes)   inline method (bytecode parsing)
                                @ 20  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getPrefetchDistance():int (7 bytes)   inline method (bytecode parsing)
                              @ 103  jdk.graal.compiler.replacements.AllocationSnippets.formatObject(Word, UnsignedWord, Word, AllocationSnippets$FillContent, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):Object (41 bytes)   inline method (bytecode parsing)
                                @ 4  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.initializeObjectHeader(Word, Word, boolean):void (29 bytes)   inline method (bytecode parsing)
                                  @ 25  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.initializeObjectHeader(Word, Word, KlassPointer):void (20 bytes)   inline method (bytecode parsing)
                                @ 8  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.instanceHeaderSize():int (7 bytes)   inline method (bytecode parsing)
                                @ 27  jdk.graal.compiler.replacements.AllocationSnippets.fillContents(Word, AllocationSnippets$FillContent, int, UnsignedWord, boolean, boolean, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):void (58 bytes)   inline method (bytecode parsing)
                                  @ 22  jdk.graal.compiler.replacements.AllocationSnippets.zeroMemory(Word, int, UnsignedWord, boolean, boolean, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):void (19 bytes)   inline method (bytecode parsing)
                                    @ 15  jdk.graal.compiler.replacements.AllocationSnippets.fillMemory(long, Word, int, UnsignedWord, boolean, boolean, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):void (194 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                                      @ 17  jdk.graal.compiler.replacements.ReplacementsUtil.dynamicAssert(boolean, String):void (12 bytes)   inline method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                      @ 56  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                                                  @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000031, bonus=1.000000, nodes=13 <= 300.000000)
                                                @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000031, bonus=1.000000, nodes=24 <= 300.000000)
                                              @ 45  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000031, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                                      @ 89  jdk.graal.compiler.replacements.ReplacementsUtil.dynamicAssert(boolean, String):void (12 bytes)   inline method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                                      @ 153  jdk.graal.compiler.replacements.ReplacementsUtil.staticAssert(boolean, String):void (12 bytes)   inline method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                      @ 167  jdk.graal.compiler.replacements.AllocationSnippets.fillMemoryAlignedUnrollable(long, Word, UnsignedWord, UnsignedWord, boolean, AllocationSnippets$AllocationSnippetCounters):void (68 bytes)   inline method (bytecode parsing)
                                                  @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000008, bonus=1.000000, nodes=13 <= 300.000000)
                                        @ 5  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                          @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                                                @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000008, bonus=1.000000, nodes=24 <= 300.000000)
                                        @ 44  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                                              @ 101  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000008, bonus=1.000000, nodes=30 <= 300.000000)
                                      @ 190  jdk.graal.compiler.replacements.AllocationSnippets.fillMemoryAligned(long, Word, UnsignedWord, UnsignedWord, boolean, UnsignedWord, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):void (155 bytes)   inline method (bytecode parsing)
                                        @ 91  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                                        @ 105  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                          @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                        @ 134  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                                                  @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000008, bonus=1.000000, nodes=13 <= 300.000000)
                                                @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000008, bonus=1.000000, nodes=24 <= 300.000000)
                                @ 33  jdk.graal.compiler.replacements.AllocationSnippets.emitMemoryBarrierIf(boolean):void (14 bytes)   inline method (bytecode parsing)
                                              @ 114  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000008, bonus=1.000000, nodes=30 <= 300.000000)
                              @ 119  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                              @ 124  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.callNewInstanceStub(Word):Object (33 bytes)   inline method (bytecode parsing)
                                @ 21  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.nonNullOrDeopt(Object):Object (27 bytes)   inline method (bytecode parsing)
                              @ 133  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.profileAllocation(AllocationSnippets$AllocationProfilingData, UnsignedWord):void (51 bytes)   inline method (bytecode parsing)
                              @ 139  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.verifyOop(Object):Object (5 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.verifyOop(Object):Object (19 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                  @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000001, bonus=1.000000, nodes=13 <= 300.000000)
                                                @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000001, bonus=1.000000, nodes=24 <= 300.000000)
                                              @ 184  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000001, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                  @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000001, bonus=1.000000, nodes=13 <= 300.000000)
                                                @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000001, bonus=1.000000, nodes=24 <= 300.000000)
                                              @ 218  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000001, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                    @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                  @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                @ 45  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 12  java.nio.CharBuffer.<init>(int, int, int, int, char[], int, MemorySegment):void (24 bytes)   inline method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                    @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                  @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                            @ 2  java.nio.CharBuffer.limit(int):CharBuffer (8 bytes)   inline method (bytecode parsing)
                                                @ 101  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                                  @ 2  java.nio.Buffer.limit(int):Buffer (65 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=27 <= 300.000000)
                                @ 39  java.nio.CharBuffer.limit(int):Buffer (6 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=29 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 2  java.nio.CharBuffer.position(int):CharBuffer (8 bytes)   inline method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 2  java.nio.Buffer.position(int):Buffer (52 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=16 <= 300.000000)
                                                    @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                @ 45  java.nio.CharBuffer.position(int):Buffer (6 bytes)   relevance-based (relevance=1.087055, probability=1.000000, bonus=1.000000, nodes=18 <= 300.000000)
                                                  @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                              @ 8  java.nio.Buffer.<init>(int, int, int, int, MemorySegment):void (105 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=56 <= 300.000000)
                                                @ 114  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                    @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                  @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                @ 184  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                    @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                  @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                @ 218  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                      @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                    @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                  @ 45  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 2  java.nio.CharBuffer.limit(int):CharBuffer (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 2  java.nio.Buffer.limit(int):Buffer (65 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=27 <= 300.000000)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                @ 39  java.nio.CharBuffer.limit(int):Buffer (6 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=29 <= 300.000000)
                                                      @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                            @ 2  java.nio.CharBuffer.position(int):CharBuffer (8 bytes)   inline method (bytecode parsing)
                                                    @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                  @ 101  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                                  @ 2  java.nio.Buffer.position(int):Buffer (52 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=16 <= 300.000000)
                                @ 45  java.nio.CharBuffer.position(int):Buffer (6 bytes)   relevance-based (relevance=1.087055, probability=1.000000, bonus=1.000000, nodes=18 <= 300.000000)
                              @ 8  java.nio.Buffer.<init>(int, int, int, int, MemorySegment):void (105 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=61 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                      @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                    @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                  @ 114  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                      @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                    @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                  @ 184  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                      @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                    @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                  @ 218  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                        @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                            @ 8  java.util.Arrays$ArrayItr.<init>(Object[]):void (10 bytes)   inline method (bytecode parsing)
                                                      @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                    @ 45  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                                  @ 5  java.util.ArrayList$Itr.<init>(ArrayList):void (26 bytes)   relevance-based (relevance=1.000000, probability=0.950360, bonus=1.000000, nodes=15 <= 300.000000)
                                @ 17  java.util.ArrayList.iterator():Iterator (9 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=26 <= 300.000000)
                              @ 5  java.util.Collections$UnmodifiableCollection$1.<init>(Collections$UnmodifiableCollection):void (26 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=49 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                        @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                      @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                    @ 101  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                        @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                      @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                    @ 114  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                        @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                      @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                    @ 184  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                        @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                      @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                    @ 218  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                                                  @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining it exceeds the maximum recursive inlining depth
                                                  @ 269  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining it exceeds the maximum recursive inlining depth
                                                  @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=202 <= 300.000000)
                                                @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=387 > 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                      @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                    @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                  @ 45  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                      @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                    @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                  @ 101  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                      @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                    @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                  @ 114  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                      @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                    @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                  @ 184  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                      @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                    @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                  @ 218  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                        @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                      @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                    @ 45  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                        @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                      @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                    @ 101  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                        @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                      @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                    @ 114  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                        @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                      @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                    @ 184  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                        @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                      @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                    @ 218  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                                                  @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining it exceeds the maximum recursive inlining depth
                                                  @ 269  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining it exceeds the maximum recursive inlining depth
                                                  @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=202 <= 300.000000)
                                                @ 269  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=387 > 300.000000)
                                              @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   relevance-based (relevance=1.000000, probability=0.000001, bonus=1.000000, nodes=202 <= 300.000000)
                                            @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.000061, bonus=1.000000, nodes=387 > 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                  @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000031, bonus=1.000000, nodes=13 <= 300.000000)
                                                @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000031, bonus=1.000000, nodes=24 <= 300.000000)
                                              @ 45  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000031, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                  @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000008, bonus=1.000000, nodes=13 <= 300.000000)
                                                @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000008, bonus=1.000000, nodes=24 <= 300.000000)
                                              @ 101  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000008, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                  @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000008, bonus=1.000000, nodes=13 <= 300.000000)
                                                @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000008, bonus=1.000000, nodes=24 <= 300.000000)
                                              @ 114  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000008, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                  @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000001, bonus=1.000000, nodes=13 <= 300.000000)
                                                @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000001, bonus=1.000000, nodes=24 <= 300.000000)
                                              @ 184  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000001, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                  @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000001, bonus=1.000000, nodes=13 <= 300.000000)
                                                @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000001, bonus=1.000000, nodes=24 <= 300.000000)
                                              @ 218  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000001, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                    @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                  @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                @ 45  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                    @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                  @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                @ 101  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                    @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                  @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                @ 114  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                              @ 20  java.util.HashMap.resize():HashMap$Node[] (356 bytes)   not inlining too large previous low-level graph (low-level-nodes: 995, relevance=0.261394, probability=0.207227, bonus=1.000000, nodes=188)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                    @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                  @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                @ 184  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                              @ 123  java.util.HashMap$TreeNode.putTreeVal(HashMap, HashMap$Node[], int, Object, Object):HashMap$TreeNode (314 bytes)   not inlining relevance-based (relevance=0.003400, probability=0.002695, bonus=1.000000, nodes=219 > 1.019995)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                    @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                  @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                @ 218  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                              @ 91  jdk.vm.ci.meta.Assumptions$ConcreteMethod.equals(Object):boolean (68 bytes)   not inlining relevance-based (relevance=0.131121, probability=0.103949, bonus=1.000000, nodes=188 > 39.336348)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 9  java.util.LinkedHashMap$Entry.<init>(int, Object, Object, HashMap$Node):void (10 bytes)   inline method (bytecode parsing)
                                @ 6  java.util.HashMap$Node.<init>(int, Object, Object, HashMap$Node):void (26 bytes)   relevance-based (relevance=0.160141, probability=0.105271, bonus=1.000000, nodes=17 <= 48.042436)
                                @ 17  java.util.LinkedHashMap.linkNodeAtEnd(LinkedHashMap$Entry):void (76 bytes)   relevance-based (relevance=0.160141, probability=0.105271, bonus=1.000000, nodes=26 <= 48.042436)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                                @ 9  java.util.HashMap$Node.<init>(int, Object, Object, HashMap$Node):void (26 bytes)   relevance-based (relevance=0.777414, probability=0.511042, bonus=1.000000, nodes=17 <= 233.224188)
                              @ 56  java.util.HashMap.newNode(int, Object, Object, HashMap$Node):HashMap$Node (13 bytes)   relevance-based (relevance=0.777414, probability=0.616313, bonus=1.000000, nodes=60 <= 233.224188)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                      @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                    @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                  @ 45  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                              @ 203  java.lang.Long.equals(Object):boolean (30 bytes)   not inlining relevance-based (relevance=0.016075, probability=0.012149, bonus=1.000000, nodes=169 > 4.822529)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 9  java.util.LinkedHashMap$Entry.<init>(int, Object, Object, HashMap$Node):void (10 bytes)   inline method (bytecode parsing)
                                                      @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                    @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                @ 6  java.util.HashMap$Node.<init>(int, Object, Object, HashMap$Node):void (26 bytes)   not inlining relevance-based (relevance=0.049394, probability=0.034020, bonus=1.000000, nodes=17 > 14.818323)
                                                  @ 101  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                                @ 17  java.util.LinkedHashMap.linkNodeAtEnd(LinkedHashMap$Entry):void (76 bytes)   not inlining relevance-based (relevance=0.049394, probability=0.034020, bonus=1.000000, nodes=26 > 14.818323)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                                @ 9  java.util.HashMap$Node.<init>(int, Object, Object, HashMap$Node):void (26 bytes)   relevance-based (relevance=0.326990, probability=0.225209, bonus=1.000000, nodes=17 <= 98.096958)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                      @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                              @ 152  java.util.HashMap.newNode(int, Object, Object, HashMap$Node):HashMap$Node (13 bytes)   relevance-based (relevance=0.326990, probability=0.259229, bonus=1.000000, nodes=34 <= 98.096958)
                                                    @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                  @ 114  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                      @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                              @ 169  java.util.HashMap.treeifyBin(HashMap$Node[], int):void (110 bytes)   not inlining relevance-based (relevance=0.000936, probability=0.000742, bonus=1.000000, nodes=77 > 0.280826)
                                                    @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                  @ 184  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                              @ 253  java.util.HashMap.afterNodeAccess(HashMap$Node):void (1 bytes)   not inlining relevance-based (relevance=0.153609, probability=0.121777, bonus=1.000000, nodes=75 > 46.082587)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                      @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                    @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                  @ 218  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                              @ 288  java.util.HashMap.resize():HashMap$Node[] (356 bytes)   not inlining too large previous low-level graph (low-level-nodes: 995, relevance=0.033259, probability=0.026367, bonus=1.000000, nodes=188)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  java.util.HashMap.size():int (5 bytes)   inline accessor method (bytecode parsing)
                                @ 15  java.util.LinkedHashMap.removeEldestEntry(Map$Entry):boolean (2 bytes)   relevance-based (relevance=0.089167, probability=0.041680, bonus=1.000000, nodes=14 <= 26.750171)
                              @ 295  java.util.HashMap.afterNodeInsertion(boolean):void (1 bytes)   relevance-based (relevance=1.107786, probability=0.878223, bonus=1.000000, nodes=40 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                        @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                      @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                    @ 45  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                        @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                      @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                    @ 101  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                        @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                      @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                    @ 114  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                        @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                      @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                    @ 184  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                        @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                      @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                    @ 218  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                                                  @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining it exceeds the maximum recursive inlining depth
                                                  @ 269  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining it exceeds the maximum recursive inlining depth
                                                  @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=202 <= 300.000000)
                                                @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=387 > 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                      @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                    @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                  @ 45  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                      @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                    @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                  @ 101  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                      @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                    @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                  @ 114  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                      @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                    @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                  @ 184  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                      @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                    @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                  @ 218  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                        @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                      @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                    @ 45  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                        @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                      @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                    @ 101  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                        @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                      @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                    @ 114  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                        @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                      @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                    @ 184  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                        @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                      @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                    @ 218  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                                                  @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining it exceeds the maximum recursive inlining depth
                                                  @ 269  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining it exceeds the maximum recursive inlining depth
                                                  @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=202 <= 300.000000)
                                                @ 269  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=387 > 300.000000)
                                              @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   relevance-based (relevance=1.000000, probability=0.000001, bonus=1.000000, nodes=202 <= 300.000000)
                                            @ 269  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.000061, bonus=1.000000, nodes=387 > 300.000000)
                                          @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   relevance-based (relevance=1.000000, probability=0.003906, bonus=1.000000, nodes=202 <= 300.000000)
                                        @ 19  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.250000, bonus=1.000000, nodes=387 > 300.000000)
                                      @ 81  som.Vector.sort(Comparator):void (23 bytes)   relevance-based (relevance=1.000128, probability=0.500000, bonus=1.000000, nodes=22 <= 300.000000)
                                        @ 1  som.Vector.isEmpty():boolean (17 bytes)   relevance-based (relevance=1.000000, probability=15962.352941, bonus=1.000000, nodes=10 <= 300.000000)
                                      @ 38  som.Vector.removeFirst():Object (31 bytes)   relevance-based (relevance=1.000000, probability=15962.352941, bonus=1.000000, nodes=18 <= 300.000000)
                                            @ 1  deltablue.BinaryConstraint.isSatisfied():boolean (13 bytes)   relevance-based (relevance=1.000009, probability=126430.712726, bonus=1.000000, nodes=14 <= 300.000000)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                            @ 9  som.Vector.append(Object):void (51 bytes)   not inlining relevance-based (relevance=0.000009, probability=1.142479, bonus=1.000000, nodes=35 > 0.002711)
                                          @ 8  deltablue.Planner.lambda$removePropagateFrom$4(Vector, AbstractConstraint):void (13 bytes)   relevance-based (relevance=1.000000, probability=126430.712726, bonus=1.000000, nodes=36 <= 300.000000)
                            @ 81  java.lang.Integer.rotateLeft(int, int):int (9 bytes)   inline method (bytecode parsing)
                                        @ 20  deltablue.Planner$$Lambda/0x00007f2ce01f6000.apply(Object):void (12 bytes)   relevance-based (relevance=1.000000, probability=126430.712726, bonus=1.000000, nodes=43 <= 300.000000)
                            @ 142  java.lang.Integer.rotateLeft(int, int):int (9 bytes)   inline method (bytecode parsing)
                            @ 187  java.lang.Integer.rotateLeft(int, int):int (9 bytes)   inline method (bytecode parsing)
                                      @ 57  som.Vector.forEach(ForEachInterface):void (32 bytes)   relevance-based (relevance=1.000000, probability=15962.352941, bonus=1.000000, nodes=56 <= 300.000000)
                            @ 217  java.lang.Integer.rotateLeft(int, int):int (9 bytes)   inline method (bytecode parsing)
                            @ 257  java.lang.Integer.rotateLeft(int, int):int (9 bytes)   inline method (bytecode parsing)
                            @ 287  java.lang.Integer.rotateLeft(int, int):int (9 bytes)   inline method (bytecode parsing)
                            @ 336  java.lang.Integer.rotateLeft(int, int):int (9 bytes)   inline method (bytecode parsing)
                            @ 366  java.lang.Integer.rotateLeft(int, int):int (9 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 406  java.lang.Integer.rotateLeft(int, int):int (9 bytes)   inline method (bytecode parsing)
                            @ 6  deltablue.Variable.getConstraints():Vector (5 bytes)   inline accessor method (bytecode parsing)
                            @ 11  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object, Object):Object (10 bytes)   inline method (bytecode parsing)
                              @ 6  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object, Object):Object (24 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                        @ 19  deltablue.Planner$$Lambda/0x00007f2ce01f6440.<init>(AbstractConstraint, ForEachInterface):void (15 bytes)   relevance-based (relevance=1.000000, probability=15962.352941, bonus=1.000000, nodes=11 <= 300.000000)
                                            @ 12  deltablue.Planner.lambda$constraintsConsuming$3(AbstractConstraint, ForEachInterface, AbstractConstraint):void (20 bytes)   not inlining too large previous low-level graph (low-level-nodes: 391, relevance=1.000000, probability=126430.712726, bonus=1.000000, nodes=26)
                                          @ 20  deltablue.Planner$$Lambda/0x00007f2ce01f6440.apply(Object):void (16 bytes)   relevance-based (relevance=1.000000, probability=126430.712726, bonus=1.000000, nodes=16 <= 300.000000)
                                        @ 16  som.Vector.forEach(ForEachInterface):void (32 bytes)   not inlining callee invoke probability is too high (invokeP=7.920556, relevance=1.000000, probability=15962.352941, bonus=1.000000, nodes=33)
                                      @ 69  deltablue.Planner.constraintsConsuming(Variable, ForEachInterface):void (20 bytes)   relevance-based (relevance=1.000000, probability=15962.352941, bonus=1.000000, nodes=23 <= 300.000000)
                                    @ 15  deltablue.Planner.removePropagateFrom(Variable):Vector (86 bytes)   not inlining callee invoke probability is too high (invokeP=31927.490968, relevance=2.000000, probability=0.500000, bonus=1.000000, nodes=202)
                            @ 8  deltablue.Planner.lambda$incrementalRemove$0(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                                          @ 1  deltablue.Planner.newMark():int (15 bytes)   relevance-based (relevance=1.000000, probability=3.960278, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f2ce003d750.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 8  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 713, relevance=1.000000, probability=3.960278, bonus=1.000000, nodes=72)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f2ce003d750.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 19  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 713, relevance=1.000000, probability=3.971486, bonus=1.000000, nodes=72)
                                        @ 2  deltablue.Planner.incrementalAdd(AbstractConstraint):void (27 bytes)   relevance-based (relevance=1.000000, probability=3.960278, bonus=1.000000, nodes=28 <= 300.000000)
                                      @ 20  deltablue.Planner$$Lambda/0x00007f2ce01f68f0.apply(Object):void (12 bytes)   relevance-based (relevance=1.000000, probability=3.960278, bonus=1.000000, nodes=37 <= 300.000000)
                                    @ 26  som.Vector.forEach(ForEachInterface):void (32 bytes)   not inlining callee invoke probability is too high (invokeP=15.863529, relevance=2.000000, probability=0.500000, bonus=1.000000, nodes=53)
                                  @ 9  deltablue.Planner.incrementalRemove(AbstractConstraint):void (30 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=121 <= 300.000000)
                            @ 1  som.Vector.capacity():int (6 bytes)   inline method (bytecode parsing)
                            @ 31  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object, Object, Object, Object):Object (13 bytes)   inline method (bytecode parsing)
                              @ 9  java.lang.invoke.LambdaForm$DMH/0x00007f2ce0123400.newInvokeSpecial(Object, Object, Object, Object, Object):Object (30 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 7  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                        @ 24  som.Vector$$Lambda/0x00007f2ce003fc10.<init>(Object, boolean[], Object[], int[]):void (26 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=17 <= 300.000000)
                                            @ 17  som.Vector.lambda$remove$0(Object, boolean[], Object[], int[], Object):void (28 bytes)   relevance-based (relevance=1.000000, probability=3.960278, bonus=1.000000, nodes=26 <= 300.000000)
                                          @ 20  som.Vector$$Lambda/0x00007f2ce003fc10.apply(Object):void (21 bytes)   relevance-based (relevance=1.000000, probability=3.960278, bonus=1.000000, nodes=28 <= 300.000000)
                                        @ 36  som.Vector.forEach(ForEachInterface):void (32 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=41 <= 300.000000)
                                      @ 5  som.Vector.remove(Object):boolean (61 bytes)   relevance-based (relevance=2.000000, probability=0.500000, bonus=1.000000, nodes=73 <= 300.000000)
                                    @ 12  deltablue.Variable.removeConstraint(AbstractConstraint):void (23 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=90 <= 300.000000)
                                  @ 13  deltablue.UnaryConstraint.removeFromGraph():void (21 bytes)   relevance-based (relevance=4.000000, probability=1.000000, bonus=1.000000, nodes=100 <= 300.000000)
                                @ 55  deltablue.AbstractConstraint.destroyConstraint(Planner):void (17 bytes)   relevance-based (relevance=1.000128, probability=1.000000, bonus=1.000000, nodes=224 <= 300.000000)
                              @ 164  deltablue.Planner.change(Variable, int):void (59 bytes)   not inlining relevance-based (relevance=1.000145, probability=1.000000, bonus=1.000000, nodes=412 > 300.000000)
                            @ 9  deltablue.EditConstraint.<init>(Variable, Strength$Sym, Planner):void (8 bytes)   inline method (bytecode parsing)
                              @ 4  deltablue.UnaryConstraint.<init>(Variable, Strength$Sym, Planner):void (16 bytes)   inline method (bytecode parsing)
                                @ 2  deltablue.AbstractConstraint.<init>(Strength$Sym):void (13 bytes)   inline method (bytecode parsing)
                                  @ 6  deltablue.Strength.of(Strength$Sym):Strength (11 bytes)   inline method (bytecode parsing)
                                @ 12  deltablue.AbstractConstraint.addConstraint(Planner):void (10 bytes)   inline method (bytecode parsing)
                            @ 39  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 44  deltablue.Plan.execute():void (10 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object):Object (8 bytes)   inline method (bytecode parsing)
                                @ 4  java.lang.invoke.LambdaForm$MH/0x00007f2ce0000800.invoke(Object):Object (8 bytes)   inline method (bytecode parsing)
                                    @ 7  deltablue.Strength$Sym.customHash():int (5 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                                  @ 1  som.Dictionary.hash(Dictionary$CustomHash):int (20 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                            @ 6  som.Dictionary.getBucketIdx(int):int (10 bytes)   inline method (bytecode parsing)
                                  @ 7  som.Dictionary.getBucket(int):Dictionary$Entry (11 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                                  @ 18  som.IdentityDictionary$IdEntry.match(int, Object):boolean (22 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                @ 4  som.Dictionary.at(Dictionary$CustomHash):Object (39 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=28 <= 300.000000)
                            @ 5  deltablue.Variable.addConstraint(AbstractConstraint):void (9 bytes)   inline method (bytecode parsing)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                    @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000128, probability=0.000128, bonus=1.000000, nodes=41 > 0.038411)
                                  @ 5  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=35 <= 300.000000)
                                @ 1  deltablue.UnaryConstraint.addToGraph():void (14 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=47 <= 300.000000)
                                  @ 1  deltablue.Planner.newMark():int (15 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f2ce003d750.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 8  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 713, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=72)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f2ce003d750.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 19  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 713, relevance=1.000000, probability=1.002830, bonus=1.000000, nodes=72)
                                @ 6  deltablue.Planner.incrementalAdd(AbstractConstraint):void (27 bytes)   relevance-based (relevance=1.000128, probability=1.000000, bonus=1.000000, nodes=28 <= 300.000000)
                            @ 5  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                    @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000128, probability=0.000128, bonus=1.000000, nodes=41 > 0.038411)
                                  @ 11  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=35 <= 300.000000)
                                @ 14  som.Vector.with(Object):Vector (16 bytes)   relevance-based (relevance=1.000128, probability=1.000000, bonus=1.000000, nodes=40 <= 300.000000)
                            @ 4  som.Vector.<init>():void (7 bytes)   inline method (bytecode parsing)
                              @ 3  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 10  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.Planner$$Lambda/0x00007f2ce003e228.<init>(Vector):void (10 bytes)   inline method (bytecode parsing)
                                      @ 1  deltablue.AbstractConstraint.isInput():boolean (2 bytes)   not inlining no type profile exists
                                      @ 8  deltablue.AbstractConstraint.isSatisfied():boolean (0 bytes)   not inlining no type profile exists
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                          @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000128, probability=0.000253, bonus=1.000000, nodes=41 > 0.038411)
                                        @ 16  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=1.980139, bonus=1.000000, nodes=35 <= 300.000000)
                                      @ 8  deltablue.Planner.lambda$extractPlanFromConstraints$1(Vector, AbstractConstraint):void (20 bytes)   relevance-based (relevance=1.000000, probability=7.920556, bonus=1.000000, nodes=59 <= 300.000000)
                                    @ 20  deltablue.Planner$$Lambda/0x00007f2ce003e228.apply(Object):void (12 bytes)   relevance-based (relevance=1.000000, probability=7.920556, bonus=1.000000, nodes=64 <= 300.000000)
                                  @ 15  som.Vector.forEach(ForEachInterface):void (32 bytes)   not inlining callee invoke probability is too high (invokeP=11.881088, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=77)
                            @ 9  deltablue.Plan.<init>():void (7 bytes)   inline method (bytecode parsing)
                              @ 3  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 39  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 67  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                                  @ 20  deltablue.Planner.makePlan(Vector):Plan (86 bytes)   not inlining too large previous low-level graph (low-level-nodes: 840, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=69)
                                @ 22  deltablue.Planner.extractPlanFromConstraints(Vector):Plan (24 bytes)   relevance-based (relevance=1.000128, probability=1.000000, bonus=1.000000, nodes=27 <= 300.000000)
                                  @ 1  deltablue.UnaryConstraint.isSatisfied():boolean (5 bytes)   trivial (relevance=2.000000, probability=1.000000, bonus=1.000000, nodes=5)
                            @ 21  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.Planner$$Lambda/0x00007f2ce01f68f0.<init>(Planner):void (10 bytes)   inline method (bytecode parsing)
                                    @ 1  deltablue.UnaryConstraint.getOutput():Variable (5 bytes)   trivial (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=5)
                                    @ 6  deltablue.UnaryConstraint.markUnsatisfied():void (6 bytes)   trivial (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=7)
                            @ 1  som.Vector.capacity():int (6 bytes)   inline method (bytecode parsing)
                            @ 31  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object, Object, Object, Object):Object (13 bytes)   inline method (bytecode parsing)
                              @ 9  java.lang.invoke.LambdaForm$DMH/0x00007f2ce0123400.newInvokeSpecial(Object, Object, Object, Object, Object):Object (30 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 7  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                          @ 24  som.Vector$$Lambda/0x00007f2ce003fc10.<init>(Object, boolean[], Object[], int[]):void (26 bytes)   relevance-based (relevance=1.000000, probability=0.250000, bonus=1.000000, nodes=17 <= 300.000000)
                                              @ 17  som.Vector.lambda$remove$0(Object, boolean[], Object[], int[], Object):void (28 bytes)   relevance-based (relevance=1.000000, probability=1.980139, bonus=1.000000, nodes=26 <= 300.000000)
                                            @ 20  som.Vector$$Lambda/0x00007f2ce003fc10.apply(Object):void (21 bytes)   relevance-based (relevance=1.000000, probability=1.980139, bonus=1.000000, nodes=28 <= 300.000000)
                                          @ 36  som.Vector.forEach(ForEachInterface):void (32 bytes)   relevance-based (relevance=1.000000, probability=0.250000, bonus=1.000000, nodes=41 <= 300.000000)
                                        @ 5  som.Vector.remove(Object):boolean (61 bytes)   relevance-based (relevance=2.000000, probability=0.250000, bonus=1.000000, nodes=73 <= 300.000000)
                                      @ 12  deltablue.Variable.removeConstraint(AbstractConstraint):void (23 bytes)   relevance-based (relevance=1.000000, probability=0.250000, bonus=1.000000, nodes=90 <= 300.000000)
                                    @ 10  deltablue.UnaryConstraint.removeFromGraph():void (21 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=100 <= 300.000000)
                            @ 4  som.Vector.<init>():void (7 bytes)   inline method (bytecode parsing)
                              @ 3  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 10  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 14  deltablue.Strength.absoluteWeakest():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 17  deltablue.Variable.setWalkStrength(Strength):void (6 bytes)   inline method (bytecode parsing)
                            @ 22  deltablue.Variable.setStay(boolean):void (6 bytes)   inline method (bytecode parsing)
                            @ 48  deltablue.Variable.getConstraints():Vector (5 bytes)   inline accessor method (bytecode parsing)
                            @ 52  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.Planner$$Lambda/0x00007f2ce01f6000.<init>(Vector):void (10 bytes)   inline method (bytecode parsing)
                            @ 64  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.Planner$$Lambda/0x00007f2ce01f6220.<init>(Vector):void (10 bytes)   inline method (bytecode parsing)
                            @ 76  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object):Object (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.lang.invoke.LambdaForm$MH/0x00007f2ce0000800.invoke(Object):Object (8 bytes)   inline method (bytecode parsing)
                            @ 5  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                          @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000128, probability=0.000064, bonus=1.000000, nodes=41 > 0.038411)
                                        @ 11  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=35 <= 300.000000)
                                      @ 26  som.Vector.with(Object):Vector (16 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=40 <= 300.000000)
                                      @ 31  som.Vector.isEmpty():boolean (17 bytes)   relevance-based (relevance=1.000031, probability=15962.852941, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 1  som.Vector.size():int (10 bytes)   inline method (bytecode parsing)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.125000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.125000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 45  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.125000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.031250, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.031250, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 101  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.031250, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.031250, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.031250, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 114  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.031250, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.005208, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.005208, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 184  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.005208, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.005208, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.005208, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 218  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.005208, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.001953, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.001953, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 45  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.001953, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000488, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000488, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 101  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000488, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000488, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000488, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 114  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000488, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000081, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000081, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 184  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000081, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000081, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000081, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 218  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000081, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                  @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000031, bonus=1.000000, nodes=13 <= 300.000000)
                                                @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000031, bonus=1.000000, nodes=24 <= 300.000000)
                                              @ 45  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000031, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                  @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000008, bonus=1.000000, nodes=13 <= 300.000000)
                                                @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000008, bonus=1.000000, nodes=24 <= 300.000000)
                                              @ 101  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000008, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                  @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000008, bonus=1.000000, nodes=13 <= 300.000000)
                                                @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000008, bonus=1.000000, nodes=24 <= 300.000000)
                                              @ 114  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000008, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                  @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000001, bonus=1.000000, nodes=13 <= 300.000000)
                                                @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000001, bonus=1.000000, nodes=24 <= 300.000000)
                                              @ 184  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000001, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                  @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000001, bonus=1.000000, nodes=13 <= 300.000000)
                                                @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000001, bonus=1.000000, nodes=24 <= 300.000000)
                                              @ 218  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000001, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                    @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                  @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                @ 45  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                    @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                  @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                @ 101  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                    @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                  @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                @ 114  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                    @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                  @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                @ 184  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                    @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                  @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                @ 218  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                      @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                    @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                  @ 45  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                      @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                    @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                  @ 101  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                      @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                    @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                  @ 114  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                      @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                    @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                  @ 184  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                      @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                    @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                  @ 218  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                        @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                      @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                    @ 45  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                        @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                      @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                    @ 101  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                        @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                      @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                    @ 114  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                        @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                      @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                    @ 184  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                              @ 11  java.lang.Object.equals(Object):boolean (11 bytes)   not inlining no methods remaining after filtering less frequent methods (8 methods previously)
                              @ 41  java.util.Objects.equals(Object, Object):boolean (23 bytes)   relevance-based (relevance=1.303256, probability=1.561789, bonus=1.000000, nodes=24 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                        @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                      @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                    @ 218  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                                                  @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining it exceeds the maximum recursive inlining depth
                                                  @ 269  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining it exceeds the maximum recursive inlining depth
                                                  @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=202 <= 300.000000)
                                                @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=387 > 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                      @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                    @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                  @ 45  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                      @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                    @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                  @ 101  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                      @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                    @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                  @ 114  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                      @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                    @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                  @ 184  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                      @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                @ 2  org.graalvm.collections.EconomicMapImpl.getRawValue(int):Object (11 bytes)   relevance-based (relevance=1.050939, probability=1.000000, bonus=1.000000, nodes=10 <= 300.000000)
                                                    @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                  @ 218  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                              @ 11  org.graalvm.collections.EconomicMapImpl.getValue(int):Object (23 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=19 <= 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                        @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                      @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                    @ 45  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                        @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                      @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                    @ 101  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                        @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                      @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                    @ 114  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                        @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                      @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                    @ 184  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                        @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                      @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                    @ 218  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                                                  @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining it exceeds the maximum recursive inlining depth
                                                  @ 269  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining it exceeds the maximum recursive inlining depth
                                                  @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=202 <= 300.000000)
                                                @ 269  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=387 > 300.000000)
                                              @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   relevance-based (relevance=1.000000, probability=0.000001, bonus=1.000000, nodes=202 <= 300.000000)
                                            @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.000061, bonus=1.000000, nodes=387 > 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                  @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000031, bonus=1.000000, nodes=13 <= 300.000000)
                                    @ 3  java.lang.Math.max(int, int):int (11 bytes)   trivial (relevance=0.169404, probability=0.144864, bonus=1.000000, nodes=7)
                                                @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000031, bonus=1.000000, nodes=24 <= 300.000000)
                                  @ 29  jdk.internal.util.ArraysSupport.newLength(int, int, int):int (27 bytes)   relevance-based (relevance=0.169404, probability=0.144864, bonus=1.000000, nodes=15 <= 50.821322)
                                              @ 45  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000031, bonus=1.000000, nodes=30 <= 300.000000)
                                @ 24  java.lang.AbstractStringBuilder.newCapacity(int):int (59 bytes)   relevance-based (relevance=0.169404, probability=0.144864, bonus=1.000000, nodes=27 <= 50.821322)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 25  java.lang.Math.min(int, int):int (11 bytes)   trivial (relevance=0.169406, probability=0.144845, bonus=1.000000, nodes=7)
                                @ 32  java.util.Arrays.copyOf(byte[], int):byte[] (33 bytes)   relevance-based (relevance=0.169404, probability=0.144864, bonus=1.000000, nodes=28 <= 50.821322)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                              @ 15  java.lang.AbstractStringBuilder.ensureCapacityInternal(int):void (39 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=72 <= 300.000000)
                                                  @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000008, bonus=1.000000, nodes=13 <= 300.000000)
                                                @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000008, bonus=1.000000, nodes=24 <= 300.000000)
                                              @ 101  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000008, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                  @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000008, bonus=1.000000, nodes=13 <= 300.000000)
                                                @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000008, bonus=1.000000, nodes=24 <= 300.000000)
                                              @ 114  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000008, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                  @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000001, bonus=1.000000, nodes=13 <= 300.000000)
                                                @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000001, bonus=1.000000, nodes=24 <= 300.000000)
                                              @ 184  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000001, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                  @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000001, bonus=1.000000, nodes=13 <= 300.000000)
                                                @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000001, bonus=1.000000, nodes=24 <= 300.000000)
                                              @ 218  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000001, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                    @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                  @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                @ 45  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                    @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                            @ 16  java.lang.String.checkBoundsOffCount(int, int, int):int (10 bytes)   inline method (bytecode parsing)
                                                  @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                @ 101  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                                @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                              @ 3  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=8)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                @ 6  jdk.internal.util.Preconditions.checkFromToIndex(int, int, int, BiFunction):int (24 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=14 <= 300.000000)
                                                    @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                              @ 6  java.lang.String.checkBoundsBeginEnd(int, int, int):void (11 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                  @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                              @ 6  jdk.internal.util.Preconditions.checkFromIndexSize(int, int, int, BiFunction):int (25 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=15 <= 300.000000)
                                                @ 114  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                              @ 21  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=9)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                              @ 36  java.lang.StringLatin1.getChars(byte[], int, int, char[], int):void (12 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=40 <= 300.000000)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                    @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                  @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                @ 184  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                    @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                  @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                @ 218  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                      @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                    @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                  @ 45  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                      @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                    @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                  @ 101  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                      @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                    @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                  @ 114  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                      @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                    @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                  @ 184  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                      @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                    @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                  @ 218  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  java.lang.ref.Reference.get():Object (5 bytes)   inline accessor method (bytecode parsing)
                              @ 15  java.lang.ref.SoftReference.get():Object (29 bytes)   relevance-based (relevance=1.000000, probability=0.906093, bonus=1.000000, nodes=20 <= 300.000000)
                            @ 5  java.lang.Class$ReflectionData.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                              @ 39  java.lang.Class.newReflectionData(SoftReference, int):Class$ReflectionData (66 bytes)   not inlining relevance-based (relevance=0.113202, probability=0.093907, bonus=1.000000, nodes=61 > 33.960618)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                        @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                      @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                    @ 45  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                        @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                      @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                    @ 101  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                        @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                      @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                    @ 114  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                        @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                      @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                    @ 184  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                        @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                      @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                    @ 218  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                                                  @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining it exceeds the maximum recursive inlining depth
                                                  @ 269  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining it exceeds the maximum recursive inlining depth
                                                  @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=202 <= 300.000000)
                                                @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=387 > 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                      @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                    @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                  @ 45  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                      @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                    @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                  @ 101  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                      @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                    @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                  @ 114  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                      @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                    @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                  @ 184  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                      @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                    @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                  @ 218  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                        @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                      @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                    @ 45  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                        @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                      @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                    @ 101  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                        @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                      @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                    @ 114  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                        @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                      @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                    @ 184  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                        @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                      @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                                    @ 218  deltablue.Planner$$Lambda/0x00007f2ce01f6660.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                                                  @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining it exceeds the maximum recursive inlining depth
                                                  @ 269  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining it exceeds the maximum recursive inlining depth
                                                  @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=202 <= 300.000000)
                                                @ 269  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=387 > 300.000000)
                                              @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   relevance-based (relevance=1.000000, probability=0.000001, bonus=1.000000, nodes=202 <= 300.000000)
                                            @ 269  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.000061, bonus=1.000000, nodes=387 > 300.000000)
                                          @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   relevance-based (relevance=1.000000, probability=0.003906, bonus=1.000000, nodes=202 <= 300.000000)
                                        @ 19  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.250000, bonus=1.000000, nodes=387 > 300.000000)
                                      @ 81  som.Vector.sort(Comparator):void (23 bytes)   relevance-based (relevance=1.000128, probability=0.500000, bonus=1.000000, nodes=22 <= 300.000000)
                                        @ 1  som.Vector.isEmpty():boolean (17 bytes)   relevance-based (relevance=1.000000, probability=15962.352941, bonus=1.000000, nodes=10 <= 300.000000)
                                      @ 38  som.Vector.removeFirst():Object (31 bytes)   relevance-based (relevance=1.000000, probability=15962.352941, bonus=1.000000, nodes=18 <= 300.000000)
                                            @ 1  deltablue.BinaryConstraint.isSatisfied():boolean (13 bytes)   relevance-based (relevance=1.000009, probability=126430.712726, bonus=1.000000, nodes=14 <= 300.000000)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                            @ 9  som.Vector.append(Object):void (51 bytes)   not inlining relevance-based (relevance=0.000009, probability=1.142479, bonus=1.000000, nodes=35 > 0.002711)
                                          @ 8  deltablue.Planner.lambda$removePropagateFrom$4(Vector, AbstractConstraint):void (13 bytes)   relevance-based (relevance=1.000000, probability=126430.712726, bonus=1.000000, nodes=36 <= 300.000000)
                                        @ 20  deltablue.Planner$$Lambda/0x00007f2ce01f6000.apply(Object):void (12 bytes)   relevance-based (relevance=1.000000, probability=126430.712726, bonus=1.000000, nodes=43 <= 300.000000)
                                      @ 57  som.Vector.forEach(ForEachInterface):void (32 bytes)   relevance-based (relevance=1.000000, probability=15962.352941, bonus=1.000000, nodes=56 <= 300.000000)
                            @ 1  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 6  deltablue.Variable.getConstraints():Vector (5 bytes)   inline accessor method (bytecode parsing)
                            @ 11  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object, Object):Object (10 bytes)   inline method (bytecode parsing)
                              @ 6  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object, Object):Object (24 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                        @ 19  deltablue.Planner$$Lambda/0x00007f2ce01f6440.<init>(AbstractConstraint, ForEachInterface):void (15 bytes)   relevance-based (relevance=1.000000, probability=15962.352941, bonus=1.000000, nodes=11 <= 300.000000)
                                            @ 12  deltablue.Planner.lambda$constraintsConsuming$3(AbstractConstraint, ForEachInterface, AbstractConstraint):void (20 bytes)   not inlining too large previous low-level graph (low-level-nodes: 391, relevance=1.000000, probability=126430.712726, bonus=1.000000, nodes=26)
                                          @ 20  deltablue.Planner$$Lambda/0x00007f2ce01f6440.apply(Object):void (16 bytes)   relevance-based (relevance=1.000000, probability=126430.712726, bonus=1.000000, nodes=16 <= 300.000000)
                                        @ 16  som.Vector.forEach(ForEachInterface):void (32 bytes)   not inlining callee invoke probability is too high (invokeP=7.920556, relevance=1.000000, probability=15962.352941, bonus=1.000000, nodes=33)
                                      @ 69  deltablue.Planner.constraintsConsuming(Variable, ForEachInterface):void (20 bytes)   relevance-based (relevance=1.000000, probability=15962.352941, bonus=1.000000, nodes=23 <= 300.000000)
                                    @ 15  deltablue.Planner.removePropagateFrom(Variable):Vector (86 bytes)   not inlining callee invoke probability is too high (invokeP=31927.490968, relevance=2.000000, probability=0.500000, bonus=1.000000, nodes=202)
                            @ 8  deltablue.Planner.lambda$incrementalRemove$0(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                                          @ 1  deltablue.Planner.newMark():int (15 bytes)   relevance-based (relevance=1.000000, probability=3.960278, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f2ce003d750.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 8  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 713, relevance=1.000000, probability=3.960278, bonus=1.000000, nodes=72)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f2ce003d750.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 19  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 713, relevance=1.000000, probability=3.971486, bonus=1.000000, nodes=72)
                                        @ 2  deltablue.Planner.incrementalAdd(AbstractConstraint):void (27 bytes)   relevance-based (relevance=1.000000, probability=3.960278, bonus=1.000000, nodes=28 <= 300.000000)
                                      @ 20  deltablue.Planner$$Lambda/0x00007f2ce01f68f0.apply(Object):void (12 bytes)   relevance-based (relevance=1.000000, probability=3.960278, bonus=1.000000, nodes=37 <= 300.000000)
                                    @ 26  som.Vector.forEach(ForEachInterface):void (32 bytes)   not inlining callee invoke probability is too high (invokeP=15.863529, relevance=2.000000, probability=0.500000, bonus=1.000000, nodes=53)
                                  @ 9  deltablue.Planner.incrementalRemove(AbstractConstraint):void (30 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=121 <= 300.000000)
                            @ 1  som.Vector.capacity():int (6 bytes)   inline method (bytecode parsing)
                            @ 31  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object, Object, Object, Object):Object (13 bytes)   inline method (bytecode parsing)
                              @ 9  java.lang.invoke.LambdaForm$DMH/0x00007f2ce0123400.newInvokeSpecial(Object, Object, Object, Object, Object):Object (30 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 7  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                        @ 24  som.Vector$$Lambda/0x00007f2ce003fc10.<init>(Object, boolean[], Object[], int[]):void (26 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=17 <= 300.000000)
                                            @ 17  som.Vector.lambda$remove$0(Object, boolean[], Object[], int[], Object):void (28 bytes)   relevance-based (relevance=1.000000, probability=3.960278, bonus=1.000000, nodes=26 <= 300.000000)
                                          @ 20  som.Vector$$Lambda/0x00007f2ce003fc10.apply(Object):void (21 bytes)   relevance-based (relevance=1.000000, probability=3.960278, bonus=1.000000, nodes=28 <= 300.000000)
                                        @ 36  som.Vector.forEach(ForEachInterface):void (32 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=41 <= 300.000000)
                                      @ 5  som.Vector.remove(Object):boolean (61 bytes)   relevance-based (relevance=2.000000, probability=0.500000, bonus=1.000000, nodes=73 <= 300.000000)
                                    @ 12  deltablue.Variable.removeConstraint(AbstractConstraint):void (23 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=90 <= 300.000000)
                                  @ 13  deltablue.UnaryConstraint.removeFromGraph():void (21 bytes)   relevance-based (relevance=4.000000, probability=1.000000, bonus=1.000000, nodes=100 <= 300.000000)
                                @ 55  deltablue.AbstractConstraint.destroyConstraint(Planner):void (17 bytes)   relevance-based (relevance=1.000128, probability=1.000000, bonus=1.000000, nodes=224 <= 300.000000)
                              @ 225  deltablue.Planner.change(Variable, int):void (59 bytes)   not inlining relevance-based (relevance=1.000145, probability=1.000000, bonus=1.000000, nodes=412 > 300.000000)
                              @ 181  som.Vector.at(int):Object (18 bytes)   relevance-based (relevance=1.000000, probability=59990.250000, bonus=1.000000, nodes=10 <= 300.000000)
                              @ 242  som.Vector.at(int):Object (18 bytes)   relevance-based (relevance=1.000000, probability=59999.000000, bonus=1.000000, nodes=10 <= 300.000000)
                              @ 31  java.util.ArrayList.fastRemove(Object[], int):void (44 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=38 <= 300.000000)
                              @ 1  sun.management.spi.PlatformMBeanProvider$PlatformComponent.mbeanInterfaceNames():Set (0 bytes)   not inlining no methods remaining after filtering less frequent methods (8 methods previously)
                            @ 41  java.lang.Enum.ordinal():int (5 bytes)   inline accessor method (bytecode parsing)
                                      @ 2  java.util.HashMap.getNode(Object):HashMap$Node (150 bytes)   not inlining too large previous low-level graph (low-level-nodes: 643, relevance=0.272371, probability=0.128274, bonus=1.000000, nodes=108)
                                    @ 5  java.util.HashMap.containsKey(Object):boolean (14 bytes)   relevance-based (relevance=0.272371, probability=0.128274, bonus=1.000000, nodes=12 <= 81.711340)
                                  @ 5  java.util.HashSet.contains(Object):boolean (9 bytes)   relevance-based (relevance=0.272371, probability=0.214066, bonus=1.000000, nodes=29 <= 81.711340)
                                    @ 18  java.lang.String.equals(Object):boolean (56 bytes)   relevance-based (relevance=1.000000, probability=0.669766, bonus=1.000000, nodes=50 <= 300.000000)
                                  @ 5  java.util.Collections.eq(Object, Object):boolean (22 bytes)   relevance-based (relevance=1.000000, probability=0.785934, bonus=1.000000, nodes=60 <= 300.000000)
                                @ 7  java.util.Collections$SingletonSet.contains(Object):boolean (9 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=101 <= 300.000000)
                              @ 8  java.lang.management.ManagementFactory$PlatformMBeanFinder.lambda$findSingleton$1(String, PlatformMBeanProvider$PlatformComponent):boolean (13 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=108 <= 300.000000)
                            @ 8  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                @ 14  java.lang.Class.getComponentType():Class (14 bytes)   trivial (relevance=0.245010, probability=0.196794, bonus=1.000000, nodes=7)
                                @ 32  java.lang.Math.min(int, int):int (11 bytes)   trivial (relevance=1.245010, probability=1.000000, bonus=1.000000, nodes=7)
                              @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=40 <= 300.000000)
                            @ 8  jdk.graal.compiler.lir.stackslotalloc.LSStackSlotAllocator$Allocator.lambda$new$1(StackInterval, StackInterval):int (10 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.lir.stackslotalloc.StackInterval.to():int (5 bytes)   inline accessor method (bytecode parsing)
                              @ 5  jdk.graal.compiler.lir.stackslotalloc.StackInterval.to():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 8  jdk.graal.compiler.lir.stackslotalloc.LSStackSlotAllocator$Allocator.lambda$new$0(StackInterval, StackInterval):int (10 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.lir.stackslotalloc.StackInterval.from():int (5 bytes)   inline accessor method (bytecode parsing)
                              @ 5  jdk.graal.compiler.lir.stackslotalloc.StackInterval.from():int (5 bytes)   inline accessor method (bytecode parsing)
                                @ 1  jdk.graal.compiler.core.common.cfg.BasicBlock.getRelativeFrequency():double (0 bytes)   not inlining no type profile exists
                                @ 12  jdk.graal.compiler.core.common.cfg.BasicBlock.getRelativeFrequency():double (0 bytes)   not inlining no type profile exists
                                @ 23  jdk.graal.compiler.core.common.cfg.BasicBlock.getLoopDepth():int (0 bytes)   not inlining no type profile exists
                                @ 27  jdk.graal.compiler.core.common.cfg.BasicBlock.getLoopDepth():int (0 bytes)   not inlining no type profile exists
                                @ 39  jdk.graal.compiler.core.common.cfg.BasicBlock.getRelativeFrequency():double (0 bytes)   not inlining no type profile exists
                                @ 43  jdk.graal.compiler.core.common.cfg.BasicBlock.getRelativeFrequency():double (0 bytes)   not inlining no type profile exists
                                @ 9  jdk.graal.compiler.core.common.alloc.BasicBlockOrderUtils$BlockOrderComparator.compare(BasicBlock, BasicBlock):int (54 bytes)   relevance-based (relevance=1.000000, probability=1.345263, bonus=1.000000, nodes=47 <= 300.000000)
                              @ 21  jdk.graal.compiler.core.common.alloc.BasicBlockOrderUtils$BlockOrderComparator.compare(Object, Object):int (13 bytes)   relevance-based (relevance=1.638895, probability=1.582698, bonus=1.000000, nodes=99 <= 300.000000)
                            @ 4  java.lang.Class.getComponentType():Class (14 bytes)   inline method (bytecode parsing)
                            @ 18  jdk.graal.compiler.nodes.java.DynamicNewArrayNode.newArray(Class, int, JavaKind):Object (8 bytes)   inline method (bytecode parsing)
                            @ 40  jdk.graal.compiler.replacements.arraycopy.ArrayCopyCallNode.disjointUninitializedArraycopy(Object, int, Object, int, int, JavaKind, int):void (17 bytes)   inline method (bytecode parsing)
                            @ 15  jdk.graal.compiler.replacements.ReplacementsUtil.staticAssert(boolean, String):void (12 bytes)   inline method (bytecode parsing)
                            @ 86  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.loadKlassFromObject(Object, int, LocationIdentity):KlassPointer (32 bytes)   inline method (bytecode parsing)
                              @ 18  jdk.graal.compiler.replacements.ReplacementsUtil.staticAssert(boolean, String):void (12 bytes)   inline method (bytecode parsing)
                            @ 117  jdk.graal.compiler.hotspot.replacements.ClassGetHubNode.piCastNonNull(KlassPointer, GuardingNode):KlassPointer (9 bytes)   inline method (bytecode parsing)
                            @ 182  jdk.graal.compiler.replacements.ReplacementsUtil.dynamicAssert(boolean, String):void (12 bytes)   inline method (bytecode parsing)
                            @ 249  jdk.graal.compiler.replacements.AllocationSnippets.allocateArrayImpl(Word, int, int, int, AllocationSnippets$FillContent, int, boolean, boolean, boolean, boolean, AllocationSnippets$AllocationProfilingData):Object (178 bytes)   inline method (bytecode parsing)
                              @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getTLABInfo():Word (5 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getThread():Word (8 bytes)   inline method (bytecode parsing)
                                  @ 4  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.registerAsWord(Register):Word (7 bytes)   inline method (bytecode parsing)
                              @ 9  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.readTlabTop(Word):Word (5 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.readTlabTop(Word):Word (17 bytes)   inline method (bytecode parsing)
                              @ 17  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.readTlabEnd(Word):Word (5 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.readTlabEnd(Word):Word (17 bytes)   inline method (bytecode parsing)
                              @ 36  jdk.graal.compiler.replacements.ReplacementsUtil.dynamicAssert(boolean, String):void (12 bytes)   inline method (bytecode parsing)
                              @ 44  jdk.graal.compiler.replacements.AllocationSnippets.arrayAllocationSize(int, int, int):UnsignedWord (18 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.objectAlignment():int (7 bytes)   inline method (bytecode parsing)
                                @ 11  jdk.graal.compiler.replacements.AllocationSnippets.arrayAllocationSize(int, int, int, int):long (32 bytes)   inline method (bytecode parsing)
                              @ 59  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.useTLAB():boolean (7 bytes)   inline method (bytecode parsing)
                              @ 72  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.shouldAllocateInTLAB(UnsignedWord, boolean):boolean (33 bytes)   inline method (bytecode parsing)
                              @ 102  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.writeTlabTop(Word, Word):void (6 bytes)   inline method (bytecode parsing)
                                @ 2  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.writeTlabTop(Word, Word):void (15 bytes)   inline method (bytecode parsing)
                              @ 109  jdk.graal.compiler.replacements.AllocationSnippets.emitPrefetchAllocate(Word, boolean):void (61 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getPrefetchStyle():int (7 bytes)   inline method (bytecode parsing)
                                @ 9  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getPrefetchLines(boolean):int (18 bytes)   inline method (bytecode parsing)
                                @ 14  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getPrefetchStepSize():int (7 bytes)   inline method (bytecode parsing)
                                @ 20  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getPrefetchDistance():int (7 bytes)   inline method (bytecode parsing)
                              @ 136  jdk.graal.compiler.replacements.AllocationSnippets.formatArray(Word, UnsignedWord, int, Word, AllocationSnippets$FillContent, boolean, int, boolean, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):Object (53 bytes)   inline method (bytecode parsing)
                                @ 5  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.initializeObjectHeader(Word, Word, boolean):void (29 bytes)   inline method (bytecode parsing)
                                  @ 25  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.initializeObjectHeader(Word, Word, KlassPointer):void (20 bytes)   inline method (bytecode parsing)
                                @ 11  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.arrayLengthOffset():int (7 bytes)   inline method (bytecode parsing)
                                @ 15  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                                @ 38  jdk.graal.compiler.replacements.AllocationSnippets.fillContents(Word, AllocationSnippets$FillContent, int, UnsignedWord, boolean, boolean, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):void (58 bytes)   inline method (bytecode parsing)
                                  @ 22  jdk.graal.compiler.replacements.AllocationSnippets.zeroMemory(Word, int, UnsignedWord, boolean, boolean, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):void (19 bytes)   inline method (bytecode parsing)
                                    @ 15  jdk.graal.compiler.replacements.AllocationSnippets.fillMemory(long, Word, int, UnsignedWord, boolean, boolean, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):void (194 bytes)   inline method (bytecode parsing)
                                      @ 17  jdk.graal.compiler.replacements.ReplacementsUtil.dynamicAssert(boolean, String):void (12 bytes)   inline method (bytecode parsing)
                                      @ 56  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                                      @ 89  jdk.graal.compiler.replacements.ReplacementsUtil.dynamicAssert(boolean, String):void (12 bytes)   inline method (bytecode parsing)
                                      @ 153  jdk.graal.compiler.replacements.ReplacementsUtil.staticAssert(boolean, String):void (12 bytes)   inline method (bytecode parsing)
                                      @ 167  jdk.graal.compiler.replacements.AllocationSnippets.fillMemoryAlignedUnrollable(long, Word, UnsignedWord, UnsignedWord, boolean, AllocationSnippets$AllocationSnippetCounters):void (68 bytes)   inline method (bytecode parsing)
                                        @ 5  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                          @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                                        @ 44  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                            @ 15  jdk.internal.util.ByteArray.getUnsignedShort(byte[], int):int (12 bytes)   inline method (bytecode parsing)
                                      @ 190  jdk.graal.compiler.replacements.AllocationSnippets.fillMemoryAligned(long, Word, UnsignedWord, UnsignedWord, boolean, UnsignedWord, boolean, boolean, AllocationSnippets$AllocationSnippetCounters):void (155 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.VarHandleGuards.guard_LI_I(VarHandle, Object, int, VarHandle$AccessDescriptor):int (78 bytes)   inline method (bytecode parsing)
                                        @ 17  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.getMinimalBulkZeroingSize():int (7 bytes)   inline method (bytecode parsing)
                                @ 2  java.lang.invoke.VarHandle.checkAccessModeThenIsDirect(VarHandle$AccessDescriptor):boolean (29 bytes)   inline method (bytecode parsing)
                                        @ 36  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                          @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                                @ 42  java.lang.invoke.VarForm.getMemberName(int):MemberName (31 bytes)   inline method (bytecode parsing)
                                        @ 53  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                                        @ 105  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                                @ 45  java.lang.invoke.VarHandleByteArrayAsShorts$ArrayHandle.get(VarHandle, Object, int):short (36 bytes)   inline method (bytecode parsing)
                                          @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                                  @ 19  java.lang.invoke.VarHandleByteArrayAsShorts$ArrayHandle.index(byte[], int):int (12 bytes)   inline method (bytecode parsing)
                                        @ 134  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                                  @ 32  jdk.internal.misc.Unsafe.getShortUnaligned(Object, long, boolean):short (12 bytes)   inline method (bytecode parsing)
                                @ 44  jdk.graal.compiler.replacements.AllocationSnippets.emitMemoryBarrierIf(boolean):void (14 bytes)   inline method (bytecode parsing)
                                    @ 8  jdk.internal.misc.Unsafe.convEndian(boolean, short):short (16 bytes)   inline method (bytecode parsing)
                                  @ 7  org.graalvm.word.LocationIdentity.init():LocationIdentity (4 bytes)   inline method (bytecode parsing)
                              @ 152  jdk.graal.compiler.replacements.SnippetCounter.inc():void (12 bytes)   inline method (bytecode parsing)
                              @ 8  java.lang.Short.toUnsignedInt(short):int (5 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.replacements.SnippetCounter.getGroup():SnippetCounter$Group (5 bytes)   inline method (bytecode parsing)
                              @ 158  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.callNewArrayStub(Word, int):Object (35 bytes)   inline method (bytecode parsing)
                                @ 22  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.nonNullOrDeopt(Object):Object (27 bytes)   inline method (bytecode parsing)
                              @ 168  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.profileAllocation(AllocationSnippets$AllocationProfilingData, UnsignedWord):void (51 bytes)   inline method (bytecode parsing)
                            @ 4  java.util.Objects.checkFromIndexSize(int, int, int):int (8 bytes)   inline method (bytecode parsing)
                              @ 174  jdk.graal.compiler.hotspot.replacements.HotSpotAllocationSnippets.verifyOop(Object):Object (5 bytes)   inline method (bytecode parsing)
                                @ 1  jdk.graal.compiler.hotspot.replacements.HotSpotReplacementsUtil.verifyOop(Object):Object (19 bytes)   inline method (bytecode parsing)
                              @ 7  java.io.DataInputStream.readFully(byte[], int, int):void (59 bytes)   not inlining too large previous low-level graph (low-level-nodes: 753, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=36)
                              @ 7  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                                @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                              @ 13  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=8)
                              @ 68  java.lang.StringLatin1.lastIndexOf(byte[], int, byte[], int, int):int (125 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=39 <= 300.000000)
                              @ 5  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                                @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                              @ 9  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=8)
                                @ 7  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                                @ 4  java.util.AbstractList$ListItr.nextIndex():int (5 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                              @ 1  java.util.AbstractList$SubList$1.nextIndex():int (18 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=17 <= 300.000000)
                                  @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                                @ 13  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=8)
                                @ 68  java.lang.StringLatin1.lastIndexOf(byte[], int, byte[], int, int):int (125 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=39 <= 300.000000)
                              @ 14  java.lang.String.lastIndexOf(byte[], byte, int, String, int):int (104 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=64 <= 300.000000)
                            @ 10  org.graalvm.collections.EconomicMapImpl.intercept(EconomicMapImpl):EconomicMapImpl (2 bytes)   inline method (bytecode parsing)
                                @ 3  org.graalvm.collections.EconomicMapImpl.<init>(Equivalence, boolean):void (30 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=25 <= 300.000000)
                                @ 8  org.graalvm.collections.EconomicMapImpl.initFrom(Object):boolean (85 bytes)   not inlining too large previous low-level graph (low-level-nodes: 395, relevance=1.769429, probability=1.000000, bonus=1.000000, nodes=54)
                              @ 7  org.graalvm.collections.EconomicMapImpl.<init>(Equivalence, UnmodifiableEconomicMap, boolean):void (30 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=33 <= 300.000000)
                            @ 5  java.util.Objects.checkIndex(int, int):int (7 bytes)   inline method (bytecode parsing)
                            @ 23  java.util.ArrayList.elementData(int):Object (7 bytes)   inline method (bytecode parsing)
                              @ 10  java.util.ArrayList$SubList.checkForComodification():void (23 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=9)
                            @ 24  org.graalvm.collections.EconomicMapImpl.getKey(int):Object (9 bytes)   inline method (bytecode parsing)
                              @ 4  org.graalvm.collections.EconomicMapImpl.hasHashArray():boolean (13 bytes)   trivial (relevance=1.577408, probability=1.000000, bonus=1.000000, nodes=9)
                            @ 21  org.graalvm.collections.EconomicMapImpl.getKey(int):Object (9 bytes)   inline method (bytecode parsing)
                              @ 27  org.graalvm.collections.EconomicMapImpl.findAndRemoveHash(Object):int (108 bytes)   not inlining too large previous low-level graph (low-level-nodes: 418, relevance=1.000000, probability=0.633952, bonus=1.000000, nodes=68)
                            @ 45  org.graalvm.collections.EconomicMapImpl.getKey(int):Object (9 bytes)   inline method (bytecode parsing)
                            @ 48  org.graalvm.collections.EconomicMapImpl.setKey(int, Object):void (10 bytes)   inline method (bytecode parsing)
                            @ 75  org.graalvm.collections.EconomicMapImpl.setKey(int, Object):void (10 bytes)   inline method (bytecode parsing)
                            @ 81  org.graalvm.collections.EconomicMapImpl.setRawValue(int, Object):void (12 bytes)   inline method (bytecode parsing)
                            @ 112  org.graalvm.collections.EconomicMapImpl.getKey(int):Object (9 bytes)   inline method (bytecode parsing)
                              @ 42  org.graalvm.collections.EconomicMapImpl.remove(int):int (165 bytes)   not inlining too large previous low-level graph (low-level-nodes: 932, relevance=1.577408, probability=1.000000, bonus=1.000000, nodes=116)
                            @ 4  deltablue.Planner.<init>():void (10 bytes)   inline method (bytecode parsing)
                            @ 12  som.Vector.<init>():void (7 bytes)   inline method (bytecode parsing)
                              @ 3  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 18  deltablue.Variable.value(int):Variable (15 bytes)   inline method (bytecode parsing)
                              @ 10  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 25  deltablue.Variable.value(int):Variable (15 bytes)   inline method (bytecode parsing)
                              @ 10  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 75  deltablue.StayConstraint.<init>(Variable, Strength$Sym, Planner):void (8 bytes)   inline method (bytecode parsing)
                              @ 4  deltablue.UnaryConstraint.<init>(Variable, Strength$Sym, Planner):void (16 bytes)   inline method (bytecode parsing)
                                @ 2  deltablue.AbstractConstraint.<init>(Strength$Sym):void (13 bytes)   inline method (bytecode parsing)
                                  @ 6  deltablue.Strength.of(Strength$Sym):Strength (11 bytes)   inline method (bytecode parsing)
                                @ 12  deltablue.AbstractConstraint.addConstraint(Planner):void (10 bytes)   inline method (bytecode parsing)
                            @ 114  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 144  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 187  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 248  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                              @ 242  som.Vector.at(int):Object (18 bytes)   relevance-based (relevance=1.000000, probability=0.999983, bonus=1.000000, nodes=10 <= 300.000000)
                              @ 242  som.Vector.at(int):Object (18 bytes)   relevance-based (relevance=1.000000, probability=59997.000034, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 4  deltablue.Planner.<init>():void (10 bytes)   inline method (bytecode parsing)
                            @ 12  som.Vector.<init>():void (7 bytes)   inline method (bytecode parsing)
                              @ 3  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 18  deltablue.Variable.value(int):Variable (15 bytes)   inline method (bytecode parsing)
                              @ 10  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 25  deltablue.Variable.value(int):Variable (15 bytes)   inline method (bytecode parsing)
                              @ 10  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 75  deltablue.StayConstraint.<init>(Variable, Strength$Sym, Planner):void (8 bytes)   inline method (bytecode parsing)
                              @ 4  deltablue.UnaryConstraint.<init>(Variable, Strength$Sym, Planner):void (16 bytes)   inline method (bytecode parsing)
                                @ 2  deltablue.AbstractConstraint.<init>(Strength$Sym):void (13 bytes)   inline method (bytecode parsing)
                                  @ 6  deltablue.Strength.of(Strength$Sym):Strength (11 bytes)   inline method (bytecode parsing)
                                @ 12  deltablue.AbstractConstraint.addConstraint(Planner):void (10 bytes)   inline method (bytecode parsing)
                            @ 114  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 144  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 187  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 248  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 15  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 27  deltablue.Strength.absoluteWeakest():Strength (4 bytes)   inline method (bytecode parsing)
                              @ 4  deltablue.Variable.<init>():void (44 bytes)   not inlining too large previous low-level graph (low-level-nodes: 379, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=27)
                            @ 15  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 27  deltablue.Strength.absoluteWeakest():Strength (4 bytes)   inline method (bytecode parsing)
                              @ 4  deltablue.Variable.<init>():void (44 bytes)   not inlining too large previous low-level graph (low-level-nodes: 379, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=27)
                            @ 10  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 15  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 27  deltablue.Strength.absoluteWeakest():Strength (4 bytes)   inline method (bytecode parsing)
                                @ 4  deltablue.Variable.<init>():void (44 bytes)   not inlining too large previous low-level graph (low-level-nodes: 379, relevance=1.000000, probability=60248.000000, bonus=1.000000, nodes=27)
                              @ 47  deltablue.Variable.value(int):Variable (15 bytes)   relevance-based (relevance=1.000000, probability=60248.000000, bonus=1.000000, nodes=11 <= 300.000000)
                            @ 10  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 15  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 27  deltablue.Strength.absoluteWeakest():Strength (4 bytes)   inline method (bytecode parsing)
                                @ 4  deltablue.Variable.<init>():void (44 bytes)   not inlining too large previous low-level graph (low-level-nodes: 379, relevance=1.000000, probability=60248.000000, bonus=1.000000, nodes=27)
                              @ 54  deltablue.Variable.value(int):Variable (15 bytes)   relevance-based (relevance=1.000000, probability=60248.000000, bonus=1.000000, nodes=11 <= 300.000000)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000128, probability=7.712940, bonus=1.000000, nodes=41 > 0.038411)
                              @ 62  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=60248.000000, bonus=1.000000, nodes=35 <= 300.000000)
                                  @ 7  deltablue.Strength$Sym.customHash():int (5 bytes)   trivial (relevance=1.000000, probability=60248.000000, bonus=1.000000, nodes=5)
                                @ 1  som.Dictionary.hash(Dictionary$CustomHash):int (20 bytes)   trivial (relevance=1.000000, probability=60248.000000, bonus=1.000000, nodes=5)
                            @ 6  som.Dictionary.getBucketIdx(int):int (10 bytes)   inline method (bytecode parsing)
                                @ 7  som.Dictionary.getBucket(int):Dictionary$Entry (11 bytes)   relevance-based (relevance=1.000000, probability=60248.000000, bonus=1.000000, nodes=11 <= 300.000000)
                                @ 18  som.IdentityDictionary$IdEntry.match(int, Object):boolean (22 bytes)   relevance-based (relevance=1.000000, probability=60248.000000, bonus=1.000000, nodes=13 <= 300.000000)
                              @ 4  som.Dictionary.at(Dictionary$CustomHash):Object (39 bytes)   relevance-based (relevance=1.000128, probability=60248.000000, bonus=1.000000, nodes=28 <= 300.000000)
                            @ 5  deltablue.Variable.addConstraint(AbstractConstraint):void (9 bytes)   inline method (bytecode parsing)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                  @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000128, probability=7.712940, bonus=1.000000, nodes=41 > 0.038411)
                                @ 5  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=60248.000000, bonus=1.000000, nodes=35 <= 300.000000)
                              @ 1  deltablue.UnaryConstraint.addToGraph():void (14 bytes)   relevance-based (relevance=1.000128, probability=60248.000000, bonus=1.000000, nodes=47 <= 300.000000)
                                @ 1  deltablue.Planner.newMark():int (15 bytes)   relevance-based (relevance=1.000000, probability=60248.000000, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f2ce003d750.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                @ 8  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 713, relevance=1.000000, probability=60248.000000, bonus=1.000000, nodes=72)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f2ce003d750.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                @ 19  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 713, relevance=1.000000, probability=60418.509724, bonus=1.000000, nodes=72)
                              @ 6  deltablue.Planner.incrementalAdd(AbstractConstraint):void (27 bytes)   relevance-based (relevance=1.000128, probability=60248.000000, bonus=1.000000, nodes=28 <= 300.000000)
                            @ 24  deltablue.AbstractConstraint.addConstraint(Planner):void (10 bytes)   inline method (bytecode parsing)
                              @ 94  deltablue.ScaleConstraint.<init>(Variable, Variable, Variable, Variable, Strength$Sym, Planner):void (28 bytes)   not inlining too large previous low-level graph (low-level-nodes: 1418, relevance=1.000128, probability=60248.000000, bonus=1.000000, nodes=25)
                            @ 9  deltablue.EditConstraint.<init>(Variable, Strength$Sym, Planner):void (8 bytes)   inline method (bytecode parsing)
                              @ 4  deltablue.UnaryConstraint.<init>(Variable, Strength$Sym, Planner):void (16 bytes)   inline method (bytecode parsing)
                                @ 2  deltablue.AbstractConstraint.<init>(Strength$Sym):void (13 bytes)   inline method (bytecode parsing)
                                  @ 6  deltablue.Strength.of(Strength$Sym):Strength (11 bytes)   inline method (bytecode parsing)
                                @ 12  deltablue.AbstractConstraint.addConstraint(Planner):void (10 bytes)   inline method (bytecode parsing)
                            @ 39  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 44  deltablue.Plan.execute():void (10 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object):Object (8 bytes)   inline method (bytecode parsing)
                                @ 4  java.lang.invoke.LambdaForm$MH/0x00007f2ce0000800.invoke(Object):Object (8 bytes)   inline method (bytecode parsing)
                                    @ 7  deltablue.Strength$Sym.customHash():int (5 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                                  @ 1  som.Dictionary.hash(Dictionary$CustomHash):int (20 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                            @ 6  som.Dictionary.getBucketIdx(int):int (10 bytes)   inline method (bytecode parsing)
                                  @ 7  som.Dictionary.getBucket(int):Dictionary$Entry (11 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                                  @ 18  som.IdentityDictionary$IdEntry.match(int, Object):boolean (22 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                @ 4  som.Dictionary.at(Dictionary$CustomHash):Object (39 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=28 <= 300.000000)
                            @ 5  deltablue.Variable.addConstraint(AbstractConstraint):void (9 bytes)   inline method (bytecode parsing)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                    @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000128, probability=0.000128, bonus=1.000000, nodes=41 > 0.038411)
                                  @ 5  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=35 <= 300.000000)
                                @ 1  deltablue.UnaryConstraint.addToGraph():void (14 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=47 <= 300.000000)
                                  @ 1  deltablue.Planner.newMark():int (15 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f2ce003d750.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 8  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 713, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=72)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f2ce003d750.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 19  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 713, relevance=1.000000, probability=1.002830, bonus=1.000000, nodes=72)
                                @ 6  deltablue.Planner.incrementalAdd(AbstractConstraint):void (27 bytes)   relevance-based (relevance=1.000128, probability=1.000000, bonus=1.000000, nodes=28 <= 300.000000)
                            @ 5  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                    @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000128, probability=0.000128, bonus=1.000000, nodes=41 > 0.038411)
                                  @ 11  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=35 <= 300.000000)
                                @ 14  som.Vector.with(Object):Vector (16 bytes)   relevance-based (relevance=1.000128, probability=1.000000, bonus=1.000000, nodes=40 <= 300.000000)
                            @ 4  som.Vector.<init>():void (7 bytes)   inline method (bytecode parsing)
                              @ 3  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 10  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.Planner$$Lambda/0x00007f2ce003e228.<init>(Vector):void (10 bytes)   inline method (bytecode parsing)
                                      @ 1  deltablue.AbstractConstraint.isInput():boolean (2 bytes)   not inlining no type profile exists
                                      @ 8  deltablue.AbstractConstraint.isSatisfied():boolean (0 bytes)   not inlining no type profile exists
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                          @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000128, probability=0.000253, bonus=1.000000, nodes=41 > 0.038411)
                                        @ 16  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=1.980139, bonus=1.000000, nodes=35 <= 300.000000)
                                      @ 8  deltablue.Planner.lambda$extractPlanFromConstraints$1(Vector, AbstractConstraint):void (20 bytes)   relevance-based (relevance=1.000000, probability=7.920556, bonus=1.000000, nodes=59 <= 300.000000)
                                    @ 20  deltablue.Planner$$Lambda/0x00007f2ce003e228.apply(Object):void (12 bytes)   relevance-based (relevance=1.000000, probability=7.920556, bonus=1.000000, nodes=64 <= 300.000000)
                                  @ 15  som.Vector.forEach(ForEachInterface):void (32 bytes)   not inlining callee invoke probability is too high (invokeP=11.881088, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=77)
                            @ 9  deltablue.Plan.<init>():void (7 bytes)   inline method (bytecode parsing)
                              @ 3  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 39  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 67  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                                  @ 20  deltablue.Planner.makePlan(Vector):Plan (86 bytes)   not inlining too large previous low-level graph (low-level-nodes: 840, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=69)
                                @ 22  deltablue.Planner.extractPlanFromConstraints(Vector):Plan (24 bytes)   relevance-based (relevance=1.000128, probability=1.000000, bonus=1.000000, nodes=27 <= 300.000000)
                                  @ 1  deltablue.UnaryConstraint.isSatisfied():boolean (5 bytes)   trivial (relevance=2.000000, probability=1.000000, bonus=1.000000, nodes=5)
                            @ 21  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.Planner$$Lambda/0x00007f2ce01f68f0.<init>(Planner):void (10 bytes)   inline method (bytecode parsing)
                                    @ 1  deltablue.UnaryConstraint.getOutput():Variable (5 bytes)   trivial (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=5)
                                    @ 6  deltablue.UnaryConstraint.markUnsatisfied():void (6 bytes)   trivial (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=7)
                            @ 1  som.Vector.capacity():int (6 bytes)   inline method (bytecode parsing)
                            @ 31  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object, Object, Object, Object):Object (13 bytes)   inline method (bytecode parsing)
                              @ 9  java.lang.invoke.LambdaForm$DMH/0x00007f2ce0123400.newInvokeSpecial(Object, Object, Object, Object, Object):Object (30 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 7  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                          @ 24  som.Vector$$Lambda/0x00007f2ce003fc10.<init>(Object, boolean[], Object[], int[]):void (26 bytes)   relevance-based (relevance=1.000000, probability=0.250000, bonus=1.000000, nodes=17 <= 300.000000)
                            @ 1  org.graalvm.collections.EconomicMapImpl.size():int (10 bytes)   inline method (bytecode parsing)
                                              @ 17  som.Vector.lambda$remove$0(Object, boolean[], Object[], int[], Object):void (28 bytes)   relevance-based (relevance=1.000000, probability=1.980139, bonus=1.000000, nodes=26 <= 300.000000)
                                            @ 20  som.Vector$$Lambda/0x00007f2ce003fc10.apply(Object):void (21 bytes)   relevance-based (relevance=1.000000, probability=1.980139, bonus=1.000000, nodes=28 <= 300.000000)
                                          @ 36  som.Vector.forEach(ForEachInterface):void (32 bytes)   relevance-based (relevance=1.000000, probability=0.250000, bonus=1.000000, nodes=41 <= 300.000000)
                                        @ 5  som.Vector.remove(Object):boolean (61 bytes)   relevance-based (relevance=2.000000, probability=0.250000, bonus=1.000000, nodes=73 <= 300.000000)
                                      @ 12  deltablue.Variable.removeConstraint(AbstractConstraint):void (23 bytes)   relevance-based (relevance=1.000000, probability=0.250000, bonus=1.000000, nodes=90 <= 300.000000)
                                    @ 10  deltablue.UnaryConstraint.removeFromGraph():void (21 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=100 <= 300.000000)
                            @ 4  som.Vector.<init>():void (7 bytes)   inline method (bytecode parsing)
                              @ 3  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 10  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 14  deltablue.Strength.absoluteWeakest():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 17  deltablue.Variable.setWalkStrength(Strength):void (6 bytes)   inline method (bytecode parsing)
                            @ 22  deltablue.Variable.setStay(boolean):void (6 bytes)   inline method (bytecode parsing)
                            @ 48  deltablue.Variable.getConstraints():Vector (5 bytes)   inline accessor method (bytecode parsing)
                            @ 52  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                            @ 30  jdk.internal.math.FormattedFPDecimal.toDigit(long):char (6 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                              @ 2  jdk.internal.math.FormattedFPDecimal.toDigit(int):char (6 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.Planner$$Lambda/0x00007f2ce01f6000.<init>(Vector):void (10 bytes)   inline method (bytecode parsing)
                              @ 34  jdk.internal.math.FormattedFPDecimal.fillWithDigits(long, int, int):long (42 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=37 <= 300.000000)
                            @ 64  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.Planner$$Lambda/0x00007f2ce01f6220.<init>(Vector):void (10 bytes)   inline method (bytecode parsing)
                            @ 30  jdk.internal.math.FormattedFPDecimal.toDigit(long):char (6 bytes)   inline method (bytecode parsing)
                            @ 76  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object):Object (8 bytes)   inline method (bytecode parsing)
                              @ 2  jdk.internal.math.FormattedFPDecimal.toDigit(int):char (6 bytes)   inline method (bytecode parsing)
                              @ 4  java.lang.invoke.LambdaForm$MH/0x00007f2ce0000800.invoke(Object):Object (8 bytes)   inline method (bytecode parsing)
                              @ 66  jdk.internal.math.FormattedFPDecimal.fillWithDigits(long, int, int):long (42 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=37 <= 300.000000)
                                    @ 15  deltablue.Planner.removePropagateFrom(Variable):Vector (86 bytes)   not inlining too large previous low-level graph (low-level-nodes: 793, relevance=2.000000, probability=0.500000, bonus=1.000000, nodes=81)
                            @ 8  deltablue.Planner.lambda$incrementalRemove$0(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                                          @ 1  deltablue.Planner.newMark():int (15 bytes)   relevance-based (relevance=1.000000, probability=3.960278, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f2ce003d750.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 8  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 713, relevance=1.000000, probability=3.960278, bonus=1.000000, nodes=72)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f2ce003d750.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 19  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 713, relevance=1.000000, probability=3.971486, bonus=1.000000, nodes=72)
                                        @ 2  deltablue.Planner.incrementalAdd(AbstractConstraint):void (27 bytes)   relevance-based (relevance=1.000000, probability=3.960278, bonus=1.000000, nodes=28 <= 300.000000)
                                      @ 20  deltablue.Planner$$Lambda/0x00007f2ce01f68f0.apply(Object):void (12 bytes)   relevance-based (relevance=1.000000, probability=3.960278, bonus=1.000000, nodes=37 <= 300.000000)
                                    @ 26  som.Vector.forEach(ForEachInterface):void (32 bytes)   not inlining callee invoke probability is too high (invokeP=15.863529, relevance=2.000000, probability=0.500000, bonus=1.000000, nodes=53)
                                  @ 9  deltablue.Planner.incrementalRemove(AbstractConstraint):void (30 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=121 <= 300.000000)
                            @ 1  som.Vector.capacity():int (6 bytes)   inline method (bytecode parsing)
                            @ 31  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object, Object, Object, Object):Object (13 bytes)   inline method (bytecode parsing)
                              @ 9  java.lang.invoke.LambdaForm$DMH/0x00007f2ce0123400.newInvokeSpecial(Object, Object, Object, Object, Object):Object (30 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 7  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                        @ 24  som.Vector$$Lambda/0x00007f2ce003fc10.<init>(Object, boolean[], Object[], int[]):void (26 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=17 <= 300.000000)
                                            @ 17  som.Vector.lambda$remove$0(Object, boolean[], Object[], int[], Object):void (28 bytes)   relevance-based (relevance=1.000000, probability=3.960278, bonus=1.000000, nodes=26 <= 300.000000)
                                          @ 20  som.Vector$$Lambda/0x00007f2ce003fc10.apply(Object):void (21 bytes)   relevance-based (relevance=1.000000, probability=3.960278, bonus=1.000000, nodes=28 <= 300.000000)
                                        @ 36  som.Vector.forEach(ForEachInterface):void (32 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=41 <= 300.000000)
                                      @ 5  som.Vector.remove(Object):boolean (61 bytes)   relevance-based (relevance=2.000000, probability=0.500000, bonus=1.000000, nodes=73 <= 300.000000)
                                    @ 12  deltablue.Variable.removeConstraint(AbstractConstraint):void (23 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=90 <= 300.000000)
                                  @ 13  deltablue.UnaryConstraint.removeFromGraph():void (21 bytes)   relevance-based (relevance=4.000000, probability=1.000000, bonus=1.000000, nodes=100 <= 300.000000)
                                @ 55  deltablue.AbstractConstraint.destroyConstraint(Planner):void (17 bytes)   relevance-based (relevance=1.000128, probability=1.000000, bonus=1.000000, nodes=224 <= 300.000000)
                              @ 109  deltablue.Planner.change(Variable, int):void (59 bytes)   not inlining relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=415 > 300.000000)
                            @ 9  deltablue.EditConstraint.<init>(Variable, Strength$Sym, Planner):void (8 bytes)   inline method (bytecode parsing)
                              @ 4  deltablue.UnaryConstraint.<init>(Variable, Strength$Sym, Planner):void (16 bytes)   inline method (bytecode parsing)
                                @ 2  deltablue.AbstractConstraint.<init>(Strength$Sym):void (13 bytes)   inline method (bytecode parsing)
                                  @ 6  deltablue.Strength.of(Strength$Sym):Strength (11 bytes)   inline method (bytecode parsing)
                                @ 12  deltablue.AbstractConstraint.addConstraint(Planner):void (10 bytes)   inline method (bytecode parsing)
                            @ 39  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 44  deltablue.Plan.execute():void (10 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object):Object (8 bytes)   inline method (bytecode parsing)
                                @ 4  java.lang.invoke.LambdaForm$MH/0x00007f2ce0000800.invoke(Object):Object (8 bytes)   inline method (bytecode parsing)
                                    @ 7  deltablue.Strength$Sym.customHash():int (5 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                                  @ 1  som.Dictionary.hash(Dictionary$CustomHash):int (20 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                            @ 6  som.Dictionary.getBucketIdx(int):int (10 bytes)   inline method (bytecode parsing)
                                  @ 7  som.Dictionary.getBucket(int):Dictionary$Entry (11 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                                  @ 18  som.IdentityDictionary$IdEntry.match(int, Object):boolean (22 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                @ 4  som.Dictionary.at(Dictionary$CustomHash):Object (39 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=28 <= 300.000000)
                            @ 5  deltablue.Variable.addConstraint(AbstractConstraint):void (9 bytes)   inline method (bytecode parsing)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                    @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000128, probability=0.000128, bonus=1.000000, nodes=41 > 0.038411)
                                  @ 5  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=35 <= 300.000000)
                                @ 1  deltablue.UnaryConstraint.addToGraph():void (14 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=47 <= 300.000000)
                            @ 34  jdk.internal.logger.SurrogateLogger.isFilteredFrame(StackWalker$StackFrame):boolean (5 bytes)   inline method (bytecode parsing)
                                @ 5  java.util.logging.LogRecord$CallerFinder.test(StackWalker$StackFrame):boolean (46 bytes)   not inlining relevance-based (relevance=0.001642, probability=0.001299, bonus=1.000000, nodes=30 > 0.492595)
                                  @ 1  deltablue.Planner.newMark():int (15 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 2  java.lang.module.ModuleDescriptor.name():String (5 bytes)   inline accessor method (bytecode parsing)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                                @ 8  jdk.internal.module.DefaultRoots.lambda$compute$1(ModuleFinder, ModuleDescriptor):boolean (29 bytes)   not inlining relevance-based (relevance=0.005200, probability=0.004114, bonus=1.000000, nodes=28 > 1.559883)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f2ce003d750.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 11  jdk.internal.module.ModuleReferenceImpl.moduleResolution():ModuleResolution (5 bytes)   inline accessor method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 1  jdk.internal.module.ModuleResolution.doNotResolveByDefault(ModuleReference):boolean (26 bytes)   not inlining relevance-based (relevance=0.005200, probability=0.004114, bonus=1.000000, nodes=24 > 1.559883)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                                @ 4  jdk.internal.module.DefaultRoots.lambda$compute$0(ModuleReference):boolean (13 bytes)   trivial (relevance=0.005200, probability=0.004114, bonus=1.000000, nodes=9)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 1  java.lang.module.ModuleDescriptor$Exports.isQualified():boolean (18 bytes)   not inlining relevance-based (relevance=0.006294, probability=0.004981, bonus=1.000000, nodes=10 > 1.888280)
                                @ 4  jdk.internal.module.DefaultRoots.lambda$exportsAPI$2(ModuleDescriptor$Exports):boolean (13 bytes)   trivial (relevance=0.006294, probability=0.004981, bonus=1.000000, nodes=9)
                                  @ 8  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 713, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=72)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  sun.management.spi.PlatformMBeanProvider$PlatformComponent.mbeanInterfaceNames():Set (0 bytes)   not inlining no methods remaining after filtering less frequent methods (8 methods previously)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f2ce003d750.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 41  java.lang.Enum.ordinal():int (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 19  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 713, relevance=1.000000, probability=1.002830, bonus=1.000000, nodes=72)
                                @ 6  deltablue.Planner.incrementalAdd(AbstractConstraint):void (27 bytes)   relevance-based (relevance=1.000128, probability=1.000000, bonus=1.000000, nodes=28 <= 300.000000)
                            @ 5  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                        @ 2  java.util.HashMap.getNode(Object):HashMap$Node (150 bytes)   not inlining too large previous low-level graph (low-level-nodes: 643, relevance=0.272372, probability=0.115182, bonus=1.000000, nodes=108)
                                      @ 5  java.util.HashMap.containsKey(Object):boolean (14 bytes)   relevance-based (relevance=0.272372, probability=0.115182, bonus=1.000000, nodes=12 <= 81.711582)
                                    @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000128, probability=0.000128, bonus=1.000000, nodes=41 > 0.038411)
                                    @ 5  java.util.HashSet.contains(Object):boolean (9 bytes)   relevance-based (relevance=0.272372, probability=0.196892, bonus=1.000000, nodes=29 <= 81.711582)
                                  @ 11  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=35 <= 300.000000)
                                @ 14  som.Vector.with(Object):Vector (16 bytes)   relevance-based (relevance=1.000128, probability=1.000000, bonus=1.000000, nodes=40 <= 300.000000)
                            @ 4  som.Vector.<init>():void (7 bytes)   inline method (bytecode parsing)
                              @ 3  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 10  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                      @ 18  java.lang.String.equals(Object):boolean (56 bytes)   relevance-based (relevance=1.000000, probability=0.616031, bonus=1.000000, nodes=50 <= 300.000000)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.Planner$$Lambda/0x00007f2ce003e228.<init>(Vector):void (10 bytes)   inline method (bytecode parsing)
                                    @ 5  java.util.Collections.eq(Object, Object):boolean (22 bytes)   relevance-based (relevance=1.000000, probability=0.722879, bonus=1.000000, nodes=60 <= 300.000000)
                                  @ 7  java.util.Collections$SingletonSet.contains(Object):boolean (9 bytes)   relevance-based (relevance=1.000000, probability=0.919770, bonus=1.000000, nodes=101 <= 300.000000)
                                      @ 1  deltablue.AbstractConstraint.isInput():boolean (2 bytes)   not inlining no type profile exists
                                @ 8  java.lang.management.ManagementFactory$PlatformMBeanFinder.lambda$findSingleton$1(String, PlatformMBeanProvider$PlatformComponent):boolean (13 bytes)   relevance-based (relevance=1.000000, probability=0.919770, bonus=1.000000, nodes=108 <= 300.000000)
                                      @ 8  deltablue.AbstractConstraint.isSatisfied():boolean (0 bytes)   not inlining no type profile exists
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                              @ 8  java.lang.management.ManagementFactory$PlatformMBeanFinder$$Lambda/0x00007f2ce014cce8.test(Object):boolean (12 bytes)   not inlining callee invoke probability is too high (invokeP=5.125229, relevance=1.162387, probability=1.000000, bonus=1.000000, nodes=177)
                                          @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000128, probability=0.000253, bonus=1.000000, nodes=41 > 0.038411)
                                        @ 16  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=1.980139, bonus=1.000000, nodes=35 <= 300.000000)
                                      @ 8  deltablue.Planner.lambda$extractPlanFromConstraints$1(Vector, AbstractConstraint):void (20 bytes)   relevance-based (relevance=1.000000, probability=7.920556, bonus=1.000000, nodes=59 <= 300.000000)
                              @ 21  java.util.stream.ReferencePipeline$3$1.accept(Object):void (23 bytes)   not inlining relevance-based (relevance=0.162387, probability=0.139701, bonus=1.000000, nodes=60 > 48.716012)
                                    @ 20  deltablue.Planner$$Lambda/0x00007f2ce003e228.apply(Object):void (12 bytes)   relevance-based (relevance=1.000000, probability=7.920556, bonus=1.000000, nodes=64 <= 300.000000)
                                  @ 15  som.Vector.forEach(ForEachInterface):void (32 bytes)   not inlining callee invoke probability is too high (invokeP=11.881088, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=77)
                            @ 9  deltablue.Plan.<init>():void (7 bytes)   inline method (bytecode parsing)
                              @ 3  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 39  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 67  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                                  @ 20  deltablue.Planner.makePlan(Vector):Plan (86 bytes)   not inlining too large previous low-level graph (low-level-nodes: 840, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=69)
                                @ 22  deltablue.Planner.extractPlanFromConstraints(Vector):Plan (24 bytes)   relevance-based (relevance=1.000128, probability=1.000000, bonus=1.000000, nodes=27 <= 300.000000)
                                  @ 1  deltablue.UnaryConstraint.isSatisfied():boolean (5 bytes)   trivial (relevance=2.000000, probability=1.000000, bonus=1.000000, nodes=5)
                            @ 21  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.Planner$$Lambda/0x00007f2ce01f68f0.<init>(Planner):void (10 bytes)   inline method (bytecode parsing)
                                    @ 1  deltablue.UnaryConstraint.getOutput():Variable (5 bytes)   trivial (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=5)
                                    @ 6  deltablue.UnaryConstraint.markUnsatisfied():void (6 bytes)   trivial (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=7)
                            @ 1  som.Vector.capacity():int (6 bytes)   inline method (bytecode parsing)
                            @ 31  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object, Object, Object, Object):Object (13 bytes)   inline method (bytecode parsing)
                            @ 81  java.lang.Integer.rotateLeft(int, int):int (9 bytes)   inline method (bytecode parsing)
                              @ 9  java.lang.invoke.LambdaForm$DMH/0x00007f2ce0123400.newInvokeSpecial(Object, Object, Object, Object, Object):Object (30 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 7  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                            @ 142  java.lang.Integer.rotateLeft(int, int):int (9 bytes)   inline method (bytecode parsing)
                            @ 187  java.lang.Integer.rotateLeft(int, int):int (9 bytes)   inline method (bytecode parsing)
                                          @ 24  som.Vector$$Lambda/0x00007f2ce003fc10.<init>(Object, boolean[], Object[], int[]):void (26 bytes)   relevance-based (relevance=1.000000, probability=0.250000, bonus=1.000000, nodes=17 <= 300.000000)
                            @ 217  java.lang.Integer.rotateLeft(int, int):int (9 bytes)   inline method (bytecode parsing)
                            @ 257  java.lang.Integer.rotateLeft(int, int):int (9 bytes)   inline method (bytecode parsing)
                            @ 287  java.lang.Integer.rotateLeft(int, int):int (9 bytes)   inline method (bytecode parsing)
                            @ 336  java.lang.Integer.rotateLeft(int, int):int (9 bytes)   inline method (bytecode parsing)
                            @ 366  java.lang.Integer.rotateLeft(int, int):int (9 bytes)   inline method (bytecode parsing)
                                              @ 17  som.Vector.lambda$remove$0(Object, boolean[], Object[], int[], Object):void (28 bytes)   relevance-based (relevance=1.000000, probability=1.980139, bonus=1.000000, nodes=26 <= 300.000000)
                            @ 406  java.lang.Integer.rotateLeft(int, int):int (9 bytes)   inline method (bytecode parsing)
                                            @ 20  som.Vector$$Lambda/0x00007f2ce003fc10.apply(Object):void (21 bytes)   relevance-based (relevance=1.000000, probability=1.980139, bonus=1.000000, nodes=28 <= 300.000000)
                                          @ 36  som.Vector.forEach(ForEachInterface):void (32 bytes)   relevance-based (relevance=1.000000, probability=0.250000, bonus=1.000000, nodes=41 <= 300.000000)
                                        @ 5  som.Vector.remove(Object):boolean (61 bytes)   relevance-based (relevance=2.000000, probability=0.250000, bonus=1.000000, nodes=73 <= 300.000000)
                                      @ 12  deltablue.Variable.removeConstraint(AbstractConstraint):void (23 bytes)   relevance-based (relevance=1.000000, probability=0.250000, bonus=1.000000, nodes=90 <= 300.000000)
                            @ 7  java.lang.invoke.VarHandleGuards.guard_LI_I(VarHandle, Object, int, VarHandle$AccessDescriptor):int (78 bytes)   inline method (bytecode parsing)
                                    @ 10  deltablue.UnaryConstraint.removeFromGraph():void (21 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=100 <= 300.000000)
                              @ 2  java.lang.invoke.VarHandle.checkAccessModeThenIsDirect(VarHandle$AccessDescriptor):boolean (29 bytes)   inline method (bytecode parsing)
                                @ 12  java.lang.invoke.VarHandle.accessModeType(int):MethodType (41 bytes)   inline method (bytecode parsing)
                              @ 42  java.lang.invoke.VarForm.getMemberName(int):MemberName (31 bytes)   inline method (bytecode parsing)
                            @ 4  som.Vector.<init>():void (7 bytes)   inline method (bytecode parsing)
                              @ 3  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                              @ 45  java.lang.invoke.VarHandleByteArrayAsInts$ArrayHandle.get(VarHandle, Object, int):int (36 bytes)   inline method (bytecode parsing)
                            @ 10  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 14  deltablue.Strength.absoluteWeakest():Strength (4 bytes)   inline method (bytecode parsing)
                                @ 19  java.lang.invoke.VarHandleByteArrayAsInts$ArrayHandle.index(byte[], int):int (12 bytes)   inline method (bytecode parsing)
                            @ 17  deltablue.Variable.setWalkStrength(Strength):void (6 bytes)   inline method (bytecode parsing)
                            @ 22  deltablue.Variable.setStay(boolean):void (6 bytes)   inline method (bytecode parsing)
                                @ 32  jdk.internal.misc.Unsafe.getIntUnaligned(Object, long, boolean):int (12 bytes)   inline method (bytecode parsing)
                            @ 48  deltablue.Variable.getConstraints():Vector (5 bytes)   inline accessor method (bytecode parsing)
                            @ 52  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                                  @ 8  jdk.internal.misc.Unsafe.convEndian(boolean, int):int (16 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                            @ 20  java.lang.invoke.VarHandleGuards.guard_LI_I(VarHandle, Object, int, VarHandle$AccessDescriptor):int (78 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                              @ 2  java.lang.invoke.VarHandle.checkAccessModeThenIsDirect(VarHandle$AccessDescriptor):boolean (29 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.Planner$$Lambda/0x00007f2ce01f6000.<init>(Vector):void (10 bytes)   inline method (bytecode parsing)
                                @ 12  java.lang.invoke.VarHandle.accessModeType(int):MethodType (41 bytes)   inline method (bytecode parsing)
                            @ 64  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                              @ 42  java.lang.invoke.VarForm.getMemberName(int):MemberName (31 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.Planner$$Lambda/0x00007f2ce01f6220.<init>(Vector):void (10 bytes)   inline method (bytecode parsing)
                              @ 45  java.lang.invoke.VarHandleByteArrayAsInts$ArrayHandle.get(VarHandle, Object, int):int (36 bytes)   inline method (bytecode parsing)
                            @ 76  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object):Object (8 bytes)   inline method (bytecode parsing)
                                @ 19  java.lang.invoke.VarHandleByteArrayAsInts$ArrayHandle.index(byte[], int):int (12 bytes)   inline method (bytecode parsing)
                              @ 4  java.lang.invoke.LambdaForm$MH/0x00007f2ce0000800.invoke(Object):Object (8 bytes)   inline method (bytecode parsing)
                                @ 32  jdk.internal.misc.Unsafe.getIntUnaligned(Object, long, boolean):int (12 bytes)   inline method (bytecode parsing)
                                  @ 8  jdk.internal.misc.Unsafe.convEndian(boolean, int):int (16 bytes)   inline method (bytecode parsing)
                                    @ 15  deltablue.Planner.removePropagateFrom(Variable):Vector (86 bytes)   not inlining too large previous low-level graph (low-level-nodes: 793, relevance=2.000000, probability=0.500000, bonus=1.000000, nodes=81)
                            @ 34  java.lang.invoke.VarHandleGuards.guard_LI_I(VarHandle, Object, int, VarHandle$AccessDescriptor):int (78 bytes)   inline method (bytecode parsing)
                              @ 2  java.lang.invoke.VarHandle.checkAccessModeThenIsDirect(VarHandle$AccessDescriptor):boolean (29 bytes)   inline method (bytecode parsing)
                                @ 12  java.lang.invoke.VarHandle.accessModeType(int):MethodType (41 bytes)   inline method (bytecode parsing)
                            @ 8  deltablue.Planner.lambda$incrementalRemove$0(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                              @ 42  java.lang.invoke.VarForm.getMemberName(int):MemberName (31 bytes)   inline method (bytecode parsing)
                              @ 45  java.lang.invoke.VarHandleByteArrayAsInts$ArrayHandle.get(VarHandle, Object, int):int (36 bytes)   inline method (bytecode parsing)
                                @ 19  java.lang.invoke.VarHandleByteArrayAsInts$ArrayHandle.index(byte[], int):int (12 bytes)   inline method (bytecode parsing)
                                          @ 1  deltablue.Planner.newMark():int (15 bytes)   relevance-based (relevance=1.000000, probability=3.960278, bonus=1.000000, nodes=10 <= 300.000000)
                                @ 32  jdk.internal.misc.Unsafe.getIntUnaligned(Object, long, boolean):int (12 bytes)   inline method (bytecode parsing)
                                  @ 8  jdk.internal.misc.Unsafe.convEndian(boolean, int):int (16 bytes)   inline method (bytecode parsing)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                            @ 48  java.lang.invoke.VarHandleGuards.guard_LI_I(VarHandle, Object, int, VarHandle$AccessDescriptor):int (78 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                              @ 2  java.lang.invoke.VarHandle.checkAccessModeThenIsDirect(VarHandle$AccessDescriptor):boolean (29 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 12  java.lang.invoke.VarHandle.accessModeType(int):MethodType (41 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f2ce003d750.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                              @ 42  java.lang.invoke.VarForm.getMemberName(int):MemberName (31 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                              @ 45  java.lang.invoke.VarHandleByteArrayAsInts$ArrayHandle.get(VarHandle, Object, int):int (36 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                                @ 19  java.lang.invoke.VarHandleByteArrayAsInts$ArrayHandle.index(byte[], int):int (12 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                @ 32  jdk.internal.misc.Unsafe.getIntUnaligned(Object, long, boolean):int (12 bytes)   inline method (bytecode parsing)
                                  @ 8  jdk.internal.misc.Unsafe.convEndian(boolean, int):int (16 bytes)   inline method (bytecode parsing)
                                          @ 8  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 713, relevance=1.000000, probability=3.960278, bonus=1.000000, nodes=72)
                            @ 62  java.lang.invoke.VarHandleGuards.guard_LI_I(VarHandle, Object, int, VarHandle$AccessDescriptor):int (78 bytes)   inline method (bytecode parsing)
                              @ 2  java.lang.invoke.VarHandle.checkAccessModeThenIsDirect(VarHandle$AccessDescriptor):boolean (29 bytes)   inline method (bytecode parsing)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                                @ 12  java.lang.invoke.VarHandle.accessModeType(int):MethodType (41 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                              @ 42  java.lang.invoke.VarForm.getMemberName(int):MemberName (31 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f2ce003d750.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                              @ 45  java.lang.invoke.VarHandleByteArrayAsInts$ArrayHandle.get(VarHandle, Object, int):int (36 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                                @ 19  java.lang.invoke.VarHandleByteArrayAsInts$ArrayHandle.index(byte[], int):int (12 bytes)   inline method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                                @ 32  jdk.internal.misc.Unsafe.getIntUnaligned(Object, long, boolean):int (12 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                                  @ 8  jdk.internal.misc.Unsafe.convEndian(boolean, int):int (16 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 76  java.lang.invoke.VarHandleGuards.guard_LI_I(VarHandle, Object, int, VarHandle$AccessDescriptor):int (78 bytes)   inline method (bytecode parsing)
                              @ 2  java.lang.invoke.VarHandle.checkAccessModeThenIsDirect(VarHandle$AccessDescriptor):boolean (29 bytes)   inline method (bytecode parsing)
                                @ 12  java.lang.invoke.VarHandle.accessModeType(int):MethodType (41 bytes)   inline method (bytecode parsing)
                                          @ 19  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 713, relevance=1.000000, probability=3.971486, bonus=1.000000, nodes=72)
                                        @ 2  deltablue.Planner.incrementalAdd(AbstractConstraint):void (27 bytes)   relevance-based (relevance=1.000000, probability=3.960278, bonus=1.000000, nodes=28 <= 300.000000)
                              @ 42  java.lang.invoke.VarForm.getMemberName(int):MemberName (31 bytes)   inline method (bytecode parsing)
                                      @ 20  deltablue.Planner$$Lambda/0x00007f2ce01f68f0.apply(Object):void (12 bytes)   relevance-based (relevance=1.000000, probability=3.960278, bonus=1.000000, nodes=37 <= 300.000000)
                              @ 45  java.lang.invoke.VarHandleByteArrayAsInts$ArrayHandle.get(VarHandle, Object, int):int (36 bytes)   inline method (bytecode parsing)
                                @ 19  java.lang.invoke.VarHandleByteArrayAsInts$ArrayHandle.index(byte[], int):int (12 bytes)   inline method (bytecode parsing)
                                    @ 26  som.Vector.forEach(ForEachInterface):void (32 bytes)   not inlining callee invoke probability is too high (invokeP=15.863529, relevance=2.000000, probability=0.500000, bonus=1.000000, nodes=53)
                                  @ 9  deltablue.Planner.incrementalRemove(AbstractConstraint):void (30 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=121 <= 300.000000)
                                @ 32  jdk.internal.misc.Unsafe.getIntUnaligned(Object, long, boolean):int (12 bytes)   inline method (bytecode parsing)
                                  @ 8  jdk.internal.misc.Unsafe.convEndian(boolean, int):int (16 bytes)   inline method (bytecode parsing)
                            @ 91  java.lang.invoke.VarHandleGuards.guard_LI_I(VarHandle, Object, int, VarHandle$AccessDescriptor):int (78 bytes)   inline method (bytecode parsing)
                              @ 2  java.lang.invoke.VarHandle.checkAccessModeThenIsDirect(VarHandle$AccessDescriptor):boolean (29 bytes)   inline method (bytecode parsing)
                                @ 12  java.lang.invoke.VarHandle.accessModeType(int):MethodType (41 bytes)   inline method (bytecode parsing)
                              @ 42  java.lang.invoke.VarForm.getMemberName(int):MemberName (31 bytes)   inline method (bytecode parsing)
                            @ 1  som.Vector.capacity():int (6 bytes)   inline method (bytecode parsing)
                              @ 45  java.lang.invoke.VarHandleByteArrayAsInts$ArrayHandle.get(VarHandle, Object, int):int (36 bytes)   inline method (bytecode parsing)
                                @ 19  java.lang.invoke.VarHandleByteArrayAsInts$ArrayHandle.index(byte[], int):int (12 bytes)   inline method (bytecode parsing)
                            @ 31  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object, Object, Object, Object):Object (13 bytes)   inline method (bytecode parsing)
                              @ 9  java.lang.invoke.LambdaForm$DMH/0x00007f2ce0123400.newInvokeSpecial(Object, Object, Object, Object, Object):Object (30 bytes)   inline method (bytecode parsing)
                                @ 32  jdk.internal.misc.Unsafe.getIntUnaligned(Object, long, boolean):int (12 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                  @ 8  jdk.internal.misc.Unsafe.convEndian(boolean, int):int (16 bytes)   inline method (bytecode parsing)
                                @ 7  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                            @ 106  java.lang.invoke.VarHandleGuards.guard_LI_I(VarHandle, Object, int, VarHandle$AccessDescriptor):int (78 bytes)   inline method (bytecode parsing)
                              @ 2  java.lang.invoke.VarHandle.checkAccessModeThenIsDirect(VarHandle$AccessDescriptor):boolean (29 bytes)   inline method (bytecode parsing)
                                @ 12  java.lang.invoke.VarHandle.accessModeType(int):MethodType (41 bytes)   inline method (bytecode parsing)
                                        @ 24  som.Vector$$Lambda/0x00007f2ce003fc10.<init>(Object, boolean[], Object[], int[]):void (26 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=17 <= 300.000000)
                              @ 42  java.lang.invoke.VarForm.getMemberName(int):MemberName (31 bytes)   inline method (bytecode parsing)
                              @ 45  java.lang.invoke.VarHandleByteArrayAsInts$ArrayHandle.get(VarHandle, Object, int):int (36 bytes)   inline method (bytecode parsing)
                                @ 19  java.lang.invoke.VarHandleByteArrayAsInts$ArrayHandle.index(byte[], int):int (12 bytes)   inline method (bytecode parsing)
                                @ 32  jdk.internal.misc.Unsafe.getIntUnaligned(Object, long, boolean):int (12 bytes)   inline method (bytecode parsing)
                                  @ 8  jdk.internal.misc.Unsafe.convEndian(boolean, int):int (16 bytes)   inline method (bytecode parsing)
                                            @ 17  som.Vector.lambda$remove$0(Object, boolean[], Object[], int[], Object):void (28 bytes)   relevance-based (relevance=1.000000, probability=3.960278, bonus=1.000000, nodes=26 <= 300.000000)
                                          @ 20  som.Vector$$Lambda/0x00007f2ce003fc10.apply(Object):void (21 bytes)   relevance-based (relevance=1.000000, probability=3.960278, bonus=1.000000, nodes=28 <= 300.000000)
                            @ 121  java.lang.invoke.VarHandleGuards.guard_LI_I(VarHandle, Object, int, VarHandle$AccessDescriptor):int (78 bytes)   inline method (bytecode parsing)
                              @ 2  java.lang.invoke.VarHandle.checkAccessModeThenIsDirect(VarHandle$AccessDescriptor):boolean (29 bytes)   inline method (bytecode parsing)
                                        @ 36  som.Vector.forEach(ForEachInterface):void (32 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=41 <= 300.000000)
                                @ 12  java.lang.invoke.VarHandle.accessModeType(int):MethodType (41 bytes)   inline method (bytecode parsing)
                                      @ 5  som.Vector.remove(Object):boolean (61 bytes)   relevance-based (relevance=2.000000, probability=0.500000, bonus=1.000000, nodes=73 <= 300.000000)
                              @ 42  java.lang.invoke.VarForm.getMemberName(int):MemberName (31 bytes)   inline method (bytecode parsing)
                              @ 45  java.lang.invoke.VarHandleByteArrayAsInts$ArrayHandle.get(VarHandle, Object, int):int (36 bytes)   inline method (bytecode parsing)
                                    @ 12  deltablue.Variable.removeConstraint(AbstractConstraint):void (23 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=90 <= 300.000000)
                                @ 19  java.lang.invoke.VarHandleByteArrayAsInts$ArrayHandle.index(byte[], int):int (12 bytes)   inline method (bytecode parsing)
                                @ 32  jdk.internal.misc.Unsafe.getIntUnaligned(Object, long, boolean):int (12 bytes)   inline method (bytecode parsing)
                                  @ 13  deltablue.UnaryConstraint.removeFromGraph():void (21 bytes)   relevance-based (relevance=4.000000, probability=1.000000, bonus=1.000000, nodes=100 <= 300.000000)
                                  @ 8  jdk.internal.misc.Unsafe.convEndian(boolean, int):int (16 bytes)   inline method (bytecode parsing)
                            @ 136  java.lang.invoke.VarHandleGuards.guard_LI_I(VarHandle, Object, int, VarHandle$AccessDescriptor):int (78 bytes)   inline method (bytecode parsing)
                              @ 2  java.lang.invoke.VarHandle.checkAccessModeThenIsDirect(VarHandle$AccessDescriptor):boolean (29 bytes)   inline method (bytecode parsing)
                                @ 55  deltablue.AbstractConstraint.destroyConstraint(Planner):void (17 bytes)   relevance-based (relevance=1.000128, probability=1.000000, bonus=1.000000, nodes=224 <= 300.000000)
                                @ 12  java.lang.invoke.VarHandle.accessModeType(int):MethodType (41 bytes)   inline method (bytecode parsing)
                              @ 42  java.lang.invoke.VarForm.getMemberName(int):MemberName (31 bytes)   inline method (bytecode parsing)
                              @ 45  java.lang.invoke.VarHandleByteArrayAsInts$ArrayHandle.get(VarHandle, Object, int):int (36 bytes)   inline method (bytecode parsing)
                                @ 19  java.lang.invoke.VarHandleByteArrayAsInts$ArrayHandle.index(byte[], int):int (12 bytes)   inline method (bytecode parsing)
                                @ 32  jdk.internal.misc.Unsafe.getIntUnaligned(Object, long, boolean):int (12 bytes)   inline method (bytecode parsing)
                              @ 139  deltablue.Planner.change(Variable, int):void (59 bytes)   not inlining relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=415 > 300.000000)
                                  @ 8  jdk.internal.misc.Unsafe.convEndian(boolean, int):int (16 bytes)   inline method (bytecode parsing)
                            @ 9  deltablue.EditConstraint.<init>(Variable, Strength$Sym, Planner):void (8 bytes)   inline method (bytecode parsing)
                              @ 4  deltablue.UnaryConstraint.<init>(Variable, Strength$Sym, Planner):void (16 bytes)   inline method (bytecode parsing)
                            @ 151  java.lang.invoke.VarHandleGuards.guard_LI_I(VarHandle, Object, int, VarHandle$AccessDescriptor):int (78 bytes)   inline method (bytecode parsing)
                                @ 2  deltablue.AbstractConstraint.<init>(Strength$Sym):void (13 bytes)   inline method (bytecode parsing)
                              @ 2  java.lang.invoke.VarHandle.checkAccessModeThenIsDirect(VarHandle$AccessDescriptor):boolean (29 bytes)   inline method (bytecode parsing)
                                  @ 6  deltablue.Strength.of(Strength$Sym):Strength (11 bytes)   inline method (bytecode parsing)
                                @ 12  java.lang.invoke.VarHandle.accessModeType(int):MethodType (41 bytes)   inline method (bytecode parsing)
                                @ 12  deltablue.AbstractConstraint.addConstraint(Planner):void (10 bytes)   inline method (bytecode parsing)
                            @ 39  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                              @ 42  java.lang.invoke.VarForm.getMemberName(int):MemberName (31 bytes)   inline method (bytecode parsing)
                            @ 44  deltablue.Plan.execute():void (10 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object):Object (8 bytes)   inline method (bytecode parsing)
                              @ 45  java.lang.invoke.VarHandleByteArrayAsInts$ArrayHandle.get(VarHandle, Object, int):int (36 bytes)   inline method (bytecode parsing)
                                @ 4  java.lang.invoke.LambdaForm$MH/0x00007f2ce0000800.invoke(Object):Object (8 bytes)   inline method (bytecode parsing)
                                @ 19  java.lang.invoke.VarHandleByteArrayAsInts$ArrayHandle.index(byte[], int):int (12 bytes)   inline method (bytecode parsing)
                                @ 32  jdk.internal.misc.Unsafe.getIntUnaligned(Object, long, boolean):int (12 bytes)   inline method (bytecode parsing)
                                  @ 8  jdk.internal.misc.Unsafe.convEndian(boolean, int):int (16 bytes)   inline method (bytecode parsing)
                            @ 166  java.lang.invoke.VarHandleGuards.guard_LI_I(VarHandle, Object, int, VarHandle$AccessDescriptor):int (78 bytes)   inline method (bytecode parsing)
                              @ 2  java.lang.invoke.VarHandle.checkAccessModeThenIsDirect(VarHandle$AccessDescriptor):boolean (29 bytes)   inline method (bytecode parsing)
                                @ 12  java.lang.invoke.VarHandle.accessModeType(int):MethodType (41 bytes)   inline method (bytecode parsing)
                                    @ 7  deltablue.Strength$Sym.customHash():int (5 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                              @ 42  java.lang.invoke.VarForm.getMemberName(int):MemberName (31 bytes)   inline method (bytecode parsing)
                                  @ 1  som.Dictionary.hash(Dictionary$CustomHash):int (20 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                              @ 45  java.lang.invoke.VarHandleByteArrayAsInts$ArrayHandle.get(VarHandle, Object, int):int (36 bytes)   inline method (bytecode parsing)
                            @ 6  som.Dictionary.getBucketIdx(int):int (10 bytes)   inline method (bytecode parsing)
                                @ 19  java.lang.invoke.VarHandleByteArrayAsInts$ArrayHandle.index(byte[], int):int (12 bytes)   inline method (bytecode parsing)
                                  @ 7  som.Dictionary.getBucket(int):Dictionary$Entry (11 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                                @ 32  jdk.internal.misc.Unsafe.getIntUnaligned(Object, long, boolean):int (12 bytes)   inline method (bytecode parsing)
                                  @ 8  jdk.internal.misc.Unsafe.convEndian(boolean, int):int (16 bytes)   inline method (bytecode parsing)
                            @ 181  java.lang.invoke.VarHandleGuards.guard_LI_I(VarHandle, Object, int, VarHandle$AccessDescriptor):int (78 bytes)   inline method (bytecode parsing)
                                  @ 18  som.IdentityDictionary$IdEntry.match(int, Object):boolean (22 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=13 <= 300.000000)
                              @ 2  java.lang.invoke.VarHandle.checkAccessModeThenIsDirect(VarHandle$AccessDescriptor):boolean (29 bytes)   inline method (bytecode parsing)
                                @ 12  java.lang.invoke.VarHandle.accessModeType(int):MethodType (41 bytes)   inline method (bytecode parsing)
                                @ 4  som.Dictionary.at(Dictionary$CustomHash):Object (39 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=28 <= 300.000000)
                              @ 42  java.lang.invoke.VarForm.getMemberName(int):MemberName (31 bytes)   inline method (bytecode parsing)
                            @ 5  deltablue.Variable.addConstraint(AbstractConstraint):void (9 bytes)   inline method (bytecode parsing)
                              @ 45  java.lang.invoke.VarHandleByteArrayAsInts$ArrayHandle.get(VarHandle, Object, int):int (36 bytes)   inline method (bytecode parsing)
                                @ 19  java.lang.invoke.VarHandleByteArrayAsInts$ArrayHandle.index(byte[], int):int (12 bytes)   inline method (bytecode parsing)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                @ 32  jdk.internal.misc.Unsafe.getIntUnaligned(Object, long, boolean):int (12 bytes)   inline method (bytecode parsing)
                                  @ 8  jdk.internal.misc.Unsafe.convEndian(boolean, int):int (16 bytes)   inline method (bytecode parsing)
                            @ 196  java.lang.invoke.VarHandleGuards.guard_LI_I(VarHandle, Object, int, VarHandle$AccessDescriptor):int (78 bytes)   inline method (bytecode parsing)
                              @ 2  java.lang.invoke.VarHandle.checkAccessModeThenIsDirect(VarHandle$AccessDescriptor):boolean (29 bytes)   inline method (bytecode parsing)
                                @ 12  java.lang.invoke.VarHandle.accessModeType(int):MethodType (41 bytes)   inline method (bytecode parsing)
                                    @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000128, probability=0.000128, bonus=1.000000, nodes=41 > 0.038411)
                                  @ 5  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=35 <= 300.000000)
                              @ 42  java.lang.invoke.VarForm.getMemberName(int):MemberName (31 bytes)   inline method (bytecode parsing)
                                @ 1  deltablue.UnaryConstraint.addToGraph():void (14 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=47 <= 300.000000)
                              @ 45  java.lang.invoke.VarHandleByteArrayAsInts$ArrayHandle.get(VarHandle, Object, int):int (36 bytes)   inline method (bytecode parsing)
                                @ 19  java.lang.invoke.VarHandleByteArrayAsInts$ArrayHandle.index(byte[], int):int (12 bytes)   inline method (bytecode parsing)
                                @ 32  jdk.internal.misc.Unsafe.getIntUnaligned(Object, long, boolean):int (12 bytes)   inline method (bytecode parsing)
                                  @ 8  jdk.internal.misc.Unsafe.convEndian(boolean, int):int (16 bytes)   inline method (bytecode parsing)
                                  @ 1  deltablue.Planner.newMark():int (15 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 211  java.lang.invoke.VarHandleGuards.guard_LI_I(VarHandle, Object, int, VarHandle$AccessDescriptor):int (78 bytes)   inline method (bytecode parsing)
                              @ 2  java.lang.invoke.VarHandle.checkAccessModeThenIsDirect(VarHandle$AccessDescriptor):boolean (29 bytes)   inline method (bytecode parsing)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                                @ 12  java.lang.invoke.VarHandle.accessModeType(int):MethodType (41 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                              @ 42  java.lang.invoke.VarForm.getMemberName(int):MemberName (31 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f2ce003d750.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                              @ 45  java.lang.invoke.VarHandleByteArrayAsInts$ArrayHandle.get(VarHandle, Object, int):int (36 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                                @ 19  java.lang.invoke.VarHandleByteArrayAsInts$ArrayHandle.index(byte[], int):int (12 bytes)   inline method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                                @ 32  jdk.internal.misc.Unsafe.getIntUnaligned(Object, long, boolean):int (12 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                                  @ 8  jdk.internal.misc.Unsafe.convEndian(boolean, int):int (16 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 226  java.lang.invoke.VarHandleGuards.guard_LI_I(VarHandle, Object, int, VarHandle$AccessDescriptor):int (78 bytes)   inline method (bytecode parsing)
                              @ 2  java.lang.invoke.VarHandle.checkAccessModeThenIsDirect(VarHandle$AccessDescriptor):boolean (29 bytes)   inline method (bytecode parsing)
                                @ 12  java.lang.invoke.VarHandle.accessModeType(int):MethodType (41 bytes)   inline method (bytecode parsing)
                                  @ 8  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 713, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=72)
                              @ 42  java.lang.invoke.VarForm.getMemberName(int):MemberName (31 bytes)   inline method (bytecode parsing)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                              @ 45  java.lang.invoke.VarHandleByteArrayAsInts$ArrayHandle.get(VarHandle, Object, int):int (36 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 19  java.lang.invoke.VarHandleByteArrayAsInts$ArrayHandle.index(byte[], int):int (12 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f2ce003d750.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                                @ 32  jdk.internal.misc.Unsafe.getIntUnaligned(Object, long, boolean):int (12 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 8  jdk.internal.misc.Unsafe.convEndian(boolean, int):int (16 bytes)   inline method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 19  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 713, relevance=1.000000, probability=1.002830, bonus=1.000000, nodes=72)
                                @ 6  deltablue.Planner.incrementalAdd(AbstractConstraint):void (27 bytes)   relevance-based (relevance=1.000128, probability=1.000000, bonus=1.000000, nodes=28 <= 300.000000)
                            @ 5  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                              @ 21  sun.security.provider.ByteArrayAccess.b2iBig64(byte[], int, int[]):void (231 bytes)   relevance-based (relevance=1.359528, probability=1.000000, bonus=1.000000, nodes=230 <= 300.000000)
                                    @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000128, probability=0.000128, bonus=1.000000, nodes=41 > 0.038411)
                                  @ 11  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=35 <= 300.000000)
                                @ 14  som.Vector.with(Object):Vector (16 bytes)   relevance-based (relevance=1.000128, probability=1.000000, bonus=1.000000, nodes=40 <= 300.000000)
                            @ 4  som.Vector.<init>():void (7 bytes)   inline method (bytecode parsing)
                              @ 3  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 10  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.Planner$$Lambda/0x00007f2ce003e228.<init>(Vector):void (10 bytes)   inline method (bytecode parsing)
                                      @ 1  deltablue.AbstractConstraint.isInput():boolean (2 bytes)   not inlining no type profile exists
                                      @ 8  deltablue.AbstractConstraint.isSatisfied():boolean (0 bytes)   not inlining no type profile exists
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                          @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000128, probability=0.000253, bonus=1.000000, nodes=41 > 0.038411)
                                        @ 16  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=1.980139, bonus=1.000000, nodes=35 <= 300.000000)
                                      @ 8  deltablue.Planner.lambda$extractPlanFromConstraints$1(Vector, AbstractConstraint):void (20 bytes)   relevance-based (relevance=1.000000, probability=7.920556, bonus=1.000000, nodes=59 <= 300.000000)
                                    @ 20  deltablue.Planner$$Lambda/0x00007f2ce003e228.apply(Object):void (12 bytes)   relevance-based (relevance=1.000000, probability=7.920556, bonus=1.000000, nodes=64 <= 300.000000)
                                  @ 15  som.Vector.forEach(ForEachInterface):void (32 bytes)   not inlining callee invoke probability is too high (invokeP=11.881088, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=77)
                            @ 9  deltablue.Plan.<init>():void (7 bytes)   inline method (bytecode parsing)
                              @ 3  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 39  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 67  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                                  @ 20  deltablue.Planner.makePlan(Vector):Plan (86 bytes)   not inlining too large previous low-level graph (low-level-nodes: 840, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=69)
                                @ 22  deltablue.Planner.extractPlanFromConstraints(Vector):Plan (24 bytes)   relevance-based (relevance=1.000128, probability=1.000000, bonus=1.000000, nodes=27 <= 300.000000)
                                  @ 1  deltablue.UnaryConstraint.isSatisfied():boolean (5 bytes)   trivial (relevance=2.000000, probability=1.000000, bonus=1.000000, nodes=5)
                            @ 21  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.Planner$$Lambda/0x00007f2ce01f68f0.<init>(Planner):void (10 bytes)   inline method (bytecode parsing)
                                    @ 1  deltablue.UnaryConstraint.getOutput():Variable (5 bytes)   trivial (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=5)
                                    @ 6  deltablue.UnaryConstraint.markUnsatisfied():void (6 bytes)   trivial (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=7)
                            @ 1  som.Vector.capacity():int (6 bytes)   inline method (bytecode parsing)
                            @ 31  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object, Object, Object, Object):Object (13 bytes)   inline method (bytecode parsing)
                              @ 9  java.lang.invoke.LambdaForm$DMH/0x00007f2ce0123400.newInvokeSpecial(Object, Object, Object, Object, Object):Object (30 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 7  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                          @ 24  som.Vector$$Lambda/0x00007f2ce003fc10.<init>(Object, boolean[], Object[], int[]):void (26 bytes)   relevance-based (relevance=1.000000, probability=0.250000, bonus=1.000000, nodes=17 <= 300.000000)
                                              @ 17  som.Vector.lambda$remove$0(Object, boolean[], Object[], int[], Object):void (28 bytes)   relevance-based (relevance=1.000000, probability=1.980139, bonus=1.000000, nodes=26 <= 300.000000)
                                            @ 20  som.Vector$$Lambda/0x00007f2ce003fc10.apply(Object):void (21 bytes)   relevance-based (relevance=1.000000, probability=1.980139, bonus=1.000000, nodes=28 <= 300.000000)
                                          @ 36  som.Vector.forEach(ForEachInterface):void (32 bytes)   relevance-based (relevance=1.000000, probability=0.250000, bonus=1.000000, nodes=41 <= 300.000000)
                                        @ 5  som.Vector.remove(Object):boolean (61 bytes)   relevance-based (relevance=2.000000, probability=0.250000, bonus=1.000000, nodes=73 <= 300.000000)
                                      @ 12  deltablue.Variable.removeConstraint(AbstractConstraint):void (23 bytes)   relevance-based (relevance=1.000000, probability=0.250000, bonus=1.000000, nodes=90 <= 300.000000)
                                    @ 10  deltablue.UnaryConstraint.removeFromGraph():void (21 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=100 <= 300.000000)
                            @ 4  som.Vector.<init>():void (7 bytes)   inline method (bytecode parsing)
                              @ 3  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 10  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 14  deltablue.Strength.absoluteWeakest():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 17  deltablue.Variable.setWalkStrength(Strength):void (6 bytes)   inline method (bytecode parsing)
                            @ 22  deltablue.Variable.setStay(boolean):void (6 bytes)   inline method (bytecode parsing)
                            @ 48  deltablue.Variable.getConstraints():Vector (5 bytes)   inline accessor method (bytecode parsing)
                            @ 52  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.Planner$$Lambda/0x00007f2ce01f6000.<init>(Vector):void (10 bytes)   inline method (bytecode parsing)
                            @ 64  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.Planner$$Lambda/0x00007f2ce01f6220.<init>(Vector):void (10 bytes)   inline method (bytecode parsing)
                            @ 76  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object):Object (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.lang.invoke.LambdaForm$MH/0x00007f2ce0000800.invoke(Object):Object (8 bytes)   inline method (bytecode parsing)
                                    @ 15  deltablue.Planner.removePropagateFrom(Variable):Vector (86 bytes)   not inlining too large previous low-level graph (low-level-nodes: 793, relevance=2.000000, probability=0.500000, bonus=1.000000, nodes=81)
                            @ 8  deltablue.Planner.lambda$incrementalRemove$0(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                                          @ 1  deltablue.Planner.newMark():int (15 bytes)   relevance-based (relevance=1.000000, probability=3.960278, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f2ce003d750.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 8  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 713, relevance=1.000000, probability=3.960278, bonus=1.000000, nodes=72)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f2ce003d750.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 19  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 713, relevance=1.000000, probability=3.971486, bonus=1.000000, nodes=72)
                                        @ 2  deltablue.Planner.incrementalAdd(AbstractConstraint):void (27 bytes)   relevance-based (relevance=1.000000, probability=3.960278, bonus=1.000000, nodes=28 <= 300.000000)
                                      @ 20  deltablue.Planner$$Lambda/0x00007f2ce01f68f0.apply(Object):void (12 bytes)   relevance-based (relevance=1.000000, probability=3.960278, bonus=1.000000, nodes=37 <= 300.000000)
                                    @ 26  som.Vector.forEach(ForEachInterface):void (32 bytes)   not inlining callee invoke probability is too high (invokeP=15.863529, relevance=2.000000, probability=0.500000, bonus=1.000000, nodes=53)
                                  @ 9  deltablue.Planner.incrementalRemove(AbstractConstraint):void (30 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=121 <= 300.000000)
                            @ 1  som.Vector.capacity():int (6 bytes)   inline method (bytecode parsing)
                            @ 31  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object, Object, Object, Object):Object (13 bytes)   inline method (bytecode parsing)
                              @ 9  java.lang.invoke.LambdaForm$DMH/0x00007f2ce0123400.newInvokeSpecial(Object, Object, Object, Object, Object):Object (30 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 7  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                        @ 24  som.Vector$$Lambda/0x00007f2ce003fc10.<init>(Object, boolean[], Object[], int[]):void (26 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=17 <= 300.000000)
                                            @ 17  som.Vector.lambda$remove$0(Object, boolean[], Object[], int[], Object):void (28 bytes)   relevance-based (relevance=1.000000, probability=3.960278, bonus=1.000000, nodes=26 <= 300.000000)
                                          @ 20  som.Vector$$Lambda/0x00007f2ce003fc10.apply(Object):void (21 bytes)   relevance-based (relevance=1.000000, probability=3.960278, bonus=1.000000, nodes=28 <= 300.000000)
                                        @ 36  som.Vector.forEach(ForEachInterface):void (32 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=41 <= 300.000000)
                                      @ 5  som.Vector.remove(Object):boolean (61 bytes)   relevance-based (relevance=2.000000, probability=0.500000, bonus=1.000000, nodes=73 <= 300.000000)
                                    @ 12  deltablue.Variable.removeConstraint(AbstractConstraint):void (23 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=90 <= 300.000000)
                                  @ 13  deltablue.UnaryConstraint.removeFromGraph():void (21 bytes)   relevance-based (relevance=4.000000, probability=1.000000, bonus=1.000000, nodes=100 <= 300.000000)
                                @ 55  deltablue.AbstractConstraint.destroyConstraint(Planner):void (17 bytes)   relevance-based (relevance=1.000128, probability=1.000000, bonus=1.000000, nodes=224 <= 300.000000)
                              @ 164  deltablue.Planner.change(Variable, int):void (59 bytes)   not inlining relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=412 > 300.000000)
                            @ 9  deltablue.EditConstraint.<init>(Variable, Strength$Sym, Planner):void (8 bytes)   inline method (bytecode parsing)
                              @ 4  deltablue.UnaryConstraint.<init>(Variable, Strength$Sym, Planner):void (16 bytes)   inline method (bytecode parsing)
                                @ 2  deltablue.AbstractConstraint.<init>(Strength$Sym):void (13 bytes)   inline method (bytecode parsing)
                                  @ 6  deltablue.Strength.of(Strength$Sym):Strength (11 bytes)   inline method (bytecode parsing)
                                @ 12  deltablue.AbstractConstraint.addConstraint(Planner):void (10 bytes)   inline method (bytecode parsing)
                            @ 39  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 44  deltablue.Plan.execute():void (10 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object):Object (8 bytes)   inline method (bytecode parsing)
                                @ 4  java.lang.invoke.LambdaForm$MH/0x00007f2ce0000800.invoke(Object):Object (8 bytes)   inline method (bytecode parsing)
                                    @ 7  deltablue.Strength$Sym.customHash():int (5 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                                  @ 1  som.Dictionary.hash(Dictionary$CustomHash):int (20 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                            @ 6  som.Dictionary.getBucketIdx(int):int (10 bytes)   inline method (bytecode parsing)
                                  @ 7  som.Dictionary.getBucket(int):Dictionary$Entry (11 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                                  @ 18  som.IdentityDictionary$IdEntry.match(int, Object):boolean (22 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                @ 4  som.Dictionary.at(Dictionary$CustomHash):Object (39 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=28 <= 300.000000)
                            @ 5  deltablue.Variable.addConstraint(AbstractConstraint):void (9 bytes)   inline method (bytecode parsing)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                    @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000128, probability=0.000128, bonus=1.000000, nodes=41 > 0.038411)
                                  @ 5  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=35 <= 300.000000)
                                @ 1  deltablue.UnaryConstraint.addToGraph():void (14 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=47 <= 300.000000)
                                  @ 1  deltablue.Planner.newMark():int (15 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f2ce003d750.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 8  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 713, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=72)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f2ce003d750.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 19  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 713, relevance=1.000000, probability=1.002830, bonus=1.000000, nodes=72)
                                @ 6  deltablue.Planner.incrementalAdd(AbstractConstraint):void (27 bytes)   relevance-based (relevance=1.000128, probability=1.000000, bonus=1.000000, nodes=28 <= 300.000000)
                            @ 5  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                    @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000128, probability=0.000128, bonus=1.000000, nodes=41 > 0.038411)
                                  @ 11  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=35 <= 300.000000)
                                @ 14  som.Vector.with(Object):Vector (16 bytes)   relevance-based (relevance=1.000128, probability=1.000000, bonus=1.000000, nodes=40 <= 300.000000)
                            @ 4  som.Vector.<init>():void (7 bytes)   inline method (bytecode parsing)
                              @ 3  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 10  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.Planner$$Lambda/0x00007f2ce003e228.<init>(Vector):void (10 bytes)   inline method (bytecode parsing)
                                      @ 1  deltablue.AbstractConstraint.isInput():boolean (2 bytes)   not inlining no type profile exists
                                      @ 8  deltablue.AbstractConstraint.isSatisfied():boolean (0 bytes)   not inlining no type profile exists
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                          @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000128, probability=0.000253, bonus=1.000000, nodes=41 > 0.038411)
                                        @ 16  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=1.980139, bonus=1.000000, nodes=35 <= 300.000000)
                                      @ 8  deltablue.Planner.lambda$extractPlanFromConstraints$1(Vector, AbstractConstraint):void (20 bytes)   relevance-based (relevance=1.000000, probability=7.920556, bonus=1.000000, nodes=59 <= 300.000000)
                                    @ 20  deltablue.Planner$$Lambda/0x00007f2ce003e228.apply(Object):void (12 bytes)   relevance-based (relevance=1.000000, probability=7.920556, bonus=1.000000, nodes=64 <= 300.000000)
                                  @ 15  som.Vector.forEach(ForEachInterface):void (32 bytes)   not inlining callee invoke probability is too high (invokeP=11.881088, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=77)
                            @ 9  deltablue.Plan.<init>():void (7 bytes)   inline method (bytecode parsing)
                              @ 3  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 39  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 67  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                                  @ 20  deltablue.Planner.makePlan(Vector):Plan (86 bytes)   not inlining too large previous low-level graph (low-level-nodes: 840, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=69)
                                @ 22  deltablue.Planner.extractPlanFromConstraints(Vector):Plan (24 bytes)   relevance-based (relevance=1.000128, probability=1.000000, bonus=1.000000, nodes=27 <= 300.000000)
                                  @ 1  deltablue.UnaryConstraint.isSatisfied():boolean (5 bytes)   trivial (relevance=2.000000, probability=1.000000, bonus=1.000000, nodes=5)
                            @ 21  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.Planner$$Lambda/0x00007f2ce01f68f0.<init>(Planner):void (10 bytes)   inline method (bytecode parsing)
                                    @ 1  deltablue.UnaryConstraint.getOutput():Variable (5 bytes)   trivial (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=5)
                                    @ 6  deltablue.UnaryConstraint.markUnsatisfied():void (6 bytes)   trivial (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=7)
                            @ 1  som.Vector.capacity():int (6 bytes)   inline method (bytecode parsing)
                            @ 31  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object, Object, Object, Object):Object (13 bytes)   inline method (bytecode parsing)
                              @ 9  java.lang.invoke.LambdaForm$DMH/0x00007f2ce0123400.newInvokeSpecial(Object, Object, Object, Object, Object):Object (30 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 7  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                          @ 24  som.Vector$$Lambda/0x00007f2ce003fc10.<init>(Object, boolean[], Object[], int[]):void (26 bytes)   relevance-based (relevance=1.000000, probability=0.250000, bonus=1.000000, nodes=17 <= 300.000000)
                                              @ 17  som.Vector.lambda$remove$0(Object, boolean[], Object[], int[], Object):void (28 bytes)   relevance-based (relevance=1.000000, probability=1.980139, bonus=1.000000, nodes=26 <= 300.000000)
                                            @ 20  som.Vector$$Lambda/0x00007f2ce003fc10.apply(Object):void (21 bytes)   relevance-based (relevance=1.000000, probability=1.980139, bonus=1.000000, nodes=28 <= 300.000000)
                                          @ 36  som.Vector.forEach(ForEachInterface):void (32 bytes)   relevance-based (relevance=1.000000, probability=0.250000, bonus=1.000000, nodes=41 <= 300.000000)
                                        @ 5  som.Vector.remove(Object):boolean (61 bytes)   relevance-based (relevance=2.000000, probability=0.250000, bonus=1.000000, nodes=73 <= 300.000000)
                                      @ 12  deltablue.Variable.removeConstraint(AbstractConstraint):void (23 bytes)   relevance-based (relevance=1.000000, probability=0.250000, bonus=1.000000, nodes=90 <= 300.000000)
                                    @ 10  deltablue.UnaryConstraint.removeFromGraph():void (21 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=100 <= 300.000000)
                            @ 4  som.Vector.<init>():void (7 bytes)   inline method (bytecode parsing)
                              @ 3  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 10  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 14  deltablue.Strength.absoluteWeakest():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 17  deltablue.Variable.setWalkStrength(Strength):void (6 bytes)   inline method (bytecode parsing)
                            @ 22  deltablue.Variable.setStay(boolean):void (6 bytes)   inline method (bytecode parsing)
                            @ 48  deltablue.Variable.getConstraints():Vector (5 bytes)   inline accessor method (bytecode parsing)
                            @ 52  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.Planner$$Lambda/0x00007f2ce01f6000.<init>(Vector):void (10 bytes)   inline method (bytecode parsing)
                            @ 64  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.Planner$$Lambda/0x00007f2ce01f6220.<init>(Vector):void (10 bytes)   inline method (bytecode parsing)
                            @ 76  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object):Object (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.lang.invoke.LambdaForm$MH/0x00007f2ce0000800.invoke(Object):Object (8 bytes)   inline method (bytecode parsing)
                                    @ 15  deltablue.Planner.removePropagateFrom(Variable):Vector (86 bytes)   not inlining too large previous low-level graph (low-level-nodes: 793, relevance=2.000000, probability=0.500000, bonus=1.000000, nodes=81)
                            @ 8  deltablue.Planner.lambda$incrementalRemove$0(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                                          @ 1  deltablue.Planner.newMark():int (15 bytes)   relevance-based (relevance=1.000000, probability=3.960278, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f2ce003d750.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 8  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 713, relevance=1.000000, probability=3.960278, bonus=1.000000, nodes=72)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f2ce003d750.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 19  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 713, relevance=1.000000, probability=3.971486, bonus=1.000000, nodes=72)
                                        @ 2  deltablue.Planner.incrementalAdd(AbstractConstraint):void (27 bytes)   relevance-based (relevance=1.000000, probability=3.960278, bonus=1.000000, nodes=28 <= 300.000000)
                                      @ 20  deltablue.Planner$$Lambda/0x00007f2ce01f68f0.apply(Object):void (12 bytes)   relevance-based (relevance=1.000000, probability=3.960278, bonus=1.000000, nodes=37 <= 300.000000)
                                    @ 26  som.Vector.forEach(ForEachInterface):void (32 bytes)   not inlining callee invoke probability is too high (invokeP=15.863529, relevance=2.000000, probability=0.500000, bonus=1.000000, nodes=53)
                                  @ 9  deltablue.Planner.incrementalRemove(AbstractConstraint):void (30 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=121 <= 300.000000)
                            @ 1  som.Vector.capacity():int (6 bytes)   inline method (bytecode parsing)
                            @ 31  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object, Object, Object, Object):Object (13 bytes)   inline method (bytecode parsing)
                              @ 9  java.lang.invoke.LambdaForm$DMH/0x00007f2ce0123400.newInvokeSpecial(Object, Object, Object, Object, Object):Object (30 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 7  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                        @ 24  som.Vector$$Lambda/0x00007f2ce003fc10.<init>(Object, boolean[], Object[], int[]):void (26 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=17 <= 300.000000)
                                            @ 17  som.Vector.lambda$remove$0(Object, boolean[], Object[], int[], Object):void (28 bytes)   relevance-based (relevance=1.000000, probability=3.960278, bonus=1.000000, nodes=26 <= 300.000000)
                                          @ 20  som.Vector$$Lambda/0x00007f2ce003fc10.apply(Object):void (21 bytes)   relevance-based (relevance=1.000000, probability=3.960278, bonus=1.000000, nodes=28 <= 300.000000)
                                        @ 36  som.Vector.forEach(ForEachInterface):void (32 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=41 <= 300.000000)
                                      @ 5  som.Vector.remove(Object):boolean (61 bytes)   relevance-based (relevance=2.000000, probability=0.500000, bonus=1.000000, nodes=73 <= 300.000000)
                                    @ 12  deltablue.Variable.removeConstraint(AbstractConstraint):void (23 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=90 <= 300.000000)
                                  @ 13  deltablue.UnaryConstraint.removeFromGraph():void (21 bytes)   relevance-based (relevance=4.000000, probability=1.000000, bonus=1.000000, nodes=100 <= 300.000000)
                                @ 55  deltablue.AbstractConstraint.destroyConstraint(Planner):void (17 bytes)   relevance-based (relevance=1.000128, probability=1.000000, bonus=1.000000, nodes=224 <= 300.000000)
                              @ 225  deltablue.Planner.change(Variable, int):void (59 bytes)   not inlining relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=412 > 300.000000)
                              @ 181  som.Vector.at(int):Object (18 bytes)   relevance-based (relevance=1.000000, probability=59993.166667, bonus=1.000000, nodes=10 <= 300.000000)
                              @ 242  som.Vector.at(int):Object (18 bytes)   relevance-based (relevance=1.000000, probability=59999.000000, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 23  jdk.internal.misc.InternalLock.lock():void (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.util.concurrent.locks.ReentrantLock.lock():void (8 bytes)   inline method (bytecode parsing)
                            @ 35  jdk.internal.misc.InternalLock.unlock():void (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.util.concurrent.locks.ReentrantLock.unlock():void (10 bytes)   inline method (bytecode parsing)
                                @ 5  java.util.concurrent.locks.AbstractQueuedSynchronizer.release(int):boolean (19 bytes)   inline method (bytecode parsing)
                            @ 9  java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(int):void (20 bytes)   inline method (bytecode parsing)
                            @ 7  java.util.concurrent.locks.AbstractQueuedSynchronizer.compareAndSetState(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 15  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                            @ 21  java.util.concurrent.locks.AbstractOwnableSynchronizer.getExclusiveOwnerThread():Thread (5 bytes)   inline accessor method (bytecode parsing)
                            @ 29  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 51  java.util.concurrent.locks.AbstractQueuedSynchronizer.setState(int):void (6 bytes)   inline method (bytecode parsing)
                                @ 1  java.util.concurrent.locks.ReentrantLock$NonfairSync.initialTryLock():boolean (58 bytes)   relevance-based (relevance=1.006417, probability=1.000000, bonus=1.000000, nodes=40 <= 300.000000)
                            @ 13  java.util.concurrent.locks.ReentrantLock.lock():void (8 bytes)   inline method (bytecode parsing)
                            @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 25  java.util.concurrent.locks.ReentrantLock.unlock():void (10 bytes)   inline method (bytecode parsing)
                            @ 10  java.util.concurrent.locks.AbstractQueuedSynchronizer.compareAndSetState(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                              @ 5  java.util.concurrent.locks.AbstractQueuedSynchronizer.release(int):boolean (19 bytes)   inline method (bytecode parsing)
                            @ 20  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                                @ 2  java.util.concurrent.locks.ReentrantLock$NonfairSync.tryAcquire(int):boolean (27 bytes)   not inlining relevance-based (relevance=0.005005, probability=0.004447, bonus=1.000000, nodes=36 > 1.501641)
                              @ 1  java.lang.ref.ReferenceQueue.headIsNull():boolean (13 bytes)   relevance-based (relevance=1.184908, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                            @ 9  java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(int):void (20 bytes)   inline method (bytecode parsing)
                            @ 7  java.util.concurrent.locks.AbstractQueuedSynchronizer.compareAndSetState(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 15  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                            @ 21  java.util.concurrent.locks.AbstractOwnableSynchronizer.getExclusiveOwnerThread():Thread (5 bytes)   inline accessor method (bytecode parsing)
                            @ 29  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 51  java.util.concurrent.locks.AbstractQueuedSynchronizer.setState(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 108  java.util.concurrent.locks.AbstractQueuedSynchronizer.tryAcquireShared(int):int (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.lang.UnsupportedOperationException.<init>():void (5 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.RuntimeException.<init>():void (5 bytes)   inline method (bytecode parsing)
                                @ 1  java.util.concurrent.locks.ReentrantLock$NonfairSync.initialTryLock():boolean (58 bytes)   relevance-based (relevance=0.186095, probability=0.156053, bonus=1.000000, nodes=40 <= 55.828589)
                                  @ 1  java.lang.Exception.<init>():void (5 bytes)   inline method (bytecode parsing)
                              @ 4  java.util.concurrent.locks.ReentrantLock$Sync.lock():void (13 bytes)   not inlining relevance-based (relevance=0.184908, probability=0.156053, bonus=1.000000, nodes=57 > 55.472404)
                            @ 245  java.util.concurrent.locks.AbstractQueuedSynchronizer$ExclusiveNode.<init>():void (5 bytes)   inline method (bytecode parsing)
                              @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer$Node.<init>():void (5 bytes)   inline method (bytecode parsing)
                            @ 290  java.util.concurrent.locks.AbstractQueuedSynchronizer$Node.setPrevRelaxed(AbstractQueuedSynchronizer$Node):void (12 bytes)   inline method (bytecode parsing)
                              @ 17  java.lang.ref.ReferenceQueue.poll0():Reference (65 bytes)   relevance-based (relevance=0.184908, probability=0.156053, bonus=1.000000, nodes=41 <= 55.472404)
                            @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 8  java.util.concurrent.locks.AbstractOwnableSynchronizer.getExclusiveOwnerThread():Thread (5 bytes)   inline accessor method (bytecode parsing)
                            @ 393  java.lang.Thread.interrupted():boolean (7 bytes)   inline method (bytecode parsing)
                            @ 41  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                            @ 46  java.util.concurrent.locks.AbstractQueuedSynchronizer.setState(int):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  java.util.concurrent.locks.ReentrantLock$Sync.tryRelease(int):boolean (51 bytes)   relevance-based (relevance=0.184908, probability=0.156053, bonus=1.000000, nodes=37 <= 55.472404)
                            @ 22  java.util.concurrent.locks.AbstractQueuedSynchronizer$Node.getAndUnsetStatus(int):int (14 bytes)   inline method (bytecode parsing)
                              @ 10  jdk.internal.misc.Unsafe.getAndBitwiseAndInt(Object, long, int):int (27 bytes)   inline method (bytecode parsing)
                              @ 12  java.util.concurrent.locks.AbstractQueuedSynchronizer.signalNext(AbstractQueuedSynchronizer$Node):void (34 bytes)   not inlining relevance-based (relevance=0.161536, probability=0.136328, bonus=1.000000, nodes=56 > 48.460742)
                                @ 15  java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer$Node, int, boolean, boolean, boolean, long):int (424 bytes)   not inlining relevance-based (relevance=0.002503, probability=0.002223, bonus=1.000000, nodes=226 > 0.750820)
                              @ 4  java.util.concurrent.locks.ReentrantLock$Sync.lock():void (13 bytes)   relevance-based (relevance=1.144668, probability=1.000000, bonus=1.000000, nodes=57 <= 300.000000)
                                @ 1  sun.nio.cs.StreamEncoder.ensureOpen():void (18 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 12  java.nio.CharBuffer.<init>(int, int, int, int, char[], int, MemorySegment):void (24 bytes)   inline method (bytecode parsing)
                            @ 2  java.nio.CharBuffer.limit(int):CharBuffer (8 bytes)   inline method (bytecode parsing)
                                          @ 2  java.nio.Buffer.limit(int):Buffer (65 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=27 <= 300.000000)
                                        @ 39  java.nio.CharBuffer.limit(int):Buffer (6 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=29 <= 300.000000)
                            @ 2  java.nio.CharBuffer.position(int):CharBuffer (8 bytes)   inline method (bytecode parsing)
                                          @ 2  java.nio.Buffer.position(int):Buffer (52 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=16 <= 300.000000)
                                        @ 45  java.nio.CharBuffer.position(int):Buffer (6 bytes)   relevance-based (relevance=1.087055, probability=1.000000, bonus=1.000000, nodes=18 <= 300.000000)
                                      @ 8  java.nio.Buffer.<init>(int, int, int, int, MemorySegment):void (105 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=56 <= 300.000000)
                                    @ 8  java.nio.HeapCharBuffer.<init>(char[], int, int, MemorySegment):void (23 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=68 <= 300.000000)
                                  @ 3  java.nio.CharBuffer.wrap(char[], int, int):CharBuffer (21 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=69 <= 300.000000)
                                    @ 15  java.nio.Buffer.remaining():int (20 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                            @ 4  java.nio.Buffer.capacity():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 21  java.nio.charset.CharsetEncoder.maxBytesPerChar():float (5 bytes)   inline accessor method (bytecode parsing)
                                      @ 34  java.lang.Math.min(int, int):int (11 bytes)   trivial (relevance=1.000205, probability=1.000000, bonus=1.000000, nodes=7)
                            @ 4  java.nio.Buffer.position():int (5 bytes)   inline accessor method (bytecode parsing)
                                      @ 46  sun.nio.cs.StreamEncoder.implFlushBuffer():void (15 bytes)   not inlining relevance-based (relevance=0.000205, probability=0.000205, bonus=1.000000, nodes=21 > 0.061646)
                                      @ 52  java.nio.ByteBuffer.allocate(int):ByteBuffer (20 bytes)   not inlining relevance-based (relevance=0.000205, probability=0.000205, bonus=1.000000, nodes=21 > 0.061646)
                                    @ 18  sun.nio.cs.StreamEncoder.growByteBufferIfNeeded(int):void (59 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=38 <= 300.000000)
                                    @ 22  java.nio.Buffer.hasRemaining():boolean (17 bytes)   trivial (relevance=1.000205, probability=1.000000, bonus=1.000000, nodes=9)
                                        @ 1  java.nio.CharBuffer.hasArray():boolean (20 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=12 <= 300.000000)
                                        @ 8  java.nio.ByteBuffer.hasArray():boolean (20 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=12 <= 300.000000)
                            @ 10  java.nio.Buffer.position():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 21  java.nio.Buffer.limit():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 38  java.nio.Buffer.position():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 49  java.nio.Buffer.limit():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 78  java.lang.System$2.encodeASCII(char[], int, byte[], int, int):int (11 bytes)   inline method (bytecode parsing)
                            @ 4  deltablue.Planner.<init>():void (10 bytes)   inline method (bytecode parsing)
                            @ 12  som.Vector.<init>():void (7 bytes)   inline method (bytecode parsing)
                              @ 3  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 18  deltablue.Variable.value(int):Variable (15 bytes)   inline method (bytecode parsing)
                              @ 10  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 25  deltablue.Variable.value(int):Variable (15 bytes)   inline method (bytecode parsing)
                              @ 10  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 75  deltablue.StayConstraint.<init>(Variable, Strength$Sym, Planner):void (8 bytes)   inline method (bytecode parsing)
                                          @ 1  java.nio.CharBuffer.array():char[] (35 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                              @ 4  deltablue.UnaryConstraint.<init>(Variable, Strength$Sym, Planner):void (16 bytes)   inline method (bytecode parsing)
                                @ 2  deltablue.AbstractConstraint.<init>(Strength$Sym):void (13 bytes)   inline method (bytecode parsing)
                                  @ 6  deltablue.Strength.of(Strength$Sym):Strength (11 bytes)   inline method (bytecode parsing)
                                          @ 6  java.nio.CharBuffer.arrayOffset():int (35 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=12 <= 300.000000)
                                @ 12  deltablue.AbstractConstraint.addConstraint(Planner):void (10 bytes)   inline method (bytecode parsing)
                            @ 114  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 17  java.nio.CharBuffer.arrayOffset():int (35 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=12 <= 300.000000)
                            @ 144  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 187  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 28  java.nio.ByteBuffer.array():byte[] (35 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                            @ 248  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 34  java.nio.ByteBuffer.arrayOffset():int (35 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=12 <= 300.000000)
                                          @ 45  java.nio.ByteBuffer.arrayOffset():int (35 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=12 <= 300.000000)
                                          @ 75  java.lang.Math.min(int, int):int (11 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=7)
                                            @ 3  java.nio.CharBuffer.arrayOffset():int (35 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=12 <= 300.000000)
                            @ 10  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 2  java.nio.CharBuffer.position(int):CharBuffer (8 bytes)   inline method (bytecode parsing)
                            @ 15  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 27  deltablue.Strength.absoluteWeakest():Strength (4 bytes)   inline method (bytecode parsing)
                                @ 4  deltablue.Variable.<init>():void (44 bytes)   not inlining too large previous low-level graph (low-level-nodes: 379, relevance=1.000000, probability=0.999984, bonus=1.000000, nodes=27)
                              @ 47  deltablue.Variable.value(int):Variable (15 bytes)   relevance-based (relevance=1.000000, probability=0.999984, bonus=1.000000, nodes=11 <= 300.000000)
                                              @ 2  java.nio.Buffer.position(int):Buffer (52 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=16 <= 300.000000)
                                            @ 7  java.nio.CharBuffer.position(int):Buffer (6 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=18 <= 300.000000)
                            @ 10  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 15  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                                            @ 14  java.nio.ByteBuffer.arrayOffset():int (35 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=12 <= 300.000000)
                            @ 27  deltablue.Strength.absoluteWeakest():Strength (4 bytes)   inline method (bytecode parsing)
                                @ 4  deltablue.Variable.<init>():void (44 bytes)   not inlining too large previous low-level graph (low-level-nodes: 379, relevance=1.000000, probability=0.999984, bonus=1.000000, nodes=27)
                              @ 54  deltablue.Variable.value(int):Variable (15 bytes)   relevance-based (relevance=1.000000, probability=0.999984, bonus=1.000000, nodes=11 <= 300.000000)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                                @ 2  java.nio.Buffer.position(int):Buffer (52 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=16 <= 300.000000)
                                              @ 2  java.nio.ByteBuffer.position(int):ByteBuffer (8 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=17 <= 300.000000)
                                            @ 18  java.nio.ByteBuffer.position(int):Buffer (6 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=23 <= 300.000000)
                                          @ 130  sun.nio.cs.UTF_8.updatePositions(Buffer, int, Buffer, int):void (23 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=60 <= 300.000000)
                                @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000128, probability=0.000128, bonus=1.000000, nodes=41 > 0.038411)
                              @ 62  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=0.999984, bonus=1.000000, nodes=35 <= 300.000000)
                                        @ 17  sun.nio.cs.UTF_8$Encoder.encodeArrayLoop(CharBuffer, ByteBuffer):CoderResult (137 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=137 <= 300.000000)
                                      @ 57  sun.nio.cs.UTF_8$Encoder.encodeLoop(CharBuffer, ByteBuffer):CoderResult (28 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=152 <= 300.000000)
                                  @ 7  deltablue.Strength$Sym.customHash():int (5 bytes)   trivial (relevance=1.000000, probability=0.999984, bonus=1.000000, nodes=5)
                                @ 1  som.Dictionary.hash(Dictionary$CustomHash):int (20 bytes)   trivial (relevance=1.000000, probability=0.999984, bonus=1.000000, nodes=5)
                            @ 6  som.Dictionary.getBucketIdx(int):int (10 bytes)   inline method (bytecode parsing)
                                      @ 79  java.nio.charset.CoderResult.isOverflow():boolean (14 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                                @ 7  som.Dictionary.getBucket(int):Dictionary$Entry (11 bytes)   relevance-based (relevance=1.000000, probability=0.999984, bonus=1.000000, nodes=11 <= 300.000000)
                                      @ 90  java.nio.charset.CoderResult.isUnderflow():boolean (13 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                                    @ 38  java.nio.charset.CharsetEncoder.encode(CharBuffer, ByteBuffer, boolean):CoderResult (273 bytes)   relevance-based (relevance=1.000205, probability=1.000000, bonus=1.000000, nodes=160 <= 300.000000)
                                @ 18  som.IdentityDictionary$IdEntry.match(int, Object):boolean (22 bytes)   relevance-based (relevance=1.000000, probability=0.999984, bonus=1.000000, nodes=13 <= 300.000000)
                              @ 4  som.Dictionary.at(Dictionary$CustomHash):Object (39 bytes)   relevance-based (relevance=1.000128, probability=0.999984, bonus=1.000000, nodes=28 <= 300.000000)
                            @ 5  deltablue.Variable.addConstraint(AbstractConstraint):void (9 bytes)   inline method (bytecode parsing)
                                    @ 43  java.nio.charset.CoderResult.isUnderflow():boolean (13 bytes)   trivial (relevance=1.000205, probability=1.000000, bonus=1.000000, nodes=5)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                    @ 76  java.nio.Buffer.remaining():int (20 bytes)   relevance-based (relevance=1.000205, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                                  @ 11  sun.nio.cs.StreamEncoder.implWrite(CharBuffer):void (145 bytes)   relevance-based (relevance=1.087055, probability=1.000000, bonus=1.000000, nodes=217 <= 300.000000)
                                  @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000128, probability=0.000128, bonus=1.000000, nodes=41 > 0.038411)
                                @ 5  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=0.999984, bonus=1.000000, nodes=35 <= 300.000000)
                              @ 1  deltablue.UnaryConstraint.addToGraph():void (14 bytes)   relevance-based (relevance=1.000128, probability=0.999984, bonus=1.000000, nodes=47 <= 300.000000)
                                @ 49  sun.nio.cs.StreamEncoder.implWrite(char[], int, int):void (15 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=282 <= 300.000000)
                                @ 1  deltablue.Planner.newMark():int (15 bytes)   relevance-based (relevance=1.000000, probability=0.999984, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 30  sun.nio.cs.StreamEncoder.lockedWrite(char[], int, int):void (53 bytes)   relevance-based (relevance=1.125700, probability=1.000000, bonus=1.000000, nodes=300 <= 300.000000)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f2ce003d750.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 8  java.util.concurrent.locks.AbstractOwnableSynchronizer.getExclusiveOwnerThread():Thread (5 bytes)   inline accessor method (bytecode parsing)
                                @ 8  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 713, relevance=1.000000, probability=0.999984, bonus=1.000000, nodes=72)
                            @ 41  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                            @ 46  java.util.concurrent.locks.AbstractQueuedSynchronizer.setState(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                              @ 2  java.util.concurrent.locks.ReentrantLock$Sync.tryRelease(int):boolean (51 bytes)   relevance-based (relevance=1.125700, probability=1.000000, bonus=1.000000, nodes=37 <= 300.000000)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f2ce003d750.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 22  java.util.concurrent.locks.AbstractQueuedSynchronizer$Node.getAndUnsetStatus(int):int (14 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                              @ 10  jdk.internal.misc.Unsafe.getAndBitwiseAndInt(Object, long, int):int (27 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                @ 19  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 713, relevance=1.000000, probability=1.002815, bonus=1.000000, nodes=72)
                              @ 6  deltablue.Planner.incrementalAdd(AbstractConstraint):void (27 bytes)   relevance-based (relevance=1.000128, probability=0.999984, bonus=1.000000, nodes=28 <= 300.000000)
                            @ 5  java.lang.Thread.isVirtual():boolean (5 bytes)   inline method (bytecode parsing)
                            @ 24  deltablue.AbstractConstraint.addConstraint(Planner):void (10 bytes)   inline method (bytecode parsing)
                                @ 30  java.util.concurrent.locks.LockSupport.unpark(Thread):void (26 bytes)   not inlining relevance-based (relevance=0.006062, probability=0.003985, bonus=1.000000, nodes=23 > 1.818457)
                              @ 12  java.util.concurrent.locks.AbstractQueuedSynchronizer.signalNext(AbstractQueuedSynchronizer$Node):void (34 bytes)   relevance-based (relevance=0.983430, probability=0.873616, bonus=1.000000, nodes=56 <= 295.028914)
                              @ 94  deltablue.ScaleConstraint.<init>(Variable, Variable, Variable, Variable, Strength$Sym, Planner):void (28 bytes)   not inlining too large previous low-level graph (low-level-nodes: 1418, relevance=1.000128, probability=0.999984, bonus=1.000000, nodes=25)
                            @ 10  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 15  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 27  deltablue.Strength.absoluteWeakest():Strength (4 bytes)   inline method (bytecode parsing)
                                @ 4  deltablue.Variable.<init>():void (44 bytes)   not inlining too large previous low-level graph (low-level-nodes: 379, relevance=1.000000, probability=64227.916698, bonus=1.000000, nodes=27)
                              @ 47  deltablue.Variable.value(int):Variable (15 bytes)   relevance-based (relevance=1.000000, probability=64227.916698, bonus=1.000000, nodes=11 <= 300.000000)
                            @ 10  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 15  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 27  deltablue.Strength.absoluteWeakest():Strength (4 bytes)   inline method (bytecode parsing)
                                @ 4  deltablue.Variable.<init>():void (44 bytes)   not inlining too large previous low-level graph (low-level-nodes: 379, relevance=1.000000, probability=64227.916698, bonus=1.000000, nodes=27)
                              @ 54  deltablue.Variable.value(int):Variable (15 bytes)   relevance-based (relevance=1.000000, probability=64227.916698, bonus=1.000000, nodes=11 <= 300.000000)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000128, probability=8.222448, bonus=1.000000, nodes=41 > 0.038411)
                              @ 62  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=64227.916698, bonus=1.000000, nodes=35 <= 300.000000)
                                  @ 7  deltablue.Strength$Sym.customHash():int (5 bytes)   trivial (relevance=1.000000, probability=64227.916698, bonus=1.000000, nodes=5)
                                @ 1  som.Dictionary.hash(Dictionary$CustomHash):int (20 bytes)   trivial (relevance=1.000000, probability=64227.916698, bonus=1.000000, nodes=5)
                            @ 6  som.Dictionary.getBucketIdx(int):int (10 bytes)   inline method (bytecode parsing)
                                @ 7  som.Dictionary.getBucket(int):Dictionary$Entry (11 bytes)   relevance-based (relevance=1.000000, probability=64227.916698, bonus=1.000000, nodes=11 <= 300.000000)
                                @ 18  som.IdentityDictionary$IdEntry.match(int, Object):boolean (22 bytes)   relevance-based (relevance=1.000000, probability=64227.916698, bonus=1.000000, nodes=13 <= 300.000000)
                              @ 4  som.Dictionary.at(Dictionary$CustomHash):Object (39 bytes)   relevance-based (relevance=1.000128, probability=64227.916698, bonus=1.000000, nodes=28 <= 300.000000)
                            @ 5  deltablue.Variable.addConstraint(AbstractConstraint):void (9 bytes)   inline method (bytecode parsing)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                  @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000128, probability=8.222448, bonus=1.000000, nodes=41 > 0.038411)
                                @ 5  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=64227.916698, bonus=1.000000, nodes=35 <= 300.000000)
                              @ 1  deltablue.UnaryConstraint.addToGraph():void (14 bytes)   relevance-based (relevance=1.000128, probability=64227.916698, bonus=1.000000, nodes=47 <= 300.000000)
                                @ 1  deltablue.Planner.newMark():int (15 bytes)   relevance-based (relevance=1.000000, probability=64227.916698, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f2ce003d750.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                @ 8  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 713, relevance=1.000000, probability=64227.916698, bonus=1.000000, nodes=72)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f2ce003d750.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                @ 19  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 713, relevance=1.000000, probability=64409.690107, bonus=1.000000, nodes=72)
                              @ 6  deltablue.Planner.incrementalAdd(AbstractConstraint):void (27 bytes)   relevance-based (relevance=1.000128, probability=64227.916698, bonus=1.000000, nodes=28 <= 300.000000)
                            @ 24  deltablue.AbstractConstraint.addConstraint(Planner):void (10 bytes)   inline method (bytecode parsing)
                              @ 94  deltablue.ScaleConstraint.<init>(Variable, Variable, Variable, Variable, Strength$Sym, Planner):void (28 bytes)   not inlining too large previous low-level graph (low-level-nodes: 1418, relevance=1.000128, probability=64227.916698, bonus=1.000000, nodes=25)
                            @ 9  deltablue.EditConstraint.<init>(Variable, Strength$Sym, Planner):void (8 bytes)   inline method (bytecode parsing)
                              @ 4  deltablue.UnaryConstraint.<init>(Variable, Strength$Sym, Planner):void (16 bytes)   inline method (bytecode parsing)
                                @ 2  deltablue.AbstractConstraint.<init>(Strength$Sym):void (13 bytes)   inline method (bytecode parsing)
                                  @ 6  deltablue.Strength.of(Strength$Sym):Strength (11 bytes)   inline method (bytecode parsing)
                                @ 12  deltablue.AbstractConstraint.addConstraint(Planner):void (10 bytes)   inline method (bytecode parsing)
                            @ 39  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 44  deltablue.Plan.execute():void (10 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object):Object (8 bytes)   inline method (bytecode parsing)
                                @ 4  java.lang.invoke.LambdaForm$MH/0x00007f2ce0000800.invoke(Object):Object (8 bytes)   inline method (bytecode parsing)
                                    @ 7  deltablue.Strength$Sym.customHash():int (5 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                                  @ 1  som.Dictionary.hash(Dictionary$CustomHash):int (20 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                            @ 6  som.Dictionary.getBucketIdx(int):int (10 bytes)   inline method (bytecode parsing)
                                  @ 7  som.Dictionary.getBucket(int):Dictionary$Entry (11 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                                  @ 18  som.IdentityDictionary$IdEntry.match(int, Object):boolean (22 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                @ 4  som.Dictionary.at(Dictionary$CustomHash):Object (39 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=28 <= 300.000000)
                            @ 5  deltablue.Variable.addConstraint(AbstractConstraint):void (9 bytes)   inline method (bytecode parsing)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                    @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000128, probability=0.000128, bonus=1.000000, nodes=41 > 0.038411)
                                  @ 5  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=35 <= 300.000000)
                                @ 1  deltablue.UnaryConstraint.addToGraph():void (14 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=47 <= 300.000000)
                                  @ 1  deltablue.Planner.newMark():int (15 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f2ce003d750.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 8  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 713, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=72)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f2ce003d750.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 19  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 713, relevance=1.000000, probability=1.002830, bonus=1.000000, nodes=72)
                                @ 6  deltablue.Planner.incrementalAdd(AbstractConstraint):void (27 bytes)   relevance-based (relevance=1.000128, probability=1.000000, bonus=1.000000, nodes=28 <= 300.000000)
                            @ 5  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                    @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000128, probability=0.000128, bonus=1.000000, nodes=41 > 0.038411)
                                  @ 11  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=35 <= 300.000000)
                                @ 14  som.Vector.with(Object):Vector (16 bytes)   relevance-based (relevance=1.000128, probability=1.000000, bonus=1.000000, nodes=40 <= 300.000000)
                            @ 4  som.Vector.<init>():void (7 bytes)   inline method (bytecode parsing)
                              @ 3  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 10  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.Planner$$Lambda/0x00007f2ce003e228.<init>(Vector):void (10 bytes)   inline method (bytecode parsing)
                                      @ 1  deltablue.AbstractConstraint.isInput():boolean (2 bytes)   not inlining no type profile exists
                                      @ 8  deltablue.AbstractConstraint.isSatisfied():boolean (0 bytes)   not inlining no type profile exists
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                          @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000128, probability=0.000253, bonus=1.000000, nodes=41 > 0.038411)
                                        @ 16  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=1.980139, bonus=1.000000, nodes=35 <= 300.000000)
                                      @ 8  deltablue.Planner.lambda$extractPlanFromConstraints$1(Vector, AbstractConstraint):void (20 bytes)   relevance-based (relevance=1.000000, probability=7.920556, bonus=1.000000, nodes=59 <= 300.000000)
                                    @ 20  deltablue.Planner$$Lambda/0x00007f2ce003e228.apply(Object):void (12 bytes)   relevance-based (relevance=1.000000, probability=7.920556, bonus=1.000000, nodes=64 <= 300.000000)
                                  @ 15  som.Vector.forEach(ForEachInterface):void (32 bytes)   not inlining callee invoke probability is too high (invokeP=11.881088, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=77)
                            @ 9  deltablue.Plan.<init>():void (7 bytes)   inline method (bytecode parsing)
                              @ 3  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 39  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 67  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                                  @ 20  deltablue.Planner.makePlan(Vector):Plan (86 bytes)   not inlining too large previous low-level graph (low-level-nodes: 840, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=69)
                                @ 22  deltablue.Planner.extractPlanFromConstraints(Vector):Plan (24 bytes)   relevance-based (relevance=1.000128, probability=1.000000, bonus=1.000000, nodes=27 <= 300.000000)
                                  @ 1  deltablue.UnaryConstraint.isSatisfied():boolean (5 bytes)   trivial (relevance=2.000000, probability=1.000000, bonus=1.000000, nodes=5)
                            @ 21  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.Planner$$Lambda/0x00007f2ce01f68f0.<init>(Planner):void (10 bytes)   inline method (bytecode parsing)
                                    @ 1  deltablue.UnaryConstraint.getOutput():Variable (5 bytes)   trivial (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=5)
                                    @ 6  deltablue.UnaryConstraint.markUnsatisfied():void (6 bytes)   trivial (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=7)
                            @ 1  som.Vector.capacity():int (6 bytes)   inline method (bytecode parsing)
                            @ 31  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object, Object, Object, Object):Object (13 bytes)   inline method (bytecode parsing)
                              @ 9  java.lang.invoke.LambdaForm$DMH/0x00007f2ce0123400.newInvokeSpecial(Object, Object, Object, Object, Object):Object (30 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 7  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                          @ 24  som.Vector$$Lambda/0x00007f2ce003fc10.<init>(Object, boolean[], Object[], int[]):void (26 bytes)   relevance-based (relevance=1.000000, probability=0.250000, bonus=1.000000, nodes=17 <= 300.000000)
                                              @ 17  som.Vector.lambda$remove$0(Object, boolean[], Object[], int[], Object):void (28 bytes)   relevance-based (relevance=1.000000, probability=1.980139, bonus=1.000000, nodes=26 <= 300.000000)
                                            @ 20  som.Vector$$Lambda/0x00007f2ce003fc10.apply(Object):void (21 bytes)   relevance-based (relevance=1.000000, probability=1.980139, bonus=1.000000, nodes=28 <= 300.000000)
                                          @ 36  som.Vector.forEach(ForEachInterface):void (32 bytes)   relevance-based (relevance=1.000000, probability=0.250000, bonus=1.000000, nodes=41 <= 300.000000)
                                        @ 5  som.Vector.remove(Object):boolean (61 bytes)   relevance-based (relevance=2.000000, probability=0.250000, bonus=1.000000, nodes=73 <= 300.000000)
                                      @ 12  deltablue.Variable.removeConstraint(AbstractConstraint):void (23 bytes)   relevance-based (relevance=1.000000, probability=0.250000, bonus=1.000000, nodes=90 <= 300.000000)
                                    @ 10  deltablue.UnaryConstraint.removeFromGraph():void (21 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=100 <= 300.000000)
                            @ 4  som.Vector.<init>():void (7 bytes)   inline method (bytecode parsing)
                              @ 3  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 10  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 14  deltablue.Strength.absoluteWeakest():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 17  deltablue.Variable.setWalkStrength(Strength):void (6 bytes)   inline method (bytecode parsing)
                            @ 22  deltablue.Variable.setStay(boolean):void (6 bytes)   inline method (bytecode parsing)
                            @ 48  deltablue.Variable.getConstraints():Vector (5 bytes)   inline accessor method (bytecode parsing)
                            @ 52  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.Planner$$Lambda/0x00007f2ce01f6000.<init>(Vector):void (10 bytes)   inline method (bytecode parsing)
                            @ 64  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.Planner$$Lambda/0x00007f2ce01f6220.<init>(Vector):void (10 bytes)   inline method (bytecode parsing)
                            @ 76  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object):Object (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.lang.invoke.LambdaForm$MH/0x00007f2ce0000800.invoke(Object):Object (8 bytes)   inline method (bytecode parsing)
                                    @ 15  deltablue.Planner.removePropagateFrom(Variable):Vector (86 bytes)   not inlining too large previous low-level graph (low-level-nodes: 793, relevance=2.000000, probability=0.500000, bonus=1.000000, nodes=81)
                            @ 8  deltablue.Planner.lambda$incrementalRemove$0(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                                          @ 1  deltablue.Planner.newMark():int (15 bytes)   relevance-based (relevance=1.000000, probability=3.960278, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f2ce003d750.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                              @ 1  sun.nio.cs.StreamEncoder.ensureOpen():void (18 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 12  java.nio.CharBuffer.<init>(int, int, int, int, char[], int, MemorySegment):void (24 bytes)   inline method (bytecode parsing)
                                          @ 8  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 713, relevance=1.000000, probability=3.960278, bonus=1.000000, nodes=72)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f2ce003d750.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 2  java.nio.CharBuffer.limit(int):CharBuffer (8 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                                        @ 2  java.nio.Buffer.limit(int):Buffer (65 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=27 <= 300.000000)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                      @ 39  java.nio.CharBuffer.limit(int):Buffer (6 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=29 <= 300.000000)
                            @ 2  java.nio.CharBuffer.position(int):CharBuffer (8 bytes)   inline method (bytecode parsing)
                                          @ 19  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 713, relevance=1.000000, probability=3.971486, bonus=1.000000, nodes=72)
                                        @ 2  deltablue.Planner.incrementalAdd(AbstractConstraint):void (27 bytes)   relevance-based (relevance=1.000000, probability=3.960278, bonus=1.000000, nodes=28 <= 300.000000)
                                        @ 2  java.nio.Buffer.position(int):Buffer (52 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=16 <= 300.000000)
                                      @ 20  deltablue.Planner$$Lambda/0x00007f2ce01f68f0.apply(Object):void (12 bytes)   relevance-based (relevance=1.000000, probability=3.960278, bonus=1.000000, nodes=37 <= 300.000000)
                                      @ 45  java.nio.CharBuffer.position(int):Buffer (6 bytes)   relevance-based (relevance=1.087055, probability=1.000000, bonus=1.000000, nodes=18 <= 300.000000)
                                    @ 8  java.nio.Buffer.<init>(int, int, int, int, MemorySegment):void (105 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=56 <= 300.000000)
                                    @ 26  som.Vector.forEach(ForEachInterface):void (32 bytes)   not inlining callee invoke probability is too high (invokeP=15.863529, relevance=2.000000, probability=0.500000, bonus=1.000000, nodes=53)
                                  @ 9  deltablue.Planner.incrementalRemove(AbstractConstraint):void (30 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=121 <= 300.000000)
                                  @ 8  java.nio.HeapCharBuffer.<init>(char[], int, int, MemorySegment):void (23 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=68 <= 300.000000)
                                @ 3  java.nio.CharBuffer.wrap(char[], int, int):CharBuffer (21 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=69 <= 300.000000)
                            @ 1  som.Vector.capacity():int (6 bytes)   inline method (bytecode parsing)
                            @ 31  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object, Object, Object, Object):Object (13 bytes)   inline method (bytecode parsing)
                              @ 9  java.lang.invoke.LambdaForm$DMH/0x00007f2ce0123400.newInvokeSpecial(Object, Object, Object, Object, Object):Object (30 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                  @ 15  java.nio.Buffer.remaining():int (20 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                                @ 7  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                            @ 4  java.nio.Buffer.capacity():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 21  java.nio.charset.CharsetEncoder.maxBytesPerChar():float (5 bytes)   inline accessor method (bytecode parsing)
                                        @ 24  som.Vector$$Lambda/0x00007f2ce003fc10.<init>(Object, boolean[], Object[], int[]):void (26 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=17 <= 300.000000)
                                    @ 34  java.lang.Math.min(int, int):int (11 bytes)   trivial (relevance=1.000200, probability=1.000000, bonus=1.000000, nodes=7)
                            @ 4  java.nio.Buffer.position():int (5 bytes)   inline accessor method (bytecode parsing)
                                    @ 46  sun.nio.cs.StreamEncoder.implFlushBuffer():void (15 bytes)   not inlining relevance-based (relevance=0.000200, probability=0.000200, bonus=1.000000, nodes=21 > 0.060036)
                                            @ 17  som.Vector.lambda$remove$0(Object, boolean[], Object[], int[], Object):void (28 bytes)   relevance-based (relevance=1.000000, probability=3.960278, bonus=1.000000, nodes=26 <= 300.000000)
                                    @ 52  java.nio.ByteBuffer.allocate(int):ByteBuffer (20 bytes)   not inlining relevance-based (relevance=0.000200, probability=0.000200, bonus=1.000000, nodes=21 > 0.060036)
                                  @ 18  sun.nio.cs.StreamEncoder.growByteBufferIfNeeded(int):void (59 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=38 <= 300.000000)
                                          @ 20  som.Vector$$Lambda/0x00007f2ce003fc10.apply(Object):void (21 bytes)   relevance-based (relevance=1.000000, probability=3.960278, bonus=1.000000, nodes=28 <= 300.000000)
                                        @ 36  som.Vector.forEach(ForEachInterface):void (32 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=41 <= 300.000000)
                                  @ 22  java.nio.Buffer.hasRemaining():boolean (17 bytes)   trivial (relevance=1.000200, probability=1.000000, bonus=1.000000, nodes=9)
                                      @ 5  som.Vector.remove(Object):boolean (61 bytes)   relevance-based (relevance=2.000000, probability=0.500000, bonus=1.000000, nodes=73 <= 300.000000)
                                    @ 12  deltablue.Variable.removeConstraint(AbstractConstraint):void (23 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=90 <= 300.000000)
                                  @ 13  deltablue.UnaryConstraint.removeFromGraph():void (21 bytes)   relevance-based (relevance=4.000000, probability=1.000000, bonus=1.000000, nodes=100 <= 300.000000)
                                      @ 1  java.nio.CharBuffer.hasArray():boolean (20 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=12 <= 300.000000)
                                @ 55  deltablue.AbstractConstraint.destroyConstraint(Planner):void (17 bytes)   relevance-based (relevance=1.000128, probability=1.000000, bonus=1.000000, nodes=224 <= 300.000000)
                                      @ 8  java.nio.ByteBuffer.hasArray():boolean (20 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=12 <= 300.000000)
                            @ 10  java.nio.Buffer.position():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 21  java.nio.Buffer.limit():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 38  java.nio.Buffer.position():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 49  java.nio.Buffer.limit():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 78  java.lang.System$2.encodeASCII(char[], int, byte[], int, int):int (11 bytes)   inline method (bytecode parsing)
                              @ 109  deltablue.Planner.change(Variable, int):void (59 bytes)   not inlining relevance-based (relevance=1.000144, probability=1.000000, bonus=1.000000, nodes=415 > 300.000000)
                            @ 9  deltablue.EditConstraint.<init>(Variable, Strength$Sym, Planner):void (8 bytes)   inline method (bytecode parsing)
                              @ 4  deltablue.UnaryConstraint.<init>(Variable, Strength$Sym, Planner):void (16 bytes)   inline method (bytecode parsing)
                                @ 2  deltablue.AbstractConstraint.<init>(Strength$Sym):void (13 bytes)   inline method (bytecode parsing)
                                  @ 6  deltablue.Strength.of(Strength$Sym):Strength (11 bytes)   inline method (bytecode parsing)
                                        @ 1  java.nio.CharBuffer.array():char[] (35 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                                @ 12  deltablue.AbstractConstraint.addConstraint(Planner):void (10 bytes)   inline method (bytecode parsing)
                            @ 39  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                                        @ 6  java.nio.CharBuffer.arrayOffset():int (35 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=12 <= 300.000000)
                            @ 44  deltablue.Plan.execute():void (10 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object):Object (8 bytes)   inline method (bytecode parsing)
                                @ 4  java.lang.invoke.LambdaForm$MH/0x00007f2ce0000800.invoke(Object):Object (8 bytes)   inline method (bytecode parsing)
                                        @ 17  java.nio.CharBuffer.arrayOffset():int (35 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=12 <= 300.000000)
                                        @ 28  java.nio.ByteBuffer.array():byte[] (35 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                                        @ 34  java.nio.ByteBuffer.arrayOffset():int (35 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=12 <= 300.000000)
                                        @ 45  java.nio.ByteBuffer.arrayOffset():int (35 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=12 <= 300.000000)
                                    @ 7  deltablue.Strength$Sym.customHash():int (5 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                                  @ 1  som.Dictionary.hash(Dictionary$CustomHash):int (20 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                                        @ 75  java.lang.Math.min(int, int):int (11 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=7)
                            @ 6  som.Dictionary.getBucketIdx(int):int (10 bytes)   inline method (bytecode parsing)
                                  @ 7  som.Dictionary.getBucket(int):Dictionary$Entry (11 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                                          @ 3  java.nio.CharBuffer.arrayOffset():int (35 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=12 <= 300.000000)
                                  @ 18  som.IdentityDictionary$IdEntry.match(int, Object):boolean (22 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=13 <= 300.000000)
                            @ 2  java.nio.CharBuffer.position(int):CharBuffer (8 bytes)   inline method (bytecode parsing)
                                @ 4  som.Dictionary.at(Dictionary$CustomHash):Object (39 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=28 <= 300.000000)
                            @ 5  deltablue.Variable.addConstraint(AbstractConstraint):void (9 bytes)   inline method (bytecode parsing)
                                            @ 2  java.nio.Buffer.position(int):Buffer (52 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=16 <= 300.000000)
                                          @ 7  java.nio.CharBuffer.position(int):Buffer (6 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=18 <= 300.000000)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                          @ 14  java.nio.ByteBuffer.arrayOffset():int (35 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=12 <= 300.000000)
                                    @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000128, probability=0.000128, bonus=1.000000, nodes=41 > 0.038411)
                                  @ 5  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=35 <= 300.000000)
                                              @ 2  java.nio.Buffer.position(int):Buffer (52 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=16 <= 300.000000)
                                @ 1  deltablue.UnaryConstraint.addToGraph():void (14 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=47 <= 300.000000)
                                            @ 2  java.nio.ByteBuffer.position(int):ByteBuffer (8 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=17 <= 300.000000)
                                          @ 18  java.nio.ByteBuffer.position(int):Buffer (6 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=23 <= 300.000000)
                                        @ 130  sun.nio.cs.UTF_8.updatePositions(Buffer, int, Buffer, int):void (23 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=60 <= 300.000000)
                                  @ 1  deltablue.Planner.newMark():int (15 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=10 <= 300.000000)
                                      @ 17  sun.nio.cs.UTF_8$Encoder.encodeArrayLoop(CharBuffer, ByteBuffer):CoderResult (137 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=137 <= 300.000000)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                    @ 57  sun.nio.cs.UTF_8$Encoder.encodeLoop(CharBuffer, ByteBuffer):CoderResult (28 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=152 <= 300.000000)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f2ce003d750.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                    @ 79  java.nio.charset.CoderResult.isOverflow():boolean (14 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                                    @ 90  java.nio.charset.CoderResult.isUnderflow():boolean (13 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                                  @ 8  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 713, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=72)
                                  @ 38  java.nio.charset.CharsetEncoder.encode(CharBuffer, ByteBuffer, boolean):CoderResult (273 bytes)   relevance-based (relevance=1.000200, probability=1.000000, bonus=1.000000, nodes=160 <= 300.000000)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f2ce003d750.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                                  @ 43  java.nio.charset.CoderResult.isUnderflow():boolean (13 bytes)   trivial (relevance=1.000200, probability=1.000000, bonus=1.000000, nodes=5)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                                  @ 76  java.nio.Buffer.remaining():int (20 bytes)   relevance-based (relevance=1.000200, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                @ 11  sun.nio.cs.StreamEncoder.implWrite(CharBuffer):void (145 bytes)   relevance-based (relevance=1.087055, probability=1.000000, bonus=1.000000, nodes=217 <= 300.000000)
                                  @ 19  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 713, relevance=1.000000, probability=1.002830, bonus=1.000000, nodes=72)
                                @ 6  deltablue.Planner.incrementalAdd(AbstractConstraint):void (27 bytes)   relevance-based (relevance=1.000128, probability=1.000000, bonus=1.000000, nodes=28 <= 300.000000)
                            @ 5  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                              @ 49  sun.nio.cs.StreamEncoder.implWrite(char[], int, int):void (15 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=282 <= 300.000000)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                    @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000128, probability=0.000128, bonus=1.000000, nodes=41 > 0.038411)
                                  @ 11  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=35 <= 300.000000)
                                @ 14  som.Vector.with(Object):Vector (16 bytes)   relevance-based (relevance=1.000128, probability=1.000000, bonus=1.000000, nodes=40 <= 300.000000)
                            @ 4  som.Vector.<init>():void (7 bytes)   inline method (bytecode parsing)
                              @ 3  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 10  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.Planner$$Lambda/0x00007f2ce003e228.<init>(Vector):void (10 bytes)   inline method (bytecode parsing)
                                      @ 1  deltablue.AbstractConstraint.isInput():boolean (2 bytes)   not inlining no type profile exists
                                      @ 8  deltablue.AbstractConstraint.isSatisfied():boolean (0 bytes)   not inlining no type profile exists
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                          @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000128, probability=0.000253, bonus=1.000000, nodes=41 > 0.038411)
                                        @ 16  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=1.980139, bonus=1.000000, nodes=35 <= 300.000000)
                                      @ 8  deltablue.Planner.lambda$extractPlanFromConstraints$1(Vector, AbstractConstraint):void (20 bytes)   relevance-based (relevance=1.000000, probability=7.920556, bonus=1.000000, nodes=59 <= 300.000000)
                                    @ 20  deltablue.Planner$$Lambda/0x00007f2ce003e228.apply(Object):void (12 bytes)   relevance-based (relevance=1.000000, probability=7.920556, bonus=1.000000, nodes=64 <= 300.000000)
                                  @ 15  som.Vector.forEach(ForEachInterface):void (32 bytes)   not inlining callee invoke probability is too high (invokeP=11.881088, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=77)
                            @ 9  deltablue.Plan.<init>():void (7 bytes)   inline method (bytecode parsing)
                              @ 3  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 39  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 67  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                                  @ 20  deltablue.Planner.makePlan(Vector):Plan (86 bytes)   not inlining too large previous low-level graph (low-level-nodes: 840, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=69)
                                @ 22  deltablue.Planner.extractPlanFromConstraints(Vector):Plan (24 bytes)   relevance-based (relevance=1.000128, probability=1.000000, bonus=1.000000, nodes=27 <= 300.000000)
                                  @ 1  deltablue.UnaryConstraint.isSatisfied():boolean (5 bytes)   trivial (relevance=2.000000, probability=1.000000, bonus=1.000000, nodes=5)
                            @ 21  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.Planner$$Lambda/0x00007f2ce01f68f0.<init>(Planner):void (10 bytes)   inline method (bytecode parsing)
                                    @ 1  deltablue.UnaryConstraint.getOutput():Variable (5 bytes)   trivial (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=5)
                                    @ 6  deltablue.UnaryConstraint.markUnsatisfied():void (6 bytes)   trivial (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=7)
                            @ 1  som.Vector.capacity():int (6 bytes)   inline method (bytecode parsing)
                            @ 31  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object, Object, Object, Object):Object (13 bytes)   inline method (bytecode parsing)
                              @ 9  java.lang.invoke.LambdaForm$DMH/0x00007f2ce0123400.newInvokeSpecial(Object, Object, Object, Object, Object):Object (30 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 7  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                          @ 24  som.Vector$$Lambda/0x00007f2ce003fc10.<init>(Object, boolean[], Object[], int[]):void (26 bytes)   relevance-based (relevance=1.000000, probability=0.250000, bonus=1.000000, nodes=17 <= 300.000000)
                                              @ 17  som.Vector.lambda$remove$0(Object, boolean[], Object[], int[], Object):void (28 bytes)   relevance-based (relevance=1.000000, probability=1.980139, bonus=1.000000, nodes=26 <= 300.000000)
                                            @ 20  som.Vector$$Lambda/0x00007f2ce003fc10.apply(Object):void (21 bytes)   relevance-based (relevance=1.000000, probability=1.980139, bonus=1.000000, nodes=28 <= 300.000000)
                                          @ 36  som.Vector.forEach(ForEachInterface):void (32 bytes)   relevance-based (relevance=1.000000, probability=0.250000, bonus=1.000000, nodes=41 <= 300.000000)
                                        @ 5  som.Vector.remove(Object):boolean (61 bytes)   relevance-based (relevance=2.000000, probability=0.250000, bonus=1.000000, nodes=73 <= 300.000000)
                                      @ 12  deltablue.Variable.removeConstraint(AbstractConstraint):void (23 bytes)   relevance-based (relevance=1.000000, probability=0.250000, bonus=1.000000, nodes=90 <= 300.000000)
                                    @ 10  deltablue.UnaryConstraint.removeFromGraph():void (21 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=100 <= 300.000000)
                            @ 4  som.Vector.<init>():void (7 bytes)   inline method (bytecode parsing)
                              @ 3  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 10  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 14  deltablue.Strength.absoluteWeakest():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 17  deltablue.Variable.setWalkStrength(Strength):void (6 bytes)   inline method (bytecode parsing)
                            @ 22  deltablue.Variable.setStay(boolean):void (6 bytes)   inline method (bytecode parsing)
                            @ 48  deltablue.Variable.getConstraints():Vector (5 bytes)   inline accessor method (bytecode parsing)
                            @ 52  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.Planner$$Lambda/0x00007f2ce01f6000.<init>(Vector):void (10 bytes)   inline method (bytecode parsing)
                            @ 64  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.Planner$$Lambda/0x00007f2ce01f6220.<init>(Vector):void (10 bytes)   inline method (bytecode parsing)
                            @ 76  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object):Object (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.lang.invoke.LambdaForm$MH/0x00007f2ce0000800.invoke(Object):Object (8 bytes)   inline method (bytecode parsing)
                                    @ 15  deltablue.Planner.removePropagateFrom(Variable):Vector (86 bytes)   not inlining too large previous low-level graph (low-level-nodes: 793, relevance=2.000000, probability=0.500000, bonus=1.000000, nodes=81)
                            @ 8  deltablue.Planner.lambda$incrementalRemove$0(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                                          @ 1  deltablue.Planner.newMark():int (15 bytes)   relevance-based (relevance=1.000000, probability=3.960278, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f2ce003d750.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 8  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 713, relevance=1.000000, probability=3.960278, bonus=1.000000, nodes=72)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f2ce003d750.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                              @ 15  java.nio.Buffer.remaining():int (20 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                                          @ 19  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 713, relevance=1.000000, probability=3.971486, bonus=1.000000, nodes=72)
                            @ 4  java.nio.Buffer.capacity():int (5 bytes)   inline accessor method (bytecode parsing)
                                        @ 2  deltablue.Planner.incrementalAdd(AbstractConstraint):void (27 bytes)   relevance-based (relevance=1.000000, probability=3.960278, bonus=1.000000, nodes=28 <= 300.000000)
                            @ 21  java.nio.charset.CharsetEncoder.maxBytesPerChar():float (5 bytes)   inline accessor method (bytecode parsing)
                                      @ 20  deltablue.Planner$$Lambda/0x00007f2ce01f68f0.apply(Object):void (12 bytes)   relevance-based (relevance=1.000000, probability=3.960278, bonus=1.000000, nodes=37 <= 300.000000)
                                    @ 26  som.Vector.forEach(ForEachInterface):void (32 bytes)   not inlining callee invoke probability is too high (invokeP=15.863529, relevance=2.000000, probability=0.500000, bonus=1.000000, nodes=53)
                                  @ 9  deltablue.Planner.incrementalRemove(AbstractConstraint):void (30 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=121 <= 300.000000)
                                @ 34  java.lang.Math.min(int, int):int (11 bytes)   trivial (relevance=1.000200, probability=1.000000, bonus=1.000000, nodes=7)
                            @ 4  java.nio.Buffer.position():int (5 bytes)   inline accessor method (bytecode parsing)
                                @ 46  sun.nio.cs.StreamEncoder.implFlushBuffer():void (15 bytes)   not inlining relevance-based (relevance=0.000200, probability=0.000200, bonus=1.000000, nodes=21 > 0.060036)
                                @ 52  java.nio.ByteBuffer.allocate(int):ByteBuffer (20 bytes)   not inlining relevance-based (relevance=0.000200, probability=0.000200, bonus=1.000000, nodes=21 > 0.060036)
                              @ 18  sun.nio.cs.StreamEncoder.growByteBufferIfNeeded(int):void (59 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=38 <= 300.000000)
                            @ 1  som.Vector.capacity():int (6 bytes)   inline method (bytecode parsing)
                            @ 31  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object, Object, Object, Object):Object (13 bytes)   inline method (bytecode parsing)
                              @ 22  java.nio.Buffer.hasRemaining():boolean (17 bytes)   trivial (relevance=1.000200, probability=1.000000, bonus=1.000000, nodes=9)
                              @ 9  java.lang.invoke.LambdaForm$DMH/0x00007f2ce0123400.newInvokeSpecial(Object, Object, Object, Object, Object):Object (30 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 7  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                        @ 24  som.Vector$$Lambda/0x00007f2ce003fc10.<init>(Object, boolean[], Object[], int[]):void (26 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=17 <= 300.000000)
                                  @ 1  java.nio.CharBuffer.hasArray():boolean (20 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=12 <= 300.000000)
                                  @ 8  java.nio.ByteBuffer.hasArray():boolean (20 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=12 <= 300.000000)
                                            @ 17  som.Vector.lambda$remove$0(Object, boolean[], Object[], int[], Object):void (28 bytes)   relevance-based (relevance=1.000000, probability=3.960278, bonus=1.000000, nodes=26 <= 300.000000)
                            @ 10  java.nio.Buffer.position():int (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 20  som.Vector$$Lambda/0x00007f2ce003fc10.apply(Object):void (21 bytes)   relevance-based (relevance=1.000000, probability=3.960278, bonus=1.000000, nodes=28 <= 300.000000)
                            @ 21  java.nio.Buffer.limit():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 38  java.nio.Buffer.position():int (5 bytes)   inline accessor method (bytecode parsing)
                                        @ 36  som.Vector.forEach(ForEachInterface):void (32 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=41 <= 300.000000)
                            @ 49  java.nio.Buffer.limit():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 78  java.lang.System$2.encodeASCII(char[], int, byte[], int, int):int (11 bytes)   inline method (bytecode parsing)
                                      @ 5  som.Vector.remove(Object):boolean (61 bytes)   relevance-based (relevance=2.000000, probability=0.500000, bonus=1.000000, nodes=73 <= 300.000000)
                                    @ 12  deltablue.Variable.removeConstraint(AbstractConstraint):void (23 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=90 <= 300.000000)
                                    @ 1  java.nio.CharBuffer.array():char[] (35 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                                  @ 13  deltablue.UnaryConstraint.removeFromGraph():void (21 bytes)   relevance-based (relevance=4.000000, probability=1.000000, bonus=1.000000, nodes=100 <= 300.000000)
                                    @ 6  java.nio.CharBuffer.arrayOffset():int (35 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=12 <= 300.000000)
                                @ 55  deltablue.AbstractConstraint.destroyConstraint(Planner):void (17 bytes)   relevance-based (relevance=1.000128, probability=1.000000, bonus=1.000000, nodes=224 <= 300.000000)
                                    @ 17  java.nio.CharBuffer.arrayOffset():int (35 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=12 <= 300.000000)
                                    @ 28  java.nio.ByteBuffer.array():byte[] (35 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                                    @ 34  java.nio.ByteBuffer.arrayOffset():int (35 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=12 <= 300.000000)
                              @ 139  deltablue.Planner.change(Variable, int):void (59 bytes)   not inlining relevance-based (relevance=1.000144, probability=1.000000, bonus=1.000000, nodes=415 > 300.000000)
                                    @ 45  java.nio.ByteBuffer.arrayOffset():int (35 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=12 <= 300.000000)
                            @ 9  deltablue.EditConstraint.<init>(Variable, Strength$Sym, Planner):void (8 bytes)   inline method (bytecode parsing)
                              @ 4  deltablue.UnaryConstraint.<init>(Variable, Strength$Sym, Planner):void (16 bytes)   inline method (bytecode parsing)
                                @ 2  deltablue.AbstractConstraint.<init>(Strength$Sym):void (13 bytes)   inline method (bytecode parsing)
                                  @ 6  deltablue.Strength.of(Strength$Sym):Strength (11 bytes)   inline method (bytecode parsing)
                                    @ 75  java.lang.Math.min(int, int):int (11 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=7)
                                @ 12  deltablue.AbstractConstraint.addConstraint(Planner):void (10 bytes)   inline method (bytecode parsing)
                            @ 39  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 44  deltablue.Plan.execute():void (10 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object):Object (8 bytes)   inline method (bytecode parsing)
                                @ 4  java.lang.invoke.LambdaForm$MH/0x00007f2ce0000800.invoke(Object):Object (8 bytes)   inline method (bytecode parsing)
                                      @ 3  java.nio.CharBuffer.arrayOffset():int (35 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=12 <= 300.000000)
                            @ 2  java.nio.CharBuffer.position(int):CharBuffer (8 bytes)   inline method (bytecode parsing)
                                        @ 2  java.nio.Buffer.position(int):Buffer (52 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=16 <= 300.000000)
                                      @ 7  java.nio.CharBuffer.position(int):Buffer (6 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=18 <= 300.000000)
                                    @ 7  deltablue.Strength$Sym.customHash():int (5 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                                  @ 1  som.Dictionary.hash(Dictionary$CustomHash):int (20 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                                      @ 14  java.nio.ByteBuffer.arrayOffset():int (35 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=12 <= 300.000000)
                            @ 6  som.Dictionary.getBucketIdx(int):int (10 bytes)   inline method (bytecode parsing)
                                  @ 7  som.Dictionary.getBucket(int):Dictionary$Entry (11 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                                  @ 18  som.IdentityDictionary$IdEntry.match(int, Object):boolean (22 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                          @ 2  java.nio.Buffer.position(int):Buffer (52 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=16 <= 300.000000)
                                @ 4  som.Dictionary.at(Dictionary$CustomHash):Object (39 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=28 <= 300.000000)
                                        @ 2  java.nio.ByteBuffer.position(int):ByteBuffer (8 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=17 <= 300.000000)
                                      @ 18  java.nio.ByteBuffer.position(int):Buffer (6 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=23 <= 300.000000)
                            @ 5  deltablue.Variable.addConstraint(AbstractConstraint):void (9 bytes)   inline method (bytecode parsing)
                                    @ 130  sun.nio.cs.UTF_8.updatePositions(Buffer, int, Buffer, int):void (23 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=65 <= 300.000000)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                  @ 17  sun.nio.cs.UTF_8$Encoder.encodeArrayLoop(CharBuffer, ByteBuffer):CoderResult (137 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=150 <= 300.000000)
                                @ 57  sun.nio.cs.UTF_8$Encoder.encodeLoop(CharBuffer, ByteBuffer):CoderResult (28 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=167 <= 300.000000)
                                    @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000128, probability=0.000128, bonus=1.000000, nodes=41 > 0.038411)
                                  @ 5  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=35 <= 300.000000)
                                @ 1  deltablue.UnaryConstraint.addToGraph():void (14 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=47 <= 300.000000)
                                @ 79  java.nio.charset.CoderResult.isOverflow():boolean (14 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                                  @ 1  deltablue.Planner.newMark():int (15 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=10 <= 300.000000)
                                @ 90  java.nio.charset.CoderResult.isUnderflow():boolean (13 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                              @ 38  java.nio.charset.CharsetEncoder.encode(CharBuffer, ByteBuffer, boolean):CoderResult (273 bytes)   relevance-based (relevance=1.000200, probability=1.000000, bonus=1.000000, nodes=175 <= 300.000000)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f2ce003d750.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                              @ 43  java.nio.charset.CoderResult.isUnderflow():boolean (13 bytes)   trivial (relevance=1.000200, probability=1.000000, bonus=1.000000, nodes=5)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                              @ 76  java.nio.Buffer.remaining():int (20 bytes)   relevance-based (relevance=1.000200, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                                  @ 8  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 713, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=72)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f2ce003d750.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 19  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 713, relevance=1.000000, probability=1.002830, bonus=1.000000, nodes=72)
                                @ 6  deltablue.Planner.incrementalAdd(AbstractConstraint):void (27 bytes)   relevance-based (relevance=1.000128, probability=1.000000, bonus=1.000000, nodes=28 <= 300.000000)
                            @ 5  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                    @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000128, probability=0.000128, bonus=1.000000, nodes=41 > 0.038411)
                                  @ 11  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=35 <= 300.000000)
                                @ 14  som.Vector.with(Object):Vector (16 bytes)   relevance-based (relevance=1.000128, probability=1.000000, bonus=1.000000, nodes=40 <= 300.000000)
                            @ 4  som.Vector.<init>():void (7 bytes)   inline method (bytecode parsing)
                              @ 3  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 10  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.Planner$$Lambda/0x00007f2ce003e228.<init>(Vector):void (10 bytes)   inline method (bytecode parsing)
                                      @ 1  deltablue.AbstractConstraint.isInput():boolean (2 bytes)   not inlining no type profile exists
                                      @ 8  deltablue.AbstractConstraint.isSatisfied():boolean (0 bytes)   not inlining no type profile exists
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                          @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000128, probability=0.000253, bonus=1.000000, nodes=41 > 0.038411)
                                        @ 16  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=1.980139, bonus=1.000000, nodes=35 <= 300.000000)
                                      @ 8  deltablue.Planner.lambda$extractPlanFromConstraints$1(Vector, AbstractConstraint):void (20 bytes)   relevance-based (relevance=1.000000, probability=7.920556, bonus=1.000000, nodes=59 <= 300.000000)
                                    @ 20  deltablue.Planner$$Lambda/0x00007f2ce003e228.apply(Object):void (12 bytes)   relevance-based (relevance=1.000000, probability=7.920556, bonus=1.000000, nodes=64 <= 300.000000)
                                  @ 15  som.Vector.forEach(ForEachInterface):void (32 bytes)   not inlining callee invoke probability is too high (invokeP=11.881088, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=77)
                            @ 9  deltablue.Plan.<init>():void (7 bytes)   inline method (bytecode parsing)
                              @ 3  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 39  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 67  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                                  @ 20  deltablue.Planner.makePlan(Vector):Plan (86 bytes)   not inlining too large previous low-level graph (low-level-nodes: 840, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=69)
                                @ 22  deltablue.Planner.extractPlanFromConstraints(Vector):Plan (24 bytes)   relevance-based (relevance=1.000128, probability=1.000000, bonus=1.000000, nodes=27 <= 300.000000)
                                  @ 1  deltablue.UnaryConstraint.isSatisfied():boolean (5 bytes)   trivial (relevance=2.000000, probability=1.000000, bonus=1.000000, nodes=5)
                            @ 21  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.Planner$$Lambda/0x00007f2ce01f68f0.<init>(Planner):void (10 bytes)   inline method (bytecode parsing)
                                    @ 1  deltablue.UnaryConstraint.getOutput():Variable (5 bytes)   trivial (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=5)
                                    @ 6  deltablue.UnaryConstraint.markUnsatisfied():void (6 bytes)   trivial (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=7)
                            @ 1  som.Vector.capacity():int (6 bytes)   inline method (bytecode parsing)
                            @ 31  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object, Object, Object, Object):Object (13 bytes)   inline method (bytecode parsing)
                              @ 9  java.lang.invoke.LambdaForm$DMH/0x00007f2ce0123400.newInvokeSpecial(Object, Object, Object, Object, Object):Object (30 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 7  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                          @ 24  som.Vector$$Lambda/0x00007f2ce003fc10.<init>(Object, boolean[], Object[], int[]):void (26 bytes)   relevance-based (relevance=1.000000, probability=0.250000, bonus=1.000000, nodes=17 <= 300.000000)
                                              @ 17  som.Vector.lambda$remove$0(Object, boolean[], Object[], int[], Object):void (28 bytes)   relevance-based (relevance=1.000000, probability=1.980139, bonus=1.000000, nodes=26 <= 300.000000)
                                            @ 20  som.Vector$$Lambda/0x00007f2ce003fc10.apply(Object):void (21 bytes)   relevance-based (relevance=1.000000, probability=1.980139, bonus=1.000000, nodes=28 <= 300.000000)
                                          @ 36  som.Vector.forEach(ForEachInterface):void (32 bytes)   relevance-based (relevance=1.000000, probability=0.250000, bonus=1.000000, nodes=41 <= 300.000000)
                                        @ 5  som.Vector.remove(Object):boolean (61 bytes)   relevance-based (relevance=2.000000, probability=0.250000, bonus=1.000000, nodes=73 <= 300.000000)
                                      @ 12  deltablue.Variable.removeConstraint(AbstractConstraint):void (23 bytes)   relevance-based (relevance=1.000000, probability=0.250000, bonus=1.000000, nodes=90 <= 300.000000)
                            @ 12  java.nio.Buffer.limit():int (5 bytes)   inline accessor method (bytecode parsing)
                                    @ 10  deltablue.UnaryConstraint.removeFromGraph():void (21 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=100 <= 300.000000)
                            @ 20  java.nio.Buffer.position():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 4  som.Vector.<init>():void (7 bytes)   inline method (bytecode parsing)
                              @ 3  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 10  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 14  deltablue.Strength.absoluteWeakest():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 17  deltablue.Variable.setWalkStrength(Strength):void (6 bytes)   inline method (bytecode parsing)
                            @ 22  deltablue.Variable.setStay(boolean):void (6 bytes)   inline method (bytecode parsing)
                                @ 1  java.nio.Buffer.flip():Buffer (20 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=13 <= 300.000000)
                            @ 48  deltablue.Variable.getConstraints():Vector (5 bytes)   inline accessor method (bytecode parsing)
                            @ 52  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 4  java.nio.ByteBuffer.flip():ByteBuffer (7 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=14 <= 300.000000)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.Planner$$Lambda/0x00007f2ce01f6000.<init>(Vector):void (10 bytes)   inline method (bytecode parsing)
                              @ 114  java.nio.ByteBuffer.array():byte[] (35 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                            @ 64  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                              @ 121  java.nio.ByteBuffer.arrayOffset():int (35 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=12 <= 300.000000)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.Planner$$Lambda/0x00007f2ce01f6220.<init>(Vector):void (10 bytes)   inline method (bytecode parsing)
                            @ 76  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object):Object (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.lang.invoke.LambdaForm$MH/0x00007f2ce0000800.invoke(Object):Object (8 bytes)   inline method (bytecode parsing)
                            @ 11  jdk.internal.misc.InternalLock.lock():void (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.util.concurrent.locks.ReentrantLock.lock():void (8 bytes)   inline method (bytecode parsing)
                            @ 25  jdk.internal.misc.InternalLock.unlock():void (8 bytes)   inline method (bytecode parsing)
                                    @ 15  deltablue.Planner.removePropagateFrom(Variable):Vector (86 bytes)   not inlining too large previous low-level graph (low-level-nodes: 793, relevance=2.000000, probability=0.500000, bonus=1.000000, nodes=81)
                              @ 4  java.util.concurrent.locks.ReentrantLock.unlock():void (10 bytes)   inline method (bytecode parsing)
                                @ 5  java.util.concurrent.locks.AbstractQueuedSynchronizer.release(int):boolean (19 bytes)   inline method (bytecode parsing)
                            @ 8  deltablue.Planner.lambda$incrementalRemove$0(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 9  java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(int):void (20 bytes)   inline method (bytecode parsing)
                            @ 7  java.util.concurrent.locks.AbstractQueuedSynchronizer.compareAndSetState(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                                          @ 1  deltablue.Planner.newMark():int (15 bytes)   relevance-based (relevance=1.000000, probability=3.960278, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 15  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                            @ 21  java.util.concurrent.locks.AbstractOwnableSynchronizer.getExclusiveOwnerThread():Thread (5 bytes)   inline accessor method (bytecode parsing)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                            @ 29  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                            @ 51  java.util.concurrent.locks.AbstractQueuedSynchronizer.setState(int):void (6 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                  @ 1  java.util.concurrent.locks.ReentrantLock$NonfairSync.initialTryLock():boolean (58 bytes)   relevance-based (relevance=1.006377, probability=1.000000, bonus=1.000000, nodes=40 <= 300.000000)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f2ce003d750.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 10  java.util.concurrent.locks.AbstractQueuedSynchronizer.compareAndSetState(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                            @ 20  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 2  java.util.concurrent.locks.ReentrantLock$NonfairSync.tryAcquire(int):boolean (27 bytes)   not inlining relevance-based (relevance=0.005005, probability=0.004447, bonus=1.000000, nodes=36 > 1.501641)
                                          @ 8  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 713, relevance=1.000000, probability=3.960278, bonus=1.000000, nodes=72)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                            @ 108  java.util.concurrent.locks.AbstractQueuedSynchronizer.tryAcquireShared(int):int (8 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                              @ 4  java.lang.UnsupportedOperationException.<init>():void (5 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f2ce003d750.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.RuntimeException.<init>():void (5 bytes)   inline method (bytecode parsing)
                                  @ 1  java.lang.Exception.<init>():void (5 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 245  java.util.concurrent.locks.AbstractQueuedSynchronizer$ExclusiveNode.<init>():void (5 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                              @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer$Node.<init>():void (5 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                            @ 290  java.util.concurrent.locks.AbstractQueuedSynchronizer$Node.setPrevRelaxed(AbstractQueuedSynchronizer$Node):void (12 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 393  java.lang.Thread.interrupted():boolean (7 bytes)   inline method (bytecode parsing)
                                          @ 19  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 713, relevance=1.000000, probability=3.971486, bonus=1.000000, nodes=72)
                                        @ 2  deltablue.Planner.incrementalAdd(AbstractConstraint):void (27 bytes)   relevance-based (relevance=1.000000, probability=3.960278, bonus=1.000000, nodes=28 <= 300.000000)
                                      @ 20  deltablue.Planner$$Lambda/0x00007f2ce01f68f0.apply(Object):void (12 bytes)   relevance-based (relevance=1.000000, probability=3.960278, bonus=1.000000, nodes=37 <= 300.000000)
                                    @ 26  som.Vector.forEach(ForEachInterface):void (32 bytes)   not inlining callee invoke probability is too high (invokeP=15.863529, relevance=2.000000, probability=0.500000, bonus=1.000000, nodes=53)
                                  @ 9  deltablue.Planner.incrementalRemove(AbstractConstraint):void (30 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=121 <= 300.000000)
                            @ 1  som.Vector.capacity():int (6 bytes)   inline method (bytecode parsing)
                                  @ 15  java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer$Node, int, boolean, boolean, boolean, long):int (424 bytes)   not inlining relevance-based (relevance=0.002503, probability=0.002223, bonus=1.000000, nodes=226 > 0.750820)
                                @ 4  java.util.concurrent.locks.ReentrantLock$Sync.lock():void (13 bytes)   relevance-based (relevance=1.146588, probability=1.000000, bonus=1.000000, nodes=57 <= 300.000000)
                            @ 31  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object, Object, Object, Object):Object (13 bytes)   inline method (bytecode parsing)
                              @ 9  java.lang.invoke.LambdaForm$DMH/0x00007f2ce0123400.newInvokeSpecial(Object, Object, Object, Object, Object):Object (30 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 7  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                  @ 1  java.io.PrintStream.ensureOpen():void (18 bytes)   trivial (relevance=1.001146, probability=1.000000, bonus=1.000000, nodes=7)
                                        @ 24  som.Vector$$Lambda/0x00007f2ce003fc10.<init>(Object, boolean[], Object[], int[]):void (26 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=17 <= 300.000000)
                            @ 11  jdk.internal.misc.InternalLock.lock():void (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.util.concurrent.locks.ReentrantLock.lock():void (8 bytes)   inline method (bytecode parsing)
                            @ 25  jdk.internal.misc.InternalLock.unlock():void (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.util.concurrent.locks.ReentrantLock.unlock():void (10 bytes)   inline method (bytecode parsing)
                                @ 5  java.util.concurrent.locks.AbstractQueuedSynchronizer.release(int):boolean (19 bytes)   inline method (bytecode parsing)
                                            @ 17  som.Vector.lambda$remove$0(Object, boolean[], Object[], int[], Object):void (28 bytes)   relevance-based (relevance=1.000000, probability=3.960278, bonus=1.000000, nodes=26 <= 300.000000)
                                          @ 20  som.Vector$$Lambda/0x00007f2ce003fc10.apply(Object):void (21 bytes)   relevance-based (relevance=1.000000, probability=3.960278, bonus=1.000000, nodes=28 <= 300.000000)
                                        @ 36  som.Vector.forEach(ForEachInterface):void (32 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=41 <= 300.000000)
                            @ 9  java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(int):void (20 bytes)   inline method (bytecode parsing)
                                      @ 5  som.Vector.remove(Object):boolean (61 bytes)   relevance-based (relevance=2.000000, probability=0.500000, bonus=1.000000, nodes=73 <= 300.000000)
                                    @ 4  java.util.concurrent.locks.ReentrantLock$Sync.lock():void (13 bytes)   not inlining relevance-based (relevance=0.001315, probability=0.000572, bonus=1.000000, nodes=31 > 0.394505)
                                    @ 12  deltablue.Variable.removeConstraint(AbstractConstraint):void (23 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=90 <= 300.000000)
                                    @ 18  java.io.BufferedOutputStream.implWrite(byte[], int, int):void (71 bytes)   not inlining relevance-based (relevance=0.001315, probability=0.000572, bonus=1.000000, nodes=55 > 0.394505)
                                  @ 13  deltablue.UnaryConstraint.removeFromGraph():void (21 bytes)   relevance-based (relevance=4.000000, probability=1.000000, bonus=1.000000, nodes=100 <= 300.000000)
                            @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 8  java.util.concurrent.locks.AbstractOwnableSynchronizer.getExclusiveOwnerThread():Thread (5 bytes)   inline accessor method (bytecode parsing)
                            @ 41  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                                @ 55  deltablue.AbstractConstraint.destroyConstraint(Planner):void (17 bytes)   relevance-based (relevance=1.000128, probability=1.000000, bonus=1.000000, nodes=224 <= 300.000000)
                            @ 46  java.util.concurrent.locks.AbstractQueuedSynchronizer.setState(int):void (6 bytes)   inline method (bytecode parsing)
                                    @ 2  java.util.concurrent.locks.ReentrantLock$Sync.tryRelease(int):boolean (51 bytes)   not inlining relevance-based (relevance=0.001315, probability=0.000572, bonus=1.000000, nodes=37 > 0.394505)
                            @ 22  java.util.concurrent.locks.AbstractQueuedSynchronizer$Node.getAndUnsetStatus(int):int (14 bytes)   inline method (bytecode parsing)
                              @ 10  jdk.internal.misc.Unsafe.getAndBitwiseAndInt(Object, long, int):int (27 bytes)   inline method (bytecode parsing)
                              @ 164  deltablue.Planner.change(Variable, int):void (59 bytes)   not inlining relevance-based (relevance=1.000144, probability=1.000000, bonus=1.000000, nodes=412 > 300.000000)
                            @ 9  deltablue.EditConstraint.<init>(Variable, Strength$Sym, Planner):void (8 bytes)   inline method (bytecode parsing)
                              @ 4  deltablue.UnaryConstraint.<init>(Variable, Strength$Sym, Planner):void (16 bytes)   inline method (bytecode parsing)
                                @ 2  deltablue.AbstractConstraint.<init>(Strength$Sym):void (13 bytes)   inline method (bytecode parsing)
                                  @ 6  deltablue.Strength.of(Strength$Sym):Strength (11 bytes)   inline method (bytecode parsing)
                                    @ 12  java.util.concurrent.locks.AbstractQueuedSynchronizer.signalNext(AbstractQueuedSynchronizer$Node):void (34 bytes)   not inlining relevance-based (relevance=0.001147, probability=0.000499, bonus=1.000000, nodes=56 > 0.344069)
                                @ 12  deltablue.AbstractConstraint.addConstraint(Planner):void (10 bytes)   inline method (bytecode parsing)
                            @ 39  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                                    @ 55  java.io.BufferedOutputStream.implWrite(byte[], int, int):void (71 bytes)   not inlining relevance-based (relevance=0.001315, probability=0.000572, bonus=1.000000, nodes=55 > 0.394505)
                            @ 44  deltablue.Plan.execute():void (10 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object):Object (8 bytes)   inline method (bytecode parsing)
                                @ 4  java.lang.invoke.LambdaForm$MH/0x00007f2ce0000800.invoke(Object):Object (8 bytes)   inline method (bytecode parsing)
                            @ 157  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                    @ 7  deltablue.Strength$Sym.customHash():int (5 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                  @ 1  som.Dictionary.hash(Dictionary$CustomHash):int (20 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                            @ 6  som.Dictionary.getBucketIdx(int):int (10 bytes)   inline method (bytecode parsing)
                                @ 16  jdk.graal.compiler.hotspot.HotSpotTTYStreamProvider$LogStreamOptionKey$DelayedOutputStream$$Lambda/0x00007f2ce02d09d0.<init>(String):void (10 bytes)   inline method (bytecode parsing)
                                  @ 7  som.Dictionary.getBucket(int):Dictionary$Entry (11 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                            @ 210  jdk.vm.ci.hotspot.HotSpotJVMCIRuntime.getLogStream():OutputStream (9 bytes)   inline method (bytecode parsing)
                                  @ 18  som.IdentityDictionary$IdEntry.match(int, Object):boolean (22 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                @ 4  som.Dictionary.at(Dictionary$CustomHash):Object (39 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=28 <= 300.000000)
                            @ 5  deltablue.Variable.addConstraint(AbstractConstraint):void (9 bytes)   inline method (bytecode parsing)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                    @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000128, probability=0.000128, bonus=1.000000, nodes=41 > 0.038411)
                                  @ 5  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=35 <= 300.000000)
                                @ 1  deltablue.UnaryConstraint.addToGraph():void (14 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=47 <= 300.000000)
                                  @ 1  deltablue.Planner.newMark():int (15 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                            @ 0  jdk.graal.compiler.options.OptionValues.newOptionMap():EconomicMap (7 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f2ce003d750.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                              @ 3  org.graalvm.collections.EconomicMap.create(Equivalence):EconomicMap (6 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                                @ 2  org.graalvm.collections.EconomicMapImpl.create(Equivalence, boolean):EconomicMapImpl (13 bytes)   inline method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                                  @ 6  org.graalvm.collections.EconomicMapImpl.<init>(Equivalence, boolean):void (30 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                                  @ 9  org.graalvm.collections.EconomicMapImpl.intercept(EconomicMapImpl):EconomicMapImpl (2 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 6  jdk.vm.ci.common.InitTimer.timer(String):InitTimer (19 bytes)   inline method (bytecode parsing)
                                  @ 8  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 713, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=72)
                            @ 239  org.graalvm.collections.EconomicMap.create():EconomicMap (7 bytes)   inline method (bytecode parsing)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 3  org.graalvm.collections.EconomicMap.create(Equivalence):EconomicMap (6 bytes)   inline method (bytecode parsing)
                                @ 2  org.graalvm.collections.EconomicMapImpl.create(Equivalence, boolean):EconomicMapImpl (13 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                  @ 6  org.graalvm.collections.EconomicMapImpl.<init>(Equivalence, boolean):void (30 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                  @ 9  org.graalvm.collections.EconomicMapImpl.intercept(EconomicMapImpl):EconomicMapImpl (2 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f2ce003d750.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 295  java.lang.String.startsWith(String):boolean (7 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 305  java.lang.String.length():int (11 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                              @ 6  java.lang.String.coder():byte (15 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                            @ 308  java.lang.String.substring(int):String (10 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 311  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.LambdaForm$MH/0x00007f2ce0003800.invoke(Object, Object):Object (25 bytes)   inline method (bytecode parsing)
                                  @ 19  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 713, relevance=1.000000, probability=1.002830, bonus=1.000000, nodes=72)
                                @ 6  deltablue.Planner.incrementalAdd(AbstractConstraint):void (27 bytes)   relevance-based (relevance=1.000128, probability=1.000000, bonus=1.000000, nodes=28 <= 300.000000)
                                @ 21  java.lang.invoke.DirectMethodHandle$Holder.invokeStatic(Object, Object, Object):Object (15 bytes)   inline method (bytecode parsing)
                                  @ 1  java.lang.invoke.DirectMethodHandle.internalMemberName(Object):Object (8 bytes)   inline method (bytecode parsing)
                                  @ 11  java.lang.StringConcatHelper.simpleConcat(Object, Object):String (94 bytes)   inline method (bytecode parsing)
                                    @ 1  java.lang.StringConcatHelper.stringOf(Object):String (20 bytes)   inline method (bytecode parsing)
                            @ 5  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                                      @ 5  java.lang.String.toString():String (2 bytes)   inline method (bytecode parsing)
                                    @ 11  java.lang.String.isEmpty():boolean (14 bytes)   inline method (bytecode parsing)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                    @ 61  java.lang.StringConcatHelper.newArray(long):byte[] (40 bytes)   inline method (bytecode parsing)
                            @ 322  java.lang.String.startsWith(String):boolean (7 bytes)   inline method (bytecode parsing)
                            @ 359  java.lang.String.length():int (11 bytes)   inline method (bytecode parsing)
                                    @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000128, probability=0.000128, bonus=1.000000, nodes=41 > 0.038411)
                                  @ 11  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=35 <= 300.000000)
                              @ 6  java.lang.String.coder():byte (15 bytes)   inline method (bytecode parsing)
                            @ 362  java.lang.String.substring(int):String (10 bytes)   inline method (bytecode parsing)
                                @ 14  som.Vector.with(Object):Vector (16 bytes)   relevance-based (relevance=1.000128, probability=1.000000, bonus=1.000000, nodes=40 <= 300.000000)
                            @ 4  som.Vector.<init>():void (7 bytes)   inline method (bytecode parsing)
                              @ 3  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 10  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.Planner$$Lambda/0x00007f2ce003e228.<init>(Vector):void (10 bytes)   inline method (bytecode parsing)
                            @ 8  jdk.vm.ci.services.Services.getSavedProperty(String):String (13 bytes)   inline method (bytecode parsing)
                            @ 11  java.lang.Boolean.parseBoolean(String):boolean (7 bytes)   inline method (bytecode parsing)
                                      @ 1  deltablue.AbstractConstraint.isInput():boolean (2 bytes)   not inlining no type profile exists
                                      @ 8  deltablue.AbstractConstraint.isSatisfied():boolean (0 bytes)   not inlining no type profile exists
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                          @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000128, probability=0.000253, bonus=1.000000, nodes=41 > 0.038411)
                                        @ 16  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=1.980139, bonus=1.000000, nodes=35 <= 300.000000)
                                      @ 8  deltablue.Planner.lambda$extractPlanFromConstraints$1(Vector, AbstractConstraint):void (20 bytes)   relevance-based (relevance=1.000000, probability=7.920556, bonus=1.000000, nodes=59 <= 300.000000)
                                    @ 20  deltablue.Planner$$Lambda/0x00007f2ce003e228.apply(Object):void (12 bytes)   relevance-based (relevance=1.000000, probability=7.920556, bonus=1.000000, nodes=64 <= 300.000000)
                            @ 24  java.util.concurrent.atomic.AtomicInteger.<init>():void (5 bytes)   inline method (bytecode parsing)
                                  @ 15  som.Vector.forEach(ForEachInterface):void (32 bytes)   not inlining callee invoke probability is too high (invokeP=11.881088, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=77)
                              @ 1  java.lang.Number.<init>():void (5 bytes)   inline method (bytecode parsing)
                            @ 9  deltablue.Plan.<init>():void (7 bytes)   inline method (bytecode parsing)
                              @ 3  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 39  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 67  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                                  @ 20  deltablue.Planner.makePlan(Vector):Plan (86 bytes)   not inlining too large previous low-level graph (low-level-nodes: 840, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=69)
                                @ 22  deltablue.Planner.extractPlanFromConstraints(Vector):Plan (24 bytes)   relevance-based (relevance=1.000128, probability=1.000000, bonus=1.000000, nodes=27 <= 300.000000)
                                  @ 1  deltablue.UnaryConstraint.isSatisfied():boolean (5 bytes)   trivial (relevance=2.000000, probability=1.000000, bonus=1.000000, nodes=5)
                                                @ 0  jdk.vm.ci.services.Services.checkJVMCIEnabled():void (17 bytes)   trivial (relevance=4.000000, probability=0.031214, bonus=1.000000, nodes=3)
                            @ 21  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                                  @ 0  java.lang.System.allowSecurityManager():boolean (13 bytes)   trivial (relevance=1.000800, probability=0.007804, bonus=1.000000, nodes=8)
                                @ 16  deltablue.Planner$$Lambda/0x00007f2ce01f68f0.<init>(Planner):void (10 bytes)   inline method (bytecode parsing)
                                                @ 42  java.lang.System.getSecurityManager():SecurityManager (12 bytes)   relevance-based (relevance=1.000000, probability=0.007804, bonus=1.000000, nodes=14 <= 300.000000)
                            @ 12  java.lang.IllegalStateException.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                                    @ 1  deltablue.UnaryConstraint.getOutput():Variable (5 bytes)   trivial (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=5)
                              @ 2  java.lang.RuntimeException.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                                @ 2  java.lang.Exception.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                                    @ 6  deltablue.UnaryConstraint.markUnsatisfied():void (6 bytes)   trivial (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=7)
                            @ 12  java.lang.NullPointerException.<init>():void (5 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.RuntimeException.<init>():void (5 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.Exception.<init>():void (5 bytes)   inline method (bytecode parsing)
                            @ 1  som.Vector.capacity():int (6 bytes)   inline method (bytecode parsing)
                            @ 31  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object, Object, Object, Object):Object (13 bytes)   inline method (bytecode parsing)
                              @ 9  java.lang.invoke.LambdaForm$DMH/0x00007f2ce0123400.newInvokeSpecial(Object, Object, Object, Object, Object):Object (30 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 7  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                 n                                      @ 25  java.lang.NullPointerException.getExtendedNPEMessage():String (0 bytes)   not inlining it is a non-intrinsic native method
                                          @ 24  som.Vector$$Lambda/0x00007f2ce003fc10.<init>(Object, boolean[], Object[], int[]):void (26 bytes)   relevance-based (relevance=1.000000, probability=0.250000, bonus=1.000000, nodes=17 <= 300.000000)
                 n                                        @ 16  java.lang.Throwable.fillInStackTrace(int):Throwable (0 bytes)   not inlining it is a non-intrinsic native method
              s                                           @ 37  java.lang.Throwable.fillInStackTrace():Throwable (29 bytes)   relevance-based (relevance=4.000000, probability=0.000975, bonus=1.000000, nodes=34 <= 300.000000)
              s                                         @ 24  java.lang.NullPointerException.fillInStackTrace():Throwable (41 bytes)   relevance-based (relevance=1.000000, probability=0.000975, bonus=1.000000, nodes=65 <= 300.000000)
                                                      @ 1  java.lang.Throwable.<init>():void (29 bytes)   relevance-based (relevance=1.000000, probability=0.000975, bonus=1.000000, nodes=73 <= 300.000000)
                                              @ 17  som.Vector.lambda$remove$0(Object, boolean[], Object[], int[], Object):void (28 bytes)   relevance-based (relevance=1.000000, probability=1.980139, bonus=1.000000, nodes=26 <= 300.000000)
                                                    @ 18  java.util.Collections$UnmodifiableMap.<init>(Map):void (22 bytes)   relevance-based (relevance=1.000000, probability=0.001951, bonus=1.000000, nodes=87 <= 300.000000)
                                            @ 20  som.Vector$$Lambda/0x00007f2ce003fc10.apply(Object):void (21 bytes)   relevance-based (relevance=1.000000, probability=1.980139, bonus=1.000000, nodes=28 <= 300.000000)
                                                  @ 19  java.util.Collections.unmodifiableMap(Map):Map (22 bytes)   relevance-based (relevance=1.000000, probability=0.003902, bonus=1.000000, nodes=95 <= 300.000000)
                                          @ 36  som.Vector.forEach(ForEachInterface):void (32 bytes)   relevance-based (relevance=1.000000, probability=0.250000, bonus=1.000000, nodes=41 <= 300.000000)
                                        @ 5  som.Vector.remove(Object):boolean (61 bytes)   relevance-based (relevance=2.000000, probability=0.250000, bonus=1.000000, nodes=73 <= 300.000000)
                                      @ 12  deltablue.Variable.removeConstraint(AbstractConstraint):void (23 bytes)   relevance-based (relevance=1.000000, probability=0.250000, bonus=1.000000, nodes=90 <= 300.000000)
                                    @ 10  deltablue.UnaryConstraint.removeFromGraph():void (21 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=100 <= 300.000000)
                 n                                  @ 16  java.lang.Throwable.fillInStackTrace(int):Throwable (0 bytes)   not inlining it is a non-intrinsic native method
                            @ 4  som.Vector.<init>():void (7 bytes)   inline method (bytecode parsing)
              s                                     @ 24  java.lang.Throwable.fillInStackTrace():Throwable (29 bytes)   relevance-based (relevance=1.000000, probability=0.003902, bonus=1.000000, nodes=34 <= 300.000000)
                              @ 3  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 10  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 14  deltablue.Strength.absoluteWeakest():Strength (4 bytes)   inline method (bytecode parsing)
                                                  @ 2  java.lang.Throwable.<init>(String):void (34 bytes)   relevance-based (relevance=16.000000, probability=0.003902, bonus=1.000000, nodes=45 <= 300.000000)
                            @ 17  deltablue.Variable.setWalkStrength(Strength):void (6 bytes)   inline method (bytecode parsing)
                            @ 22  deltablue.Variable.setStay(boolean):void (6 bytes)   inline method (bytecode parsing)
                                                @ 61  jdk.internal.misc.VM.getSavedProperties():Map (23 bytes)   relevance-based (relevance=1.000800, probability=0.007804, bonus=1.000000, nodes=147 <= 300.000000)
                            @ 48  deltablue.Variable.getConstraints():Vector (5 bytes)   inline accessor method (bytecode parsing)
                            @ 52  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.Planner$$Lambda/0x00007f2ce01f6000.<init>(Vector):void (10 bytes)   inline method (bytecode parsing)
                                              @ 0  jdk.vm.ci.services.Services.getSavedProperties():Map (81 bytes)   relevance-based (relevance=1.000000, probability=0.031214, bonus=1.000000, nodes=201 <= 300.000000)
                            @ 64  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.Planner$$Lambda/0x00007f2ce01f6220.<init>(Vector):void (10 bytes)   inline method (bytecode parsing)
                            @ 76  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object):Object (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.lang.invoke.LambdaForm$MH/0x00007f2ce0000800.invoke(Object):Object (8 bytes)   inline method (bytecode parsing)
                                            @ 4  java.util.Map.get(Object):Object (0 bytes)   not inlining no type profile exists
                                    @ 15  deltablue.Planner.removePropagateFrom(Variable):Vector (86 bytes)   not inlining too large previous low-level graph (low-level-nodes: 793, relevance=2.000000, probability=0.500000, bonus=1.000000, nodes=81)
                            @ 8  deltablue.Planner.lambda$incrementalRemove$0(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                                                  @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.006584, bonus=1.000000, nodes=5)
                                                @ 14  java.lang.String.length():int (11 bytes)   trivial (relevance=2.000000, probability=0.006584, bonus=1.000000, nodes=8)
                                          @ 1  deltablue.Planner.newMark():int (15 bytes)   relevance-based (relevance=1.000000, probability=3.960278, bonus=1.000000, nodes=10 <= 300.000000)
                                                  @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.006584, bonus=1.000000, nodes=5)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                                                @ 18  java.lang.String.length():int (11 bytes)   trivial (relevance=2.000000, probability=0.006584, bonus=1.000000, nodes=5)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f2ce003d750.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                                                  @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.003292, bonus=1.000000, nodes=5)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 30  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000000, probability=0.003292, bonus=1.000000, nodes=5)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 146  java.lang.StringUTF16.regionMatchesCI_Latin1(byte[], int, byte[], int, int):boolean (10 bytes)   inline method (bytecode parsing)
                                          @ 8  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 713, relevance=1.000000, probability=3.960278, bonus=1.000000, nodes=72)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f2ce003d750.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                                                    @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.003292, bonus=1.000000, nodes=5)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                                                  @ 27  java.lang.String.length():int (11 bytes)   trivial (relevance=16.000000, probability=0.003292, bonus=1.000000, nodes=5)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                    @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.003292, bonus=1.000000, nodes=5)
                                                  @ 43  java.lang.String.length():int (11 bytes)   trivial (relevance=16.000000, probability=0.003292, bonus=1.000000, nodes=8)
                                          @ 19  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 713, relevance=1.000000, probability=3.971486, bonus=1.000000, nodes=72)
                                        @ 2  deltablue.Planner.incrementalAdd(AbstractConstraint):void (27 bytes)   relevance-based (relevance=1.000000, probability=3.960278, bonus=1.000000, nodes=28 <= 300.000000)
                                                  @ 70  java.lang.String.coder():byte (15 bytes)   trivial (relevance=4.000000, probability=0.000823, bonus=1.000000, nodes=5)
                                      @ 20  deltablue.Planner$$Lambda/0x00007f2ce01f68f0.apply(Object):void (12 bytes)   relevance-based (relevance=1.000000, probability=3.960278, bonus=1.000000, nodes=37 <= 300.000000)
                                                  @ 78  java.lang.String.coder():byte (15 bytes)   trivial (relevance=2.000000, probability=0.000823, bonus=1.000000, nodes=5)
                                    @ 26  som.Vector.forEach(ForEachInterface):void (32 bytes)   not inlining callee invoke probability is too high (invokeP=15.863529, relevance=2.000000, probability=0.500000, bonus=1.000000, nodes=53)
                                  @ 9  deltablue.Planner.incrementalRemove(AbstractConstraint):void (30 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=121 <= 300.000000)
                            @ 1  som.Vector.capacity():int (6 bytes)   inline method (bytecode parsing)
                            @ 31  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object, Object, Object, Object):Object (13 bytes)   inline method (bytecode parsing)
                              @ 9  java.lang.invoke.LambdaForm$DMH/0x00007f2ce0123400.newInvokeSpecial(Object, Object, Object, Object, Object):Object (30 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                            @ 58  java.lang.Character.toUpperCase(char):char (6 bytes)   inline method (bytecode parsing)
                                @ 7  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.Character.toUpperCase(int):int (9 bytes)   inline method (bytecode parsing)
                            @ 75  java.lang.Character.toLowerCase(char):char (6 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.Character.toLowerCase(int):int (9 bytes)   inline method (bytecode parsing)
                            @ 80  java.lang.Character.toLowerCase(char):char (6 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.Character.toLowerCase(int):int (9 bytes)   inline method (bytecode parsing)
                                        @ 24  som.Vector$$Lambda/0x00007f2ce003fc10.<init>(Object, boolean[], Object[], int[]):void (26 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=17 <= 300.000000)
                                            @ 17  som.Vector.lambda$remove$0(Object, boolean[], Object[], int[], Object):void (28 bytes)   relevance-based (relevance=1.000000, probability=3.960278, bonus=1.000000, nodes=26 <= 300.000000)
                                          @ 20  som.Vector$$Lambda/0x00007f2ce003fc10.apply(Object):void (21 bytes)   relevance-based (relevance=1.000000, probability=3.960278, bonus=1.000000, nodes=28 <= 300.000000)
                                        @ 36  som.Vector.forEach(ForEachInterface):void (32 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=41 <= 300.000000)
                                                    @ 50  java.lang.CharacterDataLatin1.toUpperCase(int):int (67 bytes)   relevance-based (relevance=4.000000, probability=0.000183, bonus=1.000000, nodes=52 <= 300.000000)
                                      @ 5  som.Vector.remove(Object):boolean (61 bytes)   relevance-based (relevance=2.000000, probability=0.500000, bonus=1.000000, nodes=73 <= 300.000000)
                                    @ 12  deltablue.Variable.removeConstraint(AbstractConstraint):void (23 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=90 <= 300.000000)
                                  @ 13  deltablue.UnaryConstraint.removeFromGraph():void (21 bytes)   relevance-based (relevance=4.000000, probability=1.000000, bonus=1.000000, nodes=100 <= 300.000000)
                                                    @ 1  java.lang.CharacterData.of(int):CharacterData (136 bytes)   trivial (relevance=32.000000, probability=0.000183, bonus=1.000000, nodes=8)
                                @ 55  deltablue.AbstractConstraint.destroyConstraint(Planner):void (17 bytes)   relevance-based (relevance=1.000128, probability=1.000000, bonus=1.000000, nodes=224 <= 300.000000)
                                                    @ 5  java.lang.CharacterDataLatin1.toUpperCase(int):int (67 bytes)   relevance-based (relevance=32.000000, probability=0.000183, bonus=1.000000, nodes=52 <= 300.000000)
                                                    @ 1  java.lang.CharacterData.of(int):CharacterData (136 bytes)   trivial (relevance=16.000000, probability=0.000091, bonus=1.000000, nodes=8)
                                                    @ 5  java.lang.CharacterDataLatin1.toLowerCase(int):int (44 bytes)   relevance-based (relevance=16.000000, probability=0.000091, bonus=1.000000, nodes=12 <= 300.000000)
                              @ 225  deltablue.Planner.change(Variable, int):void (59 bytes)   not inlining relevance-based (relevance=1.000144, probability=1.000000, bonus=1.000000, nodes=412 > 300.000000)
                              @ 181  som.Vector.at(int):Object (18 bytes)   relevance-based (relevance=1.000000, probability=59993.615385, bonus=1.000000, nodes=10 <= 300.000000)
                                                    @ 1  java.lang.CharacterData.of(int):CharacterData (136 bytes)   trivial (relevance=16.000000, probability=0.000091, bonus=1.000000, nodes=8)
                                                    @ 5  java.lang.CharacterDataLatin1.toLowerCase(int):int (44 bytes)   relevance-based (relevance=16.000000, probability=0.000091, bonus=1.000000, nodes=12 <= 300.000000)
                              @ 242  som.Vector.at(int):Object (18 bytes)   relevance-based (relevance=1.000000, probability=60009.583333, bonus=1.000000, nodes=10 <= 300.000000)
                                                  @ 131  java.lang.StringLatin1.regionMatchesCI_UTF16(byte[], int, byte[], int, int):boolean (93 bytes)   relevance-based (relevance=1.000000, probability=0.000412, bonus=1.000000, nodes=157 <= 300.000000)
                                                    @ 32  java.lang.CharacterDataLatin1.equalsIgnoreCase(byte, byte):boolean (63 bytes)   relevance-based (relevance=2.000000, probability=0.000274, bonus=1.000000, nodes=42 <= 300.000000)
                                                  @ 98  java.lang.StringLatin1.regionMatchesCI(byte[], int, byte[], int, int):boolean (45 bytes)   relevance-based (relevance=1.000000, probability=0.000412, bonus=1.000000, nodes=64 <= 300.000000)
                                                @ 33  java.lang.String.regionMatches(boolean, int, String, int, int):boolean (150 bytes)   relevance-based (relevance=1.000000, probability=0.003292, bonus=1.000000, nodes=236 <= 300.000000)
                                              @ 3  java.lang.String.equalsIgnoreCase(String):boolean (45 bytes)   relevance-based (relevance=3.377701, probability=0.026337, bonus=1.000000, nodes=253 <= 300.000000)
                                            @ 0  jdk.vm.ci.common.InitTimer.isEnabled():boolean (37 bytes)   not inlining relevance-based (relevance=2.000000, probability=0.062428, bonus=1.000000, nodes=481 > 300.000000)
                            @ 28  java.lang.StringBuilder.<init>():void (7 bytes)   inline method (bytecode parsing)
                            @ 33  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 39  java.lang.StringBuilder.append(Object):StringBuilder (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 42  java.lang.StringBuilder.toString():String (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.String.<init>(StringBuilder):void (7 bytes)   inline method (bytecode parsing)
                            @ 120  java.lang.StringBuilder.<init>():void (7 bytes)   inline method (bytecode parsing)
                            @ 125  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 137  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 141  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 144  java.lang.StringBuilder.toString():String (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.String.<init>(StringBuilder):void (7 bytes)   inline method (bytecode parsing)
                                              @ 7  java.util.concurrent.atomic.AtomicInteger.getAndIncrement():int (12 bytes)   trivial (relevance=2.000000, probability=0.031214, bonus=1.000000, nodes=8)
                                              @ 3  java.lang.AbstractStringBuilder.<init>(int):void (39 bytes)   relevance-based (relevance=1.000000, probability=0.015607, bonus=1.000000, nodes=11 <= 300.000000)
                                              @ 2  java.lang.AbstractStringBuilder.append(String):AbstractStringBuilder (45 bytes)   not inlining too large previous low-level graph (low-level-nodes: 345, relevance=1.000000, probability=0.015607, bonus=1.000000, nodes=21)
                            @ 12  java.lang.StringBuilder.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                            @ 22  java.lang.StringBuilder.<init>():void (7 bytes)   inline method (bytecode parsing)
                            @ 29  java.lang.StringBuilder.append(char):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 66  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 74  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 90  java.lang.StringBuilder.append(char):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 100  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 103  java.lang.StringBuilder.toString():String (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.String.<init>(StringBuilder):void (7 bytes)   inline method (bytecode parsing)
                                                  @ 2  jdk.graal.compiler.core.common.spi.ForeignCallSignature.toString(boolean):String (107 bytes)   not inlining relevance-based (relevance=0.001145, probability=0.000018, bonus=1.000000, nodes=65 > 0.343359)
                                                @ 11  java.lang.String.toString():String (2 bytes)   relevance-based (relevance=1.000000, probability=0.015607, bonus=1.000000, nodes=22 <= 300.000000)
                                              @ 2  java.lang.String.valueOf(Object):String (15 bytes)   trivial (relevance=1.000000, probability=0.015607, bonus=1.000000, nodes=9)
                                              @ 3  java.lang.AbstractStringBuilder.<init>(int):void (39 bytes)   relevance-based (relevance=1.000000, probability=0.015607, bonus=1.000000, nodes=11 <= 300.000000)
                                              @ 2  java.lang.AbstractStringBuilder.append(String):AbstractStringBuilder (45 bytes)   not inlining too large previous low-level graph (low-level-nodes: 345, relevance=1.000000, probability=0.015607, bonus=1.000000, nodes=21)
                                                  @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.015607, bonus=1.000000, nodes=5)
                                                @ 1  java.lang.String.length():int (11 bytes)   trivial (relevance=1.162748, probability=0.015607, bonus=1.000000, nodes=5)
                                                  @ 6  jdk.internal.util.Preconditions.checkFromToIndex(int, int, int, BiFunction):int (24 bytes)   relevance-based (relevance=1.000000, probability=0.015607, bonus=1.000000, nodes=12 <= 300.000000)
                                                @ 8  java.lang.String.checkBoundsBeginEnd(int, int, int):void (11 bytes)   relevance-based (relevance=1.162748, probability=0.015607, bonus=1.000000, nodes=11 <= 300.000000)
                                                @ 28  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=0.013423, bonus=1.000000, nodes=5)
                            @ 20  java.lang.String.<init>(byte[], byte):void (15 bytes)   inline method (bytecode parsing)
                            @ 13  java.util.Arrays.copyOfRangeByte(byte[], int, int):byte[] (33 bytes)   inline method (bytecode parsing)
                              @ 2  java.util.Arrays.checkLength(int, int):void (38 bytes)   inline method (bytecode parsing)
                                                    @ 24  java.lang.Math.min(int, int):int (11 bytes)   trivial (relevance=1.000010, probability=0.010574, bonus=1.000000, nodes=7)
                                                  @ 16  java.util.Arrays.copyOfRange(byte[], int, int):byte[] (25 bytes)   relevance-based (relevance=1.000000, probability=0.013422, bonus=1.000000, nodes=27 <= 300.000000)
                                                @ 41  java.lang.StringLatin1.newString(byte[], int, int):String (24 bytes)   relevance-based (relevance=1.000000, probability=0.013423, bonus=1.000000, nodes=45 <= 300.000000)
                                              @ 134  java.lang.String.substring(int, int):String (58 bytes)   relevance-based (relevance=1.000000, probability=0.015607, bonus=1.000000, nodes=59 <= 300.000000)
                                              @ 2  java.lang.AbstractStringBuilder.append(String):AbstractStringBuilder (45 bytes)   not inlining too large previous low-level graph (low-level-nodes: 345, relevance=1.476011, probability=0.015607, bonus=1.000000, nodes=21)
                                              @ 2  java.lang.AbstractStringBuilder.append(String):AbstractStringBuilder (45 bytes)   not inlining too large previous low-level graph (low-level-nodes: 345, relevance=1.476011, probability=0.015607, bonus=1.000000, nodes=21)
                            @ 5  java.lang.AbstractStringBuilder.getValue():byte[] (5 bytes)   inline accessor method (bytecode parsing)
                            @ 1  java.lang.AbstractStringBuilder.length():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 10  java.lang.StringBuilder.length():int (5 bytes)   trivial (relevance=1.000000, probability=0.015607, bonus=1.000000, nodes=5)
                                                @ 16  java.lang.AbstractStringBuilder.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=0.015607, bonus=1.000000, nodes=9)
                            @ 13  java.util.Arrays.copyOfRangeByte(byte[], int, int):byte[] (33 bytes)   inline method (bytecode parsing)
                              @ 2  java.util.Arrays.checkLength(int, int):void (38 bytes)   inline method (bytecode parsing)
                                                  @ 24  java.lang.Math.min(int, int):int (11 bytes)   trivial (relevance=1.000010, probability=0.012295, bonus=1.000000, nodes=7)
                                                @ 32  java.util.Arrays.copyOfRange(byte[], int, int):byte[] (25 bytes)   relevance-based (relevance=1.000000, probability=0.015607, bonus=1.000000, nodes=33 <= 300.000000)
                                              @ 3  java.lang.String.<init>(AbstractStringBuilder, Void):void (99 bytes)   relevance-based (relevance=1.476011, probability=0.015607, bonus=1.000000, nodes=48 <= 300.000000)
                                                  @ 11  java.lang.String.toString():String (2 bytes)   trivial (relevance=1.000000, probability=0.015607, bonus=1.000000, nodes=4)
                                                @ 11  java.lang.String.valueOf(Object):String (15 bytes)   trivial (relevance=1.000000, probability=0.015607, bonus=1.000000, nodes=4)
                            @ 11  jdk.internal.misc.InternalLock.lock():void (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.util.concurrent.locks.ReentrantLock.lock():void (8 bytes)   inline method (bytecode parsing)
                            @ 23  jdk.internal.misc.InternalLock.unlock():void (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.util.concurrent.locks.ReentrantLock.unlock():void (10 bytes)   inline method (bytecode parsing)
                                @ 5  java.util.concurrent.locks.AbstractQueuedSynchronizer.release(int):boolean (19 bytes)   inline method (bytecode parsing)
                            @ 9  java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(int):void (20 bytes)   inline method (bytecode parsing)
                            @ 7  java.util.concurrent.locks.AbstractQueuedSynchronizer.compareAndSetState(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 15  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                            @ 21  java.util.concurrent.locks.AbstractOwnableSynchronizer.getExclusiveOwnerThread():Thread (5 bytes)   inline accessor method (bytecode parsing)
                            @ 29  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 51  java.util.concurrent.locks.AbstractQueuedSynchronizer.setState(int):void (6 bytes)   inline method (bytecode parsing)
                                                    @ 1  java.util.concurrent.locks.ReentrantLock$NonfairSync.initialTryLock():boolean (58 bytes)   relevance-based (relevance=1.006377, probability=0.007803, bonus=1.000000, nodes=40 <= 300.000000)
                            @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 10  java.util.concurrent.locks.AbstractQueuedSynchronizer.compareAndSetState(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 20  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                                                    @ 2  java.util.concurrent.locks.ReentrantLock$NonfairSync.tryAcquire(int):boolean (27 bytes)   not inlining relevance-based (relevance=0.005005, probability=0.000035, bonus=1.000000, nodes=36 > 1.501641)
                            @ 108  java.util.concurrent.locks.AbstractQueuedSynchronizer.tryAcquireShared(int):int (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.lang.UnsupportedOperationException.<init>():void (5 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.RuntimeException.<init>():void (5 bytes)   inline method (bytecode parsing)
                                  @ 1  java.lang.Exception.<init>():void (5 bytes)   inline method (bytecode parsing)
                            @ 245  java.util.concurrent.locks.AbstractQueuedSynchronizer$ExclusiveNode.<init>():void (5 bytes)   inline method (bytecode parsing)
                              @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer$Node.<init>():void (5 bytes)   inline method (bytecode parsing)
                            @ 290  java.util.concurrent.locks.AbstractQueuedSynchronizer$Node.setPrevRelaxed(AbstractQueuedSynchronizer$Node):void (12 bytes)   inline method (bytecode parsing)
                            @ 393  java.lang.Thread.interrupted():boolean (7 bytes)   inline method (bytecode parsing)
                                                    @ 15  java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer$Node, int, boolean, boolean, boolean, long):int (424 bytes)   not inlining relevance-based (relevance=0.002503, probability=0.000017, bonus=1.000000, nodes=226 > 0.750820)
                                                  @ 4  java.util.concurrent.locks.ReentrantLock$Sync.lock():void (13 bytes)   relevance-based (relevance=1.146588, probability=0.007803, bonus=1.000000, nodes=57 <= 300.000000)
                            @ 16  java.io.BufferedWriter.newLine():void (8 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.System.lineSeparator():String (4 bytes)   inline method (bytecode parsing)
                            @ 30  java.io.OutputStreamWriter.flushBuffer():void (8 bytes)   inline method (bytecode parsing)
                                                    @ 1  java.io.PrintStream.ensureOpen():void (18 bytes)   trivial (relevance=2.000000, probability=0.007803, bonus=1.000000, nodes=7)
                                                        @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.007803, bonus=1.000000, nodes=5)
                                                      @ 4  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000000, probability=0.007803, bonus=1.000000, nodes=8)
                            @ 23  jdk.internal.misc.InternalLock.lock():void (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.util.concurrent.locks.ReentrantLock.lock():void (8 bytes)   inline method (bytecode parsing)
                            @ 35  jdk.internal.misc.InternalLock.unlock():void (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.util.concurrent.locks.ReentrantLock.unlock():void (10 bytes)   inline method (bytecode parsing)
                                @ 5  java.util.concurrent.locks.AbstractQueuedSynchronizer.release(int):boolean (19 bytes)   inline method (bytecode parsing)
                            @ 9  java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(int):void (20 bytes)   inline method (bytecode parsing)
                            @ 7  java.util.concurrent.locks.AbstractQueuedSynchronizer.compareAndSetState(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 15  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                            @ 21  java.util.concurrent.locks.AbstractOwnableSynchronizer.getExclusiveOwnerThread():Thread (5 bytes)   inline accessor method (bytecode parsing)
                            @ 29  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 51  java.util.concurrent.locks.AbstractQueuedSynchronizer.setState(int):void (6 bytes)   inline method (bytecode parsing)
                                                          @ 1  java.util.concurrent.locks.ReentrantLock$NonfairSync.initialTryLock():boolean (58 bytes)   relevance-based (relevance=1.006377, probability=0.007803, bonus=1.000000, nodes=40 <= 300.000000)
                            @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 10  java.util.concurrent.locks.AbstractQueuedSynchronizer.compareAndSetState(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 20  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                                                          @ 2  java.util.concurrent.locks.ReentrantLock$NonfairSync.tryAcquire(int):boolean (27 bytes)   not inlining relevance-based (relevance=0.005005, probability=0.000035, bonus=1.000000, nodes=36 > 1.501641)
                            @ 108  java.util.concurrent.locks.AbstractQueuedSynchronizer.tryAcquireShared(int):int (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.lang.UnsupportedOperationException.<init>():void (5 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.RuntimeException.<init>():void (5 bytes)   inline method (bytecode parsing)
                                  @ 1  java.lang.Exception.<init>():void (5 bytes)   inline method (bytecode parsing)
                            @ 245  java.util.concurrent.locks.AbstractQueuedSynchronizer$ExclusiveNode.<init>():void (5 bytes)   inline method (bytecode parsing)
                              @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer$Node.<init>():void (5 bytes)   inline method (bytecode parsing)
                            @ 290  java.util.concurrent.locks.AbstractQueuedSynchronizer$Node.setPrevRelaxed(AbstractQueuedSynchronizer$Node):void (12 bytes)   inline method (bytecode parsing)
                            @ 393  java.lang.Thread.interrupted():boolean (7 bytes)   inline method (bytecode parsing)
                                                          @ 15  java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer$Node, int, boolean, boolean, boolean, long):int (424 bytes)   not inlining relevance-based (relevance=0.002503, probability=0.000017, bonus=1.000000, nodes=226 > 0.750820)
                                                        @ 4  java.util.concurrent.locks.ReentrantLock$Sync.lock():void (13 bytes)   relevance-based (relevance=1.146588, probability=0.007803, bonus=1.000000, nodes=57 <= 300.000000)
                            @ 39  java.io.BufferedWriter.min(int, int):int (9 bytes)   inline method (bytecode parsing)
                                                          @ 1  java.io.BufferedWriter.ensureOpen():void (18 bytes)   trivial (relevance=1.000000, probability=0.007803, bonus=1.000000, nodes=7)
                                                          @ 6  java.io.BufferedWriter.growIfNeeded(int):void (63 bytes)   relevance-based (relevance=1.000000, probability=0.007803, bonus=1.000000, nodes=15 <= 300.000000)
                            @ 16  java.lang.String.checkBoundsOffCount(int, int, int):int (10 bytes)   inline method (bytecode parsing)
                                                              @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.007803, bonus=1.000000, nodes=5)
                                                            @ 3  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000000, probability=0.007803, bonus=1.000000, nodes=8)
                                                              @ 6  jdk.internal.util.Preconditions.checkFromToIndex(int, int, int, BiFunction):int (24 bytes)   relevance-based (relevance=1.000000, probability=0.007803, bonus=1.000000, nodes=11 <= 300.000000)
                                                            @ 6  java.lang.String.checkBoundsBeginEnd(int, int, int):void (11 bytes)   relevance-based (relevance=1.000000, probability=0.007803, bonus=1.000000, nodes=10 <= 300.000000)
                                                            @ 6  jdk.internal.util.Preconditions.checkFromIndexSize(int, int, int, BiFunction):int (25 bytes)   relevance-based (relevance=1.000000, probability=0.007803, bonus=1.000000, nodes=15 <= 300.000000)
                                                            @ 21  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=0.007803, bonus=1.000000, nodes=9)
                                                            @ 36  java.lang.StringLatin1.getChars(byte[], int, int, char[], int):void (12 bytes)   relevance-based (relevance=1.000000, probability=0.007803, bonus=1.000000, nodes=38 <= 300.000000)
                                                          @ 60  java.lang.String.getChars(int, int, char[], int):void (55 bytes)   relevance-based (relevance=1.000000, probability=0.007803, bonus=1.000000, nodes=58 <= 300.000000)
                                                        @ 30  java.io.BufferedWriter.implWrite(String, int, int):void (100 bytes)   relevance-based (relevance=1.125700, probability=0.007803, bonus=1.000000, nodes=93 <= 300.000000)
                            @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 8  java.util.concurrent.locks.AbstractOwnableSynchronizer.getExclusiveOwnerThread():Thread (5 bytes)   inline accessor method (bytecode parsing)
                            @ 41  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                            @ 46  java.util.concurrent.locks.AbstractQueuedSynchronizer.setState(int):void (6 bytes)   inline method (bytecode parsing)
                                                        @ 2  java.util.concurrent.locks.ReentrantLock$Sync.tryRelease(int):boolean (51 bytes)   relevance-based (relevance=1.125700, probability=0.007803, bonus=1.000000, nodes=37 <= 300.000000)
                            @ 22  java.util.concurrent.locks.AbstractQueuedSynchronizer$Node.getAndUnsetStatus(int):int (14 bytes)   inline method (bytecode parsing)
                              @ 10  jdk.internal.misc.Unsafe.getAndBitwiseAndInt(Object, long, int):int (27 bytes)   inline method (bytecode parsing)
                            @ 5  java.lang.Thread.isVirtual():boolean (5 bytes)   inline method (bytecode parsing)
                                                          @ 30  java.util.concurrent.locks.LockSupport.unpark(Thread):void (26 bytes)   not inlining relevance-based (relevance=0.006051, probability=0.000031, bonus=1.000000, nodes=23 > 1.815411)
                                                        @ 12  java.util.concurrent.locks.AbstractQueuedSynchronizer.signalNext(AbstractQueuedSynchronizer$Node):void (34 bytes)   relevance-based (relevance=0.981783, probability=0.006806, bonus=1.000000, nodes=56 <= 294.534851)
                                                      @ 7  java.io.BufferedWriter.write(String, int, int):void (82 bytes)   relevance-based (relevance=1.000000, probability=0.007803, bonus=1.000000, nodes=262 <= 300.000000)
                                                    @ 9  java.io.Writer.write(String):void (11 bytes)   relevance-based (relevance=2.000000, probability=0.007803, bonus=1.000000, nodes=266 <= 300.000000)
                                                  @ 16  java.io.PrintStream.implWriteln(String):void (48 bytes)   not inlining relevance-based (relevance=1.125700, probability=0.007803, bonus=1.000000, nodes=309 > 300.000000)
                            @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 8  java.util.concurrent.locks.AbstractOwnableSynchronizer.getExclusiveOwnerThread():Thread (5 bytes)   inline accessor method (bytecode parsing)
                            @ 41  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                            @ 46  java.util.concurrent.locks.AbstractQueuedSynchronizer.setState(int):void (6 bytes)   inline method (bytecode parsing)
                                                  @ 2  java.util.concurrent.locks.ReentrantLock$Sync.tryRelease(int):boolean (51 bytes)   relevance-based (relevance=1.125700, probability=0.007803, bonus=1.000000, nodes=37 <= 300.000000)
                            @ 22  java.util.concurrent.locks.AbstractQueuedSynchronizer$Node.getAndUnsetStatus(int):int (14 bytes)   inline method (bytecode parsing)
                              @ 10  jdk.internal.misc.Unsafe.getAndBitwiseAndInt(Object, long, int):int (27 bytes)   inline method (bytecode parsing)
                            @ 5  java.lang.Thread.isVirtual():boolean (5 bytes)   inline method (bytecode parsing)
                                                    @ 30  java.util.concurrent.locks.LockSupport.unpark(Thread):void (26 bytes)   not inlining relevance-based (relevance=0.006051, probability=0.000031, bonus=1.000000, nodes=23 > 1.815411)
                                                  @ 12  java.util.concurrent.locks.AbstractQueuedSynchronizer.signalNext(AbstractQueuedSynchronizer$Node):void (34 bytes)   relevance-based (relevance=0.981783, probability=0.006806, bonus=1.000000, nodes=56 <= 294.534851)
                            @ 16  java.io.BufferedWriter.newLine():void (8 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.System.lineSeparator():String (4 bytes)   inline method (bytecode parsing)
                            @ 30  java.io.OutputStreamWriter.flushBuffer():void (8 bytes)   inline method (bytecode parsing)
                                                    @ 1  java.io.PrintStream.ensureOpen():void (18 bytes)   trivial (relevance=2.000000, probability=0.007803, bonus=1.000000, nodes=7)
                                                        @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.007803, bonus=1.000000, nodes=5)
                                                      @ 4  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000000, probability=0.007803, bonus=1.000000, nodes=8)
                            @ 23  jdk.internal.misc.InternalLock.lock():void (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.util.concurrent.locks.ReentrantLock.lock():void (8 bytes)   inline method (bytecode parsing)
                            @ 35  jdk.internal.misc.InternalLock.unlock():void (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.util.concurrent.locks.ReentrantLock.unlock():void (10 bytes)   inline method (bytecode parsing)
                                @ 5  java.util.concurrent.locks.AbstractQueuedSynchronizer.release(int):boolean (19 bytes)   inline method (bytecode parsing)
                            @ 9  java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(int):void (20 bytes)   inline method (bytecode parsing)
                            @ 7  java.util.concurrent.locks.AbstractQueuedSynchronizer.compareAndSetState(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 15  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                            @ 21  java.util.concurrent.locks.AbstractOwnableSynchronizer.getExclusiveOwnerThread():Thread (5 bytes)   inline accessor method (bytecode parsing)
                            @ 29  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 51  java.util.concurrent.locks.AbstractQueuedSynchronizer.setState(int):void (6 bytes)   inline method (bytecode parsing)
                                                          @ 1  java.util.concurrent.locks.ReentrantLock$NonfairSync.initialTryLock():boolean (58 bytes)   relevance-based (relevance=1.006377, probability=0.007803, bonus=1.000000, nodes=40 <= 300.000000)
                            @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 10  java.util.concurrent.locks.AbstractQueuedSynchronizer.compareAndSetState(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 20  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                                                          @ 2  java.util.concurrent.locks.ReentrantLock$NonfairSync.tryAcquire(int):boolean (27 bytes)   not inlining relevance-based (relevance=0.005005, probability=0.000035, bonus=1.000000, nodes=36 > 1.501641)
                            @ 108  java.util.concurrent.locks.AbstractQueuedSynchronizer.tryAcquireShared(int):int (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.lang.UnsupportedOperationException.<init>():void (5 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.RuntimeException.<init>():void (5 bytes)   inline method (bytecode parsing)
                                  @ 1  java.lang.Exception.<init>():void (5 bytes)   inline method (bytecode parsing)
                            @ 245  java.util.concurrent.locks.AbstractQueuedSynchronizer$ExclusiveNode.<init>():void (5 bytes)   inline method (bytecode parsing)
                              @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer$Node.<init>():void (5 bytes)   inline method (bytecode parsing)
                            @ 290  java.util.concurrent.locks.AbstractQueuedSynchronizer$Node.setPrevRelaxed(AbstractQueuedSynchronizer$Node):void (12 bytes)   inline method (bytecode parsing)
                            @ 393  java.lang.Thread.interrupted():boolean (7 bytes)   inline method (bytecode parsing)
                                                          @ 15  java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer$Node, int, boolean, boolean, boolean, long):int (424 bytes)   not inlining relevance-based (relevance=0.002503, probability=0.000017, bonus=1.000000, nodes=226 > 0.750820)
                                                        @ 4  java.util.concurrent.locks.ReentrantLock$Sync.lock():void (13 bytes)   relevance-based (relevance=1.146588, probability=0.007803, bonus=1.000000, nodes=57 <= 300.000000)
                            @ 39  java.io.BufferedWriter.min(int, int):int (9 bytes)   inline method (bytecode parsing)
                                                          @ 1  java.io.BufferedWriter.ensureOpen():void (18 bytes)   trivial (relevance=1.000000, probability=0.007803, bonus=1.000000, nodes=7)
                                                          @ 6  java.io.BufferedWriter.growIfNeeded(int):void (63 bytes)   relevance-based (relevance=1.000000, probability=0.007803, bonus=1.000000, nodes=15 <= 300.000000)
                            @ 16  java.lang.String.checkBoundsOffCount(int, int, int):int (10 bytes)   inline method (bytecode parsing)
                                                              @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.007803, bonus=1.000000, nodes=5)
                                                            @ 3  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000000, probability=0.007803, bonus=1.000000, nodes=8)
                                                              @ 6  jdk.internal.util.Preconditions.checkFromToIndex(int, int, int, BiFunction):int (24 bytes)   relevance-based (relevance=1.000000, probability=0.007803, bonus=1.000000, nodes=11 <= 300.000000)
                                                            @ 6  java.lang.String.checkBoundsBeginEnd(int, int, int):void (11 bytes)   relevance-based (relevance=1.000000, probability=0.007803, bonus=1.000000, nodes=10 <= 300.000000)
                                                            @ 6  jdk.internal.util.Preconditions.checkFromIndexSize(int, int, int, BiFunction):int (25 bytes)   relevance-based (relevance=1.000000, probability=0.007803, bonus=1.000000, nodes=15 <= 300.000000)
                                                            @ 21  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=0.007803, bonus=1.000000, nodes=9)
                                                            @ 36  java.lang.StringLatin1.getChars(byte[], int, int, char[], int):void (12 bytes)   relevance-based (relevance=1.000000, probability=0.007803, bonus=1.000000, nodes=38 <= 300.000000)
                                                          @ 60  java.lang.String.getChars(int, int, char[], int):void (55 bytes)   relevance-based (relevance=1.000000, probability=0.007803, bonus=1.000000, nodes=58 <= 300.000000)
                                                        @ 30  java.io.BufferedWriter.implWrite(String, int, int):void (100 bytes)   relevance-based (relevance=1.125700, probability=0.007803, bonus=1.000000, nodes=93 <= 300.000000)
                            @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 8  java.util.concurrent.locks.AbstractOwnableSynchronizer.getExclusiveOwnerThread():Thread (5 bytes)   inline accessor method (bytecode parsing)
                            @ 41  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                            @ 46  java.util.concurrent.locks.AbstractQueuedSynchronizer.setState(int):void (6 bytes)   inline method (bytecode parsing)
                                                        @ 2  java.util.concurrent.locks.ReentrantLock$Sync.tryRelease(int):boolean (51 bytes)   relevance-based (relevance=1.125700, probability=0.007803, bonus=1.000000, nodes=37 <= 300.000000)
                            @ 22  java.util.concurrent.locks.AbstractQueuedSynchronizer$Node.getAndUnsetStatus(int):int (14 bytes)   inline method (bytecode parsing)
                              @ 10  jdk.internal.misc.Unsafe.getAndBitwiseAndInt(Object, long, int):int (27 bytes)   inline method (bytecode parsing)
                            @ 5  java.lang.Thread.isVirtual():boolean (5 bytes)   inline method (bytecode parsing)
                                                          @ 30  java.util.concurrent.locks.LockSupport.unpark(Thread):void (26 bytes)   not inlining relevance-based (relevance=0.006051, probability=0.000031, bonus=1.000000, nodes=23 > 1.815411)
                                                        @ 12  java.util.concurrent.locks.AbstractQueuedSynchronizer.signalNext(AbstractQueuedSynchronizer$Node):void (34 bytes)   relevance-based (relevance=0.981783, probability=0.006806, bonus=1.000000, nodes=56 <= 294.534851)
                                                      @ 7  java.io.BufferedWriter.write(String, int, int):void (82 bytes)   relevance-based (relevance=1.000000, probability=0.007803, bonus=1.000000, nodes=262 <= 300.000000)
                                                    @ 9  java.io.Writer.write(String):void (11 bytes)   relevance-based (relevance=2.000000, probability=0.007803, bonus=1.000000, nodes=266 <= 300.000000)
                                                  @ 48  java.io.PrintStream.implWriteln(String):void (48 bytes)   not inlining relevance-based (relevance=1.125700, probability=0.007803, bonus=1.000000, nodes=309 > 300.000000)
                                                @ 14  java.io.PrintStream.writeln(String):void (81 bytes)   relevance-based (relevance=1.000000, probability=0.015607, bonus=1.000000, nodes=189 <= 300.000000)
                                              @ 147  java.io.PrintStream.println(String):void (44 bytes)   relevance-based (relevance=1.475999, probability=0.015607, bonus=1.000000, nodes=190 <= 300.000000)
                                            @ 11  jdk.vm.ci.common.InitTimer.<init>(String):void (151 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.031214, bonus=1.000000, nodes=361 > 300.000000)
                              @ 25  java.lang.Math.min(int, int):int (11 bytes)   trivial (relevance=1.000010, probability=0.999870, bonus=1.000000, nodes=7)
                            @ 21  java.util.ServiceLoader.load(Class, ClassLoader):ServiceLoader (13 bytes)   inline method (bytecode parsing)
                            @ 0  jdk.internal.misc.VM.initLevel():int (4 bytes)   inline method (bytecode parsing)
                            @ 45  java.lang.IllegalStateException.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  java.lang.RuntimeException.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                                @ 2  java.lang.Exception.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                            @ 32  java.lang.ClassLoader.getBuiltinAppClassLoader():ClassLoader (4 bytes)   inline method (bytecode parsing)
                              @ 0  jdk.internal.loader.ClassLoaders.appClassLoader():ClassLoader (4 bytes)   inline method (bytecode parsing)
                                                  @ 0  java.lang.System.allowSecurityManager():boolean (13 bytes)   trivial (relevance=0.333600, probability=0.006243, bonus=1.000000, nodes=8)
                                                @ 75  java.lang.System.getSecurityManager():SecurityManager (12 bytes)   relevance-based (relevance=0.333333, probability=0.006243, bonus=1.000000, nodes=14 <= 100.000000)
                                                    @ 0  java.lang.System.allowSecurityManager():boolean (13 bytes)   trivial (relevance=0.333597, probability=0.003121, bonus=1.000000, nodes=8)
                                                  @ 0  java.lang.System.getSecurityManager():SecurityManager (12 bytes)   relevance-based (relevance=0.333330, probability=0.003121, bonus=1.000000, nodes=14 <= 99.999000)
                            @ 7  java.lang.Class.getClassLoader0():ClassLoader (5 bytes)   inline accessor method (bytecode parsing)
                                                  @ 9  java.lang.ClassLoader.getClassLoader(Class):ClassLoader (11 bytes)   relevance-based (relevance=0.083399, probability=0.001561, bonus=1.000000, nodes=13 <= 25.019757)
                                                @ 89  java.lang.ClassLoader.checkClassLoaderPermission(ClassLoader, Class):void (29 bytes)   not inlining relevance-based (relevance=0.166665, probability=0.003121, bonus=1.000000, nodes=50 > 49.999500)
                 n                                @ 16  java.lang.Throwable.fillInStackTrace(int):Throwable (0 bytes)   not inlining it is a non-intrinsic native method
              s                                   @ 24  java.lang.Throwable.fillInStackTrace():Throwable (29 bytes)   relevance-based (relevance=0.333333, probability=0.006243, bonus=1.000000, nodes=34 <= 100.000000)
                                                @ 2  java.lang.Throwable.<init>(String):void (34 bytes)   relevance-based (relevance=0.333333, probability=0.006243, bonus=1.000000, nodes=45 <= 100.000000)
                                              @ 18  java.lang.ClassLoader.getSystemClassLoader():ClassLoader (96 bytes)   relevance-based (relevance=1.000000, probability=0.031214, bonus=1.000000, nodes=103 <= 300.000000)
                            @ 27  java.util.Objects.requireNonNull(Object):Object (14 bytes)   inline method (bytecode parsing)
                            @ 11  jdk.internal.misc.InternalLock.lock():void (8 bytes)   inline method (bytecode parsing)
                            @ 54  java.lang.Class.getModule():Module (5 bytes)   inline accessor method (bytecode parsing)
                            @ 61  java.lang.Class.getModule():Module (5 bytes)   inline accessor method (bytecode parsing)
                              @ 4  java.util.concurrent.locks.ReentrantLock.lock():void (8 bytes)   inline method (bytecode parsing)
                            @ 67  java.lang.Class.getModule():Module (5 bytes)   inline accessor method (bytecode parsing)
                            @ 91  java.lang.StringBuilder.<init>():void (7 bytes)   inline method (bytecode parsing)
                            @ 25  jdk.internal.misc.InternalLock.unlock():void (8 bytes)   inline method (bytecode parsing)
                            @ 96  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.util.concurrent.locks.ReentrantLock.unlock():void (10 bytes)   inline method (bytecode parsing)
                            @ 101  java.lang.StringBuilder.append(Object):StringBuilder (9 bytes)   inline method (bytecode parsing)
                                @ 5  java.util.concurrent.locks.AbstractQueuedSynchronizer.release(int):boolean (19 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 106  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 109  java.lang.StringBuilder.toString():String (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.String.<init>(StringBuilder):void (7 bytes)   inline method (bytecode parsing)
                            @ 9  java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(int):void (20 bytes)   inline method (bytecode parsing)
                            @ 7  java.util.concurrent.locks.AbstractQueuedSynchronizer.compareAndSetState(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 1  java.util.AbstractList.<init>():void (10 bytes)   inline method (bytecode parsing)
                            @ 15  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                              @ 1  java.util.AbstractCollection.<init>():void (5 bytes)   inline method (bytecode parsing)
                            @ 21  java.util.concurrent.locks.AbstractOwnableSynchronizer.getExclusiveOwnerThread():Thread (5 bytes)   inline accessor method (bytecode parsing)
                            @ 29  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 51  java.util.concurrent.locks.AbstractQueuedSynchronizer.setState(int):void (6 bytes)   inline method (bytecode parsing)
                                                @ 9  java.util.ArrayList.<init>():void (12 bytes)   relevance-based (relevance=8.000000, probability=0.024971, bonus=1.000000, nodes=11 <= 300.000000)
                            @ 1  java.util.AbstractList.<init>():void (10 bytes)   inline method (bytecode parsing)
                              @ 1  java.util.AbstractCollection.<init>():void (5 bytes)   inline method (bytecode parsing)
                                @ 1  java.util.concurrent.locks.ReentrantLock$NonfairSync.initialTryLock():boolean (58 bytes)   relevance-based (relevance=1.006570, probability=1.000000, bonus=1.000000, nodes=40 <= 300.000000)
                                                @ 20  java.util.ArrayList.<init>():void (12 bytes)   relevance-based (relevance=8.000000, probability=0.024971, bonus=1.000000, nodes=11 <= 300.000000)
                            @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 31  jdk.internal.misc.VM.isBooted():boolean (13 bytes)   relevance-based (relevance=8.000000, probability=0.024971, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 10  java.util.concurrent.locks.AbstractQueuedSynchronizer.compareAndSetState(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 11  java.lang.Class.getModule():Module (5 bytes)   inline accessor method (bytecode parsing)
                            @ 20  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                            @ 35  java.lang.StringBuilder.<init>():void (7 bytes)   inline method (bytecode parsing)
                                @ 2  java.util.concurrent.locks.ReentrantLock$NonfairSync.tryAcquire(int):boolean (27 bytes)   not inlining relevance-based (relevance=0.005005, probability=0.004447, bonus=1.000000, nodes=36 > 1.501641)
                            @ 40  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 44  java.lang.StringBuilder.append(Object):StringBuilder (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 47  java.lang.StringBuilder.toString():String (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.String.<init>(StringBuilder):void (7 bytes)   inline method (bytecode parsing)
                            @ 66  java.lang.StringBuilder.<init>():void (7 bytes)   inline method (bytecode parsing)
                            @ 70  java.lang.StringBuilder.append(Object):StringBuilder (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 75  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 108  java.util.concurrent.locks.AbstractQueuedSynchronizer.tryAcquireShared(int):int (8 bytes)   inline method (bytecode parsing)
                            @ 78  java.lang.StringBuilder.toString():String (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.String.<init>(StringBuilder):void (7 bytes)   inline method (bytecode parsing)
                              @ 4  java.lang.UnsupportedOperationException.<init>():void (5 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.RuntimeException.<init>():void (5 bytes)   inline method (bytecode parsing)
                                  @ 1  java.lang.Exception.<init>():void (5 bytes)   inline method (bytecode parsing)
                            @ 245  java.util.concurrent.locks.AbstractQueuedSynchronizer$ExclusiveNode.<init>():void (5 bytes)   inline method (bytecode parsing)
                              @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer$Node.<init>():void (5 bytes)   inline method (bytecode parsing)
                            @ 1  java.util.Objects.requireNonNull(Object):Object (14 bytes)   inline method (bytecode parsing)
                            @ 290  java.util.concurrent.locks.AbstractQueuedSynchronizer$Node.setPrevRelaxed(AbstractQueuedSynchronizer$Node):void (12 bytes)   inline method (bytecode parsing)
                            @ 6  java.util.Objects.requireNonNull(Object):Object (14 bytes)   inline method (bytecode parsing)
                            @ 18  java.lang.Class.getModule():Module (5 bytes)   inline accessor method (bytecode parsing)
                            @ 393  java.lang.Thread.interrupted():boolean (7 bytes)   inline method (bytecode parsing)
                            @ 1  java.lang.Class.getModule():Module (5 bytes)   inline accessor method (bytecode parsing)
                            @ 47  java.lang.String.lastIndexOf(int):int (12 bytes)   inline method (bytecode parsing)
                                @ 15  java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer$Node, int, boolean, boolean, boolean, long):int (424 bytes)   not inlining relevance-based (relevance=0.002503, probability=0.002223, bonus=1.000000, nodes=226 > 0.750820)
                              @ 4  java.util.concurrent.locks.ReentrantLock$Sync.lock():void (13 bytes)   relevance-based (relevance=1.148348, probability=1.000000, bonus=1.000000, nodes=57 <= 300.000000)
                 n                                      @ 14  java.lang.Class.initClassName():String (0 bytes)   not inlining it is a non-intrinsic native method
                                                        @ 40  java.lang.Class.getName():String (18 bytes)   relevance-based (relevance=1.005573, probability=0.007310, bonus=1.000000, nodes=17 <= 300.000000)
                                @ 1  java.io.PrintStream.ensureOpen():void (18 bytes)   trivial (relevance=1.001087, probability=1.000000, bonus=1.000000, nodes=7)
                                                          @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.007310, bonus=1.000000, nodes=5)
                                                        @ 3  java.lang.String.length():int (11 bytes)   trivial (relevance=1.364646, probability=0.007310, bonus=1.000000, nodes=8)
                            @ 11  jdk.internal.misc.InternalLock.lock():void (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.util.concurrent.locks.ReentrantLock.lock():void (8 bytes)   inline method (bytecode parsing)
                                                          @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=0.007310, bonus=1.000000, nodes=9)
                            @ 25  jdk.internal.misc.InternalLock.unlock():void (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.util.concurrent.locks.ReentrantLock.unlock():void (10 bytes)   inline method (bytecode parsing)
                                @ 5  java.util.concurrent.locks.AbstractQueuedSynchronizer.release(int):boolean (19 bytes)   inline method (bytecode parsing)
                                                            @ 1  java.lang.StringLatin1.canEncode(int):boolean (13 bytes)   trivial (relevance=1.000000, probability=0.007310, bonus=1.000000, nodes=5)
                                                            @ 14  java.lang.Math.min(int, int):int (11 bytes)   trivial (relevance=1.000000, probability=0.007310, bonus=1.000000, nodes=7)
                            @ 9  java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(int):void (20 bytes)   inline method (bytecode parsing)
                                                          @ 13  java.lang.StringLatin1.lastIndexOf(byte[], int, int):int (40 bytes)   relevance-based (relevance=1.000000, probability=0.007310, bonus=1.000000, nodes=31 <= 300.000000)
                                  @ 4  java.util.concurrent.locks.ReentrantLock$Sync.lock():void (13 bytes)   not inlining relevance-based (relevance=0.001249, probability=0.000543, bonus=1.000000, nodes=31 > 0.374766)
                                                        @ 8  java.lang.String.lastIndexOf(int, int):int (29 bytes)   relevance-based (relevance=1.364646, probability=0.007310, bonus=1.000000, nodes=40 <= 300.000000)
                                  @ 18  java.io.BufferedOutputStream.implWrite(byte[], int, int):void (71 bytes)   not inlining relevance-based (relevance=0.001249, probability=0.000543, bonus=1.000000, nodes=55 > 0.374766)
                            @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 8  java.util.concurrent.locks.AbstractOwnableSynchronizer.getExclusiveOwnerThread():Thread (5 bytes)   inline accessor method (bytecode parsing)
                            @ 41  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                                                            @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.007270, bonus=1.000000, nodes=5)
                            @ 46  java.util.concurrent.locks.AbstractQueuedSynchronizer.setState(int):void (6 bytes)   inline method (bytecode parsing)
                                                          @ 1  java.lang.String.length():int (11 bytes)   trivial (relevance=1.162748, probability=0.007270, bonus=1.000000, nodes=8)
                                  @ 2  java.util.concurrent.locks.ReentrantLock$Sync.tryRelease(int):boolean (51 bytes)   not inlining relevance-based (relevance=0.001249, probability=0.000543, bonus=1.000000, nodes=37 > 0.374766)
                            @ 22  java.util.concurrent.locks.AbstractQueuedSynchronizer$Node.getAndUnsetStatus(int):int (14 bytes)   inline method (bytecode parsing)
                                                            @ 6  jdk.internal.util.Preconditions.checkFromToIndex(int, int, int, BiFunction):int (24 bytes)   relevance-based (relevance=1.000000, probability=0.007270, bonus=1.000000, nodes=11 <= 300.000000)
                              @ 10  jdk.internal.misc.Unsafe.getAndBitwiseAndInt(Object, long, int):int (27 bytes)   inline method (bytecode parsing)
                                                          @ 8  java.lang.String.checkBoundsBeginEnd(int, int, int):void (11 bytes)   relevance-based (relevance=1.162748, probability=0.007270, bonus=1.000000, nodes=10 <= 300.000000)
                                                          @ 28  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=0.006252, bonus=1.000000, nodes=9)
                                  @ 12  java.util.concurrent.locks.AbstractQueuedSynchronizer.signalNext(AbstractQueuedSynchronizer$Node):void (34 bytes)   not inlining relevance-based (relevance=0.001088, probability=0.000473, bonus=1.000000, nodes=56 > 0.326353)
                            @ 20  java.lang.String.<init>(byte[], byte):void (15 bytes)   inline method (bytecode parsing)
                            @ 13  java.util.Arrays.copyOfRangeByte(byte[], int, int):byte[] (33 bytes)   inline method (bytecode parsing)
                              @ 2  java.util.Arrays.checkLength(int, int):void (38 bytes)   inline method (bytecode parsing)
                                  @ 55  java.io.BufferedOutputStream.implWrite(byte[], int, int):void (71 bytes)   not inlining relevance-based (relevance=0.001249, probability=0.000543, bonus=1.000000, nodes=55 > 0.374766)
                                                              @ 24  java.lang.Math.min(int, int):int (11 bytes)   trivial (relevance=1.000010, probability=0.004925, bonus=1.000000, nodes=7)
                                                            @ 16  java.util.Arrays.copyOfRange(byte[], int, int):byte[] (25 bytes)   relevance-based (relevance=1.000000, probability=0.006252, bonus=1.000000, nodes=33 <= 300.000000)
                                                          @ 41  java.lang.StringLatin1.newString(byte[], int, int):String (24 bytes)   relevance-based (relevance=1.000000, probability=0.006252, bonus=1.000000, nodes=51 <= 300.000000)
                            @ 157  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                                        @ 62  java.lang.String.substring(int, int):String (58 bytes)   relevance-based (relevance=1.357082, probability=0.007270, bonus=1.000000, nodes=72 <= 300.000000)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  jdk.graal.compiler.hotspot.HotSpotTTYStreamProvider$LogStreamOptionKey$DelayedOutputStream$$Lambda/0x00007f2ce02d09d0.<init>(String):void (10 bytes)   inline method (bytecode parsing)
                 n                                    @ 65  java.lang.String.intern():String (0 bytes)   not inlining it is a non-intrinsic native method
                            @ 210  jdk.vm.ci.hotspot.HotSpotJVMCIRuntime.getLogStream():OutputStream (9 bytes)   inline method (bytecode parsing)
                                                      @ 13  java.lang.Class.getPackageName():String (81 bytes)   relevance-based (relevance=1.000000, probability=0.012486, bonus=1.000000, nodes=156 <= 300.000000)
                            @ 1  java.util.Objects.requireNonNull(Object):Object (14 bytes)   inline method (bytecode parsing)
                            @ 6  java.util.Objects.requireNonNull(Object):Object (14 bytes)   inline method (bytecode parsing)
                            @ 36  java.lang.module.ModuleDescriptor.isOpen():boolean (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  java.lang.module.ModuleDescriptor.isAutomatic():boolean (5 bytes)   inline accessor method (bytecode parsing)
                            @ 0  jdk.graal.compiler.options.OptionValues.newOptionMap():EconomicMap (7 bytes)   inline method (bytecode parsing)
                              @ 3  org.graalvm.collections.EconomicMap.create(Equivalence):EconomicMap (6 bytes)   inline method (bytecode parsing)
                                @ 2  org.graalvm.collections.EconomicMapImpl.create(Equivalence, boolean):EconomicMapImpl (13 bytes)   inline method (bytecode parsing)
                                  @ 6  org.graalvm.collections.EconomicMapImpl.<init>(Equivalence, boolean):void (30 bytes)   inline method (bytecode parsing)
                                                          @ 1  java.lang.Module.isNamed():boolean (13 bytes)   trivial (relevance=1.295455, probability=0.012486, bonus=1.000000, nodes=9)
                                  @ 9  org.graalvm.collections.EconomicMapImpl.intercept(EconomicMapImpl):EconomicMapImpl (2 bytes)   inline method (bytecode parsing)
                            @ 6  jdk.vm.ci.common.InitTimer.timer(String):InitTimer (19 bytes)   inline method (bytecode parsing)
                            @ 239  org.graalvm.collections.EconomicMap.create():EconomicMap (7 bytes)   inline method (bytecode parsing)
                              @ 3  org.graalvm.collections.EconomicMap.create(Equivalence):EconomicMap (6 bytes)   inline method (bytecode parsing)
                                @ 2  org.graalvm.collections.EconomicMapImpl.create(Equivalence, boolean):EconomicMapImpl (13 bytes)   inline method (bytecode parsing)
                                  @ 6  org.graalvm.collections.EconomicMapImpl.<init>(Equivalence, boolean):void (30 bytes)   inline method (bytecode parsing)
                                  @ 9  org.graalvm.collections.EconomicMapImpl.intercept(EconomicMapImpl):EconomicMapImpl (2 bytes)   inline method (bytecode parsing)
                            @ 295  java.lang.String.startsWith(String):boolean (7 bytes)   inline method (bytecode parsing)
                            @ 305  java.lang.String.length():int (11 bytes)   inline method (bytecode parsing)
                              @ 6  java.lang.String.coder():byte (15 bytes)   inline method (bytecode parsing)
                            @ 308  java.lang.String.substring(int):String (10 bytes)   inline method (bytecode parsing)
                            @ 311  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.LambdaForm$MH/0x00007f2ce0003800.invoke(Object, Object):Object (25 bytes)   inline method (bytecode parsing)
                                @ 21  java.lang.invoke.DirectMethodHandle$Holder.invokeStatic(Object, Object, Object):Object (15 bytes)   inline method (bytecode parsing)
                                                              @ 2  java.util.HashMap.getNode(Object):HashMap$Node (150 bytes)   not inlining too large previous low-level graph (low-level-nodes: 643, relevance=1.198094, probability=0.012406, bonus=1.000000, nodes=108)
                                  @ 1  java.lang.invoke.DirectMethodHandle.internalMemberName(Object):Object (8 bytes)   inline method (bytecode parsing)
                                                            @ 51  java.util.HashMap.get(Object):Object (19 bytes)   relevance-based (relevance=1.000000, probability=0.012406, bonus=1.000000, nodes=19 <= 300.000000)
                                  @ 11  java.lang.StringConcatHelper.simpleConcat(Object, Object):String (94 bytes)   inline method (bytecode parsing)
                                    @ 1  java.lang.StringConcatHelper.stringOf(Object):String (20 bytes)   inline method (bytecode parsing)
                                      @ 5  java.lang.String.toString():String (2 bytes)   inline method (bytecode parsing)
                                    @ 11  java.lang.String.isEmpty():boolean (14 bytes)   inline method (bytecode parsing)
                                    @ 61  java.lang.StringConcatHelper.newArray(long):byte[] (40 bytes)   inline method (bytecode parsing)
                                                            @ 8  java.util.Set.contains(Object):boolean (0 bytes)   not inlining no type profile exists
                            @ 322  java.lang.String.startsWith(String):boolean (7 bytes)   inline method (bytecode parsing)
                                                            @ 27  java.util.Set.contains(Object):boolean (0 bytes)   not inlining no type profile exists
                                                              @ 38  java.lang.Module.isNamed():boolean (13 bytes)   trivial (relevance=2.000000, probability=0.000775, bonus=1.000000, nodes=9)
                            @ 359  java.lang.String.length():int (11 bytes)   inline method (bytecode parsing)
                                                            @ 48  java.util.Set.contains(Object):boolean (0 bytes)   not inlining no type profile exists
                                                            @ 60  java.lang.Module.allows(Set, Module):boolean (60 bytes)   relevance-based (relevance=1.198094, probability=0.012406, bonus=1.000000, nodes=47 <= 300.000000)
                              @ 6  java.lang.String.coder():byte (15 bytes)   inline method (bytecode parsing)
                            @ 362  java.lang.String.substring(int):String (10 bytes)   inline method (bytecode parsing)
                                                          @ 70  java.lang.Module.isStaticallyExportedOrOpen(String, Module, boolean):boolean (70 bytes)   relevance-based (relevance=1.295455, probability=0.012486, bonus=1.000000, nodes=91 <= 300.000000)
                            @ 7  java.lang.WeakPairMap.get(Object, Object):Object (17 bytes)   inline method (bytecode parsing)
                              @ 10  java.lang.WeakPairMap$Pair.lookup(Object, Object):WeakPairMap$Pair (10 bytes)   inline method (bytecode parsing)
                            @ 8  jdk.vm.ci.services.Services.getSavedProperty(String):String (13 bytes)   inline method (bytecode parsing)
                            @ 11  java.lang.Boolean.parseBoolean(String):boolean (7 bytes)   inline method (bytecode parsing)
                            @ 68  java.lang.WeakPairMap.get(Object, Object):Object (17 bytes)   inline method (bytecode parsing)
                              @ 10  java.lang.WeakPairMap$Pair.lookup(Object, Object):WeakPairMap$Pair (10 bytes)   inline method (bytecode parsing)
                            @ 24  java.util.concurrent.atomic.AtomicInteger.<init>():void (5 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.Number.<init>():void (5 bytes)   inline method (bytecode parsing)
                                              @ 0  jdk.vm.ci.services.Services.checkJVMCIEnabled():void (17 bytes)   trivial (relevance=4.000000, probability=0.031216, bonus=1.000000, nodes=3)
                            @ 13  java.util.concurrent.locks.ReentrantLock.lock():void (8 bytes)   inline method (bytecode parsing)
                            @ 25  java.util.concurrent.locks.ReentrantLock.unlock():void (10 bytes)   inline method (bytecode parsing)
                              @ 5  java.util.concurrent.locks.AbstractQueuedSynchronizer.release(int):boolean (19 bytes)   inline method (bytecode parsing)
                                                @ 0  java.lang.System.allowSecurityManager():boolean (13 bytes)   trivial (relevance=1.000800, probability=0.007804, bonus=1.000000, nodes=8)
                                              @ 42  java.lang.System.getSecurityManager():SecurityManager (12 bytes)   relevance-based (relevance=1.000000, probability=0.007804, bonus=1.000000, nodes=14 <= 300.000000)
                                                              @ 4  java.lang.ref.ReferenceQueue.poll():Reference (40 bytes)   not inlining too large previous low-level graph (low-level-nodes: 445, relevance=0.945918, probability=0.009638, bonus=1.000000, nodes=45)
                                                            @ 1  java.lang.WeakPairMap.expungeStaleAssociations():void (31 bytes)   relevance-based (relevance=0.945918, probability=0.009638, bonus=1.000000, nodes=13 <= 283.775410)
                            @ 12  java.lang.IllegalStateException.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  java.lang.RuntimeException.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                                @ 2  java.lang.Exception.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                            @ 6  java.util.Objects.requireNonNull(Object):Object (14 bytes)   inline method (bytecode parsing)
                            @ 14  java.util.Objects.requireNonNull(Object):Object (14 bytes)   inline method (bytecode parsing)
                                                            @ 6  java.lang.WeakPairMap$Pair$Lookup.<init>(Object, Object):void (21 bytes)   relevance-based (relevance=0.945918, probability=0.009638, bonus=1.000000, nodes=11 <= 283.775410)
                            @ 12  java.lang.NullPointerException.<init>():void (5 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.RuntimeException.<init>():void (5 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.Exception.<init>():void (5 bytes)   inline method (bytecode parsing)
                            @ 4  java.util.concurrent.ConcurrentHashMap.spread(int):int (10 bytes)   inline method (bytecode parsing)
                 n                                    @ 25  java.lang.NullPointerException.getExtendedNPEMessage():String (0 bytes)   not inlining it is a non-intrinsic native method
                 n                                      @ 16  java.lang.Throwable.fillInStackTrace(int):Throwable (0 bytes)   not inlining it is a non-intrinsic native method
                            @ 8  java.lang.WeakPairMap$Pair.hashCode(Object, Object):int (10 bytes)   inline method (bytecode parsing)
              s                                         @ 37  java.lang.Throwable.fillInStackTrace():Throwable (29 bytes)   relevance-based (relevance=4.000000, probability=0.000976, bonus=1.000000, nodes=34 <= 300.000000)
                                                              @ 1  java.lang.WeakPairMap$Pair$Lookup.hashCode():int (12 bytes)   relevance-based (relevance=2.736825, probability=0.009638, bonus=1.000000, nodes=12 <= 300.000000)
              s                                       @ 24  java.lang.NullPointerException.fillInStackTrace():Throwable (41 bytes)   relevance-based (relevance=1.000000, probability=0.000976, bonus=1.000000, nodes=65 <= 300.000000)
                                                    @ 1  java.lang.Throwable.<init>():void (29 bytes)   relevance-based (relevance=1.000000, probability=0.000976, bonus=1.000000, nodes=73 <= 300.000000)
                                                  @ 18  java.util.Collections$UnmodifiableMap.<init>(Map):void (22 bytes)   relevance-based (relevance=1.000000, probability=0.001951, bonus=1.000000, nodes=87 <= 300.000000)
                                                              @ 34  java.util.concurrent.ConcurrentHashMap.tabAt(ConcurrentHashMap$Node[], int):ConcurrentHashMap$Node (22 bytes)   relevance-based (relevance=2.725365, probability=0.009598, bonus=1.000000, nodes=11 <= 300.000000)
                                                @ 19  java.util.Collections.unmodifiableMap(Map):Map (22 bytes)   relevance-based (relevance=1.000000, probability=0.003902, bonus=1.000000, nodes=95 <= 300.000000)
                 n                                @ 16  java.lang.Throwable.fillInStackTrace(int):Throwable (0 bytes)   not inlining it is a non-intrinsic native method
              s                                   @ 24  java.lang.Throwable.fillInStackTrace():Throwable (29 bytes)   relevance-based (relevance=1.000000, probability=0.003902, bonus=1.000000, nodes=34 <= 300.000000)
                                                              @ 93  java.util.concurrent.ConcurrentHashMap$ForwardingNode.find(int, Object):ConcurrentHashMap$Node (129 bytes)   not inlining relevance-based (relevance=0.000112, probability=0.000000, bonus=1.000000, nodes=119 > 0.033707)
                                                @ 2  java.lang.Throwable.<init>(String):void (34 bytes)   relevance-based (relevance=16.000000, probability=0.003902, bonus=1.000000, nodes=45 <= 300.000000)
                                              @ 61  jdk.internal.misc.VM.getSavedProperties():Map (23 bytes)   relevance-based (relevance=1.000800, probability=0.007804, bonus=1.000000, nodes=147 <= 300.000000)
                            @ 1  java.lang.ref.Reference.get():Object (5 bytes)   inline accessor method (bytecode parsing)
                                                                  @ 10  java.lang.WeakPairMap$Pair$Weak.first():Object (5 bytes)   trivial (relevance=0.948504, probability=0.003332, bonus=1.000000, nodes=6)
                                            @ 0  jdk.vm.ci.services.Services.getSavedProperties():Map (81 bytes)   relevance-based (relevance=1.000000, probability=0.031216, bonus=1.000000, nodes=201 <= 300.000000)
                            @ 4  java.lang.ref.Reference.get():Object (5 bytes)   inline accessor method (bytecode parsing)
                                                                  @ 20  java.lang.WeakPairMap$Pair$Weak.second():Object (8 bytes)   relevance-based (relevance=0.946143, probability=0.003324, bonus=1.000000, nodes=10 <= 283.842807)
                                                                @ 19  java.lang.WeakPairMap$Pair.equals(Object, Object, WeakPairMap$Pair):boolean (34 bytes)   relevance-based (relevance=0.946143, probability=0.003332, bonus=1.000000, nodes=31 <= 283.842807)
                                          @ 4  java.util.Map.get(Object):Object (0 bytes)   not inlining no type profile exists
                                                              @ 73  java.lang.WeakPairMap$Pair$Lookup.equals(Object):boolean (31 bytes)   relevance-based (relevance=0.946143, probability=0.003332, bonus=1.000000, nodes=40 <= 283.842807)
                                                @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.006585, bonus=1.000000, nodes=5)
                                              @ 14  java.lang.String.length():int (11 bytes)   trivial (relevance=2.000000, probability=0.006585, bonus=1.000000, nodes=8)
                            @ 1  java.lang.ref.Reference.get():Object (5 bytes)   inline accessor method (bytecode parsing)
                                                                  @ 10  java.lang.WeakPairMap$Pair$Weak.first():Object (5 bytes)   trivial (relevance=0.548310, probability=0.001233, bonus=1.000000, nodes=6)
                                                @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.006585, bonus=1.000000, nodes=5)
                            @ 4  java.lang.ref.Reference.get():Object (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 18  java.lang.String.length():int (11 bytes)   trivial (relevance=2.000000, probability=0.006585, bonus=1.000000, nodes=5)
                                                                  @ 20  java.lang.WeakPairMap$Pair$Weak.second():Object (8 bytes)   relevance-based (relevance=0.546945, probability=0.001230, bonus=1.000000, nodes=10 <= 164.083462)
                                                                @ 19  java.lang.WeakPairMap$Pair.equals(Object, Object, WeakPairMap$Pair):boolean (34 bytes)   relevance-based (relevance=0.546945, probability=0.001233, bonus=1.000000, nodes=31 <= 164.083462)
                                                              @ 149  java.lang.WeakPairMap$Pair$Lookup.equals(Object):boolean (31 bytes)   relevance-based (relevance=0.546945, probability=0.001233, bonus=1.000000, nodes=40 <= 164.083462)
                                                @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.003292, bonus=1.000000, nodes=5)
                                              @ 30  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000000, probability=0.003292, bonus=1.000000, nodes=5)
                                                            @ 13  java.util.concurrent.ConcurrentHashMap.get(Object):Object (162 bytes)   relevance-based (relevance=0.945918, probability=0.009638, bonus=1.000000, nodes=187 <= 283.775410)
                            @ 146  java.lang.StringUTF16.regionMatchesCI_Latin1(byte[], int, byte[], int, int):boolean (10 bytes)   inline method (bytecode parsing)
                                                          @ 82  java.lang.Module.isReflectivelyExportedOrOpen(String, Module, boolean):boolean (182 bytes)   not inlining relevance-based (relevance=0.930811, probability=0.009638, bonus=1.000000, nodes=283 > 279.243370)
                                                        @ 14  java.lang.Module.implIsExportedOrOpen(String, Module, boolean):boolean (92 bytes)   relevance-based (relevance=1.000000, probability=0.012486, bonus=1.000000, nodes=117 <= 300.000000)
                                                  @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.003292, bonus=1.000000, nodes=5)
                                                @ 27  java.lang.String.length():int (11 bytes)   trivial (relevance=16.000000, probability=0.003292, bonus=1.000000, nodes=5)
                                                      @ 20  java.lang.Module.isExported(String, Module):boolean (18 bytes)   relevance-based (relevance=2.330797, probability=0.012486, bonus=1.000000, nodes=125 <= 300.000000)
                                                  @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.003292, bonus=1.000000, nodes=5)
                                                @ 43  java.lang.String.length():int (11 bytes)   trivial (relevance=16.000000, probability=0.003292, bonus=1.000000, nodes=8)
                                                    @ 22  jdk.internal.reflect.Reflection.verifyModuleAccess(Module, Class):boolean (24 bytes)   relevance-based (relevance=8.000000, probability=0.024971, bonus=1.000000, nodes=286 <= 300.000000)
                                                @ 70  java.lang.String.coder():byte (15 bytes)   trivial (relevance=4.000000, probability=0.000823, bonus=1.000000, nodes=5)
                                                @ 78  java.lang.String.coder():byte (15 bytes)   trivial (relevance=2.000000, probability=0.000823, bonus=1.000000, nodes=5)
                            @ 58  java.lang.Character.toUpperCase(char):char (6 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.Character.toUpperCase(int):int (9 bytes)   inline method (bytecode parsing)
                            @ 75  java.lang.Character.toLowerCase(char):char (6 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.Character.toLowerCase(int):int (9 bytes)   inline method (bytecode parsing)
                            @ 80  java.lang.Character.toLowerCase(char):char (6 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.Character.toLowerCase(int):int (9 bytes)   inline method (bytecode parsing)
                                                  @ 24  jdk.internal.reflect.Reflection.verifyMemberAccess(Class, Class, Class, int):boolean (200 bytes)   not inlining relevance-based (relevance=2.000000, probability=0.024971, bonus=1.000000, nodes=394 > 300.000000)
                                                  @ 3  java.lang.AbstractStringBuilder.<init>(int):void (39 bytes)   relevance-based (relevance=1.000000, probability=0.012486, bonus=1.000000, nodes=11 <= 300.000000)
                                                  @ 2  java.lang.AbstractStringBuilder.append(String):AbstractStringBuilder (45 bytes)   not inlining too large previous low-level graph (low-level-nodes: 345, relevance=1.000000, probability=0.012486, bonus=1.000000, nodes=21)
                                                  @ 50  java.lang.CharacterDataLatin1.toUpperCase(int):int (67 bytes)   relevance-based (relevance=4.000000, probability=0.000183, bonus=1.000000, nodes=52 <= 300.000000)
                            @ 11  java.lang.StringBuilder.<init>():void (7 bytes)   inline method (bytecode parsing)
                            @ 16  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 23  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 26  java.lang.StringBuilder.toString():String (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.String.<init>(StringBuilder):void (7 bytes)   inline method (bytecode parsing)
                                                  @ 1  java.lang.CharacterData.of(int):CharacterData (136 bytes)   trivial (relevance=32.000000, probability=0.000183, bonus=1.000000, nodes=8)
                            @ 34  java.lang.Integer.toHexString(int):String (6 bytes)   inline method (bytecode parsing)
                            @ 42  java.lang.StringBuilder.<init>():void (7 bytes)   inline method (bytecode parsing)
                            @ 48  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 52  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 55  java.lang.StringBuilder.toString():String (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.String.<init>(StringBuilder):void (7 bytes)   inline method (bytecode parsing)
                                                  @ 5  java.lang.CharacterDataLatin1.toUpperCase(int):int (67 bytes)   relevance-based (relevance=32.000000, probability=0.000183, bonus=1.000000, nodes=52 <= 300.000000)
                                                      @ 1  java.lang.Module.isNamed():boolean (13 bytes)   trivial (relevance=2.000000, probability=0.012486, bonus=1.000000, nodes=9)
                                                  @ 1  java.lang.CharacterData.of(int):CharacterData (136 bytes)   trivial (relevance=16.000000, probability=0.000091, bonus=1.000000, nodes=8)
                                                      @ 3  java.lang.AbstractStringBuilder.<init>(int):void (39 bytes)   relevance-based (relevance=1.000000, probability=0.006243, bonus=1.000000, nodes=11 <= 300.000000)
                                                  @ 5  java.lang.CharacterDataLatin1.toLowerCase(int):int (44 bytes)   relevance-based (relevance=16.000000, probability=0.000091, bonus=1.000000, nodes=12 <= 300.000000)
                                                      @ 2  java.lang.AbstractStringBuilder.append(String):AbstractStringBuilder (45 bytes)   not inlining too large previous low-level graph (low-level-nodes: 345, relevance=1.000000, probability=0.006243, bonus=1.000000, nodes=21)
                                                      @ 2  java.lang.AbstractStringBuilder.append(String):AbstractStringBuilder (45 bytes)   not inlining too large previous low-level graph (low-level-nodes: 345, relevance=1.000000, probability=0.006243, bonus=1.000000, nodes=23)
                                                  @ 1  java.lang.CharacterData.of(int):CharacterData (136 bytes)   trivial (relevance=16.000000, probability=0.000091, bonus=1.000000, nodes=8)
                            @ 5  java.lang.AbstractStringBuilder.getValue():byte[] (5 bytes)   inline accessor method (bytecode parsing)
                                                  @ 5  java.lang.CharacterDataLatin1.toLowerCase(int):int (44 bytes)   relevance-based (relevance=16.000000, probability=0.000091, bonus=1.000000, nodes=12 <= 300.000000)
                            @ 1  java.lang.AbstractStringBuilder.length():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 131  java.lang.StringLatin1.regionMatchesCI_UTF16(byte[], int, byte[], int, int):boolean (93 bytes)   relevance-based (relevance=1.000000, probability=0.000412, bonus=1.000000, nodes=157 <= 300.000000)
                                                        @ 10  java.lang.StringBuilder.length():int (5 bytes)   trivial (relevance=1.000000, probability=0.006243, bonus=1.000000, nodes=5)
                                                        @ 16  java.lang.AbstractStringBuilder.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=0.006243, bonus=1.000000, nodes=9)
                            @ 13  java.util.Arrays.copyOfRangeByte(byte[], int, int):byte[] (33 bytes)   inline method (bytecode parsing)
                              @ 2  java.util.Arrays.checkLength(int, int):void (38 bytes)   inline method (bytecode parsing)
                                                          @ 24  java.lang.Math.min(int, int):int (11 bytes)   trivial (relevance=1.000010, probability=0.004918, bonus=1.000000, nodes=7)
                                                        @ 32  java.util.Arrays.copyOfRange(byte[], int, int):byte[] (25 bytes)   relevance-based (relevance=1.000000, probability=0.006243, bonus=1.000000, nodes=33 <= 300.000000)
                                                  @ 32  java.lang.CharacterDataLatin1.equalsIgnoreCase(byte, byte):boolean (63 bytes)   relevance-based (relevance=2.000000, probability=0.000274, bonus=1.000000, nodes=42 <= 300.000000)
                                                      @ 3  java.lang.String.<init>(AbstractStringBuilder, Void):void (99 bytes)   relevance-based (relevance=1.000000, probability=0.006243, bonus=1.000000, nodes=48 <= 300.000000)
                                                @ 98  java.lang.StringLatin1.regionMatchesCI(byte[], int, byte[], int, int):boolean (45 bytes)   relevance-based (relevance=1.000000, probability=0.000412, bonus=1.000000, nodes=64 <= 300.000000)
                            @ 16  java.lang.Math.max(int, int):int (11 bytes)   inline method (bytecode parsing)
                                              @ 33  java.lang.String.regionMatches(boolean, int, String, int, int):boolean (150 bytes)   relevance-based (relevance=1.000000, probability=0.003292, bonus=1.000000, nodes=236 <= 300.000000)
                            @ 46  java.lang.String.<init>(byte[], byte):void (15 bytes)   inline method (bytecode parsing)
                                                        @ 36  java.lang.Integer.formatUnsignedInt(int, int, byte[], int):void (40 bytes)   relevance-based (relevance=1.000000, probability=0.006243, bonus=1.000000, nodes=30 <= 300.000000)
                                            @ 3  java.lang.String.equalsIgnoreCase(String):boolean (45 bytes)   relevance-based (relevance=3.377699, probability=0.026339, bonus=1.000000, nodes=253 <= 300.000000)
                                                      @ 2  java.lang.Integer.toUnsignedString0(int, int):String (76 bytes)   relevance-based (relevance=1.269387, probability=0.006243, bonus=1.000000, nodes=46 <= 300.000000)
                                                      @ 3  java.lang.AbstractStringBuilder.<init>(int):void (39 bytes)   relevance-based (relevance=1.269387, probability=0.006243, bonus=1.000000, nodes=11 <= 300.000000)
                                                      @ 2  java.lang.AbstractStringBuilder.append(String):AbstractStringBuilder (45 bytes)   not inlining too large previous low-level graph (low-level-nodes: 345, relevance=1.269387, probability=0.006243, bonus=1.000000, nodes=21)
                                          @ 0  jdk.vm.ci.common.InitTimer.isEnabled():boolean (37 bytes)   not inlining relevance-based (relevance=2.000000, probability=0.062432, bonus=1.000000, nodes=481 > 300.000000)
                                                      @ 2  java.lang.AbstractStringBuilder.append(String):AbstractStringBuilder (45 bytes)   not inlining too large previous low-level graph (low-level-nodes: 345, relevance=1.269387, probability=0.006243, bonus=1.000000, nodes=21)
                            @ 5  java.lang.AbstractStringBuilder.getValue():byte[] (5 bytes)   inline accessor method (bytecode parsing)
                            @ 28  java.lang.StringBuilder.<init>():void (7 bytes)   inline method (bytecode parsing)
                            @ 33  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 39  java.lang.StringBuilder.append(Object):StringBuilder (9 bytes)   inline method (bytecode parsing)
                            @ 1  java.lang.AbstractStringBuilder.length():int (5 bytes)   inline accessor method (bytecode parsing)
                              @ 5  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                                                        @ 10  java.lang.StringBuilder.length():int (5 bytes)   trivial (relevance=1.000000, probability=0.006243, bonus=1.000000, nodes=5)
                            @ 42  java.lang.StringBuilder.toString():String (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.String.<init>(StringBuilder):void (7 bytes)   inline method (bytecode parsing)
                                                        @ 16  java.lang.AbstractStringBuilder.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=0.006243, bonus=1.000000, nodes=9)
                            @ 120  java.lang.StringBuilder.<init>():void (7 bytes)   inline method (bytecode parsing)
                            @ 125  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 137  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 13  java.util.Arrays.copyOfRangeByte(byte[], int, int):byte[] (33 bytes)   inline method (bytecode parsing)
                            @ 141  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                              @ 2  java.util.Arrays.checkLength(int, int):void (38 bytes)   inline method (bytecode parsing)
                            @ 144  java.lang.StringBuilder.toString():String (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.String.<init>(StringBuilder):void (7 bytes)   inline method (bytecode parsing)
                                                          @ 24  java.lang.Math.min(int, int):int (11 bytes)   trivial (relevance=1.000010, probability=0.004918, bonus=1.000000, nodes=7)
                                            @ 7  java.util.concurrent.atomic.AtomicInteger.getAndIncrement():int (12 bytes)   trivial (relevance=2.000000, probability=0.031216, bonus=1.000000, nodes=8)
                                                        @ 32  java.util.Arrays.copyOfRange(byte[], int, int):byte[] (25 bytes)   relevance-based (relevance=1.000000, probability=0.006243, bonus=1.000000, nodes=33 <= 300.000000)
                                                      @ 3  java.lang.String.<init>(AbstractStringBuilder, Void):void (99 bytes)   relevance-based (relevance=1.269387, probability=0.006243, bonus=1.000000, nodes=48 <= 300.000000)
                                            @ 3  java.lang.AbstractStringBuilder.<init>(int):void (39 bytes)   relevance-based (relevance=1.000000, probability=0.015608, bonus=1.000000, nodes=11 <= 300.000000)
                                                    @ 11  java.lang.Module.toString():String (59 bytes)   relevance-based (relevance=1.000000, probability=0.012486, bonus=1.000000, nodes=184 <= 300.000000)
                                            @ 2  java.lang.AbstractStringBuilder.append(String):AbstractStringBuilder (45 bytes)   not inlining too large previous low-level graph (low-level-nodes: 345, relevance=1.000000, probability=0.015608, bonus=1.000000, nodes=21)
                            @ 12  java.lang.StringBuilder.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                                                  @ 2  java.lang.String.valueOf(Object):String (15 bytes)   relevance-based (relevance=1.000000, probability=0.012486, bonus=1.000000, nodes=193 <= 300.000000)
                            @ 22  java.lang.StringBuilder.<init>():void (7 bytes)   inline method (bytecode parsing)
                            @ 29  java.lang.StringBuilder.append(char):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 66  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 74  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 90  java.lang.StringBuilder.append(char):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 100  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 103  java.lang.StringBuilder.toString():String (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.String.<init>(StringBuilder):void (7 bytes)   inline method (bytecode parsing)
                                                @ 2  jdk.graal.compiler.core.common.spi.ForeignCallSignature.toString(boolean):String (107 bytes)   not inlining relevance-based (relevance=0.001139, probability=0.000018, bonus=1.000000, nodes=65 > 0.341729)
                                              @ 11  java.lang.String.toString():String (2 bytes)   relevance-based (relevance=1.000000, probability=0.015608, bonus=1.000000, nodes=22 <= 300.000000)
                                                  @ 2  java.lang.AbstractStringBuilder.append(String):AbstractStringBuilder (45 bytes)   not inlining too large previous low-level graph (low-level-nodes: 345, relevance=2.538754, probability=0.012486, bonus=1.000000, nodes=21)
                            @ 5  java.lang.AbstractStringBuilder.getValue():byte[] (5 bytes)   inline accessor method (bytecode parsing)
                                            @ 2  java.lang.String.valueOf(Object):String (15 bytes)   trivial (relevance=1.000000, probability=0.015608, bonus=1.000000, nodes=9)
                            @ 1  java.lang.AbstractStringBuilder.length():int (5 bytes)   inline accessor method (bytecode parsing)
                                            @ 3  java.lang.AbstractStringBuilder.<init>(int):void (39 bytes)   relevance-based (relevance=1.000000, probability=0.015608, bonus=1.000000, nodes=11 <= 300.000000)
                                                    @ 10  java.lang.StringBuilder.length():int (5 bytes)   trivial (relevance=1.000000, probability=0.012486, bonus=1.000000, nodes=5)
                                                    @ 16  java.lang.AbstractStringBuilder.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=0.012486, bonus=1.000000, nodes=9)
                                            @ 2  java.lang.AbstractStringBuilder.append(String):AbstractStringBuilder (45 bytes)   not inlining too large previous low-level graph (low-level-nodes: 345, relevance=1.000000, probability=0.015608, bonus=1.000000, nodes=21)
                            @ 13  java.util.Arrays.copyOfRangeByte(byte[], int, int):byte[] (33 bytes)   inline method (bytecode parsing)
                              @ 2  java.util.Arrays.checkLength(int, int):void (38 bytes)   inline method (bytecode parsing)
                                                @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.015608, bonus=1.000000, nodes=5)
                                              @ 1  java.lang.String.length():int (11 bytes)   trivial (relevance=1.162748, probability=0.015608, bonus=1.000000, nodes=5)
                                                      @ 24  java.lang.Math.min(int, int):int (11 bytes)   trivial (relevance=1.000010, probability=0.009836, bonus=1.000000, nodes=7)
                                                    @ 32  java.util.Arrays.copyOfRange(byte[], int, int):byte[] (25 bytes)   relevance-based (relevance=1.000000, probability=0.012486, bonus=1.000000, nodes=33 <= 300.000000)
                                                @ 6  jdk.internal.util.Preconditions.checkFromToIndex(int, int, int, BiFunction):int (24 bytes)   relevance-based (relevance=1.000000, probability=0.015608, bonus=1.000000, nodes=12 <= 300.000000)
                                                  @ 3  java.lang.String.<init>(AbstractStringBuilder, Void):void (99 bytes)   relevance-based (relevance=2.538754, probability=0.012486, bonus=1.000000, nodes=48 <= 300.000000)
                                              @ 8  java.lang.String.checkBoundsBeginEnd(int, int, int):void (11 bytes)   relevance-based (relevance=1.162748, probability=0.015608, bonus=1.000000, nodes=11 <= 300.000000)
                                              @ 28  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=0.013423, bonus=1.000000, nodes=5)
                                                @ 39  java.util.ServiceLoader.checkCaller(Class, Class):void (85 bytes)   not inlining relevance-based (relevance=4.000000, probability=0.024971, bonus=1.000000, nodes=314 > 300.000000)
                            @ 20  java.lang.String.<init>(byte[], byte):void (15 bytes)   inline method (bytecode parsing)
                            @ 0  jdk.internal.misc.VM.initLevel():int (4 bytes)   inline method (bytecode parsing)
                            @ 13  java.util.Arrays.copyOfRangeByte(byte[], int, int):byte[] (33 bytes)   inline method (bytecode parsing)
                              @ 2  java.util.Arrays.checkLength(int, int):void (38 bytes)   inline method (bytecode parsing)
                            @ 45  java.lang.IllegalStateException.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  java.lang.RuntimeException.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                                @ 2  java.lang.Exception.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                            @ 32  java.lang.ClassLoader.getBuiltinAppClassLoader():ClassLoader (4 bytes)   inline method (bytecode parsing)
                              @ 0  jdk.internal.loader.ClassLoaders.appClassLoader():ClassLoader (4 bytes)   inline method (bytecode parsing)
                                                  @ 24  java.lang.Math.min(int, int):int (11 bytes)   trivial (relevance=1.000010, probability=0.010575, bonus=1.000000, nodes=7)
                                                @ 16  java.util.Arrays.copyOfRange(byte[], int, int):byte[] (25 bytes)   relevance-based (relevance=1.000000, probability=0.013423, bonus=1.000000, nodes=27 <= 300.000000)
                                                    @ 0  java.lang.System.allowSecurityManager():boolean (13 bytes)   trivial (relevance=0.333600, probability=0.001249, bonus=1.000000, nodes=8)
                                              @ 41  java.lang.StringLatin1.newString(byte[], int, int):String (24 bytes)   relevance-based (relevance=1.000000, probability=0.013423, bonus=1.000000, nodes=45 <= 300.000000)
                                                  @ 75  java.lang.System.getSecurityManager():SecurityManager (12 bytes)   relevance-based (relevance=0.333333, probability=0.001249, bonus=1.000000, nodes=14 <= 100.000000)
                                            @ 134  java.lang.String.substring(int, int):String (58 bytes)   relevance-based (relevance=1.000000, probability=0.015608, bonus=1.000000, nodes=59 <= 300.000000)
                                                      @ 0  java.lang.System.allowSecurityManager():boolean (13 bytes)   trivial (relevance=0.333597, probability=0.000624, bonus=1.000000, nodes=8)
                                            @ 2  java.lang.AbstractStringBuilder.append(String):AbstractStringBuilder (45 bytes)   not inlining too large previous low-level graph (low-level-nodes: 345, relevance=1.476011, probability=0.015608, bonus=1.000000, nodes=21)
                                                    @ 0  java.lang.System.getSecurityManager():SecurityManager (12 bytes)   relevance-based (relevance=0.333330, probability=0.000624, bonus=1.000000, nodes=14 <= 99.999000)
                                            @ 2  java.lang.AbstractStringBuilder.append(String):AbstractStringBuilder (45 bytes)   not inlining too large previous low-level graph (low-level-nodes: 345, relevance=1.476011, probability=0.015608, bonus=1.000000, nodes=21)
                            @ 7  java.lang.Class.getClassLoader0():ClassLoader (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  java.lang.AbstractStringBuilder.getValue():byte[] (5 bytes)   inline accessor method (bytecode parsing)
                                                    @ 9  java.lang.ClassLoader.getClassLoader(Class):ClassLoader (11 bytes)   relevance-based (relevance=0.083399, probability=0.000312, bonus=1.000000, nodes=13 <= 25.019757)
                                                  @ 89  java.lang.ClassLoader.checkClassLoaderPermission(ClassLoader, Class):void (29 bytes)   not inlining relevance-based (relevance=0.166665, probability=0.000624, bonus=1.000000, nodes=50 > 49.999500)
                            @ 1  java.lang.AbstractStringBuilder.length():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 10  java.lang.StringBuilder.length():int (5 bytes)   trivial (relevance=1.000000, probability=0.015608, bonus=1.000000, nodes=5)
                                              @ 16  java.lang.AbstractStringBuilder.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=0.015608, bonus=1.000000, nodes=9)
                 n                                  @ 16  java.lang.Throwable.fillInStackTrace(int):Throwable (0 bytes)   not inlining it is a non-intrinsic native method
              s                                     @ 24  java.lang.Throwable.fillInStackTrace():Throwable (29 bytes)   relevance-based (relevance=0.333333, probability=0.001249, bonus=1.000000, nodes=34 <= 100.000000)
                            @ 13  java.util.Arrays.copyOfRangeByte(byte[], int, int):byte[] (33 bytes)   inline method (bytecode parsing)
                              @ 2  java.util.Arrays.checkLength(int, int):void (38 bytes)   inline method (bytecode parsing)
                                                  @ 2  java.lang.Throwable.<init>(String):void (34 bytes)   relevance-based (relevance=0.333333, probability=0.001249, bonus=1.000000, nodes=45 <= 100.000000)
                                                @ 46  java.lang.ClassLoader.getSystemClassLoader():ClassLoader (96 bytes)   relevance-based (relevance=1.000000, probability=0.006243, bonus=1.000000, nodes=103 <= 300.000000)
                                                @ 24  java.lang.Math.min(int, int):int (11 bytes)   trivial (relevance=1.000010, probability=0.012296, bonus=1.000000, nodes=7)
                                              @ 32  java.util.Arrays.copyOfRange(byte[], int, int):byte[] (25 bytes)   relevance-based (relevance=1.000000, probability=0.015608, bonus=1.000000, nodes=33 <= 300.000000)
                                            @ 3  java.lang.String.<init>(AbstractStringBuilder, Void):void (99 bytes)   relevance-based (relevance=1.476011, probability=0.015608, bonus=1.000000, nodes=48 <= 300.000000)
                 n                              @ 14  java.lang.Class.initClassName():String (0 bytes)   not inlining it is a non-intrinsic native method
                                                @ 124  java.lang.Class.getName():String (18 bytes)   relevance-based (relevance=4.666667, probability=0.017480, bonus=1.000000, nodes=17 <= 300.000000)
                                                @ 11  java.lang.String.toString():String (2 bytes)   trivial (relevance=1.000000, probability=0.015608, bonus=1.000000, nodes=4)
                                              @ 11  java.lang.String.valueOf(Object):String (15 bytes)   trivial (relevance=1.000000, probability=0.015608, bonus=1.000000, nodes=4)
                                                  @ 0  java.lang.System.allowSecurityManager():boolean (13 bytes)   trivial (relevance=1.000800, probability=0.017480, bonus=1.000000, nodes=8)
                                                @ 141  java.lang.System.getSecurityManager():SecurityManager (12 bytes)   relevance-based (relevance=4.666667, probability=0.017480, bonus=1.000000, nodes=14 <= 300.000000)
                            @ 11  jdk.internal.misc.InternalLock.lock():void (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.util.concurrent.locks.ReentrantLock.lock():void (8 bytes)   inline method (bytecode parsing)
                            @ 14  java.security.AccessControlContext.<init>(ProtectionDomain[], boolean):void (30 bytes)   inline method (bytecode parsing)
                            @ 23  jdk.internal.misc.InternalLock.unlock():void (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.util.concurrent.locks.ReentrantLock.unlock():void (10 bytes)   inline method (bytecode parsing)
                                @ 5  java.util.concurrent.locks.AbstractQueuedSynchronizer.release(int):boolean (19 bytes)   inline method (bytecode parsing)
                 n                              @ 0  java.security.AccessController.getStackAccessControlContext():AccessControlContext (0 bytes)   not inlining it is a non-intrinsic native method
                            @ 9  java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(int):void (20 bytes)   inline method (bytecode parsing)
                            @ 7  java.util.concurrent.locks.AbstractQueuedSynchronizer.compareAndSetState(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 15  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                            @ 21  java.util.concurrent.locks.AbstractOwnableSynchronizer.getExclusiveOwnerThread():Thread (5 bytes)   inline accessor method (bytecode parsing)
                            @ 29  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 51  java.util.concurrent.locks.AbstractQueuedSynchronizer.setState(int):void (6 bytes)   inline method (bytecode parsing)
                                                  @ 1  java.util.concurrent.locks.ReentrantLock$NonfairSync.initialTryLock():boolean (58 bytes)   relevance-based (relevance=1.006570, probability=0.007804, bonus=1.000000, nodes=40 <= 300.000000)
                 n                                @ 44  java.security.AccessController.getInheritedAccessControlContext():AccessControlContext (0 bytes)   not inlining it is a non-intrinsic native method
                                                    @ 141  java.security.AccessControlContext.getDebug():Debug (32 bytes)   relevance-based (relevance=2.000000, probability=0.001092, bonus=1.000000, nodes=11 <= 300.000000)
                            @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 10  java.util.concurrent.locks.AbstractQueuedSynchronizer.compareAndSetState(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 7  java.lang.StringBuilder.<init>():void (7 bytes)   inline method (bytecode parsing)
                            @ 20  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                            @ 14  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 19  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 23  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                                                  @ 2  java.util.concurrent.locks.ReentrantLock$NonfairSync.tryAcquire(int):boolean (27 bytes)   not inlining relevance-based (relevance=0.005005, probability=0.000035, bonus=1.000000, nodes=36 > 1.501641)
                            @ 26  java.lang.StringBuilder.toString():String (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.String.<init>(StringBuilder):void (7 bytes)   inline method (bytecode parsing)
                                                      @ 3  java.lang.AbstractStringBuilder.<init>(int):void (39 bytes)   relevance-based (relevance=1.000000, probability=0.000546, bonus=1.000000, nodes=11 <= 300.000000)
                            @ 108  java.util.concurrent.locks.AbstractQueuedSynchronizer.tryAcquireShared(int):int (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.lang.UnsupportedOperationException.<init>():void (5 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.RuntimeException.<init>():void (5 bytes)   inline method (bytecode parsing)
                                  @ 1  java.lang.Exception.<init>():void (5 bytes)   inline method (bytecode parsing)
                                                      @ 2  java.lang.AbstractStringBuilder.append(String):AbstractStringBuilder (45 bytes)   not inlining too large previous low-level graph (low-level-nodes: 345, relevance=1.000000, probability=0.000546, bonus=1.000000, nodes=23)
                            @ 245  java.util.concurrent.locks.AbstractQueuedSynchronizer$ExclusiveNode.<init>():void (5 bytes)   inline method (bytecode parsing)
                              @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer$Node.<init>():void (5 bytes)   inline method (bytecode parsing)
                            @ 290  java.util.concurrent.locks.AbstractQueuedSynchronizer$Node.setPrevRelaxed(AbstractQueuedSynchronizer$Node):void (12 bytes)   inline method (bytecode parsing)
                                                      @ 2  java.lang.AbstractStringBuilder.append(String):AbstractStringBuilder (45 bytes)   not inlining too large previous low-level graph (low-level-nodes: 345, relevance=1.000000, probability=0.000546, bonus=1.000000, nodes=21)
                                                      @ 2  java.lang.AbstractStringBuilder.append(String):AbstractStringBuilder (45 bytes)   not inlining too large previous low-level graph (low-level-nodes: 345, relevance=1.000000, probability=0.000546, bonus=1.000000, nodes=21)
                            @ 393  java.lang.Thread.interrupted():boolean (7 bytes)   inline method (bytecode parsing)
                            @ 5  java.lang.AbstractStringBuilder.getValue():byte[] (5 bytes)   inline accessor method (bytecode parsing)
                            @ 1  java.lang.AbstractStringBuilder.length():int (5 bytes)   inline accessor method (bytecode parsing)
                                                        @ 10  java.lang.StringBuilder.length():int (5 bytes)   trivial (relevance=1.000000, probability=0.000546, bonus=1.000000, nodes=5)
                                                        @ 16  java.lang.AbstractStringBuilder.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=0.000546, bonus=1.000000, nodes=9)
                            @ 13  java.util.Arrays.copyOfRangeByte(byte[], int, int):byte[] (33 bytes)   inline method (bytecode parsing)
                              @ 2  java.util.Arrays.checkLength(int, int):void (38 bytes)   inline method (bytecode parsing)
                                                          @ 24  java.lang.Math.min(int, int):int (11 bytes)   trivial (relevance=1.000010, probability=0.000430, bonus=1.000000, nodes=7)
                                                        @ 32  java.util.Arrays.copyOfRange(byte[], int, int):byte[] (25 bytes)   relevance-based (relevance=1.000000, probability=0.000546, bonus=1.000000, nodes=33 <= 300.000000)
                                                  @ 15  java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer$Node, int, boolean, boolean, boolean, long):int (424 bytes)   not inlining relevance-based (relevance=0.002503, probability=0.000017, bonus=1.000000, nodes=226 > 0.750820)
                                                @ 4  java.util.concurrent.locks.ReentrantLock$Sync.lock():void (13 bytes)   relevance-based (relevance=1.148348, probability=0.007804, bonus=1.000000, nodes=57 <= 300.000000)
                                                      @ 3  java.lang.String.<init>(AbstractStringBuilder, Void):void (99 bytes)   relevance-based (relevance=1.000000, probability=0.000546, bonus=1.000000, nodes=48 <= 300.000000)
                            @ 16  java.io.BufferedWriter.newLine():void (8 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.System.lineSeparator():String (4 bytes)   inline method (bytecode parsing)
                            @ 30  java.io.OutputStreamWriter.flushBuffer():void (8 bytes)   inline method (bytecode parsing)
                                                          @ 11  java.lang.String.toString():String (2 bytes)   trivial (relevance=1.000000, probability=0.000546, bonus=1.000000, nodes=4)
                                                        @ 11  java.lang.String.valueOf(Object):String (15 bytes)   trivial (relevance=1.000000, probability=0.000546, bonus=1.000000, nodes=4)
                            @ 11  jdk.internal.misc.InternalLock.lock():void (8 bytes)   inline method (bytecode parsing)
                                                  @ 1  java.io.PrintStream.ensureOpen():void (18 bytes)   trivial (relevance=2.000000, probability=0.007804, bonus=1.000000, nodes=7)
                              @ 4  java.util.concurrent.locks.ReentrantLock.lock():void (8 bytes)   inline method (bytecode parsing)
                            @ 23  jdk.internal.misc.InternalLock.unlock():void (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.util.concurrent.locks.ReentrantLock.unlock():void (10 bytes)   inline method (bytecode parsing)
                                @ 5  java.util.concurrent.locks.AbstractQueuedSynchronizer.release(int):boolean (19 bytes)   inline method (bytecode parsing)
                                                      @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.007804, bonus=1.000000, nodes=5)
                                                    @ 4  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000000, probability=0.007804, bonus=1.000000, nodes=8)
                            @ 23  jdk.internal.misc.InternalLock.lock():void (8 bytes)   inline method (bytecode parsing)
                            @ 9  java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(int):void (20 bytes)   inline method (bytecode parsing)
                              @ 4  java.util.concurrent.locks.ReentrantLock.lock():void (8 bytes)   inline method (bytecode parsing)
                            @ 35  jdk.internal.misc.InternalLock.unlock():void (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.util.concurrent.locks.ReentrantLock.unlock():void (10 bytes)   inline method (bytecode parsing)
                                @ 5  java.util.concurrent.locks.AbstractQueuedSynchronizer.release(int):boolean (19 bytes)   inline method (bytecode parsing)
                            @ 7  java.util.concurrent.locks.AbstractQueuedSynchronizer.compareAndSetState(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 15  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                            @ 21  java.util.concurrent.locks.AbstractOwnableSynchronizer.getExclusiveOwnerThread():Thread (5 bytes)   inline accessor method (bytecode parsing)
                            @ 29  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 9  java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(int):void (20 bytes)   inline method (bytecode parsing)
                            @ 51  java.util.concurrent.locks.AbstractQueuedSynchronizer.setState(int):void (6 bytes)   inline method (bytecode parsing)
                                                            @ 1  java.util.concurrent.locks.ReentrantLock$NonfairSync.initialTryLock():boolean (58 bytes)   relevance-based (relevance=1.006377, probability=0.000273, bonus=1.000000, nodes=40 <= 300.000000)
                            @ 7  java.util.concurrent.locks.AbstractQueuedSynchronizer.compareAndSetState(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 15  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                            @ 21  java.util.concurrent.locks.AbstractOwnableSynchronizer.getExclusiveOwnerThread():Thread (5 bytes)   inline accessor method (bytecode parsing)
                            @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 29  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 10  java.util.concurrent.locks.AbstractQueuedSynchronizer.compareAndSetState(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 51  java.util.concurrent.locks.AbstractQueuedSynchronizer.setState(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 20  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                                                        @ 1  java.util.concurrent.locks.ReentrantLock$NonfairSync.initialTryLock():boolean (58 bytes)   relevance-based (relevance=1.006570, probability=0.007804, bonus=1.000000, nodes=40 <= 300.000000)
                                                            @ 2  java.util.concurrent.locks.ReentrantLock$NonfairSync.tryAcquire(int):boolean (27 bytes)   not inlining relevance-based (relevance=0.005005, probability=0.000001, bonus=1.000000, nodes=36 > 1.501641)
                            @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 10  java.util.concurrent.locks.AbstractQueuedSynchronizer.compareAndSetState(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 20  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                            @ 108  java.util.concurrent.locks.AbstractQueuedSynchronizer.tryAcquireShared(int):int (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.lang.UnsupportedOperationException.<init>():void (5 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.RuntimeException.<init>():void (5 bytes)   inline method (bytecode parsing)
                                  @ 1  java.lang.Exception.<init>():void (5 bytes)   inline method (bytecode parsing)
                                                        @ 2  java.util.concurrent.locks.ReentrantLock$NonfairSync.tryAcquire(int):boolean (27 bytes)   not inlining relevance-based (relevance=0.005005, probability=0.000035, bonus=1.000000, nodes=36 > 1.501641)
                            @ 245  java.util.concurrent.locks.AbstractQueuedSynchronizer$ExclusiveNode.<init>():void (5 bytes)   inline method (bytecode parsing)
                              @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer$Node.<init>():void (5 bytes)   inline method (bytecode parsing)
                            @ 290  java.util.concurrent.locks.AbstractQueuedSynchronizer$Node.setPrevRelaxed(AbstractQueuedSynchronizer$Node):void (12 bytes)   inline method (bytecode parsing)
                            @ 108  java.util.concurrent.locks.AbstractQueuedSynchronizer.tryAcquireShared(int):int (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.lang.UnsupportedOperationException.<init>():void (5 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.RuntimeException.<init>():void (5 bytes)   inline method (bytecode parsing)
                                  @ 1  java.lang.Exception.<init>():void (5 bytes)   inline method (bytecode parsing)
                            @ 393  java.lang.Thread.interrupted():boolean (7 bytes)   inline method (bytecode parsing)
                            @ 245  java.util.concurrent.locks.AbstractQueuedSynchronizer$ExclusiveNode.<init>():void (5 bytes)   inline method (bytecode parsing)
                              @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer$Node.<init>():void (5 bytes)   inline method (bytecode parsing)
                            @ 290  java.util.concurrent.locks.AbstractQueuedSynchronizer$Node.setPrevRelaxed(AbstractQueuedSynchronizer$Node):void (12 bytes)   inline method (bytecode parsing)
                            @ 393  java.lang.Thread.interrupted():boolean (7 bytes)   inline method (bytecode parsing)
                                                            @ 15  java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer$Node, int, boolean, boolean, boolean, long):int (424 bytes)   not inlining relevance-based (relevance=0.002503, probability=0.000001, bonus=1.000000, nodes=226 > 0.750820)
                                                          @ 4  java.util.concurrent.locks.ReentrantLock$Sync.lock():void (13 bytes)   relevance-based (relevance=1.146588, probability=0.000273, bonus=1.000000, nodes=57 <= 300.000000)
                            @ 16  java.io.BufferedWriter.newLine():void (8 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.System.lineSeparator():String (4 bytes)   inline method (bytecode parsing)
                            @ 30  java.io.OutputStreamWriter.flushBuffer():void (8 bytes)   inline method (bytecode parsing)
                                                        @ 15  java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer$Node, int, boolean, boolean, boolean, long):int (424 bytes)   not inlining relevance-based (relevance=0.002503, probability=0.000017, bonus=1.000000, nodes=226 > 0.750820)
                                                      @ 4  java.util.concurrent.locks.ReentrantLock$Sync.lock():void (13 bytes)   relevance-based (relevance=1.148348, probability=0.007804, bonus=1.000000, nodes=57 <= 300.000000)
                                                            @ 1  java.io.PrintStream.ensureOpen():void (18 bytes)   trivial (relevance=2.000000, probability=0.000273, bonus=1.000000, nodes=7)
                            @ 39  java.io.BufferedWriter.min(int, int):int (9 bytes)   inline method (bytecode parsing)
                                                                @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.000273, bonus=1.000000, nodes=5)
                                                              @ 4  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000000, probability=0.000273, bonus=1.000000, nodes=8)
                                                        @ 1  java.io.BufferedWriter.ensureOpen():void (18 bytes)   trivial (relevance=1.000000, probability=0.007804, bonus=1.000000, nodes=7)
                            @ 23  jdk.internal.misc.InternalLock.lock():void (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.util.concurrent.locks.ReentrantLock.lock():void (8 bytes)   inline method (bytecode parsing)
                                                        @ 6  java.io.BufferedWriter.growIfNeeded(int):void (63 bytes)   relevance-based (relevance=1.000000, probability=0.007804, bonus=1.000000, nodes=15 <= 300.000000)
                            @ 35  jdk.internal.misc.InternalLock.unlock():void (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.util.concurrent.locks.ReentrantLock.unlock():void (10 bytes)   inline method (bytecode parsing)
                                @ 5  java.util.concurrent.locks.AbstractQueuedSynchronizer.release(int):boolean (19 bytes)   inline method (bytecode parsing)
                            @ 16  java.lang.String.checkBoundsOffCount(int, int, int):int (10 bytes)   inline method (bytecode parsing)
                            @ 9  java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(int):void (20 bytes)   inline method (bytecode parsing)
                                                            @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.007804, bonus=1.000000, nodes=5)
                                                          @ 3  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000000, probability=0.007804, bonus=1.000000, nodes=8)
                            @ 7  java.util.concurrent.locks.AbstractQueuedSynchronizer.compareAndSetState(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 15  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                                                            @ 6  jdk.internal.util.Preconditions.checkFromToIndex(int, int, int, BiFunction):int (24 bytes)   relevance-based (relevance=1.000000, probability=0.007804, bonus=1.000000, nodes=11 <= 300.000000)
                            @ 21  java.util.concurrent.locks.AbstractOwnableSynchronizer.getExclusiveOwnerThread():Thread (5 bytes)   inline accessor method (bytecode parsing)
                                                          @ 6  java.lang.String.checkBoundsBeginEnd(int, int, int):void (11 bytes)   relevance-based (relevance=1.000000, probability=0.007804, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 29  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 51  java.util.concurrent.locks.AbstractQueuedSynchronizer.setState(int):void (6 bytes)   inline method (bytecode parsing)
                                                          @ 6  jdk.internal.util.Preconditions.checkFromIndexSize(int, int, int, BiFunction):int (25 bytes)   relevance-based (relevance=1.000000, probability=0.007804, bonus=1.000000, nodes=15 <= 300.000000)
                                                                  @ 1  java.util.concurrent.locks.ReentrantLock$NonfairSync.initialTryLock():boolean (58 bytes)   relevance-based (relevance=1.006377, probability=0.000273, bonus=1.000000, nodes=40 <= 300.000000)
                                                          @ 21  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=0.007804, bonus=1.000000, nodes=9)
                            @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 10  java.util.concurrent.locks.AbstractQueuedSynchronizer.compareAndSetState(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 20  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                                                          @ 36  java.lang.StringLatin1.getChars(byte[], int, int, char[], int):void (12 bytes)   relevance-based (relevance=1.000000, probability=0.007804, bonus=1.000000, nodes=38 <= 300.000000)
                                                                  @ 2  java.util.concurrent.locks.ReentrantLock$NonfairSync.tryAcquire(int):boolean (27 bytes)   not inlining relevance-based (relevance=0.005005, probability=0.000001, bonus=1.000000, nodes=36 > 1.501641)
                                                        @ 60  java.lang.String.getChars(int, int, char[], int):void (55 bytes)   relevance-based (relevance=1.000000, probability=0.007804, bonus=1.000000, nodes=58 <= 300.000000)
                                                      @ 30  java.io.BufferedWriter.implWrite(String, int, int):void (100 bytes)   relevance-based (relevance=1.125700, probability=0.007804, bonus=1.000000, nodes=93 <= 300.000000)
                            @ 108  java.util.concurrent.locks.AbstractQueuedSynchronizer.tryAcquireShared(int):int (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.lang.UnsupportedOperationException.<init>():void (5 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.RuntimeException.<init>():void (5 bytes)   inline method (bytecode parsing)
                                  @ 1  java.lang.Exception.<init>():void (5 bytes)   inline method (bytecode parsing)
                            @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 245  java.util.concurrent.locks.AbstractQueuedSynchronizer$ExclusiveNode.<init>():void (5 bytes)   inline method (bytecode parsing)
                            @ 8  java.util.concurrent.locks.AbstractOwnableSynchronizer.getExclusiveOwnerThread():Thread (5 bytes)   inline accessor method (bytecode parsing)
                              @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer$Node.<init>():void (5 bytes)   inline method (bytecode parsing)
                            @ 41  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                            @ 290  java.util.concurrent.locks.AbstractQueuedSynchronizer$Node.setPrevRelaxed(AbstractQueuedSynchronizer$Node):void (12 bytes)   inline method (bytecode parsing)
                            @ 46  java.util.concurrent.locks.AbstractQueuedSynchronizer.setState(int):void (6 bytes)   inline method (bytecode parsing)
                                                      @ 2  java.util.concurrent.locks.ReentrantLock$Sync.tryRelease(int):boolean (51 bytes)   relevance-based (relevance=1.125700, probability=0.007804, bonus=1.000000, nodes=37 <= 300.000000)
                            @ 393  java.lang.Thread.interrupted():boolean (7 bytes)   inline method (bytecode parsing)
                            @ 22  java.util.concurrent.locks.AbstractQueuedSynchronizer$Node.getAndUnsetStatus(int):int (14 bytes)   inline method (bytecode parsing)
                              @ 10  jdk.internal.misc.Unsafe.getAndBitwiseAndInt(Object, long, int):int (27 bytes)   inline method (bytecode parsing)
                            @ 5  java.lang.Thread.isVirtual():boolean (5 bytes)   inline method (bytecode parsing)
                                                        @ 30  java.util.concurrent.locks.LockSupport.unpark(Thread):void (26 bytes)   not inlining relevance-based (relevance=0.006042, probability=0.000031, bonus=1.000000, nodes=23 > 1.812630)
                                                      @ 12  java.util.concurrent.locks.AbstractQueuedSynchronizer.signalNext(AbstractQueuedSynchronizer$Node):void (34 bytes)   relevance-based (relevance=0.980278, probability=0.006796, bonus=1.000000, nodes=56 <= 294.083512)
                                                    @ 7  java.io.BufferedWriter.write(String, int, int):void (82 bytes)   relevance-based (relevance=1.000000, probability=0.007804, bonus=1.000000, nodes=262 <= 300.000000)
                                                                  @ 15  java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer$Node, int, boolean, boolean, boolean, long):int (424 bytes)   not inlining relevance-based (relevance=0.002503, probability=0.000001, bonus=1.000000, nodes=226 > 0.750820)
                                                                @ 4  java.util.concurrent.locks.ReentrantLock$Sync.lock():void (13 bytes)   relevance-based (relevance=1.146588, probability=0.000273, bonus=1.000000, nodes=57 <= 300.000000)
                                                  @ 9  java.io.Writer.write(String):void (11 bytes)   relevance-based (relevance=2.000000, probability=0.007804, bonus=1.000000, nodes=266 <= 300.000000)
                            @ 39  java.io.BufferedWriter.min(int, int):int (9 bytes)   inline method (bytecode parsing)
                                                                  @ 1  java.io.BufferedWriter.ensureOpen():void (18 bytes)   trivial (relevance=1.000000, probability=0.000273, bonus=1.000000, nodes=7)
                                                @ 16  java.io.PrintStream.implWriteln(String):void (48 bytes)   not inlining relevance-based (relevance=1.125700, probability=0.007804, bonus=1.000000, nodes=309 > 300.000000)
                                                                  @ 6  java.io.BufferedWriter.growIfNeeded(int):void (63 bytes)   relevance-based (relevance=1.000000, probability=0.000273, bonus=1.000000, nodes=15 <= 300.000000)
                            @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 8  java.util.concurrent.locks.AbstractOwnableSynchronizer.getExclusiveOwnerThread():Thread (5 bytes)   inline accessor method (bytecode parsing)
                            @ 16  java.lang.String.checkBoundsOffCount(int, int, int):int (10 bytes)   inline method (bytecode parsing)
                            @ 41  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                            @ 46  java.util.concurrent.locks.AbstractQueuedSynchronizer.setState(int):void (6 bytes)   inline method (bytecode parsing)
                                                @ 2  java.util.concurrent.locks.ReentrantLock$Sync.tryRelease(int):boolean (51 bytes)   relevance-based (relevance=1.125700, probability=0.007804, bonus=1.000000, nodes=37 <= 300.000000)
                                                                      @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.000273, bonus=1.000000, nodes=5)
                            @ 22  java.util.concurrent.locks.AbstractQueuedSynchronizer$Node.getAndUnsetStatus(int):int (14 bytes)   inline method (bytecode parsing)
                                                                    @ 3  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000000, probability=0.000273, bonus=1.000000, nodes=8)
                              @ 10  jdk.internal.misc.Unsafe.getAndBitwiseAndInt(Object, long, int):int (27 bytes)   inline method (bytecode parsing)
                                                                      @ 6  jdk.internal.util.Preconditions.checkFromToIndex(int, int, int, BiFunction):int (24 bytes)   relevance-based (relevance=1.000000, probability=0.000273, bonus=1.000000, nodes=11 <= 300.000000)
                            @ 5  java.lang.Thread.isVirtual():boolean (5 bytes)   inline method (bytecode parsing)
                                                                    @ 6  java.lang.String.checkBoundsBeginEnd(int, int, int):void (11 bytes)   relevance-based (relevance=1.000000, probability=0.000273, bonus=1.000000, nodes=10 <= 300.000000)
                                                  @ 30  java.util.concurrent.locks.LockSupport.unpark(Thread):void (26 bytes)   not inlining relevance-based (relevance=0.006042, probability=0.000031, bonus=1.000000, nodes=23 > 1.812630)
                                                                    @ 6  jdk.internal.util.Preconditions.checkFromIndexSize(int, int, int, BiFunction):int (25 bytes)   relevance-based (relevance=1.000000, probability=0.000273, bonus=1.000000, nodes=15 <= 300.000000)
                                                @ 12  java.util.concurrent.locks.AbstractQueuedSynchronizer.signalNext(AbstractQueuedSynchronizer$Node):void (34 bytes)   relevance-based (relevance=0.980278, probability=0.006796, bonus=1.000000, nodes=56 <= 294.083512)
                                                                    @ 21  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=0.000273, bonus=1.000000, nodes=9)
                            @ 16  java.io.BufferedWriter.newLine():void (8 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.System.lineSeparator():String (4 bytes)   inline method (bytecode parsing)
                            @ 30  java.io.OutputStreamWriter.flushBuffer():void (8 bytes)   inline method (bytecode parsing)
                                                                    @ 36  java.lang.StringLatin1.getChars(byte[], int, int, char[], int):void (12 bytes)   relevance-based (relevance=1.000000, probability=0.000273, bonus=1.000000, nodes=38 <= 300.000000)
                                                  @ 1  java.io.PrintStream.ensureOpen():void (18 bytes)   trivial (relevance=2.000000, probability=0.007804, bonus=1.000000, nodes=7)
                                                                  @ 60  java.lang.String.getChars(int, int, char[], int):void (55 bytes)   relevance-based (relevance=1.000000, probability=0.000273, bonus=1.000000, nodes=58 <= 300.000000)
                                                                @ 30  java.io.BufferedWriter.implWrite(String, int, int):void (100 bytes)   relevance-based (relevance=1.125700, probability=0.000273, bonus=1.000000, nodes=93 <= 300.000000)
                                                      @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.007804, bonus=1.000000, nodes=5)
                                                    @ 4  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000000, probability=0.007804, bonus=1.000000, nodes=8)
                            @ 23  jdk.internal.misc.InternalLock.lock():void (8 bytes)   inline method (bytecode parsing)
                            @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                              @ 4  java.util.concurrent.locks.ReentrantLock.lock():void (8 bytes)   inline method (bytecode parsing)
                            @ 8  java.util.concurrent.locks.AbstractOwnableSynchronizer.getExclusiveOwnerThread():Thread (5 bytes)   inline accessor method (bytecode parsing)
                            @ 35  jdk.internal.misc.InternalLock.unlock():void (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.util.concurrent.locks.ReentrantLock.unlock():void (10 bytes)   inline method (bytecode parsing)
                            @ 41  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                                @ 5  java.util.concurrent.locks.AbstractQueuedSynchronizer.release(int):boolean (19 bytes)   inline method (bytecode parsing)
                            @ 46  java.util.concurrent.locks.AbstractQueuedSynchronizer.setState(int):void (6 bytes)   inline method (bytecode parsing)
                                                                @ 2  java.util.concurrent.locks.ReentrantLock$Sync.tryRelease(int):boolean (51 bytes)   relevance-based (relevance=1.125700, probability=0.000273, bonus=1.000000, nodes=37 <= 300.000000)
                            @ 9  java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(int):void (20 bytes)   inline method (bytecode parsing)
                            @ 22  java.util.concurrent.locks.AbstractQueuedSynchronizer$Node.getAndUnsetStatus(int):int (14 bytes)   inline method (bytecode parsing)
                            @ 7  java.util.concurrent.locks.AbstractQueuedSynchronizer.compareAndSetState(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                              @ 10  jdk.internal.misc.Unsafe.getAndBitwiseAndInt(Object, long, int):int (27 bytes)   inline method (bytecode parsing)
                            @ 15  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                            @ 21  java.util.concurrent.locks.AbstractOwnableSynchronizer.getExclusiveOwnerThread():Thread (5 bytes)   inline accessor method (bytecode parsing)
                            @ 29  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 51  java.util.concurrent.locks.AbstractQueuedSynchronizer.setState(int):void (6 bytes)   inline method (bytecode parsing)
                                                        @ 1  java.util.concurrent.locks.ReentrantLock$NonfairSync.initialTryLock():boolean (58 bytes)   relevance-based (relevance=1.006570, probability=0.007804, bonus=1.000000, nodes=40 <= 300.000000)
                            @ 5  java.lang.Thread.isVirtual():boolean (5 bytes)   inline method (bytecode parsing)
                                                                  @ 30  java.util.concurrent.locks.LockSupport.unpark(Thread):void (26 bytes)   not inlining relevance-based (relevance=0.006051, probability=0.000001, bonus=1.000000, nodes=23 > 1.815411)
                                                                @ 12  java.util.concurrent.locks.AbstractQueuedSynchronizer.signalNext(AbstractQueuedSynchronizer$Node):void (34 bytes)   relevance-based (relevance=0.981783, probability=0.000238, bonus=1.000000, nodes=56 <= 294.534851)
                            @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 10  java.util.concurrent.locks.AbstractQueuedSynchronizer.compareAndSetState(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 20  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                                                              @ 7  java.io.BufferedWriter.write(String, int, int):void (82 bytes)   relevance-based (relevance=1.000000, probability=0.000273, bonus=1.000000, nodes=262 <= 300.000000)
                                                        @ 2  java.util.concurrent.locks.ReentrantLock$NonfairSync.tryAcquire(int):boolean (27 bytes)   not inlining relevance-based (relevance=0.005005, probability=0.000035, bonus=1.000000, nodes=36 > 1.501641)
                            @ 108  java.util.concurrent.locks.AbstractQueuedSynchronizer.tryAcquireShared(int):int (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.lang.UnsupportedOperationException.<init>():void (5 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.RuntimeException.<init>():void (5 bytes)   inline method (bytecode parsing)
                                  @ 1  java.lang.Exception.<init>():void (5 bytes)   inline method (bytecode parsing)
                                                            @ 9  java.io.Writer.write(String):void (11 bytes)   relevance-based (relevance=2.000000, probability=0.000273, bonus=1.000000, nodes=266 <= 300.000000)
                            @ 245  java.util.concurrent.locks.AbstractQueuedSynchronizer$ExclusiveNode.<init>():void (5 bytes)   inline method (bytecode parsing)
                              @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer$Node.<init>():void (5 bytes)   inline method (bytecode parsing)
                            @ 290  java.util.concurrent.locks.AbstractQueuedSynchronizer$Node.setPrevRelaxed(AbstractQueuedSynchronizer$Node):void (12 bytes)   inline method (bytecode parsing)
                            @ 393  java.lang.Thread.interrupted():boolean (7 bytes)   inline method (bytecode parsing)
                                                          @ 16  java.io.PrintStream.implWriteln(String):void (48 bytes)   not inlining relevance-based (relevance=1.125700, probability=0.000273, bonus=1.000000, nodes=309 > 300.000000)
                            @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 8  java.util.concurrent.locks.AbstractOwnableSynchronizer.getExclusiveOwnerThread():Thread (5 bytes)   inline accessor method (bytecode parsing)
                            @ 41  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                            @ 46  java.util.concurrent.locks.AbstractQueuedSynchronizer.setState(int):void (6 bytes)   inline method (bytecode parsing)
                                                          @ 2  java.util.concurrent.locks.ReentrantLock$Sync.tryRelease(int):boolean (51 bytes)   relevance-based (relevance=1.125700, probability=0.000273, bonus=1.000000, nodes=37 <= 300.000000)
                            @ 22  java.util.concurrent.locks.AbstractQueuedSynchronizer$Node.getAndUnsetStatus(int):int (14 bytes)   inline method (bytecode parsing)
                                                        @ 15  java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer$Node, int, boolean, boolean, boolean, long):int (424 bytes)   not inlining relevance-based (relevance=0.002503, probability=0.000017, bonus=1.000000, nodes=226 > 0.750820)
                              @ 10  jdk.internal.misc.Unsafe.getAndBitwiseAndInt(Object, long, int):int (27 bytes)   inline method (bytecode parsing)
                                                      @ 4  java.util.concurrent.locks.ReentrantLock$Sync.lock():void (13 bytes)   relevance-based (relevance=1.148348, probability=0.007804, bonus=1.000000, nodes=57 <= 300.000000)
                            @ 39  java.io.BufferedWriter.min(int, int):int (9 bytes)   inline method (bytecode parsing)
                            @ 5  java.lang.Thread.isVirtual():boolean (5 bytes)   inline method (bytecode parsing)
                                                            @ 30  java.util.concurrent.locks.LockSupport.unpark(Thread):void (26 bytes)   not inlining relevance-based (relevance=0.006051, probability=0.000001, bonus=1.000000, nodes=23 > 1.815411)
                                                          @ 12  java.util.concurrent.locks.AbstractQueuedSynchronizer.signalNext(AbstractQueuedSynchronizer$Node):void (34 bytes)   relevance-based (relevance=0.981783, probability=0.000238, bonus=1.000000, nodes=56 <= 294.534851)
                                                        @ 1  java.io.BufferedWriter.ensureOpen():void (18 bytes)   trivial (relevance=1.000000, probability=0.007804, bonus=1.000000, nodes=7)
                                                        @ 6  java.io.BufferedWriter.growIfNeeded(int):void (63 bytes)   relevance-based (relevance=1.000000, probability=0.007804, bonus=1.000000, nodes=15 <= 300.000000)
                            @ 16  java.io.BufferedWriter.newLine():void (8 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.System.lineSeparator():String (4 bytes)   inline method (bytecode parsing)
                            @ 16  java.lang.String.checkBoundsOffCount(int, int, int):int (10 bytes)   inline method (bytecode parsing)
                            @ 30  java.io.OutputStreamWriter.flushBuffer():void (8 bytes)   inline method (bytecode parsing)
                                                            @ 1  java.io.PrintStream.ensureOpen():void (18 bytes)   trivial (relevance=2.000000, probability=0.000273, bonus=1.000000, nodes=7)
                                                            @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.007804, bonus=1.000000, nodes=5)
                                                          @ 3  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000000, probability=0.007804, bonus=1.000000, nodes=8)
                                                                @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.000273, bonus=1.000000, nodes=5)
                                                            @ 6  jdk.internal.util.Preconditions.checkFromToIndex(int, int, int, BiFunction):int (24 bytes)   relevance-based (relevance=1.000000, probability=0.007804, bonus=1.000000, nodes=11 <= 300.000000)
                                                              @ 4  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000000, probability=0.000273, bonus=1.000000, nodes=8)
                                                          @ 6  java.lang.String.checkBoundsBeginEnd(int, int, int):void (11 bytes)   relevance-based (relevance=1.000000, probability=0.007804, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 23  jdk.internal.misc.InternalLock.lock():void (8 bytes)   inline method (bytecode parsing)
                                                          @ 6  jdk.internal.util.Preconditions.checkFromIndexSize(int, int, int, BiFunction):int (25 bytes)   relevance-based (relevance=1.000000, probability=0.007804, bonus=1.000000, nodes=15 <= 300.000000)
                              @ 4  java.util.concurrent.locks.ReentrantLock.lock():void (8 bytes)   inline method (bytecode parsing)
                            @ 35  jdk.internal.misc.InternalLock.unlock():void (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.util.concurrent.locks.ReentrantLock.unlock():void (10 bytes)   inline method (bytecode parsing)
                                                          @ 21  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=0.007804, bonus=1.000000, nodes=9)
                                @ 5  java.util.concurrent.locks.AbstractQueuedSynchronizer.release(int):boolean (19 bytes)   inline method (bytecode parsing)
                            @ 9  java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(int):void (20 bytes)   inline method (bytecode parsing)
                                                          @ 36  java.lang.StringLatin1.getChars(byte[], int, int, char[], int):void (12 bytes)   relevance-based (relevance=1.000000, probability=0.007804, bonus=1.000000, nodes=38 <= 300.000000)
                                                        @ 60  java.lang.String.getChars(int, int, char[], int):void (55 bytes)   relevance-based (relevance=1.000000, probability=0.007804, bonus=1.000000, nodes=58 <= 300.000000)
                            @ 7  java.util.concurrent.locks.AbstractQueuedSynchronizer.compareAndSetState(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 15  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                                                      @ 30  java.io.BufferedWriter.implWrite(String, int, int):void (100 bytes)   relevance-based (relevance=1.125700, probability=0.007804, bonus=1.000000, nodes=93 <= 300.000000)
                            @ 21  java.util.concurrent.locks.AbstractOwnableSynchronizer.getExclusiveOwnerThread():Thread (5 bytes)   inline accessor method (bytecode parsing)
                            @ 29  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 51  java.util.concurrent.locks.AbstractQueuedSynchronizer.setState(int):void (6 bytes)   inline method (bytecode parsing)
                                                                  @ 1  java.util.concurrent.locks.ReentrantLock$NonfairSync.initialTryLock():boolean (58 bytes)   relevance-based (relevance=1.006377, probability=0.000273, bonus=1.000000, nodes=40 <= 300.000000)
                            @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 8  java.util.concurrent.locks.AbstractOwnableSynchronizer.getExclusiveOwnerThread():Thread (5 bytes)   inline accessor method (bytecode parsing)
                            @ 41  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                            @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  java.util.concurrent.locks.AbstractQueuedSynchronizer.setState(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 10  java.util.concurrent.locks.AbstractQueuedSynchronizer.compareAndSetState(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 20  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                                                      @ 2  java.util.concurrent.locks.ReentrantLock$Sync.tryRelease(int):boolean (51 bytes)   relevance-based (relevance=1.125700, probability=0.007804, bonus=1.000000, nodes=37 <= 300.000000)
                                                                  @ 2  java.util.concurrent.locks.ReentrantLock$NonfairSync.tryAcquire(int):boolean (27 bytes)   not inlining relevance-based (relevance=0.005005, probability=0.000001, bonus=1.000000, nodes=36 > 1.501641)
                            @ 22  java.util.concurrent.locks.AbstractQueuedSynchronizer$Node.getAndUnsetStatus(int):int (14 bytes)   inline method (bytecode parsing)
                              @ 10  jdk.internal.misc.Unsafe.getAndBitwiseAndInt(Object, long, int):int (27 bytes)   inline method (bytecode parsing)
                            @ 108  java.util.concurrent.locks.AbstractQueuedSynchronizer.tryAcquireShared(int):int (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.lang.UnsupportedOperationException.<init>():void (5 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.RuntimeException.<init>():void (5 bytes)   inline method (bytecode parsing)
                                  @ 1  java.lang.Exception.<init>():void (5 bytes)   inline method (bytecode parsing)
                            @ 5  java.lang.Thread.isVirtual():boolean (5 bytes)   inline method (bytecode parsing)
                            @ 245  java.util.concurrent.locks.AbstractQueuedSynchronizer$ExclusiveNode.<init>():void (5 bytes)   inline method (bytecode parsing)
                              @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer$Node.<init>():void (5 bytes)   inline method (bytecode parsing)
                            @ 290  java.util.concurrent.locks.AbstractQueuedSynchronizer$Node.setPrevRelaxed(AbstractQueuedSynchronizer$Node):void (12 bytes)   inline method (bytecode parsing)
                                                        @ 30  java.util.concurrent.locks.LockSupport.unpark(Thread):void (26 bytes)   not inlining relevance-based (relevance=0.006042, probability=0.000031, bonus=1.000000, nodes=23 > 1.812630)
                                                      @ 12  java.util.concurrent.locks.AbstractQueuedSynchronizer.signalNext(AbstractQueuedSynchronizer$Node):void (34 bytes)   relevance-based (relevance=0.980278, probability=0.006796, bonus=1.000000, nodes=56 <= 294.083512)
                            @ 393  java.lang.Thread.interrupted():boolean (7 bytes)   inline method (bytecode parsing)
                                                    @ 7  java.io.BufferedWriter.write(String, int, int):void (82 bytes)   relevance-based (relevance=1.000000, probability=0.007804, bonus=1.000000, nodes=262 <= 300.000000)
                                                  @ 9  java.io.Writer.write(String):void (11 bytes)   relevance-based (relevance=2.000000, probability=0.007804, bonus=1.000000, nodes=266 <= 300.000000)
                                                                  @ 15  java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer$Node, int, boolean, boolean, boolean, long):int (424 bytes)   not inlining relevance-based (relevance=0.002503, probability=0.000001, bonus=1.000000, nodes=226 > 0.750820)
                                                                @ 4  java.util.concurrent.locks.ReentrantLock$Sync.lock():void (13 bytes)   relevance-based (relevance=1.146588, probability=0.000273, bonus=1.000000, nodes=57 <= 300.000000)
                            @ 39  java.io.BufferedWriter.min(int, int):int (9 bytes)   inline method (bytecode parsing)
                                                @ 48  java.io.PrintStream.implWriteln(String):void (48 bytes)   not inlining relevance-based (relevance=1.125700, probability=0.007804, bonus=1.000000, nodes=309 > 300.000000)
                                              @ 14  java.io.PrintStream.writeln(String):void (81 bytes)   relevance-based (relevance=1.000000, probability=0.015608, bonus=1.000000, nodes=189 <= 300.000000)
                                                                  @ 1  java.io.BufferedWriter.ensureOpen():void (18 bytes)   trivial (relevance=1.000000, probability=0.000273, bonus=1.000000, nodes=7)
                                            @ 147  java.io.PrintStream.println(String):void (44 bytes)   relevance-based (relevance=1.475999, probability=0.015608, bonus=1.000000, nodes=190 <= 300.000000)
                                                                  @ 6  java.io.BufferedWriter.growIfNeeded(int):void (63 bytes)   relevance-based (relevance=1.000000, probability=0.000273, bonus=1.000000, nodes=15 <= 300.000000)
                            @ 16  java.lang.String.checkBoundsOffCount(int, int, int):int (10 bytes)   inline method (bytecode parsing)
                                          @ 11  jdk.vm.ci.common.InitTimer.<init>(String):void (151 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.031216, bonus=1.000000, nodes=361 > 300.000000)
                                                                      @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.000273, bonus=1.000000, nodes=5)
                                                                    @ 3  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000000, probability=0.000273, bonus=1.000000, nodes=8)
                            @ 21  java.util.ServiceLoader.load(Class, ClassLoader):ServiceLoader (13 bytes)   inline method (bytecode parsing)
                                                                      @ 6  jdk.internal.util.Preconditions.checkFromToIndex(int, int, int, BiFunction):int (24 bytes)   relevance-based (relevance=1.000000, probability=0.000273, bonus=1.000000, nodes=11 <= 300.000000)
                            @ 0  jdk.internal.misc.VM.initLevel():int (4 bytes)   inline method (bytecode parsing)
                                                                    @ 6  java.lang.String.checkBoundsBeginEnd(int, int, int):void (11 bytes)   relevance-based (relevance=1.000000, probability=0.000273, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 45  java.lang.IllegalStateException.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                                                                    @ 6  jdk.internal.util.Preconditions.checkFromIndexSize(int, int, int, BiFunction):int (25 bytes)   relevance-based (relevance=1.000000, probability=0.000273, bonus=1.000000, nodes=15 <= 300.000000)
                              @ 2  java.lang.RuntimeException.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                                @ 2  java.lang.Exception.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                            @ 32  java.lang.ClassLoader.getBuiltinAppClassLoader():ClassLoader (4 bytes)   inline method (bytecode parsing)
                              @ 0  jdk.internal.loader.ClassLoaders.appClassLoader():ClassLoader (4 bytes)   inline method (bytecode parsing)
                                                                    @ 21  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=0.000273, bonus=1.000000, nodes=9)
                                                @ 0  java.lang.System.allowSecurityManager():boolean (13 bytes)   trivial (relevance=0.333600, probability=0.006243, bonus=1.000000, nodes=8)
                                                                    @ 36  java.lang.StringLatin1.getChars(byte[], int, int, char[], int):void (12 bytes)   relevance-based (relevance=1.000000, probability=0.000273, bonus=1.000000, nodes=38 <= 300.000000)
                                                                  @ 60  java.lang.String.getChars(int, int, char[], int):void (55 bytes)   relevance-based (relevance=1.000000, probability=0.000273, bonus=1.000000, nodes=58 <= 300.000000)
                                                                @ 30  java.io.BufferedWriter.implWrite(String, int, int):void (100 bytes)   relevance-based (relevance=1.125700, probability=0.000273, bonus=1.000000, nodes=93 <= 300.000000)
                            @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 8  java.util.concurrent.locks.AbstractOwnableSynchronizer.getExclusiveOwnerThread():Thread (5 bytes)   inline accessor method (bytecode parsing)
                            @ 41  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                                              @ 75  java.lang.System.getSecurityManager():SecurityManager (12 bytes)   relevance-based (relevance=0.333333, probability=0.006243, bonus=1.000000, nodes=14 <= 100.000000)
                            @ 46  java.util.concurrent.locks.AbstractQueuedSynchronizer.setState(int):void (6 bytes)   inline method (bytecode parsing)
                                                                @ 2  java.util.concurrent.locks.ReentrantLock$Sync.tryRelease(int):boolean (51 bytes)   relevance-based (relevance=1.125700, probability=0.000273, bonus=1.000000, nodes=37 <= 300.000000)
                            @ 22  java.util.concurrent.locks.AbstractQueuedSynchronizer$Node.getAndUnsetStatus(int):int (14 bytes)   inline method (bytecode parsing)
                              @ 10  jdk.internal.misc.Unsafe.getAndBitwiseAndInt(Object, long, int):int (27 bytes)   inline method (bytecode parsing)
                                                  @ 0  java.lang.System.allowSecurityManager():boolean (13 bytes)   trivial (relevance=0.333597, probability=0.003122, bonus=1.000000, nodes=8)
                                                @ 0  java.lang.System.getSecurityManager():SecurityManager (12 bytes)   relevance-based (relevance=0.333330, probability=0.003122, bonus=1.000000, nodes=14 <= 99.999000)
                            @ 7  java.lang.Class.getClassLoader0():ClassLoader (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 9  java.lang.ClassLoader.getClassLoader(Class):ClassLoader (11 bytes)   relevance-based (relevance=0.083399, probability=0.001561, bonus=1.000000, nodes=13 <= 25.019739)
                            @ 5  java.lang.Thread.isVirtual():boolean (5 bytes)   inline method (bytecode parsing)
                                              @ 89  java.lang.ClassLoader.checkClassLoaderPermission(ClassLoader, Class):void (29 bytes)   not inlining relevance-based (relevance=0.166665, probability=0.003122, bonus=1.000000, nodes=50 > 49.999500)
                                                                  @ 30  java.util.concurrent.locks.LockSupport.unpark(Thread):void (26 bytes)   not inlining relevance-based (relevance=0.006051, probability=0.000001, bonus=1.000000, nodes=23 > 1.815411)
                                                                @ 12  java.util.concurrent.locks.AbstractQueuedSynchronizer.signalNext(AbstractQueuedSynchronizer$Node):void (34 bytes)   relevance-based (relevance=0.981783, probability=0.000238, bonus=1.000000, nodes=56 <= 294.534851)
                                                              @ 7  java.io.BufferedWriter.write(String, int, int):void (82 bytes)   relevance-based (relevance=1.000000, probability=0.000273, bonus=1.000000, nodes=262 <= 300.000000)
                 n                              @ 16  java.lang.Throwable.fillInStackTrace(int):Throwable (0 bytes)   not inlining it is a non-intrinsic native method
              s                                 @ 24  java.lang.Throwable.fillInStackTrace():Throwable (29 bytes)   relevance-based (relevance=0.333333, probability=0.006243, bonus=1.000000, nodes=34 <= 100.000000)
                                              @ 2  java.lang.Throwable.<init>(String):void (34 bytes)   relevance-based (relevance=0.333333, probability=0.006243, bonus=1.000000, nodes=45 <= 100.000000)
                                            @ 18  java.lang.ClassLoader.getSystemClassLoader():ClassLoader (96 bytes)   relevance-based (relevance=1.000000, probability=0.031216, bonus=1.000000, nodes=103 <= 300.000000)
                                                            @ 9  java.io.Writer.write(String):void (11 bytes)   relevance-based (relevance=2.000000, probability=0.000273, bonus=1.000000, nodes=266 <= 300.000000)
                            @ 27  java.util.Objects.requireNonNull(Object):Object (14 bytes)   inline method (bytecode parsing)
                            @ 54  java.lang.Class.getModule():Module (5 bytes)   inline accessor method (bytecode parsing)
                            @ 61  java.lang.Class.getModule():Module (5 bytes)   inline accessor method (bytecode parsing)
                            @ 67  java.lang.Class.getModule():Module (5 bytes)   inline accessor method (bytecode parsing)
                            @ 91  java.lang.StringBuilder.<init>():void (7 bytes)   inline method (bytecode parsing)
                            @ 96  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 101  java.lang.StringBuilder.append(Object):StringBuilder (9 bytes)   inline method (bytecode parsing)
                                                          @ 48  java.io.PrintStream.implWriteln(String):void (48 bytes)   not inlining relevance-based (relevance=1.125700, probability=0.000273, bonus=1.000000, nodes=309 > 300.000000)
                              @ 5  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                                                        @ 14  java.io.PrintStream.writeln(String):void (81 bytes)   relevance-based (relevance=1.000000, probability=0.000546, bonus=1.000000, nodes=189 <= 300.000000)
                            @ 106  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 109  java.lang.StringBuilder.toString():String (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.String.<init>(StringBuilder):void (7 bytes)   inline method (bytecode parsing)
                                                      @ 29  java.io.PrintStream.println(String):void (44 bytes)   relevance-based (relevance=1.269377, probability=0.000546, bonus=1.000000, nodes=190 <= 300.000000)
                            @ 1  java.util.AbstractList.<init>():void (10 bytes)   inline method (bytecode parsing)
                              @ 1  java.util.AbstractCollection.<init>():void (5 bytes)   inline method (bytecode parsing)
                                              @ 9  java.util.ArrayList.<init>():void (12 bytes)   relevance-based (relevance=8.000000, probability=0.024973, bonus=1.000000, nodes=11 <= 300.000000)
                                                    @ 153  sun.security.util.Debug.println(String):void (33 bytes)   relevance-based (relevance=1.000000, probability=0.000546, bonus=1.000000, nodes=264 <= 300.000000)
                            @ 1  java.util.AbstractList.<init>():void (10 bytes)   inline method (bytecode parsing)
                              @ 1  java.util.AbstractCollection.<init>():void (5 bytes)   inline method (bytecode parsing)
                                              @ 20  java.util.ArrayList.<init>():void (12 bytes)   relevance-based (relevance=8.000000, probability=0.024973, bonus=1.000000, nodes=11 <= 300.000000)
                                              @ 31  jdk.internal.misc.VM.isBooted():boolean (13 bytes)   relevance-based (relevance=8.000000, probability=0.024973, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 11  java.lang.Class.getModule():Module (5 bytes)   inline accessor method (bytecode parsing)
                                                  @ 19  java.security.AccessControlContext.optimize():AccessControlContext (319 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.004370, bonus=1.000000, nodes=461 > 300.000000)
                                                @ 147  java.security.AccessController.getContext():AccessControlContext (23 bytes)   relevance-based (relevance=2.333333, probability=0.008740, bonus=1.000000, nodes=29 <= 300.000000)
                            @ 35  java.lang.StringBuilder.<init>():void (7 bytes)   inline method (bytecode parsing)
                            @ 40  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 44  java.lang.StringBuilder.append(Object):StringBuilder (9 bytes)   inline method (bytecode parsing)
                                              @ 9  java.util.ServiceLoader.<init>(Class, Class, ClassLoader):void (158 bytes)   relevance-based (relevance=1.333333, probability=0.024971, bonus=1.000000, nodes=209 <= 300.000000)
                              @ 5  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 47  java.lang.StringBuilder.toString():String (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.String.<init>(StringBuilder):void (7 bytes)   inline method (bytecode parsing)
                            @ 66  java.lang.StringBuilder.<init>():void (7 bytes)   inline method (bytecode parsing)
                            @ 70  java.lang.StringBuilder.append(Object):StringBuilder (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 75  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 78  java.lang.StringBuilder.toString():String (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.String.<init>(StringBuilder):void (7 bytes)   inline method (bytecode parsing)
                                            @ 10  jdk.graal.compiler.options.OptionsParser.getOptionsLoader():Iterable (25 bytes)   not inlining relevance-based (relevance=2.000000, probability=0.062428, bonus=1.000000, nodes=309 > 300.000000)
                            @ 1  java.util.Objects.requireNonNull(Object):Object (14 bytes)   inline method (bytecode parsing)
                            @ 6  java.util.Objects.requireNonNull(Object):Object (14 bytes)   inline method (bytecode parsing)
                                              @ 0  jdk.vm.ci.services.Services.checkJVMCIEnabled():void (17 bytes)   trivial (relevance=4.000000, probability=0.062428, bonus=1.000000, nodes=3)
                            @ 18  java.lang.Class.getModule():Module (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 0  java.lang.System.allowSecurityManager():boolean (13 bytes)   trivial (relevance=1.000800, probability=0.015607, bonus=1.000000, nodes=8)
                                              @ 42  java.lang.System.getSecurityManager():SecurityManager (12 bytes)   relevance-based (relevance=1.000000, probability=0.015607, bonus=1.000000, nodes=14 <= 300.000000)
                            @ 12  java.lang.IllegalStateException.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  java.lang.RuntimeException.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                                @ 2  java.lang.Exception.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                            @ 12  java.lang.NullPointerException.<init>():void (5 bytes)   inline method (bytecode parsing)
                            @ 1  java.lang.Class.getModule():Module (5 bytes)   inline accessor method (bytecode parsing)
                              @ 1  java.lang.RuntimeException.<init>():void (5 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.Exception.<init>():void (5 bytes)   inline method (bytecode parsing)
                            @ 47  java.lang.String.lastIndexOf(int):int (12 bytes)   inline method (bytecode parsing)
                 n                                    @ 25  java.lang.NullPointerException.getExtendedNPEMessage():String (0 bytes)   not inlining it is a non-intrinsic native method
                 n                                    @ 14  java.lang.Class.initClassName():String (0 bytes)   not inlining it is a non-intrinsic native method
                                                      @ 40  java.lang.Class.getName():String (18 bytes)   relevance-based (relevance=1.005573, probability=0.007311, bonus=1.000000, nodes=17 <= 300.000000)
                 n                                      @ 16  java.lang.Throwable.fillInStackTrace(int):Throwable (0 bytes)   not inlining it is a non-intrinsic native method
              s                                         @ 37  java.lang.Throwable.fillInStackTrace():Throwable (29 bytes)   relevance-based (relevance=4.000000, probability=0.001951, bonus=1.000000, nodes=34 <= 300.000000)
              s                                       @ 24  java.lang.NullPointerException.fillInStackTrace():Throwable (41 bytes)   relevance-based (relevance=1.000000, probability=0.001951, bonus=1.000000, nodes=65 <= 300.000000)
                                                        @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.007311, bonus=1.000000, nodes=5)
                                                      @ 3  java.lang.String.length():int (11 bytes)   trivial (relevance=1.364533, probability=0.007311, bonus=1.000000, nodes=8)
                                                    @ 1  java.lang.Throwable.<init>():void (29 bytes)   relevance-based (relevance=1.000000, probability=0.001951, bonus=1.000000, nodes=73 <= 300.000000)
                                                        @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=0.007311, bonus=1.000000, nodes=9)
                                                  @ 18  java.util.Collections$UnmodifiableMap.<init>(Map):void (22 bytes)   relevance-based (relevance=1.000000, probability=0.003902, bonus=1.000000, nodes=87 <= 300.000000)
                                                @ 19  java.util.Collections.unmodifiableMap(Map):Map (22 bytes)   relevance-based (relevance=1.000000, probability=0.007804, bonus=1.000000, nodes=95 <= 300.000000)
                                                          @ 1  java.lang.StringLatin1.canEncode(int):boolean (13 bytes)   trivial (relevance=1.000000, probability=0.007311, bonus=1.000000, nodes=5)
                                                          @ 14  java.lang.Math.min(int, int):int (11 bytes)   trivial (relevance=1.000000, probability=0.007311, bonus=1.000000, nodes=7)
                                                        @ 13  java.lang.StringLatin1.lastIndexOf(byte[], int, int):int (40 bytes)   relevance-based (relevance=1.000000, probability=0.007311, bonus=1.000000, nodes=31 <= 300.000000)
                                                      @ 8  java.lang.String.lastIndexOf(int, int):int (29 bytes)   relevance-based (relevance=1.364533, probability=0.007311, bonus=1.000000, nodes=40 <= 300.000000)
                 n                                @ 16  java.lang.Throwable.fillInStackTrace(int):Throwable (0 bytes)   not inlining it is a non-intrinsic native method
              s                                   @ 24  java.lang.Throwable.fillInStackTrace():Throwable (29 bytes)   relevance-based (relevance=1.000000, probability=0.007804, bonus=1.000000, nodes=34 <= 300.000000)
                                                @ 2  java.lang.Throwable.<init>(String):void (34 bytes)   relevance-based (relevance=16.000000, probability=0.007804, bonus=1.000000, nodes=45 <= 300.000000)
                                              @ 61  jdk.internal.misc.VM.getSavedProperties():Map (23 bytes)   relevance-based (relevance=1.000800, probability=0.015607, bonus=1.000000, nodes=147 <= 300.000000)
                                                          @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.007270, bonus=1.000000, nodes=5)
                                                        @ 1  java.lang.String.length():int (11 bytes)   trivial (relevance=1.162748, probability=0.007270, bonus=1.000000, nodes=8)
                                            @ 14  jdk.vm.ci.services.Services.getSavedProperties():Map (81 bytes)   relevance-based (relevance=2.000000, probability=0.062428, bonus=1.000000, nodes=201 <= 300.000000)
                                                          @ 6  jdk.internal.util.Preconditions.checkFromToIndex(int, int, int, BiFunction):int (24 bytes)   relevance-based (relevance=1.000000, probability=0.007270, bonus=1.000000, nodes=11 <= 300.000000)
                                                        @ 8  java.lang.String.checkBoundsBeginEnd(int, int, int):void (11 bytes)   relevance-based (relevance=1.162748, probability=0.007270, bonus=1.000000, nodes=10 <= 300.000000)
                                                        @ 28  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=0.006252, bonus=1.000000, nodes=9)
                                          @ 4  jdk.graal.compiler.hotspot.HotSpotGraalOptionValues.parseOptions():EconomicMap (417 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.062428, bonus=1.000000, nodes=460 > 300.000000)
                            @ 4  jdk.graal.compiler.options.OptionValues.newOptionMap():EconomicMap (7 bytes)   inline method (bytecode parsing)
                            @ 20  java.lang.String.<init>(byte[], byte):void (15 bytes)   inline method (bytecode parsing)
                              @ 3  org.graalvm.collections.EconomicMap.create(Equivalence):EconomicMap (6 bytes)   inline method (bytecode parsing)
                                @ 2  org.graalvm.collections.EconomicMapImpl.create(Equivalence, boolean):EconomicMapImpl (13 bytes)   inline method (bytecode parsing)
                                  @ 6  org.graalvm.collections.EconomicMapImpl.<init>(Equivalence, boolean):void (30 bytes)   inline method (bytecode parsing)
                                  @ 9  org.graalvm.collections.EconomicMapImpl.intercept(EconomicMapImpl):EconomicMapImpl (2 bytes)   inline method (bytecode parsing)
                            @ 13  java.util.Arrays.copyOfRangeByte(byte[], int, int):byte[] (33 bytes)   inline method (bytecode parsing)
                              @ 2  java.util.Arrays.checkLength(int, int):void (38 bytes)   inline method (bytecode parsing)
                                                            @ 24  java.lang.Math.min(int, int):int (11 bytes)   trivial (relevance=1.000010, probability=0.004926, bonus=1.000000, nodes=7)
                                            @ 1  org.graalvm.collections.UnmodifiableEconomicMap.getEntries():UnmodifiableMapCursor (0 bytes)   not inlining no type profile exists
                                            @ 8  org.graalvm.collections.UnmodifiableMapCursor.advance():boolean (0 bytes)   not inlining no type profile exists
                                                          @ 16  java.util.Arrays.copyOfRange(byte[], int, int):byte[] (25 bytes)   relevance-based (relevance=1.000000, probability=0.006252, bonus=1.000000, nodes=33 <= 300.000000)
                                            @ 18  org.graalvm.collections.UnmodifiableMapCursor.getKey():Object (0 bytes)   not inlining no type profile exists
                                            @ 27  org.graalvm.collections.UnmodifiableMapCursor.getValue():Object (0 bytes)   not inlining no type profile exists
                                                        @ 41  java.lang.StringLatin1.newString(byte[], int, int):String (24 bytes)   relevance-based (relevance=1.000000, probability=0.006252, bonus=1.000000, nodes=51 <= 300.000000)
                                              @ 32  jdk.graal.compiler.options.OptionValues.encodeNull(Object):Object (12 bytes)   relevance-based (relevance=1.000000, probability=0.062428, bonus=1.000000, nodes=14 <= 300.000000)
                                                      @ 62  java.lang.String.substring(int, int):String (58 bytes)   relevance-based (relevance=1.356969, probability=0.007270, bonus=1.000000, nodes=72 <= 300.000000)
                            @ 111  org.graalvm.collections.EconomicMapImpl.setKey(int, Object):void (10 bytes)   inline method (bytecode parsing)
                            @ 143  org.graalvm.collections.EconomicMapImpl.size():int (10 bytes)   inline method (bytecode parsing)
                            @ 147  org.graalvm.collections.EconomicMapImpl.size():int (10 bytes)   inline method (bytecode parsing)
                 n                                  @ 65  java.lang.String.intern():String (0 bytes)   not inlining it is a non-intrinsic native method
                                                    @ 13  java.lang.Class.getPackageName():String (81 bytes)   relevance-based (relevance=1.000000, probability=0.012486, bonus=1.000000, nodes=156 <= 300.000000)
                                              @ 35  org.graalvm.collections.EconomicMapImpl.put(Object, Object):Object (192 bytes)   not inlining too large previous low-level graph (low-level-nodes: 1300, relevance=1.000000, probability=0.062428, bonus=1.000000, nodes=101)
                                            @ 10  jdk.graal.compiler.options.OptionValues.initMap(EconomicMap, UnmodifiableEconomicMap):void (45 bytes)   not inlining callee invoke probability is too high (invokeP=6.000000, relevance=1.000000, probability=0.062428, bonus=1.000000, nodes=44)
                                          @ 7  jdk.graal.compiler.options.OptionValues.<init>(UnmodifiableEconomicMap):void (19 bytes)   relevance-based (relevance=1.000000, probability=0.062428, bonus=1.000000, nodes=24 <= 300.000000)
                                        @ 21  jdk.graal.compiler.hotspot.HotSpotGraalOptionValues.initializeOptions():OptionValues (11 bytes)   relevance-based (relevance=1.000000, probability=0.062428, bonus=1.000000, nodes=27 <= 300.000000)
                            @ 1  java.util.Objects.requireNonNull(Object):Object (14 bytes)   inline method (bytecode parsing)
                                      @ 22  jdk.graal.compiler.hotspot.HotSpotGraalOptionValues.defaultOptions():OptionValues (41 bytes)   relevance-based (relevance=6.183661, probability=0.249714, bonus=1.000000, nodes=60 <= 300.000000)
                            @ 6  java.util.Objects.requireNonNull(Object):Object (14 bytes)   inline method (bytecode parsing)
                            @ 36  java.lang.module.ModuleDescriptor.isOpen():boolean (5 bytes)   inline accessor method (bytecode parsing)
                            @ 23  jdk.graal.compiler.options.OptionValues.get(OptionKey):Object (9 bytes)   inline method (bytecode parsing)
                            @ 46  java.lang.module.ModuleDescriptor.isAutomatic():boolean (5 bytes)   inline accessor method (bytecode parsing)
                            @ 13  jdk.graal.compiler.options.OptionKey.getDefaultValue():Object (5 bytes)   inline accessor method (bytecode parsing)
                                                        @ 1  java.lang.Module.isNamed():boolean (13 bytes)   trivial (relevance=1.295455, probability=0.012486, bonus=1.000000, nodes=9)
                                        @ 2  org.graalvm.collections.UnmodifiableEconomicMap.get(Object):Object (0 bytes)   not inlining no type profile exists
                                          @ 18  jdk.graal.compiler.options.OptionValues.decodeNull(Object):Object (13 bytes)   relevance-based (relevance=1.000000, probability=0.124857, bonus=1.000000, nodes=15 <= 300.000000)
                                        @ 5  jdk.graal.compiler.options.OptionValues.get(UnmodifiableEconomicMap, OptionKey):Object (22 bytes)   relevance-based (relevance=1.000000, probability=0.249714, bonus=1.000000, nodes=26 <= 300.000000)
                                      @ 25  jdk.graal.compiler.options.OptionKey.getValue(OptionValues):Object (27 bytes)   relevance-based (relevance=4.000000, probability=0.249714, bonus=1.000000, nodes=31 <= 300.000000)
                            @ 5  java.lang.String.contains(CharSequence):boolean (19 bytes)   inline method (bytecode parsing)
                              @ 2  java.lang.String.toString():String (2 bytes)   inline method (bytecode parsing)
                            @ 24  java.lang.String.contains(CharSequence):boolean (19 bytes)   inline method (bytecode parsing)
                              @ 2  java.lang.String.toString():String (2 bytes)   inline method (bytecode parsing)
                                                            @ 2  java.util.HashMap.getNode(Object):HashMap$Node (150 bytes)   not inlining too large previous low-level graph (low-level-nodes: 643, relevance=1.198094, probability=0.012406, bonus=1.000000, nodes=108)
                            @ 44  java.lang.String.contains(CharSequence):boolean (19 bytes)   inline method (bytecode parsing)
                                                          @ 51  java.util.HashMap.get(Object):Object (19 bytes)   relevance-based (relevance=1.000000, probability=0.012406, bonus=1.000000, nodes=19 <= 300.000000)
                              @ 2  java.lang.String.toString():String (2 bytes)   inline method (bytecode parsing)
                            @ 64  java.lang.String.contains(CharSequence):boolean (19 bytes)   inline method (bytecode parsing)
                              @ 2  java.lang.String.toString():String (2 bytes)   inline method (bytecode parsing)
                            @ 76  java.lang.String.valueOf(long):String (5 bytes)   inline method (bytecode parsing)
                                                          @ 8  java.util.Set.contains(Object):boolean (0 bytes)   not inlining no type profile exists
                                                          @ 27  java.util.Set.contains(Object):boolean (0 bytes)   not inlining no type profile exists
                                                            @ 38  java.lang.Module.isNamed():boolean (13 bytes)   trivial (relevance=2.000000, probability=0.000775, bonus=1.000000, nodes=9)
                                                          @ 48  java.util.Set.contains(Object):boolean (0 bytes)   not inlining no type profile exists
                                                          @ 60  java.lang.Module.allows(Set, Module):boolean (60 bytes)   relevance-based (relevance=1.198094, probability=0.012406, bonus=1.000000, nodes=47 <= 300.000000)
                                                        @ 70  java.lang.Module.isStaticallyExportedOrOpen(String, Module, boolean):boolean (70 bytes)   relevance-based (relevance=1.295455, probability=0.012486, bonus=1.000000, nodes=91 <= 300.000000)
                            @ 7  java.lang.WeakPairMap.get(Object, Object):Object (17 bytes)   inline method (bytecode parsing)
                                          @ 1  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.124857, bonus=1.000000, nodes=5)
                              @ 10  java.lang.WeakPairMap$Pair.lookup(Object, Object):WeakPairMap$Pair (10 bytes)   inline method (bytecode parsing)
                                          @ 7  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.124857, bonus=1.000000, nodes=5)
                            @ 68  java.lang.WeakPairMap.get(Object, Object):Object (17 bytes)   inline method (bytecode parsing)
                              @ 10  java.lang.WeakPairMap$Pair.lookup(Object, Object):WeakPairMap$Pair (10 bytes)   inline method (bytecode parsing)
                                          @ 14  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=0.124857, bonus=1.000000, nodes=9)
                            @ 13  java.util.concurrent.locks.ReentrantLock.lock():void (8 bytes)   inline method (bytecode parsing)
                                          @ 28  java.lang.StringLatin1.indexOf(byte[], byte[]):int (25 bytes)   relevance-based (relevance=1.000000, probability=0.124857, bonus=1.000000, nodes=16 <= 300.000000)
                            @ 25  java.util.concurrent.locks.ReentrantLock.unlock():void (10 bytes)   inline method (bytecode parsing)
                              @ 5  java.util.concurrent.locks.AbstractQueuedSynchronizer.release(int):boolean (19 bytes)   inline method (bytecode parsing)
                                        @ 7  java.lang.String.indexOf(String):int (64 bytes)   relevance-based (relevance=2.000000, probability=0.124857, bonus=1.000000, nodes=25 <= 300.000000)
                                        @ 14  jdk.graal.compiler.serviceprovider.GraalServices.getExecutionID():String (12 bytes)   trivial (relevance=1.000000, probability=0.062428, bonus=1.000000, nodes=3)
                                                            @ 4  java.lang.ref.ReferenceQueue.poll():Reference (40 bytes)   not inlining too large previous low-level graph (low-level-nodes: 445, relevance=0.945918, probability=0.009639, bonus=1.000000, nodes=45)
                                                          @ 1  java.lang.WeakPairMap.expungeStaleAssociations():void (31 bytes)   relevance-based (relevance=0.945918, probability=0.009639, bonus=1.000000, nodes=13 <= 283.775410)
                            @ 6  java.util.Objects.requireNonNull(Object):Object (14 bytes)   inline method (bytecode parsing)
                            @ 14  java.util.Objects.requireNonNull(Object):Object (14 bytes)   inline method (bytecode parsing)
                                          @ 1  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.062428, bonus=1.000000, nodes=5)
                                                          @ 6  java.lang.WeakPairMap$Pair$Lookup.<init>(Object, Object):void (21 bytes)   relevance-based (relevance=0.945918, probability=0.009639, bonus=1.000000, nodes=11 <= 283.775410)
                                          @ 7  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.062428, bonus=1.000000, nodes=5)
                                          @ 14  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=0.062428, bonus=1.000000, nodes=9)
                            @ 4  java.util.concurrent.ConcurrentHashMap.spread(int):int (10 bytes)   inline method (bytecode parsing)
                                          @ 28  java.lang.StringLatin1.indexOf(byte[], byte[]):int (25 bytes)   relevance-based (relevance=1.000000, probability=0.062428, bonus=1.000000, nodes=16 <= 300.000000)
                                        @ 7  java.lang.String.indexOf(String):int (64 bytes)   relevance-based (relevance=1.000000, probability=0.062428, bonus=1.000000, nodes=25 <= 300.000000)
                                          @ 1  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.124857, bonus=1.000000, nodes=5)
                                          @ 7  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.124857, bonus=1.000000, nodes=5)
                                          @ 14  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=0.124857, bonus=1.000000, nodes=9)
                                          @ 28  java.lang.StringLatin1.indexOf(byte[], byte[]):int (25 bytes)   relevance-based (relevance=1.000000, probability=0.124857, bonus=1.000000, nodes=16 <= 300.000000)
                            @ 8  java.lang.WeakPairMap$Pair.hashCode(Object, Object):int (10 bytes)   inline method (bytecode parsing)
                                        @ 7  java.lang.String.indexOf(String):int (64 bytes)   relevance-based (relevance=2.000020, probability=0.124857, bonus=1.000000, nodes=25 <= 300.000000)
                                                            @ 1  java.lang.WeakPairMap$Pair$Lookup.hashCode():int (12 bytes)   relevance-based (relevance=2.736613, probability=0.009639, bonus=1.000000, nodes=12 <= 300.000000)
                                          @ 1  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.124857, bonus=1.000000, nodes=5)
                                          @ 7  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.124857, bonus=1.000000, nodes=5)
                                          @ 14  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=0.124857, bonus=1.000000, nodes=9)
                                                            @ 34  java.util.concurrent.ConcurrentHashMap.tabAt(ConcurrentHashMap$Node[], int):ConcurrentHashMap$Node (22 bytes)   relevance-based (relevance=2.725154, probability=0.009598, bonus=1.000000, nodes=11 <= 300.000000)
                                          @ 28  java.lang.StringLatin1.indexOf(byte[], byte[]):int (25 bytes)   relevance-based (relevance=1.000000, probability=0.124857, bonus=1.000000, nodes=16 <= 300.000000)
                                        @ 7  java.lang.String.indexOf(String):int (64 bytes)   relevance-based (relevance=2.000020, probability=0.124857, bonus=1.000000, nodes=25 <= 300.000000)
                            @ 28  java.lang.String.<init>(byte[], byte):void (15 bytes)   inline method (bytecode parsing)
                                        @ 1  java.lang.Long.toString(long):String (55 bytes)   not inlining too large previous low-level graph (low-level-nodes: 426, relevance=1.000010, probability=0.062428, bonus=1.000000, nodes=19)
                                                            @ 93  java.util.concurrent.ConcurrentHashMap$ForwardingNode.find(int, Object):ConcurrentHashMap$Node (129 bytes)   not inlining relevance-based (relevance=0.000112, probability=0.000000, bonus=1.000000, nodes=119 > 0.033703)
                            @ 1  java.lang.ref.Reference.get():Object (5 bytes)   inline accessor method (bytecode parsing)
                                                                @ 10  java.lang.WeakPairMap$Pair$Weak.first():Object (5 bytes)   trivial (relevance=0.948504, probability=0.003332, bonus=1.000000, nodes=6)
                            @ 4  java.lang.ref.Reference.get():Object (5 bytes)   inline accessor method (bytecode parsing)
                                                                @ 20  java.lang.WeakPairMap$Pair$Weak.second():Object (8 bytes)   relevance-based (relevance=0.946143, probability=0.003324, bonus=1.000000, nodes=10 <= 283.842799)
                                                              @ 19  java.lang.WeakPairMap$Pair.equals(Object, Object, WeakPairMap$Pair):boolean (34 bytes)   relevance-based (relevance=0.946143, probability=0.003332, bonus=1.000000, nodes=31 <= 283.842799)
                                                            @ 73  java.lang.WeakPairMap$Pair$Lookup.equals(Object):boolean (31 bytes)   relevance-based (relevance=0.946143, probability=0.003332, bonus=1.000000, nodes=40 <= 283.842799)
                            @ 1  java.lang.ref.Reference.get():Object (5 bytes)   inline accessor method (bytecode parsing)
                                                                @ 10  java.lang.WeakPairMap$Pair$Weak.first():Object (5 bytes)   trivial (relevance=0.548245, probability=0.001233, bonus=1.000000, nodes=6)
                            @ 4  java.lang.ref.Reference.get():Object (5 bytes)   inline accessor method (bytecode parsing)
                                                                @ 20  java.lang.WeakPairMap$Pair$Weak.second():Object (8 bytes)   relevance-based (relevance=0.546880, probability=0.001230, bonus=1.000000, nodes=10 <= 164.063980)
                                                              @ 19  java.lang.WeakPairMap$Pair.equals(Object, Object, WeakPairMap$Pair):boolean (34 bytes)   relevance-based (relevance=0.546880, probability=0.001233, bonus=1.000000, nodes=31 <= 164.063980)
                                                            @ 149  java.lang.WeakPairMap$Pair$Lookup.equals(Object):boolean (31 bytes)   relevance-based (relevance=0.546880, probability=0.001233, bonus=1.000000, nodes=40 <= 164.063980)
                                                          @ 13  java.util.concurrent.ConcurrentHashMap.get(Object):Object (162 bytes)   relevance-based (relevance=0.945918, probability=0.009639, bonus=1.000000, nodes=187 <= 283.775410)
                                                        @ 82  java.lang.Module.isReflectivelyExportedOrOpen(String, Module, boolean):boolean (182 bytes)   not inlining relevance-based (relevance=0.930811, probability=0.009639, bonus=1.000000, nodes=283 > 279.243370)
                                                      @ 14  java.lang.Module.implIsExportedOrOpen(String, Module, boolean):boolean (92 bytes)   relevance-based (relevance=1.000000, probability=0.012486, bonus=1.000000, nodes=117 <= 300.000000)
                                                    @ 20  java.lang.Module.isExported(String, Module):boolean (18 bytes)   relevance-based (relevance=2.330603, probability=0.012486, bonus=1.000000, nodes=125 <= 300.000000)
                                                  @ 22  jdk.internal.reflect.Reflection.verifyModuleAccess(Module, Class):boolean (24 bytes)   relevance-based (relevance=8.000000, probability=0.024973, bonus=1.000000, nodes=286 <= 300.000000)
                            @ 206  java.lang.StringBuilder.<init>(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 215  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 237  java.lang.StringBuilder.append(char):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 242  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                                                @ 24  jdk.internal.reflect.Reflection.verifyMemberAccess(Class, Class, Class, int):boolean (200 bytes)   not inlining relevance-based (relevance=2.000000, probability=0.024973, bonus=1.000000, nodes=394 > 300.000000)
                            @ 254  java.lang.StringBuilder.toString():String (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.String.<init>(StringBuilder):void (7 bytes)   inline method (bytecode parsing)
                                                @ 3  java.lang.AbstractStringBuilder.<init>(int):void (39 bytes)   relevance-based (relevance=1.000000, probability=0.012486, bonus=1.000000, nodes=11 <= 300.000000)
                                                @ 2  java.lang.AbstractStringBuilder.append(String):AbstractStringBuilder (45 bytes)   not inlining too large previous low-level graph (low-level-nodes: 345, relevance=1.000000, probability=0.012486, bonus=1.000000, nodes=21)
                            @ 11  java.lang.StringBuilder.<init>():void (7 bytes)   inline method (bytecode parsing)
                                          @ 1  java.lang.String.toString():String (2 bytes)   trivial (relevance=8.000000, probability=0.062428, bonus=1.000000, nodes=4)
                            @ 16  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 23  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 26  java.lang.StringBuilder.toString():String (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.String.<init>(StringBuilder):void (7 bytes)   inline method (bytecode parsing)
                                          @ 8  java.lang.String.toString():String (2 bytes)   trivial (relevance=8.000000, probability=0.062428, bonus=1.000000, nodes=4)
                            @ 34  java.lang.Integer.toHexString(int):String (6 bytes)   inline method (bytecode parsing)
                            @ 42  java.lang.StringBuilder.<init>():void (7 bytes)   inline method (bytecode parsing)
                            @ 48  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 52  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 55  java.lang.StringBuilder.toString():String (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.String.<init>(StringBuilder):void (7 bytes)   inline method (bytecode parsing)
                                            @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.062428, bonus=1.000000, nodes=5)
                                          @ 16  java.lang.String.length():int (11 bytes)   trivial (relevance=8.000000, probability=0.062428, bonus=1.000000, nodes=8)
                                                    @ 1  java.lang.Module.isNamed():boolean (13 bytes)   trivial (relevance=2.000000, probability=0.012486, bonus=1.000000, nodes=9)
                                            @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.062428, bonus=1.000000, nodes=5)
                                          @ 22  java.lang.String.length():int (11 bytes)   trivial (relevance=8.000000, probability=0.062428, bonus=1.000000, nodes=5)
                                                    @ 3  java.lang.AbstractStringBuilder.<init>(int):void (39 bytes)   relevance-based (relevance=1.000000, probability=0.006243, bonus=1.000000, nodes=11 <= 300.000000)
                                            @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.062428, bonus=1.000000, nodes=5)
                                          @ 29  java.lang.String.length():int (11 bytes)   trivial (relevance=21.333333, probability=0.062428, bonus=1.000000, nodes=8)
                                                    @ 2  java.lang.AbstractStringBuilder.append(String):AbstractStringBuilder (45 bytes)   not inlining too large previous low-level graph (low-level-nodes: 345, relevance=1.000000, probability=0.006243, bonus=1.000000, nodes=21)
                                          @ 68  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=21.333333, probability=0.062428, bonus=1.000000, nodes=9)
                                                    @ 2  java.lang.AbstractStringBuilder.append(String):AbstractStringBuilder (45 bytes)   not inlining too large previous low-level graph (low-level-nodes: 345, relevance=1.000000, probability=0.006243, bonus=1.000000, nodes=23)
                            @ 5  java.lang.AbstractStringBuilder.getValue():byte[] (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 74  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=21.333333, probability=0.062428, bonus=1.000000, nodes=5)
                                          @ 81  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=21.333333, probability=0.062428, bonus=1.000000, nodes=9)
                            @ 1  java.lang.AbstractStringBuilder.length():int (5 bytes)   inline accessor method (bytecode parsing)
                                                      @ 10  java.lang.StringBuilder.length():int (5 bytes)   trivial (relevance=1.000000, probability=0.006243, bonus=1.000000, nodes=5)
                                                      @ 16  java.lang.AbstractStringBuilder.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=0.006243, bonus=1.000000, nodes=9)
                            @ 162  java.lang.StringConcatHelper.newArray(long):byte[] (40 bytes)   inline method (bytecode parsing)
                            @ 13  java.util.Arrays.copyOfRangeByte(byte[], int, int):byte[] (33 bytes)   inline method (bytecode parsing)
                              @ 2  java.util.Arrays.checkLength(int, int):void (38 bytes)   inline method (bytecode parsing)
                            @ 287  java.lang.String.<init>(byte[], byte):void (15 bytes)   inline method (bytecode parsing)
                                                        @ 24  java.lang.Math.min(int, int):int (11 bytes)   trivial (relevance=1.000010, probability=0.004918, bonus=1.000000, nodes=7)
                                                      @ 32  java.util.Arrays.copyOfRange(byte[], int, int):byte[] (25 bytes)   relevance-based (relevance=1.000000, probability=0.006243, bonus=1.000000, nodes=33 <= 300.000000)
                                                    @ 3  java.lang.String.<init>(AbstractStringBuilder, Void):void (99 bytes)   relevance-based (relevance=1.000000, probability=0.006243, bonus=1.000000, nodes=48 <= 300.000000)
                            @ 16  java.lang.Math.max(int, int):int (11 bytes)   inline method (bytecode parsing)
                            @ 46  java.lang.String.<init>(byte[], byte):void (15 bytes)   inline method (bytecode parsing)
                                              @ 3  java.lang.Math.max(int, int):int (11 bytes)   trivial (relevance=0.500000, probability=0.000366, bonus=1.000000, nodes=8)
                                            @ 94  jdk.internal.util.ArraysSupport.newLength(int, int, int):int (27 bytes)   relevance-based (relevance=0.500000, probability=0.000366, bonus=1.000000, nodes=15 <= 150.000000)
                                                      @ 36  java.lang.Integer.formatUnsignedInt(int, int, byte[], int):void (40 bytes)   relevance-based (relevance=1.000000, probability=0.006243, bonus=1.000000, nodes=30 <= 300.000000)
                                                    @ 2  java.lang.Integer.toUnsignedString0(int, int):String (76 bytes)   relevance-based (relevance=1.269387, probability=0.006243, bonus=1.000000, nodes=46 <= 300.000000)
                                              @ 25  java.lang.Math.min(int, int):int (11 bytes)   trivial (relevance=0.500005, probability=0.000357, bonus=1.000000, nodes=7)
                                            @ 97  java.util.Arrays.copyOf(int[], int):int[] (33 bytes)   relevance-based (relevance=0.500000, probability=0.000366, bonus=1.000000, nodes=28 <= 150.000000)
                                                    @ 3  java.lang.AbstractStringBuilder.<init>(int):void (39 bytes)   relevance-based (relevance=1.269387, probability=0.006243, bonus=1.000000, nodes=11 <= 300.000000)
                                                    @ 2  java.lang.AbstractStringBuilder.append(String):AbstractStringBuilder (45 bytes)   not inlining too large previous low-level graph (low-level-nodes: 345, relevance=1.269387, probability=0.006243, bonus=1.000000, nodes=21)
                                                    @ 2  java.lang.AbstractStringBuilder.append(String):AbstractStringBuilder (45 bytes)   not inlining too large previous low-level graph (low-level-nodes: 345, relevance=1.269387, probability=0.006243, bonus=1.000000, nodes=21)
                                              @ 51  jdk.internal.misc.Unsafe.allocateUninitializedArray0(Class, int):Object (90 bytes)   trivial (relevance=0.499990, probability=0.000366, bonus=1.000000, nodes=6)
                            @ 5  java.lang.AbstractStringBuilder.getValue():byte[] (5 bytes)   inline accessor method (bytecode parsing)
                                            @ 33  jdk.internal.misc.Unsafe.allocateUninitializedArray(Class, int):Object (55 bytes)   relevance-based (relevance=0.499990, probability=0.000366, bonus=1.000000, nodes=10 <= 149.997000)
                                          @ 120  java.lang.StringLatin1.replace(byte[], int, byte[], int, byte[], int):String (291 bytes)   relevance-based (relevance=1.000000, probability=0.002926, bonus=1.000000, nodes=208 <= 300.000000)
                            @ 1  java.lang.AbstractStringBuilder.length():int (5 bytes)   inline accessor method (bytecode parsing)
                                                      @ 10  java.lang.StringBuilder.length():int (5 bytes)   trivial (relevance=1.000000, probability=0.006243, bonus=1.000000, nodes=5)
                                                      @ 16  java.lang.AbstractStringBuilder.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=0.006243, bonus=1.000000, nodes=9)
                            @ 13  java.util.Arrays.copyOfRangeByte(byte[], int, int):byte[] (33 bytes)   inline method (bytecode parsing)
                              @ 2  java.util.Arrays.checkLength(int, int):void (38 bytes)   inline method (bytecode parsing)
                                                        @ 24  java.lang.Math.min(int, int):int (11 bytes)   trivial (relevance=1.000010, probability=0.004918, bonus=1.000000, nodes=7)
                                                      @ 32  java.util.Arrays.copyOfRange(byte[], int, int):byte[] (25 bytes)   relevance-based (relevance=1.000000, probability=0.006243, bonus=1.000000, nodes=33 <= 300.000000)
                                                    @ 3  java.lang.String.<init>(AbstractStringBuilder, Void):void (99 bytes)   relevance-based (relevance=1.269387, probability=0.006243, bonus=1.000000, nodes=48 <= 300.000000)
                                                  @ 11  java.lang.Module.toString():String (59 bytes)   relevance-based (relevance=1.000000, probability=0.012486, bonus=1.000000, nodes=184 <= 300.000000)
                            @ 588  java.lang.StringUTF16.compress(byte[], int, int):byte[] (20 bytes)   inline method (bytecode parsing)
                            @ 605  java.lang.String.<init>(byte[], byte):void (15 bytes)   inline method (bytecode parsing)
                            @ 616  java.lang.String.<init>(byte[], byte):void (15 bytes)   inline method (bytecode parsing)
                                                @ 2  java.lang.String.valueOf(Object):String (15 bytes)   relevance-based (relevance=1.000000, probability=0.012486, bonus=1.000000, nodes=193 <= 300.000000)
                                                @ 2  java.lang.AbstractStringBuilder.append(String):AbstractStringBuilder (45 bytes)   not inlining too large previous low-level graph (low-level-nodes: 345, relevance=2.538754, probability=0.012486, bonus=1.000000, nodes=21)
                                            @ 76  java.lang.StringLatin1.indexOf(byte[], byte[]):int (25 bytes)   relevance-based (relevance=1.000000, probability=0.010242, bonus=1.000000, nodes=16 <= 300.000000)
                            @ 5  java.lang.AbstractStringBuilder.getValue():byte[] (5 bytes)   inline accessor method (bytecode parsing)
                            @ 8  java.lang.StringUTF16.length(byte[]):int (5 bytes)   inline method (bytecode parsing)
                            @ 20  java.lang.StringUTF16.length(byte[]):int (5 bytes)   inline method (bytecode parsing)
                            @ 1  java.lang.AbstractStringBuilder.length():int (5 bytes)   inline accessor method (bytecode parsing)
                                                  @ 10  java.lang.StringBuilder.length():int (5 bytes)   trivial (relevance=1.000000, probability=0.012486, bonus=1.000000, nodes=5)
                                            @ 95  java.lang.StringUTF16.indexOfLatin1(byte[], byte[]):int (31 bytes)   relevance-based (relevance=1.000010, probability=0.010242, bonus=1.000000, nodes=22 <= 300.000000)
                                                  @ 16  java.lang.AbstractStringBuilder.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=0.012486, bonus=1.000000, nodes=9)
                            @ 13  java.util.Arrays.copyOfRangeByte(byte[], int, int):byte[] (33 bytes)   inline method (bytecode parsing)
                            @ 4  java.lang.StringUTF16.checkBoundsBeginEnd(int, int, byte[]):void (10 bytes)   inline method (bytecode parsing)
                              @ 2  java.util.Arrays.checkLength(int, int):void (38 bytes)   inline method (bytecode parsing)
                              @ 3  java.lang.StringUTF16.length(byte[]):int (5 bytes)   inline method (bytecode parsing)
                            @ 11  java.lang.String.checkBoundsBeginEnd(int, int, int):void (11 bytes)   inline method (bytecode parsing)
                              @ 6  jdk.internal.util.Preconditions.checkFromToIndex(int, int, int, BiFunction):int (24 bytes)   inline method (bytecode parsing)
                                                    @ 24  java.lang.Math.min(int, int):int (11 bytes)   trivial (relevance=1.000010, probability=0.009837, bonus=1.000000, nodes=7)
                                                  @ 32  java.util.Arrays.copyOfRange(byte[], int, int):byte[] (25 bytes)   relevance-based (relevance=1.000000, probability=0.012486, bonus=1.000000, nodes=33 <= 300.000000)
                                                @ 6  jdk.internal.util.Preconditions.checkFromToIndex(int, int, int, BiFunction):int (24 bytes)   relevance-based (relevance=1.000000, probability=0.010242, bonus=1.000000, nodes=14 <= 300.000000)
                                                @ 3  java.lang.String.<init>(AbstractStringBuilder, Void):void (99 bytes)   relevance-based (relevance=2.538754, probability=0.012486, bonus=1.000000, nodes=48 <= 300.000000)
                                              @ 6  java.lang.String.checkBoundsBeginEnd(int, int, int):void (11 bytes)   relevance-based (relevance=1.000010, probability=0.010242, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 178  java.lang.StringUTF16.indexOfLatin1(byte[], int, byte[], int, int):int (24 bytes)   relevance-based (relevance=1.000010, probability=0.010242, bonus=1.000000, nodes=24 <= 300.000000)
                                              @ 39  java.util.ServiceLoader.checkCaller(Class, Class):void (85 bytes)   not inlining relevance-based (relevance=4.000000, probability=0.024973, bonus=1.000000, nodes=314 > 300.000000)
                                          @ 151  java.lang.StringUTF16.replace(byte[], int, boolean, byte[], int, boolean, byte[], int, boolean):String (620 bytes)   not inlining relevance-based (relevance=28.000280, probability=0.020484, bonus=1.000000, nodes=311 > 300.000000)
                                        @ 79  java.lang.String.replace(CharSequence, CharSequence):String (258 bytes)   relevance-based (relevance=1.000010, probability=0.062428, bonus=1.000000, nodes=237 <= 300.000000)
                            @ 0  jdk.internal.misc.VM.initLevel():int (4 bytes)   inline method (bytecode parsing)
                            @ 45  java.lang.IllegalStateException.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  java.lang.RuntimeException.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                                @ 2  java.lang.Exception.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                            @ 32  java.lang.ClassLoader.getBuiltinAppClassLoader():ClassLoader (4 bytes)   inline method (bytecode parsing)
                              @ 0  jdk.internal.loader.ClassLoaders.appClassLoader():ClassLoader (4 bytes)   inline method (bytecode parsing)
                                      @ 37  jdk.graal.compiler.hotspot.HotSpotTTYStreamProvider$LogStreamOptionKey.makeFilename(String):String (157 bytes)   not inlining relevance-based (relevance=2.000000, probability=0.124857, bonus=1.000000, nodes=434 > 300.000000)
                                                  @ 0  java.lang.System.allowSecurityManager():boolean (13 bytes)   trivial (relevance=0.333600, probability=0.001249, bonus=1.000000, nodes=8)
                                                @ 75  java.lang.System.getSecurityManager():SecurityManager (12 bytes)   relevance-based (relevance=0.333333, probability=0.001249, bonus=1.000000, nodes=14 <= 100.000000)
                                        @ 17  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=0.435390, probability=0.037835, bonus=1.000000, nodes=9)
                                                    @ 0  java.lang.System.allowSecurityManager():boolean (13 bytes)   trivial (relevance=0.333597, probability=0.000624, bonus=1.000000, nodes=8)
                                                  @ 0  java.lang.System.getSecurityManager():SecurityManager (12 bytes)   relevance-based (relevance=0.333330, probability=0.000624, bonus=1.000000, nodes=14 <= 99.999000)
                                        @ 27  java.lang.StringLatin1.hashCode(byte[]):int (52 bytes)   relevance-based (relevance=0.435390, probability=0.037835, bonus=1.000000, nodes=22 <= 130.617149)
                                      @ 49  java.lang.String.hashCode():int (60 bytes)   relevance-based (relevance=2.000000, probability=0.124857, bonus=1.000000, nodes=47 <= 300.000000)
                            @ 7  java.lang.Class.getClassLoader0():ClassLoader (5 bytes)   inline accessor method (bytecode parsing)
                                                  @ 9  java.lang.ClassLoader.getClassLoader(Class):ClassLoader (11 bytes)   relevance-based (relevance=0.083399, probability=0.000312, bonus=1.000000, nodes=13 <= 25.019739)
                                    @ 1  jdk.graal.compiler.hotspot.HotSpotTTYStreamProvider$LogStreamOptionKey$DelayedOutputStream.lazy():OutputStream (266 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.998856, bonus=1.000000, nodes=307 > 300.000000)
                                                @ 89  java.lang.ClassLoader.checkClassLoaderPermission(ClassLoader, Class):void (29 bytes)   not inlining relevance-based (relevance=0.166665, probability=0.000624, bonus=1.000000, nodes=50 > 49.999500)
                                  @ 7  java.io.OutputStream.write(byte[], int, int):void (34 bytes)   not inlining no type profile exists
                                  @ 11  jdk.graal.compiler.hotspot.HotSpotTTYStreamProvider$LogStreamOptionKey$DelayedOutputStream.write(byte[], int, int):void (11 bytes)   relevance-based (relevance=1.001146, probability=1.000000, bonus=1.000000, nodes=84 <= 300.000000)
                 n                                @ 16  java.lang.Throwable.fillInStackTrace(int):Throwable (0 bytes)   not inlining it is a non-intrinsic native method
              s                                   @ 24  java.lang.Throwable.fillInStackTrace():Throwable (29 bytes)   relevance-based (relevance=0.333333, probability=0.001249, bonus=1.000000, nodes=34 <= 100.000000)
                            @ 11  jdk.internal.misc.InternalLock.lock():void (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.util.concurrent.locks.ReentrantLock.lock():void (8 bytes)   inline method (bytecode parsing)
                                                @ 2  java.lang.Throwable.<init>(String):void (34 bytes)   relevance-based (relevance=0.333333, probability=0.001249, bonus=1.000000, nodes=45 <= 100.000000)
                            @ 22  jdk.internal.misc.InternalLock.unlock():void (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.util.concurrent.locks.ReentrantLock.unlock():void (10 bytes)   inline method (bytecode parsing)
                                @ 5  java.util.concurrent.locks.AbstractQueuedSynchronizer.release(int):boolean (19 bytes)   inline method (bytecode parsing)
                                              @ 46  java.lang.ClassLoader.getSystemClassLoader():ClassLoader (96 bytes)   relevance-based (relevance=1.000000, probability=0.006243, bonus=1.000000, nodes=103 <= 300.000000)
                                  @ 25  java.io.BufferedOutputStream.flush():void (60 bytes)   not inlining relevance-based (relevance=0.001146, probability=0.001144, bonus=1.000000, nodes=68 > 0.343675)
                                @ 18  java.io.PrintStream.implWrite(byte[], int, int):void (29 bytes)   relevance-based (relevance=1.125700, probability=1.000000, bonus=1.000000, nodes=109 <= 300.000000)
                            @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                 n                            @ 14  java.lang.Class.initClassName():String (0 bytes)   not inlining it is a non-intrinsic native method
                            @ 8  java.util.concurrent.locks.AbstractOwnableSynchronizer.getExclusiveOwnerThread():Thread (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 124  java.lang.Class.getName():String (18 bytes)   relevance-based (relevance=4.666667, probability=0.017481, bonus=1.000000, nodes=17 <= 300.000000)
                            @ 41  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                            @ 46  java.util.concurrent.locks.AbstractQueuedSynchronizer.setState(int):void (6 bytes)   inline method (bytecode parsing)
                                @ 2  java.util.concurrent.locks.ReentrantLock$Sync.tryRelease(int):boolean (51 bytes)   relevance-based (relevance=1.125700, probability=1.000000, bonus=1.000000, nodes=37 <= 300.000000)
                                                @ 0  java.lang.System.allowSecurityManager():boolean (13 bytes)   trivial (relevance=1.000800, probability=0.017481, bonus=1.000000, nodes=8)
                                              @ 141  java.lang.System.getSecurityManager():SecurityManager (12 bytes)   relevance-based (relevance=4.666667, probability=0.017481, bonus=1.000000, nodes=14 <= 300.000000)
                            @ 22  java.util.concurrent.locks.AbstractQueuedSynchronizer$Node.getAndUnsetStatus(int):int (14 bytes)   inline method (bytecode parsing)
                              @ 10  jdk.internal.misc.Unsafe.getAndBitwiseAndInt(Object, long, int):int (27 bytes)   inline method (bytecode parsing)
                            @ 14  java.security.AccessControlContext.<init>(ProtectionDomain[], boolean):void (30 bytes)   inline method (bytecode parsing)
                 n                            @ 0  java.security.AccessController.getStackAccessControlContext():AccessControlContext (0 bytes)   not inlining it is a non-intrinsic native method
                            @ 5  java.lang.Thread.isVirtual():boolean (5 bytes)   inline method (bytecode parsing)
                                  @ 30  java.util.concurrent.locks.LockSupport.unpark(Thread):void (26 bytes)   not inlining relevance-based (relevance=0.006051, probability=0.003978, bonus=1.000000, nodes=23 > 1.815411)
                                @ 12  java.util.concurrent.locks.AbstractQueuedSynchronizer.signalNext(AbstractQueuedSynchronizer$Node):void (34 bytes)   relevance-based (relevance=0.981783, probability=0.872153, bonus=1.000000, nodes=56 <= 294.534851)
                              @ 127  java.io.PrintStream.write(byte[], int, int):void (94 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=278 <= 300.000000)
                 n                              @ 44  java.security.AccessController.getInheritedAccessControlContext():AccessControlContext (0 bytes)   not inlining it is a non-intrinsic native method
                                                  @ 141  java.security.AccessControlContext.getDebug():Debug (32 bytes)   relevance-based (relevance=2.000000, probability=0.001093, bonus=1.000000, nodes=11 <= 300.000000)
                            @ 7  java.lang.StringBuilder.<init>():void (7 bytes)   inline method (bytecode parsing)
                            @ 14  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 19  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                                @ 1  java.nio.Buffer.clear():Buffer (20 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=13 <= 300.000000)
                            @ 23  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                              @ 134  java.nio.ByteBuffer.clear():ByteBuffer (7 bytes)   relevance-based (relevance=1.125700, probability=1.000000, bonus=1.000000, nodes=14 <= 300.000000)
                            @ 26  java.lang.StringBuilder.toString():String (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.String.<init>(StringBuilder):void (7 bytes)   inline method (bytecode parsing)
                                                    @ 3  java.lang.AbstractStringBuilder.<init>(int):void (39 bytes)   relevance-based (relevance=1.000000, probability=0.000546, bonus=1.000000, nodes=11 <= 300.000000)
                                                    @ 2  java.lang.AbstractStringBuilder.append(String):AbstractStringBuilder (45 bytes)   not inlining too large previous low-level graph (low-level-nodes: 345, relevance=1.000000, probability=0.000546, bonus=1.000000, nodes=23)
                                                    @ 2  java.lang.AbstractStringBuilder.append(String):AbstractStringBuilder (45 bytes)   not inlining too large previous low-level graph (low-level-nodes: 345, relevance=1.000000, probability=0.000546, bonus=1.000000, nodes=21)
                                                    @ 2  java.lang.AbstractStringBuilder.append(String):AbstractStringBuilder (45 bytes)   not inlining too large previous low-level graph (low-level-nodes: 345, relevance=1.000000, probability=0.000546, bonus=1.000000, nodes=21)
                            @ 5  java.lang.AbstractStringBuilder.getValue():byte[] (5 bytes)   inline accessor method (bytecode parsing)
                            @ 1  java.lang.AbstractStringBuilder.length():int (5 bytes)   inline accessor method (bytecode parsing)
                                                      @ 10  java.lang.StringBuilder.length():int (5 bytes)   trivial (relevance=1.000000, probability=0.000546, bonus=1.000000, nodes=5)
                                                      @ 16  java.lang.AbstractStringBuilder.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=0.000546, bonus=1.000000, nodes=9)
                            @ 13  java.util.Arrays.copyOfRangeByte(byte[], int, int):byte[] (33 bytes)   inline method (bytecode parsing)
                              @ 2  java.util.Arrays.checkLength(int, int):void (38 bytes)   inline method (bytecode parsing)
                                                        @ 24  java.lang.Math.min(int, int):int (11 bytes)   trivial (relevance=1.000010, probability=0.000430, bonus=1.000000, nodes=7)
                                                      @ 32  java.util.Arrays.copyOfRange(byte[], int, int):byte[] (25 bytes)   relevance-based (relevance=1.000000, probability=0.000546, bonus=1.000000, nodes=33 <= 300.000000)
                                                    @ 3  java.lang.String.<init>(AbstractStringBuilder, Void):void (99 bytes)   relevance-based (relevance=1.000000, probability=0.000546, bonus=1.000000, nodes=48 <= 300.000000)
                                                        @ 11  java.lang.String.toString():String (2 bytes)   trivial (relevance=1.000000, probability=0.000546, bonus=1.000000, nodes=4)
                                                      @ 11  java.lang.String.valueOf(Object):String (15 bytes)   trivial (relevance=1.000000, probability=0.000546, bonus=1.000000, nodes=4)
                            @ 11  jdk.internal.misc.InternalLock.lock():void (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.util.concurrent.locks.ReentrantLock.lock():void (8 bytes)   inline method (bytecode parsing)
                            @ 23  jdk.internal.misc.InternalLock.unlock():void (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.util.concurrent.locks.ReentrantLock.unlock():void (10 bytes)   inline method (bytecode parsing)
                                @ 5  java.util.concurrent.locks.AbstractQueuedSynchronizer.release(int):boolean (19 bytes)   inline method (bytecode parsing)
                            @ 9  java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(int):void (20 bytes)   inline method (bytecode parsing)
                            @ 7  java.util.concurrent.locks.AbstractQueuedSynchronizer.compareAndSetState(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 15  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                            @ 21  java.util.concurrent.locks.AbstractOwnableSynchronizer.getExclusiveOwnerThread():Thread (5 bytes)   inline accessor method (bytecode parsing)
                            @ 29  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 51  java.util.concurrent.locks.AbstractQueuedSynchronizer.setState(int):void (6 bytes)   inline method (bytecode parsing)
                                                          @ 1  java.util.concurrent.locks.ReentrantLock$NonfairSync.initialTryLock():boolean (58 bytes)   relevance-based (relevance=1.006570, probability=0.000273, bonus=1.000000, nodes=40 <= 300.000000)
                            @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 10  java.util.concurrent.locks.AbstractQueuedSynchronizer.compareAndSetState(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 20  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                                                          @ 2  java.util.concurrent.locks.ReentrantLock$NonfairSync.tryAcquire(int):boolean (27 bytes)   not inlining relevance-based (relevance=0.005005, probability=0.000001, bonus=1.000000, nodes=36 > 1.501641)
                            @ 108  java.util.concurrent.locks.AbstractQueuedSynchronizer.tryAcquireShared(int):int (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.lang.UnsupportedOperationException.<init>():void (5 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.RuntimeException.<init>():void (5 bytes)   inline method (bytecode parsing)
                                  @ 1  java.lang.Exception.<init>():void (5 bytes)   inline method (bytecode parsing)
                            @ 245  java.util.concurrent.locks.AbstractQueuedSynchronizer$ExclusiveNode.<init>():void (5 bytes)   inline method (bytecode parsing)
                              @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer$Node.<init>():void (5 bytes)   inline method (bytecode parsing)
                            @ 290  java.util.concurrent.locks.AbstractQueuedSynchronizer$Node.setPrevRelaxed(AbstractQueuedSynchronizer$Node):void (12 bytes)   inline method (bytecode parsing)
                            @ 393  java.lang.Thread.interrupted():boolean (7 bytes)   inline method (bytecode parsing)
                                                          @ 15  java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer$Node, int, boolean, boolean, boolean, long):int (424 bytes)   not inlining relevance-based (relevance=0.002503, probability=0.000001, bonus=1.000000, nodes=226 > 0.750820)
                                                        @ 4  java.util.concurrent.locks.ReentrantLock$Sync.lock():void (13 bytes)   relevance-based (relevance=1.148348, probability=0.000273, bonus=1.000000, nodes=57 <= 300.000000)
                            @ 16  java.io.BufferedWriter.newLine():void (8 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.System.lineSeparator():String (4 bytes)   inline method (bytecode parsing)
                            @ 30  java.io.OutputStreamWriter.flushBuffer():void (8 bytes)   inline method (bytecode parsing)
                                                          @ 1  java.io.PrintStream.ensureOpen():void (18 bytes)   trivial (relevance=2.000000, probability=0.000273, bonus=1.000000, nodes=7)
                                                              @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.000273, bonus=1.000000, nodes=5)
                                                            @ 4  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000000, probability=0.000273, bonus=1.000000, nodes=8)
                            @ 23  jdk.internal.misc.InternalLock.lock():void (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.util.concurrent.locks.ReentrantLock.lock():void (8 bytes)   inline method (bytecode parsing)
                            @ 35  jdk.internal.misc.InternalLock.unlock():void (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.util.concurrent.locks.ReentrantLock.unlock():void (10 bytes)   inline method (bytecode parsing)
                                @ 5  java.util.concurrent.locks.AbstractQueuedSynchronizer.release(int):boolean (19 bytes)   inline method (bytecode parsing)
                            @ 9  java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(int):void (20 bytes)   inline method (bytecode parsing)
                            @ 7  java.util.concurrent.locks.AbstractQueuedSynchronizer.compareAndSetState(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 15  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                            @ 21  java.util.concurrent.locks.AbstractOwnableSynchronizer.getExclusiveOwnerThread():Thread (5 bytes)   inline accessor method (bytecode parsing)
                            @ 29  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 51  java.util.concurrent.locks.AbstractQueuedSynchronizer.setState(int):void (6 bytes)   inline method (bytecode parsing)
                                                                @ 1  java.util.concurrent.locks.ReentrantLock$NonfairSync.initialTryLock():boolean (58 bytes)   relevance-based (relevance=1.006570, probability=0.000273, bonus=1.000000, nodes=40 <= 300.000000)
                            @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 10  java.util.concurrent.locks.AbstractQueuedSynchronizer.compareAndSetState(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 20  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                                                                @ 2  java.util.concurrent.locks.ReentrantLock$NonfairSync.tryAcquire(int):boolean (27 bytes)   not inlining relevance-based (relevance=0.005005, probability=0.000001, bonus=1.000000, nodes=36 > 1.501641)
                            @ 108  java.util.concurrent.locks.AbstractQueuedSynchronizer.tryAcquireShared(int):int (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.lang.UnsupportedOperationException.<init>():void (5 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.RuntimeException.<init>():void (5 bytes)   inline method (bytecode parsing)
                                  @ 1  java.lang.Exception.<init>():void (5 bytes)   inline method (bytecode parsing)
                            @ 245  java.util.concurrent.locks.AbstractQueuedSynchronizer$ExclusiveNode.<init>():void (5 bytes)   inline method (bytecode parsing)
                              @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer$Node.<init>():void (5 bytes)   inline method (bytecode parsing)
                            @ 290  java.util.concurrent.locks.AbstractQueuedSynchronizer$Node.setPrevRelaxed(AbstractQueuedSynchronizer$Node):void (12 bytes)   inline method (bytecode parsing)
                            @ 393  java.lang.Thread.interrupted():boolean (7 bytes)   inline method (bytecode parsing)
                                                                @ 15  java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer$Node, int, boolean, boolean, boolean, long):int (424 bytes)   not inlining relevance-based (relevance=0.002503, probability=0.000001, bonus=1.000000, nodes=226 > 0.750820)
                                                              @ 4  java.util.concurrent.locks.ReentrantLock$Sync.lock():void (13 bytes)   relevance-based (relevance=1.148348, probability=0.000273, bonus=1.000000, nodes=57 <= 300.000000)
                            @ 39  java.io.BufferedWriter.min(int, int):int (9 bytes)   inline method (bytecode parsing)
                                                                @ 1  java.io.BufferedWriter.ensureOpen():void (18 bytes)   trivial (relevance=1.000000, probability=0.000273, bonus=1.000000, nodes=7)
                            @ 7  java.io.FileDescriptor$1.getAppend(FileDescriptor):boolean (5 bytes)   inline method (bytecode parsing)
                                                                @ 6  java.io.BufferedWriter.growIfNeeded(int):void (63 bytes)   relevance-based (relevance=1.000000, probability=0.000273, bonus=1.000000, nodes=15 <= 300.000000)
                            @ 16  java.lang.String.checkBoundsOffCount(int, int, int):int (10 bytes)   inline method (bytecode parsing)
                            @ 6  jdk.internal.misc.Blocker.currentCarrierThread():Thread (9 bytes)   inline method (bytecode parsing)
                              @ 3  java.lang.System$2.currentCarrierThread():Thread (4 bytes)   inline method (bytecode parsing)
                                                                    @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.000273, bonus=1.000000, nodes=5)
                                                                  @ 3  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000000, probability=0.000273, bonus=1.000000, nodes=8)
                                @ 0  jdk.internal.misc.VM.isBooted():boolean (13 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=10 <= 300.000000)
                              @ 14  jdk.internal.misc.Blocker.begin():long (97 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=20 <= 300.000000)
                                                                    @ 6  jdk.internal.util.Preconditions.checkFromToIndex(int, int, int, BiFunction):int (24 bytes)   relevance-based (relevance=1.000000, probability=0.000273, bonus=1.000000, nodes=11 <= 300.000000)
                 n          @ 25  java.io.FileOutputStream.writeBytes(byte[], int, int, boolean):void (0 bytes)   not inlining it is a non-intrinsic native method
                                                                  @ 6  java.lang.String.checkBoundsBeginEnd(int, int, int):void (11 bytes)   relevance-based (relevance=1.000000, probability=0.000273, bonus=1.000000, nodes=10 <= 300.000000)
                              @ 30  jdk.internal.misc.Blocker.end(long):void (71 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=4)
                                                                  @ 6  jdk.internal.util.Preconditions.checkFromIndexSize(int, int, int, BiFunction):int (25 bytes)   relevance-based (relevance=1.000000, probability=0.000273, bonus=1.000000, nodes=15 <= 300.000000)
                                                                  @ 21  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=0.000273, bonus=1.000000, nodes=9)
                                                                  @ 36  java.lang.StringLatin1.getChars(byte[], int, int, char[], int):void (12 bytes)   relevance-based (relevance=1.000000, probability=0.000273, bonus=1.000000, nodes=38 <= 300.000000)
                                                                @ 60  java.lang.String.getChars(int, int, char[], int):void (55 bytes)   relevance-based (relevance=1.000000, probability=0.000273, bonus=1.000000, nodes=58 <= 300.000000)
                                                              @ 30  java.io.BufferedWriter.implWrite(String, int, int):void (100 bytes)   relevance-based (relevance=1.125700, probability=0.000273, bonus=1.000000, nodes=93 <= 300.000000)
                            @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 8  java.util.concurrent.locks.AbstractOwnableSynchronizer.getExclusiveOwnerThread():Thread (5 bytes)   inline accessor method (bytecode parsing)
                            @ 41  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                            @ 46  java.util.concurrent.locks.AbstractQueuedSynchronizer.setState(int):void (6 bytes)   inline method (bytecode parsing)
                                                              @ 2  java.util.concurrent.locks.ReentrantLock$Sync.tryRelease(int):boolean (51 bytes)   relevance-based (relevance=1.125700, probability=0.000273, bonus=1.000000, nodes=37 <= 300.000000)
                            @ 22  java.util.concurrent.locks.AbstractQueuedSynchronizer$Node.getAndUnsetStatus(int):int (14 bytes)   inline method (bytecode parsing)
                              @ 10  jdk.internal.misc.Unsafe.getAndBitwiseAndInt(Object, long, int):int (27 bytes)   inline method (bytecode parsing)
                            @ 18  jdk.internal.misc.InternalLock.lock():void (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.util.concurrent.locks.ReentrantLock.lock():void (8 bytes)   inline method (bytecode parsing)
                            @ 5  java.lang.Thread.isVirtual():boolean (5 bytes)   inline method (bytecode parsing)
                            @ 26  jdk.internal.misc.InternalLock.unlock():void (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.util.concurrent.locks.ReentrantLock.unlock():void (10 bytes)   inline method (bytecode parsing)
                                @ 5  java.util.concurrent.locks.AbstractQueuedSynchronizer.release(int):boolean (19 bytes)   inline method (bytecode parsing)
                                                                @ 30  java.util.concurrent.locks.LockSupport.unpark(Thread):void (26 bytes)   not inlining relevance-based (relevance=0.006042, probability=0.000001, bonus=1.000000, nodes=23 > 1.812630)
                                                              @ 12  java.util.concurrent.locks.AbstractQueuedSynchronizer.signalNext(AbstractQueuedSynchronizer$Node):void (34 bytes)   relevance-based (relevance=0.980278, probability=0.000238, bonus=1.000000, nodes=56 <= 294.083512)
                            @ 9  java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(int):void (20 bytes)   inline method (bytecode parsing)
                                                            @ 7  java.io.BufferedWriter.write(String, int, int):void (82 bytes)   relevance-based (relevance=1.000000, probability=0.000273, bonus=1.000000, nodes=262 <= 300.000000)
                            @ 7  java.util.concurrent.locks.AbstractQueuedSynchronizer.compareAndSetState(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 15  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                            @ 21  java.util.concurrent.locks.AbstractOwnableSynchronizer.getExclusiveOwnerThread():Thread (5 bytes)   inline accessor method (bytecode parsing)
                            @ 29  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 51  java.util.concurrent.locks.AbstractQueuedSynchronizer.setState(int):void (6 bytes)   inline method (bytecode parsing)
                                @ 1  java.util.concurrent.locks.ReentrantLock$NonfairSync.initialTryLock():boolean (58 bytes)   relevance-based (relevance=1.007148, probability=1.000000, bonus=1.000000, nodes=40 <= 300.000000)
                                                          @ 9  java.io.Writer.write(String):void (11 bytes)   relevance-based (relevance=2.000000, probability=0.000273, bonus=1.000000, nodes=266 <= 300.000000)
                            @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 10  java.util.concurrent.locks.AbstractQueuedSynchronizer.compareAndSetState(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 20  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                                @ 2  java.util.concurrent.locks.ReentrantLock$NonfairSync.tryAcquire(int):boolean (27 bytes)   not inlining relevance-based (relevance=0.005005, probability=0.004447, bonus=1.000000, nodes=36 > 1.501641)
                                                        @ 16  java.io.PrintStream.implWriteln(String):void (48 bytes)   not inlining relevance-based (relevance=1.125700, probability=0.000273, bonus=1.000000, nodes=309 > 300.000000)
                            @ 108  java.util.concurrent.locks.AbstractQueuedSynchronizer.tryAcquireShared(int):int (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.lang.UnsupportedOperationException.<init>():void (5 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.RuntimeException.<init>():void (5 bytes)   inline method (bytecode parsing)
                            @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 1  java.lang.Exception.<init>():void (5 bytes)   inline method (bytecode parsing)
                            @ 8  java.util.concurrent.locks.AbstractOwnableSynchronizer.getExclusiveOwnerThread():Thread (5 bytes)   inline accessor method (bytecode parsing)
                            @ 245  java.util.concurrent.locks.AbstractQueuedSynchronizer$ExclusiveNode.<init>():void (5 bytes)   inline method (bytecode parsing)
                            @ 41  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                              @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer$Node.<init>():void (5 bytes)   inline method (bytecode parsing)
                            @ 46  java.util.concurrent.locks.AbstractQueuedSynchronizer.setState(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 290  java.util.concurrent.locks.AbstractQueuedSynchronizer$Node.setPrevRelaxed(AbstractQueuedSynchronizer$Node):void (12 bytes)   inline method (bytecode parsing)
                                                        @ 2  java.util.concurrent.locks.ReentrantLock$Sync.tryRelease(int):boolean (51 bytes)   relevance-based (relevance=1.125700, probability=0.000273, bonus=1.000000, nodes=37 <= 300.000000)
                            @ 393  java.lang.Thread.interrupted():boolean (7 bytes)   inline method (bytecode parsing)
                            @ 22  java.util.concurrent.locks.AbstractQueuedSynchronizer$Node.getAndUnsetStatus(int):int (14 bytes)   inline method (bytecode parsing)
                              @ 10  jdk.internal.misc.Unsafe.getAndBitwiseAndInt(Object, long, int):int (27 bytes)   inline method (bytecode parsing)
                            @ 5  java.lang.Thread.isVirtual():boolean (5 bytes)   inline method (bytecode parsing)
                                                          @ 30  java.util.concurrent.locks.LockSupport.unpark(Thread):void (26 bytes)   not inlining relevance-based (relevance=0.006042, probability=0.000001, bonus=1.000000, nodes=23 > 1.812630)
                                                        @ 12  java.util.concurrent.locks.AbstractQueuedSynchronizer.signalNext(AbstractQueuedSynchronizer$Node):void (34 bytes)   relevance-based (relevance=0.980278, probability=0.000238, bonus=1.000000, nodes=56 <= 294.083512)
                                @ 15  java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer$Node, int, boolean, boolean, boolean, long):int (424 bytes)   not inlining relevance-based (relevance=0.002503, probability=0.002223, bonus=1.000000, nodes=226 > 0.750820)
                              @ 4  java.util.concurrent.locks.ReentrantLock$Sync.lock():void (13 bytes)   relevance-based (relevance=1.151137, probability=1.000000, bonus=1.000000, nodes=57 <= 300.000000)
                            @ 16  java.io.BufferedWriter.newLine():void (8 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.System.lineSeparator():String (4 bytes)   inline method (bytecode parsing)
                            @ 30  java.io.OutputStreamWriter.flushBuffer():void (8 bytes)   inline method (bytecode parsing)
                                                          @ 1  java.io.PrintStream.ensureOpen():void (18 bytes)   trivial (relevance=2.000000, probability=0.000273, bonus=1.000000, nodes=7)
                                @ 1  java.io.BufferedWriter.ensureOpen():void (18 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=7)
                                                              @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.000273, bonus=1.000000, nodes=5)
                                                            @ 4  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000000, probability=0.000273, bonus=1.000000, nodes=8)
                            @ 23  jdk.internal.misc.InternalLock.lock():void (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.util.concurrent.locks.ReentrantLock.lock():void (8 bytes)   inline method (bytecode parsing)
                            @ 23  jdk.internal.misc.InternalLock.lock():void (8 bytes)   inline method (bytecode parsing)
                            @ 35  jdk.internal.misc.InternalLock.unlock():void (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.util.concurrent.locks.ReentrantLock.lock():void (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.util.concurrent.locks.ReentrantLock.unlock():void (10 bytes)   inline method (bytecode parsing)
                            @ 35  jdk.internal.misc.InternalLock.unlock():void (8 bytes)   inline method (bytecode parsing)
                                @ 5  java.util.concurrent.locks.AbstractQueuedSynchronizer.release(int):boolean (19 bytes)   inline method (bytecode parsing)
                              @ 4  java.util.concurrent.locks.ReentrantLock.unlock():void (10 bytes)   inline method (bytecode parsing)
                                @ 5  java.util.concurrent.locks.AbstractQueuedSynchronizer.release(int):boolean (19 bytes)   inline method (bytecode parsing)
                                  @ 7  sun.nio.cs.StreamEncoder.write(char[], int, int):void (82 bytes)   not inlining too large previous low-level graph (low-level-nodes: 637, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=60)
                                @ 25  java.io.OutputStreamWriter.write(char[], int, int):void (11 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                              @ 22  java.io.BufferedWriter.implFlushBuffer():void (34 bytes)   relevance-based (relevance=1.125700, probability=1.000000, bonus=1.000000, nodes=28 <= 300.000000)
                            @ 9  java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(int):void (20 bytes)   inline method (bytecode parsing)
                            @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 8  java.util.concurrent.locks.AbstractOwnableSynchronizer.getExclusiveOwnerThread():Thread (5 bytes)   inline accessor method (bytecode parsing)
                            @ 41  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                            @ 7  java.util.concurrent.locks.AbstractQueuedSynchronizer.compareAndSetState(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 46  java.util.concurrent.locks.AbstractQueuedSynchronizer.setState(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 15  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  java.util.concurrent.locks.ReentrantLock$Sync.tryRelease(int):boolean (51 bytes)   relevance-based (relevance=1.125700, probability=1.000000, bonus=1.000000, nodes=37 <= 300.000000)
                            @ 21  java.util.concurrent.locks.AbstractOwnableSynchronizer.getExclusiveOwnerThread():Thread (5 bytes)   inline accessor method (bytecode parsing)
                            @ 29  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 51  java.util.concurrent.locks.AbstractQueuedSynchronizer.setState(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 22  java.util.concurrent.locks.AbstractQueuedSynchronizer$Node.getAndUnsetStatus(int):int (14 bytes)   inline method (bytecode parsing)
                                                                @ 1  java.util.concurrent.locks.ReentrantLock$NonfairSync.initialTryLock():boolean (58 bytes)   relevance-based (relevance=1.006570, probability=0.000273, bonus=1.000000, nodes=40 <= 300.000000)
                              @ 10  jdk.internal.misc.Unsafe.getAndBitwiseAndInt(Object, long, int):int (27 bytes)   inline method (bytecode parsing)
                            @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  java.lang.Thread.isVirtual():boolean (5 bytes)   inline method (bytecode parsing)
                            @ 10  java.util.concurrent.locks.AbstractQueuedSynchronizer.compareAndSetState(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                                @ 30  java.util.concurrent.locks.LockSupport.unpark(Thread):void (26 bytes)   not inlining relevance-based (relevance=0.006027, probability=0.003962, bonus=1.000000, nodes=23 > 1.808237)
                            @ 20  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                              @ 12  java.util.concurrent.locks.AbstractQueuedSynchronizer.signalNext(AbstractQueuedSynchronizer$Node):void (34 bytes)   relevance-based (relevance=0.977903, probability=0.868706, bonus=1.000000, nodes=56 <= 293.370845)
                                                                @ 2  java.util.concurrent.locks.ReentrantLock$NonfairSync.tryAcquire(int):boolean (27 bytes)   not inlining relevance-based (relevance=0.005005, probability=0.000001, bonus=1.000000, nodes=36 > 1.501641)
                            @ 108  java.util.concurrent.locks.AbstractQueuedSynchronizer.tryAcquireShared(int):int (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.lang.UnsupportedOperationException.<init>():void (5 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.RuntimeException.<init>():void (5 bytes)   inline method (bytecode parsing)
                                  @ 1  java.lang.Exception.<init>():void (5 bytes)   inline method (bytecode parsing)
                            @ 245  java.util.concurrent.locks.AbstractQueuedSynchronizer$ExclusiveNode.<init>():void (5 bytes)   inline method (bytecode parsing)
                              @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer$Node.<init>():void (5 bytes)   inline method (bytecode parsing)
                            @ 290  java.util.concurrent.locks.AbstractQueuedSynchronizer$Node.setPrevRelaxed(AbstractQueuedSynchronizer$Node):void (12 bytes)   inline method (bytecode parsing)
                            @ 393  java.lang.Thread.interrupted():boolean (7 bytes)   inline method (bytecode parsing)
                                                                @ 15  java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer$Node, int, boolean, boolean, boolean, long):int (424 bytes)   not inlining relevance-based (relevance=0.002503, probability=0.000001, bonus=1.000000, nodes=226 > 0.750820)
                                                              @ 4  java.util.concurrent.locks.ReentrantLock$Sync.lock():void (13 bytes)   relevance-based (relevance=1.148348, probability=0.000273, bonus=1.000000, nodes=57 <= 300.000000)
                            @ 39  java.io.BufferedWriter.min(int, int):int (9 bytes)   inline method (bytecode parsing)
                                                                @ 1  java.io.BufferedWriter.ensureOpen():void (18 bytes)   trivial (relevance=1.000000, probability=0.000273, bonus=1.000000, nodes=7)
                                                                @ 6  java.io.BufferedWriter.growIfNeeded(int):void (63 bytes)   relevance-based (relevance=1.000000, probability=0.000273, bonus=1.000000, nodes=15 <= 300.000000)
                            @ 16  java.lang.String.checkBoundsOffCount(int, int, int):int (10 bytes)   inline method (bytecode parsing)
                                                                    @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.000273, bonus=1.000000, nodes=5)
                                                                  @ 3  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000000, probability=0.000273, bonus=1.000000, nodes=8)
                                                                    @ 6  jdk.internal.util.Preconditions.checkFromToIndex(int, int, int, BiFunction):int (24 bytes)   relevance-based (relevance=1.000000, probability=0.000273, bonus=1.000000, nodes=11 <= 300.000000)
                                                                  @ 6  java.lang.String.checkBoundsBeginEnd(int, int, int):void (11 bytes)   relevance-based (relevance=1.000000, probability=0.000273, bonus=1.000000, nodes=10 <= 300.000000)
                                                                  @ 6  jdk.internal.util.Preconditions.checkFromIndexSize(int, int, int, BiFunction):int (25 bytes)   relevance-based (relevance=1.000000, probability=0.000273, bonus=1.000000, nodes=15 <= 300.000000)
                                                                  @ 21  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=0.000273, bonus=1.000000, nodes=9)
                                                                  @ 36  java.lang.StringLatin1.getChars(byte[], int, int, char[], int):void (12 bytes)   relevance-based (relevance=1.000000, probability=0.000273, bonus=1.000000, nodes=38 <= 300.000000)
                                                                @ 60  java.lang.String.getChars(int, int, char[], int):void (55 bytes)   relevance-based (relevance=1.000000, probability=0.000273, bonus=1.000000, nodes=58 <= 300.000000)
                                                              @ 30  java.io.BufferedWriter.implWrite(String, int, int):void (100 bytes)   relevance-based (relevance=1.125700, probability=0.000273, bonus=1.000000, nodes=93 <= 300.000000)
                            @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 8  java.util.concurrent.locks.AbstractOwnableSynchronizer.getExclusiveOwnerThread():Thread (5 bytes)   inline accessor method (bytecode parsing)
                            @ 41  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                            @ 46  java.util.concurrent.locks.AbstractQueuedSynchronizer.setState(int):void (6 bytes)   inline method (bytecode parsing)
                                                              @ 2  java.util.concurrent.locks.ReentrantLock$Sync.tryRelease(int):boolean (51 bytes)   relevance-based (relevance=1.125700, probability=0.000273, bonus=1.000000, nodes=37 <= 300.000000)
                            @ 22  java.util.concurrent.locks.AbstractQueuedSynchronizer$Node.getAndUnsetStatus(int):int (14 bytes)   inline method (bytecode parsing)
                              @ 10  jdk.internal.misc.Unsafe.getAndBitwiseAndInt(Object, long, int):int (27 bytes)   inline method (bytecode parsing)
                            @ 5  java.lang.Thread.isVirtual():boolean (5 bytes)   inline method (bytecode parsing)
                                                                @ 30  java.util.concurrent.locks.LockSupport.unpark(Thread):void (26 bytes)   not inlining relevance-based (relevance=0.006042, probability=0.000001, bonus=1.000000, nodes=23 > 1.812630)
                                                              @ 12  java.util.concurrent.locks.AbstractQueuedSynchronizer.signalNext(AbstractQueuedSynchronizer$Node):void (34 bytes)   relevance-based (relevance=0.980278, probability=0.000238, bonus=1.000000, nodes=56 <= 294.083512)
                                                            @ 7  java.io.BufferedWriter.write(String, int, int):void (82 bytes)   relevance-based (relevance=1.000000, probability=0.000273, bonus=1.000000, nodes=262 <= 300.000000)
                                                          @ 9  java.io.Writer.write(String):void (11 bytes)   relevance-based (relevance=2.000000, probability=0.000273, bonus=1.000000, nodes=266 <= 300.000000)
                            @ 23  jdk.internal.misc.InternalLock.lock():void (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.util.concurrent.locks.ReentrantLock.lock():void (8 bytes)   inline method (bytecode parsing)
                            @ 35  jdk.internal.misc.InternalLock.unlock():void (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.util.concurrent.locks.ReentrantLock.unlock():void (10 bytes)   inline method (bytecode parsing)
                                @ 5  java.util.concurrent.locks.AbstractQueuedSynchronizer.release(int):boolean (19 bytes)   inline method (bytecode parsing)
                              @ 7  sun.nio.cs.StreamEncoder.write(char[], int, int):void (82 bytes)   not inlining too large previous low-level graph (low-level-nodes: 637, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=61)
                                                        @ 48  java.io.PrintStream.implWriteln(String):void (48 bytes)   not inlining relevance-based (relevance=1.125700, probability=0.000273, bonus=1.000000, nodes=309 > 300.000000)
                                                      @ 14  java.io.PrintStream.writeln(String):void (81 bytes)   relevance-based (relevance=1.000000, probability=0.000546, bonus=1.000000, nodes=189 <= 300.000000)
                                                    @ 29  java.io.PrintStream.println(String):void (44 bytes)   relevance-based (relevance=1.269377, probability=0.000546, bonus=1.000000, nodes=190 <= 300.000000)
                                                  @ 153  sun.security.util.Debug.println(String):void (33 bytes)   relevance-based (relevance=1.000000, probability=0.000546, bonus=1.000000, nodes=264 <= 300.000000)
                            @ 18  jdk.internal.misc.InternalLock.lock():void (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.util.concurrent.locks.ReentrantLock.lock():void (8 bytes)   inline method (bytecode parsing)
                            @ 26  jdk.internal.misc.InternalLock.unlock():void (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.util.concurrent.locks.ReentrantLock.unlock():void (10 bytes)   inline method (bytecode parsing)
                                @ 5  java.util.concurrent.locks.AbstractQueuedSynchronizer.release(int):boolean (19 bytes)   inline method (bytecode parsing)
                                                @ 19  java.security.AccessControlContext.optimize():AccessControlContext (319 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.004370, bonus=1.000000, nodes=461 > 300.000000)
                                              @ 147  java.security.AccessController.getContext():AccessControlContext (23 bytes)   relevance-based (relevance=2.333333, probability=0.008741, bonus=1.000000, nodes=29 <= 300.000000)
                            @ 9  java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(int):void (20 bytes)   inline method (bytecode parsing)
                                            @ 9  java.util.ServiceLoader.<init>(Class, Class, ClassLoader):void (158 bytes)   relevance-based (relevance=1.333333, probability=0.024973, bonus=1.000000, nodes=209 <= 300.000000)
                            @ 7  java.util.concurrent.locks.AbstractQueuedSynchronizer.compareAndSetState(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 15  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                            @ 21  java.util.concurrent.locks.AbstractOwnableSynchronizer.getExclusiveOwnerThread():Thread (5 bytes)   inline accessor method (bytecode parsing)
                            @ 29  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 51  java.util.concurrent.locks.AbstractQueuedSynchronizer.setState(int):void (6 bytes)   inline method (bytecode parsing)
                                          @ 10  jdk.graal.compiler.options.OptionsParser.getOptionsLoader():Iterable (25 bytes)   not inlining relevance-based (relevance=2.000000, probability=0.062432, bonus=1.000000, nodes=309 > 300.000000)
                                @ 1  java.util.concurrent.locks.ReentrantLock$NonfairSync.initialTryLock():boolean (58 bytes)   relevance-based (relevance=1.007182, probability=1.000000, bonus=1.000000, nodes=40 <= 300.000000)
                            @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 10  java.util.concurrent.locks.AbstractQueuedSynchronizer.compareAndSetState(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 20  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                                            @ 0  jdk.vm.ci.services.Services.checkJVMCIEnabled():void (17 bytes)   trivial (relevance=4.000000, probability=0.062432, bonus=1.000000, nodes=3)
                                @ 2  java.util.concurrent.locks.ReentrantLock$NonfairSync.tryAcquire(int):boolean (27 bytes)   not inlining relevance-based (relevance=0.005005, probability=0.004447, bonus=1.000000, nodes=36 > 1.501641)
                                              @ 0  java.lang.System.allowSecurityManager():boolean (13 bytes)   trivial (relevance=1.000800, probability=0.015608, bonus=1.000000, nodes=8)
                                            @ 42  java.lang.System.getSecurityManager():SecurityManager (12 bytes)   relevance-based (relevance=1.000000, probability=0.015608, bonus=1.000000, nodes=14 <= 300.000000)
                            @ 108  java.util.concurrent.locks.AbstractQueuedSynchronizer.tryAcquireShared(int):int (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.lang.UnsupportedOperationException.<init>():void (5 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.RuntimeException.<init>():void (5 bytes)   inline method (bytecode parsing)
                            @ 12  java.lang.IllegalStateException.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                                  @ 1  java.lang.Exception.<init>():void (5 bytes)   inline method (bytecode parsing)
                              @ 2  java.lang.RuntimeException.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                                @ 2  java.lang.Exception.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                            @ 245  java.util.concurrent.locks.AbstractQueuedSynchronizer$ExclusiveNode.<init>():void (5 bytes)   inline method (bytecode parsing)
                              @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer$Node.<init>():void (5 bytes)   inline method (bytecode parsing)
                            @ 290  java.util.concurrent.locks.AbstractQueuedSynchronizer$Node.setPrevRelaxed(AbstractQueuedSynchronizer$Node):void (12 bytes)   inline method (bytecode parsing)
                            @ 12  java.lang.NullPointerException.<init>():void (5 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.RuntimeException.<init>():void (5 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.Exception.<init>():void (5 bytes)   inline method (bytecode parsing)
                            @ 393  java.lang.Thread.interrupted():boolean (7 bytes)   inline method (bytecode parsing)
                 n                                  @ 25  java.lang.NullPointerException.getExtendedNPEMessage():String (0 bytes)   not inlining it is a non-intrinsic native method
                 n                                    @ 16  java.lang.Throwable.fillInStackTrace(int):Throwable (0 bytes)   not inlining it is a non-intrinsic native method
              s                                       @ 37  java.lang.Throwable.fillInStackTrace():Throwable (29 bytes)   relevance-based (relevance=4.000000, probability=0.001951, bonus=1.000000, nodes=34 <= 300.000000)
              s                                     @ 24  java.lang.NullPointerException.fillInStackTrace():Throwable (41 bytes)   relevance-based (relevance=1.000000, probability=0.001951, bonus=1.000000, nodes=65 <= 300.000000)
                                                  @ 1  java.lang.Throwable.<init>():void (29 bytes)   relevance-based (relevance=1.000000, probability=0.001951, bonus=1.000000, nodes=73 <= 300.000000)
                                @ 15  java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer$Node, int, boolean, boolean, boolean, long):int (424 bytes)   not inlining relevance-based (relevance=0.002503, probability=0.002223, bonus=1.000000, nodes=226 > 0.750820)
                              @ 4  java.util.concurrent.locks.ReentrantLock$Sync.lock():void (13 bytes)   relevance-based (relevance=1.150146, probability=1.000000, bonus=1.000000, nodes=57 <= 300.000000)
                                                @ 18  java.util.Collections$UnmodifiableMap.<init>(Map):void (22 bytes)   relevance-based (relevance=1.000000, probability=0.003902, bonus=1.000000, nodes=87 <= 300.000000)
                                @ 1  sun.nio.cs.StreamEncoder.isOpen():boolean (13 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                            @ 4  java.nio.Buffer.position():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 19  java.util.Collections.unmodifiableMap(Map):Map (22 bytes)   relevance-based (relevance=1.000000, probability=0.007804, bonus=1.000000, nodes=95 <= 300.000000)
                            @ 12  java.nio.Buffer.limit():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 20  java.nio.Buffer.position():int (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 11  sun.nio.cs.StreamEncoder.writeBytes():void (139 bytes)   not inlining too large previous low-level graph (low-level-nodes: 654, relevance=1.000000, probability=0.999755, bonus=1.000000, nodes=41)
                                @ 8  sun.nio.cs.StreamEncoder.implFlushBuffer():void (15 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=21 <= 300.000000)
                              @ 22  sun.nio.cs.StreamEncoder.lockedFlushBuffer():void (25 bytes)   relevance-based (relevance=1.125700, probability=1.000000, bonus=1.000000, nodes=29 <= 300.000000)
                 n                              @ 16  java.lang.Throwable.fillInStackTrace(int):Throwable (0 bytes)   not inlining it is a non-intrinsic native method
              s                                 @ 24  java.lang.Throwable.fillInStackTrace():Throwable (29 bytes)   relevance-based (relevance=1.000000, probability=0.007804, bonus=1.000000, nodes=34 <= 300.000000)
                            @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 8  java.util.concurrent.locks.AbstractOwnableSynchronizer.getExclusiveOwnerThread():Thread (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 2  java.lang.Throwable.<init>(String):void (34 bytes)   relevance-based (relevance=16.000000, probability=0.007804, bonus=1.000000, nodes=45 <= 300.000000)
                            @ 41  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                            @ 46  java.util.concurrent.locks.AbstractQueuedSynchronizer.setState(int):void (6 bytes)   inline method (bytecode parsing)
                                            @ 61  jdk.internal.misc.VM.getSavedProperties():Map (23 bytes)   relevance-based (relevance=1.000800, probability=0.015608, bonus=1.000000, nodes=147 <= 300.000000)
                              @ 2  java.util.concurrent.locks.ReentrantLock$Sync.tryRelease(int):boolean (51 bytes)   relevance-based (relevance=1.125700, probability=1.000000, bonus=1.000000, nodes=37 <= 300.000000)
                            @ 22  java.util.concurrent.locks.AbstractQueuedSynchronizer$Node.getAndUnsetStatus(int):int (14 bytes)   inline method (bytecode parsing)
                                          @ 14  jdk.vm.ci.services.Services.getSavedProperties():Map (81 bytes)   relevance-based (relevance=2.000000, probability=0.062432, bonus=1.000000, nodes=201 <= 300.000000)
                              @ 10  jdk.internal.misc.Unsafe.getAndBitwiseAndInt(Object, long, int):int (27 bytes)   inline method (bytecode parsing)
                            @ 5  java.lang.Thread.isVirtual():boolean (5 bytes)   inline method (bytecode parsing)
                                        @ 4  jdk.graal.compiler.hotspot.HotSpotGraalOptionValues.parseOptions():EconomicMap (417 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.062432, bonus=1.000000, nodes=460 > 300.000000)
                                @ 30  java.util.concurrent.locks.LockSupport.unpark(Thread):void (26 bytes)   not inlining relevance-based (relevance=0.006033, probability=0.003966, bonus=1.000000, nodes=23 > 1.809795)
                              @ 12  java.util.concurrent.locks.AbstractQueuedSynchronizer.signalNext(AbstractQueuedSynchronizer$Node):void (34 bytes)   relevance-based (relevance=0.978746, probability=0.869455, bonus=1.000000, nodes=56 <= 293.623708)
                            @ 4  jdk.graal.compiler.options.OptionValues.newOptionMap():EconomicMap (7 bytes)   inline method (bytecode parsing)
                              @ 3  org.graalvm.collections.EconomicMap.create(Equivalence):EconomicMap (6 bytes)   inline method (bytecode parsing)
                                @ 2  org.graalvm.collections.EconomicMapImpl.create(Equivalence, boolean):EconomicMapImpl (13 bytes)   inline method (bytecode parsing)
                                  @ 6  org.graalvm.collections.EconomicMapImpl.<init>(Equivalence, boolean):void (30 bytes)   inline method (bytecode parsing)
                                  @ 9  org.graalvm.collections.EconomicMapImpl.intercept(EconomicMapImpl):EconomicMapImpl (2 bytes)   inline method (bytecode parsing)
                                          @ 1  org.graalvm.collections.UnmodifiableEconomicMap.getEntries():UnmodifiableMapCursor (0 bytes)   not inlining no type profile exists
                                          @ 8  org.graalvm.collections.UnmodifiableMapCursor.advance():boolean (0 bytes)   not inlining no type profile exists
                                          @ 18  org.graalvm.collections.UnmodifiableMapCursor.getKey():Object (0 bytes)   not inlining no type profile exists
                                          @ 27  org.graalvm.collections.UnmodifiableMapCursor.getValue():Object (0 bytes)   not inlining no type profile exists
                                            @ 32  jdk.graal.compiler.options.OptionValues.encodeNull(Object):Object (12 bytes)   relevance-based (relevance=1.000000, probability=0.062432, bonus=1.000000, nodes=14 <= 300.000000)
                            @ 111  org.graalvm.collections.EconomicMapImpl.setKey(int, Object):void (10 bytes)   inline method (bytecode parsing)
                            @ 143  org.graalvm.collections.EconomicMapImpl.size():int (10 bytes)   inline method (bytecode parsing)
                            @ 147  org.graalvm.collections.EconomicMapImpl.size():int (10 bytes)   inline method (bytecode parsing)
                                            @ 35  org.graalvm.collections.EconomicMapImpl.put(Object, Object):Object (192 bytes)   not inlining too large previous low-level graph (low-level-nodes: 1300, relevance=1.000000, probability=0.062432, bonus=1.000000, nodes=101)
                                          @ 10  jdk.graal.compiler.options.OptionValues.initMap(EconomicMap, UnmodifiableEconomicMap):void (45 bytes)   not inlining callee invoke probability is too high (invokeP=6.000000, relevance=1.000000, probability=0.062432, bonus=1.000000, nodes=44)
                                        @ 7  jdk.graal.compiler.options.OptionValues.<init>(UnmodifiableEconomicMap):void (19 bytes)   relevance-based (relevance=1.000000, probability=0.062432, bonus=1.000000, nodes=24 <= 300.000000)
                                      @ 21  jdk.graal.compiler.hotspot.HotSpotGraalOptionValues.initializeOptions():OptionValues (11 bytes)   relevance-based (relevance=1.000000, probability=0.062432, bonus=1.000000, nodes=27 <= 300.000000)
                                    @ 22  jdk.graal.compiler.hotspot.HotSpotGraalOptionValues.defaultOptions():OptionValues (41 bytes)   relevance-based (relevance=6.183661, probability=0.249729, bonus=1.000000, nodes=60 <= 300.000000)
                            @ 23  jdk.graal.compiler.options.OptionValues.get(OptionKey):Object (9 bytes)   inline method (bytecode parsing)
                            @ 13  jdk.graal.compiler.options.OptionKey.getDefaultValue():Object (5 bytes)   inline accessor method (bytecode parsing)
                                      @ 2  org.graalvm.collections.UnmodifiableEconomicMap.get(Object):Object (0 bytes)   not inlining no type profile exists
                                        @ 18  jdk.graal.compiler.options.OptionValues.decodeNull(Object):Object (13 bytes)   relevance-based (relevance=1.000000, probability=0.124864, bonus=1.000000, nodes=15 <= 300.000000)
                                      @ 5  jdk.graal.compiler.options.OptionValues.get(UnmodifiableEconomicMap, OptionKey):Object (22 bytes)   relevance-based (relevance=1.000000, probability=0.249729, bonus=1.000000, nodes=26 <= 300.000000)
                                    @ 25  jdk.graal.compiler.options.OptionKey.getValue(OptionValues):Object (27 bytes)   relevance-based (relevance=4.000000, probability=0.249729, bonus=1.000000, nodes=31 <= 300.000000)
                            @ 5  java.lang.String.contains(CharSequence):boolean (19 bytes)   inline method (bytecode parsing)
                              @ 2  java.lang.String.toString():String (2 bytes)   inline method (bytecode parsing)
                            @ 24  java.lang.String.contains(CharSequence):boolean (19 bytes)   inline method (bytecode parsing)
                              @ 2  java.lang.String.toString():String (2 bytes)   inline method (bytecode parsing)
                            @ 44  java.lang.String.contains(CharSequence):boolean (19 bytes)   inline method (bytecode parsing)
                              @ 2  java.lang.String.toString():String (2 bytes)   inline method (bytecode parsing)
                            @ 64  java.lang.String.contains(CharSequence):boolean (19 bytes)   inline method (bytecode parsing)
                              @ 2  java.lang.String.toString():String (2 bytes)   inline method (bytecode parsing)
                            @ 76  java.lang.String.valueOf(long):String (5 bytes)   inline method (bytecode parsing)
                                        @ 1  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.124864, bonus=1.000000, nodes=5)
                                        @ 7  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.124864, bonus=1.000000, nodes=5)
                                        @ 14  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=0.124864, bonus=1.000000, nodes=9)
                                        @ 28  java.lang.StringLatin1.indexOf(byte[], byte[]):int (25 bytes)   relevance-based (relevance=1.000000, probability=0.124864, bonus=1.000000, nodes=16 <= 300.000000)
                                      @ 7  java.lang.String.indexOf(String):int (64 bytes)   relevance-based (relevance=2.000000, probability=0.124864, bonus=1.000000, nodes=25 <= 300.000000)
                                      @ 14  jdk.graal.compiler.serviceprovider.GraalServices.getExecutionID():String (12 bytes)   trivial (relevance=1.000000, probability=0.062432, bonus=1.000000, nodes=3)
                                        @ 1  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.062432, bonus=1.000000, nodes=5)
                                        @ 7  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.062432, bonus=1.000000, nodes=5)
                                        @ 14  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=0.062432, bonus=1.000000, nodes=9)
                                        @ 28  java.lang.StringLatin1.indexOf(byte[], byte[]):int (25 bytes)   relevance-based (relevance=1.000000, probability=0.062432, bonus=1.000000, nodes=16 <= 300.000000)
                                      @ 7  java.lang.String.indexOf(String):int (64 bytes)   relevance-based (relevance=1.000000, probability=0.062432, bonus=1.000000, nodes=25 <= 300.000000)
                                        @ 1  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.124864, bonus=1.000000, nodes=5)
                                        @ 7  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.124864, bonus=1.000000, nodes=5)
                                        @ 14  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=0.124864, bonus=1.000000, nodes=9)
                                        @ 28  java.lang.StringLatin1.indexOf(byte[], byte[]):int (25 bytes)   relevance-based (relevance=1.000000, probability=0.124864, bonus=1.000000, nodes=16 <= 300.000000)
                                      @ 7  java.lang.String.indexOf(String):int (64 bytes)   relevance-based (relevance=2.000020, probability=0.124864, bonus=1.000000, nodes=25 <= 300.000000)
                                        @ 1  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.124864, bonus=1.000000, nodes=5)
                                        @ 7  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.124864, bonus=1.000000, nodes=5)
                                        @ 14  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=0.124864, bonus=1.000000, nodes=9)
                            @ 11  jdk.internal.misc.InternalLock.lock():void (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.util.concurrent.locks.ReentrantLock.lock():void (8 bytes)   inline method (bytecode parsing)
                                        @ 28  java.lang.StringLatin1.indexOf(byte[], byte[]):int (25 bytes)   relevance-based (relevance=1.000000, probability=0.124864, bonus=1.000000, nodes=16 <= 300.000000)
                            @ 22  jdk.internal.misc.InternalLock.unlock():void (8 bytes)   inline method (bytecode parsing)
                                      @ 7  java.lang.String.indexOf(String):int (64 bytes)   relevance-based (relevance=2.000020, probability=0.124864, bonus=1.000000, nodes=25 <= 300.000000)
                              @ 4  java.util.concurrent.locks.ReentrantLock.unlock():void (10 bytes)   inline method (bytecode parsing)
                                @ 5  java.util.concurrent.locks.AbstractQueuedSynchronizer.release(int):boolean (19 bytes)   inline method (bytecode parsing)
                            @ 28  java.lang.String.<init>(byte[], byte):void (15 bytes)   inline method (bytecode parsing)
                                      @ 1  java.lang.Long.toString(long):String (55 bytes)   not inlining too large previous low-level graph (low-level-nodes: 426, relevance=1.000010, probability=0.062432, bonus=1.000000, nodes=19)
                            @ 9  java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(int):void (20 bytes)   inline method (bytecode parsing)
                            @ 206  java.lang.StringBuilder.<init>(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 7  java.util.concurrent.locks.AbstractQueuedSynchronizer.compareAndSetState(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 215  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 237  java.lang.StringBuilder.append(char):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 15  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                            @ 242  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 21  java.util.concurrent.locks.AbstractOwnableSynchronizer.getExclusiveOwnerThread():Thread (5 bytes)   inline accessor method (bytecode parsing)
                            @ 254  java.lang.StringBuilder.toString():String (9 bytes)   inline method (bytecode parsing)
                            @ 29  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                              @ 5  java.lang.String.<init>(StringBuilder):void (7 bytes)   inline method (bytecode parsing)
                            @ 51  java.util.concurrent.locks.AbstractQueuedSynchronizer.setState(int):void (6 bytes)   inline method (bytecode parsing)
                                @ 1  java.util.concurrent.locks.ReentrantLock$NonfairSync.initialTryLock():boolean (58 bytes)   relevance-based (relevance=1.007158, probability=1.000000, bonus=1.000000, nodes=40 <= 300.000000)
                                        @ 1  java.lang.String.toString():String (2 bytes)   trivial (relevance=8.000000, probability=0.062432, bonus=1.000000, nodes=4)
                            @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 10  java.util.concurrent.locks.AbstractQueuedSynchronizer.compareAndSetState(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                                        @ 8  java.lang.String.toString():String (2 bytes)   trivial (relevance=8.000000, probability=0.062432, bonus=1.000000, nodes=4)
                            @ 20  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                                @ 2  java.util.concurrent.locks.ReentrantLock$NonfairSync.tryAcquire(int):boolean (27 bytes)   not inlining relevance-based (relevance=0.005005, probability=0.004447, bonus=1.000000, nodes=36 > 1.501641)
                                          @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.062432, bonus=1.000000, nodes=5)
                                        @ 16  java.lang.String.length():int (11 bytes)   trivial (relevance=8.000000, probability=0.062432, bonus=1.000000, nodes=8)
                            @ 108  java.util.concurrent.locks.AbstractQueuedSynchronizer.tryAcquireShared(int):int (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.lang.UnsupportedOperationException.<init>():void (5 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.RuntimeException.<init>():void (5 bytes)   inline method (bytecode parsing)
                                  @ 1  java.lang.Exception.<init>():void (5 bytes)   inline method (bytecode parsing)
                                          @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.062432, bonus=1.000000, nodes=5)
                                        @ 22  java.lang.String.length():int (11 bytes)   trivial (relevance=8.000000, probability=0.062432, bonus=1.000000, nodes=5)
                            @ 245  java.util.concurrent.locks.AbstractQueuedSynchronizer$ExclusiveNode.<init>():void (5 bytes)   inline method (bytecode parsing)
                              @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer$Node.<init>():void (5 bytes)   inline method (bytecode parsing)
                            @ 290  java.util.concurrent.locks.AbstractQueuedSynchronizer$Node.setPrevRelaxed(AbstractQueuedSynchronizer$Node):void (12 bytes)   inline method (bytecode parsing)
                                          @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.062432, bonus=1.000000, nodes=5)
                                        @ 29  java.lang.String.length():int (11 bytes)   trivial (relevance=21.333333, probability=0.062432, bonus=1.000000, nodes=8)
                                        @ 68  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=21.333333, probability=0.062432, bonus=1.000000, nodes=9)
                            @ 393  java.lang.Thread.interrupted():boolean (7 bytes)   inline method (bytecode parsing)
                                        @ 74  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=21.333333, probability=0.062432, bonus=1.000000, nodes=5)
                                        @ 81  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=21.333333, probability=0.062432, bonus=1.000000, nodes=9)
                            @ 162  java.lang.StringConcatHelper.newArray(long):byte[] (40 bytes)   inline method (bytecode parsing)
                            @ 287  java.lang.String.<init>(byte[], byte):void (15 bytes)   inline method (bytecode parsing)
                                @ 15  java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer$Node, int, boolean, boolean, boolean, long):int (424 bytes)   not inlining relevance-based (relevance=0.002503, probability=0.002223, bonus=1.000000, nodes=226 > 0.750820)
                              @ 4  java.util.concurrent.locks.ReentrantLock$Sync.lock():void (13 bytes)   relevance-based (relevance=1.149366, probability=1.000000, bonus=1.000000, nodes=57 <= 300.000000)
                                @ 1  java.io.PrintStream.ensureOpen():void (18 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=7)
                                            @ 3  java.lang.Math.max(int, int):int (11 bytes)   trivial (relevance=0.500000, probability=0.000366, bonus=1.000000, nodes=8)
                                          @ 94  jdk.internal.util.ArraysSupport.newLength(int, int, int):int (27 bytes)   relevance-based (relevance=0.500000, probability=0.000366, bonus=1.000000, nodes=15 <= 150.000000)
                                            @ 25  java.lang.Math.min(int, int):int (11 bytes)   trivial (relevance=0.500005, probability=0.000356, bonus=1.000000, nodes=7)
                            @ 157  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                                          @ 97  java.util.Arrays.copyOf(int[], int):int[] (33 bytes)   relevance-based (relevance=0.500000, probability=0.000366, bonus=1.000000, nodes=28 <= 150.000000)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  jdk.graal.compiler.hotspot.HotSpotTTYStreamProvider$LogStreamOptionKey$DelayedOutputStream$$Lambda/0x00007f2ce02d09d0.<init>(String):void (10 bytes)   inline method (bytecode parsing)
                            @ 210  jdk.vm.ci.hotspot.HotSpotJVMCIRuntime.getLogStream():OutputStream (9 bytes)   inline method (bytecode parsing)
                                            @ 51  jdk.internal.misc.Unsafe.allocateUninitializedArray0(Class, int):Object (90 bytes)   trivial (relevance=0.499990, probability=0.000366, bonus=1.000000, nodes=6)
                                          @ 33  jdk.internal.misc.Unsafe.allocateUninitializedArray(Class, int):Object (55 bytes)   relevance-based (relevance=0.499990, probability=0.000366, bonus=1.000000, nodes=10 <= 149.997000)
                                        @ 120  java.lang.StringLatin1.replace(byte[], int, byte[], int, byte[], int):String (291 bytes)   relevance-based (relevance=1.000000, probability=0.002927, bonus=1.000000, nodes=208 <= 300.000000)
                            @ 0  jdk.graal.compiler.options.OptionValues.newOptionMap():EconomicMap (7 bytes)   inline method (bytecode parsing)
                              @ 3  org.graalvm.collections.EconomicMap.create(Equivalence):EconomicMap (6 bytes)   inline method (bytecode parsing)
                                @ 2  org.graalvm.collections.EconomicMapImpl.create(Equivalence, boolean):EconomicMapImpl (13 bytes)   inline method (bytecode parsing)
                                  @ 6  org.graalvm.collections.EconomicMapImpl.<init>(Equivalence, boolean):void (30 bytes)   inline method (bytecode parsing)
                                  @ 9  org.graalvm.collections.EconomicMapImpl.intercept(EconomicMapImpl):EconomicMapImpl (2 bytes)   inline method (bytecode parsing)
                            @ 6  jdk.vm.ci.common.InitTimer.timer(String):InitTimer (19 bytes)   inline method (bytecode parsing)
                            @ 239  org.graalvm.collections.EconomicMap.create():EconomicMap (7 bytes)   inline method (bytecode parsing)
                              @ 3  org.graalvm.collections.EconomicMap.create(Equivalence):EconomicMap (6 bytes)   inline method (bytecode parsing)
                                @ 2  org.graalvm.collections.EconomicMapImpl.create(Equivalence, boolean):EconomicMapImpl (13 bytes)   inline method (bytecode parsing)
                                  @ 6  org.graalvm.collections.EconomicMapImpl.<init>(Equivalence, boolean):void (30 bytes)   inline method (bytecode parsing)
                                  @ 9  org.graalvm.collections.EconomicMapImpl.intercept(EconomicMapImpl):EconomicMapImpl (2 bytes)   inline method (bytecode parsing)
                            @ 588  java.lang.StringUTF16.compress(byte[], int, int):byte[] (20 bytes)   inline method (bytecode parsing)
                            @ 295  java.lang.String.startsWith(String):boolean (7 bytes)   inline method (bytecode parsing)
                            @ 305  java.lang.String.length():int (11 bytes)   inline method (bytecode parsing)
                            @ 605  java.lang.String.<init>(byte[], byte):void (15 bytes)   inline method (bytecode parsing)
                              @ 6  java.lang.String.coder():byte (15 bytes)   inline method (bytecode parsing)
                            @ 308  java.lang.String.substring(int):String (10 bytes)   inline method (bytecode parsing)
                            @ 616  java.lang.String.<init>(byte[], byte):void (15 bytes)   inline method (bytecode parsing)
                            @ 311  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.LambdaForm$MH/0x00007f2ce0003800.invoke(Object, Object):Object (25 bytes)   inline method (bytecode parsing)
                                @ 21  java.lang.invoke.DirectMethodHandle$Holder.invokeStatic(Object, Object, Object):Object (15 bytes)   inline method (bytecode parsing)
                                  @ 1  java.lang.invoke.DirectMethodHandle.internalMemberName(Object):Object (8 bytes)   inline method (bytecode parsing)
                                  @ 11  java.lang.StringConcatHelper.simpleConcat(Object, Object):String (94 bytes)   inline method (bytecode parsing)
                                    @ 1  java.lang.StringConcatHelper.stringOf(Object):String (20 bytes)   inline method (bytecode parsing)
                                      @ 5  java.lang.String.toString():String (2 bytes)   inline method (bytecode parsing)
                                    @ 11  java.lang.String.isEmpty():boolean (14 bytes)   inline method (bytecode parsing)
                                    @ 61  java.lang.StringConcatHelper.newArray(long):byte[] (40 bytes)   inline method (bytecode parsing)
                            @ 322  java.lang.String.startsWith(String):boolean (7 bytes)   inline method (bytecode parsing)
                            @ 359  java.lang.String.length():int (11 bytes)   inline method (bytecode parsing)
                              @ 6  java.lang.String.coder():byte (15 bytes)   inline method (bytecode parsing)
                            @ 362  java.lang.String.substring(int):String (10 bytes)   inline method (bytecode parsing)
                                          @ 76  java.lang.StringLatin1.indexOf(byte[], byte[]):int (25 bytes)   relevance-based (relevance=1.000000, probability=0.010243, bonus=1.000000, nodes=16 <= 300.000000)
                            @ 8  java.lang.StringUTF16.length(byte[]):int (5 bytes)   inline method (bytecode parsing)
                            @ 20  java.lang.StringUTF16.length(byte[]):int (5 bytes)   inline method (bytecode parsing)
                            @ 8  jdk.vm.ci.services.Services.getSavedProperty(String):String (13 bytes)   inline method (bytecode parsing)
                            @ 11  java.lang.Boolean.parseBoolean(String):boolean (7 bytes)   inline method (bytecode parsing)
                            @ 24  java.util.concurrent.atomic.AtomicInteger.<init>():void (5 bytes)   inline method (bytecode parsing)
                                          @ 95  java.lang.StringUTF16.indexOfLatin1(byte[], byte[]):int (31 bytes)   relevance-based (relevance=1.000010, probability=0.010243, bonus=1.000000, nodes=22 <= 300.000000)
                              @ 1  java.lang.Number.<init>():void (5 bytes)   inline method (bytecode parsing)
                            @ 4  java.lang.StringUTF16.checkBoundsBeginEnd(int, int, byte[]):void (10 bytes)   inline method (bytecode parsing)
                              @ 3  java.lang.StringUTF16.length(byte[]):int (5 bytes)   inline method (bytecode parsing)
                            @ 11  java.lang.String.checkBoundsBeginEnd(int, int, int):void (11 bytes)   inline method (bytecode parsing)
                              @ 6  jdk.internal.util.Preconditions.checkFromToIndex(int, int, int, BiFunction):int (24 bytes)   inline method (bytecode parsing)
                                              @ 0  jdk.vm.ci.services.Services.checkJVMCIEnabled():void (17 bytes)   trivial (relevance=4.000000, probability=0.031250, bonus=1.000000, nodes=3)
                                                @ 0  java.lang.System.allowSecurityManager():boolean (13 bytes)   trivial (relevance=1.000796, probability=0.007812, bonus=1.000000, nodes=8)
                                              @ 42  java.lang.System.getSecurityManager():SecurityManager (12 bytes)   relevance-based (relevance=1.000000, probability=0.007812, bonus=1.000000, nodes=14 <= 300.000000)
                                              @ 6  jdk.internal.util.Preconditions.checkFromToIndex(int, int, int, BiFunction):int (24 bytes)   relevance-based (relevance=1.000000, probability=0.010243, bonus=1.000000, nodes=14 <= 300.000000)
                            @ 12  java.lang.IllegalStateException.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  java.lang.RuntimeException.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                                @ 2  java.lang.Exception.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                                            @ 6  java.lang.String.checkBoundsBeginEnd(int, int, int):void (11 bytes)   relevance-based (relevance=1.000010, probability=0.010243, bonus=1.000000, nodes=13 <= 300.000000)
                                          @ 178  java.lang.StringUTF16.indexOfLatin1(byte[], int, byte[], int, int):int (24 bytes)   relevance-based (relevance=1.000010, probability=0.010243, bonus=1.000000, nodes=24 <= 300.000000)
                            @ 12  java.lang.NullPointerException.<init>():void (5 bytes)   inline method (bytecode parsing)
                                        @ 151  java.lang.StringUTF16.replace(byte[], int, boolean, byte[], int, boolean, byte[], int, boolean):String (620 bytes)   not inlining relevance-based (relevance=28.000280, probability=0.020486, bonus=1.000000, nodes=311 > 300.000000)
                              @ 1  java.lang.RuntimeException.<init>():void (5 bytes)   inline method (bytecode parsing)
                                      @ 79  java.lang.String.replace(CharSequence, CharSequence):String (258 bytes)   relevance-based (relevance=1.000010, probability=0.062432, bonus=1.000000, nodes=237 <= 300.000000)
                                @ 1  java.lang.Exception.<init>():void (5 bytes)   inline method (bytecode parsing)
                 n                                    @ 25  java.lang.NullPointerException.getExtendedNPEMessage():String (0 bytes)   not inlining it is a non-intrinsic native method
                 n                                      @ 16  java.lang.Throwable.fillInStackTrace(int):Throwable (0 bytes)   not inlining it is a non-intrinsic native method
              s                                         @ 37  java.lang.Throwable.fillInStackTrace():Throwable (29 bytes)   relevance-based (relevance=4.000000, probability=0.000977, bonus=1.000000, nodes=34 <= 300.000000)
                                    @ 37  jdk.graal.compiler.hotspot.HotSpotTTYStreamProvider$LogStreamOptionKey.makeFilename(String):String (157 bytes)   not inlining relevance-based (relevance=2.000000, probability=0.124864, bonus=1.000000, nodes=434 > 300.000000)
              s                                       @ 24  java.lang.NullPointerException.fillInStackTrace():Throwable (41 bytes)   relevance-based (relevance=1.000000, probability=0.000977, bonus=1.000000, nodes=65 <= 300.000000)
                                                    @ 1  java.lang.Throwable.<init>():void (29 bytes)   relevance-based (relevance=1.000000, probability=0.000977, bonus=1.000000, nodes=73 <= 300.000000)
                                                  @ 18  java.util.Collections$UnmodifiableMap.<init>(Map):void (22 bytes)   relevance-based (relevance=1.000000, probability=0.001953, bonus=1.000000, nodes=87 <= 300.000000)
                                                @ 19  java.util.Collections.unmodifiableMap(Map):Map (22 bytes)   relevance-based (relevance=1.000000, probability=0.003906, bonus=1.000000, nodes=95 <= 300.000000)
                                      @ 17  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=0.435390, probability=0.037838, bonus=1.000000, nodes=9)
                 n                                @ 16  java.lang.Throwable.fillInStackTrace(int):Throwable (0 bytes)   not inlining it is a non-intrinsic native method
              s                                   @ 24  java.lang.Throwable.fillInStackTrace():Throwable (29 bytes)   relevance-based (relevance=1.000000, probability=0.003906, bonus=1.000000, nodes=34 <= 300.000000)
                                      @ 27  java.lang.StringLatin1.hashCode(byte[]):int (52 bytes)   relevance-based (relevance=0.435390, probability=0.037838, bonus=1.000000, nodes=22 <= 130.617149)
                                                @ 2  java.lang.Throwable.<init>(String):void (34 bytes)   relevance-based (relevance=16.000000, probability=0.003906, bonus=1.000000, nodes=45 <= 300.000000)
                                              @ 61  jdk.internal.misc.VM.getSavedProperties():Map (23 bytes)   relevance-based (relevance=1.000796, probability=0.007812, bonus=1.000000, nodes=147 <= 300.000000)
                                    @ 49  java.lang.String.hashCode():int (60 bytes)   relevance-based (relevance=2.000000, probability=0.124864, bonus=1.000000, nodes=47 <= 300.000000)
                                  @ 1  jdk.graal.compiler.hotspot.HotSpotTTYStreamProvider$LogStreamOptionKey$DelayedOutputStream.lazy():OutputStream (266 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.998915, bonus=1.000000, nodes=307 > 300.000000)
                                            @ 0  jdk.vm.ci.services.Services.getSavedProperties():Map (81 bytes)   relevance-based (relevance=1.000000, probability=0.031250, bonus=1.000000, nodes=201 <= 300.000000)
                                @ 7  java.io.OutputStream.write(byte[], int, int):void (34 bytes)   not inlining no type profile exists
                                @ 11  jdk.graal.compiler.hotspot.HotSpotTTYStreamProvider$LogStreamOptionKey$DelayedOutputStream.write(byte[], int, int):void (11 bytes)   relevance-based (relevance=1.001087, probability=1.000000, bonus=1.000000, nodes=84 <= 300.000000)
                                          @ 4  java.util.Map.get(Object):Object (0 bytes)   not inlining no type profile exists
                            @ 11  jdk.internal.misc.InternalLock.lock():void (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.util.concurrent.locks.ReentrantLock.lock():void (8 bytes)   inline method (bytecode parsing)
                            @ 22  jdk.internal.misc.InternalLock.unlock():void (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.util.concurrent.locks.ReentrantLock.unlock():void (10 bytes)   inline method (bytecode parsing)
                                                @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.006592, bonus=1.000000, nodes=5)
                                @ 5  java.util.concurrent.locks.AbstractQueuedSynchronizer.release(int):boolean (19 bytes)   inline method (bytecode parsing)
                                              @ 14  java.lang.String.length():int (11 bytes)   trivial (relevance=2.000000, probability=0.006592, bonus=1.000000, nodes=8)
                                                @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.006592, bonus=1.000000, nodes=5)
                                              @ 18  java.lang.String.length():int (11 bytes)   trivial (relevance=2.000000, probability=0.006592, bonus=1.000000, nodes=5)
                                @ 25  java.io.BufferedOutputStream.flush():void (60 bytes)   not inlining relevance-based (relevance=0.001087, probability=0.001085, bonus=1.000000, nodes=68 > 0.325998)
                              @ 18  java.io.PrintStream.implWrite(byte[], int, int):void (29 bytes)   relevance-based (relevance=1.125700, probability=1.000000, bonus=1.000000, nodes=109 <= 300.000000)
                                                @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.003296, bonus=1.000000, nodes=5)
                                              @ 30  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000000, probability=0.003296, bonus=1.000000, nodes=5)
                            @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 8  java.util.concurrent.locks.AbstractOwnableSynchronizer.getExclusiveOwnerThread():Thread (5 bytes)   inline accessor method (bytecode parsing)
                            @ 146  java.lang.StringUTF16.regionMatchesCI_Latin1(byte[], int, byte[], int, int):boolean (10 bytes)   inline method (bytecode parsing)
                            @ 41  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                            @ 46  java.util.concurrent.locks.AbstractQueuedSynchronizer.setState(int):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  java.util.concurrent.locks.ReentrantLock$Sync.tryRelease(int):boolean (51 bytes)   relevance-based (relevance=1.125700, probability=1.000000, bonus=1.000000, nodes=37 <= 300.000000)
                                                  @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.003296, bonus=1.000000, nodes=5)
                                                @ 27  java.lang.String.length():int (11 bytes)   trivial (relevance=16.000000, probability=0.003296, bonus=1.000000, nodes=5)
                            @ 22  java.util.concurrent.locks.AbstractQueuedSynchronizer$Node.getAndUnsetStatus(int):int (14 bytes)   inline method (bytecode parsing)
                              @ 10  jdk.internal.misc.Unsafe.getAndBitwiseAndInt(Object, long, int):int (27 bytes)   inline method (bytecode parsing)
                                                  @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.003296, bonus=1.000000, nodes=5)
                                                @ 43  java.lang.String.length():int (11 bytes)   trivial (relevance=16.000000, probability=0.003296, bonus=1.000000, nodes=8)
                                                @ 70  java.lang.String.coder():byte (15 bytes)   trivial (relevance=4.000000, probability=0.000824, bonus=1.000000, nodes=5)
                                                @ 78  java.lang.String.coder():byte (15 bytes)   trivial (relevance=2.000000, probability=0.000824, bonus=1.000000, nodes=5)
                            @ 5  java.lang.Thread.isVirtual():boolean (5 bytes)   inline method (bytecode parsing)
                            @ 58  java.lang.Character.toUpperCase(char):char (6 bytes)   inline method (bytecode parsing)
                                @ 30  java.util.concurrent.locks.LockSupport.unpark(Thread):void (26 bytes)   not inlining relevance-based (relevance=0.006042, probability=0.003972, bonus=1.000000, nodes=23 > 1.812630)
                              @ 1  java.lang.Character.toUpperCase(int):int (9 bytes)   inline method (bytecode parsing)
                              @ 12  java.util.concurrent.locks.AbstractQueuedSynchronizer.signalNext(AbstractQueuedSynchronizer$Node):void (34 bytes)   relevance-based (relevance=0.980278, probability=0.870817, bonus=1.000000, nodes=56 <= 294.083512)
                            @ 75  java.lang.Character.toLowerCase(char):char (6 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.Character.toLowerCase(int):int (9 bytes)   inline method (bytecode parsing)
                            @ 80  java.lang.Character.toLowerCase(char):char (6 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.Character.toLowerCase(int):int (9 bytes)   inline method (bytecode parsing)
                                                  @ 50  java.lang.CharacterDataLatin1.toUpperCase(int):int (67 bytes)   relevance-based (relevance=4.000000, probability=0.000183, bonus=1.000000, nodes=52 <= 300.000000)
                                                  @ 1  java.lang.CharacterData.of(int):CharacterData (136 bytes)   trivial (relevance=32.000000, probability=0.000183, bonus=1.000000, nodes=8)
                                                  @ 5  java.lang.CharacterDataLatin1.toUpperCase(int):int (67 bytes)   relevance-based (relevance=32.000000, probability=0.000183, bonus=1.000000, nodes=52 <= 300.000000)
                                                  @ 1  java.lang.CharacterData.of(int):CharacterData (136 bytes)   trivial (relevance=16.000000, probability=0.000092, bonus=1.000000, nodes=8)
                                                  @ 5  java.lang.CharacterDataLatin1.toLowerCase(int):int (44 bytes)   relevance-based (relevance=16.000000, probability=0.000092, bonus=1.000000, nodes=12 <= 300.000000)
                                                  @ 1  java.lang.CharacterData.of(int):CharacterData (136 bytes)   trivial (relevance=16.000000, probability=0.000092, bonus=1.000000, nodes=8)
                                                  @ 5  java.lang.CharacterDataLatin1.toLowerCase(int):int (44 bytes)   relevance-based (relevance=16.000000, probability=0.000092, bonus=1.000000, nodes=12 <= 300.000000)
                                                @ 131  java.lang.StringLatin1.regionMatchesCI_UTF16(byte[], int, byte[], int, int):boolean (93 bytes)   relevance-based (relevance=1.000000, probability=0.000412, bonus=1.000000, nodes=157 <= 300.000000)
                                                  @ 32  java.lang.CharacterDataLatin1.equalsIgnoreCase(byte, byte):boolean (63 bytes)   relevance-based (relevance=2.000000, probability=0.000275, bonus=1.000000, nodes=42 <= 300.000000)
                                                @ 98  java.lang.StringLatin1.regionMatchesCI(byte[], int, byte[], int, int):boolean (45 bytes)   relevance-based (relevance=1.000000, probability=0.000412, bonus=1.000000, nodes=64 <= 300.000000)
                                              @ 33  java.lang.String.regionMatches(boolean, int, String, int, int):boolean (150 bytes)   relevance-based (relevance=1.000000, probability=0.003296, bonus=1.000000, nodes=236 <= 300.000000)
                                            @ 3  java.lang.String.equalsIgnoreCase(String):boolean (45 bytes)   relevance-based (relevance=3.377687, probability=0.026367, bonus=1.000000, nodes=253 <= 300.000000)
                                          @ 0  jdk.vm.ci.common.InitTimer.isEnabled():boolean (37 bytes)   not inlining relevance-based (relevance=2.000000, probability=0.062500, bonus=1.000000, nodes=481 > 300.000000)
                            @ 28  java.lang.StringBuilder.<init>():void (7 bytes)   inline method (bytecode parsing)
                            @ 33  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 39  java.lang.StringBuilder.append(Object):StringBuilder (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 42  java.lang.StringBuilder.toString():String (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.String.<init>(StringBuilder):void (7 bytes)   inline method (bytecode parsing)
                            @ 120  java.lang.StringBuilder.<init>():void (7 bytes)   inline method (bytecode parsing)
                            @ 125  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 137  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 141  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 144  java.lang.StringBuilder.toString():String (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.String.<init>(StringBuilder):void (7 bytes)   inline method (bytecode parsing)
                                            @ 7  java.util.concurrent.atomic.AtomicInteger.getAndIncrement():int (12 bytes)   trivial (relevance=2.000000, probability=0.031250, bonus=1.000000, nodes=8)
                                            @ 3  java.lang.AbstractStringBuilder.<init>(int):void (39 bytes)   relevance-based (relevance=1.000000, probability=0.015625, bonus=1.000000, nodes=11 <= 300.000000)
                                            @ 2  java.lang.AbstractStringBuilder.append(String):AbstractStringBuilder (45 bytes)   not inlining too large previous low-level graph (low-level-nodes: 345, relevance=1.000000, probability=0.015625, bonus=1.000000, nodes=21)
                            @ 12  java.lang.StringBuilder.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                            @ 22  java.lang.StringBuilder.<init>():void (7 bytes)   inline method (bytecode parsing)
                            @ 29  java.lang.StringBuilder.append(char):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 66  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 74  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 90  java.lang.StringBuilder.append(char):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 100  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 103  java.lang.StringBuilder.toString():String (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.String.<init>(StringBuilder):void (7 bytes)   inline method (bytecode parsing)
                                                @ 2  jdk.graal.compiler.core.common.spi.ForeignCallSignature.toString(boolean):String (107 bytes)   not inlining relevance-based (relevance=0.001121, probability=0.000017, bonus=1.000000, nodes=65 > 0.336407)
                                              @ 11  java.lang.String.toString():String (2 bytes)   relevance-based (relevance=1.000000, probability=0.015625, bonus=1.000000, nodes=22 <= 300.000000)
                                            @ 2  java.lang.String.valueOf(Object):String (15 bytes)   trivial (relevance=1.000000, probability=0.015625, bonus=1.000000, nodes=9)
                                            @ 3  java.lang.AbstractStringBuilder.<init>(int):void (39 bytes)   relevance-based (relevance=1.000000, probability=0.015625, bonus=1.000000, nodes=11 <= 300.000000)
                                            @ 2  java.lang.AbstractStringBuilder.append(String):AbstractStringBuilder (45 bytes)   not inlining too large previous low-level graph (low-level-nodes: 345, relevance=1.000000, probability=0.015625, bonus=1.000000, nodes=21)
                                                @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.015625, bonus=1.000000, nodes=5)
                                              @ 1  java.lang.String.length():int (11 bytes)   trivial (relevance=1.162748, probability=0.015625, bonus=1.000000, nodes=5)
                                                @ 6  jdk.internal.util.Preconditions.checkFromToIndex(int, int, int, BiFunction):int (24 bytes)   relevance-based (relevance=1.000000, probability=0.015625, bonus=1.000000, nodes=12 <= 300.000000)
                                              @ 8  java.lang.String.checkBoundsBeginEnd(int, int, int):void (11 bytes)   relevance-based (relevance=1.162748, probability=0.015625, bonus=1.000000, nodes=11 <= 300.000000)
                                              @ 28  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=0.013438, bonus=1.000000, nodes=5)
                            @ 20  java.lang.String.<init>(byte[], byte):void (15 bytes)   inline method (bytecode parsing)
                            @ 13  java.util.Arrays.copyOfRangeByte(byte[], int, int):byte[] (33 bytes)   inline method (bytecode parsing)
                              @ 2  java.util.Arrays.checkLength(int, int):void (38 bytes)   inline method (bytecode parsing)
                                                  @ 24  java.lang.Math.min(int, int):int (11 bytes)   trivial (relevance=1.000010, probability=0.010586, bonus=1.000000, nodes=7)
                                                @ 16  java.util.Arrays.copyOfRange(byte[], int, int):byte[] (25 bytes)   relevance-based (relevance=1.000000, probability=0.013438, bonus=1.000000, nodes=27 <= 300.000000)
                                              @ 41  java.lang.StringLatin1.newString(byte[], int, int):String (24 bytes)   relevance-based (relevance=1.000000, probability=0.013438, bonus=1.000000, nodes=45 <= 300.000000)
                                            @ 134  java.lang.String.substring(int, int):String (58 bytes)   relevance-based (relevance=1.000000, probability=0.015625, bonus=1.000000, nodes=59 <= 300.000000)
                            @ 23  java.io.OutputStreamWriter.flushBuffer():void (8 bytes)   inline method (bytecode parsing)
                                            @ 2  java.lang.AbstractStringBuilder.append(String):AbstractStringBuilder (45 bytes)   not inlining too large previous low-level graph (low-level-nodes: 345, relevance=1.476011, probability=0.015625, bonus=1.000000, nodes=21)
                                            @ 2  java.lang.AbstractStringBuilder.append(String):AbstractStringBuilder (45 bytes)   not inlining too large previous low-level graph (low-level-nodes: 345, relevance=1.476011, probability=0.015625, bonus=1.000000, nodes=21)
                            @ 5  java.lang.AbstractStringBuilder.getValue():byte[] (5 bytes)   inline accessor method (bytecode parsing)
                              @ 1  java.io.PrintStream.ensureOpen():void (18 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=7)
                            @ 1  java.lang.AbstractStringBuilder.length():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 10  java.lang.StringBuilder.length():int (5 bytes)   trivial (relevance=1.000000, probability=0.015625, bonus=1.000000, nodes=5)
                                              @ 16  java.lang.AbstractStringBuilder.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=0.015625, bonus=1.000000, nodes=9)
                                  @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                                @ 4  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=8)
                            @ 13  java.util.Arrays.copyOfRangeByte(byte[], int, int):byte[] (33 bytes)   inline method (bytecode parsing)
                              @ 2  java.util.Arrays.checkLength(int, int):void (38 bytes)   inline method (bytecode parsing)
                            @ 23  jdk.internal.misc.InternalLock.lock():void (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.util.concurrent.locks.ReentrantLock.lock():void (8 bytes)   inline method (bytecode parsing)
                            @ 35  jdk.internal.misc.InternalLock.unlock():void (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.util.concurrent.locks.ReentrantLock.unlock():void (10 bytes)   inline method (bytecode parsing)
                                @ 5  java.util.concurrent.locks.AbstractQueuedSynchronizer.release(int):boolean (19 bytes)   inline method (bytecode parsing)
                                                @ 24  java.lang.Math.min(int, int):int (11 bytes)   trivial (relevance=1.000010, probability=0.012309, bonus=1.000000, nodes=7)
                                              @ 32  java.util.Arrays.copyOfRange(byte[], int, int):byte[] (25 bytes)   relevance-based (relevance=1.000000, probability=0.015625, bonus=1.000000, nodes=33 <= 300.000000)
                                            @ 3  java.lang.String.<init>(AbstractStringBuilder, Void):void (99 bytes)   relevance-based (relevance=1.476011, probability=0.015625, bonus=1.000000, nodes=48 <= 300.000000)
                            @ 9  java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(int):void (20 bytes)   inline method (bytecode parsing)
                            @ 7  java.util.concurrent.locks.AbstractQueuedSynchronizer.compareAndSetState(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                                                @ 11  java.lang.String.toString():String (2 bytes)   trivial (relevance=1.000000, probability=0.015625, bonus=1.000000, nodes=4)
                                              @ 11  java.lang.String.valueOf(Object):String (15 bytes)   trivial (relevance=1.000000, probability=0.015625, bonus=1.000000, nodes=4)
                            @ 15  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                            @ 21  java.util.concurrent.locks.AbstractOwnableSynchronizer.getExclusiveOwnerThread():Thread (5 bytes)   inline accessor method (bytecode parsing)
                            @ 29  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 11  jdk.internal.misc.InternalLock.lock():void (8 bytes)   inline method (bytecode parsing)
                            @ 51  java.util.concurrent.locks.AbstractQueuedSynchronizer.setState(int):void (6 bytes)   inline method (bytecode parsing)
                              @ 4  java.util.concurrent.locks.ReentrantLock.lock():void (8 bytes)   inline method (bytecode parsing)
                            @ 23  jdk.internal.misc.InternalLock.unlock():void (8 bytes)   inline method (bytecode parsing)
                                    @ 1  java.util.concurrent.locks.ReentrantLock$NonfairSync.initialTryLock():boolean (58 bytes)   relevance-based (relevance=1.007278, probability=1.000000, bonus=1.000000, nodes=40 <= 300.000000)
                              @ 4  java.util.concurrent.locks.ReentrantLock.unlock():void (10 bytes)   inline method (bytecode parsing)
                                @ 5  java.util.concurrent.locks.AbstractQueuedSynchronizer.release(int):boolean (19 bytes)   inline method (bytecode parsing)
                            @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 10  java.util.concurrent.locks.AbstractQueuedSynchronizer.compareAndSetState(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 9  java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(int):void (20 bytes)   inline method (bytecode parsing)
                            @ 20  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                                    @ 2  java.util.concurrent.locks.ReentrantLock$NonfairSync.tryAcquire(int):boolean (27 bytes)   not inlining relevance-based (relevance=0.005005, probability=0.004447, bonus=1.000000, nodes=36 > 1.501641)
                            @ 7  java.util.concurrent.locks.AbstractQueuedSynchronizer.compareAndSetState(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 15  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                            @ 21  java.util.concurrent.locks.AbstractOwnableSynchronizer.getExclusiveOwnerThread():Thread (5 bytes)   inline accessor method (bytecode parsing)
                            @ 29  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 108  java.util.concurrent.locks.AbstractQueuedSynchronizer.tryAcquireShared(int):int (8 bytes)   inline method (bytecode parsing)
                            @ 51  java.util.concurrent.locks.AbstractQueuedSynchronizer.setState(int):void (6 bytes)   inline method (bytecode parsing)
                              @ 4  java.lang.UnsupportedOperationException.<init>():void (5 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.RuntimeException.<init>():void (5 bytes)   inline method (bytecode parsing)
                                  @ 1  java.lang.Exception.<init>():void (5 bytes)   inline method (bytecode parsing)
                                                  @ 1  java.util.concurrent.locks.ReentrantLock$NonfairSync.initialTryLock():boolean (58 bytes)   relevance-based (relevance=1.007158, probability=0.007812, bonus=1.000000, nodes=40 <= 300.000000)
                            @ 245  java.util.concurrent.locks.AbstractQueuedSynchronizer$ExclusiveNode.<init>():void (5 bytes)   inline method (bytecode parsing)
                              @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer$Node.<init>():void (5 bytes)   inline method (bytecode parsing)
                            @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 290  java.util.concurrent.locks.AbstractQueuedSynchronizer$Node.setPrevRelaxed(AbstractQueuedSynchronizer$Node):void (12 bytes)   inline method (bytecode parsing)
                            @ 10  java.util.concurrent.locks.AbstractQueuedSynchronizer.compareAndSetState(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 20  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                            @ 393  java.lang.Thread.interrupted():boolean (7 bytes)   inline method (bytecode parsing)
                                                  @ 2  java.util.concurrent.locks.ReentrantLock$NonfairSync.tryAcquire(int):boolean (27 bytes)   not inlining relevance-based (relevance=0.005005, probability=0.000035, bonus=1.000000, nodes=36 > 1.501641)
                            @ 108  java.util.concurrent.locks.AbstractQueuedSynchronizer.tryAcquireShared(int):int (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.lang.UnsupportedOperationException.<init>():void (5 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.RuntimeException.<init>():void (5 bytes)   inline method (bytecode parsing)
                                  @ 1  java.lang.Exception.<init>():void (5 bytes)   inline method (bytecode parsing)
                            @ 245  java.util.concurrent.locks.AbstractQueuedSynchronizer$ExclusiveNode.<init>():void (5 bytes)   inline method (bytecode parsing)
                              @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer$Node.<init>():void (5 bytes)   inline method (bytecode parsing)
                            @ 290  java.util.concurrent.locks.AbstractQueuedSynchronizer$Node.setPrevRelaxed(AbstractQueuedSynchronizer$Node):void (12 bytes)   inline method (bytecode parsing)
                            @ 393  java.lang.Thread.interrupted():boolean (7 bytes)   inline method (bytecode parsing)
                                    @ 15  java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer$Node, int, boolean, boolean, boolean, long):int (424 bytes)   not inlining relevance-based (relevance=0.002503, probability=0.002223, bonus=1.000000, nodes=226 > 0.750820)
                                  @ 4  java.util.concurrent.locks.ReentrantLock$Sync.lock():void (13 bytes)   relevance-based (relevance=1.148225, probability=1.000000, bonus=1.000000, nodes=57 <= 300.000000)
                            @ 39  java.io.BufferedWriter.min(int, int):int (9 bytes)   inline method (bytecode parsing)
                                    @ 1  java.io.BufferedWriter.ensureOpen():void (18 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=7)
                                                  @ 15  java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer$Node, int, boolean, boolean, boolean, long):int (424 bytes)   not inlining relevance-based (relevance=0.002503, probability=0.000017, bonus=1.000000, nodes=226 > 0.750820)
                                                @ 4  java.util.concurrent.locks.ReentrantLock$Sync.lock():void (13 bytes)   relevance-based (relevance=1.149366, probability=0.007812, bonus=1.000000, nodes=57 <= 300.000000)
                                    @ 6  java.io.BufferedWriter.growIfNeeded(int):void (63 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=15 <= 300.000000)
                            @ 16  java.lang.String.checkBoundsOffCount(int, int, int):int (10 bytes)   inline method (bytecode parsing)
                            @ 16  java.io.BufferedWriter.newLine():void (8 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.System.lineSeparator():String (4 bytes)   inline method (bytecode parsing)
                            @ 30  java.io.OutputStreamWriter.flushBuffer():void (8 bytes)   inline method (bytecode parsing)
                                        @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                                      @ 3  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=8)
                                                  @ 1  java.io.PrintStream.ensureOpen():void (18 bytes)   trivial (relevance=2.000000, probability=0.007812, bonus=1.000000, nodes=7)
                                        @ 6  jdk.internal.util.Preconditions.checkFromToIndex(int, int, int, BiFunction):int (24 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                                      @ 6  java.lang.String.checkBoundsBeginEnd(int, int, int):void (11 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=10 <= 300.000000)
                                      @ 6  jdk.internal.util.Preconditions.checkFromIndexSize(int, int, int, BiFunction):int (25 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=15 <= 300.000000)
                                                      @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.007812, bonus=1.000000, nodes=5)
                                                    @ 4  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000000, probability=0.007812, bonus=1.000000, nodes=8)
                                      @ 21  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=9)
                            @ 23  jdk.internal.misc.InternalLock.lock():void (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.util.concurrent.locks.ReentrantLock.lock():void (8 bytes)   inline method (bytecode parsing)
                            @ 35  jdk.internal.misc.InternalLock.unlock():void (8 bytes)   inline method (bytecode parsing)
                                      @ 36  java.lang.StringLatin1.getChars(byte[], int, int, char[], int):void (12 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=38 <= 300.000000)
                              @ 4  java.util.concurrent.locks.ReentrantLock.unlock():void (10 bytes)   inline method (bytecode parsing)
                                @ 5  java.util.concurrent.locks.AbstractQueuedSynchronizer.release(int):boolean (19 bytes)   inline method (bytecode parsing)
                                    @ 60  java.lang.String.getChars(int, int, char[], int):void (55 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=58 <= 300.000000)
                                  @ 30  java.io.BufferedWriter.implWrite(String, int, int):void (100 bytes)   relevance-based (relevance=1.125700, probability=1.000000, bonus=1.000000, nodes=96 <= 300.000000)
                            @ 9  java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(int):void (20 bytes)   inline method (bytecode parsing)
                            @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 7  java.util.concurrent.locks.AbstractQueuedSynchronizer.compareAndSetState(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 8  java.util.concurrent.locks.AbstractOwnableSynchronizer.getExclusiveOwnerThread():Thread (5 bytes)   inline accessor method (bytecode parsing)
                            @ 41  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                            @ 15  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                            @ 46  java.util.concurrent.locks.AbstractQueuedSynchronizer.setState(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 21  java.util.concurrent.locks.AbstractOwnableSynchronizer.getExclusiveOwnerThread():Thread (5 bytes)   inline accessor method (bytecode parsing)
                            @ 29  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 2  java.util.concurrent.locks.ReentrantLock$Sync.tryRelease(int):boolean (51 bytes)   relevance-based (relevance=1.125700, probability=1.000000, bonus=1.000000, nodes=37 <= 300.000000)
                            @ 51  java.util.concurrent.locks.AbstractQueuedSynchronizer.setState(int):void (6 bytes)   inline method (bytecode parsing)
                                                        @ 1  java.util.concurrent.locks.ReentrantLock$NonfairSync.initialTryLock():boolean (58 bytes)   relevance-based (relevance=1.007158, probability=0.007812, bonus=1.000000, nodes=40 <= 300.000000)
                            @ 22  java.util.concurrent.locks.AbstractQueuedSynchronizer$Node.getAndUnsetStatus(int):int (14 bytes)   inline method (bytecode parsing)
                              @ 10  jdk.internal.misc.Unsafe.getAndBitwiseAndInt(Object, long, int):int (27 bytes)   inline method (bytecode parsing)
                            @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 10  java.util.concurrent.locks.AbstractQueuedSynchronizer.compareAndSetState(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 5  java.lang.Thread.isVirtual():boolean (5 bytes)   inline method (bytecode parsing)
                            @ 20  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                                                        @ 2  java.util.concurrent.locks.ReentrantLock$NonfairSync.tryAcquire(int):boolean (27 bytes)   not inlining relevance-based (relevance=0.005005, probability=0.000035, bonus=1.000000, nodes=36 > 1.501641)
                                    @ 30  java.util.concurrent.locks.LockSupport.unpark(Thread):void (26 bytes)   not inlining relevance-based (relevance=0.006043, probability=0.003973, bonus=1.000000, nodes=23 > 1.812823)
                                  @ 12  java.util.concurrent.locks.AbstractQueuedSynchronizer.signalNext(AbstractQueuedSynchronizer$Node):void (34 bytes)   relevance-based (relevance=0.980383, probability=0.870909, bonus=1.000000, nodes=56 <= 294.114875)
                                @ 7  java.io.BufferedWriter.write(String, int, int):void (82 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=265 <= 300.000000)
                            @ 108  java.util.concurrent.locks.AbstractQueuedSynchronizer.tryAcquireShared(int):int (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.lang.UnsupportedOperationException.<init>():void (5 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.RuntimeException.<init>():void (5 bytes)   inline method (bytecode parsing)
                                  @ 1  java.lang.Exception.<init>():void (5 bytes)   inline method (bytecode parsing)
                            @ 245  java.util.concurrent.locks.AbstractQueuedSynchronizer$ExclusiveNode.<init>():void (5 bytes)   inline method (bytecode parsing)
                              @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer$Node.<init>():void (5 bytes)   inline method (bytecode parsing)
                            @ 290  java.util.concurrent.locks.AbstractQueuedSynchronizer$Node.setPrevRelaxed(AbstractQueuedSynchronizer$Node):void (12 bytes)   inline method (bytecode parsing)
                              @ 9  java.io.Writer.write(String):void (11 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=271 <= 300.000000)
                            @ 393  java.lang.Thread.interrupted():boolean (7 bytes)   inline method (bytecode parsing)
                            @ 18  jdk.internal.misc.InternalLock.lock():void (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.util.concurrent.locks.ReentrantLock.lock():void (8 bytes)   inline method (bytecode parsing)
                            @ 26  jdk.internal.misc.InternalLock.unlock():void (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.util.concurrent.locks.ReentrantLock.unlock():void (10 bytes)   inline method (bytecode parsing)
                                @ 5  java.util.concurrent.locks.AbstractQueuedSynchronizer.release(int):boolean (19 bytes)   inline method (bytecode parsing)
                              @ 16  java.io.BufferedWriter.flushBuffer():void (63 bytes)   not inlining too large previous low-level graph (low-level-nodes: 353, relevance=1.125700, probability=1.000000, bonus=1.000000, nodes=58)
                            @ 18  jdk.internal.misc.InternalLock.lock():void (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.util.concurrent.locks.ReentrantLock.lock():void (8 bytes)   inline method (bytecode parsing)
                            @ 26  jdk.internal.misc.InternalLock.unlock():void (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.util.concurrent.locks.ReentrantLock.unlock():void (10 bytes)   inline method (bytecode parsing)
                                @ 5  java.util.concurrent.locks.AbstractQueuedSynchronizer.release(int):boolean (19 bytes)   inline method (bytecode parsing)
                                                        @ 15  java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer$Node, int, boolean, boolean, boolean, long):int (424 bytes)   not inlining relevance-based (relevance=0.002503, probability=0.000017, bonus=1.000000, nodes=226 > 0.750820)
                              @ 4  sun.nio.cs.StreamEncoder.flushBuffer():void (63 bytes)   not inlining too large previous low-level graph (low-level-nodes: 340, relevance=1.125700, probability=1.000000, bonus=1.000000, nodes=58)
                                                      @ 4  java.util.concurrent.locks.ReentrantLock$Sync.lock():void (13 bytes)   relevance-based (relevance=1.149366, probability=0.007812, bonus=1.000000, nodes=57 <= 300.000000)
                            @ 39  java.io.BufferedWriter.min(int, int):int (9 bytes)   inline method (bytecode parsing)
                                                        @ 1  java.io.BufferedWriter.ensureOpen():void (18 bytes)   trivial (relevance=1.000000, probability=0.007812, bonus=1.000000, nodes=7)
                                                        @ 6  java.io.BufferedWriter.growIfNeeded(int):void (63 bytes)   relevance-based (relevance=1.000000, probability=0.007812, bonus=1.000000, nodes=15 <= 300.000000)
                            @ 16  java.lang.String.checkBoundsOffCount(int, int, int):int (10 bytes)   inline method (bytecode parsing)
                                                            @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.007812, bonus=1.000000, nodes=5)
                                                          @ 3  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000000, probability=0.007812, bonus=1.000000, nodes=8)
                                                            @ 6  jdk.internal.util.Preconditions.checkFromToIndex(int, int, int, BiFunction):int (24 bytes)   relevance-based (relevance=1.000000, probability=0.007812, bonus=1.000000, nodes=11 <= 300.000000)
                                                          @ 6  java.lang.String.checkBoundsBeginEnd(int, int, int):void (11 bytes)   relevance-based (relevance=1.000000, probability=0.007812, bonus=1.000000, nodes=10 <= 300.000000)
                                                          @ 6  jdk.internal.util.Preconditions.checkFromIndexSize(int, int, int, BiFunction):int (25 bytes)   relevance-based (relevance=1.000000, probability=0.007812, bonus=1.000000, nodes=15 <= 300.000000)
                                                          @ 21  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=0.007812, bonus=1.000000, nodes=9)
                                                          @ 36  java.lang.StringLatin1.getChars(byte[], int, int, char[], int):void (12 bytes)   relevance-based (relevance=1.000000, probability=0.007812, bonus=1.000000, nodes=38 <= 300.000000)
                                                        @ 60  java.lang.String.getChars(int, int, char[], int):void (55 bytes)   relevance-based (relevance=1.000000, probability=0.007812, bonus=1.000000, nodes=58 <= 300.000000)
                                                      @ 30  java.io.BufferedWriter.implWrite(String, int, int):void (100 bytes)   relevance-based (relevance=1.125700, probability=0.007812, bonus=1.000000, nodes=93 <= 300.000000)
                            @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 8  java.util.concurrent.locks.AbstractOwnableSynchronizer.getExclusiveOwnerThread():Thread (5 bytes)   inline accessor method (bytecode parsing)
                            @ 41  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                            @ 46  java.util.concurrent.locks.AbstractQueuedSynchronizer.setState(int):void (6 bytes)   inline method (bytecode parsing)
                                                      @ 2  java.util.concurrent.locks.ReentrantLock$Sync.tryRelease(int):boolean (51 bytes)   relevance-based (relevance=1.125700, probability=0.007812, bonus=1.000000, nodes=37 <= 300.000000)
                            @ 22  java.util.concurrent.locks.AbstractQueuedSynchronizer$Node.getAndUnsetStatus(int):int (14 bytes)   inline method (bytecode parsing)
                              @ 10  jdk.internal.misc.Unsafe.getAndBitwiseAndInt(Object, long, int):int (27 bytes)   inline method (bytecode parsing)
                            @ 5  java.lang.Thread.isVirtual():boolean (5 bytes)   inline method (bytecode parsing)
                                                        @ 30  java.util.concurrent.locks.LockSupport.unpark(Thread):void (26 bytes)   not inlining relevance-based (relevance=0.006037, probability=0.000031, bonus=1.000000, nodes=23 > 1.811024)
                                                      @ 12  java.util.concurrent.locks.AbstractQueuedSynchronizer.signalNext(AbstractQueuedSynchronizer$Node):void (34 bytes)   relevance-based (relevance=0.979410, probability=0.006797, bonus=1.000000, nodes=56 <= 293.823039)
                                                    @ 7  java.io.BufferedWriter.write(String, int, int):void (82 bytes)   relevance-based (relevance=1.000000, probability=0.007812, bonus=1.000000, nodes=262 <= 300.000000)
                                                  @ 9  java.io.Writer.write(String):void (11 bytes)   relevance-based (relevance=2.000000, probability=0.007812, bonus=1.000000, nodes=266 <= 300.000000)
                                                @ 16  java.io.PrintStream.implWriteln(String):void (48 bytes)   not inlining relevance-based (relevance=1.125700, probability=0.007812, bonus=1.000000, nodes=309 > 300.000000)
                            @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 8  java.util.concurrent.locks.AbstractOwnableSynchronizer.getExclusiveOwnerThread():Thread (5 bytes)   inline accessor method (bytecode parsing)
                            @ 41  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                            @ 46  java.util.concurrent.locks.AbstractQueuedSynchronizer.setState(int):void (6 bytes)   inline method (bytecode parsing)
                                                @ 2  java.util.concurrent.locks.ReentrantLock$Sync.tryRelease(int):boolean (51 bytes)   relevance-based (relevance=1.125700, probability=0.007812, bonus=1.000000, nodes=37 <= 300.000000)
                            @ 22  java.util.concurrent.locks.AbstractQueuedSynchronizer$Node.getAndUnsetStatus(int):int (14 bytes)   inline method (bytecode parsing)
                              @ 10  jdk.internal.misc.Unsafe.getAndBitwiseAndInt(Object, long, int):int (27 bytes)   inline method (bytecode parsing)
                            @ 5  java.lang.Thread.isVirtual():boolean (5 bytes)   inline method (bytecode parsing)
                                                  @ 30  java.util.concurrent.locks.LockSupport.unpark(Thread):void (26 bytes)   not inlining relevance-based (relevance=0.006037, probability=0.000031, bonus=1.000000, nodes=23 > 1.811024)
                                                @ 12  java.util.concurrent.locks.AbstractQueuedSynchronizer.signalNext(AbstractQueuedSynchronizer$Node):void (34 bytes)   relevance-based (relevance=0.979410, probability=0.006797, bonus=1.000000, nodes=56 <= 293.823039)
                            @ 16  java.io.BufferedWriter.newLine():void (8 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.System.lineSeparator():String (4 bytes)   inline method (bytecode parsing)
                            @ 30  java.io.OutputStreamWriter.flushBuffer():void (8 bytes)   inline method (bytecode parsing)
                                                  @ 1  java.io.PrintStream.ensureOpen():void (18 bytes)   trivial (relevance=2.000000, probability=0.007812, bonus=1.000000, nodes=7)
                                                      @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.007812, bonus=1.000000, nodes=5)
                                                    @ 4  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000000, probability=0.007812, bonus=1.000000, nodes=8)
                            @ 23  jdk.internal.misc.InternalLock.lock():void (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.util.concurrent.locks.ReentrantLock.lock():void (8 bytes)   inline method (bytecode parsing)
                            @ 35  jdk.internal.misc.InternalLock.unlock():void (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.util.concurrent.locks.ReentrantLock.unlock():void (10 bytes)   inline method (bytecode parsing)
                                @ 5  java.util.concurrent.locks.AbstractQueuedSynchronizer.release(int):boolean (19 bytes)   inline method (bytecode parsing)
                            @ 9  java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(int):void (20 bytes)   inline method (bytecode parsing)
                            @ 7  java.util.concurrent.locks.AbstractQueuedSynchronizer.compareAndSetState(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 15  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                            @ 21  java.util.concurrent.locks.AbstractOwnableSynchronizer.getExclusiveOwnerThread():Thread (5 bytes)   inline accessor method (bytecode parsing)
                            @ 29  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 51  java.util.concurrent.locks.AbstractQueuedSynchronizer.setState(int):void (6 bytes)   inline method (bytecode parsing)
                                                        @ 1  java.util.concurrent.locks.ReentrantLock$NonfairSync.initialTryLock():boolean (58 bytes)   relevance-based (relevance=1.007158, probability=0.007812, bonus=1.000000, nodes=40 <= 300.000000)
                            @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 10  java.util.concurrent.locks.AbstractQueuedSynchronizer.compareAndSetState(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 20  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                                                        @ 2  java.util.concurrent.locks.ReentrantLock$NonfairSync.tryAcquire(int):boolean (27 bytes)   not inlining relevance-based (relevance=0.005005, probability=0.000035, bonus=1.000000, nodes=36 > 1.501641)
                            @ 108  java.util.concurrent.locks.AbstractQueuedSynchronizer.tryAcquireShared(int):int (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.lang.UnsupportedOperationException.<init>():void (5 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.RuntimeException.<init>():void (5 bytes)   inline method (bytecode parsing)
                                  @ 1  java.lang.Exception.<init>():void (5 bytes)   inline method (bytecode parsing)
                            @ 245  java.util.concurrent.locks.AbstractQueuedSynchronizer$ExclusiveNode.<init>():void (5 bytes)   inline method (bytecode parsing)
                              @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer$Node.<init>():void (5 bytes)   inline method (bytecode parsing)
                            @ 290  java.util.concurrent.locks.AbstractQueuedSynchronizer$Node.setPrevRelaxed(AbstractQueuedSynchronizer$Node):void (12 bytes)   inline method (bytecode parsing)
                            @ 393  java.lang.Thread.interrupted():boolean (7 bytes)   inline method (bytecode parsing)
                                                        @ 15  java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer$Node, int, boolean, boolean, boolean, long):int (424 bytes)   not inlining relevance-based (relevance=0.002503, probability=0.000017, bonus=1.000000, nodes=226 > 0.750820)
                                                      @ 4  java.util.concurrent.locks.ReentrantLock$Sync.lock():void (13 bytes)   relevance-based (relevance=1.149366, probability=0.007812, bonus=1.000000, nodes=57 <= 300.000000)
                            @ 39  java.io.BufferedWriter.min(int, int):int (9 bytes)   inline method (bytecode parsing)
                                                        @ 1  java.io.BufferedWriter.ensureOpen():void (18 bytes)   trivial (relevance=1.000000, probability=0.007812, bonus=1.000000, nodes=7)
                            @ 17  java.lang.Enum.ordinal():int (5 bytes)   inline accessor method (bytecode parsing)
                                                        @ 6  java.io.BufferedWriter.growIfNeeded(int):void (63 bytes)   relevance-based (relevance=1.000000, probability=0.007812, bonus=1.000000, nodes=15 <= 300.000000)
                            @ 16  java.lang.String.checkBoundsOffCount(int, int, int):int (10 bytes)   inline method (bytecode parsing)
                              @ 2  java.util.EnumSet.typeCheck(Enum):void (59 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=12 <= 300.000000)
                                                            @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.007812, bonus=1.000000, nodes=5)
                                                          @ 3  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000000, probability=0.007812, bonus=1.000000, nodes=8)
                                                            @ 6  jdk.internal.util.Preconditions.checkFromToIndex(int, int, int, BiFunction):int (24 bytes)   relevance-based (relevance=1.000000, probability=0.007812, bonus=1.000000, nodes=11 <= 300.000000)
                                                          @ 6  java.lang.String.checkBoundsBeginEnd(int, int, int):void (11 bytes)   relevance-based (relevance=1.000000, probability=0.007812, bonus=1.000000, nodes=10 <= 300.000000)
                                                          @ 6  jdk.internal.util.Preconditions.checkFromIndexSize(int, int, int, BiFunction):int (25 bytes)   relevance-based (relevance=1.000000, probability=0.007812, bonus=1.000000, nodes=15 <= 300.000000)
                                                          @ 21  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=0.007812, bonus=1.000000, nodes=9)
                                                          @ 36  java.lang.StringLatin1.getChars(byte[], int, int, char[], int):void (12 bytes)   relevance-based (relevance=1.000000, probability=0.007812, bonus=1.000000, nodes=38 <= 300.000000)
                                                        @ 60  java.lang.String.getChars(int, int, char[], int):void (55 bytes)   relevance-based (relevance=1.000000, probability=0.007812, bonus=1.000000, nodes=58 <= 300.000000)
                                                      @ 30  java.io.BufferedWriter.implWrite(String, int, int):void (100 bytes)   relevance-based (relevance=1.125700, probability=0.007812, bonus=1.000000, nodes=93 <= 300.000000)
                            @ 11  jdk.internal.misc.InternalLock.lock():void (8 bytes)   inline method (bytecode parsing)
                            @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                              @ 4  java.util.concurrent.locks.ReentrantLock.lock():void (8 bytes)   inline method (bytecode parsing)
                            @ 8  java.util.concurrent.locks.AbstractOwnableSynchronizer.getExclusiveOwnerThread():Thread (5 bytes)   inline accessor method (bytecode parsing)
                            @ 23  jdk.internal.misc.InternalLock.unlock():void (8 bytes)   inline method (bytecode parsing)
                            @ 41  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                              @ 4  java.util.concurrent.locks.ReentrantLock.unlock():void (10 bytes)   inline method (bytecode parsing)
                            @ 46  java.util.concurrent.locks.AbstractQueuedSynchronizer.setState(int):void (6 bytes)   inline method (bytecode parsing)
                                @ 5  java.util.concurrent.locks.AbstractQueuedSynchronizer.release(int):boolean (19 bytes)   inline method (bytecode parsing)
                                                      @ 2  java.util.concurrent.locks.ReentrantLock$Sync.tryRelease(int):boolean (51 bytes)   relevance-based (relevance=1.125700, probability=0.007812, bonus=1.000000, nodes=37 <= 300.000000)
                            @ 9  java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(int):void (20 bytes)   inline method (bytecode parsing)
                            @ 22  java.util.concurrent.locks.AbstractQueuedSynchronizer$Node.getAndUnsetStatus(int):int (14 bytes)   inline method (bytecode parsing)
                              @ 10  jdk.internal.misc.Unsafe.getAndBitwiseAndInt(Object, long, int):int (27 bytes)   inline method (bytecode parsing)
                            @ 7  java.util.concurrent.locks.AbstractQueuedSynchronizer.compareAndSetState(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 15  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                            @ 21  java.util.concurrent.locks.AbstractOwnableSynchronizer.getExclusiveOwnerThread():Thread (5 bytes)   inline accessor method (bytecode parsing)
                            @ 29  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  java.lang.Thread.isVirtual():boolean (5 bytes)   inline method (bytecode parsing)
                            @ 51  java.util.concurrent.locks.AbstractQueuedSynchronizer.setState(int):void (6 bytes)   inline method (bytecode parsing)
                                @ 1  java.util.concurrent.locks.ReentrantLock$NonfairSync.initialTryLock():boolean (58 bytes)   relevance-based (relevance=1.007349, probability=1.000000, bonus=1.000000, nodes=40 <= 300.000000)
                                                        @ 30  java.util.concurrent.locks.LockSupport.unpark(Thread):void (26 bytes)   not inlining relevance-based (relevance=0.006037, probability=0.000031, bonus=1.000000, nodes=23 > 1.811024)
                                                      @ 12  java.util.concurrent.locks.AbstractQueuedSynchronizer.signalNext(AbstractQueuedSynchronizer$Node):void (34 bytes)   relevance-based (relevance=0.979410, probability=0.006797, bonus=1.000000, nodes=56 <= 293.823039)
                            @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 10  java.util.concurrent.locks.AbstractQueuedSynchronizer.compareAndSetState(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                                                    @ 7  java.io.BufferedWriter.write(String, int, int):void (82 bytes)   relevance-based (relevance=1.000000, probability=0.007812, bonus=1.000000, nodes=262 <= 300.000000)
                            @ 20  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                                @ 2  java.util.concurrent.locks.ReentrantLock$NonfairSync.tryAcquire(int):boolean (27 bytes)   not inlining relevance-based (relevance=0.005005, probability=0.004447, bonus=1.000000, nodes=36 > 1.501641)
                            @ 108  java.util.concurrent.locks.AbstractQueuedSynchronizer.tryAcquireShared(int):int (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.lang.UnsupportedOperationException.<init>():void (5 bytes)   inline method (bytecode parsing)
                                                  @ 9  java.io.Writer.write(String):void (11 bytes)   relevance-based (relevance=2.000000, probability=0.007812, bonus=1.000000, nodes=266 <= 300.000000)
                                @ 1  java.lang.RuntimeException.<init>():void (5 bytes)   inline method (bytecode parsing)
                                  @ 1  java.lang.Exception.<init>():void (5 bytes)   inline method (bytecode parsing)
                            @ 245  java.util.concurrent.locks.AbstractQueuedSynchronizer$ExclusiveNode.<init>():void (5 bytes)   inline method (bytecode parsing)
                              @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer$Node.<init>():void (5 bytes)   inline method (bytecode parsing)
                            @ 290  java.util.concurrent.locks.AbstractQueuedSynchronizer$Node.setPrevRelaxed(AbstractQueuedSynchronizer$Node):void (12 bytes)   inline method (bytecode parsing)
                            @ 393  java.lang.Thread.interrupted():boolean (7 bytes)   inline method (bytecode parsing)
                                                @ 48  java.io.PrintStream.implWriteln(String):void (48 bytes)   not inlining relevance-based (relevance=1.125700, probability=0.007812, bonus=1.000000, nodes=309 > 300.000000)
                                              @ 14  java.io.PrintStream.writeln(String):void (81 bytes)   relevance-based (relevance=1.000000, probability=0.015625, bonus=1.000000, nodes=189 <= 300.000000)
                                            @ 147  java.io.PrintStream.println(String):void (44 bytes)   relevance-based (relevance=1.475999, probability=0.015625, bonus=1.000000, nodes=190 <= 300.000000)
                                          @ 11  jdk.vm.ci.common.InitTimer.<init>(String):void (151 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.031250, bonus=1.000000, nodes=361 > 300.000000)
                                @ 15  java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer$Node, int, boolean, boolean, boolean, long):int (424 bytes)   not inlining relevance-based (relevance=0.002503, probability=0.002223, bonus=1.000000, nodes=226 > 0.750820)
                              @ 4  java.util.concurrent.locks.ReentrantLock$Sync.lock():void (13 bytes)   relevance-based (relevance=1.147275, probability=1.000000, bonus=1.000000, nodes=57 <= 300.000000)
                            @ 21  java.util.ServiceLoader.load(Class, ClassLoader):ServiceLoader (13 bytes)   inline method (bytecode parsing)
                            @ 0  jdk.internal.misc.VM.initLevel():int (4 bytes)   inline method (bytecode parsing)
                            @ 23  java.io.OutputStreamWriter.flushBuffer():void (8 bytes)   inline method (bytecode parsing)
                              @ 16  java.io.PrintStream.implWrite(String):void (50 bytes)   not inlining too large previous low-level graph (low-level-nodes: 492, relevance=1.125700, probability=1.000000, bonus=1.000000, nodes=29)
                            @ 45  java.lang.IllegalStateException.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  java.lang.RuntimeException.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                            @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                                @ 2  java.lang.Exception.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                            @ 8  java.util.concurrent.locks.AbstractOwnableSynchronizer.getExclusiveOwnerThread():Thread (5 bytes)   inline accessor method (bytecode parsing)
                            @ 32  java.lang.ClassLoader.getBuiltinAppClassLoader():ClassLoader (4 bytes)   inline method (bytecode parsing)
                              @ 0  jdk.internal.loader.ClassLoaders.appClassLoader():ClassLoader (4 bytes)   inline method (bytecode parsing)
                            @ 41  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                            @ 46  java.util.concurrent.locks.AbstractQueuedSynchronizer.setState(int):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  java.util.concurrent.locks.ReentrantLock$Sync.tryRelease(int):boolean (51 bytes)   relevance-based (relevance=1.125700, probability=1.000000, bonus=1.000000, nodes=37 <= 300.000000)
                                                @ 0  java.lang.System.allowSecurityManager():boolean (13 bytes)   trivial (relevance=0.333599, probability=0.006250, bonus=1.000000, nodes=8)
                                              @ 75  java.lang.System.getSecurityManager():SecurityManager (12 bytes)   relevance-based (relevance=0.333333, probability=0.006250, bonus=1.000000, nodes=14 <= 100.000000)
                            @ 22  java.util.concurrent.locks.AbstractQueuedSynchronizer$Node.getAndUnsetStatus(int):int (14 bytes)   inline method (bytecode parsing)
                              @ 10  jdk.internal.misc.Unsafe.getAndBitwiseAndInt(Object, long, int):int (27 bytes)   inline method (bytecode parsing)
                            @ 5  java.lang.Thread.isVirtual():boolean (5 bytes)   inline method (bytecode parsing)
                                                  @ 0  java.lang.System.allowSecurityManager():boolean (13 bytes)   trivial (relevance=0.333595, probability=0.003125, bonus=1.000000, nodes=8)
                                                @ 0  java.lang.System.getSecurityManager():SecurityManager (12 bytes)   relevance-based (relevance=0.333330, probability=0.003125, bonus=1.000000, nodes=14 <= 99.999000)
                                @ 30  java.util.concurrent.locks.LockSupport.unpark(Thread):void (26 bytes)   not inlining relevance-based (relevance=0.006048, probability=0.003976, bonus=1.000000, nodes=23 > 1.814325)
                              @ 12  java.util.concurrent.locks.AbstractQueuedSynchronizer.signalNext(AbstractQueuedSynchronizer$Node):void (34 bytes)   relevance-based (relevance=0.981195, probability=0.871631, bonus=1.000000, nodes=56 <= 294.358555)
                            @ 7  java.lang.Class.getClassLoader0():ClassLoader (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 9  java.lang.ClassLoader.getClassLoader(Class):ClassLoader (11 bytes)   relevance-based (relevance=0.083399, probability=0.001562, bonus=1.000000, nodes=13 <= 25.019654)
                                              @ 89  java.lang.ClassLoader.checkClassLoaderPermission(ClassLoader, Class):void (29 bytes)   not inlining relevance-based (relevance=0.166665, probability=0.003125, bonus=1.000000, nodes=50 > 49.999500)
                 n                              @ 16  java.lang.Throwable.fillInStackTrace(int):Throwable (0 bytes)   not inlining it is a non-intrinsic native method
              s                                 @ 24  java.lang.Throwable.fillInStackTrace():Throwable (29 bytes)   relevance-based (relevance=0.333333, probability=0.006250, bonus=1.000000, nodes=34 <= 100.000000)
                                              @ 2  java.lang.Throwable.<init>(String):void (34 bytes)   relevance-based (relevance=0.333333, probability=0.006250, bonus=1.000000, nodes=45 <= 100.000000)
                                            @ 18  java.lang.ClassLoader.getSystemClassLoader():ClassLoader (96 bytes)   relevance-based (relevance=1.000000, probability=0.031250, bonus=1.000000, nodes=103 <= 300.000000)
                            @ 27  java.util.Objects.requireNonNull(Object):Object (14 bytes)   inline method (bytecode parsing)
                            @ 54  java.lang.Class.getModule():Module (5 bytes)   inline accessor method (bytecode parsing)
                            @ 61  java.lang.Class.getModule():Module (5 bytes)   inline accessor method (bytecode parsing)
                            @ 67  java.lang.Class.getModule():Module (5 bytes)   inline accessor method (bytecode parsing)
                            @ 91  java.lang.StringBuilder.<init>():void (7 bytes)   inline method (bytecode parsing)
                            @ 96  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 101  java.lang.StringBuilder.append(Object):StringBuilder (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 106  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 109  java.lang.StringBuilder.toString():String (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.String.<init>(StringBuilder):void (7 bytes)   inline method (bytecode parsing)
                            @ 1  java.util.AbstractList.<init>():void (10 bytes)   inline method (bytecode parsing)
                              @ 1  java.util.AbstractCollection.<init>():void (5 bytes)   inline method (bytecode parsing)
                                              @ 9  java.util.ArrayList.<init>():void (12 bytes)   relevance-based (relevance=8.000000, probability=0.025000, bonus=1.000000, nodes=11 <= 300.000000)
                            @ 1  java.util.AbstractList.<init>():void (10 bytes)   inline method (bytecode parsing)
                              @ 1  java.util.AbstractCollection.<init>():void (5 bytes)   inline method (bytecode parsing)
                                              @ 20  java.util.ArrayList.<init>():void (12 bytes)   relevance-based (relevance=8.000000, probability=0.025000, bonus=1.000000, nodes=11 <= 300.000000)
                                              @ 31  jdk.internal.misc.VM.isBooted():boolean (13 bytes)   relevance-based (relevance=8.000000, probability=0.025000, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 11  java.lang.Class.getModule():Module (5 bytes)   inline accessor method (bytecode parsing)
                            @ 35  java.lang.StringBuilder.<init>():void (7 bytes)   inline method (bytecode parsing)
                            @ 40  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 44  java.lang.StringBuilder.append(Object):StringBuilder (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 47  java.lang.StringBuilder.toString():String (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.String.<init>(StringBuilder):void (7 bytes)   inline method (bytecode parsing)
                            @ 66  java.lang.StringBuilder.<init>():void (7 bytes)   inline method (bytecode parsing)
                            @ 70  java.lang.StringBuilder.append(Object):StringBuilder (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 75  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 78  java.lang.StringBuilder.toString():String (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.String.<init>(StringBuilder):void (7 bytes)   inline method (bytecode parsing)
                            @ 1  java.util.Objects.requireNonNull(Object):Object (14 bytes)   inline method (bytecode parsing)
                            @ 6  java.util.Objects.requireNonNull(Object):Object (14 bytes)   inline method (bytecode parsing)
                            @ 18  java.lang.Class.getModule():Module (5 bytes)   inline accessor method (bytecode parsing)
                            @ 1  java.lang.Class.getModule():Module (5 bytes)   inline accessor method (bytecode parsing)
                            @ 47  java.lang.String.lastIndexOf(int):int (12 bytes)   inline method (bytecode parsing)
                 n                                    @ 14  java.lang.Class.initClassName():String (0 bytes)   not inlining it is a non-intrinsic native method
                                                      @ 40  java.lang.Class.getName():String (18 bytes)   relevance-based (relevance=1.005572, probability=0.007319, bonus=1.000000, nodes=17 <= 300.000000)
                                                        @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.007319, bonus=1.000000, nodes=5)
                                                      @ 3  java.lang.String.length():int (11 bytes)   trivial (relevance=1.362417, probability=0.007319, bonus=1.000000, nodes=8)
                                                        @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=0.007319, bonus=1.000000, nodes=9)
                                                          @ 1  java.lang.StringLatin1.canEncode(int):boolean (13 bytes)   trivial (relevance=1.000000, probability=0.007319, bonus=1.000000, nodes=5)
                                                          @ 14  java.lang.Math.min(int, int):int (11 bytes)   trivial (relevance=1.000000, probability=0.007319, bonus=1.000000, nodes=7)
                                                        @ 13  java.lang.StringLatin1.lastIndexOf(byte[], int, int):int (40 bytes)   relevance-based (relevance=1.000000, probability=0.007319, bonus=1.000000, nodes=31 <= 300.000000)
                                                      @ 8  java.lang.String.lastIndexOf(int, int):int (29 bytes)   relevance-based (relevance=1.362417, probability=0.007319, bonus=1.000000, nodes=40 <= 300.000000)
                              @ 1  java.nio.Buffer.clear():Buffer (20 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                                          @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.007279, bonus=1.000000, nodes=5)
                                                        @ 1  java.lang.String.length():int (11 bytes)   trivial (relevance=1.162748, probability=0.007279, bonus=1.000000, nodes=8)
                                                          @ 6  jdk.internal.util.Preconditions.checkFromToIndex(int, int, int, BiFunction):int (24 bytes)   relevance-based (relevance=1.000000, probability=0.007279, bonus=1.000000, nodes=11 <= 300.000000)
                                                        @ 8  java.lang.String.checkBoundsBeginEnd(int, int, int):void (11 bytes)   relevance-based (relevance=1.162748, probability=0.007279, bonus=1.000000, nodes=10 <= 300.000000)
                                                        @ 28  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=0.006260, bonus=1.000000, nodes=9)
                            @ 20  java.lang.String.<init>(byte[], byte):void (15 bytes)   inline method (bytecode parsing)
                            @ 13  java.util.Arrays.copyOfRangeByte(byte[], int, int):byte[] (33 bytes)   inline method (bytecode parsing)
                              @ 2  java.util.Arrays.checkLength(int, int):void (38 bytes)   inline method (bytecode parsing)
                            @ 4  java.nio.Buffer.capacity():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 21  java.nio.charset.CharsetEncoder.maxBytesPerChar():float (5 bytes)   inline accessor method (bytecode parsing)
                                                            @ 24  java.lang.Math.min(int, int):int (11 bytes)   trivial (relevance=1.000010, probability=0.004931, bonus=1.000000, nodes=7)
                                                          @ 16  java.util.Arrays.copyOfRange(byte[], int, int):byte[] (25 bytes)   relevance-based (relevance=1.000000, probability=0.006260, bonus=1.000000, nodes=33 <= 300.000000)
                              @ 34  java.lang.Math.min(int, int):int (11 bytes)   trivial (relevance=1.000200, probability=1.000000, bonus=1.000000, nodes=7)
                                                        @ 41  java.lang.StringLatin1.newString(byte[], int, int):String (24 bytes)   relevance-based (relevance=1.000000, probability=0.006260, bonus=1.000000, nodes=51 <= 300.000000)
                            @ 4  java.nio.Buffer.position():int (5 bytes)   inline accessor method (bytecode parsing)
                              @ 46  sun.nio.cs.StreamEncoder.implFlushBuffer():void (15 bytes)   not inlining relevance-based (relevance=0.000200, probability=0.000200, bonus=1.000000, nodes=21 > 0.060036)
                                                      @ 62  java.lang.String.substring(int, int):String (58 bytes)   relevance-based (relevance=1.354868, probability=0.007279, bonus=1.000000, nodes=72 <= 300.000000)
                              @ 52  java.nio.ByteBuffer.allocate(int):ByteBuffer (20 bytes)   not inlining relevance-based (relevance=0.000200, probability=0.000200, bonus=1.000000, nodes=21 > 0.060036)
                 n                                  @ 65  java.lang.String.intern():String (0 bytes)   not inlining it is a non-intrinsic native method
                                                    @ 13  java.lang.Class.getPackageName():String (81 bytes)   relevance-based (relevance=1.000000, probability=0.012500, bonus=1.000000, nodes=156 <= 300.000000)
                            @ 1  java.util.Objects.requireNonNull(Object):Object (14 bytes)   inline method (bytecode parsing)
                            @ 6  java.util.Objects.requireNonNull(Object):Object (14 bytes)   inline method (bytecode parsing)
                            @ 36  java.lang.module.ModuleDescriptor.isOpen():boolean (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  java.lang.module.ModuleDescriptor.isAutomatic():boolean (5 bytes)   inline accessor method (bytecode parsing)
                                                        @ 1  java.lang.Module.isNamed():boolean (13 bytes)   trivial (relevance=1.295455, probability=0.012500, bonus=1.000000, nodes=9)
                                                            @ 2  java.util.HashMap.getNode(Object):HashMap$Node (150 bytes)   not inlining too large previous low-level graph (low-level-nodes: 643, relevance=1.198094, probability=0.012420, bonus=1.000000, nodes=108)
                                                          @ 51  java.util.HashMap.get(Object):Object (19 bytes)   relevance-based (relevance=1.000000, probability=0.012420, bonus=1.000000, nodes=19 <= 300.000000)
                                                          @ 8  java.util.Set.contains(Object):boolean (0 bytes)   not inlining no type profile exists
                                                          @ 27  java.util.Set.contains(Object):boolean (0 bytes)   not inlining no type profile exists
                                                            @ 38  java.lang.Module.isNamed():boolean (13 bytes)   trivial (relevance=2.000000, probability=0.000776, bonus=1.000000, nodes=9)
                                                          @ 48  java.util.Set.contains(Object):boolean (0 bytes)   not inlining no type profile exists
                                                          @ 60  java.lang.Module.allows(Set, Module):boolean (60 bytes)   relevance-based (relevance=1.198094, probability=0.012420, bonus=1.000000, nodes=47 <= 300.000000)
                                @ 1  java.nio.CharBuffer.hasArray():boolean (20 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=12 <= 300.000000)
                                                        @ 70  java.lang.Module.isStaticallyExportedOrOpen(String, Module, boolean):boolean (70 bytes)   relevance-based (relevance=1.295455, probability=0.012500, bonus=1.000000, nodes=91 <= 300.000000)
                                @ 8  java.nio.ByteBuffer.hasArray():boolean (20 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=12 <= 300.000000)
                            @ 10  java.nio.Buffer.position():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 7  java.lang.WeakPairMap.get(Object, Object):Object (17 bytes)   inline method (bytecode parsing)
                            @ 21  java.nio.Buffer.limit():int (5 bytes)   inline accessor method (bytecode parsing)
                              @ 10  java.lang.WeakPairMap$Pair.lookup(Object, Object):WeakPairMap$Pair (10 bytes)   inline method (bytecode parsing)
                            @ 38  java.nio.Buffer.position():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 49  java.nio.Buffer.limit():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 78  java.lang.System$2.encodeASCII(char[], int, byte[], int, int):int (11 bytes)   inline method (bytecode parsing)
                            @ 68  java.lang.WeakPairMap.get(Object, Object):Object (17 bytes)   inline method (bytecode parsing)
                              @ 10  java.lang.WeakPairMap$Pair.lookup(Object, Object):WeakPairMap$Pair (10 bytes)   inline method (bytecode parsing)
                                  @ 1  java.nio.CharBuffer.array():char[] (35 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                                  @ 6  java.nio.CharBuffer.arrayOffset():int (35 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=12 <= 300.000000)
                                  @ 17  java.nio.CharBuffer.arrayOffset():int (35 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=12 <= 300.000000)
                            @ 13  java.util.concurrent.locks.ReentrantLock.lock():void (8 bytes)   inline method (bytecode parsing)
                                  @ 28  java.nio.ByteBuffer.array():byte[] (35 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                            @ 25  java.util.concurrent.locks.ReentrantLock.unlock():void (10 bytes)   inline method (bytecode parsing)
                              @ 5  java.util.concurrent.locks.AbstractQueuedSynchronizer.release(int):boolean (19 bytes)   inline method (bytecode parsing)
                                  @ 34  java.nio.ByteBuffer.arrayOffset():int (35 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=12 <= 300.000000)
                                                            @ 4  java.lang.ref.ReferenceQueue.poll():Reference (40 bytes)   not inlining too large previous low-level graph (low-level-nodes: 445, relevance=0.945918, probability=0.009649, bonus=1.000000, nodes=45)
                                                          @ 1  java.lang.WeakPairMap.expungeStaleAssociations():void (31 bytes)   relevance-based (relevance=0.945918, probability=0.009649, bonus=1.000000, nodes=13 <= 283.775410)
                                  @ 45  java.nio.ByteBuffer.arrayOffset():int (35 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=12 <= 300.000000)
                            @ 6  java.util.Objects.requireNonNull(Object):Object (14 bytes)   inline method (bytecode parsing)
                            @ 14  java.util.Objects.requireNonNull(Object):Object (14 bytes)   inline method (bytecode parsing)
                                  @ 75  java.lang.Math.min(int, int):int (11 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=7)
                                                          @ 6  java.lang.WeakPairMap$Pair$Lookup.<init>(Object, Object):void (21 bytes)   relevance-based (relevance=0.945918, probability=0.009649, bonus=1.000000, nodes=11 <= 283.775410)
                            @ 4  java.util.concurrent.ConcurrentHashMap.spread(int):int (10 bytes)   inline method (bytecode parsing)
                                    @ 3  java.nio.CharBuffer.arrayOffset():int (35 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=12 <= 300.000000)
                            @ 2  java.nio.CharBuffer.position(int):CharBuffer (8 bytes)   inline method (bytecode parsing)
                                      @ 2  java.nio.Buffer.position(int):Buffer (52 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=16 <= 300.000000)
                                    @ 7  java.nio.CharBuffer.position(int):Buffer (6 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=18 <= 300.000000)
                            @ 8  java.lang.WeakPairMap$Pair.hashCode(Object, Object):int (10 bytes)   inline method (bytecode parsing)
                                    @ 14  java.nio.ByteBuffer.arrayOffset():int (35 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=12 <= 300.000000)
                                                            @ 1  java.lang.WeakPairMap$Pair$Lookup.hashCode():int (12 bytes)   relevance-based (relevance=2.734401, probability=0.009649, bonus=1.000000, nodes=12 <= 300.000000)
                                        @ 2  java.nio.Buffer.position(int):Buffer (52 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=16 <= 300.000000)
                                                            @ 34  java.util.concurrent.ConcurrentHashMap.tabAt(ConcurrentHashMap$Node[], int):ConcurrentHashMap$Node (22 bytes)   relevance-based (relevance=2.722959, probability=0.009609, bonus=1.000000, nodes=11 <= 300.000000)
                                      @ 2  java.nio.ByteBuffer.position(int):ByteBuffer (8 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=17 <= 300.000000)
                                    @ 18  java.nio.ByteBuffer.position(int):Buffer (6 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=23 <= 300.000000)
                                  @ 130  sun.nio.cs.UTF_8.updatePositions(Buffer, int, Buffer, int):void (23 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=65 <= 300.000000)
                                @ 17  sun.nio.cs.UTF_8$Encoder.encodeArrayLoop(CharBuffer, ByteBuffer):CoderResult (137 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=150 <= 300.000000)
                              @ 57  sun.nio.cs.UTF_8$Encoder.encodeLoop(CharBuffer, ByteBuffer):CoderResult (28 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=167 <= 300.000000)
                                                            @ 93  java.util.concurrent.ConcurrentHashMap$ForwardingNode.find(int, Object):ConcurrentHashMap$Node (129 bytes)   not inlining relevance-based (relevance=0.000112, probability=0.000000, bonus=1.000000, nodes=119 > 0.033655)
                              @ 79  java.nio.charset.CoderResult.isOverflow():boolean (14 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                              @ 90  java.nio.charset.CoderResult.isUnderflow():boolean (13 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                            @ 1  java.lang.ref.Reference.get():Object (5 bytes)   inline accessor method (bytecode parsing)
                                                                @ 10  java.lang.WeakPairMap$Pair$Weak.first():Object (5 bytes)   trivial (relevance=0.948503, probability=0.003339, bonus=1.000000, nodes=6)
                            @ 4  java.lang.ref.Reference.get():Object (5 bytes)   inline accessor method (bytecode parsing)
                                                                @ 20  java.lang.WeakPairMap$Pair$Weak.second():Object (8 bytes)   relevance-based (relevance=0.946142, probability=0.003330, bonus=1.000000, nodes=10 <= 283.842703)
                                                              @ 19  java.lang.WeakPairMap$Pair.equals(Object, Object, WeakPairMap$Pair):boolean (34 bytes)   relevance-based (relevance=0.946142, probability=0.003339, bonus=1.000000, nodes=31 <= 283.842703)
                                                            @ 73  java.lang.WeakPairMap$Pair$Lookup.equals(Object):boolean (31 bytes)   relevance-based (relevance=0.946142, probability=0.003339, bonus=1.000000, nodes=40 <= 283.842703)
                            @ 1  java.lang.ref.Reference.get():Object (5 bytes)   inline accessor method (bytecode parsing)
                                                                @ 10  java.lang.WeakPairMap$Pair$Weak.first():Object (5 bytes)   trivial (relevance=0.547465, probability=0.001234, bonus=1.000000, nodes=6)
                            @ 4  java.lang.ref.Reference.get():Object (5 bytes)   inline accessor method (bytecode parsing)
                                                                @ 20  java.lang.WeakPairMap$Pair$Weak.second():Object (8 bytes)   relevance-based (relevance=0.546102, probability=0.001231, bonus=1.000000, nodes=10 <= 163.830557)
                                                              @ 19  java.lang.WeakPairMap$Pair.equals(Object, Object, WeakPairMap$Pair):boolean (34 bytes)   relevance-based (relevance=0.546102, probability=0.001234, bonus=1.000000, nodes=31 <= 163.830557)
                                                            @ 149  java.lang.WeakPairMap$Pair$Lookup.equals(Object):boolean (31 bytes)   relevance-based (relevance=0.546102, probability=0.001234, bonus=1.000000, nodes=40 <= 163.830557)
                                                          @ 13  java.util.concurrent.ConcurrentHashMap.get(Object):Object (162 bytes)   relevance-based (relevance=0.945918, probability=0.009649, bonus=1.000000, nodes=187 <= 283.775410)
                                                        @ 82  java.lang.Module.isReflectivelyExportedOrOpen(String, Module, boolean):boolean (182 bytes)   not inlining relevance-based (relevance=0.930811, probability=0.009649, bonus=1.000000, nodes=283 > 279.243370)
                                                      @ 14  java.lang.Module.implIsExportedOrOpen(String, Module, boolean):boolean (92 bytes)   relevance-based (relevance=1.000000, probability=0.012500, bonus=1.000000, nodes=117 <= 300.000000)
                                                    @ 20  java.lang.Module.isExported(String, Module):boolean (18 bytes)   relevance-based (relevance=2.326709, probability=0.012500, bonus=1.000000, nodes=125 <= 300.000000)
                                                  @ 22  jdk.internal.reflect.Reflection.verifyModuleAccess(Module, Class):boolean (24 bytes)   relevance-based (relevance=8.000000, probability=0.025000, bonus=1.000000, nodes=286 <= 300.000000)
                                                @ 24  jdk.internal.reflect.Reflection.verifyMemberAccess(Class, Class, Class, int):boolean (200 bytes)   not inlining relevance-based (relevance=2.000000, probability=0.025000, bonus=1.000000, nodes=394 > 300.000000)
                                                @ 3  java.lang.AbstractStringBuilder.<init>(int):void (39 bytes)   relevance-based (relevance=1.000000, probability=0.012500, bonus=1.000000, nodes=11 <= 300.000000)
                                                @ 2  java.lang.AbstractStringBuilder.append(String):AbstractStringBuilder (45 bytes)   not inlining too large previous low-level graph (low-level-nodes: 345, relevance=1.000000, probability=0.012500, bonus=1.000000, nodes=21)
                            @ 11  java.lang.StringBuilder.<init>():void (7 bytes)   inline method (bytecode parsing)
                            @ 16  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 23  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 26  java.lang.StringBuilder.toString():String (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.String.<init>(StringBuilder):void (7 bytes)   inline method (bytecode parsing)
                            @ 34  java.lang.Integer.toHexString(int):String (6 bytes)   inline method (bytecode parsing)
                            @ 42  java.lang.StringBuilder.<init>():void (7 bytes)   inline method (bytecode parsing)
                            @ 48  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 52  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 55  java.lang.StringBuilder.toString():String (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.String.<init>(StringBuilder):void (7 bytes)   inline method (bytecode parsing)
                                                    @ 1  java.lang.Module.isNamed():boolean (13 bytes)   trivial (relevance=2.000000, probability=0.012500, bonus=1.000000, nodes=9)
                                                    @ 3  java.lang.AbstractStringBuilder.<init>(int):void (39 bytes)   relevance-based (relevance=1.000000, probability=0.006250, bonus=1.000000, nodes=11 <= 300.000000)
                                                    @ 2  java.lang.AbstractStringBuilder.append(String):AbstractStringBuilder (45 bytes)   not inlining too large previous low-level graph (low-level-nodes: 345, relevance=1.000000, probability=0.006250, bonus=1.000000, nodes=21)
                                                    @ 2  java.lang.AbstractStringBuilder.append(String):AbstractStringBuilder (45 bytes)   not inlining too large previous low-level graph (low-level-nodes: 345, relevance=1.000000, probability=0.006250, bonus=1.000000, nodes=23)
                            @ 5  java.lang.AbstractStringBuilder.getValue():byte[] (5 bytes)   inline accessor method (bytecode parsing)
                            @ 1  java.lang.AbstractStringBuilder.length():int (5 bytes)   inline accessor method (bytecode parsing)
                                                      @ 10  java.lang.StringBuilder.length():int (5 bytes)   trivial (relevance=1.000000, probability=0.006250, bonus=1.000000, nodes=5)
                                                      @ 16  java.lang.AbstractStringBuilder.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=0.006250, bonus=1.000000, nodes=9)
                            @ 13  java.util.Arrays.copyOfRangeByte(byte[], int, int):byte[] (33 bytes)   inline method (bytecode parsing)
                              @ 2  java.util.Arrays.checkLength(int, int):void (38 bytes)   inline method (bytecode parsing)
                                                        @ 24  java.lang.Math.min(int, int):int (11 bytes)   trivial (relevance=1.000010, probability=0.004924, bonus=1.000000, nodes=7)
                                                      @ 32  java.util.Arrays.copyOfRange(byte[], int, int):byte[] (25 bytes)   relevance-based (relevance=1.000000, probability=0.006250, bonus=1.000000, nodes=33 <= 300.000000)
                              @ 2  java.util.HashMap.getNode(Object):HashMap$Node (150 bytes)   not inlining too large previous low-level graph (low-level-nodes: 643, relevance=1.800917, probability=1.000000, bonus=1.000000, nodes=108)
                                                    @ 3  java.lang.String.<init>(AbstractStringBuilder, Void):void (99 bytes)   relevance-based (relevance=1.000000, probability=0.006250, bonus=1.000000, nodes=48 <= 300.000000)
                            @ 16  java.lang.Math.max(int, int):int (11 bytes)   inline method (bytecode parsing)
                              @ 21  java.util.LinkedHashMap.afterNodeAccess(HashMap$Node):void (266 bytes)   relevance-based (relevance=0.241549, probability=0.134126, bonus=1.000000, nodes=72 <= 72.464753)
                            @ 46  java.lang.String.<init>(byte[], byte):void (15 bytes)   inline method (bytecode parsing)
                                                      @ 36  java.lang.Integer.formatUnsignedInt(int, int, byte[], int):void (40 bytes)   relevance-based (relevance=1.000000, probability=0.006250, bonus=1.000000, nodes=30 <= 300.000000)
                                                    @ 2  java.lang.Integer.toUnsignedString0(int, int):String (76 bytes)   relevance-based (relevance=1.269387, probability=0.006250, bonus=1.000000, nodes=46 <= 300.000000)
                                                    @ 3  java.lang.AbstractStringBuilder.<init>(int):void (39 bytes)   relevance-based (relevance=1.269387, probability=0.006250, bonus=1.000000, nodes=11 <= 300.000000)
                                                    @ 2  java.lang.AbstractStringBuilder.append(String):AbstractStringBuilder (45 bytes)   not inlining too large previous low-level graph (low-level-nodes: 345, relevance=1.269387, probability=0.006250, bonus=1.000000, nodes=21)
                                                    @ 2  java.lang.AbstractStringBuilder.append(String):AbstractStringBuilder (45 bytes)   not inlining too large previous low-level graph (low-level-nodes: 345, relevance=1.269387, probability=0.006250, bonus=1.000000, nodes=21)
                            @ 5  java.lang.AbstractStringBuilder.getValue():byte[] (5 bytes)   inline accessor method (bytecode parsing)
                            @ 1  java.lang.AbstractStringBuilder.length():int (5 bytes)   inline accessor method (bytecode parsing)
                                                      @ 10  java.lang.StringBuilder.length():int (5 bytes)   trivial (relevance=1.000000, probability=0.006250, bonus=1.000000, nodes=5)
                                                      @ 16  java.lang.AbstractStringBuilder.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=0.006250, bonus=1.000000, nodes=9)
                            @ 13  java.util.Arrays.copyOfRangeByte(byte[], int, int):byte[] (33 bytes)   inline method (bytecode parsing)
                              @ 2  java.util.Arrays.checkLength(int, int):void (38 bytes)   inline method (bytecode parsing)
                                                        @ 24  java.lang.Math.min(int, int):int (11 bytes)   trivial (relevance=1.000010, probability=0.004924, bonus=1.000000, nodes=7)
                                                      @ 32  java.util.Arrays.copyOfRange(byte[], int, int):byte[] (25 bytes)   relevance-based (relevance=1.000000, probability=0.006250, bonus=1.000000, nodes=33 <= 300.000000)
                                                    @ 3  java.lang.String.<init>(AbstractStringBuilder, Void):void (99 bytes)   relevance-based (relevance=1.269387, probability=0.006250, bonus=1.000000, nodes=48 <= 300.000000)
                                                  @ 11  java.lang.Module.toString():String (59 bytes)   relevance-based (relevance=1.000000, probability=0.012500, bonus=1.000000, nodes=184 <= 300.000000)
                                                @ 2  java.lang.String.valueOf(Object):String (15 bytes)   relevance-based (relevance=1.000000, probability=0.012500, bonus=1.000000, nodes=193 <= 300.000000)
                                                @ 2  java.lang.AbstractStringBuilder.append(String):AbstractStringBuilder (45 bytes)   not inlining too large previous low-level graph (low-level-nodes: 345, relevance=2.538754, probability=0.012500, bonus=1.000000, nodes=21)
                            @ 5  java.lang.AbstractStringBuilder.getValue():byte[] (5 bytes)   inline accessor method (bytecode parsing)
                            @ 1  java.lang.AbstractStringBuilder.length():int (5 bytes)   inline accessor method (bytecode parsing)
                                                  @ 10  java.lang.StringBuilder.length():int (5 bytes)   trivial (relevance=1.000000, probability=0.012500, bonus=1.000000, nodes=5)
                                                  @ 16  java.lang.AbstractStringBuilder.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=0.012500, bonus=1.000000, nodes=9)
                            @ 13  java.util.Arrays.copyOfRangeByte(byte[], int, int):byte[] (33 bytes)   inline method (bytecode parsing)
                              @ 2  java.util.Arrays.checkLength(int, int):void (38 bytes)   inline method (bytecode parsing)
                                                    @ 24  java.lang.Math.min(int, int):int (11 bytes)   trivial (relevance=1.000010, probability=0.009847, bonus=1.000000, nodes=7)
                                                  @ 32  java.util.Arrays.copyOfRange(byte[], int, int):byte[] (25 bytes)   relevance-based (relevance=1.000000, probability=0.012500, bonus=1.000000, nodes=33 <= 300.000000)
                                                @ 3  java.lang.String.<init>(AbstractStringBuilder, Void):void (99 bytes)   relevance-based (relevance=2.538754, probability=0.012500, bonus=1.000000, nodes=48 <= 300.000000)
                                              @ 39  java.util.ServiceLoader.checkCaller(Class, Class):void (85 bytes)   not inlining relevance-based (relevance=4.000000, probability=0.025000, bonus=1.000000, nodes=314 > 300.000000)
                            @ 0  jdk.internal.misc.VM.initLevel():int (4 bytes)   inline method (bytecode parsing)
                            @ 45  java.lang.IllegalStateException.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  java.lang.RuntimeException.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                                @ 2  java.lang.Exception.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                            @ 32  java.lang.ClassLoader.getBuiltinAppClassLoader():ClassLoader (4 bytes)   inline method (bytecode parsing)
                              @ 0  jdk.internal.loader.ClassLoaders.appClassLoader():ClassLoader (4 bytes)   inline method (bytecode parsing)
                                                  @ 0  java.lang.System.allowSecurityManager():boolean (13 bytes)   trivial (relevance=0.333599, probability=0.001250, bonus=1.000000, nodes=8)
                                                @ 75  java.lang.System.getSecurityManager():SecurityManager (12 bytes)   relevance-based (relevance=0.333333, probability=0.001250, bonus=1.000000, nodes=14 <= 100.000000)
                                                    @ 0  java.lang.System.allowSecurityManager():boolean (13 bytes)   trivial (relevance=0.333595, probability=0.000625, bonus=1.000000, nodes=8)
                                                  @ 0  java.lang.System.getSecurityManager():SecurityManager (12 bytes)   relevance-based (relevance=0.333330, probability=0.000625, bonus=1.000000, nodes=14 <= 99.999000)
                            @ 7  java.lang.Class.getClassLoader0():ClassLoader (5 bytes)   inline accessor method (bytecode parsing)
                                                  @ 9  java.lang.ClassLoader.getClassLoader(Class):ClassLoader (11 bytes)   relevance-based (relevance=0.083399, probability=0.000312, bonus=1.000000, nodes=13 <= 25.019654)
                                                @ 89  java.lang.ClassLoader.checkClassLoaderPermission(ClassLoader, Class):void (29 bytes)   not inlining relevance-based (relevance=0.166665, probability=0.000625, bonus=1.000000, nodes=50 > 49.999500)
                 n                                @ 16  java.lang.Throwable.fillInStackTrace(int):Throwable (0 bytes)   not inlining it is a non-intrinsic native method
              s                                   @ 24  java.lang.Throwable.fillInStackTrace():Throwable (29 bytes)   relevance-based (relevance=0.333333, probability=0.001250, bonus=1.000000, nodes=34 <= 100.000000)
                                                @ 2  java.lang.Throwable.<init>(String):void (34 bytes)   relevance-based (relevance=0.333333, probability=0.001250, bonus=1.000000, nodes=45 <= 100.000000)
                                              @ 46  java.lang.ClassLoader.getSystemClassLoader():ClassLoader (96 bytes)   relevance-based (relevance=1.000000, probability=0.006250, bonus=1.000000, nodes=103 <= 300.000000)
                 n                            @ 14  java.lang.Class.initClassName():String (0 bytes)   not inlining it is a non-intrinsic native method
                                              @ 124  java.lang.Class.getName():String (18 bytes)   relevance-based (relevance=4.666667, probability=0.017500, bonus=1.000000, nodes=17 <= 300.000000)
                                                @ 0  java.lang.System.allowSecurityManager():boolean (13 bytes)   trivial (relevance=1.000796, probability=0.017500, bonus=1.000000, nodes=8)
                                              @ 141  java.lang.System.getSecurityManager():SecurityManager (12 bytes)   relevance-based (relevance=4.666667, probability=0.017500, bonus=1.000000, nodes=14 <= 300.000000)
                            @ 14  java.security.AccessControlContext.<init>(ProtectionDomain[], boolean):void (30 bytes)   inline method (bytecode parsing)
                 n                            @ 0  java.security.AccessController.getStackAccessControlContext():AccessControlContext (0 bytes)   not inlining it is a non-intrinsic native method
                 n                              @ 44  java.security.AccessController.getInheritedAccessControlContext():AccessControlContext (0 bytes)   not inlining it is a non-intrinsic native method
                                                  @ 141  java.security.AccessControlContext.getDebug():Debug (32 bytes)   relevance-based (relevance=2.000000, probability=0.001094, bonus=1.000000, nodes=11 <= 300.000000)
                            @ 7  java.lang.StringBuilder.<init>():void (7 bytes)   inline method (bytecode parsing)
                            @ 14  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 19  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 23  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 26  java.lang.StringBuilder.toString():String (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.String.<init>(StringBuilder):void (7 bytes)   inline method (bytecode parsing)
                                                    @ 3  java.lang.AbstractStringBuilder.<init>(int):void (39 bytes)   relevance-based (relevance=1.000000, probability=0.000547, bonus=1.000000, nodes=11 <= 300.000000)
                                                    @ 2  java.lang.AbstractStringBuilder.append(String):AbstractStringBuilder (45 bytes)   not inlining too large previous low-level graph (low-level-nodes: 345, relevance=1.000000, probability=0.000547, bonus=1.000000, nodes=23)
                                                    @ 2  java.lang.AbstractStringBuilder.append(String):AbstractStringBuilder (45 bytes)   not inlining too large previous low-level graph (low-level-nodes: 345, relevance=1.000000, probability=0.000547, bonus=1.000000, nodes=21)
                                                    @ 2  java.lang.AbstractStringBuilder.append(String):AbstractStringBuilder (45 bytes)   not inlining too large previous low-level graph (low-level-nodes: 345, relevance=1.000000, probability=0.000547, bonus=1.000000, nodes=21)
                            @ 5  java.lang.AbstractStringBuilder.getValue():byte[] (5 bytes)   inline accessor method (bytecode parsing)
                            @ 1  java.lang.AbstractStringBuilder.length():int (5 bytes)   inline accessor method (bytecode parsing)
                                                      @ 10  java.lang.StringBuilder.length():int (5 bytes)   trivial (relevance=1.000000, probability=0.000547, bonus=1.000000, nodes=5)
                                                      @ 16  java.lang.AbstractStringBuilder.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=0.000547, bonus=1.000000, nodes=9)
                            @ 13  java.util.Arrays.copyOfRangeByte(byte[], int, int):byte[] (33 bytes)   inline method (bytecode parsing)
                              @ 2  java.util.Arrays.checkLength(int, int):void (38 bytes)   inline method (bytecode parsing)
                                                        @ 24  java.lang.Math.min(int, int):int (11 bytes)   trivial (relevance=1.000010, probability=0.000431, bonus=1.000000, nodes=7)
                                                      @ 32  java.util.Arrays.copyOfRange(byte[], int, int):byte[] (25 bytes)   relevance-based (relevance=1.000000, probability=0.000547, bonus=1.000000, nodes=33 <= 300.000000)
                                                    @ 3  java.lang.String.<init>(AbstractStringBuilder, Void):void (99 bytes)   relevance-based (relevance=1.000000, probability=0.000547, bonus=1.000000, nodes=48 <= 300.000000)
                                                        @ 11  java.lang.String.toString():String (2 bytes)   trivial (relevance=1.000000, probability=0.000547, bonus=1.000000, nodes=4)
                                                      @ 11  java.lang.String.valueOf(Object):String (15 bytes)   trivial (relevance=1.000000, probability=0.000547, bonus=1.000000, nodes=4)
                            @ 11  jdk.internal.misc.InternalLock.lock():void (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.util.concurrent.locks.ReentrantLock.lock():void (8 bytes)   inline method (bytecode parsing)
                            @ 23  jdk.internal.misc.InternalLock.unlock():void (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.util.concurrent.locks.ReentrantLock.unlock():void (10 bytes)   inline method (bytecode parsing)
                                @ 5  java.util.concurrent.locks.AbstractQueuedSynchronizer.release(int):boolean (19 bytes)   inline method (bytecode parsing)
                            @ 9  java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(int):void (20 bytes)   inline method (bytecode parsing)
                            @ 7  java.util.concurrent.locks.AbstractQueuedSynchronizer.compareAndSetState(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 15  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                            @ 21  java.util.concurrent.locks.AbstractOwnableSynchronizer.getExclusiveOwnerThread():Thread (5 bytes)   inline accessor method (bytecode parsing)
                            @ 29  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 51  java.util.concurrent.locks.AbstractQueuedSynchronizer.setState(int):void (6 bytes)   inline method (bytecode parsing)
                                                          @ 1  java.util.concurrent.locks.ReentrantLock$NonfairSync.initialTryLock():boolean (58 bytes)   relevance-based (relevance=1.007158, probability=0.000273, bonus=1.000000, nodes=40 <= 300.000000)
                            @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 10  java.util.concurrent.locks.AbstractQueuedSynchronizer.compareAndSetState(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 20  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                                                          @ 2  java.util.concurrent.locks.ReentrantLock$NonfairSync.tryAcquire(int):boolean (27 bytes)   not inlining relevance-based (relevance=0.005005, probability=0.000001, bonus=1.000000, nodes=36 > 1.501641)
                            @ 108  java.util.concurrent.locks.AbstractQueuedSynchronizer.tryAcquireShared(int):int (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.lang.UnsupportedOperationException.<init>():void (5 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.RuntimeException.<init>():void (5 bytes)   inline method (bytecode parsing)
                                  @ 1  java.lang.Exception.<init>():void (5 bytes)   inline method (bytecode parsing)
                            @ 245  java.util.concurrent.locks.AbstractQueuedSynchronizer$ExclusiveNode.<init>():void (5 bytes)   inline method (bytecode parsing)
                              @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer$Node.<init>():void (5 bytes)   inline method (bytecode parsing)
                            @ 290  java.util.concurrent.locks.AbstractQueuedSynchronizer$Node.setPrevRelaxed(AbstractQueuedSynchronizer$Node):void (12 bytes)   inline method (bytecode parsing)
                            @ 393  java.lang.Thread.interrupted():boolean (7 bytes)   inline method (bytecode parsing)
                                                          @ 15  java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer$Node, int, boolean, boolean, boolean, long):int (424 bytes)   not inlining relevance-based (relevance=0.002503, probability=0.000001, bonus=1.000000, nodes=226 > 0.750820)
                                                        @ 4  java.util.concurrent.locks.ReentrantLock$Sync.lock():void (13 bytes)   relevance-based (relevance=1.149366, probability=0.000273, bonus=1.000000, nodes=57 <= 300.000000)
                            @ 16  java.io.BufferedWriter.newLine():void (8 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.System.lineSeparator():String (4 bytes)   inline method (bytecode parsing)
                            @ 30  java.io.OutputStreamWriter.flushBuffer():void (8 bytes)   inline method (bytecode parsing)
                                                          @ 1  java.io.PrintStream.ensureOpen():void (18 bytes)   trivial (relevance=2.000000, probability=0.000273, bonus=1.000000, nodes=7)
                                                              @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.000273, bonus=1.000000, nodes=5)
                                                            @ 4  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000000, probability=0.000273, bonus=1.000000, nodes=8)
                            @ 23  jdk.internal.misc.InternalLock.lock():void (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.util.concurrent.locks.ReentrantLock.lock():void (8 bytes)   inline method (bytecode parsing)
                            @ 35  jdk.internal.misc.InternalLock.unlock():void (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.util.concurrent.locks.ReentrantLock.unlock():void (10 bytes)   inline method (bytecode parsing)
                                @ 5  java.util.concurrent.locks.AbstractQueuedSynchronizer.release(int):boolean (19 bytes)   inline method (bytecode parsing)
                            @ 9  java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(int):void (20 bytes)   inline method (bytecode parsing)
                            @ 7  java.util.concurrent.locks.AbstractQueuedSynchronizer.compareAndSetState(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 15  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                            @ 21  java.util.concurrent.locks.AbstractOwnableSynchronizer.getExclusiveOwnerThread():Thread (5 bytes)   inline accessor method (bytecode parsing)
                            @ 29  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 51  java.util.concurrent.locks.AbstractQueuedSynchronizer.setState(int):void (6 bytes)   inline method (bytecode parsing)
                                                                @ 1  java.util.concurrent.locks.ReentrantLock$NonfairSync.initialTryLock():boolean (58 bytes)   relevance-based (relevance=1.007158, probability=0.000273, bonus=1.000000, nodes=40 <= 300.000000)
                            @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 10  java.util.concurrent.locks.AbstractQueuedSynchronizer.compareAndSetState(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 20  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                                                                @ 2  java.util.concurrent.locks.ReentrantLock$NonfairSync.tryAcquire(int):boolean (27 bytes)   not inlining relevance-based (relevance=0.005005, probability=0.000001, bonus=1.000000, nodes=36 > 1.501641)
                            @ 108  java.util.concurrent.locks.AbstractQueuedSynchronizer.tryAcquireShared(int):int (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.lang.UnsupportedOperationException.<init>():void (5 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.RuntimeException.<init>():void (5 bytes)   inline method (bytecode parsing)
                                  @ 1  java.lang.Exception.<init>():void (5 bytes)   inline method (bytecode parsing)
                            @ 245  java.util.concurrent.locks.AbstractQueuedSynchronizer$ExclusiveNode.<init>():void (5 bytes)   inline method (bytecode parsing)
                              @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer$Node.<init>():void (5 bytes)   inline method (bytecode parsing)
                            @ 290  java.util.concurrent.locks.AbstractQueuedSynchronizer$Node.setPrevRelaxed(AbstractQueuedSynchronizer$Node):void (12 bytes)   inline method (bytecode parsing)
                            @ 393  java.lang.Thread.interrupted():boolean (7 bytes)   inline method (bytecode parsing)
                                                                @ 15  java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer$Node, int, boolean, boolean, boolean, long):int (424 bytes)   not inlining relevance-based (relevance=0.002503, probability=0.000001, bonus=1.000000, nodes=226 > 0.750820)
                                                              @ 4  java.util.concurrent.locks.ReentrantLock$Sync.lock():void (13 bytes)   relevance-based (relevance=1.149366, probability=0.000273, bonus=1.000000, nodes=57 <= 300.000000)
                            @ 39  java.io.BufferedWriter.min(int, int):int (9 bytes)   inline method (bytecode parsing)
                                                                @ 1  java.io.BufferedWriter.ensureOpen():void (18 bytes)   trivial (relevance=1.000000, probability=0.000273, bonus=1.000000, nodes=7)
                                                                @ 6  java.io.BufferedWriter.growIfNeeded(int):void (63 bytes)   relevance-based (relevance=1.000000, probability=0.000273, bonus=1.000000, nodes=15 <= 300.000000)
                            @ 16  java.lang.String.checkBoundsOffCount(int, int, int):int (10 bytes)   inline method (bytecode parsing)
                                                                    @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.000273, bonus=1.000000, nodes=5)
                                                                  @ 3  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000000, probability=0.000273, bonus=1.000000, nodes=8)
                                                                    @ 6  jdk.internal.util.Preconditions.checkFromToIndex(int, int, int, BiFunction):int (24 bytes)   relevance-based (relevance=1.000000, probability=0.000273, bonus=1.000000, nodes=11 <= 300.000000)
                                                                  @ 6  java.lang.String.checkBoundsBeginEnd(int, int, int):void (11 bytes)   relevance-based (relevance=1.000000, probability=0.000273, bonus=1.000000, nodes=10 <= 300.000000)
                                                                  @ 6  jdk.internal.util.Preconditions.checkFromIndexSize(int, int, int, BiFunction):int (25 bytes)   relevance-based (relevance=1.000000, probability=0.000273, bonus=1.000000, nodes=15 <= 300.000000)
                                                                  @ 21  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=0.000273, bonus=1.000000, nodes=9)
                                                                  @ 36  java.lang.StringLatin1.getChars(byte[], int, int, char[], int):void (12 bytes)   relevance-based (relevance=1.000000, probability=0.000273, bonus=1.000000, nodes=38 <= 300.000000)
                                                                @ 60  java.lang.String.getChars(int, int, char[], int):void (55 bytes)   relevance-based (relevance=1.000000, probability=0.000273, bonus=1.000000, nodes=58 <= 300.000000)
                                                              @ 30  java.io.BufferedWriter.implWrite(String, int, int):void (100 bytes)   relevance-based (relevance=1.125700, probability=0.000273, bonus=1.000000, nodes=93 <= 300.000000)
                            @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 8  java.util.concurrent.locks.AbstractOwnableSynchronizer.getExclusiveOwnerThread():Thread (5 bytes)   inline accessor method (bytecode parsing)
                            @ 41  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                            @ 46  java.util.concurrent.locks.AbstractQueuedSynchronizer.setState(int):void (6 bytes)   inline method (bytecode parsing)
                                                              @ 2  java.util.concurrent.locks.ReentrantLock$Sync.tryRelease(int):boolean (51 bytes)   relevance-based (relevance=1.125700, probability=0.000273, bonus=1.000000, nodes=37 <= 300.000000)
                            @ 22  java.util.concurrent.locks.AbstractQueuedSynchronizer$Node.getAndUnsetStatus(int):int (14 bytes)   inline method (bytecode parsing)
                              @ 10  jdk.internal.misc.Unsafe.getAndBitwiseAndInt(Object, long, int):int (27 bytes)   inline method (bytecode parsing)
                            @ 5  java.lang.Thread.isVirtual():boolean (5 bytes)   inline method (bytecode parsing)
                                                                @ 30  java.util.concurrent.locks.LockSupport.unpark(Thread):void (26 bytes)   not inlining relevance-based (relevance=0.006037, probability=0.000001, bonus=1.000000, nodes=23 > 1.811024)
                                                              @ 12  java.util.concurrent.locks.AbstractQueuedSynchronizer.signalNext(AbstractQueuedSynchronizer$Node):void (34 bytes)   relevance-based (relevance=0.979410, probability=0.000238, bonus=1.000000, nodes=56 <= 293.823039)
                                                            @ 7  java.io.BufferedWriter.write(String, int, int):void (82 bytes)   relevance-based (relevance=1.000000, probability=0.000273, bonus=1.000000, nodes=262 <= 300.000000)
                                                          @ 9  java.io.Writer.write(String):void (11 bytes)   relevance-based (relevance=2.000000, probability=0.000273, bonus=1.000000, nodes=266 <= 300.000000)
                                                        @ 16  java.io.PrintStream.implWriteln(String):void (48 bytes)   not inlining relevance-based (relevance=1.125700, probability=0.000273, bonus=1.000000, nodes=309 > 300.000000)
                            @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 8  java.util.concurrent.locks.AbstractOwnableSynchronizer.getExclusiveOwnerThread():Thread (5 bytes)   inline accessor method (bytecode parsing)
                            @ 41  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                            @ 46  java.util.concurrent.locks.AbstractQueuedSynchronizer.setState(int):void (6 bytes)   inline method (bytecode parsing)
                                                        @ 2  java.util.concurrent.locks.ReentrantLock$Sync.tryRelease(int):boolean (51 bytes)   relevance-based (relevance=1.125700, probability=0.000273, bonus=1.000000, nodes=37 <= 300.000000)
                            @ 22  java.util.concurrent.locks.AbstractQueuedSynchronizer$Node.getAndUnsetStatus(int):int (14 bytes)   inline method (bytecode parsing)
                              @ 10  jdk.internal.misc.Unsafe.getAndBitwiseAndInt(Object, long, int):int (27 bytes)   inline method (bytecode parsing)
                            @ 5  java.lang.Thread.isVirtual():boolean (5 bytes)   inline method (bytecode parsing)
                                                          @ 30  java.util.concurrent.locks.LockSupport.unpark(Thread):void (26 bytes)   not inlining relevance-based (relevance=0.006037, probability=0.000001, bonus=1.000000, nodes=23 > 1.811024)
                                                        @ 12  java.util.concurrent.locks.AbstractQueuedSynchronizer.signalNext(AbstractQueuedSynchronizer$Node):void (34 bytes)   relevance-based (relevance=0.979410, probability=0.000238, bonus=1.000000, nodes=56 <= 293.823039)
                            @ 16  java.io.BufferedWriter.newLine():void (8 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.System.lineSeparator():String (4 bytes)   inline method (bytecode parsing)
                            @ 30  java.io.OutputStreamWriter.flushBuffer():void (8 bytes)   inline method (bytecode parsing)
                                                          @ 1  java.io.PrintStream.ensureOpen():void (18 bytes)   trivial (relevance=2.000000, probability=0.000273, bonus=1.000000, nodes=7)
                                                              @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.000273, bonus=1.000000, nodes=5)
                                                            @ 4  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000000, probability=0.000273, bonus=1.000000, nodes=8)
                            @ 23  jdk.internal.misc.InternalLock.lock():void (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.util.concurrent.locks.ReentrantLock.lock():void (8 bytes)   inline method (bytecode parsing)
                            @ 35  jdk.internal.misc.InternalLock.unlock():void (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.util.concurrent.locks.ReentrantLock.unlock():void (10 bytes)   inline method (bytecode parsing)
                                @ 5  java.util.concurrent.locks.AbstractQueuedSynchronizer.release(int):boolean (19 bytes)   inline method (bytecode parsing)
                            @ 9  java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(int):void (20 bytes)   inline method (bytecode parsing)
                            @ 7  java.util.concurrent.locks.AbstractQueuedSynchronizer.compareAndSetState(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 15  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                            @ 21  java.util.concurrent.locks.AbstractOwnableSynchronizer.getExclusiveOwnerThread():Thread (5 bytes)   inline accessor method (bytecode parsing)
                            @ 29  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 51  java.util.concurrent.locks.AbstractQueuedSynchronizer.setState(int):void (6 bytes)   inline method (bytecode parsing)
                                                                @ 1  java.util.concurrent.locks.ReentrantLock$NonfairSync.initialTryLock():boolean (58 bytes)   relevance-based (relevance=1.007158, probability=0.000273, bonus=1.000000, nodes=40 <= 300.000000)
                            @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 10  java.util.concurrent.locks.AbstractQueuedSynchronizer.compareAndSetState(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 20  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                                                                @ 2  java.util.concurrent.locks.ReentrantLock$NonfairSync.tryAcquire(int):boolean (27 bytes)   not inlining relevance-based (relevance=0.005005, probability=0.000001, bonus=1.000000, nodes=36 > 1.501641)
                            @ 108  java.util.concurrent.locks.AbstractQueuedSynchronizer.tryAcquireShared(int):int (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.lang.UnsupportedOperationException.<init>():void (5 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.RuntimeException.<init>():void (5 bytes)   inline method (bytecode parsing)
                                  @ 1  java.lang.Exception.<init>():void (5 bytes)   inline method (bytecode parsing)
                            @ 245  java.util.concurrent.locks.AbstractQueuedSynchronizer$ExclusiveNode.<init>():void (5 bytes)   inline method (bytecode parsing)
                              @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer$Node.<init>():void (5 bytes)   inline method (bytecode parsing)
                            @ 290  java.util.concurrent.locks.AbstractQueuedSynchronizer$Node.setPrevRelaxed(AbstractQueuedSynchronizer$Node):void (12 bytes)   inline method (bytecode parsing)
                            @ 393  java.lang.Thread.interrupted():boolean (7 bytes)   inline method (bytecode parsing)
                                                                @ 15  java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer$Node, int, boolean, boolean, boolean, long):int (424 bytes)   not inlining relevance-based (relevance=0.002503, probability=0.000001, bonus=1.000000, nodes=226 > 0.750820)
                                                              @ 4  java.util.concurrent.locks.ReentrantLock$Sync.lock():void (13 bytes)   relevance-based (relevance=1.149366, probability=0.000273, bonus=1.000000, nodes=57 <= 300.000000)
                            @ 39  java.io.BufferedWriter.min(int, int):int (9 bytes)   inline method (bytecode parsing)
                                                                @ 1  java.io.BufferedWriter.ensureOpen():void (18 bytes)   trivial (relevance=1.000000, probability=0.000273, bonus=1.000000, nodes=7)
                                                                @ 6  java.io.BufferedWriter.growIfNeeded(int):void (63 bytes)   relevance-based (relevance=1.000000, probability=0.000273, bonus=1.000000, nodes=15 <= 300.000000)
                            @ 16  java.lang.String.checkBoundsOffCount(int, int, int):int (10 bytes)   inline method (bytecode parsing)
                                                                    @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.000273, bonus=1.000000, nodes=5)
                                                                  @ 3  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000000, probability=0.000273, bonus=1.000000, nodes=8)
                            @ 17  java.lang.Enum.ordinal():int (5 bytes)   inline accessor method (bytecode parsing)
                                                                    @ 6  jdk.internal.util.Preconditions.checkFromToIndex(int, int, int, BiFunction):int (24 bytes)   relevance-based (relevance=1.000000, probability=0.000273, bonus=1.000000, nodes=11 <= 300.000000)
                                                                  @ 6  java.lang.String.checkBoundsBeginEnd(int, int, int):void (11 bytes)   relevance-based (relevance=1.000000, probability=0.000273, bonus=1.000000, nodes=10 <= 300.000000)
                                @ 2  java.util.EnumSet.typeCheck(Enum):void (59 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=9)
                              @ 5  java.util.RegularEnumSet.add(Enum):boolean (40 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=21 <= 300.000000)
                                                                  @ 6  jdk.internal.util.Preconditions.checkFromIndexSize(int, int, int, BiFunction):int (25 bytes)   relevance-based (relevance=1.000000, probability=0.000273, bonus=1.000000, nodes=15 <= 300.000000)
                                                                  @ 21  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=0.000273, bonus=1.000000, nodes=9)
                                                                  @ 36  java.lang.StringLatin1.getChars(byte[], int, int, char[], int):void (12 bytes)   relevance-based (relevance=1.000000, probability=0.000273, bonus=1.000000, nodes=38 <= 300.000000)
                                                                @ 60  java.lang.String.getChars(int, int, char[], int):void (55 bytes)   relevance-based (relevance=1.000000, probability=0.000273, bonus=1.000000, nodes=58 <= 300.000000)
                                                              @ 30  java.io.BufferedWriter.implWrite(String, int, int):void (100 bytes)   relevance-based (relevance=1.125700, probability=0.000273, bonus=1.000000, nodes=93 <= 300.000000)
                            @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 8  java.util.concurrent.locks.AbstractOwnableSynchronizer.getExclusiveOwnerThread():Thread (5 bytes)   inline accessor method (bytecode parsing)
                            @ 41  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                            @ 46  java.util.concurrent.locks.AbstractQueuedSynchronizer.setState(int):void (6 bytes)   inline method (bytecode parsing)
                                                              @ 2  java.util.concurrent.locks.ReentrantLock$Sync.tryRelease(int):boolean (51 bytes)   relevance-based (relevance=1.125700, probability=0.000273, bonus=1.000000, nodes=37 <= 300.000000)
                            @ 22  java.util.concurrent.locks.AbstractQueuedSynchronizer$Node.getAndUnsetStatus(int):int (14 bytes)   inline method (bytecode parsing)
                              @ 10  jdk.internal.misc.Unsafe.getAndBitwiseAndInt(Object, long, int):int (27 bytes)   inline method (bytecode parsing)
                            @ 5  java.lang.Thread.isVirtual():boolean (5 bytes)   inline method (bytecode parsing)
                                                                @ 30  java.util.concurrent.locks.LockSupport.unpark(Thread):void (26 bytes)   not inlining relevance-based (relevance=0.006037, probability=0.000001, bonus=1.000000, nodes=23 > 1.811024)
                                                              @ 12  java.util.concurrent.locks.AbstractQueuedSynchronizer.signalNext(AbstractQueuedSynchronizer$Node):void (34 bytes)   relevance-based (relevance=0.979410, probability=0.000238, bonus=1.000000, nodes=56 <= 293.823039)
                                                            @ 7  java.io.BufferedWriter.write(String, int, int):void (82 bytes)   relevance-based (relevance=1.000000, probability=0.000273, bonus=1.000000, nodes=262 <= 300.000000)
                                                          @ 9  java.io.Writer.write(String):void (11 bytes)   relevance-based (relevance=2.000000, probability=0.000273, bonus=1.000000, nodes=266 <= 300.000000)
                                                        @ 48  java.io.PrintStream.implWriteln(String):void (48 bytes)   not inlining relevance-based (relevance=1.125700, probability=0.000273, bonus=1.000000, nodes=309 > 300.000000)
                                                      @ 14  java.io.PrintStream.writeln(String):void (81 bytes)   relevance-based (relevance=1.000000, probability=0.000547, bonus=1.000000, nodes=189 <= 300.000000)
                                                    @ 29  java.io.PrintStream.println(String):void (44 bytes)   relevance-based (relevance=1.269377, probability=0.000547, bonus=1.000000, nodes=190 <= 300.000000)
                                                  @ 153  sun.security.util.Debug.println(String):void (33 bytes)   relevance-based (relevance=1.000000, probability=0.000547, bonus=1.000000, nodes=264 <= 300.000000)
                                                @ 19  java.security.AccessControlContext.optimize():AccessControlContext (319 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.004375, bonus=1.000000, nodes=461 > 300.000000)
                                              @ 147  java.security.AccessController.getContext():AccessControlContext (23 bytes)   relevance-based (relevance=2.333333, probability=0.008750, bonus=1.000000, nodes=29 <= 300.000000)
                                            @ 9  java.util.ServiceLoader.<init>(Class, Class, ClassLoader):void (158 bytes)   relevance-based (relevance=1.333333, probability=0.025000, bonus=1.000000, nodes=209 <= 300.000000)
                                          @ 10  jdk.graal.compiler.options.OptionsParser.getOptionsLoader():Iterable (25 bytes)   not inlining relevance-based (relevance=2.000000, probability=0.062500, bonus=1.000000, nodes=309 > 300.000000)
                                            @ 0  jdk.vm.ci.services.Services.checkJVMCIEnabled():void (17 bytes)   trivial (relevance=4.000000, probability=0.062500, bonus=1.000000, nodes=3)
                                              @ 0  java.lang.System.allowSecurityManager():boolean (13 bytes)   trivial (relevance=1.000796, probability=0.015625, bonus=1.000000, nodes=8)
                                            @ 42  java.lang.System.getSecurityManager():SecurityManager (12 bytes)   relevance-based (relevance=1.000000, probability=0.015625, bonus=1.000000, nodes=14 <= 300.000000)
                            @ 12  java.lang.IllegalStateException.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  java.lang.RuntimeException.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                                @ 2  java.lang.Exception.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                            @ 12  java.lang.NullPointerException.<init>():void (5 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.RuntimeException.<init>():void (5 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.Exception.<init>():void (5 bytes)   inline method (bytecode parsing)
                 n                                  @ 25  java.lang.NullPointerException.getExtendedNPEMessage():String (0 bytes)   not inlining it is a non-intrinsic native method
                 n                                    @ 16  java.lang.Throwable.fillInStackTrace(int):Throwable (0 bytes)   not inlining it is a non-intrinsic native method
              s                                       @ 37  java.lang.Throwable.fillInStackTrace():Throwable (29 bytes)   relevance-based (relevance=4.000000, probability=0.001953, bonus=1.000000, nodes=34 <= 300.000000)
              s                                     @ 24  java.lang.NullPointerException.fillInStackTrace():Throwable (41 bytes)   relevance-based (relevance=1.000000, probability=0.001953, bonus=1.000000, nodes=65 <= 300.000000)
                                                  @ 1  java.lang.Throwable.<init>():void (29 bytes)   relevance-based (relevance=1.000000, probability=0.001953, bonus=1.000000, nodes=73 <= 300.000000)
                                                @ 18  java.util.Collections$UnmodifiableMap.<init>(Map):void (22 bytes)   relevance-based (relevance=1.000000, probability=0.003906, bonus=1.000000, nodes=87 <= 300.000000)
                                              @ 19  java.util.Collections.unmodifiableMap(Map):Map (22 bytes)   relevance-based (relevance=1.000000, probability=0.007812, bonus=1.000000, nodes=95 <= 300.000000)
                                  @ 4  java.util.AbstractList$ListItr.nextIndex():int (5 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                                @ 1  java.util.AbstractList$SubList$1.nextIndex():int (18 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=17 <= 300.000000)
                              @ 1  java.util.AbstractList$SubList$1.hasNext():boolean (20 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=23 <= 300.000000)
                 n                              @ 16  java.lang.Throwable.fillInStackTrace(int):Throwable (0 bytes)   not inlining it is a non-intrinsic native method
              s                                 @ 24  java.lang.Throwable.fillInStackTrace():Throwable (29 bytes)   relevance-based (relevance=1.000000, probability=0.007812, bonus=1.000000, nodes=34 <= 300.000000)
                                @ 1  java.util.AbstractList$Itr.checkForComodification():void (23 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=9)
                                              @ 2  java.lang.Throwable.<init>(String):void (34 bytes)   relevance-based (relevance=16.000000, probability=0.007812, bonus=1.000000, nodes=45 <= 300.000000)
                                            @ 61  jdk.internal.misc.VM.getSavedProperties():Map (23 bytes)   relevance-based (relevance=1.000796, probability=0.015625, bonus=1.000000, nodes=147 <= 300.000000)
                                  @ 2  jdk.graal.compiler.graph.NodeList.get(int):Node (29 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=7)
                                @ 14  jdk.graal.compiler.graph.NodeList.get(int):Object (6 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=7)
                                          @ 14  jdk.vm.ci.services.Services.getSavedProperties():Map (81 bytes)   relevance-based (relevance=2.000000, probability=0.062500, bonus=1.000000, nodes=201 <= 300.000000)
                              @ 11  java.util.AbstractList$Itr.next():Object (46 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=27 <= 300.000000)
                                        @ 4  jdk.graal.compiler.hotspot.HotSpotGraalOptionValues.parseOptions():EconomicMap (417 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.062500, bonus=1.000000, nodes=460 > 300.000000)
                            @ 4  jdk.graal.compiler.options.OptionValues.newOptionMap():EconomicMap (7 bytes)   inline method (bytecode parsing)
                              @ 3  org.graalvm.collections.EconomicMap.create(Equivalence):EconomicMap (6 bytes)   inline method (bytecode parsing)
                                @ 2  org.graalvm.collections.EconomicMapImpl.create(Equivalence, boolean):EconomicMapImpl (13 bytes)   inline method (bytecode parsing)
                                  @ 6  org.graalvm.collections.EconomicMapImpl.<init>(Equivalence, boolean):void (30 bytes)   inline method (bytecode parsing)
                                  @ 9  org.graalvm.collections.EconomicMapImpl.intercept(EconomicMapImpl):EconomicMapImpl (2 bytes)   inline method (bytecode parsing)
                                          @ 1  org.graalvm.collections.UnmodifiableEconomicMap.getEntries():UnmodifiableMapCursor (0 bytes)   not inlining no type profile exists
                                          @ 8  org.graalvm.collections.UnmodifiableMapCursor.advance():boolean (0 bytes)   not inlining no type profile exists
                                          @ 18  org.graalvm.collections.UnmodifiableMapCursor.getKey():Object (0 bytes)   not inlining no type profile exists
                                          @ 27  org.graalvm.collections.UnmodifiableMapCursor.getValue():Object (0 bytes)   not inlining no type profile exists
                                            @ 32  jdk.graal.compiler.options.OptionValues.encodeNull(Object):Object (12 bytes)   relevance-based (relevance=1.000000, probability=0.062500, bonus=1.000000, nodes=14 <= 300.000000)
                            @ 111  org.graalvm.collections.EconomicMapImpl.setKey(int, Object):void (10 bytes)   inline method (bytecode parsing)
                            @ 143  org.graalvm.collections.EconomicMapImpl.size():int (10 bytes)   inline method (bytecode parsing)
                            @ 147  org.graalvm.collections.EconomicMapImpl.size():int (10 bytes)   inline method (bytecode parsing)
                                            @ 35  org.graalvm.collections.EconomicMapImpl.put(Object, Object):Object (192 bytes)   not inlining too large previous low-level graph (low-level-nodes: 1300, relevance=1.000000, probability=0.062500, bonus=1.000000, nodes=101)
                                          @ 10  jdk.graal.compiler.options.OptionValues.initMap(EconomicMap, UnmodifiableEconomicMap):void (45 bytes)   not inlining callee invoke probability is too high (invokeP=6.000000, relevance=1.000000, probability=0.062500, bonus=1.000000, nodes=44)
                                        @ 7  jdk.graal.compiler.options.OptionValues.<init>(UnmodifiableEconomicMap):void (19 bytes)   relevance-based (relevance=1.000000, probability=0.062500, bonus=1.000000, nodes=24 <= 300.000000)
                                      @ 21  jdk.graal.compiler.hotspot.HotSpotGraalOptionValues.initializeOptions():OptionValues (11 bytes)   relevance-based (relevance=1.000000, probability=0.062500, bonus=1.000000, nodes=27 <= 300.000000)
                                    @ 22  jdk.graal.compiler.hotspot.HotSpotGraalOptionValues.defaultOptions():OptionValues (41 bytes)   relevance-based (relevance=6.183661, probability=0.250000, bonus=1.000000, nodes=60 <= 300.000000)
                            @ 23  jdk.graal.compiler.options.OptionValues.get(OptionKey):Object (9 bytes)   inline method (bytecode parsing)
                            @ 13  jdk.graal.compiler.options.OptionKey.getDefaultValue():Object (5 bytes)   inline accessor method (bytecode parsing)
                                      @ 2  org.graalvm.collections.UnmodifiableEconomicMap.get(Object):Object (0 bytes)   not inlining no type profile exists
                                        @ 18  jdk.graal.compiler.options.OptionValues.decodeNull(Object):Object (13 bytes)   relevance-based (relevance=1.000000, probability=0.125000, bonus=1.000000, nodes=15 <= 300.000000)
                                      @ 5  jdk.graal.compiler.options.OptionValues.get(UnmodifiableEconomicMap, OptionKey):Object (22 bytes)   relevance-based (relevance=1.000000, probability=0.250000, bonus=1.000000, nodes=26 <= 300.000000)
                                    @ 25  jdk.graal.compiler.options.OptionKey.getValue(OptionValues):Object (27 bytes)   relevance-based (relevance=4.000000, probability=0.250000, bonus=1.000000, nodes=31 <= 300.000000)
                              @ 5  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                            @ 5  java.lang.String.contains(CharSequence):boolean (19 bytes)   inline method (bytecode parsing)
                              @ 2  java.lang.String.toString():String (2 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                            @ 24  java.lang.String.contains(CharSequence):boolean (19 bytes)   inline method (bytecode parsing)
                              @ 9  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=8)
                              @ 2  java.lang.String.toString():String (2 bytes)   inline method (bytecode parsing)
                            @ 44  java.lang.String.contains(CharSequence):boolean (19 bytes)   inline method (bytecode parsing)
                              @ 2  java.lang.String.toString():String (2 bytes)   inline method (bytecode parsing)
                            @ 64  java.lang.String.contains(CharSequence):boolean (19 bytes)   inline method (bytecode parsing)
                              @ 2  java.lang.String.toString():String (2 bytes)   inline method (bytecode parsing)
                            @ 76  java.lang.String.valueOf(long):String (5 bytes)   inline method (bytecode parsing)
                                  @ 41  java.lang.Math.max(long, long):long (12 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=7)
                                  @ 44  java.lang.Math.min(long, long):long (12 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=7)
                                @ 5  java.lang.Math.clamp(long, int, int):int (49 bytes)   relevance-based (relevance=1.000010, probability=1.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                  @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                                @ 11  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000010, probability=1.000000, bonus=1.000000, nodes=8)
                                @ 42  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000010, probability=1.000000, bonus=1.000000, nodes=5)
                                        @ 1  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.125000, bonus=1.000000, nodes=5)
                              @ 14  java.lang.String.indexOf(byte[], byte, int, String, int):int (101 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=43 <= 300.000000)
                                        @ 7  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.125000, bonus=1.000000, nodes=5)
                                        @ 14  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=0.125000, bonus=1.000000, nodes=9)
                                        @ 28  java.lang.StringLatin1.indexOf(byte[], byte[]):int (25 bytes)   relevance-based (relevance=1.000000, probability=0.125000, bonus=1.000000, nodes=16 <= 300.000000)
                                      @ 7  java.lang.String.indexOf(String):int (64 bytes)   relevance-based (relevance=2.000000, probability=0.125000, bonus=1.000000, nodes=25 <= 300.000000)
                                      @ 14  jdk.graal.compiler.serviceprovider.GraalServices.getExecutionID():String (12 bytes)   trivial (relevance=1.000000, probability=0.062500, bonus=1.000000, nodes=3)
                                        @ 1  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.062500, bonus=1.000000, nodes=5)
                            @ 12  jdk.graal.compiler.replacements.ReplacementsUtil.dynamicAssert(boolean, String):void (12 bytes)   inline method (bytecode parsing)
                                        @ 7  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.062500, bonus=1.000000, nodes=5)
                            @ 26  jdk.graal.compiler.replacements.ReplacementsUtil.dynamicAssert(boolean, String):void (12 bytes)   inline method (bytecode parsing)
                                        @ 14  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=0.062500, bonus=1.000000, nodes=9)
                            @ 83  jdk.graal.compiler.replacements.StringLatin1Snippets.byteArrayOffset(long):long (17 bytes)   inline method (bytecode parsing)
                                        @ 28  java.lang.StringLatin1.indexOf(byte[], byte[]):int (25 bytes)   relevance-based (relevance=1.000000, probability=0.062500, bonus=1.000000, nodes=16 <= 300.000000)
                                      @ 7  java.lang.String.indexOf(String):int (64 bytes)   relevance-based (relevance=1.000000, probability=0.062500, bonus=1.000000, nodes=25 <= 300.000000)
                            @ 94  java.lang.Byte.toUnsignedInt(byte):int (6 bytes)   inline method (bytecode parsing)
                                        @ 1  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.125000, bonus=1.000000, nodes=5)
                                        @ 7  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.125000, bonus=1.000000, nodes=5)
                                        @ 14  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=0.125000, bonus=1.000000, nodes=9)
                            @ 158  jdk.graal.compiler.replacements.StringLatin1Snippets.byteArrayOffset(long):long (17 bytes)   inline method (bytecode parsing)
                                        @ 28  java.lang.StringLatin1.indexOf(byte[], byte[]):int (25 bytes)   relevance-based (relevance=1.000000, probability=0.125000, bonus=1.000000, nodes=16 <= 300.000000)
                            @ 167  java.lang.Byte.toUnsignedInt(byte):int (6 bytes)   inline method (bytecode parsing)
                            @ 172  java.lang.Byte.toUnsignedInt(byte):int (6 bytes)   inline method (bytecode parsing)
                                      @ 7  java.lang.String.indexOf(String):int (64 bytes)   relevance-based (relevance=2.000020, probability=0.125000, bonus=1.000000, nodes=25 <= 300.000000)
                            @ 234  jdk.graal.compiler.replacements.StringLatin1Snippets.byteArrayOffset(long):long (17 bytes)   inline method (bytecode parsing)
                            @ 239  jdk.graal.compiler.replacements.StringLatin1Snippets.byteArrayOffset(long):long (17 bytes)   inline method (bytecode parsing)
                                        @ 1  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.125000, bonus=1.000000, nodes=5)
                                        @ 7  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.125000, bonus=1.000000, nodes=5)
                                        @ 14  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=0.125000, bonus=1.000000, nodes=9)
                                        @ 28  java.lang.StringLatin1.indexOf(byte[], byte[]):int (25 bytes)   relevance-based (relevance=1.000000, probability=0.125000, bonus=1.000000, nodes=16 <= 300.000000)
                                      @ 7  java.lang.String.indexOf(String):int (64 bytes)   relevance-based (relevance=2.000020, probability=0.125000, bonus=1.000000, nodes=25 <= 300.000000)
                            @ 28  java.lang.String.<init>(byte[], byte):void (15 bytes)   inline method (bytecode parsing)
                                      @ 1  java.lang.Long.toString(long):String (55 bytes)   not inlining too large previous low-level graph (low-level-nodes: 426, relevance=1.000010, probability=0.062500, bonus=1.000000, nodes=19)
                            @ 206  java.lang.StringBuilder.<init>(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 215  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 237  java.lang.StringBuilder.append(char):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 242  java.lang.StringBuilder.append(String):StringBuilder (8 bytes)   inline method (bytecode parsing)
                            @ 254  java.lang.StringBuilder.toString():String (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.String.<init>(StringBuilder):void (7 bytes)   inline method (bytecode parsing)
                                        @ 1  java.lang.String.toString():String (2 bytes)   trivial (relevance=8.000000, probability=0.062500, bonus=1.000000, nodes=4)
                                        @ 8  java.lang.String.toString():String (2 bytes)   trivial (relevance=8.000000, probability=0.062500, bonus=1.000000, nodes=4)
                                          @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.062500, bonus=1.000000, nodes=5)
                                        @ 16  java.lang.String.length():int (11 bytes)   trivial (relevance=8.000000, probability=0.062500, bonus=1.000000, nodes=8)
                                          @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.062500, bonus=1.000000, nodes=5)
                                        @ 22  java.lang.String.length():int (11 bytes)   trivial (relevance=8.000000, probability=0.062500, bonus=1.000000, nodes=5)
                                          @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=0.062500, bonus=1.000000, nodes=5)
                                        @ 29  java.lang.String.length():int (11 bytes)   trivial (relevance=21.333333, probability=0.062500, bonus=1.000000, nodes=8)
                                        @ 68  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=21.333333, probability=0.062500, bonus=1.000000, nodes=9)
                                        @ 74  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=21.333333, probability=0.062500, bonus=1.000000, nodes=5)
                                        @ 81  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=21.333333, probability=0.062500, bonus=1.000000, nodes=9)
                            @ 162  java.lang.StringConcatHelper.newArray(long):byte[] (40 bytes)   inline method (bytecode parsing)
                            @ 287  java.lang.String.<init>(byte[], byte):void (15 bytes)   inline method (bytecode parsing)
                                            @ 3  java.lang.Math.max(int, int):int (11 bytes)   trivial (relevance=0.500000, probability=0.000366, bonus=1.000000, nodes=8)
                                          @ 94  jdk.internal.util.ArraysSupport.newLength(int, int, int):int (27 bytes)   relevance-based (relevance=0.500000, probability=0.000366, bonus=1.000000, nodes=15 <= 150.000000)
                                            @ 25  java.lang.Math.min(int, int):int (11 bytes)   trivial (relevance=0.500005, probability=0.000356, bonus=1.000000, nodes=7)
                                          @ 97  java.util.Arrays.copyOf(int[], int):int[] (33 bytes)   relevance-based (relevance=0.500000, probability=0.000366, bonus=1.000000, nodes=28 <= 150.000000)
                                            @ 51  jdk.internal.misc.Unsafe.allocateUninitializedArray0(Class, int):Object (90 bytes)   trivial (relevance=0.499990, probability=0.000366, bonus=1.000000, nodes=6)
                                          @ 33  jdk.internal.misc.Unsafe.allocateUninitializedArray(Class, int):Object (55 bytes)   relevance-based (relevance=0.499990, probability=0.000366, bonus=1.000000, nodes=10 <= 149.997000)
                                        @ 120  java.lang.StringLatin1.replace(byte[], int, byte[], int, byte[], int):String (291 bytes)   relevance-based (relevance=1.000000, probability=0.002930, bonus=1.000000, nodes=208 <= 300.000000)
                            @ 588  java.lang.StringUTF16.compress(byte[], int, int):byte[] (20 bytes)   inline method (bytecode parsing)
                            @ 605  java.lang.String.<init>(byte[], byte):void (15 bytes)   inline method (bytecode parsing)
                            @ 616  java.lang.String.<init>(byte[], byte):void (15 bytes)   inline method (bytecode parsing)
                                          @ 76  java.lang.StringLatin1.indexOf(byte[], byte[]):int (25 bytes)   relevance-based (relevance=1.000000, probability=0.010254, bonus=1.000000, nodes=16 <= 300.000000)
                            @ 8  java.lang.StringUTF16.length(byte[]):int (5 bytes)   inline method (bytecode parsing)
                            @ 20  java.lang.StringUTF16.length(byte[]):int (5 bytes)   inline method (bytecode parsing)
                                          @ 95  java.lang.StringUTF16.indexOfLatin1(byte[], byte[]):int (31 bytes)   relevance-based (relevance=1.000010, probability=0.010254, bonus=1.000000, nodes=22 <= 300.000000)
                            @ 4  java.lang.StringUTF16.checkBoundsBeginEnd(int, int, byte[]):void (10 bytes)   inline method (bytecode parsing)
                              @ 3  java.lang.StringUTF16.length(byte[]):int (5 bytes)   inline method (bytecode parsing)
                            @ 11  java.lang.String.checkBoundsBeginEnd(int, int, int):void (11 bytes)   inline method (bytecode parsing)
                              @ 6  jdk.internal.util.Preconditions.checkFromToIndex(int, int, int, BiFunction):int (24 bytes)   inline method (bytecode parsing)
                                              @ 6  jdk.internal.util.Preconditions.checkFromToIndex(int, int, int, BiFunction):int (24 bytes)   relevance-based (relevance=1.000000, probability=0.010254, bonus=1.000000, nodes=14 <= 300.000000)
                                            @ 6  java.lang.String.checkBoundsBeginEnd(int, int, int):void (11 bytes)   relevance-based (relevance=1.000010, probability=0.010254, bonus=1.000000, nodes=13 <= 300.000000)
                                          @ 178  java.lang.StringUTF16.indexOfLatin1(byte[], int, byte[], int, int):int (24 bytes)   relevance-based (relevance=1.000010, probability=0.010254, bonus=1.000000, nodes=24 <= 300.000000)
                                        @ 151  java.lang.StringUTF16.replace(byte[], int, boolean, byte[], int, boolean, byte[], int, boolean):String (620 bytes)   not inlining relevance-based (relevance=28.000280, probability=0.020508, bonus=1.000000, nodes=311 > 300.000000)
                                      @ 79  java.lang.String.replace(CharSequence, CharSequence):String (258 bytes)   relevance-based (relevance=1.000010, probability=0.062500, bonus=1.000000, nodes=237 <= 300.000000)
                                @ 41  java.lang.Math.max(long, long):long (12 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=7)
                                @ 44  java.lang.Math.min(long, long):long (12 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=7)
                              @ 5  java.lang.Math.clamp(long, int, int):int (49 bytes)   relevance-based (relevance=1.000010, probability=1.000000, bonus=1.000000, nodes=15 <= 300.000000)
                                    @ 37  jdk.graal.compiler.hotspot.HotSpotTTYStreamProvider$LogStreamOptionKey.makeFilename(String):String (157 bytes)   not inlining relevance-based (relevance=2.000000, probability=0.125000, bonus=1.000000, nodes=434 > 300.000000)
                                @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                              @ 11  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000010, probability=1.000000, bonus=1.000000, nodes=8)
                              @ 42  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000010, probability=1.000000, bonus=1.000000, nodes=5)
                                      @ 17  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=0.435390, probability=0.037879, bonus=1.000000, nodes=9)
                                      @ 27  java.lang.StringLatin1.hashCode(byte[]):int (52 bytes)   relevance-based (relevance=0.435390, probability=0.037879, bonus=1.000000, nodes=22 <= 130.617149)
                                    @ 49  java.lang.String.hashCode():int (60 bytes)   relevance-based (relevance=2.000000, probability=0.125000, bonus=1.000000, nodes=47 <= 300.000000)
                                  @ 1  jdk.graal.compiler.hotspot.HotSpotTTYStreamProvider$LogStreamOptionKey$DelayedOutputStream.lazy():OutputStream (266 bytes)   not inlining relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=307 > 300.000000)
                                @ 4  java.io.OutputStream.flush():void (1 bytes)   not inlining no type profile exists
                                @ 8  jdk.graal.compiler.hotspot.HotSpotTTYStreamProvider$LogStreamOptionKey$DelayedOutputStream.flush():void (8 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=10 <= 300.000000)
                              @ 15  java.io.PrintStream.implFlush():void (21 bytes)   relevance-based (relevance=1.125700, probability=1.000000, bonus=1.000000, nodes=23 <= 300.000000)
                            @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 8  java.util.concurrent.locks.AbstractOwnableSynchronizer.getExclusiveOwnerThread():Thread (5 bytes)   inline accessor method (bytecode parsing)
                            @ 41  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                            @ 46  java.util.concurrent.locks.AbstractQueuedSynchronizer.setState(int):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  java.util.concurrent.locks.ReentrantLock$Sync.tryRelease(int):boolean (51 bytes)   relevance-based (relevance=1.125700, probability=1.000000, bonus=1.000000, nodes=37 <= 300.000000)
                            @ 22  java.util.concurrent.locks.AbstractQueuedSynchronizer$Node.getAndUnsetStatus(int):int (14 bytes)   inline method (bytecode parsing)
                              @ 10  jdk.internal.misc.Unsafe.getAndBitwiseAndInt(Object, long, int):int (27 bytes)   inline method (bytecode parsing)
                            @ 5  java.lang.Thread.isVirtual():boolean (5 bytes)   inline method (bytecode parsing)
                                @ 30  java.util.concurrent.locks.LockSupport.unpark(Thread):void (26 bytes)   not inlining relevance-based (relevance=0.006037, probability=0.003969, bonus=1.000000, nodes=23 > 1.811024)
                              @ 12  java.util.concurrent.locks.AbstractQueuedSynchronizer.signalNext(AbstractQueuedSynchronizer$Node):void (34 bytes)   relevance-based (relevance=0.979410, probability=0.870045, bonus=1.000000, nodes=56 <= 293.823039)
                              @ 41  java.lang.Math.max(long, long):long (12 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=7)
                              @ 44  java.lang.Math.min(long, long):long (12 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=7)
                              @ 1  java.util.AbstractList$Itr.checkForComodification():void (23 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=9)
                                @ 2  jdk.graal.compiler.graph.NodeList.get(int):Node (29 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=7)
                              @ 14  jdk.graal.compiler.graph.NodeList.get(int):Object (6 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=7)
                            @ 4  java.util.concurrent.locks.ReentrantLock.unlock():void (10 bytes)   inline method (bytecode parsing)
                              @ 5  java.util.concurrent.locks.AbstractQueuedSynchronizer.release(int):boolean (19 bytes)   inline method (bytecode parsing)
                            @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 8  java.util.concurrent.locks.AbstractOwnableSynchronizer.getExclusiveOwnerThread():Thread (5 bytes)   inline accessor method (bytecode parsing)
                            @ 41  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                            @ 46  java.util.concurrent.locks.AbstractQueuedSynchronizer.setState(int):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  java.util.concurrent.locks.ReentrantLock$Sync.tryRelease(int):boolean (51 bytes)   relevance-based (relevance=1.144749, probability=1.000000, bonus=1.000000, nodes=37 <= 300.000000)
                            @ 22  java.util.concurrent.locks.AbstractQueuedSynchronizer$Node.getAndUnsetStatus(int):int (14 bytes)   inline method (bytecode parsing)
                              @ 10  jdk.internal.misc.Unsafe.getAndBitwiseAndInt(Object, long, int):int (27 bytes)   inline method (bytecode parsing)
                            @ 5  java.lang.Thread.isVirtual():boolean (5 bytes)   inline method (bytecode parsing)
                                @ 30  java.util.concurrent.locks.LockSupport.unpark(Thread):void (26 bytes)   not inlining relevance-based (relevance=0.006030, probability=0.003985, bonus=1.000000, nodes=23 > 1.809133)
                              @ 12  java.util.concurrent.locks.AbstractQueuedSynchronizer.signalNext(AbstractQueuedSynchronizer$Node):void (34 bytes)   relevance-based (relevance=0.978387, probability=0.873554, bonus=1.000000, nodes=56 <= 293.516155)
                            @ 9  java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(int):void (20 bytes)   inline method (bytecode parsing)
                            @ 7  java.util.concurrent.locks.AbstractQueuedSynchronizer.compareAndSetState(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 15  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                            @ 21  java.util.concurrent.locks.AbstractOwnableSynchronizer.getExclusiveOwnerThread():Thread (5 bytes)   inline accessor method (bytecode parsing)
                            @ 29  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 51  java.util.concurrent.locks.AbstractQueuedSynchronizer.setState(int):void (6 bytes)   inline method (bytecode parsing)
                              @ 1  java.util.concurrent.locks.ReentrantLock$NonfairSync.initialTryLock():boolean (58 bytes)   relevance-based (relevance=1.007282, probability=1.000000, bonus=1.000000, nodes=40 <= 300.000000)
                            @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer.getState():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 10  java.util.concurrent.locks.AbstractQueuedSynchronizer.compareAndSetState(int, int):boolean (13 bytes)   inline method (bytecode parsing)
                            @ 20  java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  java.util.concurrent.locks.ReentrantLock$NonfairSync.tryAcquire(int):boolean (27 bytes)   not inlining relevance-based (relevance=0.005005, probability=0.004447, bonus=1.000000, nodes=36 > 1.501641)
                            @ 108  java.util.concurrent.locks.AbstractQueuedSynchronizer.tryAcquireShared(int):int (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.lang.UnsupportedOperationException.<init>():void (5 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.RuntimeException.<init>():void (5 bytes)   inline method (bytecode parsing)
                                  @ 1  java.lang.Exception.<init>():void (5 bytes)   inline method (bytecode parsing)
                            @ 245  java.util.concurrent.locks.AbstractQueuedSynchronizer$ExclusiveNode.<init>():void (5 bytes)   inline method (bytecode parsing)
                              @ 1  java.util.concurrent.locks.AbstractQueuedSynchronizer$Node.<init>():void (5 bytes)   inline method (bytecode parsing)
                            @ 290  java.util.concurrent.locks.AbstractQueuedSynchronizer$Node.setPrevRelaxed(AbstractQueuedSynchronizer$Node):void (12 bytes)   inline method (bytecode parsing)
                            @ 393  java.lang.Thread.interrupted():boolean (7 bytes)   inline method (bytecode parsing)
                              @ 15  java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer$Node, int, boolean, boolean, boolean, long):int (424 bytes)   not inlining relevance-based (relevance=0.002503, probability=0.002223, bonus=1.000000, nodes=226 > 0.750820)
                              @ 18  jdk.internal.org.objectweb.asm.ByteVector.enlarge(int):void (73 bytes)   not inlining relevance-based (relevance=0.000049, probability=0.000049, bonus=1.000000, nodes=28 > 0.014552)
                            @ 39  java.io.BufferedWriter.min(int, int):int (9 bytes)   inline method (bytecode parsing)
                            @ 2  jdk.internal.org.objectweb.asm.SymbolTable.hash(int, String):int (10 bytes)   inline method (bytecode parsing)
                              @ 1  java.io.BufferedWriter.ensureOpen():void (18 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=7)
                              @ 6  java.io.BufferedWriter.growIfNeeded(int):void (63 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=15 <= 300.000000)
                            @ 88  jdk.internal.org.objectweb.asm.SymbolTable$Entry.<init>(int, int, String, int):void (17 bytes)   inline method (bytecode parsing)
                            @ 16  java.lang.String.checkBoundsOffCount(int, int, int):int (10 bytes)   inline method (bytecode parsing)
                              @ 7  jdk.internal.org.objectweb.asm.Symbol.<init>(int, int, String, String, String, long):void (38 bytes)   inline method (bytecode parsing)
                                  @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                                @ 3  java.lang.String.length():int (11 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=8)
                                  @ 6  jdk.internal.util.Preconditions.checkFromToIndex(int, int, int, BiFunction):int (24 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=14 <= 300.000000)
                                @ 6  java.lang.String.checkBoundsBeginEnd(int, int, int):void (11 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                @ 6  jdk.internal.util.Preconditions.checkFromIndexSize(int, int, int, BiFunction):int (25 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=15 <= 300.000000)
                                @ 21  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=9)
                                @ 36  java.lang.StringLatin1.getChars(byte[], int, int, char[], int):void (12 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=40 <= 300.000000)
                                @ 17  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=0.435390, probability=0.303030, bonus=1.000000, nodes=9)
                              @ 60  java.lang.String.getChars(int, int, char[], int):void (55 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=62 <= 300.000000)
                                @ 27  java.lang.StringLatin1.hashCode(byte[]):int (52 bytes)   relevance-based (relevance=0.435390, probability=0.303030, bonus=1.000000, nodes=22 <= 130.617149)
                              @ 4  java.lang.String.hashCode():int (60 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=47 <= 300.000000)
                              @ 8  jdk.internal.org.objectweb.asm.SymbolTable.get(int):SymbolTable$Entry (13 bytes)   trivial (relevance=1.436792, probability=1.000000, bonus=1.000000, nodes=9)
