In comp ID java.lang.Object.<init>()
graph Cost 6.0
Going to add 0 increment as we currently judge the cost to be 16
In comp ID som.Vector.forEach(ForEachInterface)
graph Cost 1740.0
Going to add 108 increment as we currently judge the cost to be 16
In comp ID jdk.internal.util.ArraysSupport.signedHashCode(int, byte[], int, int)
graph Cost 247.0
Going to add 15 increment as we currently judge the cost to be 16
In comp ID java.lang.StringLatin1.equals(byte[], byte[])
graph Cost 144.0
Going to add 9 increment as we currently judge the cost to be 16
In comp ID java.lang.StringLatin1.indexOfChar(byte[], int, int, int)
graph Cost 307.0
Going to add 19 increment as we currently judge the cost to be 16
In comp ID jdk.internal.util.ArraysSupport.signedHashCode(int, byte[], int, int)
graph Cost 201.0
Going to add 12 increment as we currently judge the cost to be 16
In comp ID java.lang.StringCoding.countPositives(byte[], int, int)
graph Cost 684.0
Going to add 42 increment as we currently judge the cost to be 16
In comp ID deltablue.Variable.setValue(int)
graph Cost 8.0
Going to add 0 increment as we currently judge the cost to be 16
In comp ID deltablue.Variable.getValue()
graph Cost 8.0
Going to add 0 increment as we currently judge the cost to be 16
In comp ID deltablue.EqualityConstraint.execute()
graph Cost 28.0
Going to add 1 increment as we currently judge the cost to be 16
In comp ID deltablue.Plan$$Lambda/0x00007fbde412c8a8.apply(Object)
graph Cost 106.0
Going to add 6 increment as we currently judge the cost to be 16
In comp ID deltablue.Plan.lambda$execute$0(AbstractConstraint)
graph Cost 98.0
Going to add 6 increment as we currently judge the cost to be 16
In comp ID jdk.vm.ci.hotspot.HotSpotResolvedObjectTypeImpl.getMetaspacePointer()
graph Cost 8.0
Going to add 0 increment as we currently judge the cost to be 16
In comp ID java.nio.Buffer.limit()
graph Cost 8.0
Going to add 0 increment as we currently judge the cost to be 16
In comp ID jdk.graal.compiler.options.OptionKey.getDefaultValue()
graph Cost 10.0
Going to add 0 increment as we currently judge the cost to be 16
In comp ID jdk.vm.ci.hotspot.HotSpotConstantPool.getMetadataHandle()
graph Cost 8.0
Going to add 0 increment as we currently judge the cost to be 16
In comp ID jdk.internal.util.Preconditions.checkIndex(int, int, BiFunction)
graph Cost 10.0
Going to add 0 increment as we currently judge the cost to be 16
In comp ID jdk.graal.compiler.graph.Edges.getDirectCount()
graph Cost 8.0
Going to add 0 increment as we currently judge the cost to be 16
In comp ID jdk.graal.compiler.graph.Graph.getDebug()
graph Cost 10.0
Going to add 0 increment as we currently judge the cost to be 16
In comp ID som.Vector.isEmpty()
graph Cost 12.0
Going to add 0 increment as we currently judge the cost to be 16
In comp ID java.lang.Boolean.booleanValue()
graph Cost 9.0
Going to add 0 increment as we currently judge the cost to be 16
In comp ID java.nio.Buffer.position()
graph Cost 8.0
Going to add 0 increment as we currently judge the cost to be 16
In comp ID jdk.graal.compiler.graph.Node.predecessor()
graph Cost 10.0
Going to add 0 increment as we currently judge the cost to be 16
In comp ID jdk.graal.compiler.phases.schedule.SchedulePhase$Instance$MicroBlock.getId()
graph Cost 8.0
Going to add 0 increment as we currently judge the cost to be 16
In comp ID jdk.graal.compiler.graph.Graph.getOptions()
graph Cost 10.0
Going to add 0 increment as we currently judge the cost to be 16
In comp ID jdk.graal.compiler.core.common.Fields.getOffsets()
graph Cost 10.0
Going to add 0 increment as we currently judge the cost to be 16
In comp ID java.lang.String.isLatin1()
graph Cost 10.0
Going to add 0 increment as we currently judge the cost to be 16
In comp ID deltablue.Variable.getMark()
graph Cost 8.0
Going to add 0 increment as we currently judge the cost to be 16
In comp ID deltablue.BinaryConstraint.getOutput()
graph Cost 14.0
Going to add 0 increment as we currently judge the cost to be 16
In comp ID jdk.graal.compiler.graph.Graph.trackNodeSourcePosition()
graph Cost 9.0
Going to add 0 increment as we currently judge the cost to be 16
In comp ID jdk.graal.compiler.graph.NodeClass.isLeafNode()
graph Cost 9.0
Going to add 0 increment as we currently judge the cost to be 16
In comp ID java.lang.String.checkIndex(int, int)
graph Cost 10.0
Going to add 0 increment as we currently judge the cost to be 16
In comp ID java.lang.String.charAt(int)
graph Cost 26.0
Going to add 1 increment as we currently judge the cost to be 16
In comp ID java.lang.StringLatin1.charAt(byte[], int)
graph Cost 18.0
Going to add 1 increment as we currently judge the cost to be 16
In comp ID java.lang.invoke.DirectMethodHandle.constructorMethod(Object)
graph Cost 21.0
Going to add 1 increment as we currently judge the cost to be 16
In comp ID som.Vector.append(Object)
graph Cost 68.0
Going to add 4 increment as we currently judge the cost to be 16
In comp ID deltablue.Planner.addPropagate(AbstractConstraint, int)
graph Cost 1741.0
Going to add 108 increment as we currently judge the cost to be 16
In comp ID java.lang.invoke.DirectMethodHandle.allocateInstance(Object)
graph Cost 656.0
Going to add 41 increment as we currently judge the cost to be 16
In comp ID deltablue.Plan$$Lambda/0x00007fbde412c8a8.apply(Object)
graph Cost 108.0
Going to add 6 increment as we currently judge the cost to be 16
In comp ID jdk.vm.ci.meta.ValueKind.getPlatformKind()
graph Cost 10.0
Going to add 0 increment as we currently judge the cost to be 16
In comp ID deltablue.Plan.lambda$execute$0(AbstractConstraint)
graph Cost 100.0
Going to add 6 increment as we currently judge the cost to be 16
In comp ID jdk.graal.compiler.lir.LIRIntrospection$Values.getDirectCount()
graph Cost 8.0
Going to add 0 increment as we currently judge the cost to be 16
In comp ID jdk.graal.compiler.lir.LIRInstruction.id()
graph Cost 8.0
Going to add 0 increment as we currently judge the cost to be 16
In comp ID jdk.vm.ci.code.RegisterValue.getRegister()
graph Cost 10.0
Going to add 0 increment as we currently judge the cost to be 16
In comp ID jdk.graal.compiler.lir.alloc.lsra.Interval.location()
graph Cost 10.0
Going to add 0 increment as we currently judge the cost to be 16
In comp ID jdk.graal.compiler.lir.LIRInstructionClass.isValueMoveOp()
graph Cost 9.0
Going to add 0 increment as we currently judge the cost to be 16
In comp ID jdk.graal.compiler.lir.LIR.getDebug()
graph Cost 10.0
Going to add 0 increment as we currently judge the cost to be 16
In comp ID jdk.vm.ci.meta.Value.getValueKind()
graph Cost 10.0
Going to add 0 increment as we currently judge the cost to be 16
In comp ID jdk.graal.compiler.nodes.cfg.HIRBlock.getRelativeFrequency()
graph Cost 8.0
Going to add 0 increment as we currently judge the cost to be 16
In comp ID jdk.graal.compiler.nodes.IfNode.getSuccessorCount()
graph Cost 6.0
Going to add 0 increment as we currently judge the cost to be 16
In comp ID org.graalvm.collections.EconomicMapImpl.findLinear(Object)
graph Cost 210.0
Going to add 13 increment as we currently judge the cost to be 16
In comp ID jdk.graal.compiler.core.common.cfg.BasicBlock.getDominatorDepth()
graph Cost 8.0
Going to add 0 increment as we currently judge the cost to be 16
In comp ID deltablue.Variable.getStay()
graph Cost 9.0
Going to add 0 increment as we currently judge the cost to be 16
In comp ID jdk.graal.compiler.graph.NodeClass.valueNumberable()
graph Cost 9.0
Going to add 0 increment as we currently judge the cost to be 16
In comp ID jdk.graal.compiler.debug.ScopeImpl.isEmptyScope()
graph Cost 9.0
Going to add 0 increment as we currently judge the cost to be 16
In comp ID jdk.graal.compiler.graph.Node.isAlive()
graph Cost 10.0
Going to add 0 increment as we currently judge the cost to be 16
In comp ID deltablue.Variable.getWalkStrength()
graph Cost 10.0
Going to add 0 increment as we currently judge the cost to be 16
In comp ID jdk.graal.compiler.lir.alloc.lsra.LinearScanWalker.minRegisterNumber()
graph Cost 8.0
Going to add 0 increment as we currently judge the cost to be 16
In comp ID jdk.graal.compiler.lir.LIRInstruction.destroysCallerSavedRegisters()
graph Cost 6.0
Going to add 0 increment as we currently judge the cost to be 16
In comp ID deltablue.BinaryConstraint.isSatisfied()
graph Cost 11.0
Going to add 0 increment as we currently judge the cost to be 16
In comp ID deltablue.Variable.getDeterminedBy()
graph Cost 10.0
Going to add 0 increment as we currently judge the cost to be 16
In comp ID jdk.graal.compiler.bytecode.BytecodeStream.currentBCI()
graph Cost 8.0
Going to add 0 increment as we currently judge the cost to be 16
In comp ID jdk.vm.ci.hotspot.HotSpotResolvedJavaMethodImpl.getDeclaringClass()
graph Cost 10.0
Going to add 0 increment as we currently judge the cost to be 16
In comp ID deltablue.Strength.getArithmeticValue()
graph Cost 8.0
Going to add 0 increment as we currently judge the cost to be 16
In comp ID jdk.graal.compiler.phases.schedule.SchedulePhase$Instance$NodeEntry.getNode()
graph Cost 10.0
Going to add 0 increment as we currently judge the cost to be 16
In comp ID deltablue.Variable.setMark(int)
graph Cost 8.0
Going to add 0 increment as we currently judge the cost to be 16
In comp ID deltablue.Planner$$Lambda/0x00007fbde400e2d8.apply(Object)
graph Cost 79.0
Going to add 4 increment as we currently judge the cost to be 16
In comp ID jdk.graal.compiler.graph.NodeIdAccessor.getNodeId(Node)
graph Cost 13.0
Going to add 0 increment as we currently judge the cost to be 16
In comp ID deltablue.Planner.lambda$addConstraintsConsumingTo$2(AbstractConstraint, Vector, AbstractConstraint)
graph Cost 59.0
Going to add 3 increment as we currently judge the cost to be 16
In comp ID jdk.graal.compiler.graph.Node.id()
graph Cost 8.0
Going to add 0 increment as we currently judge the cost to be 16
In comp ID jdk.graal.compiler.graph.NodeClass.isCanonicalizable()
graph Cost 9.0
Going to add 0 increment as we currently judge the cost to be 16
In comp ID jdk.graal.compiler.graph.Graph.getEdgeModificationCount()
graph Cost 8.0
Going to add 0 increment as we currently judge the cost to be 16
In comp ID jdk.graal.compiler.lir.alloc.lsra.LinearScanWalker.maxRegisterNumber()
graph Cost 8.0
Going to add 0 increment as we currently judge the cost to be 16
In comp ID deltablue.Variable.getConstraints()
graph Cost 10.0
Going to add 0 increment as we currently judge the cost to be 16
In comp ID java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object, Object)
graph Cost 19.0
Going to add 1 increment as we currently judge the cost to be 16
In comp ID jdk.vm.ci.hotspot.HotSpotJVMCIRuntime.getCompilerToVM()
graph Cost 10.0
Going to add 0 increment as we currently judge the cost to be 16
In comp ID som.Vector.removeFirst()
graph Cost 33.0
Going to add 2 increment as we currently judge the cost to be 16
In comp ID jdk.graal.compiler.phases.schedule.SchedulePhase$Instance$NodeEntry.getNext()
graph Cost 10.0
Going to add 0 increment as we currently judge the cost to be 16
In comp ID java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object, Object)
graph Cost 662.0
Going to add 41 increment as we currently judge the cost to be 16
In comp ID jdk.graal.compiler.nodes.ProfileData$BranchProbabilityData.getDesignatedSuccessorProbability()
graph Cost 8.0
Going to add 0 increment as we currently judge the cost to be 16
In comp ID deltablue.Strength.weaker(Strength)
graph Cost 15.0
Going to add 0 increment as we currently judge the cost to be 16
In comp ID deltablue.ScaleConstraint.execute()
graph Cost 49.0
Going to add 3 increment as we currently judge the cost to be 16
In comp ID java.lang.ref.Reference.reachabilityFence(Object)
graph Cost 6.0
Going to add 0 increment as we currently judge the cost to be 16
In comp ID deltablue.Variable.setWalkStrength(Strength)
graph Cost 29.0
Going to add 1 increment as we currently judge the cost to be 16
In comp ID deltablue.Variable.setStay(boolean)
graph Cost 10.0
Going to add 0 increment as we currently judge the cost to be 16
In comp ID org.graalvm.collections.EconomicMapImpl.compareKeys(Object, Object)
graph Cost 13.0
Going to add 0 increment as we currently judge the cost to be 16
In comp ID java.lang.String.coder()
graph Cost 9.0
Going to add 0 increment as we currently judge the cost to be 16
In comp ID deltablue.Planner$$Lambda/0x00007fbde400e2d8.<init>(AbstractConstraint, Vector)
graph Cost 54.0
Going to add 3 increment as we currently judge the cost to be 16
In comp ID java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object)
graph Cost 19.0
Going to add 1 increment as we currently judge the cost to be 16
In comp ID jdk.graal.compiler.java.BciBlockMapping$BciBlock.getId()
graph Cost 8.0
Going to add 0 increment as we currently judge the cost to be 16
In comp ID jdk.graal.compiler.java.BciBlockMapping$BciBlock.getEndBci()
graph Cost 8.0
Going to add 0 increment as we currently judge the cost to be 16
In comp ID deltablue.Planner.addConstraintsConsumingTo(Variable, Vector)
graph Cost 47.0
Going to add 2 increment as we currently judge the cost to be 16
In comp ID java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int)
graph Cost 662.0
Going to add 41 increment as we currently judge the cost to be 16
In comp ID som.Vector.<init>(int)
graph Cost 644.0
Going to add 40 increment as we currently judge the cost to be 16
In comp ID jdk.graal.compiler.core.common.type.PrimitiveStamp.getBits()
graph Cost 8.0
Going to add 0 increment as we currently judge the cost to be 16
In comp ID jdk.graal.compiler.lir.gen.LIRGenerationResult.getLIR()
graph Cost 10.0
Going to add 0 increment as we currently judge the cost to be 16
In comp ID jdk.graal.compiler.lir.alloc.lsra.LinearScan.getDebug()
graph Cost 10.0
Going to add 0 increment as we currently judge the cost to be 16
In comp ID jdk.graal.compiler.lir.LIRInstruction.getPosition()
graph Cost 10.0
Going to add 0 increment as we currently judge the cost to be 16
In comp ID jdk.vm.ci.code.RegisterAttributes.isAllocatable()
graph Cost 9.0
Going to add 0 increment as we currently judge the cost to be 16
In comp ID jdk.graal.compiler.nodes.StructuredGraph.getGraphState()
graph Cost 10.0
Going to add 0 increment as we currently judge the cost to be 16
In comp ID sun.misc.Unsafe.getObject(Object, long)
graph Cost 10.0
Going to add 0 increment as we currently judge the cost to be 16
In comp ID deltablue.AbstractConstraint$$Lambda/0x00007fbde400e0c0.apply(Object)
graph Cost 21.0
Going to add 1 increment as we currently judge the cost to be 16
In comp ID jdk.graal.compiler.graph.NodeClass.isSimplifiable()
graph Cost 9.0
Going to add 0 increment as we currently judge the cost to be 16
In comp ID jdk.graal.compiler.nodes.cfg.HIRBlock.getLoop()
graph Cost 10.0
Going to add 0 increment as we currently judge the cost to be 16
In comp ID java.lang.ClassValue$ClassValueMap.getCache()
graph Cost 10.0
Going to add 0 increment as we currently judge the cost to be 16
In comp ID jdk.graal.compiler.nodes.IfNode.trueSuccessor()
graph Cost 10.0
Going to add 0 increment as we currently judge the cost to be 16
In comp ID deltablue.AbstractConstraint.lambda$satisfy$1(int, Variable)
graph Cost 11.0
Going to add 0 increment as we currently judge the cost to be 16
In comp ID jdk.graal.compiler.nodes.ValueNode.inferStamp()
graph Cost 6.0
Going to add 0 increment as we currently judge the cost to be 16
In comp ID deltablue.Strength.weakest(Strength)
graph Cost 15.0
Going to add 0 increment as we currently judge the cost to be 16
In comp ID jdk.graal.compiler.core.common.Fields.getCount()
graph Cost 15.0
Going to add 0 increment as we currently judge the cost to be 16
In comp ID jdk.graal.compiler.nodes.ValuePhiNode.values()
graph Cost 10.0
Going to add 0 increment as we currently judge the cost to be 16
In comp ID jdk.graal.compiler.nodes.calc.BinaryNode.getX()
graph Cost 10.0
Going to add 0 increment as we currently judge the cost to be 16
In comp ID jdk.graal.compiler.graph.NodeClass$RawEdgesIterator.forward()
graph Cost 31.0
Going to add 1 increment as we currently judge the cost to be 16
In comp ID jdk.graal.compiler.core.common.type.Stamp.asConstant()
graph Cost 6.0
Going to add 0 increment as we currently judge the cost to be 16
In comp ID jdk.graal.compiler.graph.Graph.eventCounterOverflows(int)
graph Cost 13.0
Going to add 0 increment as we currently judge the cost to be 16
In comp ID jdk.graal.compiler.core.common.util.CompilationAlarm.checkProgress(Graph)
graph Cost 15.0
Going to add 0 increment as we currently judge the cost to be 16
In comp ID jdk.graal.compiler.nodes.IfNode.falseSuccessor()
graph Cost 10.0
Going to add 0 increment as we currently judge the cost to be 16
In comp ID deltablue.Variable.setDeterminedBy(AbstractConstraint)
graph Cost 29.0
Going to add 1 increment as we currently judge the cost to be 16
In comp ID deltablue.Strength.stronger(Strength)
graph Cost 15.0
Going to add 0 increment as we currently judge the cost to be 16
In comp ID deltablue.AbstractConstraint$$Lambda/0x00007fbde400e0c0.<init>(int)
graph Cost 10.0
Going to add 0 increment as we currently judge the cost to be 16
In comp ID java.lang.Integer.intValue()
graph Cost 8.0
Going to add 0 increment as we currently judge the cost to be 16
In comp ID jdk.graal.compiler.core.common.type.AbstractPointerStamp.alwaysNull()
graph Cost 9.0
Going to add 0 increment as we currently judge the cost to be 16
In comp ID deltablue.Variable.addConstraint(AbstractConstraint)
graph Cost 75.0
Going to add 4 increment as we currently judge the cost to be 16
In comp ID java.lang.String.length()
graph Cost 19.0
Going to add 1 increment as we currently judge the cost to be 16
In comp ID java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object)
graph Cost 662.0
Going to add 41 increment as we currently judge the cost to be 16
In comp ID jdk.graal.compiler.graph.NodeMap.get(Node)
graph Cost 29.0
Going to add 1 increment as we currently judge the cost to be 16
In comp ID deltablue.BinaryConstraint.chooseMethod(int)
graph Cost 75.0
Going to add 4 increment as we currently judge the cost to be 16
In comp ID deltablue.AbstractConstraint.satisfy(int, Planner)
graph Cost 447.0
Going to add 27 increment as we currently judge the cost to be 16
In comp ID java.lang.Enum.ordinal()
graph Cost 8.0
Going to add 0 increment as we currently judge the cost to be 16
In comp ID jdk.graal.compiler.phases.schedule.SchedulePhase$Instance$MicroBlock.getFirstNode()
graph Cost 10.0
Going to add 0 increment as we currently judge the cost to be 16
In comp ID jdk.graal.compiler.graph.NodeClass.getInputEdges()
graph Cost 10.0
Going to add 0 increment as we currently judge the cost to be 16
In comp ID jdk.graal.compiler.nodes.IfNode.condition()
graph Cost 10.0
Going to add 0 increment as we currently judge the cost to be 16
In comp ID jdk.graal.compiler.core.amd64.AMD64AddressNode.getBase()
graph Cost 10.0
Going to add 0 increment as we currently judge the cost to be 16
In comp ID java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object)
graph Cost 19.0
Going to add 1 increment as we currently judge the cost to be 16
In comp ID jdk.vm.ci.hotspot.HotSpotJVMCIRuntime.runtime()
graph Cost 13.0
Going to add 0 increment as we currently judge the cost to be 16
In comp ID jdk.graal.compiler.lir.LIRInstruction.setId(int)
graph Cost 8.0
Going to add 0 increment as we currently judge the cost to be 16
In comp ID jdk.graal.compiler.lir.alloc.lsra.LinearScan.getLIR()
graph Cost 10.0
Going to add 0 increment as we currently judge the cost to be 16
In comp ID jdk.graal.compiler.lir.alloc.lsra.Interval.first()
graph Cost 10.0
Going to add 0 increment as we currently judge the cost to be 16
In comp ID jdk.graal.compiler.lir.LIR.getOptions()
graph Cost 10.0
Going to add 0 increment as we currently judge the cost to be 16
In comp ID jdk.graal.compiler.graph.Edges.getNodeUnsafe(Node, long)
graph Cost 22.0
Going to add 1 increment as we currently judge the cost to be 16
In comp ID jdk.graal.compiler.core.common.cfg.BasicBlock.hashCode()
graph Cost 8.0
Going to add 0 increment as we currently judge the cost to be 16
In comp ID java.lang.AbstractStringBuilder.length()
graph Cost 8.0
Going to add 0 increment as we currently judge the cost to be 16
In comp ID jdk.graal.compiler.asm.amd64.AMD64Address.getBase()
graph Cost 10.0
Going to add 0 increment as we currently judge the cost to be 16
In comp ID deltablue.Planner.incrementalAdd(AbstractConstraint)
graph Cost 23.0
Going to add 1 increment as we currently judge the cost to be 16
In comp ID jdk.vm.ci.code.BytecodePosition.getCaller()
graph Cost 10.0
Going to add 0 increment as we currently judge the cost to be 16
In comp ID som.Vector.with(Object)
graph Cost 74.0
Going to add 4 increment as we currently judge the cost to be 16
In comp ID jdk.graal.compiler.graph.Edges.type()
graph Cost 10.0
Going to add 0 increment as we currently judge the cost to be 16
In comp ID jdk.graal.compiler.debug.ScopeImpl.isTimeEnabled()
graph Cost 9.0
Going to add 0 increment as we currently judge the cost to be 16
In comp ID deltablue.Planner$$Lambda/0x00007fbde412de10.apply(Object)
graph Cost 92.0
Going to add 5 increment as we currently judge the cost to be 16
In comp ID jdk.vm.ci.hotspot.HotSpotJVMCIRuntime.getConfig()
graph Cost 10.0
Going to add 0 increment as we currently judge the cost to be 16
In comp ID jdk.vm.ci.hotspot.HotSpotVMConfig.config()
graph Cost 17.0
Going to add 1 increment as we currently judge the cost to be 16
In comp ID deltablue.Planner.lambda$removePropagateFrom$4(Vector, AbstractConstraint)
graph Cost 84.0
Going to add 5 increment as we currently judge the cost to be 16
In comp ID jdk.graal.compiler.graph.NodeClass.iterableId()
graph Cost 8.0
Going to add 0 increment as we currently judge the cost to be 16
In comp ID org.graalvm.collections.EconomicMapImpl.hasHashArray()
graph Cost 11.0
Going to add 0 increment as we currently judge the cost to be 16
In comp ID deltablue.ScaleConstraint.recalculate()
graph Cost 105.0
Going to add 6 increment as we currently judge the cost to be 16
In comp ID deltablue.Planner$$Lambda/0x00007fbde412e250.apply(Object)
graph Cost 27.0
Going to add 1 increment as we currently judge the cost to be 16
In comp ID jdk.graal.compiler.graph.NodeSourcePosition.hashCode()
graph Cost 8.0
Going to add 0 increment as we currently judge the cost to be 16
In comp ID jdk.graal.compiler.graph.Node.getNodeClass()
graph Cost 10.0
Going to add 0 increment as we currently judge the cost to be 16
In comp ID java.util.Collections$EmptyList.isEmpty()
graph Cost 6.0
Going to add 0 increment as we currently judge the cost to be 16
In comp ID jdk.vm.ci.hotspot.HotSpotJavaType.getName()
graph Cost 10.0
Going to add 0 increment as we currently judge the cost to be 16
In comp ID jdk.graal.compiler.graph.Node.isDeleted()
graph Cost 10.0
Going to add 0 increment as we currently judge the cost to be 16
In comp ID java.lang.StringLatin1.lastIndexOf(byte[], int, int)
graph Cost 164.0
Going to add 10 increment as we currently judge the cost to be 16
In comp ID jdk.graal.compiler.nodes.PhiNode.merge()
graph Cost 10.0
Going to add 0 increment as we currently judge the cost to be 16
In comp ID jdk.vm.ci.code.BytecodePosition.getMethod()
graph Cost 10.0
Going to add 0 increment as we currently judge the cost to be 16
In comp ID jdk.graal.compiler.graph.NodeClass$RawEdgesIterator.hasNext()
graph Cost 62.0
Going to add 3 increment as we currently judge the cost to be 16
In comp ID jdk.vm.ci.code.BytecodePosition.getBCI()
graph Cost 8.0
Going to add 0 increment as we currently judge the cost to be 16
In comp ID deltablue.Planner.lambda$constraintsConsuming$3(AbstractConstraint, ForEachInterface, AbstractConstraint)
graph Cost 199.0
Going to add 12 increment as we currently judge the cost to be 16
In comp ID jdk.graal.compiler.nodes.cfg.ControlFlowGraph.getNodeToBlock()
graph Cost 10.0
Going to add 0 increment as we currently judge the cost to be 16
In comp ID jdk.graal.compiler.graph.NodeClass.cycles()
graph Cost 10.0
Going to add 0 increment as we currently judge the cost to be 16
In comp ID java.lang.StringLatin1.lastIndexOf(byte[], int, int)
graph Cost 148.0
Going to add 9 increment as we currently judge the cost to be 16
In comp ID som.Vector$$Lambda/0x00007fbde412dbf0.apply(Object)
graph Cost 76.0
Going to add 4 increment as we currently judge the cost to be 16
In comp ID java.util.ArrayList$Itr.hasNext()
graph Cost 19.0
Going to add 1 increment as we currently judge the cost to be 16
In comp ID deltablue.BinaryConstraint.recalculate()
graph Cost 82.0
Going to add 5 increment as we currently judge the cost to be 16
In comp ID org.graalvm.collections.EconomicMapImpl.checkKeyNonNull(Object)
graph Cost 9.0
Going to add 0 increment as we currently judge the cost to be 16
In comp ID jdk.graal.compiler.nodes.UnaryOpLogicNode.getValue()
graph Cost 10.0
Going to add 0 increment as we currently judge the cost to be 16
In comp ID jdk.graal.compiler.nodes.cfg.HIRBlock.setFrequencySource(ProfileData$ProfileSource)
graph Cost 29.0
Going to add 1 increment as we currently judge the cost to be 16
In comp ID jdk.graal.compiler.virtual.phases.ea.EffectsBlockState.isDead()
graph Cost 9.0
Going to add 0 increment as we currently judge the cost to be 16
In comp ID jdk.graal.compiler.graph.NodeClass.isCommutative()
graph Cost 9.0
Going to add 0 increment as we currently judge the cost to be 16
In comp ID jdk.graal.compiler.core.common.cfg.BasicBlock.setDominatorNumber(int)
graph Cost 8.0
Going to add 0 increment as we currently judge the cost to be 16
In comp ID jdk.graal.compiler.core.common.cfg.Loop.getDepth()
graph Cost 8.0
Going to add 0 increment as we currently judge the cost to be 16
In comp ID jdk.graal.compiler.core.common.cfg.BasicBlock.setMaxChildDomNumber(int)
graph Cost 8.0
Going to add 0 increment as we currently judge the cost to be 16
In comp ID jdk.graal.compiler.nodes.ProfileData.getProfileSource()
graph Cost 10.0
Going to add 0 increment as we currently judge the cost to be 16
In comp ID jdk.graal.compiler.graph.NodeStack.size()
graph Cost 8.0
Going to add 0 increment as we currently judge the cost to be 16
In comp ID jdk.graal.compiler.nodes.IfNode.getProfileData()
graph Cost 10.0
Going to add 0 increment as we currently judge the cost to be 16
In comp ID jdk.graal.compiler.core.common.cfg.BasicBlock.getId()
graph Cost 8.0
Going to add 0 increment as we currently judge the cost to be 16
In comp ID org.graalvm.collections.EconomicMapImpl.find(Object)
graph Cost 176.0
Going to add 11 increment as we currently judge the cost to be 16
In comp ID jdk.graal.compiler.graph.Graph.isNodeModificationCountsEnabled()
graph Cost 6.0
Going to add 0 increment as we currently judge the cost to be 16
In comp ID jdk.graal.compiler.phases.common.ConditionalEliminationUtil$GuardedCondition.isNegated()
graph Cost 9.0
Going to add 0 increment as we currently judge the cost to be 16
In comp ID java.lang.StringLatin1.indexOfChar(byte[], int, int, int)
graph Cost 232.0
Going to add 14 increment as we currently judge the cost to be 16
In comp ID jdk.graal.compiler.nodes.cfg.HIRBlock.getBeginNode()
graph Cost 10.0
Going to add 0 increment as we currently judge the cost to be 16
In comp ID jdk.graal.compiler.nodes.FieldLocationIdentity.isImmutable()
graph Cost 9.0
Going to add 0 increment as we currently judge the cost to be 16
In comp ID jdk.graal.compiler.graph.NodeBitMap.isMarked(int)
graph Cost 27.0
Going to add 1 increment as we currently judge the cost to be 16
In comp ID jdk.graal.compiler.graph.NodeSourcePosition.getSourceLanguage()
graph Cost 10.0
Going to add 0 increment as we currently judge the cost to be 16
In comp ID deltablue.Strength$Sym.customHash()
graph Cost 8.0
Going to add 0 increment as we currently judge the cost to be 16
In comp ID deltablue.Planner.addPropagate(AbstractConstraint, int)
graph Cost 616.0
Going to add 38 increment as we currently judge the cost to be 16
In comp ID som.Dictionary.hash(Dictionary$CustomHash)
graph Cost 18.0
Going to add 1 increment as we currently judge the cost to be 16
In comp ID som.Dictionary.getBucketIdx(int)
graph Cost 17.0
Going to add 1 increment as we currently judge the cost to be 16
In comp ID som.Dictionary.at(Dictionary$CustomHash)
graph Cost 59.0
Going to add 3 increment as we currently judge the cost to be 16
In comp ID jdk.graal.compiler.lir.LIRIntrospection.visitEach(LIRInstruction, LIRIntrospection$Values, LIRInstruction$OperandMode, InstructionValueConsumer)
graph Cost 89.0
Going to add 5 increment as we currently judge the cost to be 16
In comp ID som.Dictionary.getBucket(int)
graph Cost 26.0
Going to add 1 increment as we currently judge the cost to be 16
In comp ID som.IdentityDictionary$IdEntry.match(int, Object)
graph Cost 16.0
Going to add 1 increment as we currently judge the cost to be 16
In comp ID jdk.graal.compiler.lir.stackslotalloc.StackInterval.getOperand()
graph Cost 10.0
Going to add 0 increment as we currently judge the cost to be 16
In comp ID jdk.graal.compiler.core.common.LIRKind.getDerivedReferenceBase()
graph Cost 10.0
Going to add 0 increment as we currently judge the cost to be 16
In comp ID jdk.graal.compiler.lir.LIRInstruction.needsClearUpperVectorRegisters()
graph Cost 6.0
Going to add 0 increment as we currently judge the cost to be 16
In comp ID deltablue.Strength.absoluteWeakest()
graph Cost 6.0
Going to add 0 increment as we currently judge the cost to be 16
In comp ID jdk.graal.compiler.core.common.util.IntList.size()
graph Cost 8.0
Going to add 0 increment as we currently judge the cost to be 16
In comp ID java.util.Objects.checkIndex(int, int)
graph Cost 10.0
Going to add 0 increment as we currently judge the cost to be 16
In comp ID jdk.graal.compiler.nodes.cfg.HIRBlock$ModifiableBlock.getLinearScanNumber()
graph Cost 8.0
Going to add 0 increment as we currently judge the cost to be 16
In comp ID deltablue.Strength.of(Strength$Sym)
graph Cost 62.0
Going to add 3 increment as we currently judge the cost to be 16
In comp ID jdk.graal.compiler.lir.LIRInstructionClass.isMoveOp()
graph Cost 9.0
Going to add 0 increment as we currently judge the cost to be 16
In comp ID jdk.graal.compiler.lir.amd64.AMD64Move$MoveToRegOp.getResult()
graph Cost 10.0
Going to add 0 increment as we currently judge the cost to be 16
In comp ID java.util.ArrayList.elementData(int)
graph Cost 24.0
Going to add 1 increment as we currently judge the cost to be 16
In comp ID jdk.vm.ci.amd64.AMD64Kind.getVectorLength()
graph Cost 8.0
Going to add 0 increment as we currently judge the cost to be 16
In comp ID jdk.graal.compiler.asm.amd64.AMD64Address.getIndex()
graph Cost 10.0
Going to add 0 increment as we currently judge the cost to be 16
In comp ID jdk.vm.ci.hotspot.HotSpotCodeCacheProvider.getTarget()
graph Cost 10.0
Going to add 0 increment as we currently judge the cost to be 16
In comp ID jdk.graal.compiler.nodes.FixedWithNextNode.next()
graph Cost 10.0
Going to add 0 increment as we currently judge the cost to be 16
In comp ID jdk.graal.compiler.graph.NodeClass.iterableIds()
graph Cost 10.0
Going to add 0 increment as we currently judge the cost to be 16
In comp ID jdk.graal.compiler.debug.DebugConfigImpl.output()
graph Cost 10.0
Going to add 0 increment as we currently judge the cost to be 16
In comp ID jdk.graal.compiler.graph.Graph.nodeIdCount()
graph Cost 8.0
Going to add 0 increment as we currently judge the cost to be 16
In comp ID jdk.graal.compiler.debug.ScopeImpl.isLogEnabled(int)
graph Cost 10.0
Going to add 0 increment as we currently judge the cost to be 16
In comp ID deltablue.AbstractConstraint$$Lambda/0x00007fbde412c690.<init>(int)
graph Cost 10.0
Going to add 0 increment as we currently judge the cost to be 16
In comp ID deltablue.AbstractConstraint.inputsKnown(int)
graph Cost 91.0
Going to add 5 increment as we currently judge the cost to be 16
In comp ID deltablue.AbstractConstraint.<init>(Strength$Sym)
graph Cost 87.0
Going to add 5 increment as we currently judge the cost to be 16
In comp ID deltablue.Variable.<init>()
graph Cost 129.0
Going to add 8 increment as we currently judge the cost to be 16
In comp ID java.util.ArrayList$Itr.checkForComodification()
graph Cost 19.0
Going to add 1 increment as we currently judge the cost to be 16
In comp ID java.util.ArrayList$Itr.next()
graph Cost 48.0
Going to add 3 increment as we currently judge the cost to be 16
In comp ID deltablue.Planner$$Lambda/0x00007fbde412de10.<init>(Vector)
graph Cost 31.0
Going to add 1 increment as we currently judge the cost to be 16
In comp ID deltablue.Planner$$Lambda/0x00007fbde412e030.<init>(Vector)
graph Cost 31.0
Going to add 1 increment as we currently judge the cost to be 16
In comp ID java.util.ArrayList.get(int)
graph Cost 30.0
Going to add 1 increment as we currently judge the cost to be 16
In comp ID jdk.graal.compiler.nodes.cfg.ControlFlowGraph.getBlocks()
graph Cost 10.0
Going to add 0 increment as we currently judge the cost to be 16
In comp ID deltablue.Planner.constraintsConsuming(Variable, ForEachInterface)
graph Cost 47.0
Going to add 2 increment as we currently judge the cost to be 16
In comp ID deltablue.Planner$$Lambda/0x00007fbde412e250.<init>(AbstractConstraint, ForEachInterface)
graph Cost 54.0
Going to add 3 increment as we currently judge the cost to be 16
In comp ID jdk.vm.ci.meta.PrimitiveConstant.getJavaKind()
graph Cost 10.0
Going to add 0 increment as we currently judge the cost to be 16
In comp ID jdk.graal.compiler.graph.NodeBitMap.isMarked(Node)
graph Cost 34.0
Going to add 2 increment as we currently judge the cost to be 16
In comp ID jdk.graal.compiler.phases.common.ConditionalEliminationUtil$GuardedCondition.getCondition()
graph Cost 10.0
Going to add 0 increment as we currently judge the cost to be 16
In comp ID jdk.graal.compiler.nodes.cfg.ControlFlowGraph.getBlocks()
graph Cost 10.0
Going to add 0 increment as we currently judge the cost to be 16
In comp ID deltablue.AbstractConstraint$$Lambda/0x00007fbde412c690.test(Object)
graph Cost 26.0
Going to add 1 increment as we currently judge the cost to be 16
In comp ID deltablue.BinaryConstraint.inputsHasOne(TestInterface)
graph Cost 34.0
Going to add 2 increment as we currently judge the cost to be 16
In comp ID org.graalvm.collections.EconomicMapImpl.getRawValue(int)
graph Cost 26.0
Going to add 1 increment as we currently judge the cost to be 16
In comp ID jdk.graal.compiler.nodes.cfg.HIRBlock.getEndNode()
graph Cost 10.0
Going to add 0 increment as we currently judge the cost to be 16
In comp ID jdk.graal.compiler.core.common.type.ArithmeticStamp.getOps()
graph Cost 10.0
Going to add 0 increment as we currently judge the cost to be 16
In comp ID jdk.graal.compiler.nodes.LoopBeginNode.getLoopEndCount()
graph Cost 8.0
Going to add 0 increment as we currently judge the cost to be 16
In comp ID deltablue.AbstractConstraint.lambda$inputsKnown$0(int, Variable)
graph Cost 15.0
Going to add 0 increment as we currently judge the cost to be 16
In comp ID java.util.ArrayList.add(Object)
graph Cost 72.0
Going to add 4 increment as we currently judge the cost to be 16
In comp ID java.util.ArrayList.add(Object, Object[], int)
graph Cost 61.0
Going to add 3 increment as we currently judge the cost to be 16
In comp ID jdk.graal.compiler.graph.Node.graph()
graph Cost 10.0
Going to add 0 increment as we currently judge the cost to be 16
In comp ID deltablue.AbstractConstraint.addConstraint(Planner)
graph Cost 301.0
Going to add 18 increment as we currently judge the cost to be 16
In comp ID java.util.ArrayDeque.inc(int, int)
graph Cost 9.0
Going to add 0 increment as we currently judge the cost to be 16
In comp ID java.util.RegularEnumSet.contains(Object)
graph Cost 35.0
Going to add 2 increment as we currently judge the cost to be 16
In comp ID jdk.graal.compiler.core.common.type.IntegerStamp.lowerBound()
graph Cost 8.0
Going to add 0 increment as we currently judge the cost to be 16
In comp ID jdk.graal.compiler.graph.NodeMap.set(Node, Object)
graph Cost 59.0
Going to add 3 increment as we currently judge the cost to be 16
In comp ID jdk.graal.compiler.graph.NodeClass$RawEdgesIterator.next()
graph Cost 21.0
Going to add 1 increment as we currently judge the cost to be 16
In comp ID jdk.graal.compiler.phases.common.CanonicalizerPhase$Tool.allUsagesAvailable()
graph Cost 6.0
Going to add 0 increment as we currently judge the cost to be 16
In comp ID jdk.graal.compiler.core.amd64.AMD64AddressNode.getIndex()
graph Cost 10.0
Going to add 0 increment as we currently judge the cost to be 16
In comp ID jdk.graal.compiler.core.amd64.AMD64AddressNode.getScale()
graph Cost 10.0
Going to add 0 increment as we currently judge the cost to be 16
In comp ID jdk.graal.compiler.nodes.calc.BinaryNode.getY()
graph Cost 10.0
Going to add 0 increment as we currently judge the cost to be 16
In comp ID jdk.graal.compiler.graph.NodeClass$RawEdgesIterator.next()
graph Cost 21.0
Going to add 1 increment as we currently judge the cost to be 16
In comp ID jdk.graal.compiler.nodes.memory.FixedAccessNode.getUsedAsNullCheck()
graph Cost 9.0
Going to add 0 increment as we currently judge the cost to be 16
In comp ID jdk.vm.ci.code.Register.getRegisterCategory()
graph Cost 10.0
Going to add 0 increment as we currently judge the cost to be 16
In comp ID jdk.graal.compiler.nodes.ValueNode.graph()
graph Cost 18.0
Going to add 1 increment as we currently judge the cost to be 16
In comp ID jdk.graal.compiler.nodes.StructuredGraph$ScheduleResult.getBlockToNodesMap()
graph Cost 10.0
Going to add 0 increment as we currently judge the cost to be 16
In comp ID jdk.graal.compiler.lir.gen.LIRGenerator.getCurrentBlock()
graph Cost 10.0
Going to add 0 increment as we currently judge the cost to be 16
In comp ID org.graalvm.collections.EconomicMapImpl.get(Object)
graph Cost 17.0
Going to add 1 increment as we currently judge the cost to be 16
In comp ID jdk.graal.compiler.lir.gen.LIRGenerator.setSourcePosition(NodeSourcePosition)
graph Cost 29.0
Going to add 1 increment as we currently judge the cost to be 16
In comp ID jdk.graal.compiler.lir.gen.LIRGenerator.getResult()
graph Cost 10.0
Going to add 0 increment as we currently judge the cost to be 16
In comp ID java.util.ArrayList.size()
graph Cost 8.0
Going to add 0 increment as we currently judge the cost to be 16
In comp ID java.util.ArrayDeque.elementAt(Object[], int)
graph Cost 20.0
Going to add 1 increment as we currently judge the cost to be 16
In comp ID jdk.graal.compiler.debug.ScopeImpl.isCountEnabled()
graph Cost 9.0
Going to add 0 increment as we currently judge the cost to be 16
In comp ID deltablue.BinaryConstraint.<init>(Variable, Variable, Strength$Sym, Planner)
graph Cost 142.0
Going to add 8 increment as we currently judge the cost to be 16
In comp ID jdk.graal.compiler.debug.CounterKeyImpl.add(DebugContext, long)
graph Cost 40.0
Going to add 2 increment as we currently judge the cost to be 16
In comp ID jdk.graal.compiler.debug.DebugContext.isCounterEnabledSlow(AbstractKey)
graph Cost 33.0
Going to add 2 increment as we currently judge the cost to be 16
In comp ID jdk.graal.compiler.lir.amd64.AMD64Move$MoveToRegOp.getInput()
graph Cost 10.0
Going to add 0 increment as we currently judge the cost to be 16
In comp ID jdk.graal.compiler.nodes.cfg.HIRBlock$ModifiableBlock.isAligned()
graph Cost 9.0
Going to add 0 increment as we currently judge the cost to be 16
In comp ID java.util.ArrayDeque.isEmpty()
graph Cost 12.0
Going to add 0 increment as we currently judge the cost to be 16
In comp ID java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread)
graph Cost 29.0
Going to add 1 increment as we currently judge the cost to be 16
In comp ID jdk.graal.compiler.debug.DebugContext.isLogEnabled(int)
graph Cost 17.0
Going to add 1 increment as we currently judge the cost to be 16
In comp ID jdk.graal.compiler.debug.DebugContext.isCounterEnabled(CounterKeyImpl)
graph Cost 37.0
Going to add 2 increment as we currently judge the cost to be 16
In comp ID jdk.graal.compiler.graph.TypedGraphNodeIterator.current()
graph Cost 26.0
Going to add 1 increment as we currently judge the cost to be 16
In comp ID deltablue.UnaryConstraint.getOutput()
graph Cost 10.0
Going to add 0 increment as we currently judge the cost to be 16
In comp ID jdk.graal.compiler.replacements.classfile.ClassfileBytecode.getMethod()
graph Cost 10.0
Going to add 0 increment as we currently judge the cost to be 16
In comp ID som.Vector.lambda$remove$0(Object, boolean[], Object[], int[], Object)
graph Cost 64.0
Going to add 4 increment as we currently judge the cost to be 16
In comp ID deltablue.BinaryConstraint.inputsDo(ForEachInterface)
graph Cost 28.0
Going to add 1 increment as we currently judge the cost to be 16
In comp ID deltablue.Variable.value(int)
graph Cost 35.0
Going to add 2 increment as we currently judge the cost to be 16
In comp ID som.Vector.at(int)
graph Cost 24.0
Going to add 1 increment as we currently judge the cost to be 16
In comp ID jdk.graal.compiler.graph.Graph.getNodesDeletedSinceLastCompression()
graph Cost 8.0
Going to add 0 increment as we currently judge the cost to be 16
In comp ID jdk.graal.compiler.nodes.ValueNode.graph()
graph Cost 18.0
Going to add 1 increment as we currently judge the cost to be 16
In comp ID jdk.graal.compiler.debug.CounterKeyImpl.increment(DebugContext)
graph Cost 40.0
Going to add 2 increment as we currently judge the cost to be 16
In comp ID jdk.graal.compiler.lir.LIRValueUtil.isCast(Value)
graph Cost 14.0
Going to add 0 increment as we currently judge the cost to be 16
In comp ID jdk.graal.compiler.graph.NodeBitMap.mark(Node)
graph Cost 34.0
Going to add 2 increment as we currently judge the cost to be 16
In comp ID jdk.graal.compiler.graph.NodeUsageIterator.hasNext()
graph Cost 11.0
Going to add 0 increment as we currently judge the cost to be 16
In comp ID jdk.graal.compiler.core.common.Fields.getObject(Object, int)
graph Cost 26.0
Going to add 1 increment as we currently judge the cost to be 16
In comp ID jdk.graal.compiler.graph.NodeUsageIterator.advance()
graph Cost 56.0
Going to add 3 increment as we currently judge the cost to be 16
In comp ID org.graalvm.collections.EconomicMapImpl.getHashTableSize()
graph Cost 26.0
Going to add 1 increment as we currently judge the cost to be 16
In comp ID jdk.graal.compiler.lir.LIRValueUtil.stripCast(Value)
graph Cost 14.0
Going to add 0 increment as we currently judge the cost to be 16
In comp ID jdk.graal.compiler.nodes.ConstantNode.getValue()
graph Cost 10.0
Going to add 0 increment as we currently judge the cost to be 16
In comp ID jdk.graal.compiler.graph.NodeClass$RawEdgesIterator.<init>(Node, long)
graph Cost 33.0
Going to add 2 increment as we currently judge the cost to be 16
In comp ID jdk.graal.compiler.nodes.NodeView$Default.stamp(ValueNode)
graph Cost 13.0
Going to add 0 increment as we currently judge the cost to be 16
In comp ID jdk.graal.compiler.nodes.loop.LoopsData.getCFG()
graph Cost 10.0
Going to add 0 increment as we currently judge the cost to be 16
In comp ID jdk.graal.compiler.nodes.ValueNode.stamp(NodeView)
graph Cost 82.0
Going to add 5 increment as we currently judge the cost to be 16
In comp ID jdk.internal.misc.Unsafe.getLong(long)
graph Cost 8.0
Going to add 0 increment as we currently judge the cost to be 16
In comp ID jdk.graal.compiler.debug.ScopeImpl.isMemUseTrackingEnabled()
graph Cost 9.0
Going to add 0 increment as we currently judge the cost to be 16
In comp ID java.lang.Long.longValue()
graph Cost 8.0
Going to add 0 increment as we currently judge the cost to be 16
In comp ID jdk.graal.compiler.core.common.cfg.BlockMap.get(BasicBlock)
graph Cost 29.0
Going to add 1 increment as we currently judge the cost to be 16
In comp ID jdk.graal.compiler.nodes.StructuredGraph.method()
graph Cost 10.0
Going to add 0 increment as we currently judge the cost to be 16
In comp ID jdk.graal.compiler.graph.NodeClass.getLeafId()
graph Cost 8.0
Going to add 0 increment as we currently judge the cost to be 16
In comp ID jdk.graal.compiler.options.OptionKey.getValue(OptionValues)
graph Cost 32.0
Going to add 2 increment as we currently judge the cost to be 16
In comp ID jdk.graal.compiler.options.OptionValues.get(UnmodifiableEconomicMap, OptionKey)
graph Cost 28.0
Going to add 1 increment as we currently judge the cost to be 16
In comp ID jdk.graal.compiler.options.OptionValues.get(OptionKey)
graph Cost 32.0
Going to add 2 increment as we currently judge the cost to be 16
In comp ID jdk.graal.compiler.nodes.AbstractBeginNode$BlockNodeIterator.hasNext()
graph Cost 11.0
Going to add 0 increment as we currently judge the cost to be 16
In comp ID jdk.graal.compiler.graph.iterators.NodePredicates$PositiveTypePredicate.apply(Node)
graph Cost 34.0
Going to add 2 increment as we currently judge the cost to be 16
In comp ID jdk.vm.ci.hotspot.HotSpotResolvedObjectTypeImpl.getKlassPointer()
graph Cost 10.0
Going to add 0 increment as we currently judge the cost to be 16
In comp ID jdk.graal.compiler.debug.GraalError.guarantee(boolean, String, Object)
graph Cost 8.0
Going to add 0 increment as we currently judge the cost to be 16
In comp ID jdk.vm.ci.hotspot.MetaspaceHandleObject.getMetaspacePointer()
graph Cost 78.0
Going to add 4 increment as we currently judge the cost to be 16
In comp ID jdk.graal.compiler.graph.NodeClass.getInputIterable(Node)
graph Cost 35.0
Going to add 2 increment as we currently judge the cost to be 16
In comp ID jdk.graal.compiler.graph.Node.inputs()
graph Cost 56.0
Going to add 3 increment as we currently judge the cost to be 16
In comp ID jdk.graal.compiler.graph.NodeClass$3.<init>(NodeClass, Node, long)
graph Cost 33.0
Going to add 2 increment as we currently judge the cost to be 16
In comp ID jdk.graal.compiler.java.BytecodeParser.getParent()
graph Cost 10.0
Going to add 0 increment as we currently judge the cost to be 16
In comp ID jdk.graal.compiler.lir.alloc.lsra.Interval.currentFrom()
graph Cost 15.0
Going to add 0 increment as we currently judge the cost to be 16
In comp ID jdk.graal.compiler.java.BciBlockMapping$BciBlock.setEndBci(int)
graph Cost 8.0
Going to add 0 increment as we currently judge the cost to be 16
In comp ID jdk.graal.compiler.graph.NodeClass$3.iterator()
graph Cost 37.0
Going to add 2 increment as we currently judge the cost to be 16
In comp ID org.graalvm.collections.EconomicMapImpl.getHashArray(int)
graph Cost 34.0
Going to add 2 increment as we currently judge the cost to be 16
In comp ID jdk.graal.compiler.core.common.type.IntegerStamp.upperBound()
graph Cost 8.0
Going to add 0 increment as we currently judge the cost to be 16
In comp ID jdk.vm.ci.code.ValueUtil.isRegister(Value)
graph Cost 14.0
Going to add 0 increment as we currently judge the cost to be 16
In comp ID org.graalvm.collections.EconomicMapImpl.getHashIndex(Object)
graph Cost 56.0
Going to add 3 increment as we currently judge the cost to be 16
In comp ID jdk.graal.compiler.core.common.cfg.BasicBlock.getDominatorNumber()
graph Cost 10.0
Going to add 0 increment as we currently judge the cost to be 16
In comp ID deltablue.Planner.newMark()
graph Cost 11.0
Going to add 0 increment as we currently judge the cost to be 16
In comp ID jdk.graal.compiler.bytecode.ResolvedJavaMethodBytecode.getMethod()
graph Cost 10.0
Going to add 0 increment as we currently judge the cost to be 16
In comp ID jdk.internal.misc.Unsafe.getInt(long)
graph Cost 8.0
Going to add 0 increment as we currently judge the cost to be 16
In comp ID deltablue.Planner.makePlan(Vector)
graph Cost 1.4408954E7
Going to add 900559 increment as we currently judge the cost to be 16
In comp ID deltablue.Planner.removePropagateFrom(Variable)
graph Cost 6.5194616E7
Going to add 4074663 increment as we currently judge the cost to be 16
In comp ID deltablue.Planner.projectionTest(int)
graph Cost 5.8065481E7
Going to add 3629092 increment as we currently judge the cost to be 16
